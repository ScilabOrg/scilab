<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) INRIA - 
 * 
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at    
 * http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" version="5.0-subset Scilab" xml:lang="en" xml:id="ilib_build">
  <info>
    <pubdate>$LastChangedDate: 2006-09-03 11:54:48 +0200 (Sun, 03 Sep 2006) $</pubdate>
  </info>
  <refnamediv>
    <refname>ilib_build</refname>
    <refpurpose> utility for shared library management</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <title>Calling Sequence</title>
    <synopsis>ilib_build(lib_name,table,files,libs [,makename,ldflags,cflags,fflags])</synopsis>
  </refsynopsisdiv>
  <refsection>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term>lib_name</term>
        <listitem>
          <para>a character string, the generic name of the library without path and extension.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>table</term>
        <listitem>
          <para>2 column string matrix giving the table of pairs 'scilab-name', 'interface name'</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>files</term>
        <listitem>
          <para>string matrix giving objects files needed for shared library creation</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>libs</term>
        <listitem>
          <para>string matrix giving extra libraries needed for shred library creation</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>makename</term>
        <listitem>
          <para>character string. The path of the Makefile file without extension.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>ldflags,cflags,fflags</term>
        <listitem>
          <para>character strings to provide options for the loader, the C compiler and the Fortran compiler.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsection>
  <refsection>
    <title>Description</title>
    <para>
    This tool is used to create shared libraries and to generate a 
    loader file which can be used to dynamically load the shared library 
    into Scilab with <literal>addinter</literal></para>
    <para>
    Many examples are provided in <literal>examples/interface-tour-so</literal>
    directory.</para>
  </refsection>
  <refsection>
    <title>Examples</title>
    <programlisting role="example"><![CDATA[

//Here with give a complete example on adding new primitive to Scilab
//create the procedure files
f1=['extern double fun2();'
    'void fun1(double *x, double *y)'
    '{*y=fun2(*x)/(*x);}'];

mputl(f1,'fun1.c')

f2=['#include <math.h>'
    'double fun2(double x)'
    '{ return( sin(x+1.));}'];
mputl(f2,'fun2.c');

//creating the interface file
i=['#include ""stack-c.h""'
	'#include ""stackTypeVariable.h""'
   'extern int fun1 ( double *x, double *y);'
   'int intfun1(char *fname)' 
   '{'
   '  int m1,n1,l1;'
   '  CheckRhs(1,1);'
   '  CheckLhs(1,1);'
   '  GetRhsVar(1, MATRIX_OF_DOUBLE_DATATYPE, &m1, &n1, &l1);'
   '  fun1(stk(l1),stk(l1));'
   '  LhsVar(1) = 1;'
   '  return 0;'
   '}'];
mputl(i,'intfun1.c')

//creating the shared library (a gateway, a Makefile and a loader are 
//generated. 

files=['fun1.o','fun2.o','intfun1.o'];
ilib_build('foo',['scifun1','intfun1'],files,[]);

// load the shared library 

exec loader.sce 

//using the new primitive
scifun1(33)
 
  ]]></programlisting>
  </refsection>
  <refsection>
    <title>See Also</title>
    <simplelist type="inline">
      <member>
        <link linkend="addinter">addinter</link>
      </member>
      <member>
        <link linkend="link">link</link>
      </member>
      <member>
        <link linkend="ilib_compile">ilib_compile</link>
      </member>
      <member>
        <link linkend="ilib_gen_Make">ilib_gen_Make</link>
      </member>
      <member>
        <link linkend="ilib_gen_gateway">ilib_gen_gateway</link>
      </member>
      <member>
        <link linkend="ilib_gen_loader">ilib_gen_loader</link>
      </member>
      <member>
        <link linkend="ilib_for_link">ilib_for_link</link>
      </member>
    </simplelist>
  </refsection>
</refentry>
