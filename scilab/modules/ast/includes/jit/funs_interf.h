/*
 *  Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 *  Copyright (C) 2014-2015 - Scilab Enterprises - Calixte DENIZET
 *
 *  This file must be used under the terms of the CeCILL.
 *  This source file is licensed as described in the file COPYING, which
 *  you should have received as part of this distribution.  The terms
 *  are also available at
 *  http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
 *
 */

// This file has been generated, so don't modify it by hand !!

#ifndef __FUNS_INTERF_H__
#define __FUNS_INTERF_H__

void dotpower_MbMc(const int64_t size, const int32_t * in0, const double * in1_re, const double * in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dotpower<bool, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dotpower_MbMd(const int64_t size, const int32_t * in0, const double * in1, double ** out) { jit::vect::binary<jit::functors::dotpower<bool, double, double>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<double>(out)); }
void dotpower_MbSc(const int64_t size, const int32_t * in0, const double in1_re, const double in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dotpower<bool, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<jit::cpx_t>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dotpower_MbSd(const int64_t size, const int32_t * in0, const double in1, double ** out) { jit::vect::binary<jit::functors::dotpower<bool, double, double>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<double>(out)); }
void dotpower_McMb(const int64_t size, const double * in0_re, const double * in0_im, const int32_t * in1, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dotpower<const jit::cpx_t &, bool, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dotpower_McMc(const int64_t size, const double * in0_re, const double * in0_im, const double * in1_re, const double * in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dotpower<const jit::cpx_t &, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dotpower_McMd(const int64_t size, const double * in0_re, const double * in0_im, const double * in1, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dotpower<const jit::cpx_t &, double, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dotpower_McSb(const int64_t size, const double * in0_re, const double * in0_im, const int32_t in1, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dotpower<const jit::cpx_t &, bool, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dotpower_McSc(const int64_t size, const double * in0_re, const double * in0_im, const double in1_re, const double in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dotpower<const jit::cpx_t &, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<jit::cpx_t>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dotpower_McSd(const int64_t size, const double * in0_re, const double * in0_im, const double in1, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dotpower<const jit::cpx_t &, double, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dotpower_MdMb(const int64_t size, const double * in0, const int32_t * in1, double ** out) { jit::vect::binary<jit::functors::dotpower<double, bool, double>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<double>(out)); }
void dotpower_MdMc(const int64_t size, const double * in0, const double * in1_re, const double * in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dotpower<double, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dotpower_MdMd(const int64_t size, const double * in0, const double * in1, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dotpower<double, double, jit::cpx_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dotpower_MdMi16(const int64_t size, const double * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dotpower<double, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotpower_MdMi32(const int64_t size, const double * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotpower<double, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotpower_MdMi64(const int64_t size, const double * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotpower<double, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotpower_MdMi8(const int64_t size, const double * in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::dotpower<double, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dotpower_MdMui16(const int64_t size, const double * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotpower<double, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotpower_MdMui32(const int64_t size, const double * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<double, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_MdMui64(const int64_t size, const double * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<double, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_MdMui8(const int64_t size, const double * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotpower<double, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotpower_MdSb(const int64_t size, const double * in0, const int32_t in1, double ** out) { jit::vect::binary<jit::functors::dotpower<double, bool, double>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<double>(out)); }
void dotpower_MdSc(const int64_t size, const double * in0, const double in1_re, const double in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dotpower<double, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<jit::cpx_t>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dotpower_MdSd(const int64_t size, const double * in0, const double in1, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dotpower<double, double, jit::cpx_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dotpower_MdSi16(const int64_t size, const double * in0, const int16_t in1, int16_t ** out) { jit::vect::binary<jit::functors::dotpower<double, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotpower_MdSi32(const int64_t size, const double * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::dotpower<double, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotpower_MdSi64(const int64_t size, const double * in0, const int64_t in1, int64_t ** out) { jit::vect::binary<jit::functors::dotpower<double, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotpower_MdSi8(const int64_t size, const double * in0, const int8_t in1, int8_t ** out) { jit::vect::binary<jit::functors::dotpower<double, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dotpower_MdSui16(const int64_t size, const double * in0, const uint16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotpower<double, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotpower_MdSui32(const int64_t size, const double * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<double, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_MdSui64(const int64_t size, const double * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<double, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_MdSui8(const int64_t size, const double * in0, const uint8_t in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotpower<double, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotpower_Mi16Md(const int64_t size, const int16_t * in0, const double * in1, int16_t ** out) { jit::vect::binary<jit::functors::dotpower<int16_t, double, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotpower_Mi16Mi16(const int64_t size, const int16_t * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dotpower<int16_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotpower_Mi16Mi32(const int64_t size, const int16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotpower<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotpower_Mi16Mi64(const int64_t size, const int16_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotpower<int16_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotpower_Mi16Mi8(const int64_t size, const int16_t * in0, const int8_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dotpower<int16_t, int8_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotpower_Mi16Mui16(const int64_t size, const int16_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotpower<int16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotpower_Mi16Mui32(const int64_t size, const int16_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<int16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Mi16Mui64(const int64_t size, const int16_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<int16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Mi16Mui8(const int64_t size, const int16_t * in0, const uint8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotpower<int16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotpower_Mi16Sd(const int64_t size, const int16_t * in0, const double in1, int16_t ** out) { jit::vect::binary<jit::functors::dotpower<int16_t, double, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotpower_Mi16Si16(const int64_t size, const int16_t * in0, const int16_t in1, int16_t ** out) { jit::vect::binary<jit::functors::dotpower<int16_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotpower_Mi16Si32(const int64_t size, const int16_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::dotpower<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotpower_Mi16Si64(const int64_t size, const int16_t * in0, const int64_t in1, int64_t ** out) { jit::vect::binary<jit::functors::dotpower<int16_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotpower_Mi16Si8(const int64_t size, const int16_t * in0, const int8_t in1, int16_t ** out) { jit::vect::binary<jit::functors::dotpower<int16_t, int8_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotpower_Mi16Sui16(const int64_t size, const int16_t * in0, const uint16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotpower<int16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotpower_Mi16Sui32(const int64_t size, const int16_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<int16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Mi16Sui64(const int64_t size, const int16_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<int16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Mi16Sui8(const int64_t size, const int16_t * in0, const uint8_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotpower<int16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotpower_Mi32Md(const int64_t size, const int32_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotpower<int32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotpower_Mi32Mi16(const int64_t size, const int32_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotpower<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotpower_Mi32Mi32(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotpower<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotpower_Mi32Mi64(const int64_t size, const int32_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotpower<int32_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotpower_Mi32Mi8(const int64_t size, const int32_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotpower<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotpower_Mi32Mui16(const int64_t size, const int32_t * in0, const uint16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<int32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Mi32Mui32(const int64_t size, const int32_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<int32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Mi32Mui64(const int64_t size, const int32_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<int32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Mi32Mui8(const int64_t size, const int32_t * in0, const uint8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<int32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Mi32Sd(const int64_t size, const int32_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::dotpower<int32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotpower_Mi32Si16(const int64_t size, const int32_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::dotpower<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotpower_Mi32Si32(const int64_t size, const int32_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::dotpower<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotpower_Mi32Si64(const int64_t size, const int32_t * in0, const int64_t in1, int64_t ** out) { jit::vect::binary<jit::functors::dotpower<int32_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotpower_Mi32Si8(const int64_t size, const int32_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::dotpower<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotpower_Mi32Sui16(const int64_t size, const int32_t * in0, const uint16_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<int32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Mi32Sui32(const int64_t size, const int32_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<int32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Mi32Sui64(const int64_t size, const int32_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<int32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Mi32Sui8(const int64_t size, const int32_t * in0, const uint8_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<int32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Mi64Md(const int64_t size, const int64_t * in0, const double * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotpower<int64_t, double, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotpower_Mi64Mi16(const int64_t size, const int64_t * in0, const int16_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotpower<int64_t, int16_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotpower_Mi64Mi32(const int64_t size, const int64_t * in0, const int32_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotpower<int64_t, int32_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotpower_Mi64Mi64(const int64_t size, const int64_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotpower<int64_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotpower_Mi64Mi8(const int64_t size, const int64_t * in0, const int8_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotpower<int64_t, int8_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotpower_Mi64Mui16(const int64_t size, const int64_t * in0, const uint16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<int64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Mi64Mui32(const int64_t size, const int64_t * in0, const uint32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<int64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Mi64Mui64(const int64_t size, const int64_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<int64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Mi64Mui8(const int64_t size, const int64_t * in0, const uint8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<int64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Mi64Sd(const int64_t size, const int64_t * in0, const double in1, int64_t ** out) { jit::vect::binary<jit::functors::dotpower<int64_t, double, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotpower_Mi64Si16(const int64_t size, const int64_t * in0, const int16_t in1, int64_t ** out) { jit::vect::binary<jit::functors::dotpower<int64_t, int16_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotpower_Mi64Si32(const int64_t size, const int64_t * in0, const int32_t in1, int64_t ** out) { jit::vect::binary<jit::functors::dotpower<int64_t, int32_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotpower_Mi64Si64(const int64_t size, const int64_t * in0, const int64_t in1, int64_t ** out) { jit::vect::binary<jit::functors::dotpower<int64_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotpower_Mi64Si8(const int64_t size, const int64_t * in0, const int8_t in1, int64_t ** out) { jit::vect::binary<jit::functors::dotpower<int64_t, int8_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotpower_Mi64Sui16(const int64_t size, const int64_t * in0, const uint16_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<int64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Mi64Sui32(const int64_t size, const int64_t * in0, const uint32_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<int64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Mi64Sui64(const int64_t size, const int64_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<int64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Mi64Sui8(const int64_t size, const int64_t * in0, const uint8_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<int64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Mi8Md(const int64_t size, const int8_t * in0, const double * in1, int8_t ** out) { jit::vect::binary<jit::functors::dotpower<int8_t, double, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dotpower_Mi8Mi16(const int64_t size, const int8_t * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dotpower<int8_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotpower_Mi8Mi32(const int64_t size, const int8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotpower<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotpower_Mi8Mi64(const int64_t size, const int8_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotpower<int8_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotpower_Mi8Mi8(const int64_t size, const int8_t * in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::dotpower<int8_t, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dotpower_Mi8Mui16(const int64_t size, const int8_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotpower<int8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotpower_Mi8Mui32(const int64_t size, const int8_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<int8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Mi8Mui64(const int64_t size, const int8_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<int8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Mi8Mui8(const int64_t size, const int8_t * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotpower<int8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotpower_Mi8Sd(const int64_t size, const int8_t * in0, const double in1, int8_t ** out) { jit::vect::binary<jit::functors::dotpower<int8_t, double, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dotpower_Mi8Si16(const int64_t size, const int8_t * in0, const int16_t in1, int16_t ** out) { jit::vect::binary<jit::functors::dotpower<int8_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotpower_Mi8Si32(const int64_t size, const int8_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::dotpower<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotpower_Mi8Si64(const int64_t size, const int8_t * in0, const int64_t in1, int64_t ** out) { jit::vect::binary<jit::functors::dotpower<int8_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotpower_Mi8Si8(const int64_t size, const int8_t * in0, const int8_t in1, int8_t ** out) { jit::vect::binary<jit::functors::dotpower<int8_t, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dotpower_Mi8Sui16(const int64_t size, const int8_t * in0, const uint16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotpower<int8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotpower_Mi8Sui32(const int64_t size, const int8_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<int8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Mi8Sui64(const int64_t size, const int8_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<int8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Mi8Sui8(const int64_t size, const int8_t * in0, const uint8_t in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotpower<int8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotpower_Mui16Md(const int64_t size, const uint16_t * in0, const double * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotpower<uint16_t, double, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotpower_Mui16Mi16(const int64_t size, const uint16_t * in0, const int16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotpower<uint16_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotpower_Mui16Mi32(const int64_t size, const uint16_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<uint16_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Mui16Mi64(const int64_t size, const uint16_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint16_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Mui16Mi8(const int64_t size, const uint16_t * in0, const int8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotpower<uint16_t, int8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotpower_Mui16Mui16(const int64_t size, const uint16_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotpower<uint16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotpower_Mui16Mui32(const int64_t size, const uint16_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<uint16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Mui16Mui64(const int64_t size, const uint16_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Mui16Mui8(const int64_t size, const uint16_t * in0, const uint8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotpower<uint16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotpower_Mui16Sd(const int64_t size, const uint16_t * in0, const double in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotpower<uint16_t, double, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotpower_Mui16Si16(const int64_t size, const uint16_t * in0, const int16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotpower<uint16_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotpower_Mui16Si32(const int64_t size, const uint16_t * in0, const int32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<uint16_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Mui16Si64(const int64_t size, const uint16_t * in0, const int64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint16_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Mui16Si8(const int64_t size, const uint16_t * in0, const int8_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotpower<uint16_t, int8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotpower_Mui16Sui16(const int64_t size, const uint16_t * in0, const uint16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotpower<uint16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotpower_Mui16Sui32(const int64_t size, const uint16_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<uint16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Mui16Sui64(const int64_t size, const uint16_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Mui16Sui8(const int64_t size, const uint16_t * in0, const uint8_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotpower<uint16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotpower_Mui32Md(const int64_t size, const uint32_t * in0, const double * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<uint32_t, double, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Mui32Mi16(const int64_t size, const uint32_t * in0, const int16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<uint32_t, int16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Mui32Mi32(const int64_t size, const uint32_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<uint32_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Mui32Mi64(const int64_t size, const uint32_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint32_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Mui32Mi8(const int64_t size, const uint32_t * in0, const int8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<uint32_t, int8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Mui32Mui16(const int64_t size, const uint32_t * in0, const uint16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<uint32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Mui32Mui32(const int64_t size, const uint32_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<uint32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Mui32Mui64(const int64_t size, const uint32_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Mui32Mui8(const int64_t size, const uint32_t * in0, const uint8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<uint32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Mui32Sd(const int64_t size, const uint32_t * in0, const double in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<uint32_t, double, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Mui32Si16(const int64_t size, const uint32_t * in0, const int16_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<uint32_t, int16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Mui32Si32(const int64_t size, const uint32_t * in0, const int32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<uint32_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Mui32Si64(const int64_t size, const uint32_t * in0, const int64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint32_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Mui32Si8(const int64_t size, const uint32_t * in0, const int8_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<uint32_t, int8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Mui32Sui16(const int64_t size, const uint32_t * in0, const uint16_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<uint32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Mui32Sui32(const int64_t size, const uint32_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<uint32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Mui32Sui64(const int64_t size, const uint32_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Mui32Sui8(const int64_t size, const uint32_t * in0, const uint8_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<uint32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Mui64Md(const int64_t size, const uint64_t * in0, const double * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint64_t, double, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Mui64Mi16(const int64_t size, const uint64_t * in0, const int16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint64_t, int16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Mui64Mi32(const int64_t size, const uint64_t * in0, const int32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint64_t, int32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Mui64Mi64(const int64_t size, const uint64_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint64_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Mui64Mi8(const int64_t size, const uint64_t * in0, const int8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint64_t, int8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Mui64Mui16(const int64_t size, const uint64_t * in0, const uint16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Mui64Mui32(const int64_t size, const uint64_t * in0, const uint32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Mui64Mui64(const int64_t size, const uint64_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Mui64Mui8(const int64_t size, const uint64_t * in0, const uint8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Mui64Sd(const int64_t size, const uint64_t * in0, const double in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint64_t, double, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Mui64Si16(const int64_t size, const uint64_t * in0, const int16_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint64_t, int16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Mui64Si32(const int64_t size, const uint64_t * in0, const int32_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint64_t, int32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Mui64Si64(const int64_t size, const uint64_t * in0, const int64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint64_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Mui64Si8(const int64_t size, const uint64_t * in0, const int8_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint64_t, int8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Mui64Sui16(const int64_t size, const uint64_t * in0, const uint16_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Mui64Sui32(const int64_t size, const uint64_t * in0, const uint32_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Mui64Sui64(const int64_t size, const uint64_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Mui64Sui8(const int64_t size, const uint64_t * in0, const uint8_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Mui8Md(const int64_t size, const uint8_t * in0, const double * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotpower<uint8_t, double, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotpower_Mui8Mi16(const int64_t size, const uint8_t * in0, const int16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotpower<uint8_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotpower_Mui8Mi32(const int64_t size, const uint8_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<uint8_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Mui8Mi64(const int64_t size, const uint8_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint8_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Mui8Mi8(const int64_t size, const uint8_t * in0, const int8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotpower<uint8_t, int8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotpower_Mui8Mui16(const int64_t size, const uint8_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotpower<uint8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotpower_Mui8Mui32(const int64_t size, const uint8_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<uint8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Mui8Mui64(const int64_t size, const uint8_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Mui8Mui8(const int64_t size, const uint8_t * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotpower<uint8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotpower_Mui8Sd(const int64_t size, const uint8_t * in0, const double in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotpower<uint8_t, double, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotpower_Mui8Si16(const int64_t size, const uint8_t * in0, const int16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotpower<uint8_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotpower_Mui8Si32(const int64_t size, const uint8_t * in0, const int32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<uint8_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Mui8Si64(const int64_t size, const uint8_t * in0, const int64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint8_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Mui8Si8(const int64_t size, const uint8_t * in0, const int8_t in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotpower<uint8_t, int8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotpower_Mui8Sui16(const int64_t size, const uint8_t * in0, const uint16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotpower<uint8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotpower_Mui8Sui32(const int64_t size, const uint8_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<uint8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Mui8Sui64(const int64_t size, const uint8_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Mui8Sui8(const int64_t size, const uint8_t * in0, const uint8_t in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotpower<uint8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotpower_SbMc(const int64_t size, const int32_t in0, const double * in1_re, const double * in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dotpower<bool, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dotpower_SbMd(const int64_t size, const int32_t in0, const double * in1, double ** out) { jit::vect::binary<jit::functors::dotpower<bool, double, double>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<double>(out)); }
void dotpower_ScMb(const int64_t size, const double in0_re, const double in0_im, const int32_t * in1, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dotpower<const jit::cpx_t &, bool, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t>(in0_re, in0_im), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dotpower_ScMc(const int64_t size, const double in0_re, const double in0_im, const double * in1_re, const double * in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dotpower<const jit::cpx_t &, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t>(in0_re, in0_im), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dotpower_ScMd(const int64_t size, const double in0_re, const double in0_im, const double * in1, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dotpower<const jit::cpx_t &, double, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t>(in0_re, in0_im), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dotpower_SdMb(const int64_t size, const double in0, const int32_t * in1, double ** out) { jit::vect::binary<jit::functors::dotpower<double, bool, double>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<double>(out)); }
void dotpower_SdMc(const int64_t size, const double in0, const double * in1_re, const double * in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dotpower<double, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dotpower_SdMd(const int64_t size, const double in0, const double * in1, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dotpower<double, double, jit::cpx_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dotpower_SdMi16(const int64_t size, const double in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dotpower<double, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotpower_SdMi32(const int64_t size, const double in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotpower<double, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotpower_SdMi64(const int64_t size, const double in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotpower<double, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotpower_SdMi8(const int64_t size, const double in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::dotpower<double, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dotpower_SdMui16(const int64_t size, const double in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotpower<double, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotpower_SdMui32(const int64_t size, const double in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<double, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_SdMui64(const int64_t size, const double in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<double, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_SdMui8(const int64_t size, const double in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotpower<double, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotpower_Si16Md(const int64_t size, const int16_t in0, const double * in1, int16_t ** out) { jit::vect::binary<jit::functors::dotpower<int16_t, double, int16_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotpower_Si16Mi16(const int64_t size, const int16_t in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dotpower<int16_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotpower_Si16Mi32(const int64_t size, const int16_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotpower<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotpower_Si16Mi64(const int64_t size, const int16_t in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotpower<int16_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotpower_Si16Mi8(const int64_t size, const int16_t in0, const int8_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dotpower<int16_t, int8_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotpower_Si16Mui16(const int64_t size, const int16_t in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotpower<int16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotpower_Si16Mui32(const int64_t size, const int16_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<int16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Si16Mui64(const int64_t size, const int16_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<int16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Si16Mui8(const int64_t size, const int16_t in0, const uint8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotpower<int16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotpower_Si32Md(const int64_t size, const int32_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotpower<int32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotpower_Si32Mi16(const int64_t size, const int32_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotpower<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotpower_Si32Mi32(const int64_t size, const int32_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotpower<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotpower_Si32Mi64(const int64_t size, const int32_t in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotpower<int32_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotpower_Si32Mi8(const int64_t size, const int32_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotpower<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotpower_Si32Mui16(const int64_t size, const int32_t in0, const uint16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<int32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Si32Mui32(const int64_t size, const int32_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<int32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Si32Mui64(const int64_t size, const int32_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<int32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Si32Mui8(const int64_t size, const int32_t in0, const uint8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<int32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Si64Md(const int64_t size, const int64_t in0, const double * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotpower<int64_t, double, int64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotpower_Si64Mi16(const int64_t size, const int64_t in0, const int16_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotpower<int64_t, int16_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotpower_Si64Mi32(const int64_t size, const int64_t in0, const int32_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotpower<int64_t, int32_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotpower_Si64Mi64(const int64_t size, const int64_t in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotpower<int64_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotpower_Si64Mi8(const int64_t size, const int64_t in0, const int8_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotpower<int64_t, int8_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotpower_Si64Mui16(const int64_t size, const int64_t in0, const uint16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<int64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Si64Mui32(const int64_t size, const int64_t in0, const uint32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<int64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Si64Mui64(const int64_t size, const int64_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<int64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Si64Mui8(const int64_t size, const int64_t in0, const uint8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<int64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Si8Md(const int64_t size, const int8_t in0, const double * in1, int8_t ** out) { jit::vect::binary<jit::functors::dotpower<int8_t, double, int8_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dotpower_Si8Mi16(const int64_t size, const int8_t in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dotpower<int8_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotpower_Si8Mi32(const int64_t size, const int8_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotpower<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotpower_Si8Mi64(const int64_t size, const int8_t in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotpower<int8_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotpower_Si8Mi8(const int64_t size, const int8_t in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::dotpower<int8_t, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dotpower_Si8Mui16(const int64_t size, const int8_t in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotpower<int8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotpower_Si8Mui32(const int64_t size, const int8_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<int8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Si8Mui64(const int64_t size, const int8_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<int8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Si8Mui8(const int64_t size, const int8_t in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotpower<int8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotpower_Sui16Md(const int64_t size, const uint16_t in0, const double * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotpower<uint16_t, double, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotpower_Sui16Mi16(const int64_t size, const uint16_t in0, const int16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotpower<uint16_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotpower_Sui16Mi32(const int64_t size, const uint16_t in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<uint16_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Sui16Mi64(const int64_t size, const uint16_t in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint16_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Sui16Mi8(const int64_t size, const uint16_t in0, const int8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotpower<uint16_t, int8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotpower_Sui16Mui16(const int64_t size, const uint16_t in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotpower<uint16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotpower_Sui16Mui32(const int64_t size, const uint16_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<uint16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Sui16Mui64(const int64_t size, const uint16_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Sui16Mui8(const int64_t size, const uint16_t in0, const uint8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotpower<uint16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotpower_Sui32Md(const int64_t size, const uint32_t in0, const double * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<uint32_t, double, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Sui32Mi16(const int64_t size, const uint32_t in0, const int16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<uint32_t, int16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Sui32Mi32(const int64_t size, const uint32_t in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<uint32_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Sui32Mi64(const int64_t size, const uint32_t in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint32_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Sui32Mi8(const int64_t size, const uint32_t in0, const int8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<uint32_t, int8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Sui32Mui16(const int64_t size, const uint32_t in0, const uint16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<uint32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Sui32Mui32(const int64_t size, const uint32_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<uint32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Sui32Mui64(const int64_t size, const uint32_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Sui32Mui8(const int64_t size, const uint32_t in0, const uint8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<uint32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Sui64Md(const int64_t size, const uint64_t in0, const double * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint64_t, double, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Sui64Mi16(const int64_t size, const uint64_t in0, const int16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint64_t, int16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Sui64Mi32(const int64_t size, const uint64_t in0, const int32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint64_t, int32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Sui64Mi64(const int64_t size, const uint64_t in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint64_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Sui64Mi8(const int64_t size, const uint64_t in0, const int8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint64_t, int8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Sui64Mui16(const int64_t size, const uint64_t in0, const uint16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Sui64Mui32(const int64_t size, const uint64_t in0, const uint32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Sui64Mui64(const int64_t size, const uint64_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Sui64Mui8(const int64_t size, const uint64_t in0, const uint8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Sui8Md(const int64_t size, const uint8_t in0, const double * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotpower<uint8_t, double, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotpower_Sui8Mi16(const int64_t size, const uint8_t in0, const int16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotpower<uint8_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotpower_Sui8Mi32(const int64_t size, const uint8_t in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<uint8_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Sui8Mi64(const int64_t size, const uint8_t in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint8_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Sui8Mi8(const int64_t size, const uint8_t in0, const int8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotpower<uint8_t, int8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotpower_Sui8Mui16(const int64_t size, const uint8_t in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotpower<uint8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotpower_Sui8Mui32(const int64_t size, const uint8_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<uint8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Sui8Mui64(const int64_t size, const uint8_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Sui8Mui8(const int64_t size, const uint8_t in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotpower<uint8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotpower_UbUc(const int64_t size, const int32_t * in0, const double * in1_re, const double * in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dotpower<bool, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dotpower_UbUd(const int64_t size, const int32_t * in0, const double * in1, double ** out) { jit::vect::binary<jit::functors::dotpower<bool, double, double>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<double>(out)); }
void dotpower_UcUb(const int64_t size, const double * in0_re, const double * in0_im, const int32_t * in1, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dotpower<const jit::cpx_t &, bool, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dotpower_UcUc(const int64_t size, const double * in0_re, const double * in0_im, const double * in1_re, const double * in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dotpower<const jit::cpx_t &, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dotpower_UcUd(const int64_t size, const double * in0_re, const double * in0_im, const double * in1, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dotpower<const jit::cpx_t &, double, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dotpower_UdUb(const int64_t size, const double * in0, const int32_t * in1, double ** out) { jit::vect::binary<jit::functors::dotpower<double, bool, double>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<double>(out)); }
void dotpower_UdUc(const int64_t size, const double * in0, const double * in1_re, const double * in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dotpower<double, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dotpower_UdUd(const int64_t size, const double * in0, const double * in1, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dotpower<double, double, jit::cpx_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dotpower_UdUi16(const int64_t size, const double * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dotpower<double, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotpower_UdUi32(const int64_t size, const double * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotpower<double, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotpower_UdUi64(const int64_t size, const double * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotpower<double, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotpower_UdUi8(const int64_t size, const double * in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::dotpower<double, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dotpower_UdUui16(const int64_t size, const double * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotpower<double, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotpower_UdUui32(const int64_t size, const double * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<double, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_UdUui64(const int64_t size, const double * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<double, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_UdUui8(const int64_t size, const double * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotpower<double, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotpower_Ui16Ud(const int64_t size, const int16_t * in0, const double * in1, int16_t ** out) { jit::vect::binary<jit::functors::dotpower<int16_t, double, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotpower_Ui16Ui16(const int64_t size, const int16_t * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dotpower<int16_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotpower_Ui16Ui32(const int64_t size, const int16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotpower<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotpower_Ui16Ui64(const int64_t size, const int16_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotpower<int16_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotpower_Ui16Ui8(const int64_t size, const int16_t * in0, const int8_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dotpower<int16_t, int8_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotpower_Ui16Uui16(const int64_t size, const int16_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotpower<int16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotpower_Ui16Uui32(const int64_t size, const int16_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<int16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Ui16Uui64(const int64_t size, const int16_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<int16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Ui16Uui8(const int64_t size, const int16_t * in0, const uint8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotpower<int16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotpower_Ui32Ud(const int64_t size, const int32_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotpower<int32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotpower_Ui32Ui16(const int64_t size, const int32_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotpower<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotpower_Ui32Ui32(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotpower<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotpower_Ui32Ui64(const int64_t size, const int32_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotpower<int32_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotpower_Ui32Ui8(const int64_t size, const int32_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotpower<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotpower_Ui32Uui16(const int64_t size, const int32_t * in0, const uint16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<int32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Ui32Uui32(const int64_t size, const int32_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<int32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Ui32Uui64(const int64_t size, const int32_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<int32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Ui32Uui8(const int64_t size, const int32_t * in0, const uint8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<int32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Ui64Ud(const int64_t size, const int64_t * in0, const double * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotpower<int64_t, double, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotpower_Ui64Ui16(const int64_t size, const int64_t * in0, const int16_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotpower<int64_t, int16_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotpower_Ui64Ui32(const int64_t size, const int64_t * in0, const int32_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotpower<int64_t, int32_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotpower_Ui64Ui64(const int64_t size, const int64_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotpower<int64_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotpower_Ui64Ui8(const int64_t size, const int64_t * in0, const int8_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotpower<int64_t, int8_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotpower_Ui64Uui16(const int64_t size, const int64_t * in0, const uint16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<int64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Ui64Uui32(const int64_t size, const int64_t * in0, const uint32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<int64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Ui64Uui64(const int64_t size, const int64_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<int64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Ui64Uui8(const int64_t size, const int64_t * in0, const uint8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<int64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Ui8Ud(const int64_t size, const int8_t * in0, const double * in1, int8_t ** out) { jit::vect::binary<jit::functors::dotpower<int8_t, double, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dotpower_Ui8Ui16(const int64_t size, const int8_t * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dotpower<int8_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotpower_Ui8Ui32(const int64_t size, const int8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotpower<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotpower_Ui8Ui64(const int64_t size, const int8_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotpower<int8_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotpower_Ui8Ui8(const int64_t size, const int8_t * in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::dotpower<int8_t, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dotpower_Ui8Uui16(const int64_t size, const int8_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotpower<int8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotpower_Ui8Uui32(const int64_t size, const int8_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<int8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Ui8Uui64(const int64_t size, const int8_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<int8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Ui8Uui8(const int64_t size, const int8_t * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotpower<int8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotpower_Uui16Ud(const int64_t size, const uint16_t * in0, const double * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotpower<uint16_t, double, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotpower_Uui16Ui16(const int64_t size, const uint16_t * in0, const int16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotpower<uint16_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotpower_Uui16Ui32(const int64_t size, const uint16_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<uint16_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Uui16Ui64(const int64_t size, const uint16_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint16_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Uui16Ui8(const int64_t size, const uint16_t * in0, const int8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotpower<uint16_t, int8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotpower_Uui16Uui16(const int64_t size, const uint16_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotpower<uint16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotpower_Uui16Uui32(const int64_t size, const uint16_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<uint16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Uui16Uui64(const int64_t size, const uint16_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Uui16Uui8(const int64_t size, const uint16_t * in0, const uint8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotpower<uint16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotpower_Uui32Ud(const int64_t size, const uint32_t * in0, const double * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<uint32_t, double, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Uui32Ui16(const int64_t size, const uint32_t * in0, const int16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<uint32_t, int16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Uui32Ui32(const int64_t size, const uint32_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<uint32_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Uui32Ui64(const int64_t size, const uint32_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint32_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Uui32Ui8(const int64_t size, const uint32_t * in0, const int8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<uint32_t, int8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Uui32Uui16(const int64_t size, const uint32_t * in0, const uint16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<uint32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Uui32Uui32(const int64_t size, const uint32_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<uint32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Uui32Uui64(const int64_t size, const uint32_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Uui32Uui8(const int64_t size, const uint32_t * in0, const uint8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<uint32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Uui64Ud(const int64_t size, const uint64_t * in0, const double * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint64_t, double, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Uui64Ui16(const int64_t size, const uint64_t * in0, const int16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint64_t, int16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Uui64Ui32(const int64_t size, const uint64_t * in0, const int32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint64_t, int32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Uui64Ui64(const int64_t size, const uint64_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint64_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Uui64Ui8(const int64_t size, const uint64_t * in0, const int8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint64_t, int8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Uui64Uui16(const int64_t size, const uint64_t * in0, const uint16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Uui64Uui32(const int64_t size, const uint64_t * in0, const uint32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Uui64Uui64(const int64_t size, const uint64_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Uui64Uui8(const int64_t size, const uint64_t * in0, const uint8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Uui8Ud(const int64_t size, const uint8_t * in0, const double * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotpower<uint8_t, double, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotpower_Uui8Ui16(const int64_t size, const uint8_t * in0, const int16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotpower<uint8_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotpower_Uui8Ui32(const int64_t size, const uint8_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<uint8_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Uui8Ui64(const int64_t size, const uint8_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint8_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Uui8Ui8(const int64_t size, const uint8_t * in0, const int8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotpower<uint8_t, int8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotpower_Uui8Uui16(const int64_t size, const uint8_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotpower<uint8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotpower_Uui8Uui32(const int64_t size, const uint8_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotpower<uint8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotpower_Uui8Uui64(const int64_t size, const uint8_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotpower<uint8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotpower_Uui8Uui8(const int64_t size, const uint8_t * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotpower<uint8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void ge_MdMd(const int64_t size, const double * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<double, double, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_MdMi16(const int64_t size, const double * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<double, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_MdMi32(const int64_t size, const double * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<double, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_MdMi64(const int64_t size, const double * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<double, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_MdMi8(const int64_t size, const double * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<double, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_MdMui16(const int64_t size, const double * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<double, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_MdMui32(const int64_t size, const double * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<double, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_MdMui64(const int64_t size, const double * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<double, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_MdMui8(const int64_t size, const double * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<double, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_MdSd(const int64_t size, const double * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<double, double, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_MdSi16(const int64_t size, const double * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<double, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_MdSi32(const int64_t size, const double * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<double, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_MdSi64(const int64_t size, const double * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<double, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_MdSi8(const int64_t size, const double * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<double, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_MdSui16(const int64_t size, const double * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<double, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_MdSui32(const int64_t size, const double * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<double, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_MdSui64(const int64_t size, const double * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<double, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_MdSui8(const int64_t size, const double * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<double, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi16Md(const int64_t size, const int16_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi16Mi16(const int64_t size, const int16_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi16Mi32(const int64_t size, const int16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi16Mi64(const int64_t size, const int16_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi16Mi8(const int64_t size, const int16_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi16Mui16(const int64_t size, const int16_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi16Mui32(const int64_t size, const int16_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi16Mui64(const int64_t size, const int16_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi16Mui8(const int64_t size, const int16_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi16Sd(const int64_t size, const int16_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi16Si16(const int64_t size, const int16_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi16Si32(const int64_t size, const int16_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi16Si64(const int64_t size, const int16_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi16Si8(const int64_t size, const int16_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi16Sui16(const int64_t size, const int16_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi16Sui32(const int64_t size, const int16_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi16Sui64(const int64_t size, const int16_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi16Sui8(const int64_t size, const int16_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi32Md(const int64_t size, const int32_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi32Mi16(const int64_t size, const int32_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi32Mi32(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi32Mi64(const int64_t size, const int32_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi32Mi8(const int64_t size, const int32_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi32Mui16(const int64_t size, const int32_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi32Mui32(const int64_t size, const int32_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi32Mui64(const int64_t size, const int32_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi32Mui8(const int64_t size, const int32_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi32Sd(const int64_t size, const int32_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi32Si16(const int64_t size, const int32_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi32Si32(const int64_t size, const int32_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi32Si64(const int64_t size, const int32_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi32Si8(const int64_t size, const int32_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi32Sui16(const int64_t size, const int32_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi32Sui32(const int64_t size, const int32_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi32Sui64(const int64_t size, const int32_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi32Sui8(const int64_t size, const int32_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi64Md(const int64_t size, const int64_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi64Mi16(const int64_t size, const int64_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi64Mi32(const int64_t size, const int64_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi64Mi64(const int64_t size, const int64_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi64Mi8(const int64_t size, const int64_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi64Mui16(const int64_t size, const int64_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi64Mui32(const int64_t size, const int64_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi64Mui64(const int64_t size, const int64_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi64Mui8(const int64_t size, const int64_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi64Sd(const int64_t size, const int64_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi64Si16(const int64_t size, const int64_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi64Si32(const int64_t size, const int64_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi64Si64(const int64_t size, const int64_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi64Si8(const int64_t size, const int64_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi64Sui16(const int64_t size, const int64_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi64Sui32(const int64_t size, const int64_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi64Sui64(const int64_t size, const int64_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi64Sui8(const int64_t size, const int64_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi8Md(const int64_t size, const int8_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi8Mi16(const int64_t size, const int8_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi8Mi32(const int64_t size, const int8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi8Mi64(const int64_t size, const int8_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi8Mi8(const int64_t size, const int8_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi8Mui16(const int64_t size, const int8_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi8Mui32(const int64_t size, const int8_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi8Mui64(const int64_t size, const int8_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi8Mui8(const int64_t size, const int8_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi8Sd(const int64_t size, const int8_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi8Si16(const int64_t size, const int8_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi8Si32(const int64_t size, const int8_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi8Si64(const int64_t size, const int8_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi8Si8(const int64_t size, const int8_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi8Sui16(const int64_t size, const int8_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi8Sui32(const int64_t size, const int8_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi8Sui64(const int64_t size, const int8_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mi8Sui8(const int64_t size, const int8_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui16Md(const int64_t size, const uint16_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui16Mi16(const int64_t size, const uint16_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui16Mi32(const int64_t size, const uint16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui16Mi64(const int64_t size, const uint16_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui16Mi8(const int64_t size, const uint16_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui16Mui16(const int64_t size, const uint16_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui16Mui32(const int64_t size, const uint16_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui16Mui64(const int64_t size, const uint16_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui16Mui8(const int64_t size, const uint16_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui16Sd(const int64_t size, const uint16_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui16Si16(const int64_t size, const uint16_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui16Si32(const int64_t size, const uint16_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui16Si64(const int64_t size, const uint16_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui16Si8(const int64_t size, const uint16_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui16Sui16(const int64_t size, const uint16_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui16Sui32(const int64_t size, const uint16_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui16Sui64(const int64_t size, const uint16_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui16Sui8(const int64_t size, const uint16_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui32Md(const int64_t size, const uint32_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui32Mi16(const int64_t size, const uint32_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui32Mi32(const int64_t size, const uint32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui32Mi64(const int64_t size, const uint32_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui32Mi8(const int64_t size, const uint32_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui32Mui16(const int64_t size, const uint32_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui32Mui32(const int64_t size, const uint32_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui32Mui64(const int64_t size, const uint32_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui32Mui8(const int64_t size, const uint32_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui32Sd(const int64_t size, const uint32_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui32Si16(const int64_t size, const uint32_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui32Si32(const int64_t size, const uint32_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui32Si64(const int64_t size, const uint32_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui32Si8(const int64_t size, const uint32_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui32Sui16(const int64_t size, const uint32_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui32Sui32(const int64_t size, const uint32_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui32Sui64(const int64_t size, const uint32_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui32Sui8(const int64_t size, const uint32_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui64Md(const int64_t size, const uint64_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui64Mi16(const int64_t size, const uint64_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui64Mi32(const int64_t size, const uint64_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui64Mi64(const int64_t size, const uint64_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui64Mi8(const int64_t size, const uint64_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui64Mui16(const int64_t size, const uint64_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui64Mui32(const int64_t size, const uint64_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui64Mui64(const int64_t size, const uint64_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui64Mui8(const int64_t size, const uint64_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui64Sd(const int64_t size, const uint64_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui64Si16(const int64_t size, const uint64_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui64Si32(const int64_t size, const uint64_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui64Si64(const int64_t size, const uint64_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui64Si8(const int64_t size, const uint64_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui64Sui16(const int64_t size, const uint64_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui64Sui32(const int64_t size, const uint64_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui64Sui64(const int64_t size, const uint64_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui64Sui8(const int64_t size, const uint64_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui8Md(const int64_t size, const uint8_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui8Mi16(const int64_t size, const uint8_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui8Mi32(const int64_t size, const uint8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui8Mi64(const int64_t size, const uint8_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui8Mi8(const int64_t size, const uint8_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui8Mui16(const int64_t size, const uint8_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui8Mui32(const int64_t size, const uint8_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui8Mui64(const int64_t size, const uint8_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui8Mui8(const int64_t size, const uint8_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui8Sd(const int64_t size, const uint8_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui8Si16(const int64_t size, const uint8_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui8Si32(const int64_t size, const uint8_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui8Si64(const int64_t size, const uint8_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui8Si8(const int64_t size, const uint8_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui8Sui16(const int64_t size, const uint8_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui8Sui32(const int64_t size, const uint8_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui8Sui64(const int64_t size, const uint8_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Mui8Sui8(const int64_t size, const uint8_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_SdMd(const int64_t size, const double in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<double, double, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_SdMi16(const int64_t size, const double in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<double, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_SdMi32(const int64_t size, const double in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<double, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_SdMi64(const int64_t size, const double in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<double, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_SdMi8(const int64_t size, const double in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<double, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_SdMui16(const int64_t size, const double in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<double, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_SdMui32(const int64_t size, const double in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<double, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_SdMui64(const int64_t size, const double in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<double, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_SdMui8(const int64_t size, const double in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<double, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Si16Md(const int64_t size, const int16_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Si16Mi16(const int64_t size, const int16_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Si16Mi32(const int64_t size, const int16_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Si16Mi64(const int64_t size, const int16_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Si16Mi8(const int64_t size, const int16_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Si16Mui16(const int64_t size, const int16_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Si16Mui32(const int64_t size, const int16_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Si16Mui64(const int64_t size, const int16_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Si16Mui8(const int64_t size, const int16_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Si32Md(const int64_t size, const int32_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Si32Mi16(const int64_t size, const int32_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Si32Mi32(const int64_t size, const int32_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Si32Mi64(const int64_t size, const int32_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Si32Mi8(const int64_t size, const int32_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Si32Mui16(const int64_t size, const int32_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Si32Mui32(const int64_t size, const int32_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Si32Mui64(const int64_t size, const int32_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Si32Mui8(const int64_t size, const int32_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Si64Md(const int64_t size, const int64_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Si64Mi16(const int64_t size, const int64_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Si64Mi32(const int64_t size, const int64_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Si64Mi64(const int64_t size, const int64_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Si64Mi8(const int64_t size, const int64_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Si64Mui16(const int64_t size, const int64_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Si64Mui32(const int64_t size, const int64_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Si64Mui64(const int64_t size, const int64_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Si64Mui8(const int64_t size, const int64_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Si8Md(const int64_t size, const int8_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Si8Mi16(const int64_t size, const int8_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Si8Mi32(const int64_t size, const int8_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Si8Mi64(const int64_t size, const int8_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Si8Mi8(const int64_t size, const int8_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Si8Mui16(const int64_t size, const int8_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Si8Mui32(const int64_t size, const int8_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Si8Mui64(const int64_t size, const int8_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Si8Mui8(const int64_t size, const int8_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Sui16Md(const int64_t size, const uint16_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Sui16Mi16(const int64_t size, const uint16_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Sui16Mi32(const int64_t size, const uint16_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Sui16Mi64(const int64_t size, const uint16_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Sui16Mi8(const int64_t size, const uint16_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Sui16Mui16(const int64_t size, const uint16_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Sui16Mui32(const int64_t size, const uint16_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Sui16Mui64(const int64_t size, const uint16_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Sui16Mui8(const int64_t size, const uint16_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Sui32Md(const int64_t size, const uint32_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Sui32Mi16(const int64_t size, const uint32_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Sui32Mi32(const int64_t size, const uint32_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Sui32Mi64(const int64_t size, const uint32_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Sui32Mi8(const int64_t size, const uint32_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Sui32Mui16(const int64_t size, const uint32_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Sui32Mui32(const int64_t size, const uint32_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Sui32Mui64(const int64_t size, const uint32_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Sui32Mui8(const int64_t size, const uint32_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Sui64Md(const int64_t size, const uint64_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Sui64Mi16(const int64_t size, const uint64_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Sui64Mi32(const int64_t size, const uint64_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Sui64Mi64(const int64_t size, const uint64_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Sui64Mi8(const int64_t size, const uint64_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Sui64Mui16(const int64_t size, const uint64_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Sui64Mui32(const int64_t size, const uint64_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Sui64Mui64(const int64_t size, const uint64_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Sui64Mui8(const int64_t size, const uint64_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Sui8Md(const int64_t size, const uint8_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Sui8Mi16(const int64_t size, const uint8_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Sui8Mi32(const int64_t size, const uint8_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Sui8Mi64(const int64_t size, const uint8_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Sui8Mi8(const int64_t size, const uint8_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Sui8Mui16(const int64_t size, const uint8_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Sui8Mui32(const int64_t size, const uint8_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Sui8Mui64(const int64_t size, const uint8_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Sui8Mui8(const int64_t size, const uint8_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_UdUd(const int64_t size, const double * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<double, double, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_UdUi16(const int64_t size, const double * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<double, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_UdUi32(const int64_t size, const double * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<double, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_UdUi64(const int64_t size, const double * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<double, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_UdUi8(const int64_t size, const double * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<double, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_UdUui16(const int64_t size, const double * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<double, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_UdUui32(const int64_t size, const double * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<double, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_UdUui64(const int64_t size, const double * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<double, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_UdUui8(const int64_t size, const double * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<double, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Ui16Ud(const int64_t size, const int16_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Ui16Ui16(const int64_t size, const int16_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Ui16Ui32(const int64_t size, const int16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Ui16Ui64(const int64_t size, const int16_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Ui16Ui8(const int64_t size, const int16_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Ui16Uui16(const int64_t size, const int16_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Ui16Uui32(const int64_t size, const int16_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Ui16Uui64(const int64_t size, const int16_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Ui16Uui8(const int64_t size, const int16_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Ui32Ud(const int64_t size, const int32_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Ui32Ui16(const int64_t size, const int32_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Ui32Ui32(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Ui32Ui64(const int64_t size, const int32_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Ui32Ui8(const int64_t size, const int32_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Ui32Uui16(const int64_t size, const int32_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Ui32Uui32(const int64_t size, const int32_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Ui32Uui64(const int64_t size, const int32_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Ui32Uui8(const int64_t size, const int32_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Ui64Ud(const int64_t size, const int64_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Ui64Ui16(const int64_t size, const int64_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Ui64Ui32(const int64_t size, const int64_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Ui64Ui64(const int64_t size, const int64_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Ui64Ui8(const int64_t size, const int64_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Ui64Uui16(const int64_t size, const int64_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Ui64Uui32(const int64_t size, const int64_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Ui64Uui64(const int64_t size, const int64_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Ui64Uui8(const int64_t size, const int64_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Ui8Ud(const int64_t size, const int8_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Ui8Ui16(const int64_t size, const int8_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Ui8Ui32(const int64_t size, const int8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Ui8Ui64(const int64_t size, const int8_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Ui8Ui8(const int64_t size, const int8_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Ui8Uui16(const int64_t size, const int8_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Ui8Uui32(const int64_t size, const int8_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Ui8Uui64(const int64_t size, const int8_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Ui8Uui8(const int64_t size, const int8_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<int8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Uui16Ud(const int64_t size, const uint16_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Uui16Ui16(const int64_t size, const uint16_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Uui16Ui32(const int64_t size, const uint16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Uui16Ui64(const int64_t size, const uint16_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Uui16Ui8(const int64_t size, const uint16_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Uui16Uui16(const int64_t size, const uint16_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Uui16Uui32(const int64_t size, const uint16_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Uui16Uui64(const int64_t size, const uint16_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Uui16Uui8(const int64_t size, const uint16_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Uui32Ud(const int64_t size, const uint32_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Uui32Ui16(const int64_t size, const uint32_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Uui32Ui32(const int64_t size, const uint32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Uui32Ui64(const int64_t size, const uint32_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Uui32Ui8(const int64_t size, const uint32_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Uui32Uui16(const int64_t size, const uint32_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Uui32Uui32(const int64_t size, const uint32_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Uui32Uui64(const int64_t size, const uint32_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Uui32Uui8(const int64_t size, const uint32_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Uui64Ud(const int64_t size, const uint64_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Uui64Ui16(const int64_t size, const uint64_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Uui64Ui32(const int64_t size, const uint64_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Uui64Ui64(const int64_t size, const uint64_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Uui64Ui8(const int64_t size, const uint64_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Uui64Uui16(const int64_t size, const uint64_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Uui64Uui32(const int64_t size, const uint64_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Uui64Uui64(const int64_t size, const uint64_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Uui64Uui8(const int64_t size, const uint64_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Uui8Ud(const int64_t size, const uint8_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Uui8Ui16(const int64_t size, const uint8_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Uui8Ui32(const int64_t size, const uint8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Uui8Ui64(const int64_t size, const uint8_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Uui8Ui8(const int64_t size, const uint8_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Uui8Uui16(const int64_t size, const uint8_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Uui8Uui32(const int64_t size, const uint8_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Uui8Uui64(const int64_t size, const uint8_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void ge_Uui8Uui8(const int64_t size, const uint8_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::ge<uint8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void or_MbMb(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::Or<bool, bool, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void or_MbMc(const int64_t size, const int32_t * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::Or<bool, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void or_MbMd(const int64_t size, const int32_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::Or<bool, double, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void or_MbSb(const int64_t size, const int32_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::Or<bool, bool, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<int32_t>(out)); }
void or_MbSc(const int64_t size, const int32_t * in0, const double in1_re, const double in1_im, int32_t ** out) { jit::vect::binary<jit::functors::Or<bool, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<jit::cpx_t>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void or_MbSd(const int64_t size, const int32_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::Or<bool, double, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void or_McMb(const int64_t size, const double * in0_re, const double * in0_im, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::Or<const jit::cpx_t &, bool, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void or_McMc(const int64_t size, const double * in0_re, const double * in0_im, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::Or<const jit::cpx_t &, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void or_McMd(const int64_t size, const double * in0_re, const double * in0_im, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::Or<const jit::cpx_t &, double, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void or_McSb(const int64_t size, const double * in0_re, const double * in0_im, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::Or<const jit::cpx_t &, bool, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<int32_t>(out)); }
void or_McSc(const int64_t size, const double * in0_re, const double * in0_im, const double in1_re, const double in1_im, int32_t ** out) { jit::vect::binary<jit::functors::Or<const jit::cpx_t &, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<jit::cpx_t>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void or_McSd(const int64_t size, const double * in0_re, const double * in0_im, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::Or<const jit::cpx_t &, double, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void or_MdMb(const int64_t size, const double * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::Or<double, bool, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void or_MdMc(const int64_t size, const double * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::Or<double, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void or_MdMd(const int64_t size, const double * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::Or<double, double, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void or_MdSb(const int64_t size, const double * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::Or<double, bool, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<int32_t>(out)); }
void or_MdSc(const int64_t size, const double * in0, const double in1_re, const double in1_im, int32_t ** out) { jit::vect::binary<jit::functors::Or<double, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<jit::cpx_t>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void or_MdSd(const int64_t size, const double * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::Or<double, double, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void or_Mi16Mi16(const int64_t size, const int16_t * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::Or<int16_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void or_Mi16Mi32(const int64_t size, const int16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::Or<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void or_Mi16Mi64(const int64_t size, const int16_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::Or<int16_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void or_Mi16Mi8(const int64_t size, const int16_t * in0, const int8_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::Or<int16_t, int8_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void or_Mi16Mui16(const int64_t size, const int16_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::Or<int16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void or_Mi16Mui32(const int64_t size, const int16_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<int16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Mi16Mui64(const int64_t size, const int16_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<int16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Mi16Mui8(const int64_t size, const int16_t * in0, const uint8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::Or<int16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void or_Mi16Si16(const int64_t size, const int16_t * in0, const int16_t in1, int16_t ** out) { jit::vect::binary<jit::functors::Or<int16_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int16_t>(out)); }
void or_Mi16Si32(const int64_t size, const int16_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::Or<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void or_Mi16Si64(const int64_t size, const int16_t * in0, const int64_t in1, int64_t ** out) { jit::vect::binary<jit::functors::Or<int16_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void or_Mi16Si8(const int64_t size, const int16_t * in0, const int8_t in1, int16_t ** out) { jit::vect::binary<jit::functors::Or<int16_t, int8_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int16_t>(out)); }
void or_Mi16Sui16(const int64_t size, const int16_t * in0, const uint16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::Or<int16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void or_Mi16Sui32(const int64_t size, const int16_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<int16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Mi16Sui64(const int64_t size, const int16_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<int16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Mi16Sui8(const int64_t size, const int16_t * in0, const uint8_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::Or<int16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void or_Mi32Mi16(const int64_t size, const int32_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::Or<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void or_Mi32Mi32(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::Or<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void or_Mi32Mi64(const int64_t size, const int32_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::Or<int32_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void or_Mi32Mi8(const int64_t size, const int32_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::Or<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void or_Mi32Mui16(const int64_t size, const int32_t * in0, const uint16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<int32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Mi32Mui32(const int64_t size, const int32_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<int32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Mi32Mui64(const int64_t size, const int32_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<int32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Mi32Mui8(const int64_t size, const int32_t * in0, const uint8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<int32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Mi32Si16(const int64_t size, const int32_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::Or<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void or_Mi32Si32(const int64_t size, const int32_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::Or<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void or_Mi32Si64(const int64_t size, const int32_t * in0, const int64_t in1, int64_t ** out) { jit::vect::binary<jit::functors::Or<int32_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void or_Mi32Si8(const int64_t size, const int32_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::Or<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void or_Mi32Sui16(const int64_t size, const int32_t * in0, const uint16_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<int32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Mi32Sui32(const int64_t size, const int32_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<int32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Mi32Sui64(const int64_t size, const int32_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<int32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Mi32Sui8(const int64_t size, const int32_t * in0, const uint8_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<int32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Mi64Mi16(const int64_t size, const int64_t * in0, const int16_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::Or<int64_t, int16_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void or_Mi64Mi32(const int64_t size, const int64_t * in0, const int32_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::Or<int64_t, int32_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void or_Mi64Mi64(const int64_t size, const int64_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::Or<int64_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void or_Mi64Mi8(const int64_t size, const int64_t * in0, const int8_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::Or<int64_t, int8_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void or_Mi64Mui16(const int64_t size, const int64_t * in0, const uint16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<int64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Mi64Mui32(const int64_t size, const int64_t * in0, const uint32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<int64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Mi64Mui64(const int64_t size, const int64_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<int64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Mi64Mui8(const int64_t size, const int64_t * in0, const uint8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<int64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Mi64Si16(const int64_t size, const int64_t * in0, const int16_t in1, int64_t ** out) { jit::vect::binary<jit::functors::Or<int64_t, int16_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void or_Mi64Si32(const int64_t size, const int64_t * in0, const int32_t in1, int64_t ** out) { jit::vect::binary<jit::functors::Or<int64_t, int32_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void or_Mi64Si64(const int64_t size, const int64_t * in0, const int64_t in1, int64_t ** out) { jit::vect::binary<jit::functors::Or<int64_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void or_Mi64Si8(const int64_t size, const int64_t * in0, const int8_t in1, int64_t ** out) { jit::vect::binary<jit::functors::Or<int64_t, int8_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void or_Mi64Sui16(const int64_t size, const int64_t * in0, const uint16_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<int64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Mi64Sui32(const int64_t size, const int64_t * in0, const uint32_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<int64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Mi64Sui64(const int64_t size, const int64_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<int64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Mi64Sui8(const int64_t size, const int64_t * in0, const uint8_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<int64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Mi8Mi16(const int64_t size, const int8_t * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::Or<int8_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void or_Mi8Mi32(const int64_t size, const int8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::Or<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void or_Mi8Mi64(const int64_t size, const int8_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::Or<int8_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void or_Mi8Mi8(const int64_t size, const int8_t * in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::Or<int8_t, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void or_Mi8Mui16(const int64_t size, const int8_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::Or<int8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void or_Mi8Mui32(const int64_t size, const int8_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<int8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Mi8Mui64(const int64_t size, const int8_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<int8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Mi8Mui8(const int64_t size, const int8_t * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::Or<int8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void or_Mi8Si16(const int64_t size, const int8_t * in0, const int16_t in1, int16_t ** out) { jit::vect::binary<jit::functors::Or<int8_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int16_t>(out)); }
void or_Mi8Si32(const int64_t size, const int8_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::Or<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void or_Mi8Si64(const int64_t size, const int8_t * in0, const int64_t in1, int64_t ** out) { jit::vect::binary<jit::functors::Or<int8_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void or_Mi8Si8(const int64_t size, const int8_t * in0, const int8_t in1, int8_t ** out) { jit::vect::binary<jit::functors::Or<int8_t, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int8_t>(out)); }
void or_Mi8Sui16(const int64_t size, const int8_t * in0, const uint16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::Or<int8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void or_Mi8Sui32(const int64_t size, const int8_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<int8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Mi8Sui64(const int64_t size, const int8_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<int8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Mi8Sui8(const int64_t size, const int8_t * in0, const uint8_t in1, uint8_t ** out) { jit::vect::binary<jit::functors::Or<int8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void or_Mui16Mi16(const int64_t size, const uint16_t * in0, const int16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::Or<uint16_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void or_Mui16Mi32(const int64_t size, const uint16_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<uint16_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Mui16Mi64(const int64_t size, const uint16_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint16_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Mui16Mi8(const int64_t size, const uint16_t * in0, const int8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::Or<uint16_t, int8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void or_Mui16Mui16(const int64_t size, const uint16_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::Or<uint16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void or_Mui16Mui32(const int64_t size, const uint16_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<uint16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Mui16Mui64(const int64_t size, const uint16_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Mui16Mui8(const int64_t size, const uint16_t * in0, const uint8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::Or<uint16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void or_Mui16Si16(const int64_t size, const uint16_t * in0, const int16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::Or<uint16_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void or_Mui16Si32(const int64_t size, const uint16_t * in0, const int32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<uint16_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Mui16Si64(const int64_t size, const uint16_t * in0, const int64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint16_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Mui16Si8(const int64_t size, const uint16_t * in0, const int8_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::Or<uint16_t, int8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void or_Mui16Sui16(const int64_t size, const uint16_t * in0, const uint16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::Or<uint16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void or_Mui16Sui32(const int64_t size, const uint16_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<uint16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Mui16Sui64(const int64_t size, const uint16_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Mui16Sui8(const int64_t size, const uint16_t * in0, const uint8_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::Or<uint16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void or_Mui32Mi16(const int64_t size, const uint32_t * in0, const int16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<uint32_t, int16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Mui32Mi32(const int64_t size, const uint32_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<uint32_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Mui32Mi64(const int64_t size, const uint32_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint32_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Mui32Mi8(const int64_t size, const uint32_t * in0, const int8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<uint32_t, int8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Mui32Mui16(const int64_t size, const uint32_t * in0, const uint16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<uint32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Mui32Mui32(const int64_t size, const uint32_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<uint32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Mui32Mui64(const int64_t size, const uint32_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Mui32Mui8(const int64_t size, const uint32_t * in0, const uint8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<uint32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Mui32Si16(const int64_t size, const uint32_t * in0, const int16_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<uint32_t, int16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Mui32Si32(const int64_t size, const uint32_t * in0, const int32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<uint32_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Mui32Si64(const int64_t size, const uint32_t * in0, const int64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint32_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Mui32Si8(const int64_t size, const uint32_t * in0, const int8_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<uint32_t, int8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Mui32Sui16(const int64_t size, const uint32_t * in0, const uint16_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<uint32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Mui32Sui32(const int64_t size, const uint32_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<uint32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Mui32Sui64(const int64_t size, const uint32_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Mui32Sui8(const int64_t size, const uint32_t * in0, const uint8_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<uint32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Mui64Mi16(const int64_t size, const uint64_t * in0, const int16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint64_t, int16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Mui64Mi32(const int64_t size, const uint64_t * in0, const int32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint64_t, int32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Mui64Mi64(const int64_t size, const uint64_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint64_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Mui64Mi8(const int64_t size, const uint64_t * in0, const int8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint64_t, int8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Mui64Mui16(const int64_t size, const uint64_t * in0, const uint16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Mui64Mui32(const int64_t size, const uint64_t * in0, const uint32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Mui64Mui64(const int64_t size, const uint64_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Mui64Mui8(const int64_t size, const uint64_t * in0, const uint8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Mui64Si16(const int64_t size, const uint64_t * in0, const int16_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint64_t, int16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Mui64Si32(const int64_t size, const uint64_t * in0, const int32_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint64_t, int32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Mui64Si64(const int64_t size, const uint64_t * in0, const int64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint64_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Mui64Si8(const int64_t size, const uint64_t * in0, const int8_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint64_t, int8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Mui64Sui16(const int64_t size, const uint64_t * in0, const uint16_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Mui64Sui32(const int64_t size, const uint64_t * in0, const uint32_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Mui64Sui64(const int64_t size, const uint64_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Mui64Sui8(const int64_t size, const uint64_t * in0, const uint8_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Mui8Mi16(const int64_t size, const uint8_t * in0, const int16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::Or<uint8_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void or_Mui8Mi32(const int64_t size, const uint8_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<uint8_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Mui8Mi64(const int64_t size, const uint8_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint8_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Mui8Mi8(const int64_t size, const uint8_t * in0, const int8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::Or<uint8_t, int8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void or_Mui8Mui16(const int64_t size, const uint8_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::Or<uint8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void or_Mui8Mui32(const int64_t size, const uint8_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<uint8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Mui8Mui64(const int64_t size, const uint8_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Mui8Mui8(const int64_t size, const uint8_t * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::Or<uint8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void or_Mui8Si16(const int64_t size, const uint8_t * in0, const int16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::Or<uint8_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void or_Mui8Si32(const int64_t size, const uint8_t * in0, const int32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<uint8_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Mui8Si64(const int64_t size, const uint8_t * in0, const int64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint8_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Mui8Si8(const int64_t size, const uint8_t * in0, const int8_t in1, uint8_t ** out) { jit::vect::binary<jit::functors::Or<uint8_t, int8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void or_Mui8Sui16(const int64_t size, const uint8_t * in0, const uint16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::Or<uint8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void or_Mui8Sui32(const int64_t size, const uint8_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<uint8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Mui8Sui64(const int64_t size, const uint8_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Mui8Sui8(const int64_t size, const uint8_t * in0, const uint8_t in1, uint8_t ** out) { jit::vect::binary<jit::functors::Or<uint8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void or_SbMb(const int64_t size, const int32_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::Or<bool, bool, int32_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void or_SbMc(const int64_t size, const int32_t in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::Or<bool, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void or_SbMd(const int64_t size, const int32_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::Or<bool, double, int32_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void or_ScMb(const int64_t size, const double in0_re, const double in0_im, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::Or<const jit::cpx_t &, bool, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t>(in0_re, in0_im), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void or_ScMc(const int64_t size, const double in0_re, const double in0_im, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::Or<const jit::cpx_t &, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t>(in0_re, in0_im), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void or_ScMd(const int64_t size, const double in0_re, const double in0_im, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::Or<const jit::cpx_t &, double, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t>(in0_re, in0_im), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void or_SdMb(const int64_t size, const double in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::Or<double, bool, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void or_SdMc(const int64_t size, const double in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::Or<double, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void or_SdMd(const int64_t size, const double in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::Or<double, double, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void or_Si16Mi16(const int64_t size, const int16_t in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::Or<int16_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void or_Si16Mi32(const int64_t size, const int16_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::Or<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void or_Si16Mi64(const int64_t size, const int16_t in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::Or<int16_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void or_Si16Mi8(const int64_t size, const int16_t in0, const int8_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::Or<int16_t, int8_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void or_Si16Mui16(const int64_t size, const int16_t in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::Or<int16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void or_Si16Mui32(const int64_t size, const int16_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<int16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Si16Mui64(const int64_t size, const int16_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<int16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Si16Mui8(const int64_t size, const int16_t in0, const uint8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::Or<int16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void or_Si32Mi16(const int64_t size, const int32_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::Or<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void or_Si32Mi32(const int64_t size, const int32_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::Or<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void or_Si32Mi64(const int64_t size, const int32_t in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::Or<int32_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void or_Si32Mi8(const int64_t size, const int32_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::Or<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void or_Si32Mui16(const int64_t size, const int32_t in0, const uint16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<int32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Si32Mui32(const int64_t size, const int32_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<int32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Si32Mui64(const int64_t size, const int32_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<int32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Si32Mui8(const int64_t size, const int32_t in0, const uint8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<int32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Si64Mi16(const int64_t size, const int64_t in0, const int16_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::Or<int64_t, int16_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void or_Si64Mi32(const int64_t size, const int64_t in0, const int32_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::Or<int64_t, int32_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void or_Si64Mi64(const int64_t size, const int64_t in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::Or<int64_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void or_Si64Mi8(const int64_t size, const int64_t in0, const int8_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::Or<int64_t, int8_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void or_Si64Mui16(const int64_t size, const int64_t in0, const uint16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<int64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Si64Mui32(const int64_t size, const int64_t in0, const uint32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<int64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Si64Mui64(const int64_t size, const int64_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<int64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Si64Mui8(const int64_t size, const int64_t in0, const uint8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<int64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Si8Mi16(const int64_t size, const int8_t in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::Or<int8_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void or_Si8Mi32(const int64_t size, const int8_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::Or<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void or_Si8Mi64(const int64_t size, const int8_t in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::Or<int8_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void or_Si8Mi8(const int64_t size, const int8_t in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::Or<int8_t, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void or_Si8Mui16(const int64_t size, const int8_t in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::Or<int8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void or_Si8Mui32(const int64_t size, const int8_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<int8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Si8Mui64(const int64_t size, const int8_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<int8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Si8Mui8(const int64_t size, const int8_t in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::Or<int8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void or_Sui16Mi16(const int64_t size, const uint16_t in0, const int16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::Or<uint16_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void or_Sui16Mi32(const int64_t size, const uint16_t in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<uint16_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Sui16Mi64(const int64_t size, const uint16_t in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint16_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Sui16Mi8(const int64_t size, const uint16_t in0, const int8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::Or<uint16_t, int8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void or_Sui16Mui16(const int64_t size, const uint16_t in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::Or<uint16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void or_Sui16Mui32(const int64_t size, const uint16_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<uint16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Sui16Mui64(const int64_t size, const uint16_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Sui16Mui8(const int64_t size, const uint16_t in0, const uint8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::Or<uint16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void or_Sui32Mi16(const int64_t size, const uint32_t in0, const int16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<uint32_t, int16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Sui32Mi32(const int64_t size, const uint32_t in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<uint32_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Sui32Mi64(const int64_t size, const uint32_t in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint32_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Sui32Mi8(const int64_t size, const uint32_t in0, const int8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<uint32_t, int8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Sui32Mui16(const int64_t size, const uint32_t in0, const uint16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<uint32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Sui32Mui32(const int64_t size, const uint32_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<uint32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Sui32Mui64(const int64_t size, const uint32_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Sui32Mui8(const int64_t size, const uint32_t in0, const uint8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<uint32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Sui64Mi16(const int64_t size, const uint64_t in0, const int16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint64_t, int16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Sui64Mi32(const int64_t size, const uint64_t in0, const int32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint64_t, int32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Sui64Mi64(const int64_t size, const uint64_t in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint64_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Sui64Mi8(const int64_t size, const uint64_t in0, const int8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint64_t, int8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Sui64Mui16(const int64_t size, const uint64_t in0, const uint16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Sui64Mui32(const int64_t size, const uint64_t in0, const uint32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Sui64Mui64(const int64_t size, const uint64_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Sui64Mui8(const int64_t size, const uint64_t in0, const uint8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Sui8Mi16(const int64_t size, const uint8_t in0, const int16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::Or<uint8_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void or_Sui8Mi32(const int64_t size, const uint8_t in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<uint8_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Sui8Mi64(const int64_t size, const uint8_t in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint8_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Sui8Mi8(const int64_t size, const uint8_t in0, const int8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::Or<uint8_t, int8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void or_Sui8Mui16(const int64_t size, const uint8_t in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::Or<uint8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void or_Sui8Mui32(const int64_t size, const uint8_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<uint8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Sui8Mui64(const int64_t size, const uint8_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Sui8Mui8(const int64_t size, const uint8_t in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::Or<uint8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void or_UbUb(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::Or<bool, bool, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void or_UbUc(const int64_t size, const int32_t * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::Or<bool, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void or_UbUd(const int64_t size, const int32_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::Or<bool, double, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void or_UcUb(const int64_t size, const double * in0_re, const double * in0_im, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::Or<const jit::cpx_t &, bool, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void or_UcUc(const int64_t size, const double * in0_re, const double * in0_im, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::Or<const jit::cpx_t &, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void or_UcUd(const int64_t size, const double * in0_re, const double * in0_im, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::Or<const jit::cpx_t &, double, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void or_UdUb(const int64_t size, const double * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::Or<double, bool, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void or_UdUc(const int64_t size, const double * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::Or<double, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void or_UdUd(const int64_t size, const double * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::Or<double, double, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void or_Ui16Ui16(const int64_t size, const int16_t * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::Or<int16_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void or_Ui16Ui32(const int64_t size, const int16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::Or<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void or_Ui16Ui64(const int64_t size, const int16_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::Or<int16_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void or_Ui16Ui8(const int64_t size, const int16_t * in0, const int8_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::Or<int16_t, int8_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void or_Ui16Uui16(const int64_t size, const int16_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::Or<int16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void or_Ui16Uui32(const int64_t size, const int16_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<int16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Ui16Uui64(const int64_t size, const int16_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<int16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Ui16Uui8(const int64_t size, const int16_t * in0, const uint8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::Or<int16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void or_Ui32Ui16(const int64_t size, const int32_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::Or<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void or_Ui32Ui32(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::Or<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void or_Ui32Ui64(const int64_t size, const int32_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::Or<int32_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void or_Ui32Ui8(const int64_t size, const int32_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::Or<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void or_Ui32Uui16(const int64_t size, const int32_t * in0, const uint16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<int32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Ui32Uui32(const int64_t size, const int32_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<int32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Ui32Uui64(const int64_t size, const int32_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<int32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Ui32Uui8(const int64_t size, const int32_t * in0, const uint8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<int32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Ui64Ui16(const int64_t size, const int64_t * in0, const int16_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::Or<int64_t, int16_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void or_Ui64Ui32(const int64_t size, const int64_t * in0, const int32_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::Or<int64_t, int32_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void or_Ui64Ui64(const int64_t size, const int64_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::Or<int64_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void or_Ui64Ui8(const int64_t size, const int64_t * in0, const int8_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::Or<int64_t, int8_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void or_Ui64Uui16(const int64_t size, const int64_t * in0, const uint16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<int64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Ui64Uui32(const int64_t size, const int64_t * in0, const uint32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<int64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Ui64Uui64(const int64_t size, const int64_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<int64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Ui64Uui8(const int64_t size, const int64_t * in0, const uint8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<int64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Ui8Ui16(const int64_t size, const int8_t * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::Or<int8_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void or_Ui8Ui32(const int64_t size, const int8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::Or<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void or_Ui8Ui64(const int64_t size, const int8_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::Or<int8_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void or_Ui8Ui8(const int64_t size, const int8_t * in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::Or<int8_t, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void or_Ui8Uui16(const int64_t size, const int8_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::Or<int8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void or_Ui8Uui32(const int64_t size, const int8_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<int8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Ui8Uui64(const int64_t size, const int8_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<int8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Ui8Uui8(const int64_t size, const int8_t * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::Or<int8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void or_Uui16Ui16(const int64_t size, const uint16_t * in0, const int16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::Or<uint16_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void or_Uui16Ui32(const int64_t size, const uint16_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<uint16_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Uui16Ui64(const int64_t size, const uint16_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint16_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Uui16Ui8(const int64_t size, const uint16_t * in0, const int8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::Or<uint16_t, int8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void or_Uui16Uui16(const int64_t size, const uint16_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::Or<uint16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void or_Uui16Uui32(const int64_t size, const uint16_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<uint16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Uui16Uui64(const int64_t size, const uint16_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Uui16Uui8(const int64_t size, const uint16_t * in0, const uint8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::Or<uint16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void or_Uui32Ui16(const int64_t size, const uint32_t * in0, const int16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<uint32_t, int16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Uui32Ui32(const int64_t size, const uint32_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<uint32_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Uui32Ui64(const int64_t size, const uint32_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint32_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Uui32Ui8(const int64_t size, const uint32_t * in0, const int8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<uint32_t, int8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Uui32Uui16(const int64_t size, const uint32_t * in0, const uint16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<uint32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Uui32Uui32(const int64_t size, const uint32_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<uint32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Uui32Uui64(const int64_t size, const uint32_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Uui32Uui8(const int64_t size, const uint32_t * in0, const uint8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<uint32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Uui64Ui16(const int64_t size, const uint64_t * in0, const int16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint64_t, int16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Uui64Ui32(const int64_t size, const uint64_t * in0, const int32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint64_t, int32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Uui64Ui64(const int64_t size, const uint64_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint64_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Uui64Ui8(const int64_t size, const uint64_t * in0, const int8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint64_t, int8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Uui64Uui16(const int64_t size, const uint64_t * in0, const uint16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Uui64Uui32(const int64_t size, const uint64_t * in0, const uint32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Uui64Uui64(const int64_t size, const uint64_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Uui64Uui8(const int64_t size, const uint64_t * in0, const uint8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Uui8Ui16(const int64_t size, const uint8_t * in0, const int16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::Or<uint8_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void or_Uui8Ui32(const int64_t size, const uint8_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<uint8_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Uui8Ui64(const int64_t size, const uint8_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint8_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Uui8Ui8(const int64_t size, const uint8_t * in0, const int8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::Or<uint8_t, int8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void or_Uui8Uui16(const int64_t size, const uint8_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::Or<uint8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void or_Uui8Uui32(const int64_t size, const uint8_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::Or<uint8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void or_Uui8Uui64(const int64_t size, const uint8_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::Or<uint8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void or_Uui8Uui8(const int64_t size, const uint8_t * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::Or<uint8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void neg_Mb(const int64_t size, const int32_t * in0, int32_t ** out) { jit::vect::unary<jit::functors::neg<bool, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapOut<int32_t>(out)); }
void neg_Mc(const int64_t size, const double * in0_re, const double * in0_im, int32_t ** out) { jit::vect::unary<jit::functors::neg<const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapOut<int32_t>(out)); }
void neg_Md(const int64_t size, const double * in0, int32_t ** out) { jit::vect::unary<jit::functors::neg<double, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapOut<int32_t>(out)); }
void neg_Mi16(const int64_t size, const int16_t * in0, int16_t ** out) { jit::vect::unary<jit::functors::neg<int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapOut<int16_t>(out)); }
void neg_Mi32(const int64_t size, const int32_t * in0, int32_t ** out) { jit::vect::unary<jit::functors::neg<int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapOut<int32_t>(out)); }
void neg_Mi64(const int64_t size, const int64_t * in0, int64_t ** out) { jit::vect::unary<jit::functors::neg<int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapOut<int64_t>(out)); }
void neg_Mi8(const int64_t size, const int8_t * in0, int8_t ** out) { jit::vect::unary<jit::functors::neg<int8_t, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapOut<int8_t>(out)); }
void neg_Mui16(const int64_t size, const uint16_t * in0, uint16_t ** out) { jit::vect::unary<jit::functors::neg<uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapOut<uint16_t>(out)); }
void neg_Mui32(const int64_t size, const uint32_t * in0, uint32_t ** out) { jit::vect::unary<jit::functors::neg<uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapOut<uint32_t>(out)); }
void neg_Mui64(const int64_t size, const uint64_t * in0, uint64_t ** out) { jit::vect::unary<jit::functors::neg<uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapOut<uint64_t>(out)); }
void neg_Mui8(const int64_t size, const uint8_t * in0, uint8_t ** out) { jit::vect::unary<jit::functors::neg<uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapOut<uint8_t>(out)); }
void abs_Mc(const int64_t size, const double * in0_re, const double * in0_im, double ** out) { jit::vect::unary<jit::functors::abs<const jit::cpx_t &, double>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapOut<double>(out)); }
void abs_Md(const int64_t size, const double * in0, double ** out) { jit::vect::unary<jit::functors::abs<double, double>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapOut<double>(out)); }
void abs_Mi16(const int64_t size, const int16_t * in0, int16_t ** out) { jit::vect::unary<jit::functors::abs<int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapOut<int16_t>(out)); }
void abs_Mi32(const int64_t size, const int32_t * in0, int32_t ** out) { jit::vect::unary<jit::functors::abs<int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapOut<int32_t>(out)); }
void abs_Mi64(const int64_t size, const int64_t * in0, int64_t ** out) { jit::vect::unary<jit::functors::abs<int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapOut<int64_t>(out)); }
void abs_Mi8(const int64_t size, const int8_t * in0, int8_t ** out) { jit::vect::unary<jit::functors::abs<int8_t, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapOut<int8_t>(out)); }
void abs_Mui16(const int64_t size, const uint16_t * in0, uint16_t ** out) { jit::vect::unary<jit::functors::abs<uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapOut<uint16_t>(out)); }
void abs_Mui32(const int64_t size, const uint32_t * in0, uint32_t ** out) { jit::vect::unary<jit::functors::abs<uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapOut<uint32_t>(out)); }
void abs_Mui64(const int64_t size, const uint64_t * in0, uint64_t ** out) { jit::vect::unary<jit::functors::abs<uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapOut<uint64_t>(out)); }
void abs_Mui8(const int64_t size, const uint8_t * in0, uint8_t ** out) { jit::vect::unary<jit::functors::abs<uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapOut<uint8_t>(out)); }
void cosh_Mc(const int64_t size, const double * in0_re, const double * in0_im, double ** out_re, double ** out_im) { jit::vect::unary<jit::functors::cosh<const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void cosh_Md(const int64_t size, const double * in0, double ** out) { jit::vect::unary<jit::functors::cosh<double, double>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapOut<double>(out)); }
void int16_Md(const int64_t size, const double * in0, int16_t ** out) { jit::vect::unary<jit::functors::int16<double, int16_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapOut<int16_t>(out)); }
void int16_Mi16(const int64_t size, const int16_t * in0, int16_t ** out) { jit::vect::unary<jit::functors::int16<int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapOut<int16_t>(out)); }
void int16_Mi32(const int64_t size, const int32_t * in0, int16_t ** out) { jit::vect::unary<jit::functors::int16<int32_t, int16_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapOut<int16_t>(out)); }
void int16_Mi64(const int64_t size, const int64_t * in0, int16_t ** out) { jit::vect::unary<jit::functors::int16<int64_t, int16_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapOut<int16_t>(out)); }
void int16_Mi8(const int64_t size, const int8_t * in0, int16_t ** out) { jit::vect::unary<jit::functors::int16<int8_t, int16_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapOut<int16_t>(out)); }
void int16_Mui16(const int64_t size, const uint16_t * in0, int16_t ** out) { jit::vect::unary<jit::functors::int16<uint16_t, int16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapOut<int16_t>(out)); }
void int16_Mui32(const int64_t size, const uint32_t * in0, int16_t ** out) { jit::vect::unary<jit::functors::int16<uint32_t, int16_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapOut<int16_t>(out)); }
void int16_Mui64(const int64_t size, const uint64_t * in0, int16_t ** out) { jit::vect::unary<jit::functors::int16<uint64_t, int16_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapOut<int16_t>(out)); }
void int16_Mui8(const int64_t size, const uint8_t * in0, int16_t ** out) { jit::vect::unary<jit::functors::int16<uint8_t, int16_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapOut<int16_t>(out)); }
void neq_MbMb(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<bool, bool, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_MbMc(const int64_t size, const int32_t * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::neq<bool, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void neq_MbMd(const int64_t size, const int32_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<bool, double, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_MbMi16(const int64_t size, const int32_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<bool, int16_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_MbMi32(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<bool, int32_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_MbMi64(const int64_t size, const int32_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<bool, int64_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_MbMi8(const int64_t size, const int32_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<bool, int8_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_MbMui16(const int64_t size, const int32_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<bool, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_MbMui32(const int64_t size, const int32_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<bool, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_MbMui64(const int64_t size, const int32_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<bool, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_MbMui8(const int64_t size, const int32_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<bool, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_MbSb(const int64_t size, const int32_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<bool, bool, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_MbSc(const int64_t size, const int32_t * in0, const double in1_re, const double in1_im, int32_t ** out) { jit::vect::binary<jit::functors::neq<bool, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<jit::cpx_t>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void neq_MbSd(const int64_t size, const int32_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<bool, double, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_MbSi16(const int64_t size, const int32_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<bool, int16_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_MbSi32(const int64_t size, const int32_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<bool, int32_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_MbSi64(const int64_t size, const int32_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<bool, int64_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_MbSi8(const int64_t size, const int32_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<bool, int8_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_MbSui16(const int64_t size, const int32_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<bool, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_MbSui32(const int64_t size, const int32_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<bool, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_MbSui64(const int64_t size, const int32_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<bool, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_MbSui8(const int64_t size, const int32_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<bool, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_McMb(const int64_t size, const double * in0_re, const double * in0_im, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<const jit::cpx_t &, bool, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_McMc(const int64_t size, const double * in0_re, const double * in0_im, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::neq<const jit::cpx_t &, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void neq_McMd(const int64_t size, const double * in0_re, const double * in0_im, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<const jit::cpx_t &, double, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_McMi16(const int64_t size, const double * in0_re, const double * in0_im, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<const jit::cpx_t &, int16_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_McMi32(const int64_t size, const double * in0_re, const double * in0_im, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<const jit::cpx_t &, int32_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_McMi64(const int64_t size, const double * in0_re, const double * in0_im, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<const jit::cpx_t &, int64_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_McMi8(const int64_t size, const double * in0_re, const double * in0_im, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<const jit::cpx_t &, int8_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_McMui16(const int64_t size, const double * in0_re, const double * in0_im, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<const jit::cpx_t &, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_McMui32(const int64_t size, const double * in0_re, const double * in0_im, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<const jit::cpx_t &, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_McMui64(const int64_t size, const double * in0_re, const double * in0_im, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<const jit::cpx_t &, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_McMui8(const int64_t size, const double * in0_re, const double * in0_im, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<const jit::cpx_t &, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_McSb(const int64_t size, const double * in0_re, const double * in0_im, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<const jit::cpx_t &, bool, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_McSc(const int64_t size, const double * in0_re, const double * in0_im, const double in1_re, const double in1_im, int32_t ** out) { jit::vect::binary<jit::functors::neq<const jit::cpx_t &, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<jit::cpx_t>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void neq_McSd(const int64_t size, const double * in0_re, const double * in0_im, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<const jit::cpx_t &, double, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_McSi16(const int64_t size, const double * in0_re, const double * in0_im, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<const jit::cpx_t &, int16_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_McSi32(const int64_t size, const double * in0_re, const double * in0_im, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<const jit::cpx_t &, int32_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_McSi64(const int64_t size, const double * in0_re, const double * in0_im, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<const jit::cpx_t &, int64_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_McSi8(const int64_t size, const double * in0_re, const double * in0_im, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<const jit::cpx_t &, int8_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_McSui16(const int64_t size, const double * in0_re, const double * in0_im, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<const jit::cpx_t &, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_McSui32(const int64_t size, const double * in0_re, const double * in0_im, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<const jit::cpx_t &, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_McSui64(const int64_t size, const double * in0_re, const double * in0_im, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<const jit::cpx_t &, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_McSui8(const int64_t size, const double * in0_re, const double * in0_im, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<const jit::cpx_t &, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_MdMb(const int64_t size, const double * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<double, bool, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_MdMc(const int64_t size, const double * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::neq<double, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void neq_MdMd(const int64_t size, const double * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<double, double, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_MdMi16(const int64_t size, const double * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<double, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_MdMi32(const int64_t size, const double * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<double, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_MdMi64(const int64_t size, const double * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<double, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_MdMi8(const int64_t size, const double * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<double, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_MdMui16(const int64_t size, const double * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<double, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_MdMui32(const int64_t size, const double * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<double, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_MdMui64(const int64_t size, const double * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<double, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_MdMui8(const int64_t size, const double * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<double, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_MdSb(const int64_t size, const double * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<double, bool, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_MdSc(const int64_t size, const double * in0, const double in1_re, const double in1_im, int32_t ** out) { jit::vect::binary<jit::functors::neq<double, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<jit::cpx_t>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void neq_MdSd(const int64_t size, const double * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<double, double, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_MdSi16(const int64_t size, const double * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<double, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_MdSi32(const int64_t size, const double * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<double, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_MdSi64(const int64_t size, const double * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<double, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_MdSi8(const int64_t size, const double * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<double, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_MdSui16(const int64_t size, const double * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<double, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_MdSui32(const int64_t size, const double * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<double, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_MdSui64(const int64_t size, const double * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<double, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_MdSui8(const int64_t size, const double * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<double, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi16Mb(const int64_t size, const int16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int16_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi16Mc(const int64_t size, const int16_t * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::neq<int16_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi16Md(const int64_t size, const int16_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi16Mi16(const int64_t size, const int16_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi16Mi32(const int64_t size, const int16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi16Mi64(const int64_t size, const int16_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi16Mi8(const int64_t size, const int16_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi16Mui16(const int64_t size, const int16_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi16Mui32(const int64_t size, const int16_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi16Mui64(const int64_t size, const int16_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi16Mui8(const int64_t size, const int16_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi16Sb(const int64_t size, const int16_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int16_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi16Sc(const int64_t size, const int16_t * in0, const double in1_re, const double in1_im, int32_t ** out) { jit::vect::binary<jit::functors::neq<int16_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi16Sd(const int64_t size, const int16_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi16Si16(const int64_t size, const int16_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi16Si32(const int64_t size, const int16_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi16Si64(const int64_t size, const int16_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi16Si8(const int64_t size, const int16_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi16Sui16(const int64_t size, const int16_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi16Sui32(const int64_t size, const int16_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi16Sui64(const int64_t size, const int16_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi16Sui8(const int64_t size, const int16_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi32Mb(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int32_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi32Mc(const int64_t size, const int32_t * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::neq<int32_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi32Md(const int64_t size, const int32_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi32Mi16(const int64_t size, const int32_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi32Mi32(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi32Mi64(const int64_t size, const int32_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi32Mi8(const int64_t size, const int32_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi32Mui16(const int64_t size, const int32_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi32Mui32(const int64_t size, const int32_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi32Mui64(const int64_t size, const int32_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi32Mui8(const int64_t size, const int32_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi32Sb(const int64_t size, const int32_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int32_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi32Sc(const int64_t size, const int32_t * in0, const double in1_re, const double in1_im, int32_t ** out) { jit::vect::binary<jit::functors::neq<int32_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi32Sd(const int64_t size, const int32_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi32Si16(const int64_t size, const int32_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi32Si32(const int64_t size, const int32_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi32Si64(const int64_t size, const int32_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi32Si8(const int64_t size, const int32_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi32Sui16(const int64_t size, const int32_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi32Sui32(const int64_t size, const int32_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi32Sui64(const int64_t size, const int32_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi32Sui8(const int64_t size, const int32_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi64Mb(const int64_t size, const int64_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int64_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi64Mc(const int64_t size, const int64_t * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::neq<int64_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi64Md(const int64_t size, const int64_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi64Mi16(const int64_t size, const int64_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi64Mi32(const int64_t size, const int64_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi64Mi64(const int64_t size, const int64_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi64Mi8(const int64_t size, const int64_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi64Mui16(const int64_t size, const int64_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi64Mui32(const int64_t size, const int64_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi64Mui64(const int64_t size, const int64_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi64Mui8(const int64_t size, const int64_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi64Sb(const int64_t size, const int64_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int64_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi64Sc(const int64_t size, const int64_t * in0, const double in1_re, const double in1_im, int32_t ** out) { jit::vect::binary<jit::functors::neq<int64_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi64Sd(const int64_t size, const int64_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi64Si16(const int64_t size, const int64_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi64Si32(const int64_t size, const int64_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi64Si64(const int64_t size, const int64_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi64Si8(const int64_t size, const int64_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi64Sui16(const int64_t size, const int64_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi64Sui32(const int64_t size, const int64_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi64Sui64(const int64_t size, const int64_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi64Sui8(const int64_t size, const int64_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi8Mb(const int64_t size, const int8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int8_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi8Mc(const int64_t size, const int8_t * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::neq<int8_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi8Md(const int64_t size, const int8_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi8Mi16(const int64_t size, const int8_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi8Mi32(const int64_t size, const int8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi8Mi64(const int64_t size, const int8_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi8Mi8(const int64_t size, const int8_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi8Mui16(const int64_t size, const int8_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi8Mui32(const int64_t size, const int8_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi8Mui64(const int64_t size, const int8_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi8Mui8(const int64_t size, const int8_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi8Sb(const int64_t size, const int8_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int8_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi8Sc(const int64_t size, const int8_t * in0, const double in1_re, const double in1_im, int32_t ** out) { jit::vect::binary<jit::functors::neq<int8_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi8Sd(const int64_t size, const int8_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi8Si16(const int64_t size, const int8_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi8Si32(const int64_t size, const int8_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi8Si64(const int64_t size, const int8_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi8Si8(const int64_t size, const int8_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi8Sui16(const int64_t size, const int8_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi8Sui32(const int64_t size, const int8_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi8Sui64(const int64_t size, const int8_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mi8Sui8(const int64_t size, const int8_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui16Mb(const int64_t size, const uint16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint16_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui16Mc(const int64_t size, const uint16_t * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint16_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui16Md(const int64_t size, const uint16_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui16Mi16(const int64_t size, const uint16_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui16Mi32(const int64_t size, const uint16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui16Mi64(const int64_t size, const uint16_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui16Mi8(const int64_t size, const uint16_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui16Mui16(const int64_t size, const uint16_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui16Mui32(const int64_t size, const uint16_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui16Mui64(const int64_t size, const uint16_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui16Mui8(const int64_t size, const uint16_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui16Sb(const int64_t size, const uint16_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint16_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui16Sc(const int64_t size, const uint16_t * in0, const double in1_re, const double in1_im, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint16_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui16Sd(const int64_t size, const uint16_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui16Si16(const int64_t size, const uint16_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui16Si32(const int64_t size, const uint16_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui16Si64(const int64_t size, const uint16_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui16Si8(const int64_t size, const uint16_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui16Sui16(const int64_t size, const uint16_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui16Sui32(const int64_t size, const uint16_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui16Sui64(const int64_t size, const uint16_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui16Sui8(const int64_t size, const uint16_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui32Mb(const int64_t size, const uint32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint32_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui32Mc(const int64_t size, const uint32_t * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint32_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui32Md(const int64_t size, const uint32_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui32Mi16(const int64_t size, const uint32_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui32Mi32(const int64_t size, const uint32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui32Mi64(const int64_t size, const uint32_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui32Mi8(const int64_t size, const uint32_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui32Mui16(const int64_t size, const uint32_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui32Mui32(const int64_t size, const uint32_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui32Mui64(const int64_t size, const uint32_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui32Mui8(const int64_t size, const uint32_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui32Sb(const int64_t size, const uint32_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint32_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui32Sc(const int64_t size, const uint32_t * in0, const double in1_re, const double in1_im, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint32_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui32Sd(const int64_t size, const uint32_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui32Si16(const int64_t size, const uint32_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui32Si32(const int64_t size, const uint32_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui32Si64(const int64_t size, const uint32_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui32Si8(const int64_t size, const uint32_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui32Sui16(const int64_t size, const uint32_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui32Sui32(const int64_t size, const uint32_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui32Sui64(const int64_t size, const uint32_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui32Sui8(const int64_t size, const uint32_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui64Mb(const int64_t size, const uint64_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint64_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui64Mc(const int64_t size, const uint64_t * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint64_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui64Md(const int64_t size, const uint64_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui64Mi16(const int64_t size, const uint64_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui64Mi32(const int64_t size, const uint64_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui64Mi64(const int64_t size, const uint64_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui64Mi8(const int64_t size, const uint64_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui64Mui16(const int64_t size, const uint64_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui64Mui32(const int64_t size, const uint64_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui64Mui64(const int64_t size, const uint64_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui64Mui8(const int64_t size, const uint64_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui64Sb(const int64_t size, const uint64_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint64_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui64Sc(const int64_t size, const uint64_t * in0, const double in1_re, const double in1_im, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint64_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui64Sd(const int64_t size, const uint64_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui64Si16(const int64_t size, const uint64_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui64Si32(const int64_t size, const uint64_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui64Si64(const int64_t size, const uint64_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui64Si8(const int64_t size, const uint64_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui64Sui16(const int64_t size, const uint64_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui64Sui32(const int64_t size, const uint64_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui64Sui64(const int64_t size, const uint64_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui64Sui8(const int64_t size, const uint64_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui8Mb(const int64_t size, const uint8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint8_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui8Mc(const int64_t size, const uint8_t * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint8_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui8Md(const int64_t size, const uint8_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui8Mi16(const int64_t size, const uint8_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui8Mi32(const int64_t size, const uint8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui8Mi64(const int64_t size, const uint8_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui8Mi8(const int64_t size, const uint8_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui8Mui16(const int64_t size, const uint8_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui8Mui32(const int64_t size, const uint8_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui8Mui64(const int64_t size, const uint8_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui8Mui8(const int64_t size, const uint8_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui8Sb(const int64_t size, const uint8_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint8_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui8Sc(const int64_t size, const uint8_t * in0, const double in1_re, const double in1_im, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint8_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui8Sd(const int64_t size, const uint8_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui8Si16(const int64_t size, const uint8_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui8Si32(const int64_t size, const uint8_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui8Si64(const int64_t size, const uint8_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui8Si8(const int64_t size, const uint8_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui8Sui16(const int64_t size, const uint8_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui8Sui32(const int64_t size, const uint8_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui8Sui64(const int64_t size, const uint8_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Mui8Sui8(const int64_t size, const uint8_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_SbMb(const int64_t size, const int32_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<bool, bool, int32_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_SbMc(const int64_t size, const int32_t in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::neq<bool, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void neq_SbMd(const int64_t size, const int32_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<bool, double, int32_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_SbMi16(const int64_t size, const int32_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<bool, int16_t, int32_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_SbMi32(const int64_t size, const int32_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<bool, int32_t, int32_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_SbMi64(const int64_t size, const int32_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<bool, int64_t, int32_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_SbMi8(const int64_t size, const int32_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<bool, int8_t, int32_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_SbMui16(const int64_t size, const int32_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<bool, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_SbMui32(const int64_t size, const int32_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<bool, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_SbMui64(const int64_t size, const int32_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<bool, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_SbMui8(const int64_t size, const int32_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<bool, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_ScMb(const int64_t size, const double in0_re, const double in0_im, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<const jit::cpx_t &, bool, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t>(in0_re, in0_im), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_ScMc(const int64_t size, const double in0_re, const double in0_im, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::neq<const jit::cpx_t &, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t>(in0_re, in0_im), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void neq_ScMd(const int64_t size, const double in0_re, const double in0_im, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<const jit::cpx_t &, double, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t>(in0_re, in0_im), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_ScMi16(const int64_t size, const double in0_re, const double in0_im, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<const jit::cpx_t &, int16_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t>(in0_re, in0_im), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_ScMi32(const int64_t size, const double in0_re, const double in0_im, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<const jit::cpx_t &, int32_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t>(in0_re, in0_im), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_ScMi64(const int64_t size, const double in0_re, const double in0_im, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<const jit::cpx_t &, int64_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t>(in0_re, in0_im), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_ScMi8(const int64_t size, const double in0_re, const double in0_im, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<const jit::cpx_t &, int8_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t>(in0_re, in0_im), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_ScMui16(const int64_t size, const double in0_re, const double in0_im, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<const jit::cpx_t &, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t>(in0_re, in0_im), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_ScMui32(const int64_t size, const double in0_re, const double in0_im, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<const jit::cpx_t &, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t>(in0_re, in0_im), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_ScMui64(const int64_t size, const double in0_re, const double in0_im, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<const jit::cpx_t &, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t>(in0_re, in0_im), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_ScMui8(const int64_t size, const double in0_re, const double in0_im, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<const jit::cpx_t &, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t>(in0_re, in0_im), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_SdMb(const int64_t size, const double in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<double, bool, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_SdMc(const int64_t size, const double in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::neq<double, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void neq_SdMd(const int64_t size, const double in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<double, double, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_SdMi16(const int64_t size, const double in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<double, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_SdMi32(const int64_t size, const double in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<double, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_SdMi64(const int64_t size, const double in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<double, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_SdMi8(const int64_t size, const double in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<double, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_SdMui16(const int64_t size, const double in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<double, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_SdMui32(const int64_t size, const double in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<double, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_SdMui64(const int64_t size, const double in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<double, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_SdMui8(const int64_t size, const double in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<double, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Si16Mb(const int64_t size, const int16_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int16_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Si16Mc(const int64_t size, const int16_t in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::neq<int16_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void neq_Si16Md(const int64_t size, const int16_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Si16Mi16(const int64_t size, const int16_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Si16Mi32(const int64_t size, const int16_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Si16Mi64(const int64_t size, const int16_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Si16Mi8(const int64_t size, const int16_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Si16Mui16(const int64_t size, const int16_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Si16Mui32(const int64_t size, const int16_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Si16Mui64(const int64_t size, const int16_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Si16Mui8(const int64_t size, const int16_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Si32Mb(const int64_t size, const int32_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int32_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Si32Mc(const int64_t size, const int32_t in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::neq<int32_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void neq_Si32Md(const int64_t size, const int32_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Si32Mi16(const int64_t size, const int32_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Si32Mi32(const int64_t size, const int32_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Si32Mi64(const int64_t size, const int32_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Si32Mi8(const int64_t size, const int32_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Si32Mui16(const int64_t size, const int32_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Si32Mui32(const int64_t size, const int32_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Si32Mui64(const int64_t size, const int32_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Si32Mui8(const int64_t size, const int32_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Si64Mb(const int64_t size, const int64_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int64_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Si64Mc(const int64_t size, const int64_t in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::neq<int64_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void neq_Si64Md(const int64_t size, const int64_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Si64Mi16(const int64_t size, const int64_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Si64Mi32(const int64_t size, const int64_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Si64Mi64(const int64_t size, const int64_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Si64Mi8(const int64_t size, const int64_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Si64Mui16(const int64_t size, const int64_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Si64Mui32(const int64_t size, const int64_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Si64Mui64(const int64_t size, const int64_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Si64Mui8(const int64_t size, const int64_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Si8Mb(const int64_t size, const int8_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int8_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Si8Mc(const int64_t size, const int8_t in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::neq<int8_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void neq_Si8Md(const int64_t size, const int8_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Si8Mi16(const int64_t size, const int8_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Si8Mi32(const int64_t size, const int8_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Si8Mi64(const int64_t size, const int8_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Si8Mi8(const int64_t size, const int8_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Si8Mui16(const int64_t size, const int8_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Si8Mui32(const int64_t size, const int8_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Si8Mui64(const int64_t size, const int8_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Si8Mui8(const int64_t size, const int8_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Sui16Mb(const int64_t size, const uint16_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint16_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Sui16Mc(const int64_t size, const uint16_t in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint16_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void neq_Sui16Md(const int64_t size, const uint16_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Sui16Mi16(const int64_t size, const uint16_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Sui16Mi32(const int64_t size, const uint16_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Sui16Mi64(const int64_t size, const uint16_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Sui16Mi8(const int64_t size, const uint16_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Sui16Mui16(const int64_t size, const uint16_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Sui16Mui32(const int64_t size, const uint16_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Sui16Mui64(const int64_t size, const uint16_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Sui16Mui8(const int64_t size, const uint16_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Sui32Mb(const int64_t size, const uint32_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint32_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Sui32Mc(const int64_t size, const uint32_t in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint32_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void neq_Sui32Md(const int64_t size, const uint32_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Sui32Mi16(const int64_t size, const uint32_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Sui32Mi32(const int64_t size, const uint32_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Sui32Mi64(const int64_t size, const uint32_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Sui32Mi8(const int64_t size, const uint32_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Sui32Mui16(const int64_t size, const uint32_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Sui32Mui32(const int64_t size, const uint32_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Sui32Mui64(const int64_t size, const uint32_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Sui32Mui8(const int64_t size, const uint32_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Sui64Mb(const int64_t size, const uint64_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint64_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Sui64Mc(const int64_t size, const uint64_t in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint64_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void neq_Sui64Md(const int64_t size, const uint64_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Sui64Mi16(const int64_t size, const uint64_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Sui64Mi32(const int64_t size, const uint64_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Sui64Mi64(const int64_t size, const uint64_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Sui64Mi8(const int64_t size, const uint64_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Sui64Mui16(const int64_t size, const uint64_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Sui64Mui32(const int64_t size, const uint64_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Sui64Mui64(const int64_t size, const uint64_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Sui64Mui8(const int64_t size, const uint64_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Sui8Mb(const int64_t size, const uint8_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint8_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Sui8Mc(const int64_t size, const uint8_t in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint8_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void neq_Sui8Md(const int64_t size, const uint8_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Sui8Mi16(const int64_t size, const uint8_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Sui8Mi32(const int64_t size, const uint8_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Sui8Mi64(const int64_t size, const uint8_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Sui8Mi8(const int64_t size, const uint8_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Sui8Mui16(const int64_t size, const uint8_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Sui8Mui32(const int64_t size, const uint8_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Sui8Mui64(const int64_t size, const uint8_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Sui8Mui8(const int64_t size, const uint8_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_UbUb(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<bool, bool, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_UbUc(const int64_t size, const int32_t * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::neq<bool, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void neq_UbUd(const int64_t size, const int32_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<bool, double, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_UbUi16(const int64_t size, const int32_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<bool, int16_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_UbUi32(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<bool, int32_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_UbUi64(const int64_t size, const int32_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<bool, int64_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_UbUi8(const int64_t size, const int32_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<bool, int8_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_UbUui16(const int64_t size, const int32_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<bool, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_UbUui32(const int64_t size, const int32_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<bool, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_UbUui64(const int64_t size, const int32_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<bool, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_UbUui8(const int64_t size, const int32_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<bool, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_UcUb(const int64_t size, const double * in0_re, const double * in0_im, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<const jit::cpx_t &, bool, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_UcUc(const int64_t size, const double * in0_re, const double * in0_im, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::neq<const jit::cpx_t &, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void neq_UcUd(const int64_t size, const double * in0_re, const double * in0_im, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<const jit::cpx_t &, double, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_UcUi16(const int64_t size, const double * in0_re, const double * in0_im, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<const jit::cpx_t &, int16_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_UcUi32(const int64_t size, const double * in0_re, const double * in0_im, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<const jit::cpx_t &, int32_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_UcUi64(const int64_t size, const double * in0_re, const double * in0_im, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<const jit::cpx_t &, int64_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_UcUi8(const int64_t size, const double * in0_re, const double * in0_im, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<const jit::cpx_t &, int8_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_UcUui16(const int64_t size, const double * in0_re, const double * in0_im, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<const jit::cpx_t &, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_UcUui32(const int64_t size, const double * in0_re, const double * in0_im, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<const jit::cpx_t &, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_UcUui64(const int64_t size, const double * in0_re, const double * in0_im, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<const jit::cpx_t &, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_UcUui8(const int64_t size, const double * in0_re, const double * in0_im, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<const jit::cpx_t &, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_UdUb(const int64_t size, const double * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<double, bool, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_UdUc(const int64_t size, const double * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::neq<double, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void neq_UdUd(const int64_t size, const double * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<double, double, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_UdUi16(const int64_t size, const double * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<double, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_UdUi32(const int64_t size, const double * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<double, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_UdUi64(const int64_t size, const double * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<double, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_UdUi8(const int64_t size, const double * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<double, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_UdUui16(const int64_t size, const double * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<double, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_UdUui32(const int64_t size, const double * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<double, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_UdUui64(const int64_t size, const double * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<double, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_UdUui8(const int64_t size, const double * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<double, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Ui16Ub(const int64_t size, const int16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int16_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Ui16Uc(const int64_t size, const int16_t * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::neq<int16_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void neq_Ui16Ud(const int64_t size, const int16_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Ui16Ui16(const int64_t size, const int16_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Ui16Ui32(const int64_t size, const int16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Ui16Ui64(const int64_t size, const int16_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Ui16Ui8(const int64_t size, const int16_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Ui16Uui16(const int64_t size, const int16_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Ui16Uui32(const int64_t size, const int16_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Ui16Uui64(const int64_t size, const int16_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Ui16Uui8(const int64_t size, const int16_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Ui32Ub(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int32_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Ui32Uc(const int64_t size, const int32_t * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::neq<int32_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void neq_Ui32Ud(const int64_t size, const int32_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Ui32Ui16(const int64_t size, const int32_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Ui32Ui32(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Ui32Ui64(const int64_t size, const int32_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Ui32Ui8(const int64_t size, const int32_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Ui32Uui16(const int64_t size, const int32_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Ui32Uui32(const int64_t size, const int32_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Ui32Uui64(const int64_t size, const int32_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Ui32Uui8(const int64_t size, const int32_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Ui64Ub(const int64_t size, const int64_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int64_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Ui64Uc(const int64_t size, const int64_t * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::neq<int64_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void neq_Ui64Ud(const int64_t size, const int64_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Ui64Ui16(const int64_t size, const int64_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Ui64Ui32(const int64_t size, const int64_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Ui64Ui64(const int64_t size, const int64_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Ui64Ui8(const int64_t size, const int64_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Ui64Uui16(const int64_t size, const int64_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Ui64Uui32(const int64_t size, const int64_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Ui64Uui64(const int64_t size, const int64_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Ui64Uui8(const int64_t size, const int64_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Ui8Ub(const int64_t size, const int8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int8_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Ui8Uc(const int64_t size, const int8_t * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::neq<int8_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void neq_Ui8Ud(const int64_t size, const int8_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Ui8Ui16(const int64_t size, const int8_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Ui8Ui32(const int64_t size, const int8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Ui8Ui64(const int64_t size, const int8_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Ui8Ui8(const int64_t size, const int8_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Ui8Uui16(const int64_t size, const int8_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Ui8Uui32(const int64_t size, const int8_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Ui8Uui64(const int64_t size, const int8_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Ui8Uui8(const int64_t size, const int8_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<int8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Uui16Ub(const int64_t size, const uint16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint16_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Uui16Uc(const int64_t size, const uint16_t * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint16_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void neq_Uui16Ud(const int64_t size, const uint16_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Uui16Ui16(const int64_t size, const uint16_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Uui16Ui32(const int64_t size, const uint16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Uui16Ui64(const int64_t size, const uint16_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Uui16Ui8(const int64_t size, const uint16_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Uui16Uui16(const int64_t size, const uint16_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Uui16Uui32(const int64_t size, const uint16_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Uui16Uui64(const int64_t size, const uint16_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Uui16Uui8(const int64_t size, const uint16_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Uui32Ub(const int64_t size, const uint32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint32_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Uui32Uc(const int64_t size, const uint32_t * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint32_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void neq_Uui32Ud(const int64_t size, const uint32_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Uui32Ui16(const int64_t size, const uint32_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Uui32Ui32(const int64_t size, const uint32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Uui32Ui64(const int64_t size, const uint32_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Uui32Ui8(const int64_t size, const uint32_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Uui32Uui16(const int64_t size, const uint32_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Uui32Uui32(const int64_t size, const uint32_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Uui32Uui64(const int64_t size, const uint32_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Uui32Uui8(const int64_t size, const uint32_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Uui64Ub(const int64_t size, const uint64_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint64_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Uui64Uc(const int64_t size, const uint64_t * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint64_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void neq_Uui64Ud(const int64_t size, const uint64_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Uui64Ui16(const int64_t size, const uint64_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Uui64Ui32(const int64_t size, const uint64_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Uui64Ui64(const int64_t size, const uint64_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Uui64Ui8(const int64_t size, const uint64_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Uui64Uui16(const int64_t size, const uint64_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Uui64Uui32(const int64_t size, const uint64_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Uui64Uui64(const int64_t size, const uint64_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Uui64Uui8(const int64_t size, const uint64_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Uui8Ub(const int64_t size, const uint8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint8_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Uui8Uc(const int64_t size, const uint8_t * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint8_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void neq_Uui8Ud(const int64_t size, const uint8_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Uui8Ui16(const int64_t size, const uint8_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Uui8Ui32(const int64_t size, const uint8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Uui8Ui64(const int64_t size, const uint8_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Uui8Ui8(const int64_t size, const uint8_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Uui8Uui16(const int64_t size, const uint8_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Uui8Uui32(const int64_t size, const uint8_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Uui8Uui64(const int64_t size, const uint8_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void neq_Uui8Uui8(const int64_t size, const uint8_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::neq<uint8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void and_MbMb(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::And<bool, bool, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void and_MbMc(const int64_t size, const int32_t * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::And<bool, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void and_MbMd(const int64_t size, const int32_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::And<bool, double, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void and_MbSb(const int64_t size, const int32_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::And<bool, bool, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<int32_t>(out)); }
void and_MbSc(const int64_t size, const int32_t * in0, const double in1_re, const double in1_im, int32_t ** out) { jit::vect::binary<jit::functors::And<bool, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<jit::cpx_t>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void and_MbSd(const int64_t size, const int32_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::And<bool, double, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void and_McMb(const int64_t size, const double * in0_re, const double * in0_im, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::And<const jit::cpx_t &, bool, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void and_McMc(const int64_t size, const double * in0_re, const double * in0_im, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::And<const jit::cpx_t &, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void and_McMd(const int64_t size, const double * in0_re, const double * in0_im, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::And<const jit::cpx_t &, double, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void and_McSb(const int64_t size, const double * in0_re, const double * in0_im, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::And<const jit::cpx_t &, bool, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<int32_t>(out)); }
void and_McSc(const int64_t size, const double * in0_re, const double * in0_im, const double in1_re, const double in1_im, int32_t ** out) { jit::vect::binary<jit::functors::And<const jit::cpx_t &, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<jit::cpx_t>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void and_McSd(const int64_t size, const double * in0_re, const double * in0_im, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::And<const jit::cpx_t &, double, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void and_MdMb(const int64_t size, const double * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::And<double, bool, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void and_MdMc(const int64_t size, const double * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::And<double, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void and_MdMd(const int64_t size, const double * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::And<double, double, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void and_MdSb(const int64_t size, const double * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::And<double, bool, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<int32_t>(out)); }
void and_MdSc(const int64_t size, const double * in0, const double in1_re, const double in1_im, int32_t ** out) { jit::vect::binary<jit::functors::And<double, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<jit::cpx_t>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void and_MdSd(const int64_t size, const double * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::And<double, double, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void and_Mi16Mi16(const int64_t size, const int16_t * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::And<int16_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void and_Mi16Mi32(const int64_t size, const int16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::And<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void and_Mi16Mi64(const int64_t size, const int16_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::And<int16_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void and_Mi16Mi8(const int64_t size, const int16_t * in0, const int8_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::And<int16_t, int8_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void and_Mi16Mui16(const int64_t size, const int16_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::And<int16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void and_Mi16Mui32(const int64_t size, const int16_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<int16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Mi16Mui64(const int64_t size, const int16_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<int16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Mi16Mui8(const int64_t size, const int16_t * in0, const uint8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::And<int16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void and_Mi16Si16(const int64_t size, const int16_t * in0, const int16_t in1, int16_t ** out) { jit::vect::binary<jit::functors::And<int16_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int16_t>(out)); }
void and_Mi16Si32(const int64_t size, const int16_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::And<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void and_Mi16Si64(const int64_t size, const int16_t * in0, const int64_t in1, int64_t ** out) { jit::vect::binary<jit::functors::And<int16_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void and_Mi16Si8(const int64_t size, const int16_t * in0, const int8_t in1, int16_t ** out) { jit::vect::binary<jit::functors::And<int16_t, int8_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int16_t>(out)); }
void and_Mi16Sui16(const int64_t size, const int16_t * in0, const uint16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::And<int16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void and_Mi16Sui32(const int64_t size, const int16_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<int16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Mi16Sui64(const int64_t size, const int16_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<int16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Mi16Sui8(const int64_t size, const int16_t * in0, const uint8_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::And<int16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void and_Mi32Mi16(const int64_t size, const int32_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::And<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void and_Mi32Mi32(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::And<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void and_Mi32Mi64(const int64_t size, const int32_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::And<int32_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void and_Mi32Mi8(const int64_t size, const int32_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::And<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void and_Mi32Mui16(const int64_t size, const int32_t * in0, const uint16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<int32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Mi32Mui32(const int64_t size, const int32_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<int32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Mi32Mui64(const int64_t size, const int32_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<int32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Mi32Mui8(const int64_t size, const int32_t * in0, const uint8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<int32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Mi32Si16(const int64_t size, const int32_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::And<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void and_Mi32Si32(const int64_t size, const int32_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::And<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void and_Mi32Si64(const int64_t size, const int32_t * in0, const int64_t in1, int64_t ** out) { jit::vect::binary<jit::functors::And<int32_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void and_Mi32Si8(const int64_t size, const int32_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::And<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void and_Mi32Sui16(const int64_t size, const int32_t * in0, const uint16_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<int32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Mi32Sui32(const int64_t size, const int32_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<int32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Mi32Sui64(const int64_t size, const int32_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<int32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Mi32Sui8(const int64_t size, const int32_t * in0, const uint8_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<int32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Mi64Mi16(const int64_t size, const int64_t * in0, const int16_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::And<int64_t, int16_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void and_Mi64Mi32(const int64_t size, const int64_t * in0, const int32_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::And<int64_t, int32_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void and_Mi64Mi64(const int64_t size, const int64_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::And<int64_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void and_Mi64Mi8(const int64_t size, const int64_t * in0, const int8_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::And<int64_t, int8_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void and_Mi64Mui16(const int64_t size, const int64_t * in0, const uint16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<int64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Mi64Mui32(const int64_t size, const int64_t * in0, const uint32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<int64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Mi64Mui64(const int64_t size, const int64_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<int64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Mi64Mui8(const int64_t size, const int64_t * in0, const uint8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<int64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Mi64Si16(const int64_t size, const int64_t * in0, const int16_t in1, int64_t ** out) { jit::vect::binary<jit::functors::And<int64_t, int16_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void and_Mi64Si32(const int64_t size, const int64_t * in0, const int32_t in1, int64_t ** out) { jit::vect::binary<jit::functors::And<int64_t, int32_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void and_Mi64Si64(const int64_t size, const int64_t * in0, const int64_t in1, int64_t ** out) { jit::vect::binary<jit::functors::And<int64_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void and_Mi64Si8(const int64_t size, const int64_t * in0, const int8_t in1, int64_t ** out) { jit::vect::binary<jit::functors::And<int64_t, int8_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void and_Mi64Sui16(const int64_t size, const int64_t * in0, const uint16_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<int64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Mi64Sui32(const int64_t size, const int64_t * in0, const uint32_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<int64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Mi64Sui64(const int64_t size, const int64_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<int64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Mi64Sui8(const int64_t size, const int64_t * in0, const uint8_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<int64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Mi8Mi16(const int64_t size, const int8_t * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::And<int8_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void and_Mi8Mi32(const int64_t size, const int8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::And<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void and_Mi8Mi64(const int64_t size, const int8_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::And<int8_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void and_Mi8Mi8(const int64_t size, const int8_t * in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::And<int8_t, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void and_Mi8Mui16(const int64_t size, const int8_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::And<int8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void and_Mi8Mui32(const int64_t size, const int8_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<int8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Mi8Mui64(const int64_t size, const int8_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<int8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Mi8Mui8(const int64_t size, const int8_t * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::And<int8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void and_Mi8Si16(const int64_t size, const int8_t * in0, const int16_t in1, int16_t ** out) { jit::vect::binary<jit::functors::And<int8_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int16_t>(out)); }
void and_Mi8Si32(const int64_t size, const int8_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::And<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void and_Mi8Si64(const int64_t size, const int8_t * in0, const int64_t in1, int64_t ** out) { jit::vect::binary<jit::functors::And<int8_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void and_Mi8Si8(const int64_t size, const int8_t * in0, const int8_t in1, int8_t ** out) { jit::vect::binary<jit::functors::And<int8_t, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int8_t>(out)); }
void and_Mi8Sui16(const int64_t size, const int8_t * in0, const uint16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::And<int8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void and_Mi8Sui32(const int64_t size, const int8_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<int8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Mi8Sui64(const int64_t size, const int8_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<int8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Mi8Sui8(const int64_t size, const int8_t * in0, const uint8_t in1, uint8_t ** out) { jit::vect::binary<jit::functors::And<int8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void and_Mui16Mi16(const int64_t size, const uint16_t * in0, const int16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::And<uint16_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void and_Mui16Mi32(const int64_t size, const uint16_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<uint16_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Mui16Mi64(const int64_t size, const uint16_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint16_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Mui16Mi8(const int64_t size, const uint16_t * in0, const int8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::And<uint16_t, int8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void and_Mui16Mui16(const int64_t size, const uint16_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::And<uint16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void and_Mui16Mui32(const int64_t size, const uint16_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<uint16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Mui16Mui64(const int64_t size, const uint16_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Mui16Mui8(const int64_t size, const uint16_t * in0, const uint8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::And<uint16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void and_Mui16Si16(const int64_t size, const uint16_t * in0, const int16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::And<uint16_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void and_Mui16Si32(const int64_t size, const uint16_t * in0, const int32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<uint16_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Mui16Si64(const int64_t size, const uint16_t * in0, const int64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint16_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Mui16Si8(const int64_t size, const uint16_t * in0, const int8_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::And<uint16_t, int8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void and_Mui16Sui16(const int64_t size, const uint16_t * in0, const uint16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::And<uint16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void and_Mui16Sui32(const int64_t size, const uint16_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<uint16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Mui16Sui64(const int64_t size, const uint16_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Mui16Sui8(const int64_t size, const uint16_t * in0, const uint8_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::And<uint16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void and_Mui32Mi16(const int64_t size, const uint32_t * in0, const int16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<uint32_t, int16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Mui32Mi32(const int64_t size, const uint32_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<uint32_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Mui32Mi64(const int64_t size, const uint32_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint32_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Mui32Mi8(const int64_t size, const uint32_t * in0, const int8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<uint32_t, int8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Mui32Mui16(const int64_t size, const uint32_t * in0, const uint16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<uint32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Mui32Mui32(const int64_t size, const uint32_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<uint32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Mui32Mui64(const int64_t size, const uint32_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Mui32Mui8(const int64_t size, const uint32_t * in0, const uint8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<uint32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Mui32Si16(const int64_t size, const uint32_t * in0, const int16_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<uint32_t, int16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Mui32Si32(const int64_t size, const uint32_t * in0, const int32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<uint32_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Mui32Si64(const int64_t size, const uint32_t * in0, const int64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint32_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Mui32Si8(const int64_t size, const uint32_t * in0, const int8_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<uint32_t, int8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Mui32Sui16(const int64_t size, const uint32_t * in0, const uint16_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<uint32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Mui32Sui32(const int64_t size, const uint32_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<uint32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Mui32Sui64(const int64_t size, const uint32_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Mui32Sui8(const int64_t size, const uint32_t * in0, const uint8_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<uint32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Mui64Mi16(const int64_t size, const uint64_t * in0, const int16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint64_t, int16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Mui64Mi32(const int64_t size, const uint64_t * in0, const int32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint64_t, int32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Mui64Mi64(const int64_t size, const uint64_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint64_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Mui64Mi8(const int64_t size, const uint64_t * in0, const int8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint64_t, int8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Mui64Mui16(const int64_t size, const uint64_t * in0, const uint16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Mui64Mui32(const int64_t size, const uint64_t * in0, const uint32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Mui64Mui64(const int64_t size, const uint64_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Mui64Mui8(const int64_t size, const uint64_t * in0, const uint8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Mui64Si16(const int64_t size, const uint64_t * in0, const int16_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint64_t, int16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Mui64Si32(const int64_t size, const uint64_t * in0, const int32_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint64_t, int32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Mui64Si64(const int64_t size, const uint64_t * in0, const int64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint64_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Mui64Si8(const int64_t size, const uint64_t * in0, const int8_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint64_t, int8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Mui64Sui16(const int64_t size, const uint64_t * in0, const uint16_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Mui64Sui32(const int64_t size, const uint64_t * in0, const uint32_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Mui64Sui64(const int64_t size, const uint64_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Mui64Sui8(const int64_t size, const uint64_t * in0, const uint8_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Mui8Mi16(const int64_t size, const uint8_t * in0, const int16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::And<uint8_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void and_Mui8Mi32(const int64_t size, const uint8_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<uint8_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Mui8Mi64(const int64_t size, const uint8_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint8_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Mui8Mi8(const int64_t size, const uint8_t * in0, const int8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::And<uint8_t, int8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void and_Mui8Mui16(const int64_t size, const uint8_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::And<uint8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void and_Mui8Mui32(const int64_t size, const uint8_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<uint8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Mui8Mui64(const int64_t size, const uint8_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Mui8Mui8(const int64_t size, const uint8_t * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::And<uint8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void and_Mui8Si16(const int64_t size, const uint8_t * in0, const int16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::And<uint8_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void and_Mui8Si32(const int64_t size, const uint8_t * in0, const int32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<uint8_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Mui8Si64(const int64_t size, const uint8_t * in0, const int64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint8_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Mui8Si8(const int64_t size, const uint8_t * in0, const int8_t in1, uint8_t ** out) { jit::vect::binary<jit::functors::And<uint8_t, int8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void and_Mui8Sui16(const int64_t size, const uint8_t * in0, const uint16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::And<uint8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void and_Mui8Sui32(const int64_t size, const uint8_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<uint8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Mui8Sui64(const int64_t size, const uint8_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Mui8Sui8(const int64_t size, const uint8_t * in0, const uint8_t in1, uint8_t ** out) { jit::vect::binary<jit::functors::And<uint8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void and_SbMb(const int64_t size, const int32_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::And<bool, bool, int32_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void and_SbMc(const int64_t size, const int32_t in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::And<bool, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void and_SbMd(const int64_t size, const int32_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::And<bool, double, int32_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void and_ScMb(const int64_t size, const double in0_re, const double in0_im, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::And<const jit::cpx_t &, bool, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t>(in0_re, in0_im), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void and_ScMc(const int64_t size, const double in0_re, const double in0_im, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::And<const jit::cpx_t &, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t>(in0_re, in0_im), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void and_ScMd(const int64_t size, const double in0_re, const double in0_im, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::And<const jit::cpx_t &, double, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t>(in0_re, in0_im), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void and_SdMb(const int64_t size, const double in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::And<double, bool, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void and_SdMc(const int64_t size, const double in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::And<double, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void and_SdMd(const int64_t size, const double in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::And<double, double, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void and_Si16Mi16(const int64_t size, const int16_t in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::And<int16_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void and_Si16Mi32(const int64_t size, const int16_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::And<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void and_Si16Mi64(const int64_t size, const int16_t in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::And<int16_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void and_Si16Mi8(const int64_t size, const int16_t in0, const int8_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::And<int16_t, int8_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void and_Si16Mui16(const int64_t size, const int16_t in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::And<int16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void and_Si16Mui32(const int64_t size, const int16_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<int16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Si16Mui64(const int64_t size, const int16_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<int16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Si16Mui8(const int64_t size, const int16_t in0, const uint8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::And<int16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void and_Si32Mi16(const int64_t size, const int32_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::And<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void and_Si32Mi32(const int64_t size, const int32_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::And<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void and_Si32Mi64(const int64_t size, const int32_t in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::And<int32_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void and_Si32Mi8(const int64_t size, const int32_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::And<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void and_Si32Mui16(const int64_t size, const int32_t in0, const uint16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<int32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Si32Mui32(const int64_t size, const int32_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<int32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Si32Mui64(const int64_t size, const int32_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<int32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Si32Mui8(const int64_t size, const int32_t in0, const uint8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<int32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Si64Mi16(const int64_t size, const int64_t in0, const int16_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::And<int64_t, int16_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void and_Si64Mi32(const int64_t size, const int64_t in0, const int32_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::And<int64_t, int32_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void and_Si64Mi64(const int64_t size, const int64_t in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::And<int64_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void and_Si64Mi8(const int64_t size, const int64_t in0, const int8_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::And<int64_t, int8_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void and_Si64Mui16(const int64_t size, const int64_t in0, const uint16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<int64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Si64Mui32(const int64_t size, const int64_t in0, const uint32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<int64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Si64Mui64(const int64_t size, const int64_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<int64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Si64Mui8(const int64_t size, const int64_t in0, const uint8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<int64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Si8Mi16(const int64_t size, const int8_t in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::And<int8_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void and_Si8Mi32(const int64_t size, const int8_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::And<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void and_Si8Mi64(const int64_t size, const int8_t in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::And<int8_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void and_Si8Mi8(const int64_t size, const int8_t in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::And<int8_t, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void and_Si8Mui16(const int64_t size, const int8_t in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::And<int8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void and_Si8Mui32(const int64_t size, const int8_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<int8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Si8Mui64(const int64_t size, const int8_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<int8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Si8Mui8(const int64_t size, const int8_t in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::And<int8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void and_Sui16Mi16(const int64_t size, const uint16_t in0, const int16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::And<uint16_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void and_Sui16Mi32(const int64_t size, const uint16_t in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<uint16_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Sui16Mi64(const int64_t size, const uint16_t in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint16_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Sui16Mi8(const int64_t size, const uint16_t in0, const int8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::And<uint16_t, int8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void and_Sui16Mui16(const int64_t size, const uint16_t in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::And<uint16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void and_Sui16Mui32(const int64_t size, const uint16_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<uint16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Sui16Mui64(const int64_t size, const uint16_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Sui16Mui8(const int64_t size, const uint16_t in0, const uint8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::And<uint16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void and_Sui32Mi16(const int64_t size, const uint32_t in0, const int16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<uint32_t, int16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Sui32Mi32(const int64_t size, const uint32_t in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<uint32_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Sui32Mi64(const int64_t size, const uint32_t in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint32_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Sui32Mi8(const int64_t size, const uint32_t in0, const int8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<uint32_t, int8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Sui32Mui16(const int64_t size, const uint32_t in0, const uint16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<uint32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Sui32Mui32(const int64_t size, const uint32_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<uint32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Sui32Mui64(const int64_t size, const uint32_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Sui32Mui8(const int64_t size, const uint32_t in0, const uint8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<uint32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Sui64Mi16(const int64_t size, const uint64_t in0, const int16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint64_t, int16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Sui64Mi32(const int64_t size, const uint64_t in0, const int32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint64_t, int32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Sui64Mi64(const int64_t size, const uint64_t in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint64_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Sui64Mi8(const int64_t size, const uint64_t in0, const int8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint64_t, int8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Sui64Mui16(const int64_t size, const uint64_t in0, const uint16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Sui64Mui32(const int64_t size, const uint64_t in0, const uint32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Sui64Mui64(const int64_t size, const uint64_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Sui64Mui8(const int64_t size, const uint64_t in0, const uint8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Sui8Mi16(const int64_t size, const uint8_t in0, const int16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::And<uint8_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void and_Sui8Mi32(const int64_t size, const uint8_t in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<uint8_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Sui8Mi64(const int64_t size, const uint8_t in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint8_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Sui8Mi8(const int64_t size, const uint8_t in0, const int8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::And<uint8_t, int8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void and_Sui8Mui16(const int64_t size, const uint8_t in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::And<uint8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void and_Sui8Mui32(const int64_t size, const uint8_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<uint8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Sui8Mui64(const int64_t size, const uint8_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Sui8Mui8(const int64_t size, const uint8_t in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::And<uint8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void and_UbUb(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::And<bool, bool, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void and_UbUc(const int64_t size, const int32_t * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::And<bool, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void and_UbUd(const int64_t size, const int32_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::And<bool, double, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void and_UcUb(const int64_t size, const double * in0_re, const double * in0_im, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::And<const jit::cpx_t &, bool, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void and_UcUc(const int64_t size, const double * in0_re, const double * in0_im, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::And<const jit::cpx_t &, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void and_UcUd(const int64_t size, const double * in0_re, const double * in0_im, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::And<const jit::cpx_t &, double, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void and_UdUb(const int64_t size, const double * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::And<double, bool, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void and_UdUc(const int64_t size, const double * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::And<double, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void and_UdUd(const int64_t size, const double * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::And<double, double, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void and_Ui16Ui16(const int64_t size, const int16_t * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::And<int16_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void and_Ui16Ui32(const int64_t size, const int16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::And<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void and_Ui16Ui64(const int64_t size, const int16_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::And<int16_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void and_Ui16Ui8(const int64_t size, const int16_t * in0, const int8_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::And<int16_t, int8_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void and_Ui16Uui16(const int64_t size, const int16_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::And<int16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void and_Ui16Uui32(const int64_t size, const int16_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<int16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Ui16Uui64(const int64_t size, const int16_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<int16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Ui16Uui8(const int64_t size, const int16_t * in0, const uint8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::And<int16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void and_Ui32Ui16(const int64_t size, const int32_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::And<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void and_Ui32Ui32(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::And<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void and_Ui32Ui64(const int64_t size, const int32_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::And<int32_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void and_Ui32Ui8(const int64_t size, const int32_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::And<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void and_Ui32Uui16(const int64_t size, const int32_t * in0, const uint16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<int32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Ui32Uui32(const int64_t size, const int32_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<int32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Ui32Uui64(const int64_t size, const int32_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<int32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Ui32Uui8(const int64_t size, const int32_t * in0, const uint8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<int32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Ui64Ui16(const int64_t size, const int64_t * in0, const int16_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::And<int64_t, int16_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void and_Ui64Ui32(const int64_t size, const int64_t * in0, const int32_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::And<int64_t, int32_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void and_Ui64Ui64(const int64_t size, const int64_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::And<int64_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void and_Ui64Ui8(const int64_t size, const int64_t * in0, const int8_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::And<int64_t, int8_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void and_Ui64Uui16(const int64_t size, const int64_t * in0, const uint16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<int64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Ui64Uui32(const int64_t size, const int64_t * in0, const uint32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<int64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Ui64Uui64(const int64_t size, const int64_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<int64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Ui64Uui8(const int64_t size, const int64_t * in0, const uint8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<int64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Ui8Ui16(const int64_t size, const int8_t * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::And<int8_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void and_Ui8Ui32(const int64_t size, const int8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::And<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void and_Ui8Ui64(const int64_t size, const int8_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::And<int8_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void and_Ui8Ui8(const int64_t size, const int8_t * in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::And<int8_t, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void and_Ui8Uui16(const int64_t size, const int8_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::And<int8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void and_Ui8Uui32(const int64_t size, const int8_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<int8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Ui8Uui64(const int64_t size, const int8_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<int8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Ui8Uui8(const int64_t size, const int8_t * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::And<int8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void and_Uui16Ui16(const int64_t size, const uint16_t * in0, const int16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::And<uint16_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void and_Uui16Ui32(const int64_t size, const uint16_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<uint16_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Uui16Ui64(const int64_t size, const uint16_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint16_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Uui16Ui8(const int64_t size, const uint16_t * in0, const int8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::And<uint16_t, int8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void and_Uui16Uui16(const int64_t size, const uint16_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::And<uint16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void and_Uui16Uui32(const int64_t size, const uint16_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<uint16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Uui16Uui64(const int64_t size, const uint16_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Uui16Uui8(const int64_t size, const uint16_t * in0, const uint8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::And<uint16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void and_Uui32Ui16(const int64_t size, const uint32_t * in0, const int16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<uint32_t, int16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Uui32Ui32(const int64_t size, const uint32_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<uint32_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Uui32Ui64(const int64_t size, const uint32_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint32_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Uui32Ui8(const int64_t size, const uint32_t * in0, const int8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<uint32_t, int8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Uui32Uui16(const int64_t size, const uint32_t * in0, const uint16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<uint32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Uui32Uui32(const int64_t size, const uint32_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<uint32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Uui32Uui64(const int64_t size, const uint32_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Uui32Uui8(const int64_t size, const uint32_t * in0, const uint8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<uint32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Uui64Ui16(const int64_t size, const uint64_t * in0, const int16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint64_t, int16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Uui64Ui32(const int64_t size, const uint64_t * in0, const int32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint64_t, int32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Uui64Ui64(const int64_t size, const uint64_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint64_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Uui64Ui8(const int64_t size, const uint64_t * in0, const int8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint64_t, int8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Uui64Uui16(const int64_t size, const uint64_t * in0, const uint16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Uui64Uui32(const int64_t size, const uint64_t * in0, const uint32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Uui64Uui64(const int64_t size, const uint64_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Uui64Uui8(const int64_t size, const uint64_t * in0, const uint8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Uui8Ui16(const int64_t size, const uint8_t * in0, const int16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::And<uint8_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void and_Uui8Ui32(const int64_t size, const uint8_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<uint8_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Uui8Ui64(const int64_t size, const uint8_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint8_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Uui8Ui8(const int64_t size, const uint8_t * in0, const int8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::And<uint8_t, int8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void and_Uui8Uui16(const int64_t size, const uint8_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::And<uint8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void and_Uui8Uui32(const int64_t size, const uint8_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::And<uint8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void and_Uui8Uui64(const int64_t size, const uint8_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::And<uint8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void and_Uui8Uui8(const int64_t size, const uint8_t * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::And<uint8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void tan_Mc(const int64_t size, const double * in0_re, const double * in0_im, double ** out_re, double ** out_im) { jit::vect::unary<jit::functors::tan<const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void tan_Md(const int64_t size, const double * in0, double ** out) { jit::vect::unary<jit::functors::tan<double, double>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapOut<double>(out)); }
void eq_MbMb(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<bool, bool, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_MbMc(const int64_t size, const int32_t * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::eq<bool, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void eq_MbMd(const int64_t size, const int32_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<bool, double, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_MbMi16(const int64_t size, const int32_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<bool, int16_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_MbMi32(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<bool, int32_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_MbMi64(const int64_t size, const int32_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<bool, int64_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_MbMi8(const int64_t size, const int32_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<bool, int8_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_MbMui16(const int64_t size, const int32_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<bool, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_MbMui32(const int64_t size, const int32_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<bool, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_MbMui64(const int64_t size, const int32_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<bool, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_MbMui8(const int64_t size, const int32_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<bool, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_MbSb(const int64_t size, const int32_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<bool, bool, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_MbSc(const int64_t size, const int32_t * in0, const double in1_re, const double in1_im, int32_t ** out) { jit::vect::binary<jit::functors::eq<bool, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<jit::cpx_t>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void eq_MbSd(const int64_t size, const int32_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<bool, double, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_MbSi16(const int64_t size, const int32_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<bool, int16_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_MbSi32(const int64_t size, const int32_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<bool, int32_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_MbSi64(const int64_t size, const int32_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<bool, int64_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_MbSi8(const int64_t size, const int32_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<bool, int8_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_MbSui16(const int64_t size, const int32_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<bool, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_MbSui32(const int64_t size, const int32_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<bool, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_MbSui64(const int64_t size, const int32_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<bool, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_MbSui8(const int64_t size, const int32_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<bool, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_McMb(const int64_t size, const double * in0_re, const double * in0_im, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<const jit::cpx_t &, bool, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_McMc(const int64_t size, const double * in0_re, const double * in0_im, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::eq<const jit::cpx_t &, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void eq_McMd(const int64_t size, const double * in0_re, const double * in0_im, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<const jit::cpx_t &, double, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_McMi16(const int64_t size, const double * in0_re, const double * in0_im, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<const jit::cpx_t &, int16_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_McMi32(const int64_t size, const double * in0_re, const double * in0_im, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<const jit::cpx_t &, int32_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_McMi64(const int64_t size, const double * in0_re, const double * in0_im, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<const jit::cpx_t &, int64_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_McMi8(const int64_t size, const double * in0_re, const double * in0_im, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<const jit::cpx_t &, int8_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_McMui16(const int64_t size, const double * in0_re, const double * in0_im, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<const jit::cpx_t &, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_McMui32(const int64_t size, const double * in0_re, const double * in0_im, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<const jit::cpx_t &, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_McMui64(const int64_t size, const double * in0_re, const double * in0_im, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<const jit::cpx_t &, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_McMui8(const int64_t size, const double * in0_re, const double * in0_im, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<const jit::cpx_t &, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_McSb(const int64_t size, const double * in0_re, const double * in0_im, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<const jit::cpx_t &, bool, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_McSc(const int64_t size, const double * in0_re, const double * in0_im, const double in1_re, const double in1_im, int32_t ** out) { jit::vect::binary<jit::functors::eq<const jit::cpx_t &, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<jit::cpx_t>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void eq_McSd(const int64_t size, const double * in0_re, const double * in0_im, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<const jit::cpx_t &, double, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_McSi16(const int64_t size, const double * in0_re, const double * in0_im, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<const jit::cpx_t &, int16_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_McSi32(const int64_t size, const double * in0_re, const double * in0_im, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<const jit::cpx_t &, int32_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_McSi64(const int64_t size, const double * in0_re, const double * in0_im, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<const jit::cpx_t &, int64_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_McSi8(const int64_t size, const double * in0_re, const double * in0_im, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<const jit::cpx_t &, int8_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_McSui16(const int64_t size, const double * in0_re, const double * in0_im, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<const jit::cpx_t &, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_McSui32(const int64_t size, const double * in0_re, const double * in0_im, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<const jit::cpx_t &, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_McSui64(const int64_t size, const double * in0_re, const double * in0_im, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<const jit::cpx_t &, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_McSui8(const int64_t size, const double * in0_re, const double * in0_im, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<const jit::cpx_t &, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_MdMb(const int64_t size, const double * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<double, bool, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_MdMc(const int64_t size, const double * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::eq<double, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void eq_MdMd(const int64_t size, const double * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<double, double, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_MdMi16(const int64_t size, const double * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<double, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_MdMi32(const int64_t size, const double * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<double, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_MdMi64(const int64_t size, const double * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<double, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_MdMi8(const int64_t size, const double * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<double, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_MdMui16(const int64_t size, const double * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<double, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_MdMui32(const int64_t size, const double * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<double, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_MdMui64(const int64_t size, const double * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<double, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_MdMui8(const int64_t size, const double * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<double, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_MdSb(const int64_t size, const double * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<double, bool, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_MdSc(const int64_t size, const double * in0, const double in1_re, const double in1_im, int32_t ** out) { jit::vect::binary<jit::functors::eq<double, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<jit::cpx_t>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void eq_MdSd(const int64_t size, const double * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<double, double, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_MdSi16(const int64_t size, const double * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<double, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_MdSi32(const int64_t size, const double * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<double, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_MdSi64(const int64_t size, const double * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<double, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_MdSi8(const int64_t size, const double * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<double, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_MdSui16(const int64_t size, const double * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<double, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_MdSui32(const int64_t size, const double * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<double, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_MdSui64(const int64_t size, const double * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<double, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_MdSui8(const int64_t size, const double * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<double, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi16Mb(const int64_t size, const int16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int16_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi16Mc(const int64_t size, const int16_t * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::eq<int16_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi16Md(const int64_t size, const int16_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi16Mi16(const int64_t size, const int16_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi16Mi32(const int64_t size, const int16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi16Mi64(const int64_t size, const int16_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi16Mi8(const int64_t size, const int16_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi16Mui16(const int64_t size, const int16_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi16Mui32(const int64_t size, const int16_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi16Mui64(const int64_t size, const int16_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi16Mui8(const int64_t size, const int16_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi16Sb(const int64_t size, const int16_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int16_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi16Sc(const int64_t size, const int16_t * in0, const double in1_re, const double in1_im, int32_t ** out) { jit::vect::binary<jit::functors::eq<int16_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi16Sd(const int64_t size, const int16_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi16Si16(const int64_t size, const int16_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi16Si32(const int64_t size, const int16_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi16Si64(const int64_t size, const int16_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi16Si8(const int64_t size, const int16_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi16Sui16(const int64_t size, const int16_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi16Sui32(const int64_t size, const int16_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi16Sui64(const int64_t size, const int16_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi16Sui8(const int64_t size, const int16_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi32Mb(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int32_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi32Mc(const int64_t size, const int32_t * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::eq<int32_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi32Md(const int64_t size, const int32_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi32Mi16(const int64_t size, const int32_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi32Mi32(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi32Mi64(const int64_t size, const int32_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi32Mi8(const int64_t size, const int32_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi32Mui16(const int64_t size, const int32_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi32Mui32(const int64_t size, const int32_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi32Mui64(const int64_t size, const int32_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi32Mui8(const int64_t size, const int32_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi32Sb(const int64_t size, const int32_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int32_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi32Sc(const int64_t size, const int32_t * in0, const double in1_re, const double in1_im, int32_t ** out) { jit::vect::binary<jit::functors::eq<int32_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi32Sd(const int64_t size, const int32_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi32Si16(const int64_t size, const int32_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi32Si32(const int64_t size, const int32_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi32Si64(const int64_t size, const int32_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi32Si8(const int64_t size, const int32_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi32Sui16(const int64_t size, const int32_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi32Sui32(const int64_t size, const int32_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi32Sui64(const int64_t size, const int32_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi32Sui8(const int64_t size, const int32_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi64Mb(const int64_t size, const int64_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int64_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi64Mc(const int64_t size, const int64_t * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::eq<int64_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi64Md(const int64_t size, const int64_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi64Mi16(const int64_t size, const int64_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi64Mi32(const int64_t size, const int64_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi64Mi64(const int64_t size, const int64_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi64Mi8(const int64_t size, const int64_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi64Mui16(const int64_t size, const int64_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi64Mui32(const int64_t size, const int64_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi64Mui64(const int64_t size, const int64_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi64Mui8(const int64_t size, const int64_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi64Sb(const int64_t size, const int64_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int64_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi64Sc(const int64_t size, const int64_t * in0, const double in1_re, const double in1_im, int32_t ** out) { jit::vect::binary<jit::functors::eq<int64_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi64Sd(const int64_t size, const int64_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi64Si16(const int64_t size, const int64_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi64Si32(const int64_t size, const int64_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi64Si64(const int64_t size, const int64_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi64Si8(const int64_t size, const int64_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi64Sui16(const int64_t size, const int64_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi64Sui32(const int64_t size, const int64_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi64Sui64(const int64_t size, const int64_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi64Sui8(const int64_t size, const int64_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi8Mb(const int64_t size, const int8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int8_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi8Mc(const int64_t size, const int8_t * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::eq<int8_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi8Md(const int64_t size, const int8_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi8Mi16(const int64_t size, const int8_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi8Mi32(const int64_t size, const int8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi8Mi64(const int64_t size, const int8_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi8Mi8(const int64_t size, const int8_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi8Mui16(const int64_t size, const int8_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi8Mui32(const int64_t size, const int8_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi8Mui64(const int64_t size, const int8_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi8Mui8(const int64_t size, const int8_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi8Sb(const int64_t size, const int8_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int8_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi8Sc(const int64_t size, const int8_t * in0, const double in1_re, const double in1_im, int32_t ** out) { jit::vect::binary<jit::functors::eq<int8_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi8Sd(const int64_t size, const int8_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi8Si16(const int64_t size, const int8_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi8Si32(const int64_t size, const int8_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi8Si64(const int64_t size, const int8_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi8Si8(const int64_t size, const int8_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi8Sui16(const int64_t size, const int8_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi8Sui32(const int64_t size, const int8_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi8Sui64(const int64_t size, const int8_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mi8Sui8(const int64_t size, const int8_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui16Mb(const int64_t size, const uint16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint16_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui16Mc(const int64_t size, const uint16_t * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint16_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui16Md(const int64_t size, const uint16_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui16Mi16(const int64_t size, const uint16_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui16Mi32(const int64_t size, const uint16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui16Mi64(const int64_t size, const uint16_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui16Mi8(const int64_t size, const uint16_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui16Mui16(const int64_t size, const uint16_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui16Mui32(const int64_t size, const uint16_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui16Mui64(const int64_t size, const uint16_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui16Mui8(const int64_t size, const uint16_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui16Sb(const int64_t size, const uint16_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint16_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui16Sc(const int64_t size, const uint16_t * in0, const double in1_re, const double in1_im, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint16_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui16Sd(const int64_t size, const uint16_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui16Si16(const int64_t size, const uint16_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui16Si32(const int64_t size, const uint16_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui16Si64(const int64_t size, const uint16_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui16Si8(const int64_t size, const uint16_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui16Sui16(const int64_t size, const uint16_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui16Sui32(const int64_t size, const uint16_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui16Sui64(const int64_t size, const uint16_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui16Sui8(const int64_t size, const uint16_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui32Mb(const int64_t size, const uint32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint32_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui32Mc(const int64_t size, const uint32_t * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint32_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui32Md(const int64_t size, const uint32_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui32Mi16(const int64_t size, const uint32_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui32Mi32(const int64_t size, const uint32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui32Mi64(const int64_t size, const uint32_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui32Mi8(const int64_t size, const uint32_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui32Mui16(const int64_t size, const uint32_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui32Mui32(const int64_t size, const uint32_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui32Mui64(const int64_t size, const uint32_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui32Mui8(const int64_t size, const uint32_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui32Sb(const int64_t size, const uint32_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint32_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui32Sc(const int64_t size, const uint32_t * in0, const double in1_re, const double in1_im, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint32_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui32Sd(const int64_t size, const uint32_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui32Si16(const int64_t size, const uint32_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui32Si32(const int64_t size, const uint32_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui32Si64(const int64_t size, const uint32_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui32Si8(const int64_t size, const uint32_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui32Sui16(const int64_t size, const uint32_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui32Sui32(const int64_t size, const uint32_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui32Sui64(const int64_t size, const uint32_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui32Sui8(const int64_t size, const uint32_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui64Mb(const int64_t size, const uint64_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint64_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui64Mc(const int64_t size, const uint64_t * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint64_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui64Md(const int64_t size, const uint64_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui64Mi16(const int64_t size, const uint64_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui64Mi32(const int64_t size, const uint64_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui64Mi64(const int64_t size, const uint64_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui64Mi8(const int64_t size, const uint64_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui64Mui16(const int64_t size, const uint64_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui64Mui32(const int64_t size, const uint64_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui64Mui64(const int64_t size, const uint64_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui64Mui8(const int64_t size, const uint64_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui64Sb(const int64_t size, const uint64_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint64_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui64Sc(const int64_t size, const uint64_t * in0, const double in1_re, const double in1_im, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint64_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui64Sd(const int64_t size, const uint64_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui64Si16(const int64_t size, const uint64_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui64Si32(const int64_t size, const uint64_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui64Si64(const int64_t size, const uint64_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui64Si8(const int64_t size, const uint64_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui64Sui16(const int64_t size, const uint64_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui64Sui32(const int64_t size, const uint64_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui64Sui64(const int64_t size, const uint64_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui64Sui8(const int64_t size, const uint64_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui8Mb(const int64_t size, const uint8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint8_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui8Mc(const int64_t size, const uint8_t * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint8_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui8Md(const int64_t size, const uint8_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui8Mi16(const int64_t size, const uint8_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui8Mi32(const int64_t size, const uint8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui8Mi64(const int64_t size, const uint8_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui8Mi8(const int64_t size, const uint8_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui8Mui16(const int64_t size, const uint8_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui8Mui32(const int64_t size, const uint8_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui8Mui64(const int64_t size, const uint8_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui8Mui8(const int64_t size, const uint8_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui8Sb(const int64_t size, const uint8_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint8_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui8Sc(const int64_t size, const uint8_t * in0, const double in1_re, const double in1_im, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint8_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui8Sd(const int64_t size, const uint8_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui8Si16(const int64_t size, const uint8_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui8Si32(const int64_t size, const uint8_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui8Si64(const int64_t size, const uint8_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui8Si8(const int64_t size, const uint8_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui8Sui16(const int64_t size, const uint8_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui8Sui32(const int64_t size, const uint8_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui8Sui64(const int64_t size, const uint8_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Mui8Sui8(const int64_t size, const uint8_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_SbMb(const int64_t size, const int32_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<bool, bool, int32_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_SbMc(const int64_t size, const int32_t in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::eq<bool, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void eq_SbMd(const int64_t size, const int32_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<bool, double, int32_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_SbMi16(const int64_t size, const int32_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<bool, int16_t, int32_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_SbMi32(const int64_t size, const int32_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<bool, int32_t, int32_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_SbMi64(const int64_t size, const int32_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<bool, int64_t, int32_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_SbMi8(const int64_t size, const int32_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<bool, int8_t, int32_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_SbMui16(const int64_t size, const int32_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<bool, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_SbMui32(const int64_t size, const int32_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<bool, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_SbMui64(const int64_t size, const int32_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<bool, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_SbMui8(const int64_t size, const int32_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<bool, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_ScMb(const int64_t size, const double in0_re, const double in0_im, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<const jit::cpx_t &, bool, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t>(in0_re, in0_im), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_ScMc(const int64_t size, const double in0_re, const double in0_im, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::eq<const jit::cpx_t &, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t>(in0_re, in0_im), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void eq_ScMd(const int64_t size, const double in0_re, const double in0_im, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<const jit::cpx_t &, double, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t>(in0_re, in0_im), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_ScMi16(const int64_t size, const double in0_re, const double in0_im, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<const jit::cpx_t &, int16_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t>(in0_re, in0_im), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_ScMi32(const int64_t size, const double in0_re, const double in0_im, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<const jit::cpx_t &, int32_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t>(in0_re, in0_im), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_ScMi64(const int64_t size, const double in0_re, const double in0_im, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<const jit::cpx_t &, int64_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t>(in0_re, in0_im), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_ScMi8(const int64_t size, const double in0_re, const double in0_im, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<const jit::cpx_t &, int8_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t>(in0_re, in0_im), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_ScMui16(const int64_t size, const double in0_re, const double in0_im, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<const jit::cpx_t &, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t>(in0_re, in0_im), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_ScMui32(const int64_t size, const double in0_re, const double in0_im, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<const jit::cpx_t &, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t>(in0_re, in0_im), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_ScMui64(const int64_t size, const double in0_re, const double in0_im, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<const jit::cpx_t &, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t>(in0_re, in0_im), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_ScMui8(const int64_t size, const double in0_re, const double in0_im, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<const jit::cpx_t &, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t>(in0_re, in0_im), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_SdMb(const int64_t size, const double in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<double, bool, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_SdMc(const int64_t size, const double in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::eq<double, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void eq_SdMd(const int64_t size, const double in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<double, double, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_SdMi16(const int64_t size, const double in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<double, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_SdMi32(const int64_t size, const double in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<double, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_SdMi64(const int64_t size, const double in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<double, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_SdMi8(const int64_t size, const double in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<double, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_SdMui16(const int64_t size, const double in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<double, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_SdMui32(const int64_t size, const double in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<double, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_SdMui64(const int64_t size, const double in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<double, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_SdMui8(const int64_t size, const double in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<double, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Si16Mb(const int64_t size, const int16_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int16_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Si16Mc(const int64_t size, const int16_t in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::eq<int16_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void eq_Si16Md(const int64_t size, const int16_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Si16Mi16(const int64_t size, const int16_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Si16Mi32(const int64_t size, const int16_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Si16Mi64(const int64_t size, const int16_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Si16Mi8(const int64_t size, const int16_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Si16Mui16(const int64_t size, const int16_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Si16Mui32(const int64_t size, const int16_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Si16Mui64(const int64_t size, const int16_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Si16Mui8(const int64_t size, const int16_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Si32Mb(const int64_t size, const int32_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int32_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Si32Mc(const int64_t size, const int32_t in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::eq<int32_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void eq_Si32Md(const int64_t size, const int32_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Si32Mi16(const int64_t size, const int32_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Si32Mi32(const int64_t size, const int32_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Si32Mi64(const int64_t size, const int32_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Si32Mi8(const int64_t size, const int32_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Si32Mui16(const int64_t size, const int32_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Si32Mui32(const int64_t size, const int32_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Si32Mui64(const int64_t size, const int32_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Si32Mui8(const int64_t size, const int32_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Si64Mb(const int64_t size, const int64_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int64_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Si64Mc(const int64_t size, const int64_t in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::eq<int64_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void eq_Si64Md(const int64_t size, const int64_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Si64Mi16(const int64_t size, const int64_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Si64Mi32(const int64_t size, const int64_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Si64Mi64(const int64_t size, const int64_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Si64Mi8(const int64_t size, const int64_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Si64Mui16(const int64_t size, const int64_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Si64Mui32(const int64_t size, const int64_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Si64Mui64(const int64_t size, const int64_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Si64Mui8(const int64_t size, const int64_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Si8Mb(const int64_t size, const int8_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int8_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Si8Mc(const int64_t size, const int8_t in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::eq<int8_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void eq_Si8Md(const int64_t size, const int8_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Si8Mi16(const int64_t size, const int8_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Si8Mi32(const int64_t size, const int8_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Si8Mi64(const int64_t size, const int8_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Si8Mi8(const int64_t size, const int8_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Si8Mui16(const int64_t size, const int8_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Si8Mui32(const int64_t size, const int8_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Si8Mui64(const int64_t size, const int8_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Si8Mui8(const int64_t size, const int8_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Sui16Mb(const int64_t size, const uint16_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint16_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Sui16Mc(const int64_t size, const uint16_t in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint16_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void eq_Sui16Md(const int64_t size, const uint16_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Sui16Mi16(const int64_t size, const uint16_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Sui16Mi32(const int64_t size, const uint16_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Sui16Mi64(const int64_t size, const uint16_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Sui16Mi8(const int64_t size, const uint16_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Sui16Mui16(const int64_t size, const uint16_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Sui16Mui32(const int64_t size, const uint16_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Sui16Mui64(const int64_t size, const uint16_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Sui16Mui8(const int64_t size, const uint16_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Sui32Mb(const int64_t size, const uint32_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint32_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Sui32Mc(const int64_t size, const uint32_t in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint32_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void eq_Sui32Md(const int64_t size, const uint32_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Sui32Mi16(const int64_t size, const uint32_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Sui32Mi32(const int64_t size, const uint32_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Sui32Mi64(const int64_t size, const uint32_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Sui32Mi8(const int64_t size, const uint32_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Sui32Mui16(const int64_t size, const uint32_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Sui32Mui32(const int64_t size, const uint32_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Sui32Mui64(const int64_t size, const uint32_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Sui32Mui8(const int64_t size, const uint32_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Sui64Mb(const int64_t size, const uint64_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint64_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Sui64Mc(const int64_t size, const uint64_t in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint64_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void eq_Sui64Md(const int64_t size, const uint64_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Sui64Mi16(const int64_t size, const uint64_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Sui64Mi32(const int64_t size, const uint64_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Sui64Mi64(const int64_t size, const uint64_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Sui64Mi8(const int64_t size, const uint64_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Sui64Mui16(const int64_t size, const uint64_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Sui64Mui32(const int64_t size, const uint64_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Sui64Mui64(const int64_t size, const uint64_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Sui64Mui8(const int64_t size, const uint64_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Sui8Mb(const int64_t size, const uint8_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint8_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Sui8Mc(const int64_t size, const uint8_t in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint8_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void eq_Sui8Md(const int64_t size, const uint8_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Sui8Mi16(const int64_t size, const uint8_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Sui8Mi32(const int64_t size, const uint8_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Sui8Mi64(const int64_t size, const uint8_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Sui8Mi8(const int64_t size, const uint8_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Sui8Mui16(const int64_t size, const uint8_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Sui8Mui32(const int64_t size, const uint8_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Sui8Mui64(const int64_t size, const uint8_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Sui8Mui8(const int64_t size, const uint8_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_UbUb(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<bool, bool, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_UbUc(const int64_t size, const int32_t * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::eq<bool, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void eq_UbUd(const int64_t size, const int32_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<bool, double, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_UbUi16(const int64_t size, const int32_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<bool, int16_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_UbUi32(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<bool, int32_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_UbUi64(const int64_t size, const int32_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<bool, int64_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_UbUi8(const int64_t size, const int32_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<bool, int8_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_UbUui16(const int64_t size, const int32_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<bool, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_UbUui32(const int64_t size, const int32_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<bool, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_UbUui64(const int64_t size, const int32_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<bool, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_UbUui8(const int64_t size, const int32_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<bool, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_UcUb(const int64_t size, const double * in0_re, const double * in0_im, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<const jit::cpx_t &, bool, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_UcUc(const int64_t size, const double * in0_re, const double * in0_im, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::eq<const jit::cpx_t &, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void eq_UcUd(const int64_t size, const double * in0_re, const double * in0_im, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<const jit::cpx_t &, double, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_UcUi16(const int64_t size, const double * in0_re, const double * in0_im, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<const jit::cpx_t &, int16_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_UcUi32(const int64_t size, const double * in0_re, const double * in0_im, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<const jit::cpx_t &, int32_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_UcUi64(const int64_t size, const double * in0_re, const double * in0_im, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<const jit::cpx_t &, int64_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_UcUi8(const int64_t size, const double * in0_re, const double * in0_im, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<const jit::cpx_t &, int8_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_UcUui16(const int64_t size, const double * in0_re, const double * in0_im, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<const jit::cpx_t &, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_UcUui32(const int64_t size, const double * in0_re, const double * in0_im, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<const jit::cpx_t &, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_UcUui64(const int64_t size, const double * in0_re, const double * in0_im, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<const jit::cpx_t &, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_UcUui8(const int64_t size, const double * in0_re, const double * in0_im, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<const jit::cpx_t &, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_UdUb(const int64_t size, const double * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<double, bool, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_UdUc(const int64_t size, const double * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::eq<double, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void eq_UdUd(const int64_t size, const double * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<double, double, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_UdUi16(const int64_t size, const double * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<double, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_UdUi32(const int64_t size, const double * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<double, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_UdUi64(const int64_t size, const double * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<double, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_UdUi8(const int64_t size, const double * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<double, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_UdUui16(const int64_t size, const double * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<double, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_UdUui32(const int64_t size, const double * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<double, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_UdUui64(const int64_t size, const double * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<double, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_UdUui8(const int64_t size, const double * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<double, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Ui16Ub(const int64_t size, const int16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int16_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Ui16Uc(const int64_t size, const int16_t * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::eq<int16_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void eq_Ui16Ud(const int64_t size, const int16_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Ui16Ui16(const int64_t size, const int16_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Ui16Ui32(const int64_t size, const int16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Ui16Ui64(const int64_t size, const int16_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Ui16Ui8(const int64_t size, const int16_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Ui16Uui16(const int64_t size, const int16_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Ui16Uui32(const int64_t size, const int16_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Ui16Uui64(const int64_t size, const int16_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Ui16Uui8(const int64_t size, const int16_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Ui32Ub(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int32_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Ui32Uc(const int64_t size, const int32_t * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::eq<int32_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void eq_Ui32Ud(const int64_t size, const int32_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Ui32Ui16(const int64_t size, const int32_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Ui32Ui32(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Ui32Ui64(const int64_t size, const int32_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Ui32Ui8(const int64_t size, const int32_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Ui32Uui16(const int64_t size, const int32_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Ui32Uui32(const int64_t size, const int32_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Ui32Uui64(const int64_t size, const int32_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Ui32Uui8(const int64_t size, const int32_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Ui64Ub(const int64_t size, const int64_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int64_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Ui64Uc(const int64_t size, const int64_t * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::eq<int64_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void eq_Ui64Ud(const int64_t size, const int64_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Ui64Ui16(const int64_t size, const int64_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Ui64Ui32(const int64_t size, const int64_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Ui64Ui64(const int64_t size, const int64_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Ui64Ui8(const int64_t size, const int64_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Ui64Uui16(const int64_t size, const int64_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Ui64Uui32(const int64_t size, const int64_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Ui64Uui64(const int64_t size, const int64_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Ui64Uui8(const int64_t size, const int64_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Ui8Ub(const int64_t size, const int8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int8_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Ui8Uc(const int64_t size, const int8_t * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::eq<int8_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void eq_Ui8Ud(const int64_t size, const int8_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Ui8Ui16(const int64_t size, const int8_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Ui8Ui32(const int64_t size, const int8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Ui8Ui64(const int64_t size, const int8_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Ui8Ui8(const int64_t size, const int8_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Ui8Uui16(const int64_t size, const int8_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Ui8Uui32(const int64_t size, const int8_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Ui8Uui64(const int64_t size, const int8_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Ui8Uui8(const int64_t size, const int8_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<int8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Uui16Ub(const int64_t size, const uint16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint16_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Uui16Uc(const int64_t size, const uint16_t * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint16_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void eq_Uui16Ud(const int64_t size, const uint16_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Uui16Ui16(const int64_t size, const uint16_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Uui16Ui32(const int64_t size, const uint16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Uui16Ui64(const int64_t size, const uint16_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Uui16Ui8(const int64_t size, const uint16_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Uui16Uui16(const int64_t size, const uint16_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Uui16Uui32(const int64_t size, const uint16_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Uui16Uui64(const int64_t size, const uint16_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Uui16Uui8(const int64_t size, const uint16_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Uui32Ub(const int64_t size, const uint32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint32_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Uui32Uc(const int64_t size, const uint32_t * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint32_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void eq_Uui32Ud(const int64_t size, const uint32_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Uui32Ui16(const int64_t size, const uint32_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Uui32Ui32(const int64_t size, const uint32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Uui32Ui64(const int64_t size, const uint32_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Uui32Ui8(const int64_t size, const uint32_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Uui32Uui16(const int64_t size, const uint32_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Uui32Uui32(const int64_t size, const uint32_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Uui32Uui64(const int64_t size, const uint32_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Uui32Uui8(const int64_t size, const uint32_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Uui64Ub(const int64_t size, const uint64_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint64_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Uui64Uc(const int64_t size, const uint64_t * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint64_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void eq_Uui64Ud(const int64_t size, const uint64_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Uui64Ui16(const int64_t size, const uint64_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Uui64Ui32(const int64_t size, const uint64_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Uui64Ui64(const int64_t size, const uint64_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Uui64Ui8(const int64_t size, const uint64_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Uui64Uui16(const int64_t size, const uint64_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Uui64Uui32(const int64_t size, const uint64_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Uui64Uui64(const int64_t size, const uint64_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Uui64Uui8(const int64_t size, const uint64_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Uui8Ub(const int64_t size, const uint8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint8_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Uui8Uc(const int64_t size, const uint8_t * in0, const double * in1_re, const double * in1_im, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint8_t, const jit::cpx_t &, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<int32_t>(out)); }
void eq_Uui8Ud(const int64_t size, const uint8_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Uui8Ui16(const int64_t size, const uint8_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Uui8Ui32(const int64_t size, const uint8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Uui8Ui64(const int64_t size, const uint8_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Uui8Ui8(const int64_t size, const uint8_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Uui8Uui16(const int64_t size, const uint8_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Uui8Uui32(const int64_t size, const uint8_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Uui8Uui64(const int64_t size, const uint8_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void eq_Uui8Uui8(const int64_t size, const uint8_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::eq<uint8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void log_Mc(const int64_t size, const double * in0_re, const double * in0_im, double ** out_re, double ** out_im) { jit::vect::unary<jit::functors::log<const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void log_Md(const int64_t size, const double * in0, double ** out_re, double ** out_im) { jit::vect::unary<jit::functors::log<double, jit::cpx_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void floor_Mc(const int64_t size, const double * in0_re, const double * in0_im, double ** out_re, double ** out_im) { jit::vect::unary<jit::functors::floor<const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void floor_Md(const int64_t size, const double * in0, double ** out) { jit::vect::unary<jit::functors::floor<double, double>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapOut<double>(out)); }
void floor_Mi16(const int64_t size, const int16_t * in0, int16_t ** out) { jit::vect::unary<jit::functors::floor<int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapOut<int16_t>(out)); }
void floor_Mi32(const int64_t size, const int32_t * in0, int32_t ** out) { jit::vect::unary<jit::functors::floor<int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapOut<int32_t>(out)); }
void floor_Mi64(const int64_t size, const int64_t * in0, int64_t ** out) { jit::vect::unary<jit::functors::floor<int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapOut<int64_t>(out)); }
void floor_Mi8(const int64_t size, const int8_t * in0, int8_t ** out) { jit::vect::unary<jit::functors::floor<int8_t, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapOut<int8_t>(out)); }
void floor_Mui16(const int64_t size, const uint16_t * in0, uint16_t ** out) { jit::vect::unary<jit::functors::floor<uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapOut<uint16_t>(out)); }
void floor_Mui32(const int64_t size, const uint32_t * in0, uint32_t ** out) { jit::vect::unary<jit::functors::floor<uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapOut<uint32_t>(out)); }
void floor_Mui64(const int64_t size, const uint64_t * in0, uint64_t ** out) { jit::vect::unary<jit::functors::floor<uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapOut<uint64_t>(out)); }
void floor_Mui8(const int64_t size, const uint8_t * in0, uint8_t ** out) { jit::vect::unary<jit::functors::floor<uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapOut<uint8_t>(out)); }
void int_Mc(const int64_t size, const double * in0_re, const double * in0_im, double ** out_re, double ** out_im) { jit::vect::unary<jit::functors::trunc<const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void int_Md(const int64_t size, const double * in0, double ** out) { jit::vect::unary<jit::functors::trunc<double, double>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapOut<double>(out)); }
void int_Mi16(const int64_t size, const int16_t * in0, int16_t ** out) { jit::vect::unary<jit::functors::trunc<int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapOut<int16_t>(out)); }
void int_Mi32(const int64_t size, const int32_t * in0, int32_t ** out) { jit::vect::unary<jit::functors::trunc<int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapOut<int32_t>(out)); }
void int_Mi64(const int64_t size, const int64_t * in0, int64_t ** out) { jit::vect::unary<jit::functors::trunc<int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapOut<int64_t>(out)); }
void int_Mi8(const int64_t size, const int8_t * in0, int8_t ** out) { jit::vect::unary<jit::functors::trunc<int8_t, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapOut<int8_t>(out)); }
void int_Mui16(const int64_t size, const uint16_t * in0, uint16_t ** out) { jit::vect::unary<jit::functors::trunc<uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapOut<uint16_t>(out)); }
void int_Mui32(const int64_t size, const uint32_t * in0, uint32_t ** out) { jit::vect::unary<jit::functors::trunc<uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapOut<uint32_t>(out)); }
void int_Mui64(const int64_t size, const uint64_t * in0, uint64_t ** out) { jit::vect::unary<jit::functors::trunc<uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapOut<uint64_t>(out)); }
void int_Mui8(const int64_t size, const uint8_t * in0, uint8_t ** out) { jit::vect::unary<jit::functors::trunc<uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapOut<uint8_t>(out)); }
void fix_Mc(const int64_t size, const double * in0_re, const double * in0_im, double ** out_re, double ** out_im) { jit::vect::unary<jit::functors::fix<const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void fix_Md(const int64_t size, const double * in0, double ** out) { jit::vect::unary<jit::functors::fix<double, double>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapOut<double>(out)); }
void fix_Mi16(const int64_t size, const int16_t * in0, int16_t ** out) { jit::vect::unary<jit::functors::fix<int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapOut<int16_t>(out)); }
void fix_Mi32(const int64_t size, const int32_t * in0, int32_t ** out) { jit::vect::unary<jit::functors::fix<int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapOut<int32_t>(out)); }
void fix_Mi64(const int64_t size, const int64_t * in0, int64_t ** out) { jit::vect::unary<jit::functors::fix<int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapOut<int64_t>(out)); }
void fix_Mi8(const int64_t size, const int8_t * in0, int8_t ** out) { jit::vect::unary<jit::functors::fix<int8_t, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapOut<int8_t>(out)); }
void fix_Mui16(const int64_t size, const uint16_t * in0, uint16_t ** out) { jit::vect::unary<jit::functors::fix<uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapOut<uint16_t>(out)); }
void fix_Mui32(const int64_t size, const uint32_t * in0, uint32_t ** out) { jit::vect::unary<jit::functors::fix<uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapOut<uint32_t>(out)); }
void fix_Mui64(const int64_t size, const uint64_t * in0, uint64_t ** out) { jit::vect::unary<jit::functors::fix<uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapOut<uint64_t>(out)); }
void fix_Mui8(const int64_t size, const uint8_t * in0, uint8_t ** out) { jit::vect::unary<jit::functors::fix<uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapOut<uint8_t>(out)); }
void sqrt_Mc(const int64_t size, const double * in0_re, const double * in0_im, double ** out_re, double ** out_im) { jit::vect::unary<jit::functors::sqrt<const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void sqrt_Md(const int64_t size, const double * in0, double ** out_re, double ** out_im) { jit::vect::unary<jit::functors::sqrt<double, jit::cpx_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void uint16_Md(const int64_t size, const double * in0, uint16_t ** out) { jit::vect::unary<jit::functors::uint16<double, uint16_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapOut<uint16_t>(out)); }
void uint16_Mi16(const int64_t size, const int16_t * in0, uint16_t ** out) { jit::vect::unary<jit::functors::uint16<int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapOut<uint16_t>(out)); }
void uint16_Mi32(const int64_t size, const int32_t * in0, uint16_t ** out) { jit::vect::unary<jit::functors::uint16<int32_t, uint16_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapOut<uint16_t>(out)); }
void uint16_Mi64(const int64_t size, const int64_t * in0, uint16_t ** out) { jit::vect::unary<jit::functors::uint16<int64_t, uint16_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapOut<uint16_t>(out)); }
void uint16_Mi8(const int64_t size, const int8_t * in0, uint16_t ** out) { jit::vect::unary<jit::functors::uint16<int8_t, uint16_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapOut<uint16_t>(out)); }
void uint16_Mui16(const int64_t size, const uint16_t * in0, uint16_t ** out) { jit::vect::unary<jit::functors::uint16<uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapOut<uint16_t>(out)); }
void uint16_Mui32(const int64_t size, const uint32_t * in0, uint16_t ** out) { jit::vect::unary<jit::functors::uint16<uint32_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapOut<uint16_t>(out)); }
void uint16_Mui64(const int64_t size, const uint64_t * in0, uint16_t ** out) { jit::vect::unary<jit::functors::uint16<uint64_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapOut<uint16_t>(out)); }
void uint16_Mui8(const int64_t size, const uint8_t * in0, uint16_t ** out) { jit::vect::unary<jit::functors::uint16<uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapOut<uint16_t>(out)); }
void le_MdMd(const int64_t size, const double * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<double, double, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_MdMi16(const int64_t size, const double * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<double, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_MdMi32(const int64_t size, const double * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<double, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_MdMi64(const int64_t size, const double * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<double, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_MdMi8(const int64_t size, const double * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<double, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_MdMui16(const int64_t size, const double * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<double, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_MdMui32(const int64_t size, const double * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<double, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_MdMui64(const int64_t size, const double * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<double, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_MdMui8(const int64_t size, const double * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<double, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_MdSd(const int64_t size, const double * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::le<double, double, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_MdSi16(const int64_t size, const double * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<double, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_MdSi32(const int64_t size, const double * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<double, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_MdSi64(const int64_t size, const double * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<double, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_MdSi8(const int64_t size, const double * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<double, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_MdSui16(const int64_t size, const double * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<double, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_MdSui32(const int64_t size, const double * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<double, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_MdSui64(const int64_t size, const double * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<double, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_MdSui8(const int64_t size, const double * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<double, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi16Md(const int64_t size, const int16_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi16Mi16(const int64_t size, const int16_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi16Mi32(const int64_t size, const int16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi16Mi64(const int64_t size, const int16_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi16Mi8(const int64_t size, const int16_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi16Mui16(const int64_t size, const int16_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi16Mui32(const int64_t size, const int16_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi16Mui64(const int64_t size, const int16_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi16Mui8(const int64_t size, const int16_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi16Sd(const int64_t size, const int16_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi16Si16(const int64_t size, const int16_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi16Si32(const int64_t size, const int16_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi16Si64(const int64_t size, const int16_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi16Si8(const int64_t size, const int16_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi16Sui16(const int64_t size, const int16_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi16Sui32(const int64_t size, const int16_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi16Sui64(const int64_t size, const int16_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi16Sui8(const int64_t size, const int16_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi32Md(const int64_t size, const int32_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi32Mi16(const int64_t size, const int32_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi32Mi32(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi32Mi64(const int64_t size, const int32_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi32Mi8(const int64_t size, const int32_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi32Mui16(const int64_t size, const int32_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi32Mui32(const int64_t size, const int32_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi32Mui64(const int64_t size, const int32_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi32Mui8(const int64_t size, const int32_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi32Sd(const int64_t size, const int32_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi32Si16(const int64_t size, const int32_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi32Si32(const int64_t size, const int32_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi32Si64(const int64_t size, const int32_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi32Si8(const int64_t size, const int32_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi32Sui16(const int64_t size, const int32_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi32Sui32(const int64_t size, const int32_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi32Sui64(const int64_t size, const int32_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi32Sui8(const int64_t size, const int32_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi64Md(const int64_t size, const int64_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi64Mi16(const int64_t size, const int64_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi64Mi32(const int64_t size, const int64_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi64Mi64(const int64_t size, const int64_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi64Mi8(const int64_t size, const int64_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi64Mui16(const int64_t size, const int64_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi64Mui32(const int64_t size, const int64_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi64Mui64(const int64_t size, const int64_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi64Mui8(const int64_t size, const int64_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi64Sd(const int64_t size, const int64_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi64Si16(const int64_t size, const int64_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi64Si32(const int64_t size, const int64_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi64Si64(const int64_t size, const int64_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi64Si8(const int64_t size, const int64_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi64Sui16(const int64_t size, const int64_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi64Sui32(const int64_t size, const int64_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi64Sui64(const int64_t size, const int64_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi64Sui8(const int64_t size, const int64_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi8Md(const int64_t size, const int8_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi8Mi16(const int64_t size, const int8_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi8Mi32(const int64_t size, const int8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi8Mi64(const int64_t size, const int8_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi8Mi8(const int64_t size, const int8_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi8Mui16(const int64_t size, const int8_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi8Mui32(const int64_t size, const int8_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi8Mui64(const int64_t size, const int8_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi8Mui8(const int64_t size, const int8_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi8Sd(const int64_t size, const int8_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi8Si16(const int64_t size, const int8_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi8Si32(const int64_t size, const int8_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi8Si64(const int64_t size, const int8_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi8Si8(const int64_t size, const int8_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi8Sui16(const int64_t size, const int8_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi8Sui32(const int64_t size, const int8_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi8Sui64(const int64_t size, const int8_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mi8Sui8(const int64_t size, const int8_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui16Md(const int64_t size, const uint16_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui16Mi16(const int64_t size, const uint16_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui16Mi32(const int64_t size, const uint16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui16Mi64(const int64_t size, const uint16_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui16Mi8(const int64_t size, const uint16_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui16Mui16(const int64_t size, const uint16_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui16Mui32(const int64_t size, const uint16_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui16Mui64(const int64_t size, const uint16_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui16Mui8(const int64_t size, const uint16_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui16Sd(const int64_t size, const uint16_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui16Si16(const int64_t size, const uint16_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui16Si32(const int64_t size, const uint16_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui16Si64(const int64_t size, const uint16_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui16Si8(const int64_t size, const uint16_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui16Sui16(const int64_t size, const uint16_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui16Sui32(const int64_t size, const uint16_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui16Sui64(const int64_t size, const uint16_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui16Sui8(const int64_t size, const uint16_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui32Md(const int64_t size, const uint32_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui32Mi16(const int64_t size, const uint32_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui32Mi32(const int64_t size, const uint32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui32Mi64(const int64_t size, const uint32_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui32Mi8(const int64_t size, const uint32_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui32Mui16(const int64_t size, const uint32_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui32Mui32(const int64_t size, const uint32_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui32Mui64(const int64_t size, const uint32_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui32Mui8(const int64_t size, const uint32_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui32Sd(const int64_t size, const uint32_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui32Si16(const int64_t size, const uint32_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui32Si32(const int64_t size, const uint32_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui32Si64(const int64_t size, const uint32_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui32Si8(const int64_t size, const uint32_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui32Sui16(const int64_t size, const uint32_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui32Sui32(const int64_t size, const uint32_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui32Sui64(const int64_t size, const uint32_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui32Sui8(const int64_t size, const uint32_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui64Md(const int64_t size, const uint64_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui64Mi16(const int64_t size, const uint64_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui64Mi32(const int64_t size, const uint64_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui64Mi64(const int64_t size, const uint64_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui64Mi8(const int64_t size, const uint64_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui64Mui16(const int64_t size, const uint64_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui64Mui32(const int64_t size, const uint64_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui64Mui64(const int64_t size, const uint64_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui64Mui8(const int64_t size, const uint64_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui64Sd(const int64_t size, const uint64_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui64Si16(const int64_t size, const uint64_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui64Si32(const int64_t size, const uint64_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui64Si64(const int64_t size, const uint64_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui64Si8(const int64_t size, const uint64_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui64Sui16(const int64_t size, const uint64_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui64Sui32(const int64_t size, const uint64_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui64Sui64(const int64_t size, const uint64_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui64Sui8(const int64_t size, const uint64_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui8Md(const int64_t size, const uint8_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui8Mi16(const int64_t size, const uint8_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui8Mi32(const int64_t size, const uint8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui8Mi64(const int64_t size, const uint8_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui8Mi8(const int64_t size, const uint8_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui8Mui16(const int64_t size, const uint8_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui8Mui32(const int64_t size, const uint8_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui8Mui64(const int64_t size, const uint8_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui8Mui8(const int64_t size, const uint8_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui8Sd(const int64_t size, const uint8_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui8Si16(const int64_t size, const uint8_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui8Si32(const int64_t size, const uint8_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui8Si64(const int64_t size, const uint8_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui8Si8(const int64_t size, const uint8_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui8Sui16(const int64_t size, const uint8_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui8Sui32(const int64_t size, const uint8_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui8Sui64(const int64_t size, const uint8_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Mui8Sui8(const int64_t size, const uint8_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_SdMd(const int64_t size, const double in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<double, double, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_SdMi16(const int64_t size, const double in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<double, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_SdMi32(const int64_t size, const double in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<double, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_SdMi64(const int64_t size, const double in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<double, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_SdMi8(const int64_t size, const double in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<double, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_SdMui16(const int64_t size, const double in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<double, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_SdMui32(const int64_t size, const double in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<double, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_SdMui64(const int64_t size, const double in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<double, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_SdMui8(const int64_t size, const double in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<double, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Si16Md(const int64_t size, const int16_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Si16Mi16(const int64_t size, const int16_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Si16Mi32(const int64_t size, const int16_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Si16Mi64(const int64_t size, const int16_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Si16Mi8(const int64_t size, const int16_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Si16Mui16(const int64_t size, const int16_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Si16Mui32(const int64_t size, const int16_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Si16Mui64(const int64_t size, const int16_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Si16Mui8(const int64_t size, const int16_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Si32Md(const int64_t size, const int32_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Si32Mi16(const int64_t size, const int32_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Si32Mi32(const int64_t size, const int32_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Si32Mi64(const int64_t size, const int32_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Si32Mi8(const int64_t size, const int32_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Si32Mui16(const int64_t size, const int32_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Si32Mui32(const int64_t size, const int32_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Si32Mui64(const int64_t size, const int32_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Si32Mui8(const int64_t size, const int32_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Si64Md(const int64_t size, const int64_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Si64Mi16(const int64_t size, const int64_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Si64Mi32(const int64_t size, const int64_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Si64Mi64(const int64_t size, const int64_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Si64Mi8(const int64_t size, const int64_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Si64Mui16(const int64_t size, const int64_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Si64Mui32(const int64_t size, const int64_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Si64Mui64(const int64_t size, const int64_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Si64Mui8(const int64_t size, const int64_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Si8Md(const int64_t size, const int8_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Si8Mi16(const int64_t size, const int8_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Si8Mi32(const int64_t size, const int8_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Si8Mi64(const int64_t size, const int8_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Si8Mi8(const int64_t size, const int8_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Si8Mui16(const int64_t size, const int8_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Si8Mui32(const int64_t size, const int8_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Si8Mui64(const int64_t size, const int8_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Si8Mui8(const int64_t size, const int8_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Sui16Md(const int64_t size, const uint16_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Sui16Mi16(const int64_t size, const uint16_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Sui16Mi32(const int64_t size, const uint16_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Sui16Mi64(const int64_t size, const uint16_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Sui16Mi8(const int64_t size, const uint16_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Sui16Mui16(const int64_t size, const uint16_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Sui16Mui32(const int64_t size, const uint16_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Sui16Mui64(const int64_t size, const uint16_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Sui16Mui8(const int64_t size, const uint16_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Sui32Md(const int64_t size, const uint32_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Sui32Mi16(const int64_t size, const uint32_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Sui32Mi32(const int64_t size, const uint32_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Sui32Mi64(const int64_t size, const uint32_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Sui32Mi8(const int64_t size, const uint32_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Sui32Mui16(const int64_t size, const uint32_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Sui32Mui32(const int64_t size, const uint32_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Sui32Mui64(const int64_t size, const uint32_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Sui32Mui8(const int64_t size, const uint32_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Sui64Md(const int64_t size, const uint64_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Sui64Mi16(const int64_t size, const uint64_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Sui64Mi32(const int64_t size, const uint64_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Sui64Mi64(const int64_t size, const uint64_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Sui64Mi8(const int64_t size, const uint64_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Sui64Mui16(const int64_t size, const uint64_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Sui64Mui32(const int64_t size, const uint64_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Sui64Mui64(const int64_t size, const uint64_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Sui64Mui8(const int64_t size, const uint64_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Sui8Md(const int64_t size, const uint8_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Sui8Mi16(const int64_t size, const uint8_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Sui8Mi32(const int64_t size, const uint8_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Sui8Mi64(const int64_t size, const uint8_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Sui8Mi8(const int64_t size, const uint8_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Sui8Mui16(const int64_t size, const uint8_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Sui8Mui32(const int64_t size, const uint8_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Sui8Mui64(const int64_t size, const uint8_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Sui8Mui8(const int64_t size, const uint8_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_UdUd(const int64_t size, const double * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<double, double, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_UdUi16(const int64_t size, const double * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<double, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_UdUi32(const int64_t size, const double * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<double, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_UdUi64(const int64_t size, const double * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<double, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_UdUi8(const int64_t size, const double * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<double, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_UdUui16(const int64_t size, const double * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<double, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_UdUui32(const int64_t size, const double * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<double, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_UdUui64(const int64_t size, const double * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<double, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_UdUui8(const int64_t size, const double * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<double, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Ui16Ud(const int64_t size, const int16_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Ui16Ui16(const int64_t size, const int16_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Ui16Ui32(const int64_t size, const int16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Ui16Ui64(const int64_t size, const int16_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Ui16Ui8(const int64_t size, const int16_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Ui16Uui16(const int64_t size, const int16_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Ui16Uui32(const int64_t size, const int16_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Ui16Uui64(const int64_t size, const int16_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Ui16Uui8(const int64_t size, const int16_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Ui32Ud(const int64_t size, const int32_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Ui32Ui16(const int64_t size, const int32_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Ui32Ui32(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Ui32Ui64(const int64_t size, const int32_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Ui32Ui8(const int64_t size, const int32_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Ui32Uui16(const int64_t size, const int32_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Ui32Uui32(const int64_t size, const int32_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Ui32Uui64(const int64_t size, const int32_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Ui32Uui8(const int64_t size, const int32_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Ui64Ud(const int64_t size, const int64_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Ui64Ui16(const int64_t size, const int64_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Ui64Ui32(const int64_t size, const int64_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Ui64Ui64(const int64_t size, const int64_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Ui64Ui8(const int64_t size, const int64_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Ui64Uui16(const int64_t size, const int64_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Ui64Uui32(const int64_t size, const int64_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Ui64Uui64(const int64_t size, const int64_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Ui64Uui8(const int64_t size, const int64_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Ui8Ud(const int64_t size, const int8_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Ui8Ui16(const int64_t size, const int8_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Ui8Ui32(const int64_t size, const int8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Ui8Ui64(const int64_t size, const int8_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Ui8Ui8(const int64_t size, const int8_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Ui8Uui16(const int64_t size, const int8_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Ui8Uui32(const int64_t size, const int8_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Ui8Uui64(const int64_t size, const int8_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Ui8Uui8(const int64_t size, const int8_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<int8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Uui16Ud(const int64_t size, const uint16_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Uui16Ui16(const int64_t size, const uint16_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Uui16Ui32(const int64_t size, const uint16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Uui16Ui64(const int64_t size, const uint16_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Uui16Ui8(const int64_t size, const uint16_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Uui16Uui16(const int64_t size, const uint16_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Uui16Uui32(const int64_t size, const uint16_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Uui16Uui64(const int64_t size, const uint16_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Uui16Uui8(const int64_t size, const uint16_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Uui32Ud(const int64_t size, const uint32_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Uui32Ui16(const int64_t size, const uint32_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Uui32Ui32(const int64_t size, const uint32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Uui32Ui64(const int64_t size, const uint32_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Uui32Ui8(const int64_t size, const uint32_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Uui32Uui16(const int64_t size, const uint32_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Uui32Uui32(const int64_t size, const uint32_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Uui32Uui64(const int64_t size, const uint32_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Uui32Uui8(const int64_t size, const uint32_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Uui64Ud(const int64_t size, const uint64_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Uui64Ui16(const int64_t size, const uint64_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Uui64Ui32(const int64_t size, const uint64_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Uui64Ui64(const int64_t size, const uint64_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Uui64Ui8(const int64_t size, const uint64_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Uui64Uui16(const int64_t size, const uint64_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Uui64Uui32(const int64_t size, const uint64_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Uui64Uui64(const int64_t size, const uint64_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Uui64Uui8(const int64_t size, const uint64_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Uui8Ud(const int64_t size, const uint8_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Uui8Ui16(const int64_t size, const uint8_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Uui8Ui32(const int64_t size, const uint8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Uui8Ui64(const int64_t size, const uint8_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Uui8Ui8(const int64_t size, const uint8_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Uui8Uui16(const int64_t size, const uint8_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Uui8Uui32(const int64_t size, const uint8_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Uui8Uui64(const int64_t size, const uint8_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void le_Uui8Uui8(const int64_t size, const uint8_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::le<uint8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void uint32_Md(const int64_t size, const double * in0, uint32_t ** out) { jit::vect::unary<jit::functors::uint32<double, uint32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapOut<uint32_t>(out)); }
void uint32_Mi16(const int64_t size, const int16_t * in0, uint32_t ** out) { jit::vect::unary<jit::functors::uint32<int16_t, uint32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapOut<uint32_t>(out)); }
void uint32_Mi32(const int64_t size, const int32_t * in0, uint32_t ** out) { jit::vect::unary<jit::functors::uint32<int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapOut<uint32_t>(out)); }
void uint32_Mi64(const int64_t size, const int64_t * in0, uint32_t ** out) { jit::vect::unary<jit::functors::uint32<int64_t, uint32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapOut<uint32_t>(out)); }
void uint32_Mi8(const int64_t size, const int8_t * in0, uint32_t ** out) { jit::vect::unary<jit::functors::uint32<int8_t, uint32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapOut<uint32_t>(out)); }
void uint32_Mui16(const int64_t size, const uint16_t * in0, uint32_t ** out) { jit::vect::unary<jit::functors::uint32<uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapOut<uint32_t>(out)); }
void uint32_Mui32(const int64_t size, const uint32_t * in0, uint32_t ** out) { jit::vect::unary<jit::functors::uint32<uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapOut<uint32_t>(out)); }
void uint32_Mui64(const int64_t size, const uint64_t * in0, uint32_t ** out) { jit::vect::unary<jit::functors::uint32<uint64_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapOut<uint32_t>(out)); }
void uint32_Mui8(const int64_t size, const uint8_t * in0, uint32_t ** out) { jit::vect::unary<jit::functors::uint32<uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapOut<uint32_t>(out)); }
void int64_Md(const int64_t size, const double * in0, int64_t ** out) { jit::vect::unary<jit::functors::int64<double, int64_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapOut<int64_t>(out)); }
void int64_Mi16(const int64_t size, const int16_t * in0, int64_t ** out) { jit::vect::unary<jit::functors::int64<int16_t, int64_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapOut<int64_t>(out)); }
void int64_Mi32(const int64_t size, const int32_t * in0, int64_t ** out) { jit::vect::unary<jit::functors::int64<int32_t, int64_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapOut<int64_t>(out)); }
void int64_Mi64(const int64_t size, const int64_t * in0, int64_t ** out) { jit::vect::unary<jit::functors::int64<int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapOut<int64_t>(out)); }
void int64_Mi8(const int64_t size, const int8_t * in0, int64_t ** out) { jit::vect::unary<jit::functors::int64<int8_t, int64_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapOut<int64_t>(out)); }
void int64_Mui16(const int64_t size, const uint16_t * in0, int64_t ** out) { jit::vect::unary<jit::functors::int64<uint16_t, int64_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapOut<int64_t>(out)); }
void int64_Mui32(const int64_t size, const uint32_t * in0, int64_t ** out) { jit::vect::unary<jit::functors::int64<uint32_t, int64_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapOut<int64_t>(out)); }
void int64_Mui64(const int64_t size, const uint64_t * in0, int64_t ** out) { jit::vect::unary<jit::functors::int64<uint64_t, int64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapOut<int64_t>(out)); }
void int64_Mui8(const int64_t size, const uint8_t * in0, int64_t ** out) { jit::vect::unary<jit::functors::int64<uint8_t, int64_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapOut<int64_t>(out)); }
void sin_Mc(const int64_t size, const double * in0_re, const double * in0_im, double ** out_re, double ** out_im) { jit::vect::unary<jit::functors::sin<const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void sin_Md(const int64_t size, const double * in0, double ** out) { jit::vect::unary<jit::functors::sin<double, double>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapOut<double>(out)); }
void round_Mc(const int64_t size, const double * in0_re, const double * in0_im, double ** out_re, double ** out_im) { jit::vect::unary<jit::functors::round<const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void round_Md(const int64_t size, const double * in0, double ** out) { jit::vect::unary<jit::functors::round<double, double>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapOut<double>(out)); }
void round_Mi16(const int64_t size, const int16_t * in0, int16_t ** out) { jit::vect::unary<jit::functors::round<int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapOut<int16_t>(out)); }
void round_Mi32(const int64_t size, const int32_t * in0, int32_t ** out) { jit::vect::unary<jit::functors::round<int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapOut<int32_t>(out)); }
void round_Mi64(const int64_t size, const int64_t * in0, int64_t ** out) { jit::vect::unary<jit::functors::round<int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapOut<int64_t>(out)); }
void round_Mi8(const int64_t size, const int8_t * in0, int8_t ** out) { jit::vect::unary<jit::functors::round<int8_t, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapOut<int8_t>(out)); }
void round_Mui16(const int64_t size, const uint16_t * in0, uint16_t ** out) { jit::vect::unary<jit::functors::round<uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapOut<uint16_t>(out)); }
void round_Mui32(const int64_t size, const uint32_t * in0, uint32_t ** out) { jit::vect::unary<jit::functors::round<uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapOut<uint32_t>(out)); }
void round_Mui64(const int64_t size, const uint64_t * in0, uint64_t ** out) { jit::vect::unary<jit::functors::round<uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapOut<uint64_t>(out)); }
void round_Mui8(const int64_t size, const uint8_t * in0, uint8_t ** out) { jit::vect::unary<jit::functors::round<uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapOut<uint8_t>(out)); }
void int32_Md(const int64_t size, const double * in0, int32_t ** out) { jit::vect::unary<jit::functors::int32<double, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapOut<int32_t>(out)); }
void int32_Mi16(const int64_t size, const int16_t * in0, int32_t ** out) { jit::vect::unary<jit::functors::int32<int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapOut<int32_t>(out)); }
void int32_Mi32(const int64_t size, const int32_t * in0, int32_t ** out) { jit::vect::unary<jit::functors::int32<int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapOut<int32_t>(out)); }
void int32_Mi64(const int64_t size, const int64_t * in0, int32_t ** out) { jit::vect::unary<jit::functors::int32<int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapOut<int32_t>(out)); }
void int32_Mi8(const int64_t size, const int8_t * in0, int32_t ** out) { jit::vect::unary<jit::functors::int32<int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapOut<int32_t>(out)); }
void int32_Mui16(const int64_t size, const uint16_t * in0, int32_t ** out) { jit::vect::unary<jit::functors::int32<uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapOut<int32_t>(out)); }
void int32_Mui32(const int64_t size, const uint32_t * in0, int32_t ** out) { jit::vect::unary<jit::functors::int32<uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapOut<int32_t>(out)); }
void int32_Mui64(const int64_t size, const uint64_t * in0, int32_t ** out) { jit::vect::unary<jit::functors::int32<uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapOut<int32_t>(out)); }
void int32_Mui8(const int64_t size, const uint8_t * in0, int32_t ** out) { jit::vect::unary<jit::functors::int32<uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapOut<int32_t>(out)); }
void gt_MdMd(const int64_t size, const double * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<double, double, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_MdMi16(const int64_t size, const double * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<double, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_MdMi32(const int64_t size, const double * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<double, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_MdMi64(const int64_t size, const double * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<double, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_MdMi8(const int64_t size, const double * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<double, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_MdMui16(const int64_t size, const double * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<double, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_MdMui32(const int64_t size, const double * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<double, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_MdMui64(const int64_t size, const double * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<double, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_MdMui8(const int64_t size, const double * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<double, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_MdSd(const int64_t size, const double * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<double, double, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_MdSi16(const int64_t size, const double * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<double, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_MdSi32(const int64_t size, const double * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<double, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_MdSi64(const int64_t size, const double * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<double, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_MdSi8(const int64_t size, const double * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<double, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_MdSui16(const int64_t size, const double * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<double, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_MdSui32(const int64_t size, const double * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<double, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_MdSui64(const int64_t size, const double * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<double, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_MdSui8(const int64_t size, const double * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<double, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi16Md(const int64_t size, const int16_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi16Mi16(const int64_t size, const int16_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi16Mi32(const int64_t size, const int16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi16Mi64(const int64_t size, const int16_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi16Mi8(const int64_t size, const int16_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi16Mui16(const int64_t size, const int16_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi16Mui32(const int64_t size, const int16_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi16Mui64(const int64_t size, const int16_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi16Mui8(const int64_t size, const int16_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi16Sd(const int64_t size, const int16_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi16Si16(const int64_t size, const int16_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi16Si32(const int64_t size, const int16_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi16Si64(const int64_t size, const int16_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi16Si8(const int64_t size, const int16_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi16Sui16(const int64_t size, const int16_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi16Sui32(const int64_t size, const int16_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi16Sui64(const int64_t size, const int16_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi16Sui8(const int64_t size, const int16_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi32Md(const int64_t size, const int32_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi32Mi16(const int64_t size, const int32_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi32Mi32(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi32Mi64(const int64_t size, const int32_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi32Mi8(const int64_t size, const int32_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi32Mui16(const int64_t size, const int32_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi32Mui32(const int64_t size, const int32_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi32Mui64(const int64_t size, const int32_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi32Mui8(const int64_t size, const int32_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi32Sd(const int64_t size, const int32_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi32Si16(const int64_t size, const int32_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi32Si32(const int64_t size, const int32_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi32Si64(const int64_t size, const int32_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi32Si8(const int64_t size, const int32_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi32Sui16(const int64_t size, const int32_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi32Sui32(const int64_t size, const int32_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi32Sui64(const int64_t size, const int32_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi32Sui8(const int64_t size, const int32_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi64Md(const int64_t size, const int64_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi64Mi16(const int64_t size, const int64_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi64Mi32(const int64_t size, const int64_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi64Mi64(const int64_t size, const int64_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi64Mi8(const int64_t size, const int64_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi64Mui16(const int64_t size, const int64_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi64Mui32(const int64_t size, const int64_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi64Mui64(const int64_t size, const int64_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi64Mui8(const int64_t size, const int64_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi64Sd(const int64_t size, const int64_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi64Si16(const int64_t size, const int64_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi64Si32(const int64_t size, const int64_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi64Si64(const int64_t size, const int64_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi64Si8(const int64_t size, const int64_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi64Sui16(const int64_t size, const int64_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi64Sui32(const int64_t size, const int64_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi64Sui64(const int64_t size, const int64_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi64Sui8(const int64_t size, const int64_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi8Md(const int64_t size, const int8_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi8Mi16(const int64_t size, const int8_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi8Mi32(const int64_t size, const int8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi8Mi64(const int64_t size, const int8_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi8Mi8(const int64_t size, const int8_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi8Mui16(const int64_t size, const int8_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi8Mui32(const int64_t size, const int8_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi8Mui64(const int64_t size, const int8_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi8Mui8(const int64_t size, const int8_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi8Sd(const int64_t size, const int8_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi8Si16(const int64_t size, const int8_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi8Si32(const int64_t size, const int8_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi8Si64(const int64_t size, const int8_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi8Si8(const int64_t size, const int8_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi8Sui16(const int64_t size, const int8_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi8Sui32(const int64_t size, const int8_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi8Sui64(const int64_t size, const int8_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mi8Sui8(const int64_t size, const int8_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui16Md(const int64_t size, const uint16_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui16Mi16(const int64_t size, const uint16_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui16Mi32(const int64_t size, const uint16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui16Mi64(const int64_t size, const uint16_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui16Mi8(const int64_t size, const uint16_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui16Mui16(const int64_t size, const uint16_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui16Mui32(const int64_t size, const uint16_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui16Mui64(const int64_t size, const uint16_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui16Mui8(const int64_t size, const uint16_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui16Sd(const int64_t size, const uint16_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui16Si16(const int64_t size, const uint16_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui16Si32(const int64_t size, const uint16_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui16Si64(const int64_t size, const uint16_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui16Si8(const int64_t size, const uint16_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui16Sui16(const int64_t size, const uint16_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui16Sui32(const int64_t size, const uint16_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui16Sui64(const int64_t size, const uint16_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui16Sui8(const int64_t size, const uint16_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui32Md(const int64_t size, const uint32_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui32Mi16(const int64_t size, const uint32_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui32Mi32(const int64_t size, const uint32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui32Mi64(const int64_t size, const uint32_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui32Mi8(const int64_t size, const uint32_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui32Mui16(const int64_t size, const uint32_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui32Mui32(const int64_t size, const uint32_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui32Mui64(const int64_t size, const uint32_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui32Mui8(const int64_t size, const uint32_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui32Sd(const int64_t size, const uint32_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui32Si16(const int64_t size, const uint32_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui32Si32(const int64_t size, const uint32_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui32Si64(const int64_t size, const uint32_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui32Si8(const int64_t size, const uint32_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui32Sui16(const int64_t size, const uint32_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui32Sui32(const int64_t size, const uint32_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui32Sui64(const int64_t size, const uint32_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui32Sui8(const int64_t size, const uint32_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui64Md(const int64_t size, const uint64_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui64Mi16(const int64_t size, const uint64_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui64Mi32(const int64_t size, const uint64_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui64Mi64(const int64_t size, const uint64_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui64Mi8(const int64_t size, const uint64_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui64Mui16(const int64_t size, const uint64_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui64Mui32(const int64_t size, const uint64_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui64Mui64(const int64_t size, const uint64_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui64Mui8(const int64_t size, const uint64_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui64Sd(const int64_t size, const uint64_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui64Si16(const int64_t size, const uint64_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui64Si32(const int64_t size, const uint64_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui64Si64(const int64_t size, const uint64_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui64Si8(const int64_t size, const uint64_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui64Sui16(const int64_t size, const uint64_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui64Sui32(const int64_t size, const uint64_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui64Sui64(const int64_t size, const uint64_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui64Sui8(const int64_t size, const uint64_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui8Md(const int64_t size, const uint8_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui8Mi16(const int64_t size, const uint8_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui8Mi32(const int64_t size, const uint8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui8Mi64(const int64_t size, const uint8_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui8Mi8(const int64_t size, const uint8_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui8Mui16(const int64_t size, const uint8_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui8Mui32(const int64_t size, const uint8_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui8Mui64(const int64_t size, const uint8_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui8Mui8(const int64_t size, const uint8_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui8Sd(const int64_t size, const uint8_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui8Si16(const int64_t size, const uint8_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui8Si32(const int64_t size, const uint8_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui8Si64(const int64_t size, const uint8_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui8Si8(const int64_t size, const uint8_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui8Sui16(const int64_t size, const uint8_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui8Sui32(const int64_t size, const uint8_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui8Sui64(const int64_t size, const uint8_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Mui8Sui8(const int64_t size, const uint8_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_SdMd(const int64_t size, const double in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<double, double, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_SdMi16(const int64_t size, const double in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<double, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_SdMi32(const int64_t size, const double in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<double, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_SdMi64(const int64_t size, const double in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<double, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_SdMi8(const int64_t size, const double in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<double, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_SdMui16(const int64_t size, const double in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<double, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_SdMui32(const int64_t size, const double in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<double, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_SdMui64(const int64_t size, const double in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<double, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_SdMui8(const int64_t size, const double in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<double, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Si16Md(const int64_t size, const int16_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Si16Mi16(const int64_t size, const int16_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Si16Mi32(const int64_t size, const int16_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Si16Mi64(const int64_t size, const int16_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Si16Mi8(const int64_t size, const int16_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Si16Mui16(const int64_t size, const int16_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Si16Mui32(const int64_t size, const int16_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Si16Mui64(const int64_t size, const int16_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Si16Mui8(const int64_t size, const int16_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Si32Md(const int64_t size, const int32_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Si32Mi16(const int64_t size, const int32_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Si32Mi32(const int64_t size, const int32_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Si32Mi64(const int64_t size, const int32_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Si32Mi8(const int64_t size, const int32_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Si32Mui16(const int64_t size, const int32_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Si32Mui32(const int64_t size, const int32_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Si32Mui64(const int64_t size, const int32_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Si32Mui8(const int64_t size, const int32_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Si64Md(const int64_t size, const int64_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Si64Mi16(const int64_t size, const int64_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Si64Mi32(const int64_t size, const int64_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Si64Mi64(const int64_t size, const int64_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Si64Mi8(const int64_t size, const int64_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Si64Mui16(const int64_t size, const int64_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Si64Mui32(const int64_t size, const int64_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Si64Mui64(const int64_t size, const int64_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Si64Mui8(const int64_t size, const int64_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Si8Md(const int64_t size, const int8_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Si8Mi16(const int64_t size, const int8_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Si8Mi32(const int64_t size, const int8_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Si8Mi64(const int64_t size, const int8_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Si8Mi8(const int64_t size, const int8_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Si8Mui16(const int64_t size, const int8_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Si8Mui32(const int64_t size, const int8_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Si8Mui64(const int64_t size, const int8_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Si8Mui8(const int64_t size, const int8_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Sui16Md(const int64_t size, const uint16_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Sui16Mi16(const int64_t size, const uint16_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Sui16Mi32(const int64_t size, const uint16_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Sui16Mi64(const int64_t size, const uint16_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Sui16Mi8(const int64_t size, const uint16_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Sui16Mui16(const int64_t size, const uint16_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Sui16Mui32(const int64_t size, const uint16_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Sui16Mui64(const int64_t size, const uint16_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Sui16Mui8(const int64_t size, const uint16_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Sui32Md(const int64_t size, const uint32_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Sui32Mi16(const int64_t size, const uint32_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Sui32Mi32(const int64_t size, const uint32_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Sui32Mi64(const int64_t size, const uint32_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Sui32Mi8(const int64_t size, const uint32_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Sui32Mui16(const int64_t size, const uint32_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Sui32Mui32(const int64_t size, const uint32_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Sui32Mui64(const int64_t size, const uint32_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Sui32Mui8(const int64_t size, const uint32_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Sui64Md(const int64_t size, const uint64_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Sui64Mi16(const int64_t size, const uint64_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Sui64Mi32(const int64_t size, const uint64_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Sui64Mi64(const int64_t size, const uint64_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Sui64Mi8(const int64_t size, const uint64_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Sui64Mui16(const int64_t size, const uint64_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Sui64Mui32(const int64_t size, const uint64_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Sui64Mui64(const int64_t size, const uint64_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Sui64Mui8(const int64_t size, const uint64_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Sui8Md(const int64_t size, const uint8_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Sui8Mi16(const int64_t size, const uint8_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Sui8Mi32(const int64_t size, const uint8_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Sui8Mi64(const int64_t size, const uint8_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Sui8Mi8(const int64_t size, const uint8_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Sui8Mui16(const int64_t size, const uint8_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Sui8Mui32(const int64_t size, const uint8_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Sui8Mui64(const int64_t size, const uint8_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Sui8Mui8(const int64_t size, const uint8_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_UdUd(const int64_t size, const double * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<double, double, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_UdUi16(const int64_t size, const double * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<double, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_UdUi32(const int64_t size, const double * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<double, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_UdUi64(const int64_t size, const double * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<double, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_UdUi8(const int64_t size, const double * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<double, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_UdUui16(const int64_t size, const double * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<double, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_UdUui32(const int64_t size, const double * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<double, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_UdUui64(const int64_t size, const double * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<double, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_UdUui8(const int64_t size, const double * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<double, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Ui16Ud(const int64_t size, const int16_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Ui16Ui16(const int64_t size, const int16_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Ui16Ui32(const int64_t size, const int16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Ui16Ui64(const int64_t size, const int16_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Ui16Ui8(const int64_t size, const int16_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Ui16Uui16(const int64_t size, const int16_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Ui16Uui32(const int64_t size, const int16_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Ui16Uui64(const int64_t size, const int16_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Ui16Uui8(const int64_t size, const int16_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Ui32Ud(const int64_t size, const int32_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Ui32Ui16(const int64_t size, const int32_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Ui32Ui32(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Ui32Ui64(const int64_t size, const int32_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Ui32Ui8(const int64_t size, const int32_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Ui32Uui16(const int64_t size, const int32_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Ui32Uui32(const int64_t size, const int32_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Ui32Uui64(const int64_t size, const int32_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Ui32Uui8(const int64_t size, const int32_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Ui64Ud(const int64_t size, const int64_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Ui64Ui16(const int64_t size, const int64_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Ui64Ui32(const int64_t size, const int64_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Ui64Ui64(const int64_t size, const int64_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Ui64Ui8(const int64_t size, const int64_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Ui64Uui16(const int64_t size, const int64_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Ui64Uui32(const int64_t size, const int64_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Ui64Uui64(const int64_t size, const int64_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Ui64Uui8(const int64_t size, const int64_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Ui8Ud(const int64_t size, const int8_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Ui8Ui16(const int64_t size, const int8_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Ui8Ui32(const int64_t size, const int8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Ui8Ui64(const int64_t size, const int8_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Ui8Ui8(const int64_t size, const int8_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Ui8Uui16(const int64_t size, const int8_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Ui8Uui32(const int64_t size, const int8_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Ui8Uui64(const int64_t size, const int8_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Ui8Uui8(const int64_t size, const int8_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<int8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Uui16Ud(const int64_t size, const uint16_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Uui16Ui16(const int64_t size, const uint16_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Uui16Ui32(const int64_t size, const uint16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Uui16Ui64(const int64_t size, const uint16_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Uui16Ui8(const int64_t size, const uint16_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Uui16Uui16(const int64_t size, const uint16_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Uui16Uui32(const int64_t size, const uint16_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Uui16Uui64(const int64_t size, const uint16_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Uui16Uui8(const int64_t size, const uint16_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Uui32Ud(const int64_t size, const uint32_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Uui32Ui16(const int64_t size, const uint32_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Uui32Ui32(const int64_t size, const uint32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Uui32Ui64(const int64_t size, const uint32_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Uui32Ui8(const int64_t size, const uint32_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Uui32Uui16(const int64_t size, const uint32_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Uui32Uui32(const int64_t size, const uint32_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Uui32Uui64(const int64_t size, const uint32_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Uui32Uui8(const int64_t size, const uint32_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Uui64Ud(const int64_t size, const uint64_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Uui64Ui16(const int64_t size, const uint64_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Uui64Ui32(const int64_t size, const uint64_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Uui64Ui64(const int64_t size, const uint64_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Uui64Ui8(const int64_t size, const uint64_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Uui64Uui16(const int64_t size, const uint64_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Uui64Uui32(const int64_t size, const uint64_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Uui64Uui64(const int64_t size, const uint64_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Uui64Uui8(const int64_t size, const uint64_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Uui8Ud(const int64_t size, const uint8_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Uui8Ui16(const int64_t size, const uint8_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Uui8Ui32(const int64_t size, const uint8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Uui8Ui64(const int64_t size, const uint8_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Uui8Ui8(const int64_t size, const uint8_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Uui8Uui16(const int64_t size, const uint8_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Uui8Uui32(const int64_t size, const uint8_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Uui8Uui64(const int64_t size, const uint8_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void gt_Uui8Uui8(const int64_t size, const uint8_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::gt<uint8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void exp_Mc(const int64_t size, const double * in0_re, const double * in0_im, double ** out_re, double ** out_im) { jit::vect::unary<jit::functors::exp<const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void exp_Md(const int64_t size, const double * in0, double ** out) { jit::vect::unary<jit::functors::exp<double, double>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapOut<double>(out)); }
void atan_Mc(const int64_t size, const double * in0_re, const double * in0_im, double ** out_re, double ** out_im) { jit::vect::unary<jit::functors::atan<const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void atan_Md(const int64_t size, const double * in0, double ** out) { jit::vect::unary<jit::functors::atan<double, double>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapOut<double>(out)); }
void dotrdiv_MbMb(const int64_t size, const int32_t * in0, const int32_t * in1, double ** out) { jit::vect::binary<jit::functors::dotrdiv<bool, bool, double>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<double>(out)); }
void dotrdiv_MbMc(const int64_t size, const int32_t * in0, const double * in1_re, const double * in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dotrdiv<bool, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dotrdiv_MbMd(const int64_t size, const int32_t * in0, const double * in1, double ** out) { jit::vect::binary<jit::functors::dotrdiv<bool, double, double>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<double>(out)); }
void dotrdiv_MbMi16(const int64_t size, const int32_t * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<bool, int16_t, int16_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotrdiv_MbMi32(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<bool, int32_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotrdiv_MbMi64(const int64_t size, const int32_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<bool, int64_t, int64_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotrdiv_MbMi8(const int64_t size, const int32_t * in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<bool, int8_t, int8_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dotrdiv_MbMui16(const int64_t size, const int32_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<bool, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_MbMui32(const int64_t size, const int32_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<bool, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_MbMui64(const int64_t size, const int32_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<bool, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_MbMui8(const int64_t size, const int32_t * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<bool, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotrdiv_MbSb(const int64_t size, const int32_t * in0, const int32_t in1, double ** out) { jit::vect::binary<jit::functors::dotrdiv<bool, bool, double>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<double>(out)); }
void dotrdiv_MbSc(const int64_t size, const int32_t * in0, const double in1_re, const double in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dotrdiv<bool, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<jit::cpx_t>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dotrdiv_MbSd(const int64_t size, const int32_t * in0, const double in1, double ** out) { jit::vect::binary<jit::functors::dotrdiv<bool, double, double>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<double>(out)); }
void dotrdiv_MbSi16(const int64_t size, const int32_t * in0, const int16_t in1, int16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<bool, int16_t, int16_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotrdiv_MbSi32(const int64_t size, const int32_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<bool, int32_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotrdiv_MbSi64(const int64_t size, const int32_t * in0, const int64_t in1, int64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<bool, int64_t, int64_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotrdiv_MbSi8(const int64_t size, const int32_t * in0, const int8_t in1, int8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<bool, int8_t, int8_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dotrdiv_MbSui16(const int64_t size, const int32_t * in0, const uint16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<bool, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_MbSui32(const int64_t size, const int32_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<bool, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_MbSui64(const int64_t size, const int32_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<bool, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_MbSui8(const int64_t size, const int32_t * in0, const uint8_t in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<bool, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotrdiv_McMb(const int64_t size, const double * in0_re, const double * in0_im, const int32_t * in1, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dotrdiv<const jit::cpx_t &, bool, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dotrdiv_McMc(const int64_t size, const double * in0_re, const double * in0_im, const double * in1_re, const double * in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dotrdiv<const jit::cpx_t &, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dotrdiv_McMd(const int64_t size, const double * in0_re, const double * in0_im, const double * in1, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dotrdiv<const jit::cpx_t &, double, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dotrdiv_McSb(const int64_t size, const double * in0_re, const double * in0_im, const int32_t in1, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dotrdiv<const jit::cpx_t &, bool, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dotrdiv_McSc(const int64_t size, const double * in0_re, const double * in0_im, const double in1_re, const double in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dotrdiv<const jit::cpx_t &, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<jit::cpx_t>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dotrdiv_McSd(const int64_t size, const double * in0_re, const double * in0_im, const double in1, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dotrdiv<const jit::cpx_t &, double, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dotrdiv_MdMb(const int64_t size, const double * in0, const int32_t * in1, double ** out) { jit::vect::binary<jit::functors::dotrdiv<double, bool, double>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<double>(out)); }
void dotrdiv_MdMc(const int64_t size, const double * in0, const double * in1_re, const double * in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dotrdiv<double, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dotrdiv_MdMd(const int64_t size, const double * in0, const double * in1, double ** out) { jit::vect::binary<jit::functors::dotrdiv<double, double, double>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<double>(out)); }
void dotrdiv_MdMi16(const int64_t size, const double * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<double, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotrdiv_MdMi32(const int64_t size, const double * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<double, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotrdiv_MdMi64(const int64_t size, const double * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<double, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotrdiv_MdMi8(const int64_t size, const double * in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<double, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dotrdiv_MdMui16(const int64_t size, const double * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<double, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_MdMui32(const int64_t size, const double * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<double, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_MdMui64(const int64_t size, const double * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<double, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_MdMui8(const int64_t size, const double * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<double, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotrdiv_MdSb(const int64_t size, const double * in0, const int32_t in1, double ** out) { jit::vect::binary<jit::functors::dotrdiv<double, bool, double>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<double>(out)); }
void dotrdiv_MdSc(const int64_t size, const double * in0, const double in1_re, const double in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dotrdiv<double, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<jit::cpx_t>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dotrdiv_MdSd(const int64_t size, const double * in0, const double in1, double ** out) { jit::vect::binary<jit::functors::dotrdiv<double, double, double>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<double>(out)); }
void dotrdiv_MdSi16(const int64_t size, const double * in0, const int16_t in1, int16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<double, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotrdiv_MdSi32(const int64_t size, const double * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<double, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotrdiv_MdSi64(const int64_t size, const double * in0, const int64_t in1, int64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<double, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotrdiv_MdSi8(const int64_t size, const double * in0, const int8_t in1, int8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<double, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dotrdiv_MdSui16(const int64_t size, const double * in0, const uint16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<double, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_MdSui32(const int64_t size, const double * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<double, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_MdSui64(const int64_t size, const double * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<double, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_MdSui8(const int64_t size, const double * in0, const uint8_t in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<double, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotrdiv_Mi16Mb(const int64_t size, const int16_t * in0, const int32_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int16_t, bool, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotrdiv_Mi16Md(const int64_t size, const int16_t * in0, const double * in1, int16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int16_t, double, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotrdiv_Mi16Mi16(const int64_t size, const int16_t * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int16_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotrdiv_Mi16Mi32(const int64_t size, const int16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotrdiv_Mi16Mi64(const int64_t size, const int16_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int16_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotrdiv_Mi16Mi8(const int64_t size, const int16_t * in0, const int8_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int16_t, int8_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotrdiv_Mi16Mui16(const int64_t size, const int16_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_Mi16Mui32(const int64_t size, const int16_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Mi16Mui64(const int64_t size, const int16_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mi16Mui8(const int64_t size, const int16_t * in0, const uint8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_Mi16Sb(const int64_t size, const int16_t * in0, const int32_t in1, int16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int16_t, bool, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotrdiv_Mi16Sd(const int64_t size, const int16_t * in0, const double in1, int16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int16_t, double, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotrdiv_Mi16Si16(const int64_t size, const int16_t * in0, const int16_t in1, int16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int16_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotrdiv_Mi16Si32(const int64_t size, const int16_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotrdiv_Mi16Si64(const int64_t size, const int16_t * in0, const int64_t in1, int64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int16_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotrdiv_Mi16Si8(const int64_t size, const int16_t * in0, const int8_t in1, int16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int16_t, int8_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotrdiv_Mi16Sui16(const int64_t size, const int16_t * in0, const uint16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_Mi16Sui32(const int64_t size, const int16_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Mi16Sui64(const int64_t size, const int16_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mi16Sui8(const int64_t size, const int16_t * in0, const uint8_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_Mi32Mb(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int32_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotrdiv_Mi32Md(const int64_t size, const int32_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotrdiv_Mi32Mi16(const int64_t size, const int32_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotrdiv_Mi32Mi32(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotrdiv_Mi32Mi64(const int64_t size, const int32_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int32_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotrdiv_Mi32Mi8(const int64_t size, const int32_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotrdiv_Mi32Mui16(const int64_t size, const int32_t * in0, const uint16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Mi32Mui32(const int64_t size, const int32_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Mi32Mui64(const int64_t size, const int32_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mi32Mui8(const int64_t size, const int32_t * in0, const uint8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Mi32Sb(const int64_t size, const int32_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int32_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotrdiv_Mi32Sd(const int64_t size, const int32_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotrdiv_Mi32Si16(const int64_t size, const int32_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotrdiv_Mi32Si32(const int64_t size, const int32_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotrdiv_Mi32Si64(const int64_t size, const int32_t * in0, const int64_t in1, int64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int32_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotrdiv_Mi32Si8(const int64_t size, const int32_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotrdiv_Mi32Sui16(const int64_t size, const int32_t * in0, const uint16_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Mi32Sui32(const int64_t size, const int32_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Mi32Sui64(const int64_t size, const int32_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mi32Sui8(const int64_t size, const int32_t * in0, const uint8_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Mi64Mb(const int64_t size, const int64_t * in0, const int32_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int64_t, bool, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotrdiv_Mi64Md(const int64_t size, const int64_t * in0, const double * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int64_t, double, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotrdiv_Mi64Mi16(const int64_t size, const int64_t * in0, const int16_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int64_t, int16_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotrdiv_Mi64Mi32(const int64_t size, const int64_t * in0, const int32_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int64_t, int32_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotrdiv_Mi64Mi64(const int64_t size, const int64_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int64_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotrdiv_Mi64Mi8(const int64_t size, const int64_t * in0, const int8_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int64_t, int8_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotrdiv_Mi64Mui16(const int64_t size, const int64_t * in0, const uint16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mi64Mui32(const int64_t size, const int64_t * in0, const uint32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mi64Mui64(const int64_t size, const int64_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mi64Mui8(const int64_t size, const int64_t * in0, const uint8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mi64Sb(const int64_t size, const int64_t * in0, const int32_t in1, int64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int64_t, bool, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotrdiv_Mi64Sd(const int64_t size, const int64_t * in0, const double in1, int64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int64_t, double, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotrdiv_Mi64Si16(const int64_t size, const int64_t * in0, const int16_t in1, int64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int64_t, int16_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotrdiv_Mi64Si32(const int64_t size, const int64_t * in0, const int32_t in1, int64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int64_t, int32_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotrdiv_Mi64Si64(const int64_t size, const int64_t * in0, const int64_t in1, int64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int64_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotrdiv_Mi64Si8(const int64_t size, const int64_t * in0, const int8_t in1, int64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int64_t, int8_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotrdiv_Mi64Sui16(const int64_t size, const int64_t * in0, const uint16_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mi64Sui32(const int64_t size, const int64_t * in0, const uint32_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mi64Sui64(const int64_t size, const int64_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mi64Sui8(const int64_t size, const int64_t * in0, const uint8_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mi8Mb(const int64_t size, const int8_t * in0, const int32_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int8_t, bool, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dotrdiv_Mi8Md(const int64_t size, const int8_t * in0, const double * in1, int8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int8_t, double, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dotrdiv_Mi8Mi16(const int64_t size, const int8_t * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int8_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotrdiv_Mi8Mi32(const int64_t size, const int8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotrdiv_Mi8Mi64(const int64_t size, const int8_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int8_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotrdiv_Mi8Mi8(const int64_t size, const int8_t * in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int8_t, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dotrdiv_Mi8Mui16(const int64_t size, const int8_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_Mi8Mui32(const int64_t size, const int8_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Mi8Mui64(const int64_t size, const int8_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mi8Mui8(const int64_t size, const int8_t * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotrdiv_Mi8Sb(const int64_t size, const int8_t * in0, const int32_t in1, int8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int8_t, bool, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dotrdiv_Mi8Sd(const int64_t size, const int8_t * in0, const double in1, int8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int8_t, double, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dotrdiv_Mi8Si16(const int64_t size, const int8_t * in0, const int16_t in1, int16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int8_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotrdiv_Mi8Si32(const int64_t size, const int8_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotrdiv_Mi8Si64(const int64_t size, const int8_t * in0, const int64_t in1, int64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int8_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotrdiv_Mi8Si8(const int64_t size, const int8_t * in0, const int8_t in1, int8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int8_t, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dotrdiv_Mi8Sui16(const int64_t size, const int8_t * in0, const uint16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_Mi8Sui32(const int64_t size, const int8_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Mi8Sui64(const int64_t size, const int8_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mi8Sui8(const int64_t size, const int8_t * in0, const uint8_t in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotrdiv_Mui16Mb(const int64_t size, const uint16_t * in0, const int32_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint16_t, bool, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_Mui16Md(const int64_t size, const uint16_t * in0, const double * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint16_t, double, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_Mui16Mi16(const int64_t size, const uint16_t * in0, const int16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint16_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_Mui16Mi32(const int64_t size, const uint16_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint16_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Mui16Mi64(const int64_t size, const uint16_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint16_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mui16Mi8(const int64_t size, const uint16_t * in0, const int8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint16_t, int8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_Mui16Mui16(const int64_t size, const uint16_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_Mui16Mui32(const int64_t size, const uint16_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Mui16Mui64(const int64_t size, const uint16_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mui16Mui8(const int64_t size, const uint16_t * in0, const uint8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_Mui16Sb(const int64_t size, const uint16_t * in0, const int32_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint16_t, bool, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_Mui16Sd(const int64_t size, const uint16_t * in0, const double in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint16_t, double, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_Mui16Si16(const int64_t size, const uint16_t * in0, const int16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint16_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_Mui16Si32(const int64_t size, const uint16_t * in0, const int32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint16_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Mui16Si64(const int64_t size, const uint16_t * in0, const int64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint16_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mui16Si8(const int64_t size, const uint16_t * in0, const int8_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint16_t, int8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_Mui16Sui16(const int64_t size, const uint16_t * in0, const uint16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_Mui16Sui32(const int64_t size, const uint16_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Mui16Sui64(const int64_t size, const uint16_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mui16Sui8(const int64_t size, const uint16_t * in0, const uint8_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_Mui32Mb(const int64_t size, const uint32_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint32_t, bool, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Mui32Md(const int64_t size, const uint32_t * in0, const double * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint32_t, double, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Mui32Mi16(const int64_t size, const uint32_t * in0, const int16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint32_t, int16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Mui32Mi32(const int64_t size, const uint32_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint32_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Mui32Mi64(const int64_t size, const uint32_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint32_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mui32Mi8(const int64_t size, const uint32_t * in0, const int8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint32_t, int8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Mui32Mui16(const int64_t size, const uint32_t * in0, const uint16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Mui32Mui32(const int64_t size, const uint32_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Mui32Mui64(const int64_t size, const uint32_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mui32Mui8(const int64_t size, const uint32_t * in0, const uint8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Mui32Sb(const int64_t size, const uint32_t * in0, const int32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint32_t, bool, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Mui32Sd(const int64_t size, const uint32_t * in0, const double in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint32_t, double, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Mui32Si16(const int64_t size, const uint32_t * in0, const int16_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint32_t, int16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Mui32Si32(const int64_t size, const uint32_t * in0, const int32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint32_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Mui32Si64(const int64_t size, const uint32_t * in0, const int64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint32_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mui32Si8(const int64_t size, const uint32_t * in0, const int8_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint32_t, int8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Mui32Sui16(const int64_t size, const uint32_t * in0, const uint16_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Mui32Sui32(const int64_t size, const uint32_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Mui32Sui64(const int64_t size, const uint32_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mui32Sui8(const int64_t size, const uint32_t * in0, const uint8_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Mui64Mb(const int64_t size, const uint64_t * in0, const int32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint64_t, bool, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mui64Md(const int64_t size, const uint64_t * in0, const double * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint64_t, double, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mui64Mi16(const int64_t size, const uint64_t * in0, const int16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint64_t, int16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mui64Mi32(const int64_t size, const uint64_t * in0, const int32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint64_t, int32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mui64Mi64(const int64_t size, const uint64_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint64_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mui64Mi8(const int64_t size, const uint64_t * in0, const int8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint64_t, int8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mui64Mui16(const int64_t size, const uint64_t * in0, const uint16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mui64Mui32(const int64_t size, const uint64_t * in0, const uint32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mui64Mui64(const int64_t size, const uint64_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mui64Mui8(const int64_t size, const uint64_t * in0, const uint8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mui64Sb(const int64_t size, const uint64_t * in0, const int32_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint64_t, bool, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mui64Sd(const int64_t size, const uint64_t * in0, const double in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint64_t, double, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mui64Si16(const int64_t size, const uint64_t * in0, const int16_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint64_t, int16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mui64Si32(const int64_t size, const uint64_t * in0, const int32_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint64_t, int32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mui64Si64(const int64_t size, const uint64_t * in0, const int64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint64_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mui64Si8(const int64_t size, const uint64_t * in0, const int8_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint64_t, int8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mui64Sui16(const int64_t size, const uint64_t * in0, const uint16_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mui64Sui32(const int64_t size, const uint64_t * in0, const uint32_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mui64Sui64(const int64_t size, const uint64_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mui64Sui8(const int64_t size, const uint64_t * in0, const uint8_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mui8Mb(const int64_t size, const uint8_t * in0, const int32_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint8_t, bool, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotrdiv_Mui8Md(const int64_t size, const uint8_t * in0, const double * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint8_t, double, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotrdiv_Mui8Mi16(const int64_t size, const uint8_t * in0, const int16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint8_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_Mui8Mi32(const int64_t size, const uint8_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint8_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Mui8Mi64(const int64_t size, const uint8_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint8_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mui8Mi8(const int64_t size, const uint8_t * in0, const int8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint8_t, int8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotrdiv_Mui8Mui16(const int64_t size, const uint8_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_Mui8Mui32(const int64_t size, const uint8_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Mui8Mui64(const int64_t size, const uint8_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mui8Mui8(const int64_t size, const uint8_t * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotrdiv_Mui8Sb(const int64_t size, const uint8_t * in0, const int32_t in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint8_t, bool, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotrdiv_Mui8Sd(const int64_t size, const uint8_t * in0, const double in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint8_t, double, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotrdiv_Mui8Si16(const int64_t size, const uint8_t * in0, const int16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint8_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_Mui8Si32(const int64_t size, const uint8_t * in0, const int32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint8_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Mui8Si64(const int64_t size, const uint8_t * in0, const int64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint8_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mui8Si8(const int64_t size, const uint8_t * in0, const int8_t in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint8_t, int8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotrdiv_Mui8Sui16(const int64_t size, const uint8_t * in0, const uint16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_Mui8Sui32(const int64_t size, const uint8_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Mui8Sui64(const int64_t size, const uint8_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Mui8Sui8(const int64_t size, const uint8_t * in0, const uint8_t in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotrdiv_SbMb(const int64_t size, const int32_t in0, const int32_t * in1, double ** out) { jit::vect::binary<jit::functors::dotrdiv<bool, bool, double>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<double>(out)); }
void dotrdiv_SbMc(const int64_t size, const int32_t in0, const double * in1_re, const double * in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dotrdiv<bool, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dotrdiv_SbMd(const int64_t size, const int32_t in0, const double * in1, double ** out) { jit::vect::binary<jit::functors::dotrdiv<bool, double, double>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<double>(out)); }
void dotrdiv_SbMi16(const int64_t size, const int32_t in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<bool, int16_t, int16_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotrdiv_SbMi32(const int64_t size, const int32_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<bool, int32_t, int32_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotrdiv_SbMi64(const int64_t size, const int32_t in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<bool, int64_t, int64_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotrdiv_SbMi8(const int64_t size, const int32_t in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<bool, int8_t, int8_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dotrdiv_SbMui16(const int64_t size, const int32_t in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<bool, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_SbMui32(const int64_t size, const int32_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<bool, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_SbMui64(const int64_t size, const int32_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<bool, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_SbMui8(const int64_t size, const int32_t in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<bool, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotrdiv_ScMb(const int64_t size, const double in0_re, const double in0_im, const int32_t * in1, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dotrdiv<const jit::cpx_t &, bool, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t>(in0_re, in0_im), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dotrdiv_ScMc(const int64_t size, const double in0_re, const double in0_im, const double * in1_re, const double * in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dotrdiv<const jit::cpx_t &, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t>(in0_re, in0_im), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dotrdiv_ScMd(const int64_t size, const double in0_re, const double in0_im, const double * in1, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dotrdiv<const jit::cpx_t &, double, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t>(in0_re, in0_im), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dotrdiv_SdMb(const int64_t size, const double in0, const int32_t * in1, double ** out) { jit::vect::binary<jit::functors::dotrdiv<double, bool, double>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<double>(out)); }
void dotrdiv_SdMc(const int64_t size, const double in0, const double * in1_re, const double * in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dotrdiv<double, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dotrdiv_SdMd(const int64_t size, const double in0, const double * in1, double ** out) { jit::vect::binary<jit::functors::dotrdiv<double, double, double>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<double>(out)); }
void dotrdiv_SdMi16(const int64_t size, const double in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<double, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotrdiv_SdMi32(const int64_t size, const double in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<double, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotrdiv_SdMi64(const int64_t size, const double in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<double, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotrdiv_SdMi8(const int64_t size, const double in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<double, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dotrdiv_SdMui16(const int64_t size, const double in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<double, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_SdMui32(const int64_t size, const double in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<double, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_SdMui64(const int64_t size, const double in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<double, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_SdMui8(const int64_t size, const double in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<double, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotrdiv_Si16Mb(const int64_t size, const int16_t in0, const int32_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int16_t, bool, int16_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotrdiv_Si16Md(const int64_t size, const int16_t in0, const double * in1, int16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int16_t, double, int16_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotrdiv_Si16Mi16(const int64_t size, const int16_t in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int16_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotrdiv_Si16Mi32(const int64_t size, const int16_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotrdiv_Si16Mi64(const int64_t size, const int16_t in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int16_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotrdiv_Si16Mi8(const int64_t size, const int16_t in0, const int8_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int16_t, int8_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotrdiv_Si16Mui16(const int64_t size, const int16_t in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_Si16Mui32(const int64_t size, const int16_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Si16Mui64(const int64_t size, const int16_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Si16Mui8(const int64_t size, const int16_t in0, const uint8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_Si32Mb(const int64_t size, const int32_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int32_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotrdiv_Si32Md(const int64_t size, const int32_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotrdiv_Si32Mi16(const int64_t size, const int32_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotrdiv_Si32Mi32(const int64_t size, const int32_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotrdiv_Si32Mi64(const int64_t size, const int32_t in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int32_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotrdiv_Si32Mi8(const int64_t size, const int32_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotrdiv_Si32Mui16(const int64_t size, const int32_t in0, const uint16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Si32Mui32(const int64_t size, const int32_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Si32Mui64(const int64_t size, const int32_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Si32Mui8(const int64_t size, const int32_t in0, const uint8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Si64Mb(const int64_t size, const int64_t in0, const int32_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int64_t, bool, int64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotrdiv_Si64Md(const int64_t size, const int64_t in0, const double * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int64_t, double, int64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotrdiv_Si64Mi16(const int64_t size, const int64_t in0, const int16_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int64_t, int16_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotrdiv_Si64Mi32(const int64_t size, const int64_t in0, const int32_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int64_t, int32_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotrdiv_Si64Mi64(const int64_t size, const int64_t in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int64_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotrdiv_Si64Mi8(const int64_t size, const int64_t in0, const int8_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int64_t, int8_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotrdiv_Si64Mui16(const int64_t size, const int64_t in0, const uint16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Si64Mui32(const int64_t size, const int64_t in0, const uint32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Si64Mui64(const int64_t size, const int64_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Si64Mui8(const int64_t size, const int64_t in0, const uint8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Si8Mb(const int64_t size, const int8_t in0, const int32_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int8_t, bool, int8_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dotrdiv_Si8Md(const int64_t size, const int8_t in0, const double * in1, int8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int8_t, double, int8_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dotrdiv_Si8Mi16(const int64_t size, const int8_t in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int8_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotrdiv_Si8Mi32(const int64_t size, const int8_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotrdiv_Si8Mi64(const int64_t size, const int8_t in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int8_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotrdiv_Si8Mi8(const int64_t size, const int8_t in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int8_t, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dotrdiv_Si8Mui16(const int64_t size, const int8_t in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_Si8Mui32(const int64_t size, const int8_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Si8Mui64(const int64_t size, const int8_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Si8Mui8(const int64_t size, const int8_t in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotrdiv_Sui16Mb(const int64_t size, const uint16_t in0, const int32_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint16_t, bool, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_Sui16Md(const int64_t size, const uint16_t in0, const double * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint16_t, double, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_Sui16Mi16(const int64_t size, const uint16_t in0, const int16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint16_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_Sui16Mi32(const int64_t size, const uint16_t in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint16_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Sui16Mi64(const int64_t size, const uint16_t in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint16_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Sui16Mi8(const int64_t size, const uint16_t in0, const int8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint16_t, int8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_Sui16Mui16(const int64_t size, const uint16_t in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_Sui16Mui32(const int64_t size, const uint16_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Sui16Mui64(const int64_t size, const uint16_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Sui16Mui8(const int64_t size, const uint16_t in0, const uint8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_Sui32Mb(const int64_t size, const uint32_t in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint32_t, bool, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Sui32Md(const int64_t size, const uint32_t in0, const double * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint32_t, double, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Sui32Mi16(const int64_t size, const uint32_t in0, const int16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint32_t, int16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Sui32Mi32(const int64_t size, const uint32_t in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint32_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Sui32Mi64(const int64_t size, const uint32_t in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint32_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Sui32Mi8(const int64_t size, const uint32_t in0, const int8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint32_t, int8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Sui32Mui16(const int64_t size, const uint32_t in0, const uint16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Sui32Mui32(const int64_t size, const uint32_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Sui32Mui64(const int64_t size, const uint32_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Sui32Mui8(const int64_t size, const uint32_t in0, const uint8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Sui64Mb(const int64_t size, const uint64_t in0, const int32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint64_t, bool, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Sui64Md(const int64_t size, const uint64_t in0, const double * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint64_t, double, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Sui64Mi16(const int64_t size, const uint64_t in0, const int16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint64_t, int16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Sui64Mi32(const int64_t size, const uint64_t in0, const int32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint64_t, int32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Sui64Mi64(const int64_t size, const uint64_t in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint64_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Sui64Mi8(const int64_t size, const uint64_t in0, const int8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint64_t, int8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Sui64Mui16(const int64_t size, const uint64_t in0, const uint16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Sui64Mui32(const int64_t size, const uint64_t in0, const uint32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Sui64Mui64(const int64_t size, const uint64_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Sui64Mui8(const int64_t size, const uint64_t in0, const uint8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Sui8Mb(const int64_t size, const uint8_t in0, const int32_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint8_t, bool, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotrdiv_Sui8Md(const int64_t size, const uint8_t in0, const double * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint8_t, double, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotrdiv_Sui8Mi16(const int64_t size, const uint8_t in0, const int16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint8_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_Sui8Mi32(const int64_t size, const uint8_t in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint8_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Sui8Mi64(const int64_t size, const uint8_t in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint8_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Sui8Mi8(const int64_t size, const uint8_t in0, const int8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint8_t, int8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotrdiv_Sui8Mui16(const int64_t size, const uint8_t in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_Sui8Mui32(const int64_t size, const uint8_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Sui8Mui64(const int64_t size, const uint8_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Sui8Mui8(const int64_t size, const uint8_t in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotrdiv_UbUb(const int64_t size, const int32_t * in0, const int32_t * in1, double ** out) { jit::vect::binary<jit::functors::dotrdiv<bool, bool, double>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<double>(out)); }
void dotrdiv_UbUc(const int64_t size, const int32_t * in0, const double * in1_re, const double * in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dotrdiv<bool, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dotrdiv_UbUd(const int64_t size, const int32_t * in0, const double * in1, double ** out) { jit::vect::binary<jit::functors::dotrdiv<bool, double, double>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<double>(out)); }
void dotrdiv_UbUi16(const int64_t size, const int32_t * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<bool, int16_t, int16_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotrdiv_UbUi32(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<bool, int32_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotrdiv_UbUi64(const int64_t size, const int32_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<bool, int64_t, int64_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotrdiv_UbUi8(const int64_t size, const int32_t * in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<bool, int8_t, int8_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dotrdiv_UbUui16(const int64_t size, const int32_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<bool, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_UbUui32(const int64_t size, const int32_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<bool, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_UbUui64(const int64_t size, const int32_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<bool, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_UbUui8(const int64_t size, const int32_t * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<bool, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotrdiv_UcUb(const int64_t size, const double * in0_re, const double * in0_im, const int32_t * in1, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dotrdiv<const jit::cpx_t &, bool, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dotrdiv_UcUc(const int64_t size, const double * in0_re, const double * in0_im, const double * in1_re, const double * in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dotrdiv<const jit::cpx_t &, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dotrdiv_UcUd(const int64_t size, const double * in0_re, const double * in0_im, const double * in1, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dotrdiv<const jit::cpx_t &, double, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dotrdiv_UdUb(const int64_t size, const double * in0, const int32_t * in1, double ** out) { jit::vect::binary<jit::functors::dotrdiv<double, bool, double>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<double>(out)); }
void dotrdiv_UdUc(const int64_t size, const double * in0, const double * in1_re, const double * in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dotrdiv<double, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dotrdiv_UdUd(const int64_t size, const double * in0, const double * in1, double ** out) { jit::vect::binary<jit::functors::dotrdiv<double, double, double>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<double>(out)); }
void dotrdiv_UdUi16(const int64_t size, const double * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<double, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotrdiv_UdUi32(const int64_t size, const double * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<double, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotrdiv_UdUi64(const int64_t size, const double * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<double, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotrdiv_UdUi8(const int64_t size, const double * in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<double, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dotrdiv_UdUui16(const int64_t size, const double * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<double, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_UdUui32(const int64_t size, const double * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<double, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_UdUui64(const int64_t size, const double * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<double, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_UdUui8(const int64_t size, const double * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<double, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotrdiv_Ui16Ub(const int64_t size, const int16_t * in0, const int32_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int16_t, bool, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotrdiv_Ui16Ud(const int64_t size, const int16_t * in0, const double * in1, int16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int16_t, double, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotrdiv_Ui16Ui16(const int64_t size, const int16_t * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int16_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotrdiv_Ui16Ui32(const int64_t size, const int16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotrdiv_Ui16Ui64(const int64_t size, const int16_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int16_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotrdiv_Ui16Ui8(const int64_t size, const int16_t * in0, const int8_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int16_t, int8_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotrdiv_Ui16Uui16(const int64_t size, const int16_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_Ui16Uui32(const int64_t size, const int16_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Ui16Uui64(const int64_t size, const int16_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Ui16Uui8(const int64_t size, const int16_t * in0, const uint8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_Ui32Ub(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int32_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotrdiv_Ui32Ud(const int64_t size, const int32_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotrdiv_Ui32Ui16(const int64_t size, const int32_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotrdiv_Ui32Ui32(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotrdiv_Ui32Ui64(const int64_t size, const int32_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int32_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotrdiv_Ui32Ui8(const int64_t size, const int32_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotrdiv_Ui32Uui16(const int64_t size, const int32_t * in0, const uint16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Ui32Uui32(const int64_t size, const int32_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Ui32Uui64(const int64_t size, const int32_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Ui32Uui8(const int64_t size, const int32_t * in0, const uint8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Ui64Ub(const int64_t size, const int64_t * in0, const int32_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int64_t, bool, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotrdiv_Ui64Ud(const int64_t size, const int64_t * in0, const double * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int64_t, double, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotrdiv_Ui64Ui16(const int64_t size, const int64_t * in0, const int16_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int64_t, int16_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotrdiv_Ui64Ui32(const int64_t size, const int64_t * in0, const int32_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int64_t, int32_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotrdiv_Ui64Ui64(const int64_t size, const int64_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int64_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotrdiv_Ui64Ui8(const int64_t size, const int64_t * in0, const int8_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int64_t, int8_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotrdiv_Ui64Uui16(const int64_t size, const int64_t * in0, const uint16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Ui64Uui32(const int64_t size, const int64_t * in0, const uint32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Ui64Uui64(const int64_t size, const int64_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Ui64Uui8(const int64_t size, const int64_t * in0, const uint8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Ui8Ub(const int64_t size, const int8_t * in0, const int32_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int8_t, bool, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dotrdiv_Ui8Ud(const int64_t size, const int8_t * in0, const double * in1, int8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int8_t, double, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dotrdiv_Ui8Ui16(const int64_t size, const int8_t * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int8_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dotrdiv_Ui8Ui32(const int64_t size, const int8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dotrdiv_Ui8Ui64(const int64_t size, const int8_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int8_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dotrdiv_Ui8Ui8(const int64_t size, const int8_t * in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int8_t, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dotrdiv_Ui8Uui16(const int64_t size, const int8_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_Ui8Uui32(const int64_t size, const int8_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Ui8Uui64(const int64_t size, const int8_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Ui8Uui8(const int64_t size, const int8_t * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<int8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotrdiv_Uui16Ub(const int64_t size, const uint16_t * in0, const int32_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint16_t, bool, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_Uui16Ud(const int64_t size, const uint16_t * in0, const double * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint16_t, double, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_Uui16Ui16(const int64_t size, const uint16_t * in0, const int16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint16_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_Uui16Ui32(const int64_t size, const uint16_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint16_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Uui16Ui64(const int64_t size, const uint16_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint16_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Uui16Ui8(const int64_t size, const uint16_t * in0, const int8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint16_t, int8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_Uui16Uui16(const int64_t size, const uint16_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_Uui16Uui32(const int64_t size, const uint16_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Uui16Uui64(const int64_t size, const uint16_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Uui16Uui8(const int64_t size, const uint16_t * in0, const uint8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_Uui32Ub(const int64_t size, const uint32_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint32_t, bool, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Uui32Ud(const int64_t size, const uint32_t * in0, const double * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint32_t, double, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Uui32Ui16(const int64_t size, const uint32_t * in0, const int16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint32_t, int16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Uui32Ui32(const int64_t size, const uint32_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint32_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Uui32Ui64(const int64_t size, const uint32_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint32_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Uui32Ui8(const int64_t size, const uint32_t * in0, const int8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint32_t, int8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Uui32Uui16(const int64_t size, const uint32_t * in0, const uint16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Uui32Uui32(const int64_t size, const uint32_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Uui32Uui64(const int64_t size, const uint32_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Uui32Uui8(const int64_t size, const uint32_t * in0, const uint8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Uui64Ub(const int64_t size, const uint64_t * in0, const int32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint64_t, bool, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Uui64Ud(const int64_t size, const uint64_t * in0, const double * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint64_t, double, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Uui64Ui16(const int64_t size, const uint64_t * in0, const int16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint64_t, int16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Uui64Ui32(const int64_t size, const uint64_t * in0, const int32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint64_t, int32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Uui64Ui64(const int64_t size, const uint64_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint64_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Uui64Ui8(const int64_t size, const uint64_t * in0, const int8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint64_t, int8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Uui64Uui16(const int64_t size, const uint64_t * in0, const uint16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Uui64Uui32(const int64_t size, const uint64_t * in0, const uint32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Uui64Uui64(const int64_t size, const uint64_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Uui64Uui8(const int64_t size, const uint64_t * in0, const uint8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Uui8Ub(const int64_t size, const uint8_t * in0, const int32_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint8_t, bool, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotrdiv_Uui8Ud(const int64_t size, const uint8_t * in0, const double * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint8_t, double, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotrdiv_Uui8Ui16(const int64_t size, const uint8_t * in0, const int16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint8_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_Uui8Ui32(const int64_t size, const uint8_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint8_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Uui8Ui64(const int64_t size, const uint8_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint8_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Uui8Ui8(const int64_t size, const uint8_t * in0, const int8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint8_t, int8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dotrdiv_Uui8Uui16(const int64_t size, const uint8_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dotrdiv_Uui8Uui32(const int64_t size, const uint8_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dotrdiv_Uui8Uui64(const int64_t size, const uint8_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dotrdiv_Uui8Uui8(const int64_t size, const uint8_t * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dotrdiv<uint8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void imag_Mc(const int64_t size, const double * in0_re, const double * in0_im, double ** out) { jit::vect::unary<jit::functors::imag<const jit::cpx_t &, double>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapOut<double>(out)); }
void imag_Md(const int64_t size, const double * in0, double ** out) { jit::vect::unary<jit::functors::imag<double, double>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapOut<double>(out)); }
void uint8_Md(const int64_t size, const double * in0, uint8_t ** out) { jit::vect::unary<jit::functors::uint8<double, uint8_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapOut<uint8_t>(out)); }
void uint8_Mi16(const int64_t size, const int16_t * in0, uint8_t ** out) { jit::vect::unary<jit::functors::uint8<int16_t, uint8_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapOut<uint8_t>(out)); }
void uint8_Mi32(const int64_t size, const int32_t * in0, uint8_t ** out) { jit::vect::unary<jit::functors::uint8<int32_t, uint8_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapOut<uint8_t>(out)); }
void uint8_Mi64(const int64_t size, const int64_t * in0, uint8_t ** out) { jit::vect::unary<jit::functors::uint8<int64_t, uint8_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapOut<uint8_t>(out)); }
void uint8_Mi8(const int64_t size, const int8_t * in0, uint8_t ** out) { jit::vect::unary<jit::functors::uint8<int8_t, uint8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapOut<uint8_t>(out)); }
void uint8_Mui16(const int64_t size, const uint16_t * in0, uint8_t ** out) { jit::vect::unary<jit::functors::uint8<uint16_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapOut<uint8_t>(out)); }
void uint8_Mui32(const int64_t size, const uint32_t * in0, uint8_t ** out) { jit::vect::unary<jit::functors::uint8<uint32_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapOut<uint8_t>(out)); }
void uint8_Mui64(const int64_t size, const uint64_t * in0, uint8_t ** out) { jit::vect::unary<jit::functors::uint8<uint64_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapOut<uint8_t>(out)); }
void uint8_Mui8(const int64_t size, const uint8_t * in0, uint8_t ** out) { jit::vect::unary<jit::functors::uint8<uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapOut<uint8_t>(out)); }
void ceil_Mc(const int64_t size, const double * in0_re, const double * in0_im, double ** out_re, double ** out_im) { jit::vect::unary<jit::functors::ceil<const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void ceil_Md(const int64_t size, const double * in0, double ** out) { jit::vect::unary<jit::functors::ceil<double, double>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapOut<double>(out)); }
void ceil_Mi16(const int64_t size, const int16_t * in0, int16_t ** out) { jit::vect::unary<jit::functors::ceil<int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapOut<int16_t>(out)); }
void ceil_Mi32(const int64_t size, const int32_t * in0, int32_t ** out) { jit::vect::unary<jit::functors::ceil<int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapOut<int32_t>(out)); }
void ceil_Mi64(const int64_t size, const int64_t * in0, int64_t ** out) { jit::vect::unary<jit::functors::ceil<int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapOut<int64_t>(out)); }
void ceil_Mi8(const int64_t size, const int8_t * in0, int8_t ** out) { jit::vect::unary<jit::functors::ceil<int8_t, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapOut<int8_t>(out)); }
void ceil_Mui16(const int64_t size, const uint16_t * in0, uint16_t ** out) { jit::vect::unary<jit::functors::ceil<uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapOut<uint16_t>(out)); }
void ceil_Mui32(const int64_t size, const uint32_t * in0, uint32_t ** out) { jit::vect::unary<jit::functors::ceil<uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapOut<uint32_t>(out)); }
void ceil_Mui64(const int64_t size, const uint64_t * in0, uint64_t ** out) { jit::vect::unary<jit::functors::ceil<uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapOut<uint64_t>(out)); }
void ceil_Mui8(const int64_t size, const uint8_t * in0, uint8_t ** out) { jit::vect::unary<jit::functors::ceil<uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapOut<uint8_t>(out)); }
void uint64_Md(const int64_t size, const double * in0, uint64_t ** out) { jit::vect::unary<jit::functors::uint64<double, uint64_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapOut<uint64_t>(out)); }
void uint64_Mi16(const int64_t size, const int16_t * in0, uint64_t ** out) { jit::vect::unary<jit::functors::uint64<int16_t, uint64_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapOut<uint64_t>(out)); }
void uint64_Mi32(const int64_t size, const int32_t * in0, uint64_t ** out) { jit::vect::unary<jit::functors::uint64<int32_t, uint64_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapOut<uint64_t>(out)); }
void uint64_Mi64(const int64_t size, const int64_t * in0, uint64_t ** out) { jit::vect::unary<jit::functors::uint64<int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapOut<uint64_t>(out)); }
void uint64_Mi8(const int64_t size, const int8_t * in0, uint64_t ** out) { jit::vect::unary<jit::functors::uint64<int8_t, uint64_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapOut<uint64_t>(out)); }
void uint64_Mui16(const int64_t size, const uint16_t * in0, uint64_t ** out) { jit::vect::unary<jit::functors::uint64<uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapOut<uint64_t>(out)); }
void uint64_Mui32(const int64_t size, const uint32_t * in0, uint64_t ** out) { jit::vect::unary<jit::functors::uint64<uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapOut<uint64_t>(out)); }
void uint64_Mui64(const int64_t size, const uint64_t * in0, uint64_t ** out) { jit::vect::unary<jit::functors::uint64<uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapOut<uint64_t>(out)); }
void uint64_Mui8(const int64_t size, const uint8_t * in0, uint64_t ** out) { jit::vect::unary<jit::functors::uint64<uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapOut<uint64_t>(out)); }
void lt_MdMd(const int64_t size, const double * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<double, double, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_MdMi16(const int64_t size, const double * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<double, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_MdMi32(const int64_t size, const double * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<double, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_MdMi64(const int64_t size, const double * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<double, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_MdMi8(const int64_t size, const double * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<double, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_MdMui16(const int64_t size, const double * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<double, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_MdMui32(const int64_t size, const double * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<double, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_MdMui64(const int64_t size, const double * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<double, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_MdMui8(const int64_t size, const double * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<double, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_MdSd(const int64_t size, const double * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<double, double, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_MdSi16(const int64_t size, const double * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<double, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_MdSi32(const int64_t size, const double * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<double, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_MdSi64(const int64_t size, const double * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<double, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_MdSi8(const int64_t size, const double * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<double, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_MdSui16(const int64_t size, const double * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<double, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_MdSui32(const int64_t size, const double * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<double, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_MdSui64(const int64_t size, const double * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<double, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_MdSui8(const int64_t size, const double * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<double, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi16Md(const int64_t size, const int16_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi16Mi16(const int64_t size, const int16_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi16Mi32(const int64_t size, const int16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi16Mi64(const int64_t size, const int16_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi16Mi8(const int64_t size, const int16_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi16Mui16(const int64_t size, const int16_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi16Mui32(const int64_t size, const int16_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi16Mui64(const int64_t size, const int16_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi16Mui8(const int64_t size, const int16_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi16Sd(const int64_t size, const int16_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi16Si16(const int64_t size, const int16_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi16Si32(const int64_t size, const int16_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi16Si64(const int64_t size, const int16_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi16Si8(const int64_t size, const int16_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi16Sui16(const int64_t size, const int16_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi16Sui32(const int64_t size, const int16_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi16Sui64(const int64_t size, const int16_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi16Sui8(const int64_t size, const int16_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi32Md(const int64_t size, const int32_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi32Mi16(const int64_t size, const int32_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi32Mi32(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi32Mi64(const int64_t size, const int32_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi32Mi8(const int64_t size, const int32_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi32Mui16(const int64_t size, const int32_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi32Mui32(const int64_t size, const int32_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi32Mui64(const int64_t size, const int32_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi32Mui8(const int64_t size, const int32_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi32Sd(const int64_t size, const int32_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi32Si16(const int64_t size, const int32_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi32Si32(const int64_t size, const int32_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi32Si64(const int64_t size, const int32_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi32Si8(const int64_t size, const int32_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi32Sui16(const int64_t size, const int32_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi32Sui32(const int64_t size, const int32_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi32Sui64(const int64_t size, const int32_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi32Sui8(const int64_t size, const int32_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi64Md(const int64_t size, const int64_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi64Mi16(const int64_t size, const int64_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi64Mi32(const int64_t size, const int64_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi64Mi64(const int64_t size, const int64_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi64Mi8(const int64_t size, const int64_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi64Mui16(const int64_t size, const int64_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi64Mui32(const int64_t size, const int64_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi64Mui64(const int64_t size, const int64_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi64Mui8(const int64_t size, const int64_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi64Sd(const int64_t size, const int64_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi64Si16(const int64_t size, const int64_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi64Si32(const int64_t size, const int64_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi64Si64(const int64_t size, const int64_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi64Si8(const int64_t size, const int64_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi64Sui16(const int64_t size, const int64_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi64Sui32(const int64_t size, const int64_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi64Sui64(const int64_t size, const int64_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi64Sui8(const int64_t size, const int64_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi8Md(const int64_t size, const int8_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi8Mi16(const int64_t size, const int8_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi8Mi32(const int64_t size, const int8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi8Mi64(const int64_t size, const int8_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi8Mi8(const int64_t size, const int8_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi8Mui16(const int64_t size, const int8_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi8Mui32(const int64_t size, const int8_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi8Mui64(const int64_t size, const int8_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi8Mui8(const int64_t size, const int8_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi8Sd(const int64_t size, const int8_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi8Si16(const int64_t size, const int8_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi8Si32(const int64_t size, const int8_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi8Si64(const int64_t size, const int8_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi8Si8(const int64_t size, const int8_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi8Sui16(const int64_t size, const int8_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi8Sui32(const int64_t size, const int8_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi8Sui64(const int64_t size, const int8_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mi8Sui8(const int64_t size, const int8_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui16Md(const int64_t size, const uint16_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui16Mi16(const int64_t size, const uint16_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui16Mi32(const int64_t size, const uint16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui16Mi64(const int64_t size, const uint16_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui16Mi8(const int64_t size, const uint16_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui16Mui16(const int64_t size, const uint16_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui16Mui32(const int64_t size, const uint16_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui16Mui64(const int64_t size, const uint16_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui16Mui8(const int64_t size, const uint16_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui16Sd(const int64_t size, const uint16_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui16Si16(const int64_t size, const uint16_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui16Si32(const int64_t size, const uint16_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui16Si64(const int64_t size, const uint16_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui16Si8(const int64_t size, const uint16_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui16Sui16(const int64_t size, const uint16_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui16Sui32(const int64_t size, const uint16_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui16Sui64(const int64_t size, const uint16_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui16Sui8(const int64_t size, const uint16_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui32Md(const int64_t size, const uint32_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui32Mi16(const int64_t size, const uint32_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui32Mi32(const int64_t size, const uint32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui32Mi64(const int64_t size, const uint32_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui32Mi8(const int64_t size, const uint32_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui32Mui16(const int64_t size, const uint32_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui32Mui32(const int64_t size, const uint32_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui32Mui64(const int64_t size, const uint32_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui32Mui8(const int64_t size, const uint32_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui32Sd(const int64_t size, const uint32_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui32Si16(const int64_t size, const uint32_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui32Si32(const int64_t size, const uint32_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui32Si64(const int64_t size, const uint32_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui32Si8(const int64_t size, const uint32_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui32Sui16(const int64_t size, const uint32_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui32Sui32(const int64_t size, const uint32_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui32Sui64(const int64_t size, const uint32_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui32Sui8(const int64_t size, const uint32_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui64Md(const int64_t size, const uint64_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui64Mi16(const int64_t size, const uint64_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui64Mi32(const int64_t size, const uint64_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui64Mi64(const int64_t size, const uint64_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui64Mi8(const int64_t size, const uint64_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui64Mui16(const int64_t size, const uint64_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui64Mui32(const int64_t size, const uint64_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui64Mui64(const int64_t size, const uint64_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui64Mui8(const int64_t size, const uint64_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui64Sd(const int64_t size, const uint64_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui64Si16(const int64_t size, const uint64_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui64Si32(const int64_t size, const uint64_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui64Si64(const int64_t size, const uint64_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui64Si8(const int64_t size, const uint64_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui64Sui16(const int64_t size, const uint64_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui64Sui32(const int64_t size, const uint64_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui64Sui64(const int64_t size, const uint64_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui64Sui8(const int64_t size, const uint64_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui8Md(const int64_t size, const uint8_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui8Mi16(const int64_t size, const uint8_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui8Mi32(const int64_t size, const uint8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui8Mi64(const int64_t size, const uint8_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui8Mi8(const int64_t size, const uint8_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui8Mui16(const int64_t size, const uint8_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui8Mui32(const int64_t size, const uint8_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui8Mui64(const int64_t size, const uint8_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui8Mui8(const int64_t size, const uint8_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui8Sd(const int64_t size, const uint8_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui8Si16(const int64_t size, const uint8_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui8Si32(const int64_t size, const uint8_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui8Si64(const int64_t size, const uint8_t * in0, const int64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui8Si8(const int64_t size, const uint8_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui8Sui16(const int64_t size, const uint8_t * in0, const uint16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui8Sui32(const int64_t size, const uint8_t * in0, const uint32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui8Sui64(const int64_t size, const uint8_t * in0, const uint64_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Mui8Sui8(const int64_t size, const uint8_t * in0, const uint8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_SdMd(const int64_t size, const double in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<double, double, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_SdMi16(const int64_t size, const double in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<double, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_SdMi32(const int64_t size, const double in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<double, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_SdMi64(const int64_t size, const double in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<double, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_SdMi8(const int64_t size, const double in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<double, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_SdMui16(const int64_t size, const double in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<double, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_SdMui32(const int64_t size, const double in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<double, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_SdMui64(const int64_t size, const double in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<double, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_SdMui8(const int64_t size, const double in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<double, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Si16Md(const int64_t size, const int16_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Si16Mi16(const int64_t size, const int16_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Si16Mi32(const int64_t size, const int16_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Si16Mi64(const int64_t size, const int16_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Si16Mi8(const int64_t size, const int16_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Si16Mui16(const int64_t size, const int16_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Si16Mui32(const int64_t size, const int16_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Si16Mui64(const int64_t size, const int16_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Si16Mui8(const int64_t size, const int16_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Si32Md(const int64_t size, const int32_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Si32Mi16(const int64_t size, const int32_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Si32Mi32(const int64_t size, const int32_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Si32Mi64(const int64_t size, const int32_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Si32Mi8(const int64_t size, const int32_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Si32Mui16(const int64_t size, const int32_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Si32Mui32(const int64_t size, const int32_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Si32Mui64(const int64_t size, const int32_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Si32Mui8(const int64_t size, const int32_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Si64Md(const int64_t size, const int64_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Si64Mi16(const int64_t size, const int64_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Si64Mi32(const int64_t size, const int64_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Si64Mi64(const int64_t size, const int64_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Si64Mi8(const int64_t size, const int64_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Si64Mui16(const int64_t size, const int64_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Si64Mui32(const int64_t size, const int64_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Si64Mui64(const int64_t size, const int64_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Si64Mui8(const int64_t size, const int64_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Si8Md(const int64_t size, const int8_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Si8Mi16(const int64_t size, const int8_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Si8Mi32(const int64_t size, const int8_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Si8Mi64(const int64_t size, const int8_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Si8Mi8(const int64_t size, const int8_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Si8Mui16(const int64_t size, const int8_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Si8Mui32(const int64_t size, const int8_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Si8Mui64(const int64_t size, const int8_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Si8Mui8(const int64_t size, const int8_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Sui16Md(const int64_t size, const uint16_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Sui16Mi16(const int64_t size, const uint16_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Sui16Mi32(const int64_t size, const uint16_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Sui16Mi64(const int64_t size, const uint16_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Sui16Mi8(const int64_t size, const uint16_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Sui16Mui16(const int64_t size, const uint16_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Sui16Mui32(const int64_t size, const uint16_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Sui16Mui64(const int64_t size, const uint16_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Sui16Mui8(const int64_t size, const uint16_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Sui32Md(const int64_t size, const uint32_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Sui32Mi16(const int64_t size, const uint32_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Sui32Mi32(const int64_t size, const uint32_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Sui32Mi64(const int64_t size, const uint32_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Sui32Mi8(const int64_t size, const uint32_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Sui32Mui16(const int64_t size, const uint32_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Sui32Mui32(const int64_t size, const uint32_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Sui32Mui64(const int64_t size, const uint32_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Sui32Mui8(const int64_t size, const uint32_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Sui64Md(const int64_t size, const uint64_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Sui64Mi16(const int64_t size, const uint64_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Sui64Mi32(const int64_t size, const uint64_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Sui64Mi64(const int64_t size, const uint64_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Sui64Mi8(const int64_t size, const uint64_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Sui64Mui16(const int64_t size, const uint64_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Sui64Mui32(const int64_t size, const uint64_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Sui64Mui64(const int64_t size, const uint64_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Sui64Mui8(const int64_t size, const uint64_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Sui8Md(const int64_t size, const uint8_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Sui8Mi16(const int64_t size, const uint8_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Sui8Mi32(const int64_t size, const uint8_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Sui8Mi64(const int64_t size, const uint8_t in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Sui8Mi8(const int64_t size, const uint8_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Sui8Mui16(const int64_t size, const uint8_t in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Sui8Mui32(const int64_t size, const uint8_t in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Sui8Mui64(const int64_t size, const uint8_t in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Sui8Mui8(const int64_t size, const uint8_t in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_UdUd(const int64_t size, const double * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<double, double, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_UdUi16(const int64_t size, const double * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<double, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_UdUi32(const int64_t size, const double * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<double, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_UdUi64(const int64_t size, const double * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<double, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_UdUi8(const int64_t size, const double * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<double, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_UdUui16(const int64_t size, const double * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<double, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_UdUui32(const int64_t size, const double * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<double, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_UdUui64(const int64_t size, const double * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<double, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_UdUui8(const int64_t size, const double * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<double, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Ui16Ud(const int64_t size, const int16_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Ui16Ui16(const int64_t size, const int16_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Ui16Ui32(const int64_t size, const int16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Ui16Ui64(const int64_t size, const int16_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Ui16Ui8(const int64_t size, const int16_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Ui16Uui16(const int64_t size, const int16_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Ui16Uui32(const int64_t size, const int16_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Ui16Uui64(const int64_t size, const int16_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Ui16Uui8(const int64_t size, const int16_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Ui32Ud(const int64_t size, const int32_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Ui32Ui16(const int64_t size, const int32_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Ui32Ui32(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Ui32Ui64(const int64_t size, const int32_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Ui32Ui8(const int64_t size, const int32_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Ui32Uui16(const int64_t size, const int32_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Ui32Uui32(const int64_t size, const int32_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Ui32Uui64(const int64_t size, const int32_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Ui32Uui8(const int64_t size, const int32_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Ui64Ud(const int64_t size, const int64_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Ui64Ui16(const int64_t size, const int64_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Ui64Ui32(const int64_t size, const int64_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Ui64Ui64(const int64_t size, const int64_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Ui64Ui8(const int64_t size, const int64_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Ui64Uui16(const int64_t size, const int64_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Ui64Uui32(const int64_t size, const int64_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Ui64Uui64(const int64_t size, const int64_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Ui64Uui8(const int64_t size, const int64_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Ui8Ud(const int64_t size, const int8_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Ui8Ui16(const int64_t size, const int8_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Ui8Ui32(const int64_t size, const int8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Ui8Ui64(const int64_t size, const int8_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Ui8Ui8(const int64_t size, const int8_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Ui8Uui16(const int64_t size, const int8_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Ui8Uui32(const int64_t size, const int8_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Ui8Uui64(const int64_t size, const int8_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Ui8Uui8(const int64_t size, const int8_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<int8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Uui16Ud(const int64_t size, const uint16_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint16_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Uui16Ui16(const int64_t size, const uint16_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint16_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Uui16Ui32(const int64_t size, const uint16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Uui16Ui64(const int64_t size, const uint16_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint16_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Uui16Ui8(const int64_t size, const uint16_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint16_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Uui16Uui16(const int64_t size, const uint16_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint16_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Uui16Uui32(const int64_t size, const uint16_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint16_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Uui16Uui64(const int64_t size, const uint16_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint16_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Uui16Uui8(const int64_t size, const uint16_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint16_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Uui32Ud(const int64_t size, const uint32_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Uui32Ui16(const int64_t size, const uint32_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Uui32Ui32(const int64_t size, const uint32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Uui32Ui64(const int64_t size, const uint32_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint32_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Uui32Ui8(const int64_t size, const uint32_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Uui32Uui16(const int64_t size, const uint32_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint32_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Uui32Uui32(const int64_t size, const uint32_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint32_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Uui32Uui64(const int64_t size, const uint32_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint32_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Uui32Uui8(const int64_t size, const uint32_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint32_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Uui64Ud(const int64_t size, const uint64_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint64_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Uui64Ui16(const int64_t size, const uint64_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint64_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Uui64Ui32(const int64_t size, const uint64_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint64_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Uui64Ui64(const int64_t size, const uint64_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint64_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Uui64Ui8(const int64_t size, const uint64_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint64_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Uui64Uui16(const int64_t size, const uint64_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint64_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Uui64Uui32(const int64_t size, const uint64_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint64_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Uui64Uui64(const int64_t size, const uint64_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint64_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Uui64Uui8(const int64_t size, const uint64_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint64_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Uui8Ud(const int64_t size, const uint8_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint8_t, double, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Uui8Ui16(const int64_t size, const uint8_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint8_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Uui8Ui32(const int64_t size, const uint8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Uui8Ui64(const int64_t size, const uint8_t * in0, const int64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint8_t, int64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Uui8Ui8(const int64_t size, const uint8_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint8_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Uui8Uui16(const int64_t size, const uint8_t * in0, const uint16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint8_t, uint16_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Uui8Uui32(const int64_t size, const uint8_t * in0, const uint32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint8_t, uint32_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Uui8Uui64(const int64_t size, const uint8_t * in0, const uint64_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint8_t, uint64_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void lt_Uui8Uui8(const int64_t size, const uint8_t * in0, const uint8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::lt<uint8_t, uint8_t, int32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void sub_MbMb(const int64_t size, const int32_t * in0, const int32_t * in1, double ** out) { jit::vect::binary<jit::functors::sub<bool, bool, double>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<double>(out)); }
void sub_MbMc(const int64_t size, const int32_t * in0, const double * in1_re, const double * in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::sub<bool, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void sub_MbMd(const int64_t size, const int32_t * in0, const double * in1, double ** out) { jit::vect::binary<jit::functors::sub<bool, double, double>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<double>(out)); }
void sub_MbMi16(const int64_t size, const int32_t * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::sub<bool, int16_t, int16_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void sub_MbMi32(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::sub<bool, int32_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void sub_MbMi64(const int64_t size, const int32_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::sub<bool, int64_t, int64_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void sub_MbMi8(const int64_t size, const int32_t * in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::sub<bool, int8_t, int8_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void sub_MbMui16(const int64_t size, const int32_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<bool, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_MbMui32(const int64_t size, const int32_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<bool, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_MbMui64(const int64_t size, const int32_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<bool, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_MbMui8(const int64_t size, const int32_t * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::sub<bool, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void sub_MbSb(const int64_t size, const int32_t * in0, const int32_t in1, double ** out) { jit::vect::binary<jit::functors::sub<bool, bool, double>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<double>(out)); }
void sub_MbSc(const int64_t size, const int32_t * in0, const double in1_re, const double in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::sub<bool, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<jit::cpx_t>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void sub_MbSd(const int64_t size, const int32_t * in0, const double in1, double ** out) { jit::vect::binary<jit::functors::sub<bool, double, double>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<double>(out)); }
void sub_MbSi16(const int64_t size, const int32_t * in0, const int16_t in1, int16_t ** out) { jit::vect::binary<jit::functors::sub<bool, int16_t, int16_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int16_t>(out)); }
void sub_MbSi32(const int64_t size, const int32_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::sub<bool, int32_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void sub_MbSi64(const int64_t size, const int32_t * in0, const int64_t in1, int64_t ** out) { jit::vect::binary<jit::functors::sub<bool, int64_t, int64_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void sub_MbSi8(const int64_t size, const int32_t * in0, const int8_t in1, int8_t ** out) { jit::vect::binary<jit::functors::sub<bool, int8_t, int8_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int8_t>(out)); }
void sub_MbSui16(const int64_t size, const int32_t * in0, const uint16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<bool, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_MbSui32(const int64_t size, const int32_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<bool, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_MbSui64(const int64_t size, const int32_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<bool, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_MbSui8(const int64_t size, const int32_t * in0, const uint8_t in1, uint8_t ** out) { jit::vect::binary<jit::functors::sub<bool, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void sub_McMb(const int64_t size, const double * in0_re, const double * in0_im, const int32_t * in1, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::sub<const jit::cpx_t &, bool, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void sub_McMc(const int64_t size, const double * in0_re, const double * in0_im, const double * in1_re, const double * in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::sub<const jit::cpx_t &, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void sub_McMd(const int64_t size, const double * in0_re, const double * in0_im, const double * in1, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::sub<const jit::cpx_t &, double, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void sub_McSb(const int64_t size, const double * in0_re, const double * in0_im, const int32_t in1, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::sub<const jit::cpx_t &, bool, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void sub_McSc(const int64_t size, const double * in0_re, const double * in0_im, const double in1_re, const double in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::sub<const jit::cpx_t &, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<jit::cpx_t>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void sub_McSd(const int64_t size, const double * in0_re, const double * in0_im, const double in1, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::sub<const jit::cpx_t &, double, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void sub_MdMb(const int64_t size, const double * in0, const int32_t * in1, double ** out) { jit::vect::binary<jit::functors::sub<double, bool, double>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<double>(out)); }
void sub_MdMc(const int64_t size, const double * in0, const double * in1_re, const double * in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::sub<double, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void sub_MdMd(const int64_t size, const double * in0, const double * in1, double ** out) { jit::vect::binary<jit::functors::sub<double, double, double>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<double>(out)); }
void sub_MdMi16(const int64_t size, const double * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::sub<double, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void sub_MdMi32(const int64_t size, const double * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::sub<double, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void sub_MdMi64(const int64_t size, const double * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::sub<double, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void sub_MdMi8(const int64_t size, const double * in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::sub<double, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void sub_MdMui16(const int64_t size, const double * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<double, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_MdMui32(const int64_t size, const double * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<double, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_MdMui64(const int64_t size, const double * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<double, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_MdMui8(const int64_t size, const double * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::sub<double, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void sub_MdSb(const int64_t size, const double * in0, const int32_t in1, double ** out) { jit::vect::binary<jit::functors::sub<double, bool, double>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<double>(out)); }
void sub_MdSc(const int64_t size, const double * in0, const double in1_re, const double in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::sub<double, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<jit::cpx_t>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void sub_MdSd(const int64_t size, const double * in0, const double in1, double ** out) { jit::vect::binary<jit::functors::sub<double, double, double>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<double>(out)); }
void sub_MdSi16(const int64_t size, const double * in0, const int16_t in1, int16_t ** out) { jit::vect::binary<jit::functors::sub<double, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int16_t>(out)); }
void sub_MdSi32(const int64_t size, const double * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::sub<double, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void sub_MdSi64(const int64_t size, const double * in0, const int64_t in1, int64_t ** out) { jit::vect::binary<jit::functors::sub<double, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void sub_MdSi8(const int64_t size, const double * in0, const int8_t in1, int8_t ** out) { jit::vect::binary<jit::functors::sub<double, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int8_t>(out)); }
void sub_MdSui16(const int64_t size, const double * in0, const uint16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<double, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_MdSui32(const int64_t size, const double * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<double, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_MdSui64(const int64_t size, const double * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<double, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_MdSui8(const int64_t size, const double * in0, const uint8_t in1, uint8_t ** out) { jit::vect::binary<jit::functors::sub<double, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void sub_Mi16Mb(const int64_t size, const int16_t * in0, const int32_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::sub<int16_t, bool, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void sub_Mi16Md(const int64_t size, const int16_t * in0, const double * in1, int16_t ** out) { jit::vect::binary<jit::functors::sub<int16_t, double, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void sub_Mi16Mi16(const int64_t size, const int16_t * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::sub<int16_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void sub_Mi16Mi32(const int64_t size, const int16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::sub<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void sub_Mi16Mi64(const int64_t size, const int16_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::sub<int16_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void sub_Mi16Mi8(const int64_t size, const int16_t * in0, const int8_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::sub<int16_t, int8_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void sub_Mi16Mui16(const int64_t size, const int16_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<int16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_Mi16Mui32(const int64_t size, const int16_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<int16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Mi16Mui64(const int64_t size, const int16_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<int16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mi16Mui8(const int64_t size, const int16_t * in0, const uint8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<int16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_Mi16Sb(const int64_t size, const int16_t * in0, const int32_t in1, int16_t ** out) { jit::vect::binary<jit::functors::sub<int16_t, bool, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<int16_t>(out)); }
void sub_Mi16Sd(const int64_t size, const int16_t * in0, const double in1, int16_t ** out) { jit::vect::binary<jit::functors::sub<int16_t, double, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int16_t>(out)); }
void sub_Mi16Si16(const int64_t size, const int16_t * in0, const int16_t in1, int16_t ** out) { jit::vect::binary<jit::functors::sub<int16_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int16_t>(out)); }
void sub_Mi16Si32(const int64_t size, const int16_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::sub<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void sub_Mi16Si64(const int64_t size, const int16_t * in0, const int64_t in1, int64_t ** out) { jit::vect::binary<jit::functors::sub<int16_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void sub_Mi16Si8(const int64_t size, const int16_t * in0, const int8_t in1, int16_t ** out) { jit::vect::binary<jit::functors::sub<int16_t, int8_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int16_t>(out)); }
void sub_Mi16Sui16(const int64_t size, const int16_t * in0, const uint16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<int16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_Mi16Sui32(const int64_t size, const int16_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<int16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Mi16Sui64(const int64_t size, const int16_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<int16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mi16Sui8(const int64_t size, const int16_t * in0, const uint8_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<int16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_Mi32Mb(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::sub<int32_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void sub_Mi32Md(const int64_t size, const int32_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::sub<int32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void sub_Mi32Mi16(const int64_t size, const int32_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::sub<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void sub_Mi32Mi32(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::sub<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void sub_Mi32Mi64(const int64_t size, const int32_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::sub<int32_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void sub_Mi32Mi8(const int64_t size, const int32_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::sub<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void sub_Mi32Mui16(const int64_t size, const int32_t * in0, const uint16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<int32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Mi32Mui32(const int64_t size, const int32_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<int32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Mi32Mui64(const int64_t size, const int32_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<int32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mi32Mui8(const int64_t size, const int32_t * in0, const uint8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<int32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Mi32Sb(const int64_t size, const int32_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::sub<int32_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<int32_t>(out)); }
void sub_Mi32Sd(const int64_t size, const int32_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::sub<int32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void sub_Mi32Si16(const int64_t size, const int32_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::sub<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void sub_Mi32Si32(const int64_t size, const int32_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::sub<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void sub_Mi32Si64(const int64_t size, const int32_t * in0, const int64_t in1, int64_t ** out) { jit::vect::binary<jit::functors::sub<int32_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void sub_Mi32Si8(const int64_t size, const int32_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::sub<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void sub_Mi32Sui16(const int64_t size, const int32_t * in0, const uint16_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<int32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Mi32Sui32(const int64_t size, const int32_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<int32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Mi32Sui64(const int64_t size, const int32_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<int32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mi32Sui8(const int64_t size, const int32_t * in0, const uint8_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<int32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Mi64Mb(const int64_t size, const int64_t * in0, const int32_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::sub<int64_t, bool, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void sub_Mi64Md(const int64_t size, const int64_t * in0, const double * in1, int64_t ** out) { jit::vect::binary<jit::functors::sub<int64_t, double, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void sub_Mi64Mi16(const int64_t size, const int64_t * in0, const int16_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::sub<int64_t, int16_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void sub_Mi64Mi32(const int64_t size, const int64_t * in0, const int32_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::sub<int64_t, int32_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void sub_Mi64Mi64(const int64_t size, const int64_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::sub<int64_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void sub_Mi64Mi8(const int64_t size, const int64_t * in0, const int8_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::sub<int64_t, int8_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void sub_Mi64Mui16(const int64_t size, const int64_t * in0, const uint16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<int64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mi64Mui32(const int64_t size, const int64_t * in0, const uint32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<int64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mi64Mui64(const int64_t size, const int64_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<int64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mi64Mui8(const int64_t size, const int64_t * in0, const uint8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<int64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mi64Sb(const int64_t size, const int64_t * in0, const int32_t in1, int64_t ** out) { jit::vect::binary<jit::functors::sub<int64_t, bool, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<int64_t>(out)); }
void sub_Mi64Sd(const int64_t size, const int64_t * in0, const double in1, int64_t ** out) { jit::vect::binary<jit::functors::sub<int64_t, double, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int64_t>(out)); }
void sub_Mi64Si16(const int64_t size, const int64_t * in0, const int16_t in1, int64_t ** out) { jit::vect::binary<jit::functors::sub<int64_t, int16_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void sub_Mi64Si32(const int64_t size, const int64_t * in0, const int32_t in1, int64_t ** out) { jit::vect::binary<jit::functors::sub<int64_t, int32_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void sub_Mi64Si64(const int64_t size, const int64_t * in0, const int64_t in1, int64_t ** out) { jit::vect::binary<jit::functors::sub<int64_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void sub_Mi64Si8(const int64_t size, const int64_t * in0, const int8_t in1, int64_t ** out) { jit::vect::binary<jit::functors::sub<int64_t, int8_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void sub_Mi64Sui16(const int64_t size, const int64_t * in0, const uint16_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<int64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mi64Sui32(const int64_t size, const int64_t * in0, const uint32_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<int64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mi64Sui64(const int64_t size, const int64_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<int64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mi64Sui8(const int64_t size, const int64_t * in0, const uint8_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<int64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mi8Mb(const int64_t size, const int8_t * in0, const int32_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::sub<int8_t, bool, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void sub_Mi8Md(const int64_t size, const int8_t * in0, const double * in1, int8_t ** out) { jit::vect::binary<jit::functors::sub<int8_t, double, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void sub_Mi8Mi16(const int64_t size, const int8_t * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::sub<int8_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void sub_Mi8Mi32(const int64_t size, const int8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::sub<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void sub_Mi8Mi64(const int64_t size, const int8_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::sub<int8_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void sub_Mi8Mi8(const int64_t size, const int8_t * in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::sub<int8_t, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void sub_Mi8Mui16(const int64_t size, const int8_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<int8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_Mi8Mui32(const int64_t size, const int8_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<int8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Mi8Mui64(const int64_t size, const int8_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<int8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mi8Mui8(const int64_t size, const int8_t * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::sub<int8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void sub_Mi8Sb(const int64_t size, const int8_t * in0, const int32_t in1, int8_t ** out) { jit::vect::binary<jit::functors::sub<int8_t, bool, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<int8_t>(out)); }
void sub_Mi8Sd(const int64_t size, const int8_t * in0, const double in1, int8_t ** out) { jit::vect::binary<jit::functors::sub<int8_t, double, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int8_t>(out)); }
void sub_Mi8Si16(const int64_t size, const int8_t * in0, const int16_t in1, int16_t ** out) { jit::vect::binary<jit::functors::sub<int8_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int16_t>(out)); }
void sub_Mi8Si32(const int64_t size, const int8_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::sub<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void sub_Mi8Si64(const int64_t size, const int8_t * in0, const int64_t in1, int64_t ** out) { jit::vect::binary<jit::functors::sub<int8_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void sub_Mi8Si8(const int64_t size, const int8_t * in0, const int8_t in1, int8_t ** out) { jit::vect::binary<jit::functors::sub<int8_t, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int8_t>(out)); }
void sub_Mi8Sui16(const int64_t size, const int8_t * in0, const uint16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<int8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_Mi8Sui32(const int64_t size, const int8_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<int8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Mi8Sui64(const int64_t size, const int8_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<int8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mi8Sui8(const int64_t size, const int8_t * in0, const uint8_t in1, uint8_t ** out) { jit::vect::binary<jit::functors::sub<int8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void sub_Mui16Mb(const int64_t size, const uint16_t * in0, const int32_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<uint16_t, bool, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_Mui16Md(const int64_t size, const uint16_t * in0, const double * in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<uint16_t, double, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_Mui16Mi16(const int64_t size, const uint16_t * in0, const int16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<uint16_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_Mui16Mi32(const int64_t size, const uint16_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint16_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Mui16Mi64(const int64_t size, const uint16_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint16_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mui16Mi8(const int64_t size, const uint16_t * in0, const int8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<uint16_t, int8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_Mui16Mui16(const int64_t size, const uint16_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<uint16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_Mui16Mui32(const int64_t size, const uint16_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Mui16Mui64(const int64_t size, const uint16_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mui16Mui8(const int64_t size, const uint16_t * in0, const uint8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<uint16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_Mui16Sb(const int64_t size, const uint16_t * in0, const int32_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<uint16_t, bool, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_Mui16Sd(const int64_t size, const uint16_t * in0, const double in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<uint16_t, double, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_Mui16Si16(const int64_t size, const uint16_t * in0, const int16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<uint16_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_Mui16Si32(const int64_t size, const uint16_t * in0, const int32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint16_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Mui16Si64(const int64_t size, const uint16_t * in0, const int64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint16_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mui16Si8(const int64_t size, const uint16_t * in0, const int8_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<uint16_t, int8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_Mui16Sui16(const int64_t size, const uint16_t * in0, const uint16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<uint16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_Mui16Sui32(const int64_t size, const uint16_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Mui16Sui64(const int64_t size, const uint16_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mui16Sui8(const int64_t size, const uint16_t * in0, const uint8_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<uint16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_Mui32Mb(const int64_t size, const uint32_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint32_t, bool, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Mui32Md(const int64_t size, const uint32_t * in0, const double * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint32_t, double, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Mui32Mi16(const int64_t size, const uint32_t * in0, const int16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint32_t, int16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Mui32Mi32(const int64_t size, const uint32_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint32_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Mui32Mi64(const int64_t size, const uint32_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint32_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mui32Mi8(const int64_t size, const uint32_t * in0, const int8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint32_t, int8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Mui32Mui16(const int64_t size, const uint32_t * in0, const uint16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Mui32Mui32(const int64_t size, const uint32_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Mui32Mui64(const int64_t size, const uint32_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mui32Mui8(const int64_t size, const uint32_t * in0, const uint8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Mui32Sb(const int64_t size, const uint32_t * in0, const int32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint32_t, bool, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Mui32Sd(const int64_t size, const uint32_t * in0, const double in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint32_t, double, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Mui32Si16(const int64_t size, const uint32_t * in0, const int16_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint32_t, int16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Mui32Si32(const int64_t size, const uint32_t * in0, const int32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint32_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Mui32Si64(const int64_t size, const uint32_t * in0, const int64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint32_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mui32Si8(const int64_t size, const uint32_t * in0, const int8_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint32_t, int8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Mui32Sui16(const int64_t size, const uint32_t * in0, const uint16_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Mui32Sui32(const int64_t size, const uint32_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Mui32Sui64(const int64_t size, const uint32_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mui32Sui8(const int64_t size, const uint32_t * in0, const uint8_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Mui64Mb(const int64_t size, const uint64_t * in0, const int32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint64_t, bool, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mui64Md(const int64_t size, const uint64_t * in0, const double * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint64_t, double, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mui64Mi16(const int64_t size, const uint64_t * in0, const int16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint64_t, int16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mui64Mi32(const int64_t size, const uint64_t * in0, const int32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint64_t, int32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mui64Mi64(const int64_t size, const uint64_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint64_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mui64Mi8(const int64_t size, const uint64_t * in0, const int8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint64_t, int8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mui64Mui16(const int64_t size, const uint64_t * in0, const uint16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mui64Mui32(const int64_t size, const uint64_t * in0, const uint32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mui64Mui64(const int64_t size, const uint64_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mui64Mui8(const int64_t size, const uint64_t * in0, const uint8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mui64Sb(const int64_t size, const uint64_t * in0, const int32_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint64_t, bool, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mui64Sd(const int64_t size, const uint64_t * in0, const double in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint64_t, double, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mui64Si16(const int64_t size, const uint64_t * in0, const int16_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint64_t, int16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mui64Si32(const int64_t size, const uint64_t * in0, const int32_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint64_t, int32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mui64Si64(const int64_t size, const uint64_t * in0, const int64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint64_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mui64Si8(const int64_t size, const uint64_t * in0, const int8_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint64_t, int8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mui64Sui16(const int64_t size, const uint64_t * in0, const uint16_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mui64Sui32(const int64_t size, const uint64_t * in0, const uint32_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mui64Sui64(const int64_t size, const uint64_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mui64Sui8(const int64_t size, const uint64_t * in0, const uint8_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mui8Mb(const int64_t size, const uint8_t * in0, const int32_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::sub<uint8_t, bool, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void sub_Mui8Md(const int64_t size, const uint8_t * in0, const double * in1, uint8_t ** out) { jit::vect::binary<jit::functors::sub<uint8_t, double, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void sub_Mui8Mi16(const int64_t size, const uint8_t * in0, const int16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<uint8_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_Mui8Mi32(const int64_t size, const uint8_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint8_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Mui8Mi64(const int64_t size, const uint8_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint8_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mui8Mi8(const int64_t size, const uint8_t * in0, const int8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::sub<uint8_t, int8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void sub_Mui8Mui16(const int64_t size, const uint8_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<uint8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_Mui8Mui32(const int64_t size, const uint8_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Mui8Mui64(const int64_t size, const uint8_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mui8Mui8(const int64_t size, const uint8_t * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::sub<uint8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void sub_Mui8Sb(const int64_t size, const uint8_t * in0, const int32_t in1, uint8_t ** out) { jit::vect::binary<jit::functors::sub<uint8_t, bool, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void sub_Mui8Sd(const int64_t size, const uint8_t * in0, const double in1, uint8_t ** out) { jit::vect::binary<jit::functors::sub<uint8_t, double, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void sub_Mui8Si16(const int64_t size, const uint8_t * in0, const int16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<uint8_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_Mui8Si32(const int64_t size, const uint8_t * in0, const int32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint8_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Mui8Si64(const int64_t size, const uint8_t * in0, const int64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint8_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mui8Si8(const int64_t size, const uint8_t * in0, const int8_t in1, uint8_t ** out) { jit::vect::binary<jit::functors::sub<uint8_t, int8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void sub_Mui8Sui16(const int64_t size, const uint8_t * in0, const uint16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<uint8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_Mui8Sui32(const int64_t size, const uint8_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Mui8Sui64(const int64_t size, const uint8_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Mui8Sui8(const int64_t size, const uint8_t * in0, const uint8_t in1, uint8_t ** out) { jit::vect::binary<jit::functors::sub<uint8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void sub_SbMb(const int64_t size, const int32_t in0, const int32_t * in1, double ** out) { jit::vect::binary<jit::functors::sub<bool, bool, double>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<double>(out)); }
void sub_SbMc(const int64_t size, const int32_t in0, const double * in1_re, const double * in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::sub<bool, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void sub_SbMd(const int64_t size, const int32_t in0, const double * in1, double ** out) { jit::vect::binary<jit::functors::sub<bool, double, double>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<double>(out)); }
void sub_SbMi16(const int64_t size, const int32_t in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::sub<bool, int16_t, int16_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void sub_SbMi32(const int64_t size, const int32_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::sub<bool, int32_t, int32_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void sub_SbMi64(const int64_t size, const int32_t in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::sub<bool, int64_t, int64_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void sub_SbMi8(const int64_t size, const int32_t in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::sub<bool, int8_t, int8_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void sub_SbMui16(const int64_t size, const int32_t in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<bool, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_SbMui32(const int64_t size, const int32_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<bool, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_SbMui64(const int64_t size, const int32_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<bool, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_SbMui8(const int64_t size, const int32_t in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::sub<bool, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void sub_ScMb(const int64_t size, const double in0_re, const double in0_im, const int32_t * in1, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::sub<const jit::cpx_t &, bool, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t>(in0_re, in0_im), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void sub_ScMc(const int64_t size, const double in0_re, const double in0_im, const double * in1_re, const double * in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::sub<const jit::cpx_t &, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t>(in0_re, in0_im), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void sub_ScMd(const int64_t size, const double in0_re, const double in0_im, const double * in1, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::sub<const jit::cpx_t &, double, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t>(in0_re, in0_im), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void sub_SdMb(const int64_t size, const double in0, const int32_t * in1, double ** out) { jit::vect::binary<jit::functors::sub<double, bool, double>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<double>(out)); }
void sub_SdMc(const int64_t size, const double in0, const double * in1_re, const double * in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::sub<double, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void sub_SdMd(const int64_t size, const double in0, const double * in1, double ** out) { jit::vect::binary<jit::functors::sub<double, double, double>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<double>(out)); }
void sub_SdMi16(const int64_t size, const double in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::sub<double, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void sub_SdMi32(const int64_t size, const double in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::sub<double, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void sub_SdMi64(const int64_t size, const double in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::sub<double, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void sub_SdMi8(const int64_t size, const double in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::sub<double, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void sub_SdMui16(const int64_t size, const double in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<double, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_SdMui32(const int64_t size, const double in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<double, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_SdMui64(const int64_t size, const double in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<double, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_SdMui8(const int64_t size, const double in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::sub<double, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void sub_Si16Mb(const int64_t size, const int16_t in0, const int32_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::sub<int16_t, bool, int16_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void sub_Si16Md(const int64_t size, const int16_t in0, const double * in1, int16_t ** out) { jit::vect::binary<jit::functors::sub<int16_t, double, int16_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void sub_Si16Mi16(const int64_t size, const int16_t in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::sub<int16_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void sub_Si16Mi32(const int64_t size, const int16_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::sub<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void sub_Si16Mi64(const int64_t size, const int16_t in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::sub<int16_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void sub_Si16Mi8(const int64_t size, const int16_t in0, const int8_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::sub<int16_t, int8_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void sub_Si16Mui16(const int64_t size, const int16_t in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<int16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_Si16Mui32(const int64_t size, const int16_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<int16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Si16Mui64(const int64_t size, const int16_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<int16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Si16Mui8(const int64_t size, const int16_t in0, const uint8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<int16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_Si32Mb(const int64_t size, const int32_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::sub<int32_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void sub_Si32Md(const int64_t size, const int32_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::sub<int32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void sub_Si32Mi16(const int64_t size, const int32_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::sub<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void sub_Si32Mi32(const int64_t size, const int32_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::sub<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void sub_Si32Mi64(const int64_t size, const int32_t in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::sub<int32_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void sub_Si32Mi8(const int64_t size, const int32_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::sub<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void sub_Si32Mui16(const int64_t size, const int32_t in0, const uint16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<int32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Si32Mui32(const int64_t size, const int32_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<int32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Si32Mui64(const int64_t size, const int32_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<int32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Si32Mui8(const int64_t size, const int32_t in0, const uint8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<int32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Si64Mb(const int64_t size, const int64_t in0, const int32_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::sub<int64_t, bool, int64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void sub_Si64Md(const int64_t size, const int64_t in0, const double * in1, int64_t ** out) { jit::vect::binary<jit::functors::sub<int64_t, double, int64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void sub_Si64Mi16(const int64_t size, const int64_t in0, const int16_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::sub<int64_t, int16_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void sub_Si64Mi32(const int64_t size, const int64_t in0, const int32_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::sub<int64_t, int32_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void sub_Si64Mi64(const int64_t size, const int64_t in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::sub<int64_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void sub_Si64Mi8(const int64_t size, const int64_t in0, const int8_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::sub<int64_t, int8_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void sub_Si64Mui16(const int64_t size, const int64_t in0, const uint16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<int64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Si64Mui32(const int64_t size, const int64_t in0, const uint32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<int64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Si64Mui64(const int64_t size, const int64_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<int64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Si64Mui8(const int64_t size, const int64_t in0, const uint8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<int64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Si8Mb(const int64_t size, const int8_t in0, const int32_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::sub<int8_t, bool, int8_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void sub_Si8Md(const int64_t size, const int8_t in0, const double * in1, int8_t ** out) { jit::vect::binary<jit::functors::sub<int8_t, double, int8_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void sub_Si8Mi16(const int64_t size, const int8_t in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::sub<int8_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void sub_Si8Mi32(const int64_t size, const int8_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::sub<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void sub_Si8Mi64(const int64_t size, const int8_t in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::sub<int8_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void sub_Si8Mi8(const int64_t size, const int8_t in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::sub<int8_t, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void sub_Si8Mui16(const int64_t size, const int8_t in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<int8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_Si8Mui32(const int64_t size, const int8_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<int8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Si8Mui64(const int64_t size, const int8_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<int8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Si8Mui8(const int64_t size, const int8_t in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::sub<int8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void sub_Sui16Mb(const int64_t size, const uint16_t in0, const int32_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<uint16_t, bool, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_Sui16Md(const int64_t size, const uint16_t in0, const double * in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<uint16_t, double, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_Sui16Mi16(const int64_t size, const uint16_t in0, const int16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<uint16_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_Sui16Mi32(const int64_t size, const uint16_t in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint16_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Sui16Mi64(const int64_t size, const uint16_t in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint16_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Sui16Mi8(const int64_t size, const uint16_t in0, const int8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<uint16_t, int8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_Sui16Mui16(const int64_t size, const uint16_t in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<uint16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_Sui16Mui32(const int64_t size, const uint16_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Sui16Mui64(const int64_t size, const uint16_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Sui16Mui8(const int64_t size, const uint16_t in0, const uint8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<uint16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_Sui32Mb(const int64_t size, const uint32_t in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint32_t, bool, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Sui32Md(const int64_t size, const uint32_t in0, const double * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint32_t, double, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Sui32Mi16(const int64_t size, const uint32_t in0, const int16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint32_t, int16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Sui32Mi32(const int64_t size, const uint32_t in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint32_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Sui32Mi64(const int64_t size, const uint32_t in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint32_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Sui32Mi8(const int64_t size, const uint32_t in0, const int8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint32_t, int8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Sui32Mui16(const int64_t size, const uint32_t in0, const uint16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Sui32Mui32(const int64_t size, const uint32_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Sui32Mui64(const int64_t size, const uint32_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Sui32Mui8(const int64_t size, const uint32_t in0, const uint8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Sui64Mb(const int64_t size, const uint64_t in0, const int32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint64_t, bool, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Sui64Md(const int64_t size, const uint64_t in0, const double * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint64_t, double, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Sui64Mi16(const int64_t size, const uint64_t in0, const int16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint64_t, int16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Sui64Mi32(const int64_t size, const uint64_t in0, const int32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint64_t, int32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Sui64Mi64(const int64_t size, const uint64_t in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint64_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Sui64Mi8(const int64_t size, const uint64_t in0, const int8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint64_t, int8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Sui64Mui16(const int64_t size, const uint64_t in0, const uint16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Sui64Mui32(const int64_t size, const uint64_t in0, const uint32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Sui64Mui64(const int64_t size, const uint64_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Sui64Mui8(const int64_t size, const uint64_t in0, const uint8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Sui8Mb(const int64_t size, const uint8_t in0, const int32_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::sub<uint8_t, bool, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void sub_Sui8Md(const int64_t size, const uint8_t in0, const double * in1, uint8_t ** out) { jit::vect::binary<jit::functors::sub<uint8_t, double, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void sub_Sui8Mi16(const int64_t size, const uint8_t in0, const int16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<uint8_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_Sui8Mi32(const int64_t size, const uint8_t in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint8_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Sui8Mi64(const int64_t size, const uint8_t in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint8_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Sui8Mi8(const int64_t size, const uint8_t in0, const int8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::sub<uint8_t, int8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void sub_Sui8Mui16(const int64_t size, const uint8_t in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<uint8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_Sui8Mui32(const int64_t size, const uint8_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Sui8Mui64(const int64_t size, const uint8_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Sui8Mui8(const int64_t size, const uint8_t in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::sub<uint8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void sub_UbUb(const int64_t size, const int32_t * in0, const int32_t * in1, double ** out) { jit::vect::binary<jit::functors::sub<bool, bool, double>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<double>(out)); }
void sub_UbUc(const int64_t size, const int32_t * in0, const double * in1_re, const double * in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::sub<bool, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void sub_UbUd(const int64_t size, const int32_t * in0, const double * in1, double ** out) { jit::vect::binary<jit::functors::sub<bool, double, double>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<double>(out)); }
void sub_UbUi16(const int64_t size, const int32_t * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::sub<bool, int16_t, int16_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void sub_UbUi32(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::sub<bool, int32_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void sub_UbUi64(const int64_t size, const int32_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::sub<bool, int64_t, int64_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void sub_UbUi8(const int64_t size, const int32_t * in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::sub<bool, int8_t, int8_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void sub_UbUui16(const int64_t size, const int32_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<bool, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_UbUui32(const int64_t size, const int32_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<bool, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_UbUui64(const int64_t size, const int32_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<bool, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_UbUui8(const int64_t size, const int32_t * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::sub<bool, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void sub_UcUb(const int64_t size, const double * in0_re, const double * in0_im, const int32_t * in1, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::sub<const jit::cpx_t &, bool, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void sub_UcUc(const int64_t size, const double * in0_re, const double * in0_im, const double * in1_re, const double * in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::sub<const jit::cpx_t &, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void sub_UcUd(const int64_t size, const double * in0_re, const double * in0_im, const double * in1, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::sub<const jit::cpx_t &, double, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void sub_UdUb(const int64_t size, const double * in0, const int32_t * in1, double ** out) { jit::vect::binary<jit::functors::sub<double, bool, double>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<double>(out)); }
void sub_UdUc(const int64_t size, const double * in0, const double * in1_re, const double * in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::sub<double, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void sub_UdUd(const int64_t size, const double * in0, const double * in1, double ** out) { jit::vect::binary<jit::functors::sub<double, double, double>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<double>(out)); }
void sub_UdUi16(const int64_t size, const double * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::sub<double, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void sub_UdUi32(const int64_t size, const double * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::sub<double, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void sub_UdUi64(const int64_t size, const double * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::sub<double, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void sub_UdUi8(const int64_t size, const double * in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::sub<double, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void sub_UdUui16(const int64_t size, const double * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<double, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_UdUui32(const int64_t size, const double * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<double, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_UdUui64(const int64_t size, const double * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<double, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_UdUui8(const int64_t size, const double * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::sub<double, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void sub_Ui16Ub(const int64_t size, const int16_t * in0, const int32_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::sub<int16_t, bool, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void sub_Ui16Ud(const int64_t size, const int16_t * in0, const double * in1, int16_t ** out) { jit::vect::binary<jit::functors::sub<int16_t, double, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void sub_Ui16Ui16(const int64_t size, const int16_t * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::sub<int16_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void sub_Ui16Ui32(const int64_t size, const int16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::sub<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void sub_Ui16Ui64(const int64_t size, const int16_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::sub<int16_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void sub_Ui16Ui8(const int64_t size, const int16_t * in0, const int8_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::sub<int16_t, int8_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void sub_Ui16Uui16(const int64_t size, const int16_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<int16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_Ui16Uui32(const int64_t size, const int16_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<int16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Ui16Uui64(const int64_t size, const int16_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<int16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Ui16Uui8(const int64_t size, const int16_t * in0, const uint8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<int16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_Ui32Ub(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::sub<int32_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void sub_Ui32Ud(const int64_t size, const int32_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::sub<int32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void sub_Ui32Ui16(const int64_t size, const int32_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::sub<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void sub_Ui32Ui32(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::sub<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void sub_Ui32Ui64(const int64_t size, const int32_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::sub<int32_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void sub_Ui32Ui8(const int64_t size, const int32_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::sub<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void sub_Ui32Uui16(const int64_t size, const int32_t * in0, const uint16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<int32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Ui32Uui32(const int64_t size, const int32_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<int32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Ui32Uui64(const int64_t size, const int32_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<int32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Ui32Uui8(const int64_t size, const int32_t * in0, const uint8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<int32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Ui64Ub(const int64_t size, const int64_t * in0, const int32_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::sub<int64_t, bool, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void sub_Ui64Ud(const int64_t size, const int64_t * in0, const double * in1, int64_t ** out) { jit::vect::binary<jit::functors::sub<int64_t, double, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void sub_Ui64Ui16(const int64_t size, const int64_t * in0, const int16_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::sub<int64_t, int16_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void sub_Ui64Ui32(const int64_t size, const int64_t * in0, const int32_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::sub<int64_t, int32_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void sub_Ui64Ui64(const int64_t size, const int64_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::sub<int64_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void sub_Ui64Ui8(const int64_t size, const int64_t * in0, const int8_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::sub<int64_t, int8_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void sub_Ui64Uui16(const int64_t size, const int64_t * in0, const uint16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<int64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Ui64Uui32(const int64_t size, const int64_t * in0, const uint32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<int64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Ui64Uui64(const int64_t size, const int64_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<int64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Ui64Uui8(const int64_t size, const int64_t * in0, const uint8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<int64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Ui8Ub(const int64_t size, const int8_t * in0, const int32_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::sub<int8_t, bool, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void sub_Ui8Ud(const int64_t size, const int8_t * in0, const double * in1, int8_t ** out) { jit::vect::binary<jit::functors::sub<int8_t, double, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void sub_Ui8Ui16(const int64_t size, const int8_t * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::sub<int8_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void sub_Ui8Ui32(const int64_t size, const int8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::sub<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void sub_Ui8Ui64(const int64_t size, const int8_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::sub<int8_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void sub_Ui8Ui8(const int64_t size, const int8_t * in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::sub<int8_t, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void sub_Ui8Uui16(const int64_t size, const int8_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<int8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_Ui8Uui32(const int64_t size, const int8_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<int8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Ui8Uui64(const int64_t size, const int8_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<int8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Ui8Uui8(const int64_t size, const int8_t * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::sub<int8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void sub_Uui16Ub(const int64_t size, const uint16_t * in0, const int32_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<uint16_t, bool, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_Uui16Ud(const int64_t size, const uint16_t * in0, const double * in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<uint16_t, double, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_Uui16Ui16(const int64_t size, const uint16_t * in0, const int16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<uint16_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_Uui16Ui32(const int64_t size, const uint16_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint16_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Uui16Ui64(const int64_t size, const uint16_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint16_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Uui16Ui8(const int64_t size, const uint16_t * in0, const int8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<uint16_t, int8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_Uui16Uui16(const int64_t size, const uint16_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<uint16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_Uui16Uui32(const int64_t size, const uint16_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Uui16Uui64(const int64_t size, const uint16_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Uui16Uui8(const int64_t size, const uint16_t * in0, const uint8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<uint16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_Uui32Ub(const int64_t size, const uint32_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint32_t, bool, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Uui32Ud(const int64_t size, const uint32_t * in0, const double * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint32_t, double, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Uui32Ui16(const int64_t size, const uint32_t * in0, const int16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint32_t, int16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Uui32Ui32(const int64_t size, const uint32_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint32_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Uui32Ui64(const int64_t size, const uint32_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint32_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Uui32Ui8(const int64_t size, const uint32_t * in0, const int8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint32_t, int8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Uui32Uui16(const int64_t size, const uint32_t * in0, const uint16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Uui32Uui32(const int64_t size, const uint32_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Uui32Uui64(const int64_t size, const uint32_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Uui32Uui8(const int64_t size, const uint32_t * in0, const uint8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Uui64Ub(const int64_t size, const uint64_t * in0, const int32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint64_t, bool, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Uui64Ud(const int64_t size, const uint64_t * in0, const double * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint64_t, double, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Uui64Ui16(const int64_t size, const uint64_t * in0, const int16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint64_t, int16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Uui64Ui32(const int64_t size, const uint64_t * in0, const int32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint64_t, int32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Uui64Ui64(const int64_t size, const uint64_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint64_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Uui64Ui8(const int64_t size, const uint64_t * in0, const int8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint64_t, int8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Uui64Uui16(const int64_t size, const uint64_t * in0, const uint16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Uui64Uui32(const int64_t size, const uint64_t * in0, const uint32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Uui64Uui64(const int64_t size, const uint64_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Uui64Uui8(const int64_t size, const uint64_t * in0, const uint8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Uui8Ub(const int64_t size, const uint8_t * in0, const int32_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::sub<uint8_t, bool, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void sub_Uui8Ud(const int64_t size, const uint8_t * in0, const double * in1, uint8_t ** out) { jit::vect::binary<jit::functors::sub<uint8_t, double, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void sub_Uui8Ui16(const int64_t size, const uint8_t * in0, const int16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<uint8_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_Uui8Ui32(const int64_t size, const uint8_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint8_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Uui8Ui64(const int64_t size, const uint8_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint8_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Uui8Ui8(const int64_t size, const uint8_t * in0, const int8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::sub<uint8_t, int8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void sub_Uui8Uui16(const int64_t size, const uint8_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::sub<uint8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void sub_Uui8Uui32(const int64_t size, const uint8_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::sub<uint8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void sub_Uui8Uui64(const int64_t size, const uint8_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::sub<uint8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void sub_Uui8Uui8(const int64_t size, const uint8_t * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::sub<uint8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void sinh_Mc(const int64_t size, const double * in0_re, const double * in0_im, double ** out_re, double ** out_im) { jit::vect::unary<jit::functors::sinh<const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void sinh_Md(const int64_t size, const double * in0, double ** out) { jit::vect::unary<jit::functors::sinh<double, double>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapOut<double>(out)); }
void sign_Mc(const int64_t size, const double * in0_re, const double * in0_im, double ** out_re, double ** out_im) { jit::vect::unary<jit::functors::sign<const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void sign_Md(const int64_t size, const double * in0, double ** out) { jit::vect::unary<jit::functors::sign<double, double>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapOut<double>(out)); }
void sign_Mi16(const int64_t size, const int16_t * in0, int16_t ** out) { jit::vect::unary<jit::functors::sign<int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapOut<int16_t>(out)); }
void sign_Mi32(const int64_t size, const int32_t * in0, int32_t ** out) { jit::vect::unary<jit::functors::sign<int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapOut<int32_t>(out)); }
void sign_Mi64(const int64_t size, const int64_t * in0, int64_t ** out) { jit::vect::unary<jit::functors::sign<int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapOut<int64_t>(out)); }
void sign_Mi8(const int64_t size, const int8_t * in0, int8_t ** out) { jit::vect::unary<jit::functors::sign<int8_t, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapOut<int8_t>(out)); }
void sign_Mui16(const int64_t size, const uint16_t * in0, uint16_t ** out) { jit::vect::unary<jit::functors::sign<uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapOut<uint16_t>(out)); }
void sign_Mui32(const int64_t size, const uint32_t * in0, uint32_t ** out) { jit::vect::unary<jit::functors::sign<uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapOut<uint32_t>(out)); }
void sign_Mui64(const int64_t size, const uint64_t * in0, uint64_t ** out) { jit::vect::unary<jit::functors::sign<uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapOut<uint64_t>(out)); }
void sign_Mui8(const int64_t size, const uint8_t * in0, uint8_t ** out) { jit::vect::unary<jit::functors::sign<uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapOut<uint8_t>(out)); }
void int8_Md(const int64_t size, const double * in0, int8_t ** out) { jit::vect::unary<jit::functors::int8<double, int8_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapOut<int8_t>(out)); }
void int8_Mi16(const int64_t size, const int16_t * in0, int8_t ** out) { jit::vect::unary<jit::functors::int8<int16_t, int8_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapOut<int8_t>(out)); }
void int8_Mi32(const int64_t size, const int32_t * in0, int8_t ** out) { jit::vect::unary<jit::functors::int8<int32_t, int8_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapOut<int8_t>(out)); }
void int8_Mi64(const int64_t size, const int64_t * in0, int8_t ** out) { jit::vect::unary<jit::functors::int8<int64_t, int8_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapOut<int8_t>(out)); }
void int8_Mi8(const int64_t size, const int8_t * in0, int8_t ** out) { jit::vect::unary<jit::functors::int8<int8_t, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapOut<int8_t>(out)); }
void int8_Mui16(const int64_t size, const uint16_t * in0, int8_t ** out) { jit::vect::unary<jit::functors::int8<uint16_t, int8_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapOut<int8_t>(out)); }
void int8_Mui32(const int64_t size, const uint32_t * in0, int8_t ** out) { jit::vect::unary<jit::functors::int8<uint32_t, int8_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapOut<int8_t>(out)); }
void int8_Mui64(const int64_t size, const uint64_t * in0, int8_t ** out) { jit::vect::unary<jit::functors::int8<uint64_t, int8_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapOut<int8_t>(out)); }
void int8_Mui8(const int64_t size, const uint8_t * in0, int8_t ** out) { jit::vect::unary<jit::functors::int8<uint8_t, int8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapOut<int8_t>(out)); }
void cos_Mc(const int64_t size, const double * in0_re, const double * in0_im, double ** out_re, double ** out_im) { jit::vect::unary<jit::functors::cos<const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void cos_Md(const int64_t size, const double * in0, double ** out) { jit::vect::unary<jit::functors::cos<double, double>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapOut<double>(out)); }
void opp_Mc(const int64_t size, const double * in0_re, const double * in0_im, double ** out_re, double ** out_im) { jit::vect::unary<jit::functors::opp<const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void opp_Md(const int64_t size, const double * in0, double ** out) { jit::vect::unary<jit::functors::opp<double, double>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapOut<double>(out)); }
void opp_Mi16(const int64_t size, const int16_t * in0, int16_t ** out) { jit::vect::unary<jit::functors::opp<int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapOut<int16_t>(out)); }
void opp_Mi32(const int64_t size, const int32_t * in0, int32_t ** out) { jit::vect::unary<jit::functors::opp<int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapOut<int32_t>(out)); }
void opp_Mi64(const int64_t size, const int64_t * in0, int64_t ** out) { jit::vect::unary<jit::functors::opp<int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapOut<int64_t>(out)); }
void opp_Mi8(const int64_t size, const int8_t * in0, int8_t ** out) { jit::vect::unary<jit::functors::opp<int8_t, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapOut<int8_t>(out)); }
void opp_Mui16(const int64_t size, const uint16_t * in0, uint16_t ** out) { jit::vect::unary<jit::functors::opp<uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapOut<uint16_t>(out)); }
void opp_Mui32(const int64_t size, const uint32_t * in0, uint32_t ** out) { jit::vect::unary<jit::functors::opp<uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapOut<uint32_t>(out)); }
void opp_Mui64(const int64_t size, const uint64_t * in0, uint64_t ** out) { jit::vect::unary<jit::functors::opp<uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapOut<uint64_t>(out)); }
void opp_Mui8(const int64_t size, const uint8_t * in0, uint8_t ** out) { jit::vect::unary<jit::functors::opp<uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapOut<uint8_t>(out)); }
void tanh_Mc(const int64_t size, const double * in0_re, const double * in0_im, double ** out_re, double ** out_im) { jit::vect::unary<jit::functors::tanh<const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void tanh_Md(const int64_t size, const double * in0, double ** out) { jit::vect::unary<jit::functors::tanh<double, double>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapOut<double>(out)); }
void add_MbMb(const int64_t size, const int32_t * in0, const int32_t * in1, double ** out) { jit::vect::binary<jit::functors::add<bool, bool, double>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<double>(out)); }
void add_MbMc(const int64_t size, const int32_t * in0, const double * in1_re, const double * in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::add<bool, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void add_MbMd(const int64_t size, const int32_t * in0, const double * in1, double ** out) { jit::vect::binary<jit::functors::add<bool, double, double>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<double>(out)); }
void add_MbMi16(const int64_t size, const int32_t * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::add<bool, int16_t, int16_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void add_MbMi32(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::add<bool, int32_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void add_MbMi64(const int64_t size, const int32_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::add<bool, int64_t, int64_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void add_MbMi8(const int64_t size, const int32_t * in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::add<bool, int8_t, int8_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void add_MbMui16(const int64_t size, const int32_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<bool, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_MbMui32(const int64_t size, const int32_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<bool, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_MbMui64(const int64_t size, const int32_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<bool, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_MbMui8(const int64_t size, const int32_t * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::add<bool, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void add_MbSb(const int64_t size, const int32_t * in0, const int32_t in1, double ** out) { jit::vect::binary<jit::functors::add<bool, bool, double>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<double>(out)); }
void add_MbSc(const int64_t size, const int32_t * in0, const double in1_re, const double in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::add<bool, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<jit::cpx_t>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void add_MbSd(const int64_t size, const int32_t * in0, const double in1, double ** out) { jit::vect::binary<jit::functors::add<bool, double, double>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<double>(out)); }
void add_MbSi16(const int64_t size, const int32_t * in0, const int16_t in1, int16_t ** out) { jit::vect::binary<jit::functors::add<bool, int16_t, int16_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int16_t>(out)); }
void add_MbSi32(const int64_t size, const int32_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::add<bool, int32_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void add_MbSi64(const int64_t size, const int32_t * in0, const int64_t in1, int64_t ** out) { jit::vect::binary<jit::functors::add<bool, int64_t, int64_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void add_MbSi8(const int64_t size, const int32_t * in0, const int8_t in1, int8_t ** out) { jit::vect::binary<jit::functors::add<bool, int8_t, int8_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int8_t>(out)); }
void add_MbSui16(const int64_t size, const int32_t * in0, const uint16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<bool, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_MbSui32(const int64_t size, const int32_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<bool, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_MbSui64(const int64_t size, const int32_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<bool, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_MbSui8(const int64_t size, const int32_t * in0, const uint8_t in1, uint8_t ** out) { jit::vect::binary<jit::functors::add<bool, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void add_McMb(const int64_t size, const double * in0_re, const double * in0_im, const int32_t * in1, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::add<const jit::cpx_t &, bool, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void add_McMc(const int64_t size, const double * in0_re, const double * in0_im, const double * in1_re, const double * in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::add<const jit::cpx_t &, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void add_McMd(const int64_t size, const double * in0_re, const double * in0_im, const double * in1, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::add<const jit::cpx_t &, double, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void add_McSb(const int64_t size, const double * in0_re, const double * in0_im, const int32_t in1, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::add<const jit::cpx_t &, bool, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void add_McSc(const int64_t size, const double * in0_re, const double * in0_im, const double in1_re, const double in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::add<const jit::cpx_t &, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<jit::cpx_t>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void add_McSd(const int64_t size, const double * in0_re, const double * in0_im, const double in1, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::add<const jit::cpx_t &, double, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void add_MdMb(const int64_t size, const double * in0, const int32_t * in1, double ** out) { jit::vect::binary<jit::functors::add<double, bool, double>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<double>(out)); }
void add_MdMc(const int64_t size, const double * in0, const double * in1_re, const double * in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::add<double, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void add_MdMd(const int64_t size, const double * in0, const double * in1, double ** out) { jit::vect::binary<jit::functors::add<double, double, double>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<double>(out)); }
void add_MdMi16(const int64_t size, const double * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::add<double, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void add_MdMi32(const int64_t size, const double * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::add<double, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void add_MdMi64(const int64_t size, const double * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::add<double, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void add_MdMi8(const int64_t size, const double * in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::add<double, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void add_MdMui16(const int64_t size, const double * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<double, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_MdMui32(const int64_t size, const double * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<double, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_MdMui64(const int64_t size, const double * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<double, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_MdMui8(const int64_t size, const double * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::add<double, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void add_MdSb(const int64_t size, const double * in0, const int32_t in1, double ** out) { jit::vect::binary<jit::functors::add<double, bool, double>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<double>(out)); }
void add_MdSc(const int64_t size, const double * in0, const double in1_re, const double in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::add<double, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<jit::cpx_t>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void add_MdSd(const int64_t size, const double * in0, const double in1, double ** out) { jit::vect::binary<jit::functors::add<double, double, double>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<double>(out)); }
void add_MdSi16(const int64_t size, const double * in0, const int16_t in1, int16_t ** out) { jit::vect::binary<jit::functors::add<double, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int16_t>(out)); }
void add_MdSi32(const int64_t size, const double * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::add<double, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void add_MdSi64(const int64_t size, const double * in0, const int64_t in1, int64_t ** out) { jit::vect::binary<jit::functors::add<double, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void add_MdSi8(const int64_t size, const double * in0, const int8_t in1, int8_t ** out) { jit::vect::binary<jit::functors::add<double, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int8_t>(out)); }
void add_MdSui16(const int64_t size, const double * in0, const uint16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<double, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_MdSui32(const int64_t size, const double * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<double, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_MdSui64(const int64_t size, const double * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<double, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_MdSui8(const int64_t size, const double * in0, const uint8_t in1, uint8_t ** out) { jit::vect::binary<jit::functors::add<double, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void add_Mi16Mb(const int64_t size, const int16_t * in0, const int32_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::add<int16_t, bool, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void add_Mi16Md(const int64_t size, const int16_t * in0, const double * in1, int16_t ** out) { jit::vect::binary<jit::functors::add<int16_t, double, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void add_Mi16Mi16(const int64_t size, const int16_t * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::add<int16_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void add_Mi16Mi32(const int64_t size, const int16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::add<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void add_Mi16Mi64(const int64_t size, const int16_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::add<int16_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void add_Mi16Mi8(const int64_t size, const int16_t * in0, const int8_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::add<int16_t, int8_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void add_Mi16Mui16(const int64_t size, const int16_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<int16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_Mi16Mui32(const int64_t size, const int16_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<int16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Mi16Mui64(const int64_t size, const int16_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<int16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mi16Mui8(const int64_t size, const int16_t * in0, const uint8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<int16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_Mi16Sb(const int64_t size, const int16_t * in0, const int32_t in1, int16_t ** out) { jit::vect::binary<jit::functors::add<int16_t, bool, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<int16_t>(out)); }
void add_Mi16Sd(const int64_t size, const int16_t * in0, const double in1, int16_t ** out) { jit::vect::binary<jit::functors::add<int16_t, double, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int16_t>(out)); }
void add_Mi16Si16(const int64_t size, const int16_t * in0, const int16_t in1, int16_t ** out) { jit::vect::binary<jit::functors::add<int16_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int16_t>(out)); }
void add_Mi16Si32(const int64_t size, const int16_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::add<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void add_Mi16Si64(const int64_t size, const int16_t * in0, const int64_t in1, int64_t ** out) { jit::vect::binary<jit::functors::add<int16_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void add_Mi16Si8(const int64_t size, const int16_t * in0, const int8_t in1, int16_t ** out) { jit::vect::binary<jit::functors::add<int16_t, int8_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int16_t>(out)); }
void add_Mi16Sui16(const int64_t size, const int16_t * in0, const uint16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<int16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_Mi16Sui32(const int64_t size, const int16_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<int16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Mi16Sui64(const int64_t size, const int16_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<int16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mi16Sui8(const int64_t size, const int16_t * in0, const uint8_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<int16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_Mi32Mb(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::add<int32_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void add_Mi32Md(const int64_t size, const int32_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::add<int32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void add_Mi32Mi16(const int64_t size, const int32_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::add<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void add_Mi32Mi32(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::add<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void add_Mi32Mi64(const int64_t size, const int32_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::add<int32_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void add_Mi32Mi8(const int64_t size, const int32_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::add<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void add_Mi32Mui16(const int64_t size, const int32_t * in0, const uint16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<int32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Mi32Mui32(const int64_t size, const int32_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<int32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Mi32Mui64(const int64_t size, const int32_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<int32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mi32Mui8(const int64_t size, const int32_t * in0, const uint8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<int32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Mi32Sb(const int64_t size, const int32_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::add<int32_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<int32_t>(out)); }
void add_Mi32Sd(const int64_t size, const int32_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::add<int32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void add_Mi32Si16(const int64_t size, const int32_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::add<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void add_Mi32Si32(const int64_t size, const int32_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::add<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void add_Mi32Si64(const int64_t size, const int32_t * in0, const int64_t in1, int64_t ** out) { jit::vect::binary<jit::functors::add<int32_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void add_Mi32Si8(const int64_t size, const int32_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::add<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void add_Mi32Sui16(const int64_t size, const int32_t * in0, const uint16_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<int32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Mi32Sui32(const int64_t size, const int32_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<int32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Mi32Sui64(const int64_t size, const int32_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<int32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mi32Sui8(const int64_t size, const int32_t * in0, const uint8_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<int32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Mi64Mb(const int64_t size, const int64_t * in0, const int32_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::add<int64_t, bool, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void add_Mi64Md(const int64_t size, const int64_t * in0, const double * in1, int64_t ** out) { jit::vect::binary<jit::functors::add<int64_t, double, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void add_Mi64Mi16(const int64_t size, const int64_t * in0, const int16_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::add<int64_t, int16_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void add_Mi64Mi32(const int64_t size, const int64_t * in0, const int32_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::add<int64_t, int32_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void add_Mi64Mi64(const int64_t size, const int64_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::add<int64_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void add_Mi64Mi8(const int64_t size, const int64_t * in0, const int8_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::add<int64_t, int8_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void add_Mi64Mui16(const int64_t size, const int64_t * in0, const uint16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<int64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mi64Mui32(const int64_t size, const int64_t * in0, const uint32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<int64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mi64Mui64(const int64_t size, const int64_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<int64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mi64Mui8(const int64_t size, const int64_t * in0, const uint8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<int64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mi64Sb(const int64_t size, const int64_t * in0, const int32_t in1, int64_t ** out) { jit::vect::binary<jit::functors::add<int64_t, bool, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<int64_t>(out)); }
void add_Mi64Sd(const int64_t size, const int64_t * in0, const double in1, int64_t ** out) { jit::vect::binary<jit::functors::add<int64_t, double, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int64_t>(out)); }
void add_Mi64Si16(const int64_t size, const int64_t * in0, const int16_t in1, int64_t ** out) { jit::vect::binary<jit::functors::add<int64_t, int16_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void add_Mi64Si32(const int64_t size, const int64_t * in0, const int32_t in1, int64_t ** out) { jit::vect::binary<jit::functors::add<int64_t, int32_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void add_Mi64Si64(const int64_t size, const int64_t * in0, const int64_t in1, int64_t ** out) { jit::vect::binary<jit::functors::add<int64_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void add_Mi64Si8(const int64_t size, const int64_t * in0, const int8_t in1, int64_t ** out) { jit::vect::binary<jit::functors::add<int64_t, int8_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void add_Mi64Sui16(const int64_t size, const int64_t * in0, const uint16_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<int64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mi64Sui32(const int64_t size, const int64_t * in0, const uint32_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<int64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mi64Sui64(const int64_t size, const int64_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<int64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mi64Sui8(const int64_t size, const int64_t * in0, const uint8_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<int64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mi8Mb(const int64_t size, const int8_t * in0, const int32_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::add<int8_t, bool, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void add_Mi8Md(const int64_t size, const int8_t * in0, const double * in1, int8_t ** out) { jit::vect::binary<jit::functors::add<int8_t, double, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void add_Mi8Mi16(const int64_t size, const int8_t * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::add<int8_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void add_Mi8Mi32(const int64_t size, const int8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::add<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void add_Mi8Mi64(const int64_t size, const int8_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::add<int8_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void add_Mi8Mi8(const int64_t size, const int8_t * in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::add<int8_t, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void add_Mi8Mui16(const int64_t size, const int8_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<int8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_Mi8Mui32(const int64_t size, const int8_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<int8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Mi8Mui64(const int64_t size, const int8_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<int8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mi8Mui8(const int64_t size, const int8_t * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::add<int8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void add_Mi8Sb(const int64_t size, const int8_t * in0, const int32_t in1, int8_t ** out) { jit::vect::binary<jit::functors::add<int8_t, bool, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<int8_t>(out)); }
void add_Mi8Sd(const int64_t size, const int8_t * in0, const double in1, int8_t ** out) { jit::vect::binary<jit::functors::add<int8_t, double, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int8_t>(out)); }
void add_Mi8Si16(const int64_t size, const int8_t * in0, const int16_t in1, int16_t ** out) { jit::vect::binary<jit::functors::add<int8_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int16_t>(out)); }
void add_Mi8Si32(const int64_t size, const int8_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::add<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void add_Mi8Si64(const int64_t size, const int8_t * in0, const int64_t in1, int64_t ** out) { jit::vect::binary<jit::functors::add<int8_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void add_Mi8Si8(const int64_t size, const int8_t * in0, const int8_t in1, int8_t ** out) { jit::vect::binary<jit::functors::add<int8_t, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int8_t>(out)); }
void add_Mi8Sui16(const int64_t size, const int8_t * in0, const uint16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<int8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_Mi8Sui32(const int64_t size, const int8_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<int8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Mi8Sui64(const int64_t size, const int8_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<int8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mi8Sui8(const int64_t size, const int8_t * in0, const uint8_t in1, uint8_t ** out) { jit::vect::binary<jit::functors::add<int8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void add_Mui16Mb(const int64_t size, const uint16_t * in0, const int32_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<uint16_t, bool, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_Mui16Md(const int64_t size, const uint16_t * in0, const double * in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<uint16_t, double, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_Mui16Mi16(const int64_t size, const uint16_t * in0, const int16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<uint16_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_Mui16Mi32(const int64_t size, const uint16_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint16_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Mui16Mi64(const int64_t size, const uint16_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint16_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mui16Mi8(const int64_t size, const uint16_t * in0, const int8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<uint16_t, int8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_Mui16Mui16(const int64_t size, const uint16_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<uint16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_Mui16Mui32(const int64_t size, const uint16_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Mui16Mui64(const int64_t size, const uint16_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mui16Mui8(const int64_t size, const uint16_t * in0, const uint8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<uint16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_Mui16Sb(const int64_t size, const uint16_t * in0, const int32_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<uint16_t, bool, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_Mui16Sd(const int64_t size, const uint16_t * in0, const double in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<uint16_t, double, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_Mui16Si16(const int64_t size, const uint16_t * in0, const int16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<uint16_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_Mui16Si32(const int64_t size, const uint16_t * in0, const int32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint16_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Mui16Si64(const int64_t size, const uint16_t * in0, const int64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint16_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mui16Si8(const int64_t size, const uint16_t * in0, const int8_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<uint16_t, int8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_Mui16Sui16(const int64_t size, const uint16_t * in0, const uint16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<uint16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_Mui16Sui32(const int64_t size, const uint16_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Mui16Sui64(const int64_t size, const uint16_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mui16Sui8(const int64_t size, const uint16_t * in0, const uint8_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<uint16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_Mui32Mb(const int64_t size, const uint32_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint32_t, bool, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Mui32Md(const int64_t size, const uint32_t * in0, const double * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint32_t, double, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Mui32Mi16(const int64_t size, const uint32_t * in0, const int16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint32_t, int16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Mui32Mi32(const int64_t size, const uint32_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint32_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Mui32Mi64(const int64_t size, const uint32_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint32_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mui32Mi8(const int64_t size, const uint32_t * in0, const int8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint32_t, int8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Mui32Mui16(const int64_t size, const uint32_t * in0, const uint16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Mui32Mui32(const int64_t size, const uint32_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Mui32Mui64(const int64_t size, const uint32_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mui32Mui8(const int64_t size, const uint32_t * in0, const uint8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Mui32Sb(const int64_t size, const uint32_t * in0, const int32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint32_t, bool, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Mui32Sd(const int64_t size, const uint32_t * in0, const double in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint32_t, double, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Mui32Si16(const int64_t size, const uint32_t * in0, const int16_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint32_t, int16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Mui32Si32(const int64_t size, const uint32_t * in0, const int32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint32_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Mui32Si64(const int64_t size, const uint32_t * in0, const int64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint32_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mui32Si8(const int64_t size, const uint32_t * in0, const int8_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint32_t, int8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Mui32Sui16(const int64_t size, const uint32_t * in0, const uint16_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Mui32Sui32(const int64_t size, const uint32_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Mui32Sui64(const int64_t size, const uint32_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mui32Sui8(const int64_t size, const uint32_t * in0, const uint8_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Mui64Mb(const int64_t size, const uint64_t * in0, const int32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint64_t, bool, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mui64Md(const int64_t size, const uint64_t * in0, const double * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint64_t, double, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mui64Mi16(const int64_t size, const uint64_t * in0, const int16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint64_t, int16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mui64Mi32(const int64_t size, const uint64_t * in0, const int32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint64_t, int32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mui64Mi64(const int64_t size, const uint64_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint64_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mui64Mi8(const int64_t size, const uint64_t * in0, const int8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint64_t, int8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mui64Mui16(const int64_t size, const uint64_t * in0, const uint16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mui64Mui32(const int64_t size, const uint64_t * in0, const uint32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mui64Mui64(const int64_t size, const uint64_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mui64Mui8(const int64_t size, const uint64_t * in0, const uint8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mui64Sb(const int64_t size, const uint64_t * in0, const int32_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint64_t, bool, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mui64Sd(const int64_t size, const uint64_t * in0, const double in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint64_t, double, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mui64Si16(const int64_t size, const uint64_t * in0, const int16_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint64_t, int16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mui64Si32(const int64_t size, const uint64_t * in0, const int32_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint64_t, int32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mui64Si64(const int64_t size, const uint64_t * in0, const int64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint64_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mui64Si8(const int64_t size, const uint64_t * in0, const int8_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint64_t, int8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mui64Sui16(const int64_t size, const uint64_t * in0, const uint16_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mui64Sui32(const int64_t size, const uint64_t * in0, const uint32_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mui64Sui64(const int64_t size, const uint64_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mui64Sui8(const int64_t size, const uint64_t * in0, const uint8_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mui8Mb(const int64_t size, const uint8_t * in0, const int32_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::add<uint8_t, bool, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void add_Mui8Md(const int64_t size, const uint8_t * in0, const double * in1, uint8_t ** out) { jit::vect::binary<jit::functors::add<uint8_t, double, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void add_Mui8Mi16(const int64_t size, const uint8_t * in0, const int16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<uint8_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_Mui8Mi32(const int64_t size, const uint8_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint8_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Mui8Mi64(const int64_t size, const uint8_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint8_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mui8Mi8(const int64_t size, const uint8_t * in0, const int8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::add<uint8_t, int8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void add_Mui8Mui16(const int64_t size, const uint8_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<uint8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_Mui8Mui32(const int64_t size, const uint8_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Mui8Mui64(const int64_t size, const uint8_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mui8Mui8(const int64_t size, const uint8_t * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::add<uint8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void add_Mui8Sb(const int64_t size, const uint8_t * in0, const int32_t in1, uint8_t ** out) { jit::vect::binary<jit::functors::add<uint8_t, bool, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void add_Mui8Sd(const int64_t size, const uint8_t * in0, const double in1, uint8_t ** out) { jit::vect::binary<jit::functors::add<uint8_t, double, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void add_Mui8Si16(const int64_t size, const uint8_t * in0, const int16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<uint8_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_Mui8Si32(const int64_t size, const uint8_t * in0, const int32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint8_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Mui8Si64(const int64_t size, const uint8_t * in0, const int64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint8_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mui8Si8(const int64_t size, const uint8_t * in0, const int8_t in1, uint8_t ** out) { jit::vect::binary<jit::functors::add<uint8_t, int8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void add_Mui8Sui16(const int64_t size, const uint8_t * in0, const uint16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<uint8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_Mui8Sui32(const int64_t size, const uint8_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Mui8Sui64(const int64_t size, const uint8_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Mui8Sui8(const int64_t size, const uint8_t * in0, const uint8_t in1, uint8_t ** out) { jit::vect::binary<jit::functors::add<uint8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void add_SbMb(const int64_t size, const int32_t in0, const int32_t * in1, double ** out) { jit::vect::binary<jit::functors::add<bool, bool, double>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<double>(out)); }
void add_SbMc(const int64_t size, const int32_t in0, const double * in1_re, const double * in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::add<bool, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void add_SbMd(const int64_t size, const int32_t in0, const double * in1, double ** out) { jit::vect::binary<jit::functors::add<bool, double, double>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<double>(out)); }
void add_SbMi16(const int64_t size, const int32_t in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::add<bool, int16_t, int16_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void add_SbMi32(const int64_t size, const int32_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::add<bool, int32_t, int32_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void add_SbMi64(const int64_t size, const int32_t in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::add<bool, int64_t, int64_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void add_SbMi8(const int64_t size, const int32_t in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::add<bool, int8_t, int8_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void add_SbMui16(const int64_t size, const int32_t in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<bool, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_SbMui32(const int64_t size, const int32_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<bool, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_SbMui64(const int64_t size, const int32_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<bool, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_SbMui8(const int64_t size, const int32_t in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::add<bool, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void add_ScMb(const int64_t size, const double in0_re, const double in0_im, const int32_t * in1, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::add<const jit::cpx_t &, bool, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t>(in0_re, in0_im), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void add_ScMc(const int64_t size, const double in0_re, const double in0_im, const double * in1_re, const double * in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::add<const jit::cpx_t &, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t>(in0_re, in0_im), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void add_ScMd(const int64_t size, const double in0_re, const double in0_im, const double * in1, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::add<const jit::cpx_t &, double, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t>(in0_re, in0_im), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void add_SdMb(const int64_t size, const double in0, const int32_t * in1, double ** out) { jit::vect::binary<jit::functors::add<double, bool, double>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<double>(out)); }
void add_SdMc(const int64_t size, const double in0, const double * in1_re, const double * in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::add<double, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void add_SdMd(const int64_t size, const double in0, const double * in1, double ** out) { jit::vect::binary<jit::functors::add<double, double, double>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<double>(out)); }
void add_SdMi16(const int64_t size, const double in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::add<double, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void add_SdMi32(const int64_t size, const double in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::add<double, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void add_SdMi64(const int64_t size, const double in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::add<double, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void add_SdMi8(const int64_t size, const double in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::add<double, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void add_SdMui16(const int64_t size, const double in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<double, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_SdMui32(const int64_t size, const double in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<double, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_SdMui64(const int64_t size, const double in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<double, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_SdMui8(const int64_t size, const double in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::add<double, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void add_Si16Mb(const int64_t size, const int16_t in0, const int32_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::add<int16_t, bool, int16_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void add_Si16Md(const int64_t size, const int16_t in0, const double * in1, int16_t ** out) { jit::vect::binary<jit::functors::add<int16_t, double, int16_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void add_Si16Mi16(const int64_t size, const int16_t in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::add<int16_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void add_Si16Mi32(const int64_t size, const int16_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::add<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void add_Si16Mi64(const int64_t size, const int16_t in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::add<int16_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void add_Si16Mi8(const int64_t size, const int16_t in0, const int8_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::add<int16_t, int8_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void add_Si16Mui16(const int64_t size, const int16_t in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<int16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_Si16Mui32(const int64_t size, const int16_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<int16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Si16Mui64(const int64_t size, const int16_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<int16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Si16Mui8(const int64_t size, const int16_t in0, const uint8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<int16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_Si32Mb(const int64_t size, const int32_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::add<int32_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void add_Si32Md(const int64_t size, const int32_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::add<int32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void add_Si32Mi16(const int64_t size, const int32_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::add<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void add_Si32Mi32(const int64_t size, const int32_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::add<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void add_Si32Mi64(const int64_t size, const int32_t in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::add<int32_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void add_Si32Mi8(const int64_t size, const int32_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::add<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void add_Si32Mui16(const int64_t size, const int32_t in0, const uint16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<int32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Si32Mui32(const int64_t size, const int32_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<int32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Si32Mui64(const int64_t size, const int32_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<int32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Si32Mui8(const int64_t size, const int32_t in0, const uint8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<int32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Si64Mb(const int64_t size, const int64_t in0, const int32_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::add<int64_t, bool, int64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void add_Si64Md(const int64_t size, const int64_t in0, const double * in1, int64_t ** out) { jit::vect::binary<jit::functors::add<int64_t, double, int64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void add_Si64Mi16(const int64_t size, const int64_t in0, const int16_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::add<int64_t, int16_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void add_Si64Mi32(const int64_t size, const int64_t in0, const int32_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::add<int64_t, int32_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void add_Si64Mi64(const int64_t size, const int64_t in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::add<int64_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void add_Si64Mi8(const int64_t size, const int64_t in0, const int8_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::add<int64_t, int8_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void add_Si64Mui16(const int64_t size, const int64_t in0, const uint16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<int64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Si64Mui32(const int64_t size, const int64_t in0, const uint32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<int64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Si64Mui64(const int64_t size, const int64_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<int64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Si64Mui8(const int64_t size, const int64_t in0, const uint8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<int64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Si8Mb(const int64_t size, const int8_t in0, const int32_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::add<int8_t, bool, int8_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void add_Si8Md(const int64_t size, const int8_t in0, const double * in1, int8_t ** out) { jit::vect::binary<jit::functors::add<int8_t, double, int8_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void add_Si8Mi16(const int64_t size, const int8_t in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::add<int8_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void add_Si8Mi32(const int64_t size, const int8_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::add<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void add_Si8Mi64(const int64_t size, const int8_t in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::add<int8_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void add_Si8Mi8(const int64_t size, const int8_t in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::add<int8_t, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void add_Si8Mui16(const int64_t size, const int8_t in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<int8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_Si8Mui32(const int64_t size, const int8_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<int8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Si8Mui64(const int64_t size, const int8_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<int8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Si8Mui8(const int64_t size, const int8_t in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::add<int8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void add_Sui16Mb(const int64_t size, const uint16_t in0, const int32_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<uint16_t, bool, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_Sui16Md(const int64_t size, const uint16_t in0, const double * in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<uint16_t, double, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_Sui16Mi16(const int64_t size, const uint16_t in0, const int16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<uint16_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_Sui16Mi32(const int64_t size, const uint16_t in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint16_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Sui16Mi64(const int64_t size, const uint16_t in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint16_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Sui16Mi8(const int64_t size, const uint16_t in0, const int8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<uint16_t, int8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_Sui16Mui16(const int64_t size, const uint16_t in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<uint16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_Sui16Mui32(const int64_t size, const uint16_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Sui16Mui64(const int64_t size, const uint16_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Sui16Mui8(const int64_t size, const uint16_t in0, const uint8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<uint16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_Sui32Mb(const int64_t size, const uint32_t in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint32_t, bool, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Sui32Md(const int64_t size, const uint32_t in0, const double * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint32_t, double, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Sui32Mi16(const int64_t size, const uint32_t in0, const int16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint32_t, int16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Sui32Mi32(const int64_t size, const uint32_t in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint32_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Sui32Mi64(const int64_t size, const uint32_t in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint32_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Sui32Mi8(const int64_t size, const uint32_t in0, const int8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint32_t, int8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Sui32Mui16(const int64_t size, const uint32_t in0, const uint16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Sui32Mui32(const int64_t size, const uint32_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Sui32Mui64(const int64_t size, const uint32_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Sui32Mui8(const int64_t size, const uint32_t in0, const uint8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Sui64Mb(const int64_t size, const uint64_t in0, const int32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint64_t, bool, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Sui64Md(const int64_t size, const uint64_t in0, const double * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint64_t, double, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Sui64Mi16(const int64_t size, const uint64_t in0, const int16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint64_t, int16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Sui64Mi32(const int64_t size, const uint64_t in0, const int32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint64_t, int32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Sui64Mi64(const int64_t size, const uint64_t in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint64_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Sui64Mi8(const int64_t size, const uint64_t in0, const int8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint64_t, int8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Sui64Mui16(const int64_t size, const uint64_t in0, const uint16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Sui64Mui32(const int64_t size, const uint64_t in0, const uint32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Sui64Mui64(const int64_t size, const uint64_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Sui64Mui8(const int64_t size, const uint64_t in0, const uint8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Sui8Mb(const int64_t size, const uint8_t in0, const int32_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::add<uint8_t, bool, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void add_Sui8Md(const int64_t size, const uint8_t in0, const double * in1, uint8_t ** out) { jit::vect::binary<jit::functors::add<uint8_t, double, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void add_Sui8Mi16(const int64_t size, const uint8_t in0, const int16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<uint8_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_Sui8Mi32(const int64_t size, const uint8_t in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint8_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Sui8Mi64(const int64_t size, const uint8_t in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint8_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Sui8Mi8(const int64_t size, const uint8_t in0, const int8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::add<uint8_t, int8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void add_Sui8Mui16(const int64_t size, const uint8_t in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<uint8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_Sui8Mui32(const int64_t size, const uint8_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Sui8Mui64(const int64_t size, const uint8_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Sui8Mui8(const int64_t size, const uint8_t in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::add<uint8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void add_UbUb(const int64_t size, const int32_t * in0, const int32_t * in1, double ** out) { jit::vect::binary<jit::functors::add<bool, bool, double>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<double>(out)); }
void add_UbUc(const int64_t size, const int32_t * in0, const double * in1_re, const double * in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::add<bool, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void add_UbUd(const int64_t size, const int32_t * in0, const double * in1, double ** out) { jit::vect::binary<jit::functors::add<bool, double, double>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<double>(out)); }
void add_UbUi16(const int64_t size, const int32_t * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::add<bool, int16_t, int16_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void add_UbUi32(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::add<bool, int32_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void add_UbUi64(const int64_t size, const int32_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::add<bool, int64_t, int64_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void add_UbUi8(const int64_t size, const int32_t * in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::add<bool, int8_t, int8_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void add_UbUui16(const int64_t size, const int32_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<bool, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_UbUui32(const int64_t size, const int32_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<bool, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_UbUui64(const int64_t size, const int32_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<bool, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_UbUui8(const int64_t size, const int32_t * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::add<bool, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void add_UcUb(const int64_t size, const double * in0_re, const double * in0_im, const int32_t * in1, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::add<const jit::cpx_t &, bool, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void add_UcUc(const int64_t size, const double * in0_re, const double * in0_im, const double * in1_re, const double * in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::add<const jit::cpx_t &, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void add_UcUd(const int64_t size, const double * in0_re, const double * in0_im, const double * in1, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::add<const jit::cpx_t &, double, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void add_UdUb(const int64_t size, const double * in0, const int32_t * in1, double ** out) { jit::vect::binary<jit::functors::add<double, bool, double>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<double>(out)); }
void add_UdUc(const int64_t size, const double * in0, const double * in1_re, const double * in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::add<double, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void add_UdUd(const int64_t size, const double * in0, const double * in1, double ** out) { jit::vect::binary<jit::functors::add<double, double, double>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<double>(out)); }
void add_UdUi16(const int64_t size, const double * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::add<double, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void add_UdUi32(const int64_t size, const double * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::add<double, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void add_UdUi64(const int64_t size, const double * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::add<double, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void add_UdUi8(const int64_t size, const double * in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::add<double, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void add_UdUui16(const int64_t size, const double * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<double, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_UdUui32(const int64_t size, const double * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<double, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_UdUui64(const int64_t size, const double * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<double, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_UdUui8(const int64_t size, const double * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::add<double, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void add_Ui16Ub(const int64_t size, const int16_t * in0, const int32_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::add<int16_t, bool, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void add_Ui16Ud(const int64_t size, const int16_t * in0, const double * in1, int16_t ** out) { jit::vect::binary<jit::functors::add<int16_t, double, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void add_Ui16Ui16(const int64_t size, const int16_t * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::add<int16_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void add_Ui16Ui32(const int64_t size, const int16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::add<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void add_Ui16Ui64(const int64_t size, const int16_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::add<int16_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void add_Ui16Ui8(const int64_t size, const int16_t * in0, const int8_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::add<int16_t, int8_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void add_Ui16Uui16(const int64_t size, const int16_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<int16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_Ui16Uui32(const int64_t size, const int16_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<int16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Ui16Uui64(const int64_t size, const int16_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<int16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Ui16Uui8(const int64_t size, const int16_t * in0, const uint8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<int16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_Ui32Ub(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::add<int32_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void add_Ui32Ud(const int64_t size, const int32_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::add<int32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void add_Ui32Ui16(const int64_t size, const int32_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::add<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void add_Ui32Ui32(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::add<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void add_Ui32Ui64(const int64_t size, const int32_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::add<int32_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void add_Ui32Ui8(const int64_t size, const int32_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::add<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void add_Ui32Uui16(const int64_t size, const int32_t * in0, const uint16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<int32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Ui32Uui32(const int64_t size, const int32_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<int32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Ui32Uui64(const int64_t size, const int32_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<int32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Ui32Uui8(const int64_t size, const int32_t * in0, const uint8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<int32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Ui64Ub(const int64_t size, const int64_t * in0, const int32_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::add<int64_t, bool, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void add_Ui64Ud(const int64_t size, const int64_t * in0, const double * in1, int64_t ** out) { jit::vect::binary<jit::functors::add<int64_t, double, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void add_Ui64Ui16(const int64_t size, const int64_t * in0, const int16_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::add<int64_t, int16_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void add_Ui64Ui32(const int64_t size, const int64_t * in0, const int32_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::add<int64_t, int32_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void add_Ui64Ui64(const int64_t size, const int64_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::add<int64_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void add_Ui64Ui8(const int64_t size, const int64_t * in0, const int8_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::add<int64_t, int8_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void add_Ui64Uui16(const int64_t size, const int64_t * in0, const uint16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<int64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Ui64Uui32(const int64_t size, const int64_t * in0, const uint32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<int64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Ui64Uui64(const int64_t size, const int64_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<int64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Ui64Uui8(const int64_t size, const int64_t * in0, const uint8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<int64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Ui8Ub(const int64_t size, const int8_t * in0, const int32_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::add<int8_t, bool, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void add_Ui8Ud(const int64_t size, const int8_t * in0, const double * in1, int8_t ** out) { jit::vect::binary<jit::functors::add<int8_t, double, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void add_Ui8Ui16(const int64_t size, const int8_t * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::add<int8_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void add_Ui8Ui32(const int64_t size, const int8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::add<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void add_Ui8Ui64(const int64_t size, const int8_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::add<int8_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void add_Ui8Ui8(const int64_t size, const int8_t * in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::add<int8_t, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void add_Ui8Uui16(const int64_t size, const int8_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<int8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_Ui8Uui32(const int64_t size, const int8_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<int8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Ui8Uui64(const int64_t size, const int8_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<int8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Ui8Uui8(const int64_t size, const int8_t * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::add<int8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void add_Uui16Ub(const int64_t size, const uint16_t * in0, const int32_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<uint16_t, bool, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_Uui16Ud(const int64_t size, const uint16_t * in0, const double * in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<uint16_t, double, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_Uui16Ui16(const int64_t size, const uint16_t * in0, const int16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<uint16_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_Uui16Ui32(const int64_t size, const uint16_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint16_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Uui16Ui64(const int64_t size, const uint16_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint16_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Uui16Ui8(const int64_t size, const uint16_t * in0, const int8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<uint16_t, int8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_Uui16Uui16(const int64_t size, const uint16_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<uint16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_Uui16Uui32(const int64_t size, const uint16_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Uui16Uui64(const int64_t size, const uint16_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Uui16Uui8(const int64_t size, const uint16_t * in0, const uint8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<uint16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_Uui32Ub(const int64_t size, const uint32_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint32_t, bool, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Uui32Ud(const int64_t size, const uint32_t * in0, const double * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint32_t, double, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Uui32Ui16(const int64_t size, const uint32_t * in0, const int16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint32_t, int16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Uui32Ui32(const int64_t size, const uint32_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint32_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Uui32Ui64(const int64_t size, const uint32_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint32_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Uui32Ui8(const int64_t size, const uint32_t * in0, const int8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint32_t, int8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Uui32Uui16(const int64_t size, const uint32_t * in0, const uint16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Uui32Uui32(const int64_t size, const uint32_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Uui32Uui64(const int64_t size, const uint32_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Uui32Uui8(const int64_t size, const uint32_t * in0, const uint8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Uui64Ub(const int64_t size, const uint64_t * in0, const int32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint64_t, bool, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Uui64Ud(const int64_t size, const uint64_t * in0, const double * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint64_t, double, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Uui64Ui16(const int64_t size, const uint64_t * in0, const int16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint64_t, int16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Uui64Ui32(const int64_t size, const uint64_t * in0, const int32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint64_t, int32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Uui64Ui64(const int64_t size, const uint64_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint64_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Uui64Ui8(const int64_t size, const uint64_t * in0, const int8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint64_t, int8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Uui64Uui16(const int64_t size, const uint64_t * in0, const uint16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Uui64Uui32(const int64_t size, const uint64_t * in0, const uint32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Uui64Uui64(const int64_t size, const uint64_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Uui64Uui8(const int64_t size, const uint64_t * in0, const uint8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Uui8Ub(const int64_t size, const uint8_t * in0, const int32_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::add<uint8_t, bool, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void add_Uui8Ud(const int64_t size, const uint8_t * in0, const double * in1, uint8_t ** out) { jit::vect::binary<jit::functors::add<uint8_t, double, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void add_Uui8Ui16(const int64_t size, const uint8_t * in0, const int16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<uint8_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_Uui8Ui32(const int64_t size, const uint8_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint8_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Uui8Ui64(const int64_t size, const uint8_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint8_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Uui8Ui8(const int64_t size, const uint8_t * in0, const int8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::add<uint8_t, int8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void add_Uui8Uui16(const int64_t size, const uint8_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::add<uint8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void add_Uui8Uui32(const int64_t size, const uint8_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::add<uint8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void add_Uui8Uui64(const int64_t size, const uint8_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::add<uint8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void add_Uui8Uui8(const int64_t size, const uint8_t * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::add<uint8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dottimes_MbMb(const int64_t size, const int32_t * in0, const int32_t * in1, double ** out) { jit::vect::binary<jit::functors::dottimes<bool, bool, double>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<double>(out)); }
void dottimes_MbMc(const int64_t size, const int32_t * in0, const double * in1_re, const double * in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dottimes<bool, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dottimes_MbMd(const int64_t size, const int32_t * in0, const double * in1, double ** out) { jit::vect::binary<jit::functors::dottimes<bool, double, double>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<double>(out)); }
void dottimes_MbMi16(const int64_t size, const int32_t * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dottimes<bool, int16_t, int16_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dottimes_MbMi32(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dottimes<bool, int32_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dottimes_MbMi64(const int64_t size, const int32_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dottimes<bool, int64_t, int64_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dottimes_MbMi8(const int64_t size, const int32_t * in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::dottimes<bool, int8_t, int8_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dottimes_MbMui16(const int64_t size, const int32_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<bool, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_MbMui32(const int64_t size, const int32_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<bool, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_MbMui64(const int64_t size, const int32_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<bool, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_MbMui8(const int64_t size, const int32_t * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dottimes<bool, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dottimes_MbSb(const int64_t size, const int32_t * in0, const int32_t in1, double ** out) { jit::vect::binary<jit::functors::dottimes<bool, bool, double>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<double>(out)); }
void dottimes_MbSc(const int64_t size, const int32_t * in0, const double in1_re, const double in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dottimes<bool, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<jit::cpx_t>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dottimes_MbSd(const int64_t size, const int32_t * in0, const double in1, double ** out) { jit::vect::binary<jit::functors::dottimes<bool, double, double>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<double>(out)); }
void dottimes_MbSi16(const int64_t size, const int32_t * in0, const int16_t in1, int16_t ** out) { jit::vect::binary<jit::functors::dottimes<bool, int16_t, int16_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dottimes_MbSi32(const int64_t size, const int32_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::dottimes<bool, int32_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dottimes_MbSi64(const int64_t size, const int32_t * in0, const int64_t in1, int64_t ** out) { jit::vect::binary<jit::functors::dottimes<bool, int64_t, int64_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dottimes_MbSi8(const int64_t size, const int32_t * in0, const int8_t in1, int8_t ** out) { jit::vect::binary<jit::functors::dottimes<bool, int8_t, int8_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dottimes_MbSui16(const int64_t size, const int32_t * in0, const uint16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<bool, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_MbSui32(const int64_t size, const int32_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<bool, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_MbSui64(const int64_t size, const int32_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<bool, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_MbSui8(const int64_t size, const int32_t * in0, const uint8_t in1, uint8_t ** out) { jit::vect::binary<jit::functors::dottimes<bool, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dottimes_McMb(const int64_t size, const double * in0_re, const double * in0_im, const int32_t * in1, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dottimes<const jit::cpx_t &, bool, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dottimes_McMc(const int64_t size, const double * in0_re, const double * in0_im, const double * in1_re, const double * in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dottimes<const jit::cpx_t &, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dottimes_McMd(const int64_t size, const double * in0_re, const double * in0_im, const double * in1, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dottimes<const jit::cpx_t &, double, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dottimes_McSb(const int64_t size, const double * in0_re, const double * in0_im, const int32_t in1, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dottimes<const jit::cpx_t &, bool, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dottimes_McSc(const int64_t size, const double * in0_re, const double * in0_im, const double in1_re, const double in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dottimes<const jit::cpx_t &, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<jit::cpx_t>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dottimes_McSd(const int64_t size, const double * in0_re, const double * in0_im, const double in1, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dottimes<const jit::cpx_t &, double, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dottimes_MdMb(const int64_t size, const double * in0, const int32_t * in1, double ** out) { jit::vect::binary<jit::functors::dottimes<double, bool, double>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<double>(out)); }
void dottimes_MdMc(const int64_t size, const double * in0, const double * in1_re, const double * in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dottimes<double, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dottimes_MdMd(const int64_t size, const double * in0, const double * in1, double ** out) { jit::vect::binary<jit::functors::dottimes<double, double, double>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<double>(out)); }
void dottimes_MdMi16(const int64_t size, const double * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dottimes<double, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dottimes_MdMi32(const int64_t size, const double * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dottimes<double, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dottimes_MdMi64(const int64_t size, const double * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dottimes<double, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dottimes_MdMi8(const int64_t size, const double * in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::dottimes<double, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dottimes_MdMui16(const int64_t size, const double * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<double, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_MdMui32(const int64_t size, const double * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<double, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_MdMui64(const int64_t size, const double * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<double, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_MdMui8(const int64_t size, const double * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dottimes<double, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dottimes_MdSb(const int64_t size, const double * in0, const int32_t in1, double ** out) { jit::vect::binary<jit::functors::dottimes<double, bool, double>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<double>(out)); }
void dottimes_MdSc(const int64_t size, const double * in0, const double in1_re, const double in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dottimes<double, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<jit::cpx_t>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dottimes_MdSd(const int64_t size, const double * in0, const double in1, double ** out) { jit::vect::binary<jit::functors::dottimes<double, double, double>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<double>(out)); }
void dottimes_MdSi16(const int64_t size, const double * in0, const int16_t in1, int16_t ** out) { jit::vect::binary<jit::functors::dottimes<double, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dottimes_MdSi32(const int64_t size, const double * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::dottimes<double, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dottimes_MdSi64(const int64_t size, const double * in0, const int64_t in1, int64_t ** out) { jit::vect::binary<jit::functors::dottimes<double, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dottimes_MdSi8(const int64_t size, const double * in0, const int8_t in1, int8_t ** out) { jit::vect::binary<jit::functors::dottimes<double, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dottimes_MdSui16(const int64_t size, const double * in0, const uint16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<double, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_MdSui32(const int64_t size, const double * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<double, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_MdSui64(const int64_t size, const double * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<double, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_MdSui8(const int64_t size, const double * in0, const uint8_t in1, uint8_t ** out) { jit::vect::binary<jit::functors::dottimes<double, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dottimes_Mi16Mb(const int64_t size, const int16_t * in0, const int32_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dottimes<int16_t, bool, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dottimes_Mi16Md(const int64_t size, const int16_t * in0, const double * in1, int16_t ** out) { jit::vect::binary<jit::functors::dottimes<int16_t, double, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dottimes_Mi16Mi16(const int64_t size, const int16_t * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dottimes<int16_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dottimes_Mi16Mi32(const int64_t size, const int16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dottimes<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dottimes_Mi16Mi64(const int64_t size, const int16_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dottimes<int16_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dottimes_Mi16Mi8(const int64_t size, const int16_t * in0, const int8_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dottimes<int16_t, int8_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dottimes_Mi16Mui16(const int64_t size, const int16_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<int16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_Mi16Mui32(const int64_t size, const int16_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<int16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Mi16Mui64(const int64_t size, const int16_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<int16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mi16Mui8(const int64_t size, const int16_t * in0, const uint8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<int16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_Mi16Sb(const int64_t size, const int16_t * in0, const int32_t in1, int16_t ** out) { jit::vect::binary<jit::functors::dottimes<int16_t, bool, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dottimes_Mi16Sd(const int64_t size, const int16_t * in0, const double in1, int16_t ** out) { jit::vect::binary<jit::functors::dottimes<int16_t, double, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dottimes_Mi16Si16(const int64_t size, const int16_t * in0, const int16_t in1, int16_t ** out) { jit::vect::binary<jit::functors::dottimes<int16_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dottimes_Mi16Si32(const int64_t size, const int16_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::dottimes<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dottimes_Mi16Si64(const int64_t size, const int16_t * in0, const int64_t in1, int64_t ** out) { jit::vect::binary<jit::functors::dottimes<int16_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dottimes_Mi16Si8(const int64_t size, const int16_t * in0, const int8_t in1, int16_t ** out) { jit::vect::binary<jit::functors::dottimes<int16_t, int8_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dottimes_Mi16Sui16(const int64_t size, const int16_t * in0, const uint16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<int16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_Mi16Sui32(const int64_t size, const int16_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<int16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Mi16Sui64(const int64_t size, const int16_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<int16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mi16Sui8(const int64_t size, const int16_t * in0, const uint8_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<int16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_Mi32Mb(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dottimes<int32_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dottimes_Mi32Md(const int64_t size, const int32_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::dottimes<int32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dottimes_Mi32Mi16(const int64_t size, const int32_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dottimes<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dottimes_Mi32Mi32(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dottimes<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dottimes_Mi32Mi64(const int64_t size, const int32_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dottimes<int32_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dottimes_Mi32Mi8(const int64_t size, const int32_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dottimes<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dottimes_Mi32Mui16(const int64_t size, const int32_t * in0, const uint16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<int32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Mi32Mui32(const int64_t size, const int32_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<int32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Mi32Mui64(const int64_t size, const int32_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<int32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mi32Mui8(const int64_t size, const int32_t * in0, const uint8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<int32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Mi32Sb(const int64_t size, const int32_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::dottimes<int32_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dottimes_Mi32Sd(const int64_t size, const int32_t * in0, const double in1, int32_t ** out) { jit::vect::binary<jit::functors::dottimes<int32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dottimes_Mi32Si16(const int64_t size, const int32_t * in0, const int16_t in1, int32_t ** out) { jit::vect::binary<jit::functors::dottimes<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dottimes_Mi32Si32(const int64_t size, const int32_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::dottimes<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dottimes_Mi32Si64(const int64_t size, const int32_t * in0, const int64_t in1, int64_t ** out) { jit::vect::binary<jit::functors::dottimes<int32_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dottimes_Mi32Si8(const int64_t size, const int32_t * in0, const int8_t in1, int32_t ** out) { jit::vect::binary<jit::functors::dottimes<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dottimes_Mi32Sui16(const int64_t size, const int32_t * in0, const uint16_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<int32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Mi32Sui32(const int64_t size, const int32_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<int32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Mi32Sui64(const int64_t size, const int32_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<int32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mi32Sui8(const int64_t size, const int32_t * in0, const uint8_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<int32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Mi64Mb(const int64_t size, const int64_t * in0, const int32_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dottimes<int64_t, bool, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dottimes_Mi64Md(const int64_t size, const int64_t * in0, const double * in1, int64_t ** out) { jit::vect::binary<jit::functors::dottimes<int64_t, double, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dottimes_Mi64Mi16(const int64_t size, const int64_t * in0, const int16_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dottimes<int64_t, int16_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dottimes_Mi64Mi32(const int64_t size, const int64_t * in0, const int32_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dottimes<int64_t, int32_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dottimes_Mi64Mi64(const int64_t size, const int64_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dottimes<int64_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dottimes_Mi64Mi8(const int64_t size, const int64_t * in0, const int8_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dottimes<int64_t, int8_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dottimes_Mi64Mui16(const int64_t size, const int64_t * in0, const uint16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<int64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mi64Mui32(const int64_t size, const int64_t * in0, const uint32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<int64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mi64Mui64(const int64_t size, const int64_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<int64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mi64Mui8(const int64_t size, const int64_t * in0, const uint8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<int64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mi64Sb(const int64_t size, const int64_t * in0, const int32_t in1, int64_t ** out) { jit::vect::binary<jit::functors::dottimes<int64_t, bool, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dottimes_Mi64Sd(const int64_t size, const int64_t * in0, const double in1, int64_t ** out) { jit::vect::binary<jit::functors::dottimes<int64_t, double, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dottimes_Mi64Si16(const int64_t size, const int64_t * in0, const int16_t in1, int64_t ** out) { jit::vect::binary<jit::functors::dottimes<int64_t, int16_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dottimes_Mi64Si32(const int64_t size, const int64_t * in0, const int32_t in1, int64_t ** out) { jit::vect::binary<jit::functors::dottimes<int64_t, int32_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dottimes_Mi64Si64(const int64_t size, const int64_t * in0, const int64_t in1, int64_t ** out) { jit::vect::binary<jit::functors::dottimes<int64_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dottimes_Mi64Si8(const int64_t size, const int64_t * in0, const int8_t in1, int64_t ** out) { jit::vect::binary<jit::functors::dottimes<int64_t, int8_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dottimes_Mi64Sui16(const int64_t size, const int64_t * in0, const uint16_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<int64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mi64Sui32(const int64_t size, const int64_t * in0, const uint32_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<int64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mi64Sui64(const int64_t size, const int64_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<int64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mi64Sui8(const int64_t size, const int64_t * in0, const uint8_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<int64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mi8Mb(const int64_t size, const int8_t * in0, const int32_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::dottimes<int8_t, bool, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dottimes_Mi8Md(const int64_t size, const int8_t * in0, const double * in1, int8_t ** out) { jit::vect::binary<jit::functors::dottimes<int8_t, double, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dottimes_Mi8Mi16(const int64_t size, const int8_t * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dottimes<int8_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dottimes_Mi8Mi32(const int64_t size, const int8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dottimes<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dottimes_Mi8Mi64(const int64_t size, const int8_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dottimes<int8_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dottimes_Mi8Mi8(const int64_t size, const int8_t * in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::dottimes<int8_t, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dottimes_Mi8Mui16(const int64_t size, const int8_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<int8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_Mi8Mui32(const int64_t size, const int8_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<int8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Mi8Mui64(const int64_t size, const int8_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<int8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mi8Mui8(const int64_t size, const int8_t * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dottimes<int8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dottimes_Mi8Sb(const int64_t size, const int8_t * in0, const int32_t in1, int8_t ** out) { jit::vect::binary<jit::functors::dottimes<int8_t, bool, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dottimes_Mi8Sd(const int64_t size, const int8_t * in0, const double in1, int8_t ** out) { jit::vect::binary<jit::functors::dottimes<int8_t, double, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dottimes_Mi8Si16(const int64_t size, const int8_t * in0, const int16_t in1, int16_t ** out) { jit::vect::binary<jit::functors::dottimes<int8_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dottimes_Mi8Si32(const int64_t size, const int8_t * in0, const int32_t in1, int32_t ** out) { jit::vect::binary<jit::functors::dottimes<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dottimes_Mi8Si64(const int64_t size, const int8_t * in0, const int64_t in1, int64_t ** out) { jit::vect::binary<jit::functors::dottimes<int8_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dottimes_Mi8Si8(const int64_t size, const int8_t * in0, const int8_t in1, int8_t ** out) { jit::vect::binary<jit::functors::dottimes<int8_t, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dottimes_Mi8Sui16(const int64_t size, const int8_t * in0, const uint16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<int8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_Mi8Sui32(const int64_t size, const int8_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<int8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Mi8Sui64(const int64_t size, const int8_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<int8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mi8Sui8(const int64_t size, const int8_t * in0, const uint8_t in1, uint8_t ** out) { jit::vect::binary<jit::functors::dottimes<int8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dottimes_Mui16Mb(const int64_t size, const uint16_t * in0, const int32_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<uint16_t, bool, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_Mui16Md(const int64_t size, const uint16_t * in0, const double * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<uint16_t, double, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_Mui16Mi16(const int64_t size, const uint16_t * in0, const int16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<uint16_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_Mui16Mi32(const int64_t size, const uint16_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint16_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Mui16Mi64(const int64_t size, const uint16_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint16_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mui16Mi8(const int64_t size, const uint16_t * in0, const int8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<uint16_t, int8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_Mui16Mui16(const int64_t size, const uint16_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<uint16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_Mui16Mui32(const int64_t size, const uint16_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Mui16Mui64(const int64_t size, const uint16_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mui16Mui8(const int64_t size, const uint16_t * in0, const uint8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<uint16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_Mui16Sb(const int64_t size, const uint16_t * in0, const int32_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<uint16_t, bool, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_Mui16Sd(const int64_t size, const uint16_t * in0, const double in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<uint16_t, double, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_Mui16Si16(const int64_t size, const uint16_t * in0, const int16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<uint16_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_Mui16Si32(const int64_t size, const uint16_t * in0, const int32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint16_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Mui16Si64(const int64_t size, const uint16_t * in0, const int64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint16_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mui16Si8(const int64_t size, const uint16_t * in0, const int8_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<uint16_t, int8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_Mui16Sui16(const int64_t size, const uint16_t * in0, const uint16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<uint16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_Mui16Sui32(const int64_t size, const uint16_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Mui16Sui64(const int64_t size, const uint16_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mui16Sui8(const int64_t size, const uint16_t * in0, const uint8_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<uint16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_Mui32Mb(const int64_t size, const uint32_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint32_t, bool, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Mui32Md(const int64_t size, const uint32_t * in0, const double * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint32_t, double, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Mui32Mi16(const int64_t size, const uint32_t * in0, const int16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint32_t, int16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Mui32Mi32(const int64_t size, const uint32_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint32_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Mui32Mi64(const int64_t size, const uint32_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint32_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mui32Mi8(const int64_t size, const uint32_t * in0, const int8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint32_t, int8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Mui32Mui16(const int64_t size, const uint32_t * in0, const uint16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Mui32Mui32(const int64_t size, const uint32_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Mui32Mui64(const int64_t size, const uint32_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mui32Mui8(const int64_t size, const uint32_t * in0, const uint8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Mui32Sb(const int64_t size, const uint32_t * in0, const int32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint32_t, bool, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Mui32Sd(const int64_t size, const uint32_t * in0, const double in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint32_t, double, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Mui32Si16(const int64_t size, const uint32_t * in0, const int16_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint32_t, int16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Mui32Si32(const int64_t size, const uint32_t * in0, const int32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint32_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Mui32Si64(const int64_t size, const uint32_t * in0, const int64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint32_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mui32Si8(const int64_t size, const uint32_t * in0, const int8_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint32_t, int8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Mui32Sui16(const int64_t size, const uint32_t * in0, const uint16_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Mui32Sui32(const int64_t size, const uint32_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Mui32Sui64(const int64_t size, const uint32_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mui32Sui8(const int64_t size, const uint32_t * in0, const uint8_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Mui64Mb(const int64_t size, const uint64_t * in0, const int32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint64_t, bool, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mui64Md(const int64_t size, const uint64_t * in0, const double * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint64_t, double, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mui64Mi16(const int64_t size, const uint64_t * in0, const int16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint64_t, int16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mui64Mi32(const int64_t size, const uint64_t * in0, const int32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint64_t, int32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mui64Mi64(const int64_t size, const uint64_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint64_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mui64Mi8(const int64_t size, const uint64_t * in0, const int8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint64_t, int8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mui64Mui16(const int64_t size, const uint64_t * in0, const uint16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mui64Mui32(const int64_t size, const uint64_t * in0, const uint32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mui64Mui64(const int64_t size, const uint64_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mui64Mui8(const int64_t size, const uint64_t * in0, const uint8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mui64Sb(const int64_t size, const uint64_t * in0, const int32_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint64_t, bool, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mui64Sd(const int64_t size, const uint64_t * in0, const double in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint64_t, double, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mui64Si16(const int64_t size, const uint64_t * in0, const int16_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint64_t, int16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mui64Si32(const int64_t size, const uint64_t * in0, const int32_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint64_t, int32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mui64Si64(const int64_t size, const uint64_t * in0, const int64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint64_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mui64Si8(const int64_t size, const uint64_t * in0, const int8_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint64_t, int8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mui64Sui16(const int64_t size, const uint64_t * in0, const uint16_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mui64Sui32(const int64_t size, const uint64_t * in0, const uint32_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mui64Sui64(const int64_t size, const uint64_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mui64Sui8(const int64_t size, const uint64_t * in0, const uint8_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mui8Mb(const int64_t size, const uint8_t * in0, const int32_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dottimes<uint8_t, bool, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dottimes_Mui8Md(const int64_t size, const uint8_t * in0, const double * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dottimes<uint8_t, double, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dottimes_Mui8Mi16(const int64_t size, const uint8_t * in0, const int16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<uint8_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_Mui8Mi32(const int64_t size, const uint8_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint8_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Mui8Mi64(const int64_t size, const uint8_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint8_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mui8Mi8(const int64_t size, const uint8_t * in0, const int8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dottimes<uint8_t, int8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dottimes_Mui8Mui16(const int64_t size, const uint8_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<uint8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_Mui8Mui32(const int64_t size, const uint8_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Mui8Mui64(const int64_t size, const uint8_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mui8Mui8(const int64_t size, const uint8_t * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dottimes<uint8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dottimes_Mui8Sb(const int64_t size, const uint8_t * in0, const int32_t in1, uint8_t ** out) { jit::vect::binary<jit::functors::dottimes<uint8_t, bool, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<bool>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dottimes_Mui8Sd(const int64_t size, const uint8_t * in0, const double in1, uint8_t ** out) { jit::vect::binary<jit::functors::dottimes<uint8_t, double, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const double>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dottimes_Mui8Si16(const int64_t size, const uint8_t * in0, const int16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<uint8_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_Mui8Si32(const int64_t size, const uint8_t * in0, const int32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint8_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Mui8Si64(const int64_t size, const uint8_t * in0, const int64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint8_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mui8Si8(const int64_t size, const uint8_t * in0, const int8_t in1, uint8_t ** out) { jit::vect::binary<jit::functors::dottimes<uint8_t, int8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int8_t>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dottimes_Mui8Sui16(const int64_t size, const uint8_t * in0, const uint16_t in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<uint8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint16_t>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_Mui8Sui32(const int64_t size, const uint8_t * in0, const uint32_t in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint32_t>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Mui8Sui64(const int64_t size, const uint8_t * in0, const uint64_t in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint64_t>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Mui8Sui8(const int64_t size, const uint8_t * in0, const uint8_t in1, uint8_t ** out) { jit::vect::binary<jit::functors::dottimes<uint8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint8_t>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dottimes_SbMb(const int64_t size, const int32_t in0, const int32_t * in1, double ** out) { jit::vect::binary<jit::functors::dottimes<bool, bool, double>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<double>(out)); }
void dottimes_SbMc(const int64_t size, const int32_t in0, const double * in1_re, const double * in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dottimes<bool, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dottimes_SbMd(const int64_t size, const int32_t in0, const double * in1, double ** out) { jit::vect::binary<jit::functors::dottimes<bool, double, double>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<double>(out)); }
void dottimes_SbMi16(const int64_t size, const int32_t in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dottimes<bool, int16_t, int16_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dottimes_SbMi32(const int64_t size, const int32_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dottimes<bool, int32_t, int32_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dottimes_SbMi64(const int64_t size, const int32_t in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dottimes<bool, int64_t, int64_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dottimes_SbMi8(const int64_t size, const int32_t in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::dottimes<bool, int8_t, int8_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dottimes_SbMui16(const int64_t size, const int32_t in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<bool, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_SbMui32(const int64_t size, const int32_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<bool, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_SbMui64(const int64_t size, const int32_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<bool, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_SbMui8(const int64_t size, const int32_t in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dottimes<bool, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<bool>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dottimes_ScMb(const int64_t size, const double in0_re, const double in0_im, const int32_t * in1, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dottimes<const jit::cpx_t &, bool, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t>(in0_re, in0_im), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dottimes_ScMc(const int64_t size, const double in0_re, const double in0_im, const double * in1_re, const double * in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dottimes<const jit::cpx_t &, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t>(in0_re, in0_im), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dottimes_ScMd(const int64_t size, const double in0_re, const double in0_im, const double * in1, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dottimes<const jit::cpx_t &, double, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t>(in0_re, in0_im), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dottimes_SdMb(const int64_t size, const double in0, const int32_t * in1, double ** out) { jit::vect::binary<jit::functors::dottimes<double, bool, double>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<double>(out)); }
void dottimes_SdMc(const int64_t size, const double in0, const double * in1_re, const double * in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dottimes<double, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dottimes_SdMd(const int64_t size, const double in0, const double * in1, double ** out) { jit::vect::binary<jit::functors::dottimes<double, double, double>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<double>(out)); }
void dottimes_SdMi16(const int64_t size, const double in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dottimes<double, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dottimes_SdMi32(const int64_t size, const double in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dottimes<double, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dottimes_SdMi64(const int64_t size, const double in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dottimes<double, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dottimes_SdMi8(const int64_t size, const double in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::dottimes<double, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dottimes_SdMui16(const int64_t size, const double in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<double, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_SdMui32(const int64_t size, const double in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<double, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_SdMui64(const int64_t size, const double in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<double, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_SdMui8(const int64_t size, const double in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dottimes<double, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const double>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dottimes_Si16Mb(const int64_t size, const int16_t in0, const int32_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dottimes<int16_t, bool, int16_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dottimes_Si16Md(const int64_t size, const int16_t in0, const double * in1, int16_t ** out) { jit::vect::binary<jit::functors::dottimes<int16_t, double, int16_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dottimes_Si16Mi16(const int64_t size, const int16_t in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dottimes<int16_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dottimes_Si16Mi32(const int64_t size, const int16_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dottimes<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dottimes_Si16Mi64(const int64_t size, const int16_t in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dottimes<int16_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dottimes_Si16Mi8(const int64_t size, const int16_t in0, const int8_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dottimes<int16_t, int8_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dottimes_Si16Mui16(const int64_t size, const int16_t in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<int16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_Si16Mui32(const int64_t size, const int16_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<int16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Si16Mui64(const int64_t size, const int16_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<int16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Si16Mui8(const int64_t size, const int16_t in0, const uint8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<int16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_Si32Mb(const int64_t size, const int32_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dottimes<int32_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dottimes_Si32Md(const int64_t size, const int32_t in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::dottimes<int32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dottimes_Si32Mi16(const int64_t size, const int32_t in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dottimes<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dottimes_Si32Mi32(const int64_t size, const int32_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dottimes<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dottimes_Si32Mi64(const int64_t size, const int32_t in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dottimes<int32_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dottimes_Si32Mi8(const int64_t size, const int32_t in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dottimes<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dottimes_Si32Mui16(const int64_t size, const int32_t in0, const uint16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<int32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Si32Mui32(const int64_t size, const int32_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<int32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Si32Mui64(const int64_t size, const int32_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<int32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Si32Mui8(const int64_t size, const int32_t in0, const uint8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<int32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Si64Mb(const int64_t size, const int64_t in0, const int32_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dottimes<int64_t, bool, int64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dottimes_Si64Md(const int64_t size, const int64_t in0, const double * in1, int64_t ** out) { jit::vect::binary<jit::functors::dottimes<int64_t, double, int64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dottimes_Si64Mi16(const int64_t size, const int64_t in0, const int16_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dottimes<int64_t, int16_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dottimes_Si64Mi32(const int64_t size, const int64_t in0, const int32_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dottimes<int64_t, int32_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dottimes_Si64Mi64(const int64_t size, const int64_t in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dottimes<int64_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dottimes_Si64Mi8(const int64_t size, const int64_t in0, const int8_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dottimes<int64_t, int8_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dottimes_Si64Mui16(const int64_t size, const int64_t in0, const uint16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<int64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Si64Mui32(const int64_t size, const int64_t in0, const uint32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<int64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Si64Mui64(const int64_t size, const int64_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<int64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Si64Mui8(const int64_t size, const int64_t in0, const uint8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<int64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Si8Mb(const int64_t size, const int8_t in0, const int32_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::dottimes<int8_t, bool, int8_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dottimes_Si8Md(const int64_t size, const int8_t in0, const double * in1, int8_t ** out) { jit::vect::binary<jit::functors::dottimes<int8_t, double, int8_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dottimes_Si8Mi16(const int64_t size, const int8_t in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dottimes<int8_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dottimes_Si8Mi32(const int64_t size, const int8_t in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dottimes<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dottimes_Si8Mi64(const int64_t size, const int8_t in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dottimes<int8_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dottimes_Si8Mi8(const int64_t size, const int8_t in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::dottimes<int8_t, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dottimes_Si8Mui16(const int64_t size, const int8_t in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<int8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_Si8Mui32(const int64_t size, const int8_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<int8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Si8Mui64(const int64_t size, const int8_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<int8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Si8Mui8(const int64_t size, const int8_t in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dottimes<int8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const int8_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dottimes_Sui16Mb(const int64_t size, const uint16_t in0, const int32_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<uint16_t, bool, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_Sui16Md(const int64_t size, const uint16_t in0, const double * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<uint16_t, double, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_Sui16Mi16(const int64_t size, const uint16_t in0, const int16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<uint16_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_Sui16Mi32(const int64_t size, const uint16_t in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint16_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Sui16Mi64(const int64_t size, const uint16_t in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint16_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Sui16Mi8(const int64_t size, const uint16_t in0, const int8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<uint16_t, int8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_Sui16Mui16(const int64_t size, const uint16_t in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<uint16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_Sui16Mui32(const int64_t size, const uint16_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Sui16Mui64(const int64_t size, const uint16_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Sui16Mui8(const int64_t size, const uint16_t in0, const uint8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<uint16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_Sui32Mb(const int64_t size, const uint32_t in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint32_t, bool, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Sui32Md(const int64_t size, const uint32_t in0, const double * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint32_t, double, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Sui32Mi16(const int64_t size, const uint32_t in0, const int16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint32_t, int16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Sui32Mi32(const int64_t size, const uint32_t in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint32_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Sui32Mi64(const int64_t size, const uint32_t in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint32_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Sui32Mi8(const int64_t size, const uint32_t in0, const int8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint32_t, int8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Sui32Mui16(const int64_t size, const uint32_t in0, const uint16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Sui32Mui32(const int64_t size, const uint32_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Sui32Mui64(const int64_t size, const uint32_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Sui32Mui8(const int64_t size, const uint32_t in0, const uint8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Sui64Mb(const int64_t size, const uint64_t in0, const int32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint64_t, bool, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Sui64Md(const int64_t size, const uint64_t in0, const double * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint64_t, double, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Sui64Mi16(const int64_t size, const uint64_t in0, const int16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint64_t, int16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Sui64Mi32(const int64_t size, const uint64_t in0, const int32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint64_t, int32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Sui64Mi64(const int64_t size, const uint64_t in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint64_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Sui64Mi8(const int64_t size, const uint64_t in0, const int8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint64_t, int8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Sui64Mui16(const int64_t size, const uint64_t in0, const uint16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Sui64Mui32(const int64_t size, const uint64_t in0, const uint32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Sui64Mui64(const int64_t size, const uint64_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Sui64Mui8(const int64_t size, const uint64_t in0, const uint8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Sui8Mb(const int64_t size, const uint8_t in0, const int32_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dottimes<uint8_t, bool, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dottimes_Sui8Md(const int64_t size, const uint8_t in0, const double * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dottimes<uint8_t, double, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dottimes_Sui8Mi16(const int64_t size, const uint8_t in0, const int16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<uint8_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_Sui8Mi32(const int64_t size, const uint8_t in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint8_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Sui8Mi64(const int64_t size, const uint8_t in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint8_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Sui8Mi8(const int64_t size, const uint8_t in0, const int8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dottimes<uint8_t, int8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dottimes_Sui8Mui16(const int64_t size, const uint8_t in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<uint8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_Sui8Mui32(const int64_t size, const uint8_t in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Sui8Mui64(const int64_t size, const uint8_t in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Sui8Mui8(const int64_t size, const uint8_t in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dottimes<uint8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dottimes_UbUb(const int64_t size, const int32_t * in0, const int32_t * in1, double ** out) { jit::vect::binary<jit::functors::dottimes<bool, bool, double>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<double>(out)); }
void dottimes_UbUc(const int64_t size, const int32_t * in0, const double * in1_re, const double * in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dottimes<bool, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dottimes_UbUd(const int64_t size, const int32_t * in0, const double * in1, double ** out) { jit::vect::binary<jit::functors::dottimes<bool, double, double>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<double>(out)); }
void dottimes_UbUi16(const int64_t size, const int32_t * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dottimes<bool, int16_t, int16_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dottimes_UbUi32(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dottimes<bool, int32_t, int32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dottimes_UbUi64(const int64_t size, const int32_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dottimes<bool, int64_t, int64_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dottimes_UbUi8(const int64_t size, const int32_t * in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::dottimes<bool, int8_t, int8_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dottimes_UbUui16(const int64_t size, const int32_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<bool, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_UbUui32(const int64_t size, const int32_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<bool, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_UbUui64(const int64_t size, const int32_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<bool, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_UbUui8(const int64_t size, const int32_t * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dottimes<bool, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<bool *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dottimes_UcUb(const int64_t size, const double * in0_re, const double * in0_im, const int32_t * in1, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dottimes<const jit::cpx_t &, bool, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dottimes_UcUc(const int64_t size, const double * in0_re, const double * in0_im, const double * in1_re, const double * in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dottimes<const jit::cpx_t &, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dottimes_UcUd(const int64_t size, const double * in0_re, const double * in0_im, const double * in1, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dottimes<const jit::cpx_t &, double, jit::cpx_t>>(size, jit::vect::WrapVecIn<jit::cpx_t *>(in0_re, in0_im), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dottimes_UdUb(const int64_t size, const double * in0, const int32_t * in1, double ** out) { jit::vect::binary<jit::functors::dottimes<double, bool, double>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<double>(out)); }
void dottimes_UdUc(const int64_t size, const double * in0, const double * in1_re, const double * in1_im, double ** out_re, double ** out_im) { jit::vect::binary<jit::functors::dottimes<double, const jit::cpx_t &, jit::cpx_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<jit::cpx_t *>(in1_re, in1_im), jit::vect::WrapOut<jit::cpx_t>(out_re, out_im)); }
void dottimes_UdUd(const int64_t size, const double * in0, const double * in1, double ** out) { jit::vect::binary<jit::functors::dottimes<double, double, double>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<double>(out)); }
void dottimes_UdUi16(const int64_t size, const double * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dottimes<double, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dottimes_UdUi32(const int64_t size, const double * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dottimes<double, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dottimes_UdUi64(const int64_t size, const double * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dottimes<double, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dottimes_UdUi8(const int64_t size, const double * in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::dottimes<double, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dottimes_UdUui16(const int64_t size, const double * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<double, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_UdUui32(const int64_t size, const double * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<double, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_UdUui64(const int64_t size, const double * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<double, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_UdUui8(const int64_t size, const double * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dottimes<double, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const double *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dottimes_Ui16Ub(const int64_t size, const int16_t * in0, const int32_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dottimes<int16_t, bool, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dottimes_Ui16Ud(const int64_t size, const int16_t * in0, const double * in1, int16_t ** out) { jit::vect::binary<jit::functors::dottimes<int16_t, double, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dottimes_Ui16Ui16(const int64_t size, const int16_t * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dottimes<int16_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dottimes_Ui16Ui32(const int64_t size, const int16_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dottimes<int16_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dottimes_Ui16Ui64(const int64_t size, const int16_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dottimes<int16_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dottimes_Ui16Ui8(const int64_t size, const int16_t * in0, const int8_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dottimes<int16_t, int8_t, int16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dottimes_Ui16Uui16(const int64_t size, const int16_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<int16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_Ui16Uui32(const int64_t size, const int16_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<int16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Ui16Uui64(const int64_t size, const int16_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<int16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Ui16Uui8(const int64_t size, const int16_t * in0, const uint8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<int16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const int16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_Ui32Ub(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dottimes<int32_t, bool, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dottimes_Ui32Ud(const int64_t size, const int32_t * in0, const double * in1, int32_t ** out) { jit::vect::binary<jit::functors::dottimes<int32_t, double, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dottimes_Ui32Ui16(const int64_t size, const int32_t * in0, const int16_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dottimes<int32_t, int16_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dottimes_Ui32Ui32(const int64_t size, const int32_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dottimes<int32_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dottimes_Ui32Ui64(const int64_t size, const int32_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dottimes<int32_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dottimes_Ui32Ui8(const int64_t size, const int32_t * in0, const int8_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dottimes<int32_t, int8_t, int32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dottimes_Ui32Uui16(const int64_t size, const int32_t * in0, const uint16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<int32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Ui32Uui32(const int64_t size, const int32_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<int32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Ui32Uui64(const int64_t size, const int32_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<int32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Ui32Uui8(const int64_t size, const int32_t * in0, const uint8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<int32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const int32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Ui64Ub(const int64_t size, const int64_t * in0, const int32_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dottimes<int64_t, bool, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dottimes_Ui64Ud(const int64_t size, const int64_t * in0, const double * in1, int64_t ** out) { jit::vect::binary<jit::functors::dottimes<int64_t, double, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dottimes_Ui64Ui16(const int64_t size, const int64_t * in0, const int16_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dottimes<int64_t, int16_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dottimes_Ui64Ui32(const int64_t size, const int64_t * in0, const int32_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dottimes<int64_t, int32_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dottimes_Ui64Ui64(const int64_t size, const int64_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dottimes<int64_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dottimes_Ui64Ui8(const int64_t size, const int64_t * in0, const int8_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dottimes<int64_t, int8_t, int64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dottimes_Ui64Uui16(const int64_t size, const int64_t * in0, const uint16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<int64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Ui64Uui32(const int64_t size, const int64_t * in0, const uint32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<int64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Ui64Uui64(const int64_t size, const int64_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<int64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Ui64Uui8(const int64_t size, const int64_t * in0, const uint8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<int64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const int64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Ui8Ub(const int64_t size, const int8_t * in0, const int32_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::dottimes<int8_t, bool, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dottimes_Ui8Ud(const int64_t size, const int8_t * in0, const double * in1, int8_t ** out) { jit::vect::binary<jit::functors::dottimes<int8_t, double, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dottimes_Ui8Ui16(const int64_t size, const int8_t * in0, const int16_t * in1, int16_t ** out) { jit::vect::binary<jit::functors::dottimes<int8_t, int16_t, int16_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<int16_t>(out)); }
void dottimes_Ui8Ui32(const int64_t size, const int8_t * in0, const int32_t * in1, int32_t ** out) { jit::vect::binary<jit::functors::dottimes<int8_t, int32_t, int32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<int32_t>(out)); }
void dottimes_Ui8Ui64(const int64_t size, const int8_t * in0, const int64_t * in1, int64_t ** out) { jit::vect::binary<jit::functors::dottimes<int8_t, int64_t, int64_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<int64_t>(out)); }
void dottimes_Ui8Ui8(const int64_t size, const int8_t * in0, const int8_t * in1, int8_t ** out) { jit::vect::binary<jit::functors::dottimes<int8_t, int8_t, int8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<int8_t>(out)); }
void dottimes_Ui8Uui16(const int64_t size, const int8_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<int8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_Ui8Uui32(const int64_t size, const int8_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<int8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Ui8Uui64(const int64_t size, const int8_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<int8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Ui8Uui8(const int64_t size, const int8_t * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dottimes<int8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const int8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dottimes_Uui16Ub(const int64_t size, const uint16_t * in0, const int32_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<uint16_t, bool, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_Uui16Ud(const int64_t size, const uint16_t * in0, const double * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<uint16_t, double, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_Uui16Ui16(const int64_t size, const uint16_t * in0, const int16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<uint16_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_Uui16Ui32(const int64_t size, const uint16_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint16_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Uui16Ui64(const int64_t size, const uint16_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint16_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Uui16Ui8(const int64_t size, const uint16_t * in0, const int8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<uint16_t, int8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_Uui16Uui16(const int64_t size, const uint16_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<uint16_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_Uui16Uui32(const int64_t size, const uint16_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint16_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Uui16Uui64(const int64_t size, const uint16_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint16_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Uui16Uui8(const int64_t size, const uint16_t * in0, const uint8_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<uint16_t, uint8_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint16_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_Uui32Ub(const int64_t size, const uint32_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint32_t, bool, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Uui32Ud(const int64_t size, const uint32_t * in0, const double * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint32_t, double, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Uui32Ui16(const int64_t size, const uint32_t * in0, const int16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint32_t, int16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Uui32Ui32(const int64_t size, const uint32_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint32_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Uui32Ui64(const int64_t size, const uint32_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint32_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Uui32Ui8(const int64_t size, const uint32_t * in0, const int8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint32_t, int8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Uui32Uui16(const int64_t size, const uint32_t * in0, const uint16_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint32_t, uint16_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Uui32Uui32(const int64_t size, const uint32_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint32_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Uui32Uui64(const int64_t size, const uint32_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint32_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Uui32Uui8(const int64_t size, const uint32_t * in0, const uint8_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint32_t, uint8_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint32_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Uui64Ub(const int64_t size, const uint64_t * in0, const int32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint64_t, bool, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Uui64Ud(const int64_t size, const uint64_t * in0, const double * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint64_t, double, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Uui64Ui16(const int64_t size, const uint64_t * in0, const int16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint64_t, int16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Uui64Ui32(const int64_t size, const uint64_t * in0, const int32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint64_t, int32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Uui64Ui64(const int64_t size, const uint64_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint64_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Uui64Ui8(const int64_t size, const uint64_t * in0, const int8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint64_t, int8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Uui64Uui16(const int64_t size, const uint64_t * in0, const uint16_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint64_t, uint16_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Uui64Uui32(const int64_t size, const uint64_t * in0, const uint32_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint64_t, uint32_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Uui64Uui64(const int64_t size, const uint64_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint64_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Uui64Uui8(const int64_t size, const uint64_t * in0, const uint8_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint64_t, uint8_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint64_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Uui8Ub(const int64_t size, const uint8_t * in0, const int32_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dottimes<uint8_t, bool, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<bool *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dottimes_Uui8Ud(const int64_t size, const uint8_t * in0, const double * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dottimes<uint8_t, double, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const double *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dottimes_Uui8Ui16(const int64_t size, const uint8_t * in0, const int16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<uint8_t, int16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_Uui8Ui32(const int64_t size, const uint8_t * in0, const int32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint8_t, int32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Uui8Ui64(const int64_t size, const uint8_t * in0, const int64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint8_t, int64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Uui8Ui8(const int64_t size, const uint8_t * in0, const int8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dottimes<uint8_t, int8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const int8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }
void dottimes_Uui8Uui16(const int64_t size, const uint8_t * in0, const uint16_t * in1, uint16_t ** out) { jit::vect::binary<jit::functors::dottimes<uint8_t, uint16_t, uint16_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint16_t *>(in1), jit::vect::WrapOut<uint16_t>(out)); }
void dottimes_Uui8Uui32(const int64_t size, const uint8_t * in0, const uint32_t * in1, uint32_t ** out) { jit::vect::binary<jit::functors::dottimes<uint8_t, uint32_t, uint32_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint32_t *>(in1), jit::vect::WrapOut<uint32_t>(out)); }
void dottimes_Uui8Uui64(const int64_t size, const uint8_t * in0, const uint64_t * in1, uint64_t ** out) { jit::vect::binary<jit::functors::dottimes<uint8_t, uint64_t, uint64_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint64_t *>(in1), jit::vect::WrapOut<uint64_t>(out)); }
void dottimes_Uui8Uui8(const int64_t size, const uint8_t * in0, const uint8_t * in1, uint8_t ** out) { jit::vect::binary<jit::functors::dottimes<uint8_t, uint8_t, uint8_t>>(size, jit::vect::WrapVecIn<const uint8_t *>(in0), jit::vect::WrapVecIn<const uint8_t *>(in1), jit::vect::WrapOut<uint8_t>(out)); }


#endif // __FUNS_INTERF_H__