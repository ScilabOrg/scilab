// ============================================================================
// Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
// Copyright (C) 2012 - DIGITEO - Antoine ELIAS
//
//  This file is distributed under the same license as the Scilab package.
// ============================================================================
// <-- CLI SHELL MODE -->
s = %s;
empty = [];
r = 2;
R = [1,2;3,4];
R3(:,:,1) = R;
R3(:,:,2) = R';
c = 1 + 2*%i;
C = [1+2*%i,2+4*%i;3+6*%i,4+8*%i];
C3(:,:,1) = C;
C3(:,:,2) = C';
e = eye();
ec = (5+%i) * eye();
p = 1 + %s - %s**2;
pc = 1 + %s - %s**2 + ( 2 - 3 * %s + 4 * %s**2 ) * %i;
P = [2*p, -3*p;4*p,-5*p];
PC = [2*pc, -3*pc;4*pc,-5*pc];
SP = sparse([1,2;4,5;3,10],[1,2,3]);
SPC = sparse([1,2;4,5;3,10],[1,2,3]) * ( 1 + 4*%i);
i8 = int8(-8);
ui8 = uint8(8);
I8 = int8([-8 -16 ; -24 -32]);
UI8 = uint8([8 16 ; 24 32]);
I16 = int16([-16 -32 ; -48 -64]);
UI16 = uint16([16 32 ; 48 64]);
i16 = int16(-16);
ui16 = uint16(16);
i32 = int32(-32);
ui32 = uint32(32);
I32 = int32([-32 -64 ; -96 -128]);
UI32 = uint32([32 64 ; 96 128]);
str = "string";
STR = ["string1" "string2";"string3" "string4"];
assert_checkequal(empty + empty, []);
assert_checkequal(empty + r, []);
assert_checkequal(empty + c,  empty);
assert_checkequal(empty + R, []);
assert_checkequal(empty + C, []);
assert_checkequal(empty + e, []);
assert_checkequal(empty + ec, []);
assert_checkequal(empty + p, []);
assert_checkequal(empty + pc, []);
assert_checkequal(empty + P, []);
assert_checkequal(empty + PC, []);
assert_checkequal(empty + SP, []);
assert_checkequal(empty + SPC, []);
assert_checkequal(empty + i8, []);
assert_checkequal(empty + I8, []);
assert_checkequal(empty + ui8, []);
assert_checkequal(empty + UI8, []);
assert_checkequal(empty + i16, []);
assert_checkequal(empty + I16, []);
assert_checkequal(empty + ui16, []);
assert_checkequal(empty + UI16, []);
assert_checkequal(empty + i32, []);
assert_checkequal(empty + I32, []);
assert_checkequal(empty + ui32, []);
assert_checkequal(empty + UI32, []);
assert_checkequal(r + empty, []);
assert_checkequal(r + r, 4);
assert_checkequal(r + c,  3+%i*2);
assert_checkequal(r + R, [3,4;5,6]);
assert_checkequal(r + C, [ 3+%i*2, 4+%i*4; 5+%i*6, 6+%i*8]);
assert_checkequal(r + e, 3);
assert_checkequal(r + ec,  7+%i);
assert_checkequal(r + p, 3+s-s^2);
assert_checkequal(r + pc, 3+%i*2+(1-%i*3)*s+(-1+%i*4)*s^2);
assert_checkequal(r + P, [4+2*s-2*s^2,-1-3*s+3*s^2;6+4*s-4*s^2,-3-5*s+5*s^2]);
assert_checkequal(r + PC, [4+%i*4+(2-%i*6)*s+(-2+%i*8)*s^2,-1-%i*6+(-3+%i*9)*s+(3-%i*12)*s^2;6+%i*8+(4-%i*12)*s+(-4+%i*16)*s^2,-3-%i*10+(-5+%i*15)*s+(5-%i*20)*s^2]);
assert_checkequal(r + SP, [2,3,2,2,2,2,2,2,2,2;2,2,2,2,2,2,2,2,2,2;2,2,2,2,2,2,2,2,2,5;2,2,2,2,4,2,2,2,2,2]);
assert_checkequal(r + SPC, [ 2, 3+%i*4, 2, 2, 2, 2, 2, 2, 2, 2; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2; 2, 2, 2, 2, 2, 2, 2, 2, 2, 5+%i*12; 2, 2, 2, 2, 4+%i*8, 2, 2, 2, 2, 2]);
assert_checkequal(r + i8, int8(-6));
assert_checkequal(r + I8, int8([-6,-14;-22,-30]));
assert_checkequal(r + ui8, uint8(10));
assert_checkequal(r + UI8, uint8([10,18;26,34]));
assert_checkequal(r + i16, int16(-14));
assert_checkequal(r + I16, int16([-14,-30;-46,-62]));
assert_checkequal(r + ui16, uint16(18));
assert_checkequal(r + UI16, uint16([18,34;50,66]));
assert_checkequal(r + i32, int32(-30));
assert_checkequal(r + I32, int32([-30,-62;-94,-126]));
assert_checkequal(r + ui32, uint32(34));
assert_checkequal(r + UI32, uint32([34,66;98,130]));
assert_checkequal(c + empty,  empty);
assert_checkequal(c + r,  3+%i*2);
assert_checkequal(c + c,  2+%i*4);
assert_checkequal(c + R, [ 2+%i*2, 3+%i*2; 4+%i*2, 5+%i*2]);
assert_checkequal(c + C, [ 2+%i*4, 3+%i*6; 4+%i*8, 5+%i*10]);
assert_checkequal(c + e,  2+%i*2);
assert_checkequal(c + ec,  6+%i*3);
assert_checkequal(c + p, 2+%i*2+s-s^2);
assert_checkequal(c + pc, 2+%i*4+(1-%i*3)*s+(-1+%i*4)*s^2);
assert_checkequal(c + P, [3+%i*2+2*s-2*s^2,-2+%i*2-3*s+3*s^2;5+%i*2+4*s-4*s^2,-4+%i*2-5*s+5*s^2]);
assert_checkequal(c + PC, [3+%i*6+(2-%i*6)*s+(-2+%i*8)*s^2,-2-%i*4+(-3+%i*9)*s+(3-%i*12)*s^2;5+%i*10+(4-%i*12)*s+(-4+%i*16)*s^2,-4-%i*8+(-5+%i*15)*s+(5-%i*20)*s^2]);
assert_checkequal(c + SP, [ 1+%i*2, 2+%i*2, 1+%i*2, 1+%i*2, 1+%i*2, 1+%i*2, 1+%i*2, 1+%i*2, 1+%i*2, 1+%i*2; 1+%i*2, 1+%i*2, 1+%i*2, 1+%i*2, 1+%i*2, 1+%i*2, 1+%i*2, 1+%i*2, 1+%i*2, 1+%i*2; 1+%i*2, 1+%i*2, 1+%i*2, 1+%i*2, 1+%i*2, 1+%i*2, 1+%i*2, 1+%i*2, 1+%i*2, 4+%i*2; 1+%i*2, 1+%i*2, 1+%i*2, 1+%i*2, 3+%i*2, 1+%i*2, 1+%i*2, 1+%i*2, 1+%i*2, 1+%i*2]);
assert_checkequal(c + SPC, [ 1+%i*2, 2+%i*6, 1+%i*2, 1+%i*2, 1+%i*2, 1+%i*2, 1+%i*2, 1+%i*2, 1+%i*2, 1+%i*2; 1+%i*2, 1+%i*2, 1+%i*2, 1+%i*2, 1+%i*2, 1+%i*2, 1+%i*2, 1+%i*2, 1+%i*2, 1+%i*2; 1+%i*2, 1+%i*2, 1+%i*2, 1+%i*2, 1+%i*2, 1+%i*2, 1+%i*2, 1+%i*2, 1+%i*2, 4+%i*14; 1+%i*2, 1+%i*2, 1+%i*2, 1+%i*2, 3+%i*10, 1+%i*2, 1+%i*2, 1+%i*2, 1+%i*2, 1+%i*2]);
assert_checkequal(R + empty, []);
assert_checkequal(R + r, [3,4;5,6]);
assert_checkequal(R + c, [ 2+%i*2, 3+%i*2; 4+%i*2, 5+%i*2]);
assert_checkequal(R + R, [2,4;6,8]);
assert_checkequal(R + C, [ 2+%i*2, 4+%i*4; 6+%i*6, 8+%i*8]);
assert_checkequal(R + e, [2,2;3,5]);
assert_checkequal(R + ec, [ 6+%i, 2; 3, 9+%i]);
assert_checkequal(R + p, [2+s-s^2,3+s-s^2;4+s-s^2,5+s-s^2]);
assert_checkequal(R + pc, [2+%i*2+(1-%i*3)*s+(-1+%i*4)*s^2,3+%i*2+(1-%i*3)*s+(-1+%i*4)*s^2;4+%i*2+(1-%i*3)*s+(-1+%i*4)*s^2,5+%i*2+(1-%i*3)*s+(-1+%i*4)*s^2]);
assert_checkequal(R + P, [3+2*s-2*s^2,-1-3*s+3*s^2;7+4*s-4*s^2,-1-5*s+5*s^2]);
assert_checkequal(R + PC, [3+%i*4+(2-%i*6)*s+(-2+%i*8)*s^2,-1-%i*6+(-3+%i*9)*s+(3-%i*12)*s^2;7+%i*8+(4-%i*12)*s+(-4+%i*16)*s^2,-1-%i*10+(-5+%i*15)*s+(5-%i*20)*s^2]);
assert_checkequal(R + i8, int8([-7,-6;-5,-4]));
assert_checkequal(R + I8, int8([-7,-14;-21,-28]));
assert_checkequal(R + ui8, uint8([9,10;11,12]));
assert_checkequal(R + UI8, uint8([9,18;27,36]));
assert_checkequal(R + i16, int16([-15,-14;-13,-12]));
assert_checkequal(R + I16, int16([-15,-30;-45,-60]));
assert_checkequal(R + ui16, uint16([17,18;19,20]));
assert_checkequal(R + UI16, uint16([17,34;51,68]));
assert_checkequal(R + i32, int32([-31,-30;-29,-28]));
assert_checkequal(R + I32, int32([-31,-62;-93,-124]));
assert_checkequal(R + ui32, uint32([33,34;35,36]));
assert_checkequal(R + UI32, uint32([33,66;99,132]));
assert_checkequal(C + empty, []);
assert_checkequal(C + r, [ 3+%i*2, 4+%i*4; 5+%i*6, 6+%i*8]);
assert_checkequal(C + c, [ 2+%i*4, 3+%i*6; 4+%i*8, 5+%i*10]);
assert_checkequal(C + R, [ 2+%i*2, 4+%i*4; 6+%i*6, 8+%i*8]);
assert_checkequal(C + C, [ 2+%i*4, 4+%i*8; 6+%i*12, 8+%i*16]);
assert_checkequal(C + e, [ 2+%i*2, 2+%i*4; 3+%i*6, 5+%i*8]);
assert_checkequal(C + ec, [ 6+%i*3, 2+%i*4; 3+%i*6, 9+%i*9]);
assert_checkequal(C + p, [2+%i*2+s-s^2,3+%i*4+s-s^2;4+%i*6+s-s^2,5+%i*8+s-s^2]);
assert_checkequal(C + pc, [2+%i*4+(1-%i*3)*s+(-1+%i*4)*s^2,3+%i*6+(1-%i*3)*s+(-1+%i*4)*s^2;4+%i*8+(1-%i*3)*s+(-1+%i*4)*s^2,5+%i*10+(1-%i*3)*s+(-1+%i*4)*s^2]);
assert_checkequal(C + P, [3+%i*2+2*s-2*s^2,-1+%i*4-3*s+3*s^2;7+%i*6+4*s-4*s^2,-1+%i*8-5*s+5*s^2]);
assert_checkequal(C + PC, [3+%i*6+(2-%i*6)*s+(-2+%i*8)*s^2,-1-%i*2+(-3+%i*9)*s+(3-%i*12)*s^2;7+%i*14+(4-%i*12)*s+(-4+%i*16)*s^2,-1-%i*2+(-5+%i*15)*s+(5-%i*20)*s^2]);
assert_checkequal(e + empty, []);
assert_checkequal(e + r, 3);
assert_checkequal(e + c,  2+%i*2);
assert_checkequal(e + R, [2,2;3,5]);
assert_checkequal(e + C, [ 2+%i*2, 2+%i*4; 3+%i*6, 5+%i*8]);
assert_checkequal(e + e, (2)*eye());
assert_checkequal(e + ec, ( 6+%i)*eye());
assert_checkequal(e + p, 2+s-s^2);
assert_checkequal(e + pc, 2+%i*2+(1-%i*3)*s+(-1+%i*4)*s^2);
assert_checkequal(e + P, [3+2*s-2*s^2,-3-3*s+3*s^2;4+4*s-4*s^2,-4-5*s+5*s^2]);
assert_checkequal(e + PC, [3+%i*4+(2-%i*6)*s+(-2+%i*8)*s^2,-3-%i*6+(-3+%i*9)*s+(3-%i*12)*s^2;4+%i*8+(4-%i*12)*s+(-4+%i*16)*s^2,-4-%i*10+(-5+%i*15)*s+(5-%i*20)*s^2]);
assert_checkequal(e + SP, sparse([1,1;1,2;2,2;3,3;3,10;4,4;4,5],[1;1;1;1;3;1;2],[4,10]));
assert_checkequal(e + SPC, sparse([1,1;1,2;2,2;3,3;3,10;4,4;4,5],[ 1; 1+%i*4; 1; 1; 3+%i*12; 1; 2+%i*8],[4,10]));
assert_checkequal(ec + empty, []);
assert_checkequal(ec + r,  7+%i);
assert_checkequal(ec + c,  6+%i*3);
assert_checkequal(ec + R, [ 6+%i, 2; 3, 9+%i]);
assert_checkequal(ec + C, [ 6+%i*3, 2+%i*4; 3+%i*6, 9+%i*9]);
assert_checkequal(ec + e, ( 6+%i)*eye());
assert_checkequal(ec + ec, ( 10+%i*2)*eye());
assert_checkequal(ec + p, 6+%i+s-s^2);
assert_checkequal(ec + pc, 6+%i*3+(1-%i*3)*s+(-1+%i*4)*s^2);
assert_checkequal(ec + P, [7+%i+2*s-2*s^2,-3-3*s+3*s^2;4+4*s-4*s^2,%i-5*s+5*s^2]);
assert_checkequal(ec + PC, [7+%i*5+(2-%i*6)*s+(-2+%i*8)*s^2,-3-%i*6+(-3+%i*9)*s+(3-%i*12)*s^2;4+%i*8+(4-%i*12)*s+(-4+%i*16)*s^2,-%i*9+(-5+%i*15)*s+(5-%i*20)*s^2]);
assert_checkequal(ec + SP, sparse([1,1;1,2;2,2;3,3;3,10;4,4;4,5],[ 5+%i; 1; 5+%i; 5+%i; 3; 5+%i; 2],[4,10]));
assert_checkequal(ec + SPC, sparse([1,1;1,2;2,2;3,3;3,10;4,4;4,5],[ 5+%i; 1+%i*4; 5+%i; 5+%i; 3+%i*12; 5+%i; 2+%i*8],[4,10]));
assert_checkequal(p + empty, []);
assert_checkequal: Incompatible input arguments #1 and #2: Same types expected.
at line    46 of function assert_checkequal ( SCI/modules/development_tools/macros/assert/assert_checkequal.sci line 55 )
at line   190 of executed file TMPDIR/addition.tst
