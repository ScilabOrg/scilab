
#line 3 "src/cpp/parse/scanscilab.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types.
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

#define YY_LESS_LINENO(n)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
{
FILE *yy_input_file;

char *yy_ch_buf;		/* input buffer */
char *yy_buf_pos;		/* current position in input buffer */

/* Size of input buffer in bytes, not including room for EOB
 * characters.
 */
yy_size_t yy_buf_size;

/* Number of characters read into yy_ch_buf, not including EOB
 * characters.
 */
int yy_n_chars;

/* Whether we "own" the buffer - i.e., we know we created it,
 * and can realloc() it to grow it, and should free() it to
 * delete it.
 */
int yy_is_our_buffer;

/* Whether this is an "interactive" input source; if so, and
 * if we're using stdio for input, then we want to use getc()
 * instead of fread(), to make sure we stop fetching input after
 * each newline.
 */
int yy_is_interactive;

/* Whether we're considered to be at the beginning of a line.
 * If so, '^' rules will be active on the next match, otherwise
 * not.
 */
int yy_at_bol;

int yy_bs_lineno; /**< The line count. */
int yy_bs_column; /**< The column count. */

/* Whether to try to fill the input buffer when we reach the
 * end of it.
 */
int yy_fill_buffer;

int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
/* When an EOF's been seen but there's still some text to process
 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
 * shouldn't try reading from the input source any more.  We might
 * still have a bunch of tokens to match, though, because of
 * possible backing-up.
 *
 * When we actually see the EOF, we change the status to "new"
 * (via yyrestart()), so that the user can continue scanning by
 * just pointing yyin at a new input file.
 */
#define YY_BUFFER_EOF_PENDING 2

};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file, int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b, FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes, int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *, yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 145
#define YY_END_OF_BUFFER 146
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
{
flex_int32_t yy_verify;
flex_int32_t yy_nxt;
};
static yyconst flex_int16_t yy_acclist[945] =
{
0,
16408,  123,  123,  133,  133,  113,  113,  109,  109,  146,
84,  145,   80,   84,  145,   81,  145,   81,   84,  145,
78,   84,  145,   75,   84,  145,   27,   84,  145,   75,
84,  145,   30,   84,  145,   79,   84,  145,   34,   84,
145,   35,   84,  145,   48,   84,  145,   47,   84,  145,
37,   84,  145,   46,   84,  145,   67,   84,  145,   49,
84,  145,   69,   84,  145,   38,   84,  145,   36,   84,
145,   60,   84,  145,   64,   84,  145,   61,   84,  145,
26,   84,  145,   65,   84,  145,   50,   84,  145,   66,
84,  145,   51,   84,  145,   75,   84,  145,   75,   84,

145,   75,   84,  145,   75,   84,  145,   75,   84,  145,
75,   84,  145,   75,   84,  145,   75,   84,  145,   75,
84,  145,   75,   84,  145,   75,   84,  145,   39,   84,
145,   32,   84,  145,   40,   84,  145,   26,   84,  145,
84,  145,   84,  145,   84,  145,   84,  145,   84,  145,
84,  145,   84,  145,   84,  145,   84,  145,   80,   84,
145, 16408,   75,   84,  145,   27,   84,  145,   75,   84,
145,   75,   84,  145,   75,   84,  145,   75,   84,  145,
75,   84,  145,   75,   84,  145,   75,   84,  145,   75,
84,  145,   75,   84,  145,   75,   84,  145,   75,   84,

145,   75,   84,  145,   84,  145,   84,  145,   84,  145,
84,  145,   84,  145,   84,  145,   84,  145,   84,  145,
84,  145,  123,  124,  145,  122,  145,  122,  124,  145,
120,  124,  145,  119,  124,  145,  124,  145,  133,  134,
145,  132,  145,  132,  134,  145,  129,  134,  145,  130,
134,  145,  134,  145,  113,  114,  145,  112,  145,  112,
114,  145,  114,  145,  114,  145,  109,  145,  108,  145,
108,  145,  107,  145,  106,  107,  145,  103,  145,  103,
107,  145,  107,  145,   98,  145,   80,   98,  145,   89,
145,   89,   98,  145,   78,   98,  145,   75,   98,  145,

27,   98,  145,   75,   98,  145,   30,   98,  145,   79,
98,  145,   85,   87,   98,  145,   86,   98,  145,   48,
98,  145,   92,   98,  145,   37,   98,  145,   94,   98,
145,   67,   98,  145,   49,   98,  145,   69,   98,  145,
38,   88,   98,  145,   36,   98,  145,   60,   98,  145,
64,   98,  145,   61,   98,  145,   26,   98,  145,   65,
98,  145,   50,   98,  145,   90,   98,  145,   51,   98,
145,   39,   98,  145,   32,   98,  145,   91,   98,  145,
26,   98,  145,   98,  145,   98,  145,   98,  145,   98,
145,   98,  145,   98,  145,   98,  145,   98,  145,  144,

145,  135,  145,  138,  145,  138,  145,   78,  145,   79,
145,  140,  144,  145,  137,  145,  136,  145,  141,  144,
145,  139,  144,  145,  142,  144,  145,  143,  144,  145,
145,   25,  145,  145,   25,  145,   25,  145,   25,  145,
25,  145,   25,  145,   25,  145,   25,  145,   25,  145,
25,  145,   25,  145,   25,  145,   25,  145,  145,  145,
145,  145,  145,  145,  145,  145,   80,   82,   82,   81,
75,   75,    3,   29,   75,    2,   28,   75,   31,   51,
41,   42,   68,   43,   74,   44,   45,   76,   77,   73,
69,   62,   59,   58,   63,   75,   75,   75,   17,   75,

75,   75,   75,   75,    4,   75,   75,   75,   75,   75,
75,   75,   75,   33,   75,   80, 16408,   75,   75,    3,
29,   75,    2,   28,   75,   75,   75,   75,   17,   75,
75,   75,   75,   75,    4,   75,   75,   75,   75,   75,
75,   75,   75,   75,  123,  122,  115,  116,  117,  118,
133,  132,  125,  126,  127,  128,  113,  112,  110,  111,
109,  108,  106,  103,  104,  105,   80,   87,   96,   97,
88,   89,   29,   75,   28,   75,   88,  144,  135,  138,
25,   25,    3,   25,    2,   25,   25,   25,   25,   17,
25,   25,   25,   25,   25,    4,   25,   25,   25,   25,

25,   25,   25,   25,   25,   83,   83,   55,   52,   53,
54,   56,   72,   73,   70,   71,   57,   75,   75,   75,
75,   75,    8,   75,   15,   75,   75,   75,   75,   75,
75,   75,   75,   20,   75,   75,    1,   75, 8216, 8216,
75,   75,   75,   75,   75,    8,   75,   15,   75,   75,
75,   75,   75,   75,   75,   75,   20,   75,   75,    1,
75,  121,  121,  131,  131,   93,   95,   99,   99,   25,
25,   25,   25,   25,    8,   25,   15,   25,   25,   25,
25,   25,   25,   25,   25,   20,   25,   25,   75,   12,
75,   75,   75,    6,   75,   75,   75,   75,   75,   75,

75,   75,    5,   75,   75,    1,    1,   75,    1,    1,
1,    1,    1,    1,    1,    1,   75, 8216,   75,   12,
75,   75,   75,    6,   75,   75,   75,   75,   75,   75,
75,   75,    5,   75,   75,    1,    1,   75,    1,    1,
1,    1,    1,    1,    1,    1,   75,  101,  101,   25,
12,   25,   25,   25,    6,   25,   25,   25,   25,   25,
25,   25,   25,    5,   25,   25,   25,   75,   75,   18,
75,   21,   75,   75,   75,   75,   75,   75,   75,   75,
75,   75,   16,   75,    1,    1,    1,    1,    1,    1,
1,   75,   75,   18,   75,   21,   75,   75,   75,   75,

75,   75,   75,   75,   75,   75,   16,   75,    1, 8216,
1, 8216,    1,    1,    1,    1,    1,    1,    1,  100,
100,   25,   25,   18,   25,   21,   25,   25,   25,   25,
25,   25,   25,   25,   25,   25,   16,   25,   75,    7,
75,   75,   75,   75,   23,   75,   22,   75,    9,   75,
10,   75,    1,    1,    1,   75,    7,   75,   75,   75,
75,   23,   75,   22,   75,    9,   75,   10,   75,    1,
8216,    1,    1,    1,  102,  102,  100,   25,    7,   25,
25,   25,   25,   23,   25,   22,   25,    9,   25,   10,
25,   75,   75,   75,   75,    1,   75,   75,   75,   75,

75,    1,   75,  102,   25,   25,   25,   25,   19,   75,
75,   13,   75,   75,   19,   75,   75,   13,   75,   75,
19,   25,   25,   13,   25,   25,   75,   11,   75,   75,
11,   75,   25,   11,   25,   75,   75,   25,   14,   75,
14,   75,   14,   25
} ;

static yyconst flex_int16_t yy_accept[826] =
{
0,
1,    1,    2,    3,    4,    5,    6,    7,    8,    9,
10,   10,   10,   10,   10,   10,   10,   10,   10,   11,
13,   16,   18,   21,   24,   27,   30,   33,   36,   39,
42,   45,   48,   51,   54,   57,   60,   63,   66,   69,
72,   75,   78,   81,   84,   87,   90,   93,   96,   99,
102,  105,  108,  111,  114,  117,  120,  123,  126,  129,
132,  135,  138,  141,  143,  145,  147,  149,  151,  153,
155,  157,  159,  163,  166,  169,  172,  175,  178,  181,
184,  187,  190,  193,  196,  199,  202,  205,  207,  209,
211,  213,  215,  217,  219,  221,  223,  226,  228,  231,

234,  237,  239,  242,  244,  247,  250,  253,  255,  258,
260,  263,  265,  267,  269,  271,  273,  275,  278,  280,
283,  285,  287,  290,  292,  295,  298,  301,  304,  307,
310,  313,  317,  320,  323,  326,  329,  332,  335,  338,
341,  345,  348,  351,  354,  357,  360,  363,  366,  369,
372,  375,  378,  381,  384,  386,  388,  390,  392,  394,
396,  398,  400,  402,  404,  406,  408,  410,  412,  415,
417,  419,  422,  425,  428,  431,  432,  434,  435,  437,
439,  441,  443,  445,  447,  449,  451,  453,  455,  457,
459,  460,  461,  462,  463,  464,  465,  466,  467,  468,

469,  470,  470,  470,  471,  472,  472,  472,  472,  472,
472,  472,  472,  472,  473,  473,  473,  473,  473,  473,
473,  473,  473,  476,  479,  480,  481,  481,  482,  483,
484,  485,  486,  487,  488,  489,  489,  490,  491,  492,
492,  492,  492,  493,  494,  494,  495,  495,  496,  496,
496,  497,  498,  499,  501,  502,  503,  504,  505,  507,
508,  509,  510,  511,  512,  513,  514,  515,  515,  516,
516,  516,  516,  516,  516,  516,  516,  516,  518,  518,
518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
519,  519,  519,  519,  519,  519,  519,  519,  519,  520,

520,  520,  520,  520,  520,  520,  520,  520,  523,  526,
527,  528,  529,  531,  532,  533,  534,  535,  537,  538,
539,  540,  541,  542,  543,  544,  545,  545,  545,  545,
545,  545,  545,  545,  545,  546,  547,  548,  549,  550,
551,  551,  552,  553,  554,  555,  556,  557,  557,  558,
559,  560,  561,  562,  563,  564,  565,  566,  567,  568,
569,  570,  571,  571,  572,  573,  575,  577,  577,  578,
579,  580,  581,  582,  582,  582,  582,  582,  582,  582,
582,  582,  583,  583,  583,  583,  583,  583,  583,  583,
583,  585,  587,  588,  589,  590,  592,  593,  594,  595,

596,  598,  599,  600,  601,  602,  603,  604,  605,  606,
606,  606,  606,  606,  606,  606,  606,  607,  608,  608,
608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
608,  608,  608,  609,  610,  611,  612,  613,  614,  615,
615,  616,  616,  617,  618,  619,  620,  621,  622,  623,
625,  627,  628,  629,  630,  631,  632,  633,  634,  636,
637,  639,  639,  639,  639,  639,  639,  639,  639,  639,
639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
640,  641,  641,  641,  641,  641,  641,  641,  641,  641,

641,  641,  641,  641,  641,  641,  642,  643,  644,  645,
646,  648,  650,  651,  652,  653,  654,  655,  656,  657,
659,  660,  662,  662,  662,  662,  663,  664,  665,  666,
667,  668,  668,  668,  669,  670,  670,  670,  670,  670,
670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
670,  671,  672,  673,  674,  675,  677,  679,  680,  681,
682,  683,  684,  685,  686,  688,  689,  689,  689,  689,
689,  689,  689,  689,  689,  689,  690,  692,  693,  694,
696,  697,  698,  699,  700,  701,  702,  703,  705,  706,
707,  709,  710,  711,  712,  713,  714,  715,  716,  717,

718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
718,  718,  718,  718,  718,  718,  718,  718,  719,  719,
719,  719,  719,  719,  719,  720,  722,  723,  724,  726,
727,  728,  729,  730,  731,  732,  733,  735,  736,  737,
739,  740,  741,  742,  743,  744,  745,  746,  747,  748,
748,  749,  750,  750,  750,  750,  750,  750,  750,  750,
750,  751,  753,  754,  755,  757,  758,  759,  760,  761,
762,  763,  764,  766,  767,  768,  769,  770,  772,  774,
775,  776,  777,  778,  779,  780,  781,  782,  783,  785,
786,  787,  788,  789,  790,  791,  792,  792,  792,  792,

792,  792,  792,  792,  793,  794,  796,  798,  799,  800,
801,  802,  803,  804,  805,  806,  807,  809,  811,  813,
814,  815,  816,  817,  818,  819,  820,  820,  820,  821,
822,  823,  824,  826,  828,  829,  830,  831,  832,  833,
834,  835,  836,  837,  839,  840,  842,  843,  844,  845,
847,  849,  851,  853,  854,  855,  856,  856,  856,  857,
859,  860,  861,  862,  864,  866,  868,  870,  872,  873,
874,  875,  875,  876,  877,  878,  879,  881,  882,  883,
884,  886,  888,  890,  892,  893,  894,  895,  896,  898,
899,  900,  901,  902,  904,  905,  906,  907,  908,  909,

911,  912,  914,  915,  917,  918,  920,  921,  923,  924,
926,  927,  928,  930,  931,  933,  934,  936,  937,  938,
939,  941,  943,  945,  945
} ;

static yyconst flex_int32_t yy_ec[256] =
{
0,
1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
2,    2,    4,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    2,    1,    5,    6,    7,    8,    9,   10,   11,
12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
23,   24,    6,   25,    6,    6,    6,   26,   27,   28,
6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
6,    6,    6,   29,    6,    6,    6,    6,    6,    6,
30,   31,   32,   33,    6,    1,   34,   35,   36,   37,

38,   39,    6,   40,   41,    6,   42,   43,   44,   45,
46,    6,    6,   47,   48,   49,   50,    6,   51,    6,
52,    6,   53,   54,   55,   56,    1,   57,   57,   57,
57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
57,   57,   57,   58,   58,   58,   58,   58,   58,   58,
58,   58,   58,   58,   58,   58,   58,   58,   58,   59,
59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
59,   59,   59,   59,   59,   59,   60,   59,   59,   59,
61,    1,    1,   62,   62,   62,   62,   62,   62,   62,

62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
62,   62,   62,   63,   64,   64,   64,   64,   64,   64,
64,   64,   64,   64,   64,   64,   65,   66,   67,   68,
69,   69,   69,   70,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1
} ;

static yyconst flex_int32_t yy_meta[71] =
{
0,
1,    2,    3,    4,    5,    6,    6,    7,    1,    5,
8,    1,    9,    1,   10,    1,   11,    9,   12,    1,
10,    8,    8,    8,    1,    6,    6,    6,    6,    1,
1,    1,    1,    6,    6,    6,    6,    6,    6,    6,
6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
6,    6,    1,    1,    1,    1,    1,    1,    1,    1,
1,    6,    6,    6,    6,    6,    6,    6,    6,    6
} ;

static yyconst flex_int16_t yy_base[853] =
{
0,
0,   70,  138,  141,  149,  157,  160,  166,  146,  153,
173,  178,  196,    0,  265,  320,  376,    0,  908, 4195,
183,  270,  279, 4195,  239,  248,  419,  895, 4195, 4195,
4195,  155, 4195, 4195, 4195,  319,  175,  329, 4195, 4195,
269,  272,  275,  276, 4195,  885, 4195, 4195,  325,  421,
423,  451,  425,  463,  469,  475,  477,  482,  504, 4195,
840, 4195,  317,  300,  267,  477,  132,  488,  497,  310,
502,  835,  562,  515,  524,  631,  567,  569,  571,  606,
573,  491,  608,  614,  633,  636,  638,  513,  417,  631,
137,  645,  650,  580,  655,  829,    0, 4195,  877,  274,

329,  861,    0, 4195,  858,  451,  599,  834,    0, 4195,
846,  829,  831,    0, 4195,  831, 4195,  790, 4195,  782,
655, 4195,  715,  718,  719, 4195,  699,  687,  730,  765,
4195, 4195, 4195,  334, 4195, 4195, 4195,  753,  724,  756,
765, 4195,  721,  646,  656,  723, 4195,  748, 4195, 4195,
4195,  682, 4195,  741,  730,  491,  738,  239,  743,  747,
752,  673,    0,  722, 4195,  683, 4195, 4195,    0, 4195,
4195,    0,    0,    0,    0, 4195,  752,  761,  804,  807,
811,  809,  836,  813,  848,  854,  860,  862,  867,  889,
862,  701,  873,  305,  882,  866,  887,  624,  774, 4195,

671,  947,  950,  954,  931,  924,  876,  929,  408,  934,
918,  939,  599,    0,  944,  913,  949,  484,  954,  958,
963,  597,  997,  999, 4195, 4195,    0, 4195,  446,  633,
629, 1013,  627, 4195, 4195,    0, 4195, 1016, 1038,  896,
947, 1035, 4195, 4195,  745, 4195,  882, 4195, 1029,    0,
1032, 1034, 1039, 1051, 1057, 1064, 1069, 1081, 1083, 1095,
1099, 1111, 1114, 1123, 1117, 1129, 4195, 1043, 1136, 1122,
1129, 1134, 1139, 1144, 1149, 1154, 1159, 1219, 1165, 1174,
1188, 1191, 1196,  510, 1201, 1205, 1210,  564, 1031, 1251,
1215, 1232, 1237,  518, 1244, 1248, 1253,  556, 1275, 1258,

1261, 1266,  723, 1271, 1275, 1289,  554, 1323, 1325, 1327,
1329, 1341, 1332, 1354, 1359, 1366, 1371, 1378, 1383, 1390,
1397, 1402, 1406, 1419, 1421, 1424, 1417, 1422, 1427, 1432,
1437, 1442, 1447, 1452,    0, 4195, 4195, 4195, 4195, 4195,
1511,    0, 4195, 4195, 4195, 4195, 4195, 1513,    0, 4195,
4195, 4195,    0, 4195,  605, 4195, 4195, 4195, 1518, 4195,
603,  537,  510,  523, 1100, 1497, 1511, 1539,  521,    0,
507, 4195, 1516, 1509, 1405, 1514,  900, 1519, 1493, 1524,
450, 1524, 1538, 1488, 1543, 1037, 1548, 1503, 1553,  444,
1587, 1589, 1591, 1593, 1605, 1596, 1618, 1623, 1630, 1635,

1642, 1647, 1654, 1661, 1666, 1670, 1683, 1685, 1688, 1681,
1686, 1691, 1696, 1701, 1706, 1711, 4195,  496, 1716, 1721,
1726, 1731, 1736, 1741, 1746, 1751, 1756, 1761, 1766, 1771,
1776, 1781, 4195, 4195, 4195, 4195, 4195, 4195, 1824,  476,
474,  454,  438, 4195, 1818, 1816, 1820, 1835, 1842, 1844,
1847, 1849, 1861, 1866, 1873, 1875, 1878, 1880, 1892, 1904,
1953, 1877, 1891, 1967, 2027, 1973, 1669, 1978, 1079, 1983,
1987, 1992,  318, 2052, 1998, 1885, 2003, 1116, 2008, 2012,
2017,  316, 2022, 2027, 2041, 2046, 2051, 2066, 2071, 4195,
2131, 2077, 2086, 2091, 2099, 2104, 2109, 2114, 2119, 2124,

2129, 2134, 2139, 2144, 2149, 2183, 2185, 2190, 2192, 2199,
2207, 2214, 2216, 2221, 2229, 2233, 2238, 2245, 2252, 2257,
2260, 2309, 2323, 2328, 2333, 4195,  362, 4195,  346,  331,
318, 2393, 2396, 4195,  280,  255, 2344, 2358, 2363, 2368,
2373, 2378, 2383, 2388, 2393, 2398, 2403, 2408, 2413, 2418,
2452, 2454, 2459, 2461, 2468, 2476, 2483, 2485, 2490, 2498,
2502, 2507, 2514, 2521, 2526, 2529, 2522, 2527, 2532, 2537,
2542, 2547, 2552, 2557, 2562, 2596, 2598, 2600, 2602, 2605,
2624, 2627, 2630, 2636, 2639, 2653, 2655, 2667, 2669,    0,
0, 2652, 2080, 2662, 1119, 2667, 2348, 2672,  126, 2706,

2679, 2689, 2699, 2704, 2709, 2714, 2719, 2724, 2729, 2734,
2739, 2744, 2749, 2754, 2759, 2764, 2769, 2829, 2775, 2784,
2789, 2797, 2802, 2807, 2841, 2843, 2845, 2847, 2850, 2869,
2872, 2875, 2881, 2884, 2898, 2900, 2912, 2914, 2943,    0,
2898, 2601, 2912, 1167, 2917, 2683, 2922,  114, 2956, 2697,
4195,  162,  129, 1381, 2929, 2943, 2949, 2954, 2959, 2964,
2998, 3000, 3002, 3004, 3007, 3026, 3029, 3032, 3038, 3041,
3055, 3057, 3069, 3071, 3073, 3085,    0, 3087, 3099, 3101,
3103, 3115, 3127, 3130, 3133, 3145, 3149, 3157, 3163, 3150,
3156, 3161, 3166, 3171, 3176, 3181, 3186, 3191, 3196, 3201,

3206, 3211,    0, 3245,    0, 3247, 3249, 3252, 3254, 3261,
3276, 3279, 3283, 3295, 3298, 3310, 3307,    0, 3339, 3294,
3306, 3311, 3316, 3321, 3326, 3331, 1388, 1453, 4195, 1515,
3365,    0, 3367, 3369, 3372, 3374, 3381, 3396, 3399, 3403,
3415, 3418, 3430, 3427, 3433, 3445, 3449, 3458, 3452, 3461,
3467, 3474, 3480, 3467, 3473, 3478,    0,    0, 3512, 3514,
3516, 3518, 3530, 3521, 3544, 3546, 3548, 3578, 3531, 3545,
3550, 1520, 4195, 1555, 4195, 3584, 3586, 3588, 3590, 3602,
3593, 3616, 3618, 3620, 3624, 3632, 3646, 3648,    0, 3650,
3654, 3672, 3676,    0, 4195, 3680, 3684, 3698, 3702, 3706,

3720, 3724, 3728, 3736, 3742, 3750, 3758, 3764, 3773, 3766,
3780, 3782, 3788, 3795, 3797, 3804, 3810, 3819, 3826, 3828,
3823, 3841, 3850, 4195, 3899, 3911, 3923, 3935, 3947, 3959,
3966, 3973, 3984, 3990, 3997, 4009, 4021, 4033, 4045, 4057,
4064, 4071, 4083, 4094, 4105, 4115, 4122, 4134, 4146, 4158,
4170, 4182
} ;

static yyconst flex_int16_t yy_def[853] =
{
0,
824,  824,  825,  825,  826,  826,  827,  827,  828,  828,
829,  829,  824,   13,  830,  830,  824,   17,  824,  824,
824,  824,  824,  824,  831,  832,  831,  824,  824,  824,
824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
824,  824,  824,  824,  824,  824,  824,  824,   27,   27,
27,   27,   27,   27,   27,   27,   27,   27,   27,  824,
824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
824,  824,  833,  834,  835,  834,   76,   76,   76,   76,
76,   76,   76,   76,   76,   76,   76,  824,  824,  824,
824,  824,  824,  824,  824,  824,  836,  824,  824,  824,

824,  824,  837,  824,  824,  824,  824,  824,  838,  824,
824,  824,  824,  839,  824,  824,  824,  824,  824,  824,
824,  824,  824,  824,  824,  824,   27,  832,   27,  824,
824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
824,  824,  840,  824,  824,  824,  824,  824,  840,  824,
824,  840,  840,  840,  840,  824,  841,  842,  841,  179,
179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
824,  824,  824,  824,  824,  824,  824,  824,  824,  824,

824,  824,  824,  824,   27,  824,  824,  824,  824,  824,
824,  824,  824,  128,  824,  824,  824,  824,  824,  824,
824,  824,   27,   27,  824,  824,  843,  824,  824,  824,
824,  824,  824,  824,  824,  844,  824,  824,  824,  824,
824,  824,  824,  824,  824,  824,  824,  824,  824,  845,
27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
27,   27,   27,   27,   27,   27,  824,  824,   27,  824,
824,  824,  824,  824,  824,  824,  824,  833,  846,  847,
824,  824,  824,  824,  824,  824,  824,  824,  848,   76,
824,  824,  824,  824,  824,  824,  824,  824,  835,  824,

824,  824,  824,  824,  824,  824,  824,   76,   76,   76,
76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
76,   76,   76,   76,   76,   76,  824,  824,  824,  824,
824,  824,  824,  824,  836,  824,  824,  824,  824,  824,
824,  837,  824,  824,  824,  824,  824,  824,  838,  824,
824,  824,  839,  824,  824,  824,  824,  824,  824,  824,
824,  824,  824,  824,  824,   27,   27,  824,  824,  840,
824,  824,  179,  824,  824,  824,  824,  824,  824,  824,
824,  842,  824,  824,  824,  824,  824,  824,  824,  824,
179,  179,  179,  179,  179,  179,  179,  179,  179,  179,

179,  179,  179,  179,  179,  179,  179,  179,  179,  824,
824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
824,  824,  824,  824,   27,   27,   27,   27,   27,   27,
27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
824,  824,  824,  824,  846,  824,  824,  824,  824,  824,
824,  824,  824,  847,  824,  824,  824,  824,  824,  824,
824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
848,  824,  824,  824,  824,  824,  824,  824,  824,  824,

824,  824,  824,  824,  824,   76,   76,   76,   76,   76,
76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
76,  824,  824,  824,  824,  824,  824,  824,  824,  824,
824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
179,  179,  179,  179,  179,  179,  824,  824,  824,  824,
824,  824,  824,  824,  824,   27,   27,   27,   27,   27,
27,   27,   27,   27,   27,   27,   27,   27,   27,  849,
461,  849,  849,  849,  849,  849,  849,  849,  849,   27,

824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
824,  824,  824,  824,  824,  824,  824,  848,  824,  824,
824,  824,  824,  824,   76,   76,   76,   76,   76,   76,
76,   76,   76,   76,   76,   76,   76,   76,  850,  522,
849,  849,  849,  849,  849,  849,  849,  849,   76,  824,
824,  824,  824,  851,  824,  824,  824,  824,  824,  824,
179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
179,  179,  179,  179,  179,   27,  128,   27,   27,   27,
27,   27,   27,   27,   27,   27,   27,   27,   27,  849,
849,  849,  849,  849,  849,  849,  824,  824,  824,  824,

824,  824,  465,   76,  299,   76,   76,   76,   76,   76,
76,   76,   76,   76,   76,   76,   76,  849,  850,  849,
849,  849,  849,  849,  849,  849,  852,  851,  824,  851,
179,  382,  179,  179,  179,  179,  179,  179,  179,  179,
179,  179,  179,  179,   27,   27,   27,   27,   27,   27,
27,   27,   27,  849,  849,  849,  465,  474,   76,   76,
76,   76,   76,   76,   76,   76,   76,  850,  849,  849,
849,  852,  824,  852,  824,  179,  179,  179,  179,  179,
179,  179,  179,  179,   27,   27,   27,   27,  461,   76,
76,   76,   76,  522,  824,  179,  179,  179,  179,   27,

27,   27,   27,   76,   76,   76,   76,  179,  179,  179,
179,   27,   27,   76,   76,  179,  179,   27,   76,  179,
27,   76,  179,    0,  824,  824,  824,  824,  824,  824,
824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
824,  824
} ;

static yyconst flex_int16_t yy_nxt[4266] =
{
0,
20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
40,   41,   42,   43,   44,   25,   25,   25,   25,   45,
46,   47,   48,   25,   49,   50,   51,   52,   53,   25,
54,   25,   25,   25,   25,   55,   56,   57,   58,   25,
59,   25,   60,   61,   62,   63,   20,   20,   20,   20,
20,   64,   65,   66,   67,   68,   69,   70,   71,   72,
20,   73,   22,   23,   24,   74,   75,   76,   28,   29,
30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
40,   41,   42,   43,   44,   74,   74,   74,   74,   45,

46,   47,   48,   74,   77,   78,   79,   80,   81,   74,
82,   74,   74,   74,   74,   83,   84,   85,   86,   74,
87,   74,   60,   61,   62,   63,   20,   20,   20,   20,
20,   88,   89,   90,   91,   92,   93,   94,   95,   96,
98,   99,  100,   98,   99,  100,  727,  101,  115,  116,
101,  104,  105,  106,  102,  115,  116,  102,  107,  104,
105,  106,  110,  111,  651,  108,  107,  226,  110,  111,
726,  227,  112,  108,  118,  119,  120,  113,  112,  118,
119,  120,  696,  113,  199,  200,  201,  235,  272,  272,
121,  236,  237,  329,  329,  121,  122,  123,  124,  125,

126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
146,  127,  127,  127,  127,  147,  148,  149,  150,  127,
127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
127,  127,  127,  127,  127,  127,  127,  127,  151,  152,
153,  154,  122,  122,  122,  122,  122,  155,  156,  157,
158,  159,  159,  160,  161,  162,  164,  165,  166,  167,
242,  202,  654,  245,  168,  169,  247,  249,  337,  170,
202,  204,  534,  338,  203,  171,  172,  173,  174,  175,
203,  243,  244,  203,  246,  272,  272,  248,  244,  203,

206,  207,  208,  209,  210,  210,  211,  212,  213,  215,
216,  217,  218,  219,  219,  220,  221,  222,  268,  531,
175,  164,  165,  166,  167,  270,  270,  270,  228,  168,
169,  229,  530,  339,  170,  230,  231,  232,  340,  244,
171,  172,  173,  174,  175,  238,  226,  239,  528,  233,
227,  234,  205,  205,  240,  241,  269,  269,  269,  269,
269,  412,  412,  205,  526,  240,  241,  275,  275,  275,
275,  251,  614,  205,  607,  175,  176,  176,  176,  176,
176,  177,  178,  179,  176,  176,  176,  176,  176,  176,
176,  176,  176,  176,  176,  176,  176,  176,  176,  176,

176,  177,  177,  177,  177,  176,  176,  176,  176,  177,
180,  181,  182,  183,  184,  177,  185,  177,  177,  177,
177,  186,  187,  188,  189,  177,  190,  177,  176,  176,
176,  176,  176,  176,  176,  176,  176,  191,  192,  193,
194,  195,  195,  196,  197,  198,  223,  224,  205,  205,
205,  205,  205,  205,  252,  344,  443,  223,  234,  205,
345,  205,  434,  205,  421,  421,  253,  224,  254,  205,
257,  205,  443,  205,  258,  327,  327,  327,  205,  205,
206,  207,  208,  209,  210,  210,  211,  212,  213,  205,
205,  205,  441,  255,  441,  256,  205,  205,  417,  205,

550,  259,  205,  205,  205,  205,  543,  205,  371,  205,
205,  205,  261,  205,  262,  205,  289,  260,  290,  290,
205,  264,  369,  205,  369,  205,  532,  263,  265,  318,
205,  205,  205,  271,  271,  271,  271,  271,  531,  290,
428,  428,  205,  266,  273,  273,  273,  273,  273,  270,
270,  270,  205,  273,  273,  273,  274,  273,  276,  276,
276,  276,  276,  278,  200,  201,  485,  485,  280,  326,
326,  326,  326,  326,  494,  494,  291,  292,  293,  294,
295,  295,  296,  297,  298,  300,  301,  302,  303,  304,
304,  305,  306,  307,  290,  290,  290,  290,  290,  290,

290,  290,  311,  346,  530,  290,  355,  290,  347,  290,
505,  290,  498,  310,  312,  290,  313,  290,  316,  290,
489,  290,  317,  281,  282,  283,  284,  285,  285,  286,
287,  288,  289,  290,  290,  290,  290,  332,  332,  332,
332,  290,  290,  436,  290,  435,  290,  245,  314,  230,
315,  320,  290,  432,  290,  425,  319,  247,  308,  309,
290,  290,  290,  290,  290,  290,  290,  357,  246,  308,
321,  290,  358,  200,  290,  323,  290,  325,  248,  309,
416,  290,  324,  322,  290,  372,  290,  328,  328,  328,
328,  328,  291,  292,  293,  294,  295,  295,  296,  297,

298,  330,  330,  330,  330,  330,  330,  330,  330,  331,
330,  333,  333,  333,  333,  333,  359,  200,  201,  202,
202,  365,  242,  371,  249,  360,  205,  205,  361,  277,
362,  363,  203,  203,  364,  267,  235,  205,  203,  203,
236,  237,  268,  243,  244,  244,  245,  205,  215,  216,
217,  218,  219,  219,  220,  221,  222,  366,  367,  410,
410,  410,  228,  244,  250,  229,  369,  246,  366,  368,
231,  232,  238,  225,  239,  199,  200,  201,  367,  501,
501,  240,  241,  233,  356,  234,  269,  269,  269,  269,
269,  355,  240,  241,  271,  271,  271,  271,  271,  273,

273,  273,  273,  273,  275,  275,  275,  275,  276,  276,
276,  276,  276,  374,  375,  376,  377,  378,  378,  379,
380,  381,  383,  384,  385,  386,  387,  387,  388,  389,
390,  391,  392,  354,  373,  373,  373,  373,  373,  373,
373,  373,  391,  352,  394,  373,  351,  373,  350,  373,
348,  373,  392,  393,  396,  373,  395,  373,  399,  373,
343,  373,  400,  373,  373,  374,  375,  376,  377,  378,
378,  379,  380,  381,  373,  373,  373,  341,  397,  336,
398,  373,  373,  247,  373,  334,  401,  373,  373,  373,
373,  277,  373,  267,  373,  373,  373,  403,  373,  404,

373,  250,  402,  225,  248,  373,  406,  824,  373,  440,
373,  440,  405,  407,  441,  373,  373,  373,  409,  409,
409,  409,  409,  414,  414,  414,  414,  373,  408,  411,
411,  411,  411,  411,  419,  419,  419,  373,  413,  413,
413,  413,  413,  415,  415,  415,  415,  415,  202,  417,
418,  202,  417,  418,  824,  202,  539,  539,  205,  205,
442,  203,  442,  824,  203,  443,  824,  203,  203,  205,
203,  426,  426,  426,  203,  423,  423,  423,  423,  205,
205,  205,  205,  205,  205,  420,  420,  420,  420,  420,
422,  422,  422,  422,  422,  424,  424,  424,  424,  424,

214,  214,  214,  214,  214,  427,  427,  427,  427,  427,
429,  429,  429,  429,  429,  430,  430,  430,  430,  431,
431,  431,  431,  431,  205,  205,  205,  205,  438,  824,
249,  232,  289,  438,  439,  205,  242,  205,  240,  241,
824,  240,  241,  824,  268,  205,  438,  205,  438,  240,
241,  244,  240,  241,  238,  491,  239,  243,  244,  205,
205,  205,  205,  240,  241,  244,  205,  205,  824,  445,
205,  824,  205,  824,  240,  241,  824,  205,  205,  205,
205,  446,  447,  448,  205,  205,  491,  205,  824,  205,
824,  205,  205,  546,  546,  205,  205,  205,  824,  205,

450,  202,  205,  824,  449,  205,  824,  205,  205,  205,
205,  205,  205,  824,  203,  451,  824,  205,  824,  205,
203,  205,  205,  205,  824,  452,  205,  205,  824,  205,
824,  205,  824,  205,  453,  603,  603,  205,  205,  205,
824,  205,  205,  205,  205,  205,  454,  455,  824,  205,
205,  205,  205,  456,  457,  205,  205,  205,  824,  205,
458,  205,  205,  205,  205,  205,  289,  205,  459,  460,
824,  205,  610,  610,  205,  692,  692,  205,  269,  269,
269,  269,  269,  824,  205,  269,  269,  269,  269,  269,
269,  269,  269,  269,  269,  269,  269,  269,  269,  269,

269,  269,  269,  269,  461,  462,  462,  462,  462,  462,
463,  463,  463,  463,  463,  464,  464,  464,  464,  464,
278,  200,  201,  722,  722,  280,  466,  467,  468,  469,
470,  470,  471,  472,  473,  475,  476,  477,  478,  479,
479,  480,  481,  482,  279,  279,  279,  279,  279,  483,
483,  483,  484,  484,  484,  484,  484,  486,  486,  486,
486,  486,  487,  487,  487,  487,  488,  488,  488,  488,
488,  290,  290,  290,  290,  290,  289,  824,  290,  290,
281,  282,  283,  284,  285,  285,  286,  287,  288,  290,
492,  492,  492,  493,  493,  493,  493,  493,  824,  290,

495,  495,  495,  495,  495,  496,  496,  496,  496,  497,
497,  497,  497,  497,  299,  299,  299,  299,  299,  499,
499,  499,  500,  500,  500,  500,  500,  502,  502,  502,
502,  502,  503,  503,  503,  503,  300,  301,  302,  303,
304,  304,  305,  306,  307,  504,  504,  504,  504,  504,
290,  290,  290,  290,  290,  290,  290,  290,  824,  290,
290,  290,  824,  290,  506,  290,  824,  290,  290,  290,
290,  290,  824,  290,  824,  290,  507,  508,  824,  290,
290,  290,  290,  729,  730,  509,  290,  290,  824,  290,
773,  774,  290,  290,  290,  511,  824,  290,  290,  290,

824,  510,  290,  824,  290,  290,  290,  290,  824,  290,
290,  290,  512,  824,  290,  513,  290,  290,  290,  290,
824,  290,  514,  824,  290,  290,  290,  824,  290,  290,
290,  290,  824,  290,  290,  290,  824,  515,  516,  517,
290,  824,  518,  519,  290,  290,  290,  290,  290,  290,
290,  290,  290,  824,  290,  729,  730,  290,  824,  290,
824,  521,  290,  537,  537,  537,  824,  290,  824,  290,
520,  824,  290,  326,  326,  326,  326,  326,  326,  326,
326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
326,  326,  326,  326,  326,  326,  326,  522,  523,  523,

523,  523,  523,  524,  524,  524,  524,  524,  525,  525,
525,  525,  525,  526,  527,  528,  529,  775,  730,  359,
200,  201,  773,  774,  205,  205,  824,  341,  360,  348,
824,  361,  824,  362,  363,  205,  824,  364,  205,  205,
533,  534,  535,  373,  373,  205,  544,  544,  544,  205,
541,  541,  541,  541,  373,  368,  536,  795,  774,  205,
548,  548,  548,  548,  373,  373,  373,  373,  373,  373,
538,  538,  538,  538,  538,  540,  540,  540,  540,  540,
542,  542,  542,  542,  542,  383,  384,  385,  386,  387,
387,  388,  389,  390,  382,  382,  382,  382,  382,  545,

545,  545,  545,  545,  547,  547,  547,  547,  547,  549,
549,  549,  549,  549,  373,  373,  373,  373,  373,  373,
373,  373,  824,  373,  373,  373,  824,  373,  551,  373,
824,  373,  373,  373,  373,  373,  824,  373,  824,  373,
552,  553,  824,  373,  373,  373,  373,  824,  824,  554,
373,  373,  824,  373,  824,  824,  373,  373,  373,  556,
824,  373,  373,  373,  824,  555,  373,  824,  373,  373,
373,  373,  824,  373,  373,  373,  557,  824,  373,  558,
373,  373,  373,  373,  824,  373,  559,  824,  373,  373,
373,  824,  373,  373,  373,  373,  824,  373,  373,  373,

824,  560,  561,  562,  373,  824,  563,  564,  373,  373,
373,  373,  373,  373,  373,  373,  373,  824,  373,  824,
824,  373,  824,  373,  824,  566,  373,  601,  601,  601,
824,  373,  824,  373,  565,  824,  373,  409,  409,  409,
409,  409,  409,  409,  409,  409,  409,  409,  409,  409,
409,  409,  409,  409,  409,  409,  409,  567,  567,  567,
567,  567,  568,  568,  568,  568,  568,  569,  569,  569,
569,  569,  205,  205,  205,  205,  205,  205,  205,  205,
205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
205,  205,  570,  570,  570,  570,  570,  571,  571,  571,

571,  571,  572,  572,  572,  572,  572,  214,  214,  214,
214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
214,  214,  214,  214,  214,  214,  214,  573,  573,  573,
573,  573,  574,  574,  574,  574,  574,  575,  575,  575,
575,  575,  439,  205,  205,  205,  205,  205,  205,  240,
241,  576,  824,  577,  205,  578,  205,  824,  205,  824,
240,  241,  205,  205,  205,  824,  205,  824,  205,  205,
205,  205,  205,  205,  205,  205,  205,  205,  824,  580,
205,  824,  581,  579,  582,  205,  824,  205,  205,  205,
205,  824,  205,  205,  205,  205,  824,  205,  583,  205,

205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
824,  205,  586,  205,  205,  584,  205,  824,  205,  205,
205,  205,  585,  205,  588,  824,  587,  824,  205,  824,
205,  205,  205,  600,  600,  600,  600,  600,  824,  824,
205,  824,  205,  608,  608,  608,  589,  600,  600,  600,
600,  600,  205,  590,  590,  824,  590,  590,  591,  591,
590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
590,  591,  590,  590,  590,  590,  590,  590,  591,  591,
591,  591,  590,  590,  590,  590,  591,  591,  591,  591,
591,  591,  591,  591,  591,  591,  591,  591,  591,  591,

591,  591,  591,  591,  591,  590,  590,  590,  590,  590,
590,  590,  590,  590,  592,  593,  594,  595,  596,  596,
597,  598,  599,  600,  600,  600,  600,  600,  289,  465,
465,  465,  465,  465,  602,  602,  602,  602,  602,  604,
604,  604,  604,  604,  605,  605,  605,  605,  606,  606,
606,  606,  606,  289,  474,  474,  474,  474,  474,  609,
609,  609,  609,  609,  611,  611,  611,  611,  611,  612,
612,  612,  612,  613,  613,  613,  613,  613,  279,  279,
279,  279,  279,  279,  279,  279,  279,  279,  466,  467,
468,  469,  470,  470,  471,  472,  473,  279,  279,  279,

279,  279,  279,  279,  279,  279,  279,  615,  615,  615,
615,  615,  824,  475,  476,  477,  478,  479,  479,  480,
481,  482,  616,  616,  616,  616,  616,  617,  617,  617,
617,  617,  618,  290,  290,  290,  290,  290,  690,  690,
690,  490,  290,  290,  290,  290,  290,  290,  290,  290,
290,  290,  490,  824,  490,  290,  290,  290,  290,  290,
619,  619,  619,  619,  619,  620,  620,  620,  620,  620,
621,  621,  621,  621,  621,  299,  299,  299,  299,  299,
299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
299,  299,  299,  299,  299,  622,  622,  622,  622,  622,

623,  623,  623,  623,  623,  624,  624,  624,  624,  624,
290,  290,  290,  290,  824,  824,  625,  290,  290,  290,
290,  290,  626,  290,  824,  627,  290,  290,  290,  824,
290,  290,  824,  290,  290,  290,  629,  290,  290,  824,
628,  290,  290,  290,  290,  630,  824,  290,  290,  290,
824,  631,  290,  824,  290,  290,  290,  290,  632,  290,
290,  290,  290,  824,  290,  290,  290,  290,  824,  290,
824,  290,  290,  290,  824,  635,  290,  290,  633,  290,
290,  290,  634,  290,  290,  290,  290,  290,  290,  824,
290,  824,  824,  636,  824,  290,  637,  824,  290,  824,

290,  824,  638,  824,  824,  290,  824,  824,  290,  590,
639,  824,  590,  590,  640,  640,  590,  590,  590,  590,
590,  590,  590,  590,  590,  590,  590,  640,  590,  590,
590,  590,  590,  590,  640,  640,  640,  640,  590,  590,
590,  590,  640,  640,  640,  640,  640,  640,  640,  640,
640,  640,  640,  640,  640,  640,  640,  640,  640,  640,
640,  590,  590,  590,  590,  590,  590,  590,  590,  590,
641,  642,  643,  644,  645,  645,  646,  647,  648,  649,
649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
649,  649,  649,  649,  650,  651,  652,  533,  534,  535,

373,  373,  373,  373,  373,  694,  694,  694,  694,  532,
653,  824,  824,  536,  373,  373,  373,  373,  373,  373,
373,  373,  373,  373,  373,  373,  373,  373,  373,  655,
655,  655,  655,  655,  656,  656,  656,  656,  656,  657,
657,  657,  657,  657,  382,  382,  382,  382,  382,  382,
382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
382,  382,  382,  382,  658,  658,  658,  658,  658,  659,
659,  659,  659,  659,  660,  660,  660,  660,  660,  373,
373,  373,  373,  824,  824,  661,  373,  373,  373,  373,
373,  662,  373,  824,  663,  373,  373,  373,  824,  373,

373,  824,  373,  373,  373,  665,  373,  373,  824,  664,
373,  373,  373,  373,  666,  824,  373,  373,  373,  824,
667,  373,  824,  373,  373,  373,  373,  668,  373,  373,
373,  373,  824,  373,  373,  373,  373,  824,  373,  824,
373,  373,  373,  824,  671,  373,  373,  669,  373,  373,
373,  670,  373,  373,  373,  373,  373,  373,  824,  373,
824,  824,  672,  824,  373,  673,  824,  373,  824,  373,
824,  674,  824,  824,  373,  824,  824,  373,  675,  675,
675,  675,  675,  675,  675,  675,  675,  675,  675,  675,
675,  675,  675,  676,  676,  676,  676,  676,  676,  676,

676,  676,  676,  676,  676,  676,  676,  676,  677,  677,
677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
677,  677,  677,  205,  205,  205,  205,  205,  205,  205,
205,  824,  205,  205,  205,  824,  205,  678,  205,  679,
205,  824,  680,  205,  205,  681,  205,  824,  205,  824,
205,  205,  205,  205,  205,  205,  824,  205,  205,  720,
720,  720,  205,  205,  205,  205,  205,  205,  205,  824,
824,  824,  205,  682,  205,  683,  684,  205,  205,  685,
205,  205,  205,  205,  205,  686,  824,  205,  687,  824,
688,  205,  824,  205,  205,  205,  205,  205,  650,  651,

652,  205,  824,  205,  824,  205,  689,  205,  591,  591,
591,  591,  591,  824,  653,  205,  824,  205,  691,  691,
691,  691,  691,  693,  693,  693,  693,  693,  695,  695,
695,  695,  695,  205,  205,  465,  465,  465,  465,  465,
724,  724,  724,  724,  205,  465,  465,  465,  465,  465,
824,  824,  824,  824,  205,  465,  465,  465,  465,  465,
465,  465,  465,  465,  465,  697,  697,  697,  697,  697,
698,  698,  698,  698,  698,  699,  699,  699,  699,  699,
474,  474,  474,  474,  474,  474,  474,  474,  474,  474,
474,  474,  474,  474,  474,  474,  474,  474,  474,  474,

700,  700,  700,  700,  700,  701,  701,  701,  701,  701,
702,  702,  702,  702,  702,  703,  703,  703,  703,  703,
703,  703,  703,  703,  703,  703,  703,  703,  703,  703,
618,  704,  704,  704,  704,  704,  824,  824,  824,  490,
704,  704,  704,  704,  704,  704,  704,  704,  704,  704,
490,  824,  490,  705,  705,  705,  705,  705,  705,  705,
705,  705,  705,  705,  705,  705,  705,  705,  290,  290,
290,  290,  290,  290,  290,  290,  824,  290,  290,  290,
824,  290,  706,  290,  707,  290,  824,  708,  290,  290,
709,  290,  824,  290,  824,  290,  290,  290,  290,  290,

290,  824,  290,  290,  824,  824,  824,  290,  290,  290,
290,  290,  290,  290,  824,  824,  824,  290,  710,  290,
711,  712,  290,  290,  713,  290,  290,  290,  290,  290,
714,  824,  290,  715,  824,  716,  290,  824,  290,  290,
290,  290,  290,  824,  639,  490,  290,  824,  290,  824,
290,  717,  290,  590,  640,  640,  640,  640,  640,  824,
290,  824,  290,  824,  590,  590,  590,  719,  721,  721,
721,  721,  721,  723,  723,  723,  723,  723,  725,  725,
725,  725,  725,  290,  290,  731,  731,  731,  731,  731,
824,  824,  824,  824,  290,  824,  824,  824,  719,  731,

731,  731,  731,  731,  290,  731,  731,  731,  731,  731,
732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
732,  732,  732,  732,  732,  373,  373,  373,  373,  373,
373,  373,  373,  824,  373,  373,  373,  824,  373,  733,
373,  734,  373,  824,  735,  373,  373,  736,  373,  824,
373,  824,  373,  373,  373,  373,  373,  373,  824,  373,
373,  824,  824,  824,  373,  373,  373,  373,  373,  373,
373,  824,  824,  824,  373,  737,  373,  738,  739,  373,
373,  740,  373,  373,  373,  373,  373,  741,  824,  373,
742,  824,  743,  373,  824,  373,  373,  373,  373,  373,

373,  373,  824,  373,  824,  373,  824,  373,  744,  373,
824,  373,  205,  205,  205,  205,  824,  373,  824,  373,
824,  373,  824,  205,  824,  205,  205,  205,  205,  205,
205,  205,  824,  205,  824,  205,  824,  205,  824,  205,
824,  746,  205,  205,  824,  745,  824,  205,  824,  205,
824,  205,  824,  205,  205,  205,  824,  205,  205,  747,
205,  205,  824,  205,  824,  205,  824,  748,  205,  824,
750,  205,  205,  205,  824,  205,  205,  205,  205,  824,
749,  205,  824,  205,  205,  205,  824,  205,  824,  751,
205,  205,  824,  205,  824,  205,  753,  752,  824,  824,

824,  205,  824,  824,  824,  205,  591,  591,  591,  591,
591,  205,  591,  591,  591,  591,  591,  591,  591,  591,
591,  591,  591,  591,  591,  591,  591,  754,  754,  754,
754,  754,  755,  755,  755,  755,  755,  756,  756,  756,
756,  756,  757,  757,  757,  757,  757,  757,  757,  757,
757,  757,  757,  757,  757,  757,  757,  758,  758,  758,
758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
758,  758,  290,  290,  290,  290,  290,  290,  824,  290,
290,  290,  290,  290,  824,  290,  824,  290,  290,  290,
290,  824,  760,  290,  824,  290,  759,  290,  824,  290,

290,  824,  290,  290,  290,  761,  290,  290,  824,  290,
290,  290,  824,  824,  290,  824,  762,  290,  824,  824,
764,  290,  290,  290,  290,  290,  290,  290,  824,  763,
824,  290,  824,  290,  290,  290,  290,  290,  290,  765,
768,  490,  824,  290,  824,  290,  766,  824,  290,  767,
640,  640,  640,  640,  640,  290,  824,  824,  290,  824,
824,  590,  640,  640,  640,  640,  640,  640,  640,  640,
640,  640,  640,  640,  640,  640,  640,  769,  769,  769,
769,  769,  770,  770,  770,  770,  770,  771,  771,  771,
771,  771,  373,  373,  373,  373,  373,  373,  824,  373,

373,  373,  373,  373,  824,  373,  824,  373,  373,  373,
373,  824,  777,  373,  824,  373,  776,  373,  824,  373,
373,  824,  373,  373,  373,  778,  373,  373,  824,  373,
373,  373,  824,  824,  373,  824,  779,  373,  824,  824,
781,  373,  373,  373,  373,  373,  373,  373,  824,  780,
824,  373,  824,  373,  373,  373,  373,  373,  373,  782,
205,  205,  824,  373,  824,  373,  783,  824,  373,  784,
824,  205,  205,  205,  824,  373,  205,  205,  373,  205,
205,  205,  785,  205,  786,  205,  205,  205,  205,  205,
205,  824,  788,  205,  205,  205,  205,  205,  824,  205,

205,  205,  205,  787,  824,  205,  205,  205,  205,  205,
824,  824,  205,  824,  824,  205,  824,  824,  205,  824,
824,  824,  205,  789,  789,  789,  789,  789,  205,  789,
789,  789,  789,  789,  789,  789,  789,  789,  789,  290,
290,  290,  290,  290,  290,  290,  290,  824,  290,  290,
290,  791,  290,  824,  290,  824,  290,  290,  290,  290,
290,  790,  290,  792,  290,  824,  290,  824,  290,  290,
793,  290,  290,  290,  290,  290,  290,  824,  290,  768,
490,  824,  290,  824,  290,  824,  290,  794,  794,  794,
794,  794,  290,  824,  290,  824,  290,  824,  824,  824,

590,  794,  794,  794,  794,  794,  794,  794,  794,  794,
794,  373,  373,  373,  373,  373,  373,  373,  373,  824,
373,  373,  373,  797,  373,  824,  373,  824,  373,  373,
373,  373,  373,  796,  373,  798,  373,  824,  373,  824,
373,  373,  799,  373,  373,  373,  373,  373,  373,  824,
373,  205,  205,  824,  373,  824,  373,  824,  373,  205,
205,  800,  205,  824,  373,  824,  373,  824,  373,  824,
205,  824,  205,  205,  205,  205,  205,  290,  290,  824,
801,  290,  290,  824,  205,  824,  205,  804,  290,  824,
802,  824,  290,  824,  205,  803,  205,  824,  290,  290,

290,  824,  805,  290,  290,  824,  824,  373,  373,  824,
290,  373,  373,  824,  290,  824,  806,  808,  373,  824,
290,  824,  373,  807,  290,  373,  373,  824,  373,  373,
373,  824,  809,  205,  205,  824,  373,  824,  824,  824,
373,  824,  810,  824,  205,  824,  373,  205,  205,  811,
373,  205,  205,  824,  205,  205,  205,  824,  205,  824,
812,  824,  205,  290,  290,  813,  205,  824,  205,  290,
290,  824,  205,  824,  290,  824,  205,  290,  290,  824,
290,  824,  814,  824,  290,  290,  290,  824,  290,  824,
290,  373,  373,  373,  373,  815,  290,  824,  290,  824,

373,  373,  373,  824,  373,  824,  290,  373,  373,  205,
205,  373,  373,  816,  373,  205,  205,  817,  373,  824,
205,  373,  290,  290,  290,  290,  205,  818,  373,  824,
205,  373,  373,  290,  824,  290,  205,  373,  373,  824,
819,  824,  373,  290,  824,  290,  205,  205,  373,  820,
205,  205,  373,  290,  290,  373,  373,  205,  373,  824,
824,  205,  824,  821,  290,  824,  373,  205,  290,  290,
822,  205,  823,  824,  290,  824,  373,  373,  373,  290,
824,  824,  824,  824,  824,  824,  824,  824,  373,  290,
824,  824,  824,  824,  824,  824,  824,  824,  373,   97,

97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
97,  103,  103,  103,  103,  103,  103,  103,  103,  103,
103,  103,  103,  109,  109,  109,  109,  109,  109,  109,
109,  109,  109,  109,  109,  114,  114,  114,  114,  114,
114,  114,  114,  114,  114,  114,  114,  117,  117,  117,
117,  117,  117,  117,  117,  117,  117,  117,  117,  163,
163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
163,  205,  824,  824,  824,  824,  824,  205,  214,  824,
824,  824,  824,  824,  214,  279,  279,  279,  824,  279,
279,  290,  824,  824,  824,  290,  824,  824,  824,  824,

824,  290,  299,  824,  824,  824,  824,  824,  299,  335,
335,  824,  824,  824,  335,  335,  335,  335,  335,  824,
335,  342,  342,  824,  824,  824,  342,  342,  342,  342,
342,  824,  342,  349,  349,  824,  824,  349,  349,  349,
349,  824,  349,  349,  349,  353,  353,  824,  824,  353,
353,  353,  353,  353,  353,  353,  353,  370,  824,  824,
824,  824,  370,  370,  370,  370,  824,  370,  370,  373,
824,  824,  824,  824,  824,  373,  382,  824,  824,  824,
824,  824,  382,  433,  433,  433,  433,  433,  433,  433,
433,  433,  433,  433,  437,  437,  437,  437,  437,  437,

437,  437,  437,  437,  437,  444,  444,  444,  444,  444,
444,  444,  444,  444,  444,  444,  465,  824,  824,  824,
465,  824,  824,  824,  824,  824,  465,  474,  824,  824,
824,  824,  824,  474,  490,  490,  490,  490,  490,  490,
490,  824,  490,  490,  490,  490,  590,  590,  824,  590,
590,  590,  590,  590,  590,  590,  590,  590,  718,  718,
718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
728,  728,  728,  728,  728,  728,  728,  728,  728,  728,
728,  728,  772,  772,  772,  772,  772,  772,  772,  772,
772,  772,  772,  772,   19,  824,  824,  824,  824,  824,

824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
824,  824,  824,  824,  824
} ;

static yyconst flex_int16_t yy_chk[4266] =
{
0,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
3,    3,    3,    4,    4,    4,  653,    3,    9,    9,
4,    5,    5,    5,    3,   10,   10,    4,    5,    6,
6,    6,    7,    7,  652,    5,    6,   32,    8,    8,
648,   32,    7,    6,   11,   11,   11,    7,    8,   12,
12,   12,  599,    8,   21,   21,   21,   37,   67,   67,
11,   37,   37,   91,   91,   12,   13,   13,   13,   13,

13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
13,   13,   13,   13,   13,   13,   15,   15,   15,   15,
41,   22,  536,   42,   15,   15,   43,   44,  100,   15,
23,   23,  535,  100,   22,   15,   15,   15,   15,   15,
22,   41,   41,   23,   42,  158,  158,   43,   44,   23,

25,   25,   25,   25,   25,   25,   25,   25,   25,   26,
26,   26,   26,   26,   26,   26,   26,   26,   63,  531,
15,   16,   16,   16,   16,   65,   65,   65,   36,   16,
16,   36,  530,  101,   16,   36,   36,   36,  101,   63,
16,   16,   16,   16,   16,   38,  134,   38,  529,   36,
134,   36,   49,   49,   38,   38,   64,   64,   64,   64,
64,  194,  194,   49,  527,   38,   38,   70,   70,   70,
70,   49,  482,   49,  473,   16,   17,   17,   17,   17,
17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
17,   17,   17,   17,   17,   17,   27,   27,   50,   50,
51,   51,   53,   53,   50,  106,  443,   27,  229,   50,
106,   51,  229,   53,  209,  209,   50,   27,   51,   50,
53,   51,  442,   53,   53,   89,   89,   89,   52,   52,
27,   27,   27,   27,   27,   27,   27,   27,   27,   52,
54,   54,  441,   52,  440,   52,   55,   55,  418,   52,

390,   54,   56,   56,   57,   57,  381,   55,  371,   58,
58,   54,   56,   56,   57,   57,   74,   55,   82,   82,
58,   58,  369,   56,  364,   57,  363,   57,   58,   82,
58,   59,   59,   66,   66,   66,   66,   66,  362,   82,
218,  218,   59,   59,   68,   68,   68,   68,   68,  156,
156,  156,   59,   69,   69,   69,   69,   69,   71,   71,
71,   71,   71,   73,   73,   73,  284,  284,   73,   88,
88,   88,   88,   88,  294,  294,   74,   74,   74,   74,
74,   74,   74,   74,   74,   75,   75,   75,   75,   75,
75,   75,   75,   75,   77,   77,   78,   78,   79,   79,

81,   81,   78,  107,  361,   77,  355,   78,  107,   79,
307,   81,  298,   77,   78,   77,   79,   78,   81,   79,
288,   81,   81,   73,   73,   73,   73,   73,   73,   73,
73,   73,   76,   80,   80,   83,   83,   94,   94,   94,
94,   84,   84,  233,   80,  231,   83,  144,   80,  230,
80,   84,   84,  222,   80,  213,   83,  145,   76,   76,
85,   85,   84,   86,   86,   87,   87,  121,  144,   76,
85,   85,  121,  201,   86,   86,   87,   87,  145,   76,
198,   85,   86,   85,   86,  166,   87,   90,   90,   90,
90,   90,   76,   76,   76,   76,   76,   76,   76,   76,

76,   92,   92,   92,   92,   92,   93,   93,   93,   93,
93,   95,   95,   95,   95,   95,  123,  123,  123,  124,
125,  125,  143,  164,  146,  123,  127,  127,  123,  162,
123,  123,  124,  125,  123,  152,  139,  127,  124,  125,
139,  139,  154,  143,  143,  146,  245,  127,  128,  128,
128,  128,  128,  128,  128,  128,  128,  129,  129,  192,
192,  192,  138,  154,  148,  138,  141,  245,  129,  138,
138,  138,  140,  130,  140,  199,  199,  199,  129,  303,
303,  140,  140,  138,  120,  138,  155,  155,  155,  155,
155,  118,  140,  140,  157,  157,  157,  157,  157,  159,

159,  159,  159,  159,  160,  160,  160,  160,  161,  161,
161,  161,  161,  177,  177,  177,  177,  177,  177,  177,
177,  177,  178,  178,  178,  178,  178,  178,  178,  178,
178,  179,  179,  116,  180,  180,  182,  182,  181,  181,
184,  184,  179,  113,  181,  180,  112,  182,  111,  181,
108,  184,  179,  180,  182,  180,  181,  182,  184,  181,
105,  184,  184,  183,  183,  179,  179,  179,  179,  179,
179,  179,  179,  179,  183,  185,  185,  102,  183,   99,
183,  186,  186,  247,  183,   96,  185,  187,  187,  188,
188,   72,  186,   61,  189,  189,  185,  187,  187,  188,

188,   46,  186,   28,  247,  189,  189,   19,  187,  240,
188,  240,  188,  189,  240,  189,  190,  190,  191,  191,
191,  191,  191,  196,  196,  196,  196,  190,  190,  193,
193,  193,  193,  193,  207,  207,  207,  190,  195,  195,
195,  195,  195,  197,  197,  197,  197,  197,  202,  202,
202,  203,  203,  203,    0,  204,  377,  377,  205,  205,
241,  202,  241,    0,  203,  241,    0,  202,  204,  205,
203,  216,  216,  216,  204,  211,  211,  211,  211,  205,
206,  206,  206,  206,  206,  208,  208,  208,  208,  208,
210,  210,  210,  210,  210,  212,  212,  212,  212,  212,

215,  215,  215,  215,  215,  217,  217,  217,  217,  217,
219,  219,  219,  219,  219,  220,  220,  220,  220,  221,
221,  221,  221,  221,  223,  223,  224,  224,  238,    0,
249,  232,  289,  238,  238,  223,  242,  224,  232,  232,
0,  238,  238,    0,  268,  223,  238,  224,  238,  232,
232,  249,  238,  238,  239,  289,  239,  242,  242,  251,
251,  252,  252,  239,  239,  268,  253,  253,    0,  251,
251,    0,  252,    0,  239,  239,    0,  253,  254,  254,
251,  252,  252,  253,  255,  255,  289,  253,    0,  254,
0,  256,  256,  386,  386,  255,  257,  257,    0,  254,

256,  365,  256,    0,  255,  255,    0,  257,  258,  258,
259,  259,  256,    0,  365,  257,    0,  257,    0,  258,
365,  259,  260,  260,    0,  258,  261,  261,    0,  258,
0,  259,    0,  260,  260,  469,  469,  261,  262,  262,
0,  263,  263,  260,  265,  265,  261,  261,    0,  262,
264,  264,  263,  262,  263,  265,  266,  266,    0,  262,
264,  264,  263,  269,  269,  265,  279,  266,  265,  266,
0,  264,  478,  478,  269,  595,  595,  266,  270,  270,
270,  270,  270,    0,  269,  271,  271,  271,  271,  271,
272,  272,  272,  272,  272,  273,  273,  273,  273,  273,

274,  274,  274,  274,  274,  275,  275,  275,  275,  275,
276,  276,  276,  276,  276,  277,  277,  277,  277,  277,
278,  278,  278,  644,  644,  278,  279,  279,  279,  279,
279,  279,  279,  279,  279,  280,  280,  280,  280,  280,
280,  280,  280,  280,  281,  281,  281,  281,  281,  282,
282,  282,  283,  283,  283,  283,  283,  285,  285,  285,
285,  285,  286,  286,  286,  286,  287,  287,  287,  287,
287,  291,  291,  291,  291,  291,  299,    0,  290,  290,
278,  278,  278,  278,  278,  278,  278,  278,  278,  290,
292,  292,  292,  293,  293,  293,  293,  293,    0,  290,

295,  295,  295,  295,  295,  296,  296,  296,  296,  297,
297,  297,  297,  297,  300,  300,  300,  300,  300,  301,
301,  301,  302,  302,  302,  302,  302,  304,  304,  304,
304,  304,  305,  305,  305,  305,  299,  299,  299,  299,
299,  299,  299,  299,  299,  306,  306,  306,  306,  306,
308,  308,  309,  309,  310,  310,  311,  311,    0,  313,
313,  308,    0,  309,  310,  310,    0,  311,  312,  312,
313,  308,    0,  309,    0,  310,  311,  311,    0,  312,
313,  314,  314,  654,  654,  312,  315,  315,    0,  312,
727,  727,  314,  316,  316,  315,    0,  315,  317,  317,

0,  314,  314,    0,  316,  318,  318,  315,    0,  317,
319,  319,  316,    0,  316,  317,  318,  320,  320,  317,
0,  319,  319,    0,  321,  321,  318,    0,  320,  322,
322,  319,    0,  323,  323,  321,    0,  320,  320,  321,
322,    0,  322,  323,  323,  321,  324,  324,  325,  325,
322,  326,  326,    0,  323,  728,  728,  324,    0,  325,
0,  325,  326,  375,  375,  375,    0,  324,    0,  325,
324,    0,  326,  327,  327,  327,  327,  327,  328,  328,
328,  328,  328,  329,  329,  329,  329,  329,  330,  330,
330,  330,  330,  331,  331,  331,  331,  331,  332,  332,

332,  332,  332,  333,  333,  333,  333,  333,  334,  334,
334,  334,  334,  341,  341,  348,  348,  730,  730,  359,
359,  359,  772,  772,  366,  366,    0,  341,  359,  348,
0,  359,    0,  359,  359,  366,    0,  359,  367,  367,
368,  368,  368,  373,  373,  366,  384,  384,  384,  367,
379,  379,  379,  379,  373,  368,  368,  774,  774,  367,
388,  388,  388,  388,  373,  374,  374,  374,  374,  374,
376,  376,  376,  376,  376,  378,  378,  378,  378,  378,
380,  380,  380,  380,  380,  382,  382,  382,  382,  382,
382,  382,  382,  382,  383,  383,  383,  383,  383,  385,

385,  385,  385,  385,  387,  387,  387,  387,  387,  389,
389,  389,  389,  389,  391,  391,  392,  392,  393,  393,
394,  394,    0,  396,  396,  391,    0,  392,  393,  393,
0,  394,  395,  395,  396,  391,    0,  392,    0,  393,
394,  394,    0,  395,  396,  397,  397,    0,    0,  395,
398,  398,    0,  395,    0,    0,  397,  399,  399,  398,
0,  398,  400,  400,    0,  397,  397,    0,  399,  401,
401,  398,    0,  400,  402,  402,  399,    0,  399,  400,
401,  403,  403,  400,    0,  402,  402,    0,  404,  404,
401,    0,  403,  405,  405,  402,    0,  406,  406,  404,

0,  403,  403,  404,  405,    0,  405,  406,  406,  404,
407,  407,  408,  408,  405,  409,  409,    0,  406,    0,
0,  407,    0,  408,    0,  408,  409,  467,  467,  467,
0,  407,    0,  408,  407,    0,  409,  410,  410,  410,
410,  410,  411,  411,  411,  411,  411,  412,  412,  412,
412,  412,  413,  413,  413,  413,  413,  414,  414,  414,
414,  414,  415,  415,  415,  415,  415,  416,  416,  416,
416,  416,  419,  419,  419,  419,  419,  420,  420,  420,
420,  420,  421,  421,  421,  421,  421,  422,  422,  422,
422,  422,  423,  423,  423,  423,  423,  424,  424,  424,

424,  424,  425,  425,  425,  425,  425,  426,  426,  426,
426,  426,  427,  427,  427,  427,  427,  428,  428,  428,
428,  428,  429,  429,  429,  429,  429,  430,  430,  430,
430,  430,  431,  431,  431,  431,  431,  432,  432,  432,
432,  432,  439,  446,  446,  445,  445,  447,  447,  439,
439,  445,    0,  446,  446,  447,  445,    0,  447,    0,
439,  439,  448,  448,  446,    0,  445,    0,  447,  449,
449,  450,  450,  448,  451,  451,  452,  452,    0,  449,
449,    0,  450,  448,  452,  451,    0,  452,  453,  453,
449,    0,  450,  454,  454,  451,    0,  452,  453,  453,

455,  455,  456,  456,  454,  457,  457,  458,  458,  453,
0,  455,  456,  456,  454,  454,  457,    0,  458,  459,
459,  455,  455,  456,  458,    0,  457,    0,  458,    0,
459,  460,  460,  462,  462,  462,  462,  462,    0,    0,
459,    0,  460,  476,  476,  476,  460,  463,  463,  463,
463,  463,  460,  461,  461,    0,  461,  461,  461,  461,
461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
461,  461,  461,  461,  461,  461,  461,  461,  461,  461,

461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
461,  461,  461,  464,  464,  464,  464,  464,  465,  466,
466,  466,  466,  466,  468,  468,  468,  468,  468,  470,
470,  470,  470,  470,  471,  471,  471,  471,  472,  472,
472,  472,  472,  474,  475,  475,  475,  475,  475,  477,
477,  477,  477,  477,  479,  479,  479,  479,  479,  480,
480,  480,  480,  481,  481,  481,  481,  481,  483,  483,
483,  483,  483,  484,  484,  484,  484,  484,  465,  465,
465,  465,  465,  465,  465,  465,  465,  485,  485,  485,

485,  485,  486,  486,  486,  486,  486,  487,  487,  487,
487,  487,    0,  474,  474,  474,  474,  474,  474,  474,
474,  474,  488,  488,  488,  488,  488,  489,  489,  489,
489,  489,  491,  492,  492,  492,  492,  492,  593,  593,
593,  491,  493,  493,  493,  493,  493,  494,  494,  494,
494,  494,  491,    0,  491,  495,  495,  495,  495,  495,
496,  496,  496,  496,  496,  497,  497,  497,  497,  497,
498,  498,  498,  498,  498,  499,  499,  499,  499,  499,
500,  500,  500,  500,  500,  501,  501,  501,  501,  501,
502,  502,  502,  502,  502,  503,  503,  503,  503,  503,

504,  504,  504,  504,  504,  505,  505,  505,  505,  505,
506,  506,  507,  507,    0,    0,  506,  508,  508,  509,
509,  506,  507,  507,    0,  508,  510,  510,  508,    0,
509,  506,    0,  507,  511,  511,  510,  510,  508,    0,
509,  512,  512,  513,  513,  511,    0,  510,  514,  514,
0,  513,  512,    0,  513,  511,  515,  515,  514,  514,
516,  516,  512,    0,  513,  517,  517,  515,    0,  514,
0,  516,  518,  518,    0,  517,  517,  515,  515,  519,
519,  516,  516,  518,  520,  520,  517,  521,  521,    0,
519,    0,    0,  518,    0,  520,  519,    0,  521,    0,

519,    0,  521,    0,    0,  520,    0,    0,  521,  522,
522,    0,  522,  522,  522,  522,  522,  522,  522,  522,
522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
522,  522,  522,  522,  522,  522,  522,  522,  522,  523,
523,  523,  523,  523,  524,  524,  524,  524,  524,  525,
525,  525,  525,  525,  532,  532,  532,  533,  533,  533,

537,  537,  537,  537,  537,  597,  597,  597,  597,  532,
532,    0,    0,  533,  538,  538,  538,  538,  538,  539,
539,  539,  539,  539,  540,  540,  540,  540,  540,  541,
541,  541,  541,  541,  542,  542,  542,  542,  542,  543,
543,  543,  543,  543,  544,  544,  544,  544,  544,  545,
545,  545,  545,  545,  546,  546,  546,  546,  546,  547,
547,  547,  547,  547,  548,  548,  548,  548,  548,  549,
549,  549,  549,  549,  550,  550,  550,  550,  550,  551,
551,  552,  552,    0,    0,  551,  553,  553,  554,  554,
551,  552,  552,    0,  553,  555,  555,  553,    0,  554,

551,    0,  552,  556,  556,  555,  555,  553,    0,  554,
557,  557,  558,  558,  556,    0,  555,  559,  559,    0,
558,  557,    0,  558,  556,  560,  560,  559,  559,  561,
561,  557,    0,  558,  562,  562,  560,    0,  559,    0,
561,  563,  563,    0,  562,  562,  560,  560,  564,  564,
561,  561,  563,  565,  565,  562,  566,  566,    0,  564,
0,    0,  563,    0,  565,  564,    0,  566,    0,  564,
0,  566,    0,    0,  565,    0,    0,  566,  567,  567,
567,  567,  567,  568,  568,  568,  568,  568,  569,  569,
569,  569,  569,  570,  570,  570,  570,  570,  571,  571,

571,  571,  571,  572,  572,  572,  572,  572,  573,  573,
573,  573,  573,  574,  574,  574,  574,  574,  575,  575,
575,  575,  575,  576,  576,  577,  577,  578,  578,  579,
579,    0,  580,  580,  576,    0,  577,  576,  578,  578,
579,    0,  579,  580,  576,  580,  577,    0,  578,    0,
579,  581,  581,  580,  582,  582,    0,  583,  583,  642,
642,  642,  581,  584,  584,  582,  585,  585,  583,    0,
0,    0,  581,  581,  584,  582,  583,  585,  583,  584,
586,  586,  587,  587,  584,  585,    0,  585,  586,    0,
587,  586,    0,  587,  588,  588,  589,  589,  650,  650,

650,  586,    0,  587,    0,  588,  589,  589,  592,  592,
592,  592,  592,    0,  650,  588,    0,  589,  594,  594,
594,  594,  594,  596,  596,  596,  596,  596,  598,  598,
598,  598,  598,  600,  600,  601,  601,  601,  601,  601,
646,  646,  646,  646,  600,  602,  602,  602,  602,  602,
0,    0,    0,    0,  600,  603,  603,  603,  603,  603,
604,  604,  604,  604,  604,  605,  605,  605,  605,  605,
606,  606,  606,  606,  606,  607,  607,  607,  607,  607,
608,  608,  608,  608,  608,  609,  609,  609,  609,  609,
610,  610,  610,  610,  610,  611,  611,  611,  611,  611,

612,  612,  612,  612,  612,  613,  613,  613,  613,  613,
614,  614,  614,  614,  614,  615,  615,  615,  615,  615,
616,  616,  616,  616,  616,  617,  617,  617,  617,  617,
618,  619,  619,  619,  619,  619,    0,    0,    0,  618,
620,  620,  620,  620,  620,  621,  621,  621,  621,  621,
618,    0,  618,  622,  622,  622,  622,  622,  623,  623,
623,  623,  623,  624,  624,  624,  624,  624,  625,  625,
626,  626,  627,  627,  628,  628,    0,  629,  629,  625,
0,  626,  625,  627,  627,  628,    0,  628,  629,  625,
629,  626,    0,  627,    0,  628,  630,  630,  629,  631,

631,    0,  632,  632,    0,    0,    0,  630,  633,  633,
631,  634,  634,  632,    0,    0,    0,  630,  630,  633,
631,  632,  634,  632,  633,  635,  635,  636,  636,  633,
634,    0,  634,  635,    0,  636,  635,    0,  636,  637,
637,  638,  638,    0,  639,  639,  635,    0,  636,    0,
637,  638,  638,  639,  641,  641,  641,  641,  641,    0,
637,    0,  638,    0,  639,  639,  639,  639,  643,  643,
643,  643,  643,  645,  645,  645,  645,  645,  647,  647,
647,  647,  647,  649,  649,  655,  655,  655,  655,  655,
0,    0,    0,    0,  649,    0,    0,    0,  639,  656,

656,  656,  656,  656,  649,  657,  657,  657,  657,  657,
658,  658,  658,  658,  658,  659,  659,  659,  659,  659,
660,  660,  660,  660,  660,  661,  661,  662,  662,  663,
663,  664,  664,    0,  665,  665,  661,    0,  662,  661,
663,  663,  664,    0,  664,  665,  661,  665,  662,    0,
663,    0,  664,  666,  666,  665,  667,  667,    0,  668,
668,    0,    0,    0,  666,  669,  669,  667,  670,  670,
668,    0,    0,    0,  666,  666,  669,  667,  668,  670,
668,  669,  671,  671,  672,  672,  669,  670,    0,  670,
671,    0,  672,  671,    0,  672,  673,  673,  674,  674,

675,  675,    0,  671,    0,  672,    0,  673,  674,  674,
0,  675,  676,  676,  678,  678,    0,  673,    0,  674,
0,  675,    0,  676,    0,  678,  679,  679,  680,  680,
681,  681,    0,  676,    0,  678,    0,  679,    0,  680,
0,  681,  682,  682,    0,  680,    0,  679,    0,  680,
0,  681,    0,  682,  683,  683,    0,  684,  684,  682,
685,  685,    0,  682,    0,  683,    0,  683,  684,    0,
685,  685,  686,  686,    0,  683,  687,  687,  684,    0,
684,  685,    0,  686,  688,  688,    0,  687,    0,  686,
689,  689,    0,  686,    0,  688,  688,  687,    0,    0,

0,  689,    0,    0,    0,  688,  690,  690,  690,  690,
690,  689,  691,  691,  691,  691,  691,  692,  692,  692,
692,  692,  693,  693,  693,  693,  693,  694,  694,  694,
694,  694,  695,  695,  695,  695,  695,  696,  696,  696,
696,  696,  697,  697,  697,  697,  697,  698,  698,  698,
698,  698,  699,  699,  699,  699,  699,  700,  700,  700,
700,  700,  701,  701,  701,  701,  701,  702,  702,  702,
702,  702,  704,  704,  706,  706,  707,  707,    0,  708,
708,  709,  709,  704,    0,  706,    0,  707,  710,  710,
708,    0,  709,  704,    0,  706,  708,  707,    0,  710,

708,    0,  709,  711,  711,  710,  712,  712,    0,  710,
713,  713,    0,    0,  711,    0,  711,  712,    0,    0,
713,  713,  714,  714,  711,  715,  715,  712,    0,  712,
0,  713,    0,  714,  717,  717,  715,  716,  716,  714,
719,  719,    0,  714,    0,  717,  715,    0,  716,  716,
720,  720,  720,  720,  720,  717,    0,    0,  716,    0,
0,  719,  721,  721,  721,  721,  721,  722,  722,  722,
722,  722,  723,  723,  723,  723,  723,  724,  724,  724,
724,  724,  725,  725,  725,  725,  725,  726,  726,  726,
726,  726,  731,  731,  733,  733,  734,  734,    0,  735,

735,  736,  736,  731,    0,  733,    0,  734,  737,  737,
735,    0,  736,  731,    0,  733,  735,  734,    0,  737,
735,    0,  736,  738,  738,  737,  739,  739,    0,  737,
740,  740,    0,    0,  738,    0,  738,  739,    0,    0,
740,  740,  741,  741,  738,  742,  742,  739,    0,  739,
0,  740,    0,  741,  744,  744,  742,  743,  743,  741,
745,  745,    0,  741,    0,  744,  742,    0,  743,  743,
0,  745,  746,  746,    0,  744,  747,  747,  743,  749,
749,  745,  745,  746,  747,  748,  748,  747,  750,  750,
749,    0,  749,  746,  751,  751,  748,  747,    0,  750,

749,  752,  752,  748,    0,  751,  748,  753,  753,  750,
0,    0,  752,    0,    0,  751,    0,    0,  753,    0,
0,    0,  752,  754,  754,  754,  754,  754,  753,  755,
755,  755,  755,  755,  756,  756,  756,  756,  756,  759,
759,  760,  760,  761,  761,  762,  762,    0,  764,  764,
759,  761,  760,    0,  761,    0,  762,  763,  763,  764,
759,  759,  760,  762,  761,    0,  762,    0,  763,  764,
763,  765,  765,  766,  766,  767,  767,    0,  763,  768,
768,    0,  765,    0,  766,    0,  767,  769,  769,  769,
769,  769,  765,    0,  766,    0,  767,    0,    0,    0,

768,  770,  770,  770,  770,  770,  771,  771,  771,  771,
771,  776,  776,  777,  777,  778,  778,  779,  779,    0,
781,  781,  776,  778,  777,    0,  778,    0,  779,  780,
780,  781,  776,  776,  777,  779,  778,    0,  779,    0,
780,  781,  780,  782,  782,  783,  783,  784,  784,    0,
780,  785,  785,    0,  782,    0,  783,    0,  784,  786,
786,  785,  785,    0,  782,    0,  783,    0,  784,    0,
786,    0,  785,  787,  787,  788,  788,  790,  790,    0,
786,  791,  791,    0,  787,    0,  788,  790,  790,    0,
787,    0,  791,    0,  787,  788,  788,    0,  790,  792,

792,    0,  791,  793,  793,    0,    0,  796,  796,    0,
792,  797,  797,    0,  793,    0,  792,  796,  796,    0,
792,    0,  797,  793,  793,  798,  798,    0,  796,  799,
799,    0,  797,  800,  800,    0,  798,    0,    0,    0,
799,    0,  798,    0,  800,    0,  798,  801,  801,  799,
799,  802,  802,    0,  800,  803,  803,    0,  801,    0,
801,    0,  802,  804,  804,  803,  803,    0,  801,  805,
805,    0,  802,    0,  804,    0,  803,  806,  806,    0,
805,    0,  805,    0,  804,  807,  807,    0,  806,    0,
805,  808,  808,  810,  810,  807,  807,    0,  806,    0,

809,  809,  808,    0,  810,    0,  807,  811,  811,  812,
812,  809,  808,  809,  810,  813,  813,  811,  811,    0,
812,  809,  814,  814,  815,  815,  813,  812,  811,    0,
812,  816,  816,  814,    0,  815,  813,  817,  817,    0,
814,    0,  816,  814,    0,  815,  818,  818,  817,  816,
821,  821,  816,  819,  819,  820,  820,  818,  817,    0,
0,  821,    0,  818,  819,    0,  820,  818,  822,  822,
819,  821,  820,    0,  819,    0,  820,  823,  823,  822,
0,    0,    0,    0,    0,    0,    0,    0,  823,  822,
0,    0,    0,    0,    0,    0,    0,    0,  823,  825,

825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
825,  826,  826,  826,  826,  826,  826,  826,  826,  826,
826,  826,  826,  827,  827,  827,  827,  827,  827,  827,
827,  827,  827,  827,  827,  828,  828,  828,  828,  828,
828,  828,  828,  828,  828,  828,  828,  829,  829,  829,
829,  829,  829,  829,  829,  829,  829,  829,  829,  830,
830,  830,  830,  830,  830,  830,  830,  830,  830,  830,
830,  831,    0,    0,    0,    0,    0,  831,  832,    0,
0,    0,    0,    0,  832,  833,  833,  833,    0,  833,
833,  834,    0,    0,    0,  834,    0,    0,    0,    0,

0,  834,  835,    0,    0,    0,    0,    0,  835,  836,
836,    0,    0,    0,  836,  836,  836,  836,  836,    0,
836,  837,  837,    0,    0,    0,  837,  837,  837,  837,
837,    0,  837,  838,  838,    0,    0,  838,  838,  838,
838,    0,  838,  838,  838,  839,  839,    0,    0,  839,
839,  839,  839,  839,  839,  839,  839,  840,    0,    0,
0,    0,  840,  840,  840,  840,    0,  840,  840,  841,
0,    0,    0,    0,    0,  841,  842,    0,    0,    0,
0,    0,  842,  843,  843,  843,  843,  843,  843,  843,
843,  843,  843,  843,  844,  844,  844,  844,  844,  844,

844,  844,  844,  844,  844,  845,  845,  845,  845,  845,
845,  845,  845,  845,  845,  845,  846,    0,    0,    0,
846,    0,    0,    0,    0,    0,  846,  847,    0,    0,
0,    0,    0,  847,  848,  848,  848,  848,  848,  848,
848,    0,  848,  848,  848,  848,  849,  849,    0,  849,
849,  849,  849,  849,  849,  849,  849,  849,  850,  850,
850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
851,  851,  851,  851,  851,  851,  851,  851,  851,  851,
851,  851,  852,  852,  852,  852,  852,  852,  852,  852,
852,  852,  852,  852,  824,  824,  824,  824,  824,  824,

824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
824,  824,  824,  824,  824
} ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf = 0, *yy_state_ptr = 0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
/*
 *  Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 *  Copyright (C) 2008-2012 - Scilab Enterprises - Bruno JOFRET
 *
 * Copyright (C) 2012 - 2016 - Scilab Enterprises
 *
 * This file is hereby licensed under the terms of the GNU GPL v2.0,
 * pursuant to article 5.3.4 of the CeCILL v.2.1.
 * This file was originally licensed under the terms of the CeCILL v2.1,
 * and continues to be available under such terms.
 * For more information, see the COPYING file which you should have received
 * along with this program.
 *
 */

#include <stack>

#include "isatty.hxx"
#include "parse.hxx"
#include "parser_private.hxx"

#include "context.hxx"

extern "C"
{
#include "charEncoding.h"
#include "sci_malloc.h"
}

static std::stack<int> paren_levels;

static int comment_level = 0;
static int last_token = 0;
static int exit_status = PARSE_ERROR;
static int str_opener_column = 0;
static std::string current_file;
static std::string program_name;

static std::string pstBuffer;

extern void yyerror(std::string);

#define YY_USER_ACTION                          \
    yylloc.first_column = yylloc.last_column; yylloc.last_column += yyleng;
//yylloc.last_column += yyleng;

/* -*- Verbose Special Debug -*- */
//#define DEV
//#define TOKENDEV

#ifdef DEV
#define DEBUG(x) std::cout << "[DEBUG] " << x << std::endl;
#else
#define DEBUG(x) /* Nothing */
#endif

#define INITIAL 0
#define SIMPLESTRING 1
#define DOUBLESTRING 2
#define REGIONCOMMENT 3
#define LINECOMMENT 4
#define LINEBREAK 5
#define MATRIX 6
#define SHELLMODE 7
#define BEGINID 8

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

static void yyunput (int c, char *buf_ptr  );

#ifndef yytext_ptr
static void yy_flex_strncpy (char *, yyconst char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = NULL;

static void yy_push_state (int new_state );

static void yy_pop_state (void );

static int yy_top_state (void );

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
 
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
register yy_state_type yy_current_state;
register char * yy_cp, *yy_bp;
register int yy_act;

if ( !(yy_init) )
{
    (yy_init) = 1;

#ifdef YY_USER_INIT
    YY_USER_INIT;
#endif

    /* Create the reject buffer large enough to save one state per allowed character. */
    if ( ! (yy_state_buf) )
    {
        (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
    }
    if ( ! (yy_state_buf) )
    {
        YY_FATAL_ERROR( "out of dynamic memory in yylex()" );
    }

    if ( ! (yy_start) )
    {
        (yy_start) = 1;    /* first start state */
    }

    if ( ! yyin )
    {
        yyin = stdin;
    }

    if ( ! yyout )
    {
        yyout = stdout;
    }

    if ( ! YY_CURRENT_BUFFER )
    {
        yyensure_buffer_stack ();
        YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin, YY_BUF_SIZE );
    }

    yy_load_buffer_state( );
}

while ( 1 )		/* loops until end-of-file is reached */
{
    yy_cp = (yy_c_buf_p);

    /* Support of yytext. */
    *yy_cp = (yy_hold_char);

    /* yy_bp points to the position in yy_ch_buf of the start of
     * the current run.
     */
    yy_bp = yy_cp;

    yy_current_state = (yy_start);
    yy_current_state += YY_AT_BOL();

    (yy_state_ptr) = (yy_state_buf);
    *(yy_state_ptr)++ = yy_current_state;

yy_match:
    do
    {
        register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
        while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
        {
            yy_current_state = (int) yy_def[yy_current_state];
            if ( yy_current_state >= 825 )
            {
                yy_c = yy_meta[(unsigned int) yy_c];
            }
        }
        yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
        *(yy_state_ptr)++ = yy_current_state;
        ++yy_cp;
    }
    while ( yy_base[yy_current_state] != 4195 );

yy_find_action:
    yy_current_state = *--(yy_state_ptr);
    (yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
    for ( ; ; ) /* until we find what rule we matched */
    {
        if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
        {
            yy_act = yy_acclist[(yy_lp)];
            if ( yy_act & YY_TRAILING_HEAD_MASK ||
                    (yy_looking_for_trail_begin) )
            {
                if ( yy_act == (yy_looking_for_trail_begin) )
                {
                    (yy_looking_for_trail_begin) = 0;
                    yy_act &= ~YY_TRAILING_HEAD_MASK;
                    break;
                }
            }
            else if ( yy_act & YY_TRAILING_MASK )
            {
                (yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
                (yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
            }
            else
            {
                (yy_full_match) = yy_cp;
                (yy_full_state) = (yy_state_ptr);
                (yy_full_lp) = (yy_lp);
                break;
            }
            ++(yy_lp);
            goto find_rule;
        }
        --yy_cp;
        yy_current_state = *--(yy_state_ptr);
        (yy_lp) = yy_accept[yy_current_state];
    }

    YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

    switch ( yy_act )
    {
            /* beginning of action switch */
        case 1:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp = yy_bp + 3;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
            {
                // BOM found ==> ignored
            }
            YY_BREAK
        case 2:
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                return scan_throw(BOOLTRUE);
            }
            YY_BREAK
        case 3:
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                return scan_throw(BOOLFALSE);
            }
            YY_BREAK
        case 4:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::pushControlStatus(Parser::WithinIf);
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(IF);
            }
            YY_BREAK
        case 5:
            YY_RULE_SETUP
            {
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(THEN);
            }
            YY_BREAK
        case 6:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    // Pop to step out IF
                    ParserSingleInstance::popControlStatus();
                    ParserSingleInstance::pushControlStatus(Parser::WithinElse);
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(ELSE);
            }
            YY_BREAK
        case 7:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::popControlStatus();
                    ParserSingleInstance::pushControlStatus(Parser::WithinElseIf);
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(ELSEIF);
            }
            YY_BREAK
        case 8:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::popControlStatus();
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(END);
            }
            YY_BREAK
        case 9:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::pushControlStatus(Parser::WithinSelect);
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(SELECT);
            }
            YY_BREAK
        case 10:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::pushControlStatus(Parser::WithinSwitch);
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(SWITCH);
            }
            YY_BREAK
        case 11:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::popControlStatus();
                    ParserSingleInstance::pushControlStatus(Parser::WithinOtherwise);
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(OTHERWISE);
            }
            YY_BREAK
        case 12:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::popControlStatus();
                    ParserSingleInstance::pushControlStatus(Parser::WithinCase);
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(CASE);
            }
            YY_BREAK
        case 13:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::pushControlStatus(Parser::WithinFunction);
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(FUNCTION);
            }
            YY_BREAK
        case 14:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::popControlStatus();
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(ENDFUNCTION);
            }
            YY_BREAK
        case 15:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::pushControlStatus(Parser::WithinFor);
                }
                BEGIN(INITIAL);
                return scan_throw(FOR);
            }
            YY_BREAK
        case 16:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::pushControlStatus(Parser::WithinWhile);
                }
                BEGIN(INITIAL);
                return scan_throw(WHILE);
            }
            YY_BREAK
        case 17:
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                return scan_throw(DO);
            }
            YY_BREAK
        case 18:
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                return scan_throw(BREAK);
            }
            YY_BREAK
        case 19:
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                return scan_throw(CONTINUE);
            }
            YY_BREAK
        case 20:
            YY_RULE_SETUP
            {
                ParserSingleInstance::pushControlStatus(Parser::WithinTry);
                BEGIN(INITIAL);
                return scan_throw(TRY);
            }
            YY_BREAK
        case 21:
            YY_RULE_SETUP
            {
                // Pop to step out TRY
                ParserSingleInstance::popControlStatus();
                ParserSingleInstance::pushControlStatus(Parser::WithinCatch);
                BEGIN(INITIAL);
                return scan_throw(CATCH);
            }
            YY_BREAK
        case 22:
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                return scan_throw(RETURN);
            }
            YY_BREAK
        case 23:
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                return scan_throw(RETURN);
            }
            YY_BREAK
        case 24:
            /* rule 24 can match eol */
            YY_RULE_SETUP
            {
                BEGIN(BEGINID);
            }
            YY_BREAK

        case 25:
            YY_RULE_SETUP
            {
                wchar_t *pwText = to_wide_string(yytext);
                if (yytext != NULL && pwText == NULL)
                {
                    std::string str = "Can\'t convert \'";
                    str += yytext;
                    str += "\' to UTF-8";
                    BEGIN(INITIAL);
                    yyerror(str);
                    return scan_throw(FLEX_ERROR);
                }
                yylval.str = new std::wstring(pwText);
                FREE(pwText);
                types::InternalType * pIT = symbol::Context::getInstance()->get(symbol::Symbol(*yylval.str));
                if (pIT && pIT->isCallable())
                {
                    scan_throw(ID);
                    BEGIN(SHELLMODE);
                }
                else
                {
                    BEGIN(INITIAL);
                    return scan_throw(ID);
                }
            }
            YY_BREAK

        case 26:
            YY_RULE_SETUP
            {
                return scan_throw(NOT);
            }
            YY_BREAK
        case 27:
            YY_RULE_SETUP
            {
                return scan_throw(DOLLAR);
            }
            YY_BREAK
        case 28:
            YY_RULE_SETUP
            {
                return scan_throw(BOOLTRUE);
            }
            YY_BREAK
        case 29:
            YY_RULE_SETUP
            {
                return scan_throw(BOOLFALSE);
            }
            YY_BREAK
        case 30:
            YY_RULE_SETUP
            {
                return scan_throw(AND);
            }
            YY_BREAK
        case 31:
            YY_RULE_SETUP
            {
                return scan_throw(ANDAND);
            }
            YY_BREAK
        case 32:
            YY_RULE_SETUP
            {
                return scan_throw(OR);
            }
            YY_BREAK
        case 33:
            YY_RULE_SETUP
            {
                return scan_throw(OROR);
            }
            YY_BREAK
        case 34:
            YY_RULE_SETUP
            {
                return scan_throw(LPAREN);
            }
            YY_BREAK
        case 35:
            YY_RULE_SETUP
            {
                return scan_throw(RPAREN);
            }
            YY_BREAK
        case 36:
            YY_RULE_SETUP
            {
                scan_step();
                return scan_throw(SEMI);
            }
            YY_BREAK
        case 37:
            YY_RULE_SETUP
            {
                scan_step();
                return scan_throw(COMMA);
            }
            YY_BREAK
        case 38:
            YY_RULE_SETUP
            {
                return scan_throw(COLON);
            }
            YY_BREAK
        case 39:
            YY_RULE_SETUP
            {
                yy_push_state(MATRIX);
                paren_levels.push(0);
                ParserSingleInstance::pushControlStatus(Parser::WithinCell);
                return scan_throw(LBRACE);
            }
            YY_BREAK
        case 40:
            YY_RULE_SETUP
            {
                return scan_throw(RBRACE);
            }
            YY_BREAK
        case 41:
            YY_RULE_SETUP
            {
                return scan_throw(DOTQUOTE);
            }
            YY_BREAK
        case 42:
            YY_RULE_SETUP
            {
                return scan_throw(DOTTIMES);
            }
            YY_BREAK
        case 43:
            YY_RULE_SETUP
            {
                return scan_throw(DOTRDIVIDE);
            }
            YY_BREAK
        case 44:
            YY_RULE_SETUP
            {
                return scan_throw(DOTLDIVIDE);
            }
            YY_BREAK
        case 45:
            YY_RULE_SETUP
            {
                return scan_throw(DOTPOWER);
            }
            YY_BREAK
        case 46:
            YY_RULE_SETUP
            {
                return scan_throw(MINUS);
            }
            YY_BREAK
        case 47:
            YY_RULE_SETUP
            {
                return scan_throw(PLUS);
            }
            YY_BREAK
        case 48:
            YY_RULE_SETUP
            {
                return scan_throw(TIMES);
            }
            YY_BREAK
        case 49:
            YY_RULE_SETUP
            {
                return scan_throw(RDIVIDE);
            }
            YY_BREAK
        case 50:
            YY_RULE_SETUP
            {
                return scan_throw(LDIVIDE);
            }
            YY_BREAK
        case 51:
            YY_RULE_SETUP
            {
                return scan_throw(POWER);
            }
            YY_BREAK
        case 52:
            YY_RULE_SETUP
            {
                return scan_throw(KRONTIMES);
            }
            YY_BREAK
        case 53:
            YY_RULE_SETUP
            {
                return scan_throw(KRONRDIVIDE);
            }
            YY_BREAK
        case 54:
            YY_RULE_SETUP
            {
                return scan_throw(KRONLDIVIDE);
            }
            YY_BREAK
        case 55:
            /* rule 55 can match eol */
            YY_RULE_SETUP
            {
                unput(yytext[yyleng - 1]);
                return scan_throw(CONTROLTIMES);
            }
            YY_BREAK
        case 56:
            /* rule 56 can match eol */
            YY_RULE_SETUP
            {
                unput(yytext[yyleng - 1]);
                return scan_throw(CONTROLRDIVIDE);
            }
            YY_BREAK
        case 57:
            /* rule 57 can match eol */
            YY_RULE_SETUP
            {
                unput(yytext[yyleng - 1]);
                return scan_throw(CONTROLLDIVIDE);
            }
            YY_BREAK
        case 58:
            YY_RULE_SETUP
            {
                return scan_throw(EQ);
            }
            YY_BREAK
        case 59:
            YY_RULE_SETUP
            {
                return scan_throw(NE);
            }
            YY_BREAK
        case 60:
            YY_RULE_SETUP
            {
                return scan_throw(LT);
            }
            YY_BREAK
        case 61:
            YY_RULE_SETUP
            {
                return scan_throw(GT);
            }
            YY_BREAK
        case 62:
            YY_RULE_SETUP
            {
                return scan_throw(LE);
            }
            YY_BREAK
        case 63:
            YY_RULE_SETUP
            {
                return scan_throw(GE);
            }
            YY_BREAK
        case 64:
            YY_RULE_SETUP
            {
                return scan_throw(ASSIGN);
            }
            YY_BREAK
        case 65:
            YY_RULE_SETUP
            {
                DEBUG("yy_push_state(MATRIX)");
                yy_push_state(MATRIX);
                paren_levels.push(0);
                ParserSingleInstance::pushControlStatus(Parser::WithinMatrix);
                return scan_throw(LBRACK);
            }
            YY_BREAK
        case 66:
            YY_RULE_SETUP
            {
                return scan_throw(RBRACK);
            }
            YY_BREAK
        case 67:
            YY_RULE_SETUP
            {
                return scan_throw(DOT);
            }
            YY_BREAK
        case 68:
            YY_RULE_SETUP
            {
                ParserSingleInstance::pushControlStatus(Parser::WithinDots);
                yy_push_state(LINEBREAK);
            }
            YY_BREAK
        case 69:
            YY_RULE_SETUP
            {
                yylval.number = atof(yytext);
#ifdef TOKENDEV
                std::cout << "--> [DEBUG] INTEGER : " << yytext << std::endl;
#endif
                //  scan_step();
                return scan_throw(VARINT);
            }
            YY_BREAK
        case 70:
            YY_RULE_SETUP
            {
                scan_exponent_convert(yytext);
                yylval.number = atof(yytext);
#ifdef TOKENDEV
                std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
                //scan_step();
                return scan_throw(VARFLOAT);
            }
            YY_BREAK
        case 71:
            YY_RULE_SETUP
            {
                yylval.number = atof(yytext);
#ifdef TOKENDEV
                std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
                //scan_step();
                return scan_throw(VARFLOAT);
            }
            YY_BREAK
        case 72:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
            {

                yylval.number = atof(yytext);
#ifdef TOKENDEV
                std::cout << "--> [DEBUG] NUMBER WITH DOT AS LAST CHARACTER : " << yytext << std::endl;
#endif
                //  scan_step();
                unput('.');
                yylloc.last_column--;
                return scan_throw(NUM);
            }
            YY_BREAK
        case 73:
            YY_RULE_SETUP
            {
                yylval.number = atof(yytext);
#ifdef TOKENDEV
                std::cout << "--> [DEBUG] NUMBER : " << yytext << std::endl;
#endif
                //  scan_step();
                return scan_throw(NUM);
            }
            YY_BREAK
        case 74:
            YY_RULE_SETUP
            {
                yylval.number = atof(yytext);
#ifdef TOKENDEV
                std::cout << "--> [DEBUG] LITTLE : " << yytext << std::endl;
#endif
                //  scan_step();
                return scan_throw(NUM);
            }
            YY_BREAK
        case 75:
            YY_RULE_SETUP
            {
                wchar_t *pwText = to_wide_string(yytext);
                if (yytext != NULL && pwText == NULL)
                {
                    std::string str = "Can\'t convert \'";
                    str += yytext;
                    str += "\' to UTF-8";
                    BEGIN(INITIAL);
                    yyerror(str);
                    return scan_throw(FLEX_ERROR);
                }
                yylval.str = new std::wstring(pwText);
                FREE(pwText);
#ifdef TOKENDEV
                std::cout << "--> [DEBUG] ID : " << yytext << std::endl;
#endif
                //  scan_step();
                return scan_throw(ID);
            }
            YY_BREAK
        case 76:
            YY_RULE_SETUP
            {
                yylval.comment = new std::wstring();
                comment_level = 1;
                ParserSingleInstance::pushControlStatus(Parser::WithinBlockComment);
                yy_push_state(REGIONCOMMENT);
            }
            YY_BREAK
        case 77:
            YY_RULE_SETUP
            {
                pstBuffer.clear();
                yy_push_state(LINECOMMENT);
            }
            YY_BREAK
        case 78:
            YY_RULE_SETUP
            {
                pstBuffer.clear();
                str_opener_column = yylloc.first_column;
                yy_push_state(DOUBLESTRING);
            }
            YY_BREAK
        case 79:
            YY_RULE_SETUP
            {
                /*
                ** Matrix Transposition special behaviour
                ** ID' []' toto()' are transposition call
                */
                if (last_token == ID
                || last_token == RBRACK
                || last_token == RPAREN
                || last_token == RBRACE
                || last_token == VARINT
                || last_token == VARFLOAT
                || last_token == NUM
                || last_token == BOOLTRUE
                || last_token == BOOLFALSE)
                {
                    return scan_throw(QUOTE);
                }
                else
                {
                    pstBuffer.clear();
                    str_opener_column = yylloc.first_column;
                    yy_push_state(SIMPLESTRING);
                }
            }
            YY_BREAK
        case 80:
            YY_RULE_SETUP
            {
                scan_step();
                scan_throw(SPACES);
            }
            YY_BREAK
        case 81:
            /* rule 81 can match eol */
            YY_RULE_SETUP
            {
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                scan_step();
                if (last_token != EOL)
                {
                    return scan_throw(EOL);
                }

            }
            YY_BREAK
        case 82:
            /* rule 82 can match eol */
            YY_RULE_SETUP
            {
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                scan_step();
                if (last_token != EOL)
                {
                    return scan_throw(EOL);
                }
                scan_throw(EOL);
            }
            YY_BREAK
        case 83:
            /* rule 83 can match eol */
            YY_RULE_SETUP
            {
                yylloc.last_line += 2;
                yylloc.last_column = 1;
                scan_step();
                if (last_token != EOL)
                {
                    return scan_throw(EOL);
                }
                scan_throw(EOL);
            }
            YY_BREAK
        case 84:
            YY_RULE_SETUP
            {
                std::string str = "Unexpected token \'";
                str += yytext;
                str += "\'";
                BEGIN(INITIAL);
                yyerror(str);
                return scan_throw(FLEX_ERROR);
            }
            YY_BREAK

        case 85:
            YY_RULE_SETUP
            {
                ++paren_levels.top();
                return scan_throw(LPAREN);
            }
            YY_BREAK
        case 86:
            YY_RULE_SETUP
            {
                --paren_levels.top();
                return scan_throw(RPAREN);
            }
            YY_BREAK
        case 87:
            YY_RULE_SETUP
            {
                unput(yytext[yyleng - 1]);
                if (last_token == ID
                || last_token == RPAREN
                || last_token == QUOTE
                || last_token == VARINT
                || last_token == VARFLOAT
                || last_token == NUM)
                {
                    return scan_throw(COMMA);
                }
            }
            YY_BREAK
        case 88:
            YY_RULE_SETUP
            {
                return scan_throw(COLON);
            }
            YY_BREAK
        case 89:
            /* rule 89 can match eol */
            YY_RULE_SETUP
            {
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                if (last_token != DOTS && last_token != EOL)
                {
                    return scan_throw(EOL);
                }
                scan_throw(EOL);
            }
            YY_BREAK
        case 90:
            YY_RULE_SETUP
            {
                DEBUG("yy_pop_state()");
                yy_pop_state();
                paren_levels.pop();
                ParserSingleInstance::popControlStatus();
                return scan_throw(RBRACK);
            }
            YY_BREAK
        case 91:
            YY_RULE_SETUP
            {
                yy_pop_state();
                paren_levels.pop();
                ParserSingleInstance::popControlStatus();
                return scan_throw(RBRACE);
            }
            YY_BREAK
        case 92:
        case 93:
            YY_RULE_SETUP
            {
                return scan_throw(PLUS);
            }
            YY_BREAK
        case 94:
        case 95:
            YY_RULE_SETUP
            {
                return scan_throw(MINUS);
            }
            YY_BREAK
        case 96:
            YY_RULE_SETUP
            {
                // no need to unput the '+'
                if (last_token != LBRACK
                && last_token != EOL
                && last_token != SEMI
                && last_token != COMMA
                && last_token != DOTTIMES
                && last_token != DOTRDIVIDE
                && last_token != DOTLDIVIDE
                && last_token != DOTPOWER
                && last_token != MINUS
                && last_token != PLUS
                && last_token != TIMES
                && last_token != RDIVIDE
                && last_token != LDIVIDE
                && last_token != POWER
                && last_token != KRONTIMES
                && last_token != KRONRDIVIDE
                && last_token != KRONLDIVIDE
                && last_token != EQ
                && last_token != NE
                && last_token != LT
                && last_token != GT
                && last_token != LE
                && last_token != GE
                && paren_levels.top() == 0)
                {
                    return scan_throw(COMMA);
                }
                else
                {
                    unput('+');
                    yylloc.last_column--;
                }
            }
            YY_BREAK
        case 97:
            YY_RULE_SETUP
            {
                unput('-');
                yylloc.last_column--;
                if (last_token != LBRACK
                && last_token != EOL
                && last_token != SEMI
                && last_token != COMMA
                && last_token != DOTTIMES
                && last_token != DOTRDIVIDE
                && last_token != DOTLDIVIDE
                && last_token != DOTPOWER
                && last_token != MINUS
                && last_token != PLUS
                && last_token != TIMES
                && last_token != RDIVIDE
                && last_token != LDIVIDE
                && last_token != POWER
                && last_token != KRONTIMES
                && last_token != KRONRDIVIDE
                && last_token != KRONLDIVIDE
                && last_token != EQ
                && last_token != NE
                && last_token != LT
                && last_token != GT
                && last_token != LE
                && last_token != GE
                && paren_levels.top() == 0)
                {
                    return scan_throw(COMMA);
                }
            }
            YY_BREAK
        case 98:
            YY_RULE_SETUP
            {
                std::string str = "Unexpected token \'";
                str += yytext;
                str += "\' within a matrix.";
                BEGIN(INITIAL);
                yyerror(str);
                return scan_throw(FLEX_ERROR);
            }
            YY_BREAK
        case 99:
            /* rule 99 can match eol */
            YY_RULE_SETUP
            {
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                scan_step();
            }
            YY_BREAK
        case 100:
            /* rule 100 can match eol */
            YY_RULE_SETUP
            {
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                scan_step();
            }
            YY_BREAK
        case 101:
            /* rule 101 can match eol */
            YY_RULE_SETUP
            {
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                scan_step();
                unput(' ');
                yylloc.last_column--;
            }
            YY_BREAK
        case 102:
            /* rule 102 can match eol */
            YY_RULE_SETUP
            {
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                scan_step();
                unput(' ');
                yylloc.last_column--;
            }
            YY_BREAK
        case YY_STATE_EOF(MATRIX):
        {
            yy_pop_state();
            paren_levels.pop();
        }
        YY_BREAK

        case 103:
            /* rule 103 can match eol */
            YY_RULE_SETUP
            {
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                scan_step();
                yy_pop_state();
                ParserSingleInstance::popControlStatus();
            }
            YY_BREAK
        case 104:
            YY_RULE_SETUP
            {
                ++comment_level;
                yy_push_state(REGIONCOMMENT);
            }
            YY_BREAK
        case 105:
            YY_RULE_SETUP
            {
                scan_throw(DOTS);
                pstBuffer.clear();
                yy_push_state(LINECOMMENT);
            }
            YY_BREAK
        case 106:
            YY_RULE_SETUP
            {
                /* Do nothing... */
            }
            YY_BREAK
        case YY_STATE_EOF(LINEBREAK):
        {
            yy_pop_state();
        }
        YY_BREAK
        case 107:
            YY_RULE_SETUP
            {
                std::string str = "Unexpected token \'";
                str += yytext;
                str += "\' after line break with .. or ...";
                BEGIN(INITIAL);
                yyerror(str);
                return scan_throw(FLEX_ERROR);
            }
            YY_BREAK

        case 108:
            /* rule 108 can match eol */
            YY_RULE_SETUP
            {
                //yylloc.last_line += 1;
                //yylloc.last_column = 1;
                //scan_step();
                yy_pop_state();
                for (int i = yyleng - 1 ; i >= 0 ; --i)
                {
                    //std::cerr << "Unputting i = {" << i << "}" << std::endl;
                    //std::cerr << "Unputting {" << yytext[i] << "}" << std::endl;
                    unput(yytext[i]);
                    yylloc.last_column--;
                }
                /*
                ** To forgot comments after lines break
                */
                if (last_token != DOTS)
                {
                    //std::cerr << "pstBuffer = {" << *pstBuffer << "}" << std::endl;
                    //std::cerr << "pstBuffer->c_str() = {" << pstBuffer->c_str() << "}" << std::endl;
                    wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
                    //std::wcerr << L"pwstBuffer = W{" << pwstBuffer << L"}" << std::endl;
                    if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
                    {
                        pstBuffer.clear();
                        std::string str = "Can\'t convert \'";
                        str += pstBuffer.c_str();
                        str += "\' to UTF-8";
                        BEGIN(INITIAL);
                        yyerror(str);
                        return scan_throw(FLEX_ERROR);
                    }
                    yylval.comment = new std::wstring(pwstBuffer);
                    pstBuffer.clear();
                    FREE (pwstBuffer);
                    return scan_throw(COMMENT);
                }
                else
                {
                    pstBuffer.clear();
                }
            }
            YY_BREAK
        case YY_STATE_EOF(LINECOMMENT):
        {
            yy_pop_state();
            wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
            if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
            {
                pstBuffer.clear();
                std::string str = "Can\'t convert \'";
                str += pstBuffer.c_str();
                str += "\' to UTF-8";
                BEGIN(INITIAL);
                yyerror(str);
                return scan_throw(FLEX_ERROR);
            }
            yylval.comment = new std::wstring(pwstBuffer);
            pstBuffer.clear();
            FREE (pwstBuffer);
            return scan_throw(COMMENT);
        }
        YY_BREAK
        case 109:
            YY_RULE_SETUP
            {
                // Put the char in a temporary CHAR buffer to go through UTF-8 trouble
                // only translate to WCHAR_T when popping state.
                pstBuffer += yytext;
            }
            YY_BREAK

        case 110:
            YY_RULE_SETUP
            {
                --comment_level;
                if (comment_level == 0)
                {
                    ParserSingleInstance::popControlStatus();
                    yy_pop_state();
                    //return scan_throw(BLOCKCOMMENT);
                }
            }
            YY_BREAK
        case 111:
            YY_RULE_SETUP
            {
                ++comment_level;
                yy_push_state(REGIONCOMMENT);
            }
            YY_BREAK
        case 112:
            /* rule 112 can match eol */
            YY_RULE_SETUP
            {
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                scan_step();
                *yylval.comment += L"\n//";
            }
            YY_BREAK
        case 113:
        case 114:
            YY_RULE_SETUP
            {
                wchar_t *pwText = to_wide_string(yytext);
                *yylval.comment += std::wstring(pwText);
                FREE(pwText);
            }
            YY_BREAK
        case YY_STATE_EOF(REGIONCOMMENT):
        {
            yy_pop_state();
            //    std::string str = "unexpected end of file in a comment";
            //    scan_error(str);
        }
        YY_BREAK

        case 115:
            YY_RULE_SETUP
            {
                pstBuffer += "\"";
            }
            YY_BREAK
        case 116:
            YY_RULE_SETUP
            {
                pstBuffer += "'";
            }
            YY_BREAK
        case 117:
            YY_RULE_SETUP
            {
                pstBuffer += "\"";
            }
            YY_BREAK
        case 118:
            YY_RULE_SETUP
            {
                pstBuffer += "'";
            }
            YY_BREAK
        case 119:
            YY_RULE_SETUP
            {
                yy_pop_state();
                //scan_step();
                wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
                if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
                {
                    pstBuffer.clear();
                    std::string str = "Can\'t convert \'";
                    str += pstBuffer.c_str();
                    str += "\' to UTF-8";
                    BEGIN(INITIAL);
                    yyerror(str);
                    return scan_throw(FLEX_ERROR);
                }
                yylval.str = new std::wstring(pwstBuffer);
                pstBuffer.clear();
                FREE(pwstBuffer);
                yylloc.first_column = str_opener_column;
                return scan_throw(STR);
            }
            YY_BREAK
        case 120:
            YY_RULE_SETUP
            {
                pstBuffer.clear();
                BEGIN(INITIAL);
                yyerror("Heterogeneous string detected, starting with \' and ending with \".");
                return scan_throw(FLEX_ERROR);
            }
            YY_BREAK
        case 121:
            /* rule 121 can match eol */
            YY_RULE_SETUP
            {
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                /* Do nothing... Just skip */
            }
            YY_BREAK
        case 122:
            /* rule 122 can match eol */
            YY_RULE_SETUP
            {
                pstBuffer.clear();
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                BEGIN(INITIAL);
                yyerror("Unexpected end of line in a string.");
                return scan_throw(FLEX_ERROR);
            }
            YY_BREAK
        case YY_STATE_EOF(SIMPLESTRING):
        {
            pstBuffer.clear();
            BEGIN(INITIAL);
            yyerror("Unexpected end of file in a string.");
            return scan_throw(FLEX_ERROR);
        }
        YY_BREAK
        case 123:
        case 124:
            YY_RULE_SETUP
            {
                //scan_step();
                pstBuffer += yytext;
            }
            YY_BREAK

        case 125:
            YY_RULE_SETUP
            {
                pstBuffer += "\"";
            }
            YY_BREAK
        case 126:
            YY_RULE_SETUP
            {
                pstBuffer += "'";
            }
            YY_BREAK
        case 127:
            YY_RULE_SETUP
            {
                pstBuffer += "\"";
            }
            YY_BREAK
        case 128:
            YY_RULE_SETUP
            {
                pstBuffer += "'";
            }
            YY_BREAK
        case 129:
            YY_RULE_SETUP
            {
                yy_pop_state();
                //scan_step();
                wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
                if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
                {
                    pstBuffer.clear();
                    std::string str = "Can\'t convert \'";
                    str += pstBuffer.c_str();
                    str += "\' to UTF-8";
                    BEGIN(INITIAL);
                    yyerror(str);
                    return scan_throw(FLEX_ERROR);
                }
                yylval.str = new std::wstring(pwstBuffer);
                pstBuffer.clear();
                FREE(pwstBuffer);
                yylloc.first_column = str_opener_column;
                return scan_throw(STR);
            }
            YY_BREAK
        case 130:
            YY_RULE_SETUP
            {
                pstBuffer.clear();
                BEGIN(INITIAL);
                yyerror("Heterogeneous string detected, starting with \" and ending with \'.");
                return scan_throw(FLEX_ERROR);
            }
            YY_BREAK
        case 131:
            /* rule 131 can match eol */
            YY_RULE_SETUP
            {
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                /* Do nothing... Just skip */
            }
            YY_BREAK
        case 132:
            /* rule 132 can match eol */
            YY_RULE_SETUP
            {
                pstBuffer.clear();
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                BEGIN(INITIAL);
                yyerror("Unexpected end of line in a string.");
                return scan_throw(FLEX_ERROR);
            }
            YY_BREAK
        case YY_STATE_EOF(DOUBLESTRING):
        {
            pstBuffer.clear();
            BEGIN(INITIAL);
            yyerror("Unexpected end of file in a string.");
            return scan_throw(FLEX_ERROR);
        }
        YY_BREAK
        case 133:
        case 134:
            YY_RULE_SETUP
            {
                //scan_step();
                pstBuffer += yytext;
            }
            YY_BREAK

        case 135:
            YY_RULE_SETUP
            {
                if (last_token == ID)
                {
                    scan_throw(SPACES);
                    return ID;
                }
            }
            YY_BREAK
        case 136:
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                scan_step();
                return scan_throw(SEMI);
            }
            YY_BREAK
        case 137:
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                scan_step();
                return scan_throw(COMMA);
            }
            YY_BREAK
        case 138:
            /* rule 138 can match eol */
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                scan_step();
                return scan_throw(EOL);
            }
            YY_BREAK
        case 139:
            YY_RULE_SETUP
            {
                if (last_token == STR || last_token == SPACES)
                {
                    wchar_t *pwText = to_wide_string(yytext);
                    yylval.str = new std::wstring(pwText);
                    FREE(pwText);
                    return scan_throw(STR);
                }
                else
                {
                    BEGIN(INITIAL);
                    return scan_throw(ASSIGN);
                }
            }
            YY_BREAK
        case 140:
            YY_RULE_SETUP
            {
                if (last_token == STR || last_token == SPACES)
                {
                    wchar_t *pwText = to_wide_string(yytext);
                    yylval.str = new std::wstring(pwText);
                    FREE(pwText);
                    return scan_throw(STR);
                }
                else
                {
                    BEGIN(INITIAL);
                    return scan_throw(LPAREN);
                }
            }
            YY_BREAK
        case 141:
            YY_RULE_SETUP
            {
                if (last_token == STR || last_token == SPACES)
                {
                    wchar_t *pwText = to_wide_string(yytext);
                    yylval.str = new std::wstring(pwText);
                    FREE(pwText);
                    return scan_throw(STR);
                }
                else
                {
                    BEGIN(INITIAL);
                    return scan_throw(LT);
                }
            }
            YY_BREAK
        case 142:
            YY_RULE_SETUP
            {
                if (last_token == STR || last_token == SPACES)
                {
                    wchar_t *pwText = to_wide_string(yytext);
                    yylval.str = new std::wstring(pwText);
                    FREE(pwText);
                    return scan_throw(STR);
                }
                else
                {
                    BEGIN(INITIAL);
                    return scan_throw(GT);
                }
            }
            YY_BREAK
        case 143:
            YY_RULE_SETUP
            {
                if (last_token == STR || last_token == SPACES)
                {
                    wchar_t *pwText = to_wide_string(yytext);
                    yylval.str = new std::wstring(pwText);
                    FREE(pwText);
                    return scan_throw(STR);
                }
                else
                {
                    BEGIN(INITIAL);
                    return scan_throw(NOT);
                }
            }
            YY_BREAK
        case 144:
            YY_RULE_SETUP
            {
                wchar_t *pwText = to_wide_string(yytext);
                yylval.str = new std::wstring(pwText);
                FREE(pwText);
                return scan_throw(STR);
            }
            YY_BREAK
        case YY_STATE_EOF(SHELLMODE):
        {
            BEGIN(INITIAL);
        }
        YY_BREAK

        case 145:
            YY_RULE_SETUP
            ECHO;
            YY_BREAK
        case YY_STATE_EOF(INITIAL):
        case YY_STATE_EOF(BEGINID):
            yyterminate();

        case YY_END_OF_BUFFER:
        {
            /* Amount of text matched not including the EOB char. */
            int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

            /* Undo the effects of YY_DO_BEFORE_ACTION. */
            *yy_cp = (yy_hold_char);
            YY_RESTORE_YY_MORE_OFFSET

            if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
            {
                /* We're scanning a new file or input source.  It's
                 * possible that this happened because the user
                 * just pointed yyin at a new source and called
                 * yylex().  If so, then we have to assure
                 * consistency between YY_CURRENT_BUFFER and our
                 * globals.  Here is the right place to do so, because
                 * this is the first action (other than possibly a
                 * back-up) that will match for the new input source.
                 */
                (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
                YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
                YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
            }

            /* Note that here we test for yy_c_buf_p "<=" to the position
             * of the first EOB in the buffer, since yy_c_buf_p will
             * already have been incremented past the NUL character
             * (since all states make transitions on EOB to the
             * end-of-buffer state).  Contrast this with the test
             * in input().
             */
            if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
            {
                /* This was really a NUL. */
                yy_state_type yy_next_state;

                (yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

                yy_current_state = yy_get_previous_state(  );

                /* Okay, we're now positioned to make the NUL
                 * transition.  We couldn't have
                 * yy_get_previous_state() go ahead and do it
                 * for us because it doesn't know how to deal
                 * with the possibility of jamming (and we don't
                 * want to build jamming into it because then it
                 * will run more slowly).
                 */

                yy_next_state = yy_try_NUL_trans( yy_current_state );

                yy_bp = (yytext_ptr) + YY_MORE_ADJ;

                if ( yy_next_state )
                {
                    /* Consume the NUL. */
                    yy_cp = ++(yy_c_buf_p);
                    yy_current_state = yy_next_state;
                    goto yy_match;
                }

                else
                {
                    yy_cp = (yy_c_buf_p);
                    goto yy_find_action;
                }
            }

            else switch ( yy_get_next_buffer(  ) )
                {
                    case EOB_ACT_END_OF_FILE:
                    {
                        (yy_did_buffer_switch_on_eof) = 0;

                        if ( yywrap( ) )
                        {
                            /* Note: because we've taken care in
                             * yy_get_next_buffer() to have set up
                             * yytext, we can now set up
                             * yy_c_buf_p so that if some total
                             * hoser (like flex itself) wants to
                             * call the scanner after we return the
                             * YY_NULL, it'll still work - another
                             * YY_NULL will get returned.
                             */
                            (yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

                            yy_act = YY_STATE_EOF(YY_START);
                            goto do_action;
                        }

                        else
                        {
                            if ( ! (yy_did_buffer_switch_on_eof) )
                            {
                                YY_NEW_FILE;
                            }
                        }
                        break;
                    }

                    case EOB_ACT_CONTINUE_SCAN:
                        (yy_c_buf_p) =
                            (yytext_ptr) + yy_amount_of_matched_text;

                        yy_current_state = yy_get_previous_state(  );

                        yy_cp = (yy_c_buf_p);
                        yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                        goto yy_match;

                    case EOB_ACT_LAST_MATCH:
                        (yy_c_buf_p) =
                            &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

                        yy_current_state = yy_get_previous_state(  );

                        yy_cp = (yy_c_buf_p);
                        yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                        goto yy_find_action;
                }
            break;
        }

        default:
            YY_FATAL_ERROR(
                "fatal flex scanner internal error--no action found" );
    } /* end of action switch */
} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
register char *source = (yytext_ptr);
register int number_to_move, i;
int ret_val;

if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
    YY_FATAL_ERROR(
        "fatal flex scanner internal error--end of buffer missed" );

if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
{
    /* Don't try to fill the buffer, so this is an EOF. */
    if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
    {
        /* We matched a single character, the EOB, so
         * treat this as a final EOF.
         */
        return EOB_ACT_END_OF_FILE;
    }

    else
    {
        /* We matched some text prior to the EOB, first
         * process it.
         */
        return EOB_ACT_LAST_MATCH;
    }
}

/* Try to read more data. */

/* First move last chars to start of buffer. */
number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

for ( i = 0; i < number_to_move; ++i )
{
    *(dest++) = *(source++);
}

if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
    /* don't do the read, it's not guaranteed to return an EOF,
     * just force an EOF
     */
{
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;
}

else
{
    int num_to_read =
        YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

    while ( num_to_read <= 0 )
    {
        /* Not enough room in the buffer - grow it. */

        YY_FATAL_ERROR(
            "input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

    }

    if ( num_to_read > YY_READ_BUF_SIZE )
    {
        num_to_read = YY_READ_BUF_SIZE;
    }

    /* Read in more data. */
    YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
              (yy_n_chars), (size_t) num_to_read );

    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
}

if ( (yy_n_chars) == 0 )
{
    if ( number_to_move == YY_MORE_ADJ )
    {
        ret_val = EOB_ACT_END_OF_FILE;
        yyrestart(yyin  );
    }

    else
    {
        ret_val = EOB_ACT_LAST_MATCH;
        YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
            YY_BUFFER_EOF_PENDING;
    }
}

else
{
    ret_val = EOB_ACT_CONTINUE_SCAN;
}

if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size)
{
    /* Extend the array by 50%, plus the number we really need. */
    yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
    YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, new_size  );
    if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
    {
        YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
    }
}

(yy_n_chars) += number_to_move;
YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state (void)
{
register yy_state_type yy_current_state;
register char *yy_cp;

yy_current_state = (yy_start);
yy_current_state += YY_AT_BOL();

(yy_state_ptr) = (yy_state_buf);
*(yy_state_ptr)++ = yy_current_state;

for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
{
    register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
    {
        yy_current_state = (int) yy_def[yy_current_state];
        if ( yy_current_state >= 825 )
        {
            yy_c = yy_meta[(unsigned int) yy_c];
        }
    }
    yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
    *(yy_state_ptr)++ = yy_current_state;
}

return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
register int yy_is_jam;

register YY_CHAR yy_c = 1;
while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
{
    yy_current_state = (int) yy_def[yy_current_state];
    if ( yy_current_state >= 825 )
    {
        yy_c = yy_meta[(unsigned int) yy_c];
    }
}
yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
yy_is_jam = (yy_current_state == 824);
if ( ! yy_is_jam )
{
    *(yy_state_ptr)++ = yy_current_state;
}

return yy_is_jam ? 0 : yy_current_state;
}

static void yyunput (int c, register char * yy_bp )
{
register char *yy_cp;

yy_cp = (yy_c_buf_p);

/* undo effects of setting up yytext */
*yy_cp = (yy_hold_char);

if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
{
    /* need to shift things up to make room */
    /* +2 for EOB chars. */
    register int number_to_move = (yy_n_chars) + 2;
    register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
                              YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
    register char *source =
        &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

    while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
    {
        *--dest = *--source;
    }

    yy_cp += (int) (dest - source);
    yy_bp += (int) (dest - source);
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
        (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

    if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
    {
        YY_FATAL_ERROR( "flex scanner push-back overflow" );
    }
}

*--yy_cp = (char) c;

(yytext_ptr) = yy_bp;
(yy_hold_char) = *yy_cp;
(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput (void)
#else
static int input  (void)
#endif

{
    int c;

    *(yy_c_buf_p) = (yy_hold_char);

    if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
    {
        /* yy_c_buf_p now points to the character we want to return.
         * If this occurs *before* the EOB characters, then it's a
         * valid NUL; if not, then we've hit the end of the buffer.
         */
        if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
            /* This was really a NUL. */
        {
            *(yy_c_buf_p) = '\0';
        }

        else
        {
            /* need more input */
            int offset = (yy_c_buf_p) - (yytext_ptr);
            ++(yy_c_buf_p);

            switch ( yy_get_next_buffer(  ) )
            {
                case EOB_ACT_LAST_MATCH:
                    /* This happens because yy_g_n_b()
                     * sees that we've accumulated a
                     * token and flags that we need to
                     * try matching the token before
                     * proceeding.  But for input(),
                     * there's no matching to consider.
                     * So convert the EOB_ACT_LAST_MATCH
                     * to EOB_ACT_END_OF_FILE.
                     */

                    /* Reset buffer status. */
                    yyrestart(yyin );

                    /*FALLTHROUGH*/

                case EOB_ACT_END_OF_FILE:
                {
                    if ( yywrap( ) )
                    {
                        return EOF;
                    }

                    if ( ! (yy_did_buffer_switch_on_eof) )
                    {
                        YY_NEW_FILE;
                    }
#ifdef __cplusplus
                    return yyinput();
#else
                    return input();
#endif
                }

                case EOB_ACT_CONTINUE_SCAN:
                    (yy_c_buf_p) = (yytext_ptr) + offset;
                    break;
            }
        }
    }

    c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
    *(yy_c_buf_p) = '\0';	/* preserve yytext */
    (yy_hold_char) = *++(yy_c_buf_p);

    YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

    return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 *
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyrestart  (FILE * input_file )
{

    if ( ! YY_CURRENT_BUFFER )
    {
        yyensure_buffer_stack ();
        YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin, YY_BUF_SIZE );
    }

    yy_init_buffer(YY_CURRENT_BUFFER, input_file );
    yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 *
 */
void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{

    /* TODO. We should be able to replace this entire function body
     * with
     *		yypop_buffer_state();
     *		yypush_buffer_state(new_buffer);
     */
    yyensure_buffer_stack ();
    if ( YY_CURRENT_BUFFER == new_buffer )
    {
        return;
    }

    if ( YY_CURRENT_BUFFER )
    {
        /* Flush out information for old buffer. */
        *(yy_c_buf_p) = (yy_hold_char);
        YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
    }

    YY_CURRENT_BUFFER_LVALUE = new_buffer;
    yy_load_buffer_state( );

    /* We don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    (yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
    (yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
    yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
    (yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 *
 * @return the allocated buffer state.
 */
YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
    if ( ! b )
    {
        YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
    }

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
    if ( ! b->yy_ch_buf )
    {
        YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
    }

    b->yy_is_our_buffer = 1;

    yy_init_buffer(b, file );

    return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 *
 */
void yy_delete_buffer (YY_BUFFER_STATE  b )
{

    if ( ! b )
    {
        return;
    }

    if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
    {
        YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;
    }

    if ( b->yy_is_our_buffer )
    {
        yyfree((void *) b->yy_ch_buf  );
    }

    yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
int oerrno = errno;

yy_flush_buffer(b );

b->yy_input_file = file;
b->yy_fill_buffer = 1;

/* If b is the current buffer, then yy_init_buffer was _probably_
 * called from yyrestart() or through yy_get_next_buffer.
 * In that case, we don't want to reset the lineno or column.
 */
if (b != YY_CURRENT_BUFFER)
{
    b->yy_bs_lineno = 1;
    b->yy_bs_column = 0;
}

b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;

errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 *
 */
void yy_flush_buffer (YY_BUFFER_STATE  b )
{
if ( ! b )
{
    return;
}

b->yy_n_chars = 0;

/* We always need two end-of-buffer characters.  The first causes
 * a transition to the end-of-buffer state.  The second causes
 * a jam in that state.
 */
b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

b->yy_buf_pos = &b->yy_ch_buf[0];

b->yy_at_bol = 1;
b->yy_buffer_status = YY_BUFFER_NEW;

if ( b == YY_CURRENT_BUFFER )
{
    yy_load_buffer_state( );
}
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
if (new_buffer == NULL)
{
    return;
}

yyensure_buffer_stack();

/* This block is copied from yy_switch_to_buffer. */
if ( YY_CURRENT_BUFFER )
{
    /* Flush out information for old buffer. */
    *(yy_c_buf_p) = (yy_hold_char);
    YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
}

/* Only push if top exists. Otherwise, replace top. */
if (YY_CURRENT_BUFFER)
{
    (yy_buffer_stack_top)++;
}
YY_CURRENT_BUFFER_LVALUE = new_buffer;

/* copied from yy_switch_to_buffer. */
yy_load_buffer_state( );
(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *
 */
void yypop_buffer_state (void)
{
if (!YY_CURRENT_BUFFER)
{
    return;
}

yy_delete_buffer(YY_CURRENT_BUFFER );
YY_CURRENT_BUFFER_LVALUE = NULL;
if ((yy_buffer_stack_top) > 0)
{
    --(yy_buffer_stack_top);
}

if (YY_CURRENT_BUFFER)
{
    yy_load_buffer_state( );
    (yy_did_buffer_switch_on_eof) = 1;
}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
int num_to_alloc;

if (!(yy_buffer_stack))
{

    /* First allocation is just for 2 elements, since we don't know if this
     * scanner will even need a stack. We use 2 instead of 1 to avoid an
     * immediate realloc on the next call.
     */
    num_to_alloc = 1;
    (yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
                        (num_to_alloc * sizeof(struct yy_buffer_state*)
                        );
    if ( ! (yy_buffer_stack) )
    {
        YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
    }

    memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

    (yy_buffer_stack_max) = num_to_alloc;
    (yy_buffer_stack_top) = 0;
    return;
}

if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1)
{

    /* Increase the buffer to prepare for a possible push. */
    int grow_size = 8 /* arbitrary grow size */;

    num_to_alloc = (yy_buffer_stack_max) + grow_size;
    (yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
                        ((yy_buffer_stack),
                         num_to_alloc * sizeof(struct yy_buffer_state*)
                        );
    if ( ! (yy_buffer_stack) )
    {
        YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
    }

    /* zero only the new slots.*/
    memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
    (yy_buffer_stack_max) = num_to_alloc;
}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
YY_BUFFER_STATE b;

if ( size < 2 ||
        base[size - 2] != YY_END_OF_BUFFER_CHAR ||
        base[size - 1] != YY_END_OF_BUFFER_CHAR )
    /* They forgot to leave room for the EOB's. */
{
    return 0;
}

b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
if ( ! b )
{
    YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );
}

b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
b->yy_buf_pos = b->yy_ch_buf = base;
b->yy_is_our_buffer = 0;
b->yy_input_file = 0;
b->yy_n_chars = b->yy_buf_size;
b->yy_is_interactive = 0;
b->yy_at_bol = 1;
b->yy_fill_buffer = 0;
b->yy_buffer_status = YY_BUFFER_NEW;

yy_switch_to_buffer(b  );

return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 *
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{

return yy_scan_bytes(yystr, strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
YY_BUFFER_STATE b;
char *buf;
yy_size_t n;
int i;

/* Get memory for full buffer, including space for trailing EOB's. */
n = _yybytes_len + 2;
buf = (char *) yyalloc(n  );
if ( ! buf )
{
    YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );
}

for ( i = 0; i < _yybytes_len; ++i )
{
    buf[i] = yybytes[i];
}

buf[_yybytes_len] = buf[_yybytes_len + 1] = YY_END_OF_BUFFER_CHAR;

b = yy_scan_buffer(buf, n );
if ( ! b )
{
    YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );
}

/* It's okay to grow etc. this buffer, and we should throw it
 * away when we're done.
 */
b->yy_is_our_buffer = 1;

return b;
}

static void yy_push_state (int  new_state )
{
if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
{
    yy_size_t new_size;

    (yy_start_stack_depth) += YY_START_STACK_INCR;
    new_size = (yy_start_stack_depth) * sizeof( int );

    if ( ! (yy_start_stack) )
    {
        (yy_start_stack) = (int *) yyalloc(new_size  );
    }

    else
    {
        (yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack), new_size  );
    }

    if ( ! (yy_start_stack) )
    {
        YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
    }
}

(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

BEGIN(new_state);
}

static void yy_pop_state  (void)
{
if ( --(yy_start_stack_ptr) < 0 )
{
    YY_FATAL_ERROR( "start-condition stack underflow" );
}

BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

static int yy_top_state  (void)
{
return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
(void) fprintf( stderr, "%s\n", msg );
exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 *
 */
int yyget_lineno  (void)
{

return yylineno;
}

/** Get the input stream.
 *
 */
FILE *yyget_in  (void)
{
return yyin;
}

/** Get the output stream.
 *
 */
FILE *yyget_out  (void)
{
return yyout;
}

/** Get the length of the current token.
 *
 */
int yyget_leng  (void)
{
return yyleng;
}

/** Get the current token.
 *
 */

char *yyget_text  (void)
{
return yytext;
}

/** Set the current line number.
 * @param line_number
 *
 */
void yyset_lineno (int  line_number )
{

yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 *
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
yyout = out_str ;
}

int yyget_debug  (void)
{
return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
/* Initialization is the same as for the non-reentrant scanner.
* This function is called from yylex_destroy(), so don't allocate here.
*/

(yy_buffer_stack) = 0;
(yy_buffer_stack_top) = 0;
(yy_buffer_stack_max) = 0;
(yy_c_buf_p) = (char *) 0;
(yy_init) = 0;
(yy_start) = 0;

(yy_start_stack_ptr) = 0;
(yy_start_stack_depth) = 0;
(yy_start_stack) =  NULL;

(yy_state_buf) = 0;
(yy_state_ptr) = 0;
(yy_full_match) = 0;
(yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
yyin = stdin;
yyout = stdout;
#else
yyin = (FILE *) 0;
yyout = (FILE *) 0;
#endif

/* For future reference: Set errno on error, since we are called by
 * yylex_init()
 */
return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{

/* Pop the buffer stack, destroying each element. */
while (YY_CURRENT_BUFFER)
{
    yy_delete_buffer(YY_CURRENT_BUFFER  );
    YY_CURRENT_BUFFER_LVALUE = NULL;
    yypop_buffer_state();
}

/* Destroy the stack itself. */
yyfree((yy_buffer_stack) );
(yy_buffer_stack) = NULL;

/* Destroy the start condition stack. */
yyfree((yy_start_stack)  );
(yy_start_stack) = NULL;

yyfree ( (yy_state_buf) );
(yy_state_buf)  = NULL;

/* Reset the globals. This is important in a non-reentrant scanner so the next time
 * yylex() is called, initialization will occur. */
yy_init_globals( );

return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
register int i;
for ( i = 0; i < n; ++i )
{
    s1[i] = s2[i];
}
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
register int n;
for ( n = 0; s[n]; ++n )
    ;

return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
/* The cast to (char *) in the following accommodates both
 * implementations that use char* generic pointers, and those
 * that use void* generic pointers.  It works with the latter
 * because both ANSI C and C++ allow castless assignment from
 * any pointer type to void*, and deal with argument conversions
 * as though doing an assignment.
 */
return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

int scan_throw(int token)
{
last_token = token;
#ifdef DEV
std::cout << "--> [DEBUG] TOKEN : " << token << std::endl;
#endif
return token;
}

int get_last_token()
{
return last_token;
}

void scan_step()
{
yylloc.first_line = yylloc.last_line;
yylloc.first_column = yylloc.last_column;
}

/*
** convert floating numbers to C standard
** 1.2d-3 -> 1.2e-3
** 1.2D-3 -> 1.2e-3
*/
void scan_exponent_convert(char *in)
{
for (; *in != 'd' && *in != 'D'; ++in);
*in = 'e';
}

#ifdef _MSC_VER
int isatty (int desc)
{
return 0;
}
#endif

