
#line 3 "src/cpp/parse/scanscilab.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 135
#define YY_END_OF_BUFFER 136
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[907] =
    {   0,
    16407,  136,   81,  135,   77,   81,  135,   78,  135,   78,
       81,  135,   75,   81,  135,   72,   81,  135,   26,   81,
      135,   72,   81,  135,   29,   81,  135,   76,   81,  135,
       33,   81,  135,   34,   81,  135,   47,   81,  135,   46,
       81,  135,   36,   81,  135,   45,   81,  135,   66,   81,
      135,   48,   81,  135,   68,   81,  135,   37,   81,  135,
       35,   81,  135,   59,   81,  135,   63,   81,  135,   60,
       81,  135,   72,   81,  135,   25,   81,  135,   64,   81,
      135,   49,   81,  135,   65,   81,  135,   50,   81,  135,
       72,   81,  135,   72,   81,  135,   72,   81,  135,   72,

       81,  135,   72,   81,  135,   72,   81,  135,   72,   81,
      135,   72,   81,  135,   72,   81,  135,   72,   81,  135,
       72,   81,  135,   72,   81,  135,   38,   81,  135,   31,
       81,  135,   39,   81,  135,   25,   81,  135,   81,  135,
       81,  135,   81,  135,   81,  135,   81,  135,   81,  135,
       81,  135,   81,  135,   77,   81,  135,16407,   72,   81,
      135,   26,   81,  135,   72,   81,  135,   72,   81,  135,
       72,   81,  135,   72,   81,  135,   72,   81,  135,   72,
       81,  135,   72,   81,  135,   72,   81,  135,   72,   81,
      135,   72,   81,  135,   72,   81,  135,   72,   81,  135,

       72,   81,  135,   72,   81,  135,   81,  135,   81,  135,
       81,  135,   81,  135,   81,  135,   81,  135,   81,  135,
       81,  135,  115,  135,  114,  135,  114,  115,  135,  112,
      115,  135,  111,  115,  135,  115,  135,  124,  135,  123,
      135,  123,  124,  135,  120,  124,  135,  121,  124,  135,
      124,  135,  106,  135,  105,  135,  105,  106,  135,  106,
      135,  106,  135,  102,  135,  101,  135,  101,  102,  135,
      100,  135,   99,  100,  135,   96,  135,   96,  100,  135,
      100,  135,   93,  135,   77,   93,  135,   84,  135,   84,
       93,  135,   75,   93,  135,   72,   93,  135,   26,   93,

      135,   72,   93,  135,   29,   93,  135,   76,   93,  135,
       33,   82,   93,  135,   34,   93,  135,   47,   93,  135,
       87,   93,  135,   36,   93,  135,   89,   93,  135,   66,
       93,  135,   48,   93,  135,   68,   93,  135,   37,   83,
       93,  135,   35,   93,  135,   59,   93,  135,   63,   93,
      135,   60,   93,  135,   25,   93,  135,   64,   93,  135,
       49,   93,  135,   85,   93,  135,   50,   93,  135,   38,
       93,  135,   31,   93,  135,   86,   93,  135,   25,   93,
      135,   93,  135,   93,  135,   93,  135,   93,  135,   93,
      135,   93,  135,   93,  135,   93,  135,  134,  135,  125,

      135,  128,  135,  128,  135,   75,  135,   76,  135,  130,
      134,  135,  127,  135,  126,  135,  131,  134,  135,  129,
      134,  135,  132,  134,  135,  133,  134,  135,  135,   24,
      135,  135,   24,  135,   24,  135,   24,  135,   24,  135,
       24,  135,   24,  135,   24,  135,   24,  135,   24,  135,
       24,  135,   24,  135,   24,  135,   24,  135,  135,  135,
      135,  135,  135,  135,  135,  135,   77,   79,   79,   78,
       72,   72,   72,   28,   72,   27,   72,   30,   50,   40,
       41,   67,   42,   71,   43,   44,   73,   74,   70,   68,
       61,   58,   57,   62,   72,   72,   72,   16,   72,   72,

       72,   72,   72,   72,    1,   72,   72,   72,   72,   72,
       72,   72,   72,   32,   72,   77,16407,   72,   72,   72,
       28,   72,   27,   72,   72,   72,   72,   16,   72,   72,
       72,   72,   72,   72,    1,   72,   72,   72,   72,   72,
       72,   72,   72,   72,  114,  107,  108,  109,  110,  123,
      116,  117,  118,  119,  105,  103,  104,  101,   99,   96,
       97,   98,   77,   82,   91,   92,   83,   84,   83,  134,
      125,  128,   24,   24,   24,   24,   24,   24,   16,   24,
       24,   24,   24,   24,   24,    1,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   80,   80,   72,   54,   51,

       52,   53,   55,   70,   69,   56,   72,   72,   72,   72,
       72,    5,   72,   14,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   19,   72,   72, 8215,   72,   72,   72,
       72,   72,   72,    5,   72,   14,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   19,   72,   72,  113,  113,
      122,  122,   88,   90,   94,   94,   24,   24,   24,   24,
       24,   24,    5,   24,   14,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   19,   24,   24,   72,   72,    9,
       72,   72,   72,    3,   72,   72,   72,   72,   72,   72,
       72,   72,   72,    2,   72,   72,   72,   72,   72,    9,

       72,   72,   72,    3,   72,   72,   72,   72,   72,   72,
       72,   72,   72,    2,   72,   72,   72,   95,   24,   24,
        9,   24,   24,   24,    3,   24,   24,   24,   24,   24,
       24,   24,   24,   24,    2,   24,   24,   24,   72,   72,
       72,   17,   72,   20,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   15,   72,   72,   72,   72,
       17,   72,   20,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   15,   72,   24,   24,   24,   17,
       24,   20,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   15,   24,   72,   72,    4,   72,   72,

       72,   13,   72,   72,   22,   72,   21,   72,    6,   72,
        7,   72,   72,   72,    4,   72,   72,   72,   13,   72,
       72,   22,   72,   21,   72,    6,   72,    7,   72,   24,
       24,    4,   24,   24,   24,   13,   24,   24,   22,   24,
       21,   24,    6,   24,    7,   24,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   24,   24,   24,   24,
       24,   72,   18,   72,   72,   10,   72,   72,   72,   18,
       72,   72,   10,   72,   72,   24,   18,   24,   24,   10,
       24,   24,   12,   72,   72,    8,   72,   12,   72,   72,
        8,   72,   12,   24,   24,    8,   24,   72,   72,   24,

       11,   72,   11,   72,   11,   24
    } ;

static yyconst flex_int16_t yy_accept[790] =
    {   0,
        1,    1,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    3,
        5,    8,   10,   13,   16,   19,   22,   25,   28,   31,
       34,   37,   40,   43,   46,   49,   52,   55,   58,   61,
       64,   67,   70,   73,   76,   79,   82,   85,   88,   91,
       94,   97,  100,  103,  106,  109,  112,  115,  118,  121,
      124,  127,  130,  133,  136,  139,  141,  143,  145,  147,
      149,  151,  153,  155,  159,  162,  165,  168,  171,  174,
      177,  180,  183,  186,  189,  192,  195,  198,  201,  204,
      207,  209,  211,  213,  215,  217,  219,  221,  223,  225,

      227,  230,  233,  236,  238,  240,  242,  245,  248,  251,
      253,  255,  257,  260,  262,  264,  266,  268,  271,  273,
      276,  278,  281,  283,  285,  288,  290,  293,  296,  299,
      302,  305,  308,  311,  315,  318,  321,  324,  327,  330,
      333,  336,  339,  343,  346,  349,  352,  355,  358,  361,
      364,  367,  370,  373,  376,  379,  382,  384,  386,  388,
      390,  392,  394,  396,  398,  400,  402,  404,  406,  408,
      410,  413,  415,  417,  420,  423,  426,  429,  430,  432,
      433,  435,  437,  439,  441,  443,  445,  447,  449,  451,
      453,  455,  457,  459,  460,  461,  462,  463,  464,  465,

      466,  467,  468,  469,  470,  470,  470,  471,  472,  473,
      473,  473,  473,  473,  473,  473,  473,  473,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  476,  478,  479,
      480,  480,  481,  482,  483,  484,  485,  486,  487,  488,
      488,  489,  490,  491,  491,  491,  492,  493,  493,  494,
      494,  495,  495,  495,  496,  497,  498,  500,  501,  502,
      503,  504,  505,  507,  508,  509,  510,  511,  512,  513,
      514,  515,  515,  516,  516,  516,  516,  516,  516,  516,
      516,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  519,  520,  520,  520,  520,  520,  520,

      520,  520,  520,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  523,  525,  526,  527,  528,  530,  531,  532,
      533,  534,  535,  537,  538,  539,  540,  541,  542,  543,
      544,  545,  545,  545,  545,  545,  545,  545,  545,  546,
      547,  548,  549,  550,  550,  551,  552,  553,  554,  555,
      555,  556,  557,  558,  559,  560,  561,  562,  563,  564,
      565,  566,  567,  568,  569,  569,  570,  571,  572,  573,
      574,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      576,  576,  576,  576,  576,  576,  576,  576,  576,  577,
      578,  579,  581,  582,  583,  584,  585,  586,  588,  589,

      590,  591,  592,  593,  594,  595,  596,  596,  596,  596,
      596,  596,  596,  596,  597,  598,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  600,  601,  602,  603,  604,  605,  605,  606,  607,
      608,  609,  610,  611,  612,  614,  616,  617,  618,  619,
      620,  621,  622,  623,  624,  626,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  628,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,

      629,  630,  631,  632,  633,  634,  636,  638,  639,  640,
      641,  642,  643,  644,  645,  646,  648,  649,  649,  649,
      649,  650,  651,  652,  653,  654,  655,  655,  656,  657,
      657,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  659,  660,  661,  662,
      663,  665,  667,  668,  669,  670,  671,  672,  673,  674,
      675,  677,  678,  678,  678,  678,  679,  679,  679,  679,
      679,  679,  679,  680,  682,  683,  684,  686,  687,  688,
      689,  690,  691,  692,  693,  694,  696,  697,  698,  698,
      698,  698,  698,  698,  698,  698,  698,  698,  698,  698,

      698,  698,  698,  698,  698,  698,  699,  699,  699,  699,
      699,  699,  699,  700,  702,  703,  704,  706,  707,  708,
      709,  710,  711,  712,  713,  714,  716,  717,  718,  719,
      720,  720,  720,  720,  720,  720,  720,  721,  723,  724,
      725,  727,  728,  729,  730,  731,  732,  733,  734,  735,
      737,  738,  739,  740,  741,  742,  744,  746,  747,  748,
      749,  750,  751,  752,  753,  754,  755,  756,  758,  758,
      758,  758,  758,  758,  758,  758,  759,  760,  761,  763,
      765,  766,  767,  768,  769,  770,  771,  772,  773,  774,
      775,  777,  778,  779,  780,  782,  784,  785,  786,  787,

      788,  789,  790,  791,  792,  793,  794,  796,  797,  798,
      800,  801,  802,  804,  805,  807,  809,  811,  813,  813,
      813,  814,  815,  817,  818,  819,  821,  822,  824,  826,
      828,  830,  831,  832,  834,  835,  836,  838,  839,  841,
      843,  845,  847,  848,  849,  850,  851,  852,  853,  854,
      855,  856,  857,  858,  859,  860,  861,  862,  863,  865,
      866,  868,  869,  870,  872,  873,  875,  876,  877,  879,
      880,  882,  883,  885,  886,  888,  890,  891,  893,  895,
      896,  898,  899,  900,  901,  903,  905,  907,  907
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,   25,   26,   25,   25,   25,   27,   27,   28,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   29,   25,   25,   25,   25,   25,   25,
       30,   31,   32,   33,   25,    1,   34,   35,   36,   37,

       38,   39,   25,   40,   41,   25,   42,   43,   44,   45,
       46,   25,   25,   47,   48,   49,   50,   25,   51,   25,
       52,   25,   53,   54,   55,   56,    1,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,    1,    1,   60,   60,   60,   60,   60,   60,   60,

       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   61,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   63,   64,   64,   65,
       66,   66,   66,   67,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[68] =
    {   0,
        1,    2,    3,    3,    4,    5,    5,    6,    1,    4,
        7,    1,    1,    1,    4,    1,    1,    1,    8,    1,
        4,    7,    7,    7,    5,    7,    5,    5,    5,    1,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    1,    1,    1,    7,    1,    1,    1,    5,
        5,    5,    5,    5,    5,    5,    5
    } ;

static yyconst flex_int16_t yy_base[809] =
    {   0,
        0,   67,  132,  135,  143,  151,  154,  160,  140,  147,
      167,  172,  190,    0,  256,  311,  367,    0, 1829, 2722,
      177,  260,  270, 2722,  235,  243,  407, 1814, 2722, 2722,
     2722,  149, 2722, 2722, 2722,  310,  169,  319, 2722, 2722,
      263,  261,  266,  311,  267, 2722, 1800, 2722, 2722,  316,
      409,  411,  436,  413,  448,  454,  462,  466,  470,  478,
      484, 2722, 1759, 2722,  328,  235, 1731,  260,  126,  290,
      130,  295, 1732,  532,  490,  480,  598,  509,  531,  533,
      535,  562,  537,  574,  580,  589,  592,  604,  628,  596,
      473, 1680,  591,  267,  612,  300,  615, 1665, 2722, 2722,

     1718,  278,  356, 1698, 2722, 2722, 1711,  439,  456, 1688,
     2722, 2722, 1698, 1680, 1675, 2722, 2722, 1678, 2722, 1665,
     2722, 1659,  555, 2722,  676,  674,  679, 2722,  669,  649,
        0, 1651, 2722, 2722, 2722,  434, 2722, 2722, 2722,  707,
      686,  704, 1655, 2722,  682,  526,  583,  587, 2722, 1637,
     2722, 2722, 2722, 1596, 2722,  684,  670, 1584,  675,  396,
      678,  581,  686, 1579,    0, 1631, 2722, 1625, 2722, 2722,
        0, 2722, 2722,    0,    0,    0,    0, 2722,  691,  699,
      707, 1572,  131, 1572,  319,  434, 1540, 1541, 1448, 1457,
      537,  604, 1445,  689, 1424,  718,  644,  721,  691,  724,

     1414,  782, 2722, 1451,  785,  788,  792,  769,  773,  757,
     1392,  762,  738,  767,  746,  770, 1381,    0,  773, 1376,
      776,  753,  779,  781,  784, 1375,  816,  818, 2722, 2722,
        0, 2722,  483, 1413, 1407,  831, 1397, 2722, 2722,    0,
     2722,  833,  837,  669,  849, 2722, 2722,  857, 2722,  859,
     2722,  860,    0,  848,  850,  856,  863,  865,  878,  881,
      890,  894,  897,  909,  912,  916,  925,  934,  928,  940,
     2722,  888,  947,  933,  936,  940,  943,  946,  949,  952,
     1010,  968,  958,  979, 1351,  982,  791,  985,  926,  988,
     1351, 1404, 1020, 1029,  993, 1341,  996,  930, 1003,  957,

     1006, 1339, 1024, 1023, 1215, 1035, 1009, 1038, 1040, 1043,
     1215, 1075, 1077, 1079, 1081, 1093, 1084, 1106, 1111, 1118,
     1123, 1141, 1135, 1147, 1153, 1160, 1165, 1169, 1182, 1184,
     1187, 1170, 1180, 1183, 1186, 1189, 1192, 1195, 2722, 2722,
     2722, 2722, 2722, 1252, 2722, 2722, 2722, 2722, 2722, 1254,
     2722, 2722, 2722, 2722, 1266, 2722, 2722, 2722, 1259, 2722,
     1262, 1233, 1230, 1156, 1263, 1228,    0, 1222, 2722,    0,
     1172, 1219, 1158, 1225, 1079, 1228, 1085, 1231, 1148, 1231,
     1242, 1141, 1245, 1162, 1248, 1201, 1251, 1138, 1153, 1263,
     1140,    0, 1135, 1142, 1126, 1121, 1124,    0, 1119, 1265,

     1113, 1112, 1111, 1089, 1090,    0, 1258, 1261, 1264, 1267,
     1270, 1273, 1276, 2722, 1124, 1308, 1281, 1284, 1287, 1291,
     1297, 1301, 1304, 1307, 1310, 1313, 1316, 1319, 1322, 1325,
     2722, 2722, 2722, 2722, 2722, 1366, 1106, 1100, 2722, 1358,
     1360, 1366, 1362, 1384, 1388, 1390, 1392, 1397, 1414, 1416,
     1419, 1421, 1428, 1433, 1445, 1447, 1422, 1430, 1434, 1438,
     1449, 1056, 1452, 1294, 1455, 1457, 1460, 1054, 1462, 1473,
     1024, 1476, 1463, 1479, 1481, 1484,  999, 1487, 1490, 1493,
     1496, 1499, 1502, 1505, 2722, 1537, 1510, 1513, 1516, 1520,
     1526, 1530, 1533, 1536, 1539, 1542, 1545, 1548, 1551, 1554,

     1586, 1588, 1593, 1595, 1602, 1610, 1617, 1619, 1624, 1636,
     1641, 1643, 1648, 1650, 1655, 1667, 1674, 1650, 1653, 1661,
     2722, 1024, 2722,  979,  976,  969, 1722, 2722,  949,  932,
      902, 1670, 1673, 1676, 1679, 1684, 1687, 1690, 1693, 1696,
     1699, 1702, 1705, 1708, 1711,  908,  896,  896,  875,  883,
      877,    0,  872,  866,  862,  846,  838,  843,  817,  818,
        0,  810, 1714, 1717, 1720, 1752, 1725, 1728, 1735, 1738,
     1741, 1745, 1777, 1779, 1781, 1783, 1786, 1805, 1808, 1810,
     1813, 1817, 1835, 1839, 1841, 1844, 1857, 1863, 1840, 1846,
     1850, 1856, 1859, 1862, 1865, 1868, 1871, 1874, 1877, 1880,

     1883, 1886, 1889, 1892, 1895, 1927, 1900, 1903, 1910, 1913,
     1916, 1920, 1952, 1954, 1956, 1958, 1961, 1980, 1983, 1985,
     1988, 1992, 2010, 2014, 2016, 2019, 2032, 2038, 2722,  781,
     2015, 2021, 2025, 2031, 2034, 2037,  757,    0,  753,  698,
      681,  669,  644,  653,  619,  610,  605,  610,  598,    0,
      584,    0, 2069, 2071,    0, 2073, 2075, 2078, 2087, 2100,
     2102, 2105, 2109, 2118, 2124, 2133, 2136, 2142, 2120, 2129,
     2135, 2138, 2141, 2144,    0, 2176, 2178,    0, 2180, 2182,
     2185, 2194, 2207, 2209, 2212, 2216, 2225, 2231, 2240, 2243,
     2249,  567,    0,    0,    0,    0,  569,  573,  559,  536,

      526,  518,  488,  477,  471,  476,    0, 2256, 2262, 2265,
     2271, 2280, 2274, 2289, 2293, 2296, 2305, 2308,    0,    0,
     2311, 2320, 2327, 2335, 2333, 2339, 2352, 2357, 2361, 2366,
     2369,  473,  460,    0,  466,  442,    0,  445,    0,    0,
        0,    0, 2374, 2383, 2388, 2396, 2400, 2405, 2414, 2418,
     2427, 2430,  432,  407,  293,  286,  263, 2432, 2436, 2445,
     2454, 2459, 2461, 2463, 2476, 2485, 2490,  231,    0,  229,
        0,  226, 2492, 2494, 2498, 2507, 2516, 2520,    0,  113,
        0, 2522, 2525,   96, 2529, 2544,    0, 2722, 2593, 2601,
     2609, 2617, 2625, 2633, 2637, 2641, 2648, 2653, 2657, 2665,

     2669, 2673, 2681, 2688, 2695, 2701, 2705, 2713
    } ;

static yyconst flex_int16_t yy_def[809] =
    {   0,
      788,  788,  789,  789,  790,  790,  791,  791,  792,  792,
      793,  793,  788,   13,  794,  794,  788,   17,  788,  788,
      788,  788,  788,  788,  795,  796,  795,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,   27,  788,  788,  788,  788,  788,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  797,  798,  799,  798,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,

      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,   27,  796,
       27,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  800,  788,  788,  788,  788,  788,
      800,  788,  788,  800,  800,  800,  800,  788,  801,  802,
      801,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  788,  788,  788,  788,  788,  788,  788,

      788,  788,  788,  788,  788,  788,  788,   27,   27,  788,
      788,  788,  788,  788,  788,  788,  788,  130,  788,  788,
      788,  788,  788,  788,  788,  788,   27,   27,  788,  788,
      803,  788,  788,  788,  788,  788,  788,  788,  788,  804,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  805,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
      788,  788,   27,  788,  788,  788,  788,  788,  788,  788,
      797,  806,  807,  788,  788,  788,  788,  788,  788,  788,
      788,  808,   77,   77,  788,  788,  788,  788,  788,  788,

      788,  788,  799,  788,  788,  788,  788,  788,  788,  788,
      788,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  800,  788,  788,  181,
      181,  788,  788,  788,  788,  788,  788,  788,  788,  802,
      788,  788,  788,  788,  788,  788,  788,  788,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,

      181,  181,  181,  181,  181,  181,  788,  788,  788,  788,
      788,  788,  788,  788,  788,   27,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,  788,  788,  788,  806,
      788,  788,  788,  788,  788,  788,  788,  788,  807,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,   77,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,

       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      181,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  788,  788,  788,   27,  788,  788,  788,  788,
      788,  788,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,

      788,  788,  788,  788,  788,   77,  788,  788,  788,  788,
      788,  788,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,  788,  181,
      788,  788,  788,  788,  788,  788,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,   27,   27,  130,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,  788,  788,
      788,  788,  788,  788,  460,   77,   77,  303,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,  181,  181,  380,  181,  181,  181,  181,  181,  181,

      181,  181,  181,  181,  181,  181,  181,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,  460,  469,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,   27,   27,   27,   27,   27,   77,   77,   77,
       77,   77,  181,  181,  181,  181,  181,   27,   27,   27,
       27,   27,   77,   77,   77,   77,   77,  181,  181,  181,
      181,  181,   27,   27,   27,   77,   77,   77,  181,  181,
      181,   27,   77,  181,   27,   77,  181,    0,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,

      788,  788,  788,  788,  788,  788,  788,  788
    } ;

static yyconst flex_int16_t yy_nxt[2790] =
    {   0,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   44,   44,   44,   46,
       47,   48,   49,   44,   50,   51,   52,   53,   54,   55,
       56,   44,   44,   44,   44,   57,   58,   59,   60,   44,
       61,   44,   62,   63,   64,   65,   20,   20,   20,   66,
       67,   68,   69,   70,   71,   72,   73,   20,   74,   22,
       23,   24,   75,   76,   77,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   78,   45,   78,   78,   78,   46,   47,   48,   49,

       78,   79,   80,   81,   82,   83,   84,   85,   78,   78,
       78,   78,   86,   87,   88,   89,   78,   90,   78,   62,
       63,   64,   65,   20,   20,   20,   91,   92,   93,   94,
       95,   96,   97,   98,  100,  101,  102,  100,  101,  102,
      787,  103,  117,  118,  103,  106,  107,  108,  104,  117,
      118,  104,  109,  106,  107,  108,  112,  113,  784,  110,
      109,  230,  112,  113,  390,  231,  114,  110,  120,  121,
      122,  115,  114,  120,  121,  122,  391,  115,  202,  203,
      204,  239,  276,  276,  123,  240,  241,  278,  278,  123,
      124,  125,  126,  127,  128,  129,  130,  131,  132,  133,

      134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
      144,  145,  146,  147,  129,  148,  129,  129,  129,  149,
      150,  151,  152,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  153,  154,  155,  156,  124,  124,  124,  157,
      158,  159,  160,  161,  162,  163,  164,  166,  167,  168,
      169,  205,  248,  781,  245,  170,  171,  250,  252,  780,
      172,  205,  207,  209,  206,  779,  173,  174,  175,  176,
      206,  177,  340,  249,  206,  246,  247,  341,  251,  247,
      206,  273,  273,  273,  210,  211,  212,  213,  214,  215,

      216,  217,  219,  220,  221,  222,  223,  224,  225,  226,
      772,  177,  166,  167,  168,  169,  275,  275,  275,  232,
      170,  171,  233,  334,  334,  172,  234,  235,  236,  272,
      771,  173,  174,  175,  176,  242,  177,  243,  208,  208,
      237,  770,  238,  208,  208,  244,  277,  277,  277,  208,
      247,  279,  279,  279,  208,  244,  244,  336,  336,  208,
      342,  393,  254,  394,  208,  343,  177,  178,  178,  178,
      178,  178,  179,  180,  181,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  181,  178,  181,  181,  181,  178,  178,  178,  178,

      181,  182,  183,  184,  185,  186,  187,  188,  181,  181,
      181,  181,  189,  190,  191,  192,  181,  193,  181,  178,
      178,  178,  178,  178,  178,  178,  194,  195,  196,  197,
      198,  199,  200,  201,  227,  228,  208,  208,  208,  208,
      208,  208,  255,  346,  769,  227,  230,  208,  347,  208,
      231,  208,  276,  276,  256,  228,  257,  208,  260,  208,
      348,  208,  261,  208,  208,  349,  210,  211,  212,  213,
      214,  215,  216,  217,  208,  208,  208,  768,  258,  395,
      259,  208,  208,  396,  208,  757,  208,  756,  262,  208,
      208,  292,  263,  208,  208,  238,  208,  208,  208,  432,

      208,  755,  208,  265,  208,  208,  208,  266,  208,  754,
      264,  208,  208,  753,  208,  742,  208,  268,  208,  741,
      267,  740,  208,  270,  269,  739,  208,  248,  294,  331,
      331,  331,  208,  281,  203,  204,  293,  293,  283,  304,
      305,  306,  307,  308,  309,  310,  311,  293,  249,  295,
      296,  297,  298,  299,  300,  301,  302,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  315,  357,  738,  293,
      737,  293,  358,  293,  401,  293,  736,  314,  316,  293,
      317,  293,  320,  293,  250,  293,  321,  402,  252,  293,
      293,  284,  285,  286,  287,  288,  289,  290,  291,  292,

      293,  293,  293,  735,  318,  251,  319,  293,  293,  247,
      293,  734,  293,  733,  322,  732,  293,  293,  323,  293,
      293,  707,  293,  293,  293,  312,  313,  293,  293,  325,
      293,  293,  293,  706,  293,  330,  312,  324,  278,  278,
      293,  326,  293,  403,  293,  705,  313,  333,  333,  333,
      404,  704,  293,  703,  327,  293,  293,  295,  296,  297,
      298,  299,  300,  301,  302,  702,  293,  328,  335,  335,
      335,  337,  337,  337,  329,  205,  293,  359,  203,  204,
      205,  364,  437,  245,  437,  272,  360,  438,  206,  361,
      701,  362,  700,  206,  206,  363,  208,  208,  239,  206,

      409,  409,  240,  241,  246,  247,  247,  208,  219,  220,
      221,  222,  223,  224,  225,  226,  232,  208,  699,  233,
      242,  698,  243,  365,  235,  236,  273,  273,  273,  371,
      244,  275,  275,  275,  277,  277,  277,  237,  697,  238,
      244,  244,  279,  279,  279,  406,  406,  406,  411,  411,
      372,  373,  374,  375,  376,  377,  378,  379,  381,  382,
      383,  384,  385,  386,  387,  388,  372,  373,  374,  375,
      376,  377,  378,  379,  408,  408,  408,  410,  410,  410,
      412,  412,  412,  202,  203,  204,  205,  414,  415,  205,
      414,  415,  696,  205,  419,  419,  208,  208,  695,  206,

      208,  208,  206,  421,  421,  206,  206,  208,  206,  426,
      426,  208,  206,  208,  208,  208,  692,  208,  418,  418,
      418,  208,  416,  420,  420,  420,  422,  422,  422,  218,
      218,  218,  425,  425,  425,  427,  427,  427,  428,  428,
      429,  429,  429,  208,  208,  208,  208,  480,  480,  236,
      245,  436,  651,  242,  208,  243,  208,  244,  248,  244,
      250,  252,  650,  244,  208,  649,  208,  244,  244,  244,
      244,  246,  247,  244,  244,  208,  208,  208,  208,  249,
      648,  251,  247,  208,  208,  440,  208,  647,  208,  272,
      208,  208,  208,  208,  208,  646,  208,  441,  442,  645,

      443,  208,  644,  208,  208,  208,  208,  643,  208,  208,
      247,  208,  444,  208,  445,  642,  208,  208,  208,  208,
      641,  208,  208,  640,  208,  208,  208,  446,  208,  208,
      448,  639,  208,  638,  447,  208,  208,  208,  208,  208,
      208,  637,  208,  208,  208,  208,  630,  208,  449,  629,
      208,  528,  208,  208,  208,  208,  208,  208,  452,  450,
      451,  208,  208,  208,  208,  453,  208,  208,  208,  292,
      526,  454,  208,  208,  208,  208,  208,  525,  208,  455,
      456,  523,  208,  482,  482,  208,  489,  489,  208,  273,
      273,  273,  273,  273,  273,  208,  273,  273,  273,  273,

      273,  273,  457,  457,  457,  458,  458,  458,  459,  459,
      459,  281,  203,  204,  491,  491,  283,  470,  471,  472,
      473,  474,  475,  476,  477,  292,  521,  461,  462,  463,
      464,  465,  466,  467,  468,  282,  282,  282,  479,  479,
      479,  481,  481,  481,  483,  483,  483,  293,  293,  293,
      293,  293,  488,  488,  488,  602,  293,  293,  293,  490,
      490,  490,  492,  492,  492,  496,  496,  293,  293,  284,
      285,  286,  287,  288,  289,  290,  291,  293,  486,  303,
      303,  303,  596,  304,  305,  306,  307,  308,  309,  310,
      311,  495,  495,  495,  497,  497,  497,  498,  498,  499,

      499,  499,  293,  293,  293,  293,  293,  293,  293,  293,
      595,  293,  293,  293,  589,  293,  501,  293,  438,  293,
      293,  293,  293,  293,  438,  293,  414,  293,  502,  503,
      562,  293,  293,  293,  293,  534,  534,  504,  293,  293,
      561,  293,  536,  536,  293,  293,  293,  506,  560,  293,
      293,  293,  559,  505,  293,  558,  293,  205,  555,  293,
      554,  293,  293,  293,  507,  553,  293,  508,  293,  293,
      206,  293,  552,  293,  293,  293,  206,  509,  551,  293,
      293,  293,  550,  293,  549,  293,  510,  293,  293,  293,
      546,  293,  293,  293,  545,  293,  293,  293,  293,  539,

      511,  512,  513,  293,  538,  514,  515,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  532,  293,  541,  541,
      293,  531,  293,  368,  517,  293,  331,  331,  331,  366,
      293,  366,  293,  516,  526,  293,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  518,  518,  518,  519,  519,
      519,  520,  520,  520,  521,  522,  523,  524,  543,  543,
      359,  203,  204,  525,  527,  528,  529,  355,  344,  360,
      350,  500,  361,  494,  362,  370,  370,  370,  363,  365,
      530,  533,  533,  533,  535,  535,  535,  537,  537,  537,
      381,  382,  383,  384,  385,  386,  387,  388,  380,  380,

      380,  540,  540,  540,  542,  542,  542,  544,  544,  544,
      547,  548,  556,  557,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  563,  563,  563,  564,
      564,  564,  565,  565,  565,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      591,  591,  566,  567,  567,  567,  208,  568,  568,  568,
      569,  569,  569,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  570,  570,  570,  571,  571,
      571,  572,  572,  572,  436,  208,  208,  208,  208,  208,
      208,  573,  244,  208,  208,  493,  208,  574,  208,  487,

      208,  575,  244,  244,  208,  292,  208,  484,  208,  478,
      576,  208,  208,  434,  208,  208,  208,  208,  208,  208,
      208,  577,  208,  433,  208,  208,  578,  579,  208,  234,
      208,  430,  208,  580,  424,  208,  208,  423,  208,  292,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      417,  581,  208,  203,  208,  208,  208,  208,  584,  208,
      208,  208,  208,  292,  208,  582,  208,  208,  583,  208,
      413,  208,  208,  208,  208,  208,  585,  586,  588,  588,
      588,  208,  407,  208,  405,  208,  588,  588,  588,  587,
      588,  588,  588,  208,  400,  208,  399,  461,  462,  463,

      464,  465,  466,  467,  468,  460,  460,  460,  590,  590,
      590,  592,  592,  592,  593,  593,  594,  594,  594,  598,
      598,  470,  471,  472,  473,  474,  475,  476,  477,  469,
      469,  469,  597,  597,  597,  599,  599,  599,  600,  600,
      601,  601,  601,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  603,  603,  603,  604,  604,
      604,  605,  605,  605,  293,  293,  293,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  293,  293,  398,
      397,  606,  607,  607,  607,  293,  608,  608,  608,  609,
      609,  609,  303,  303,  303,  303,  303,  303,  303,  303,

      303,  303,  303,  303,  610,  610,  610,  611,  611,  611,
      612,  612,  612,  293,  293,  293,  293,  392,  389,  613,
      293,  293,  293,  293,  293,  614,  293,  369,  615,  293,
      293,  293,  368,  293,  293,  280,  293,  293,  293,  617,
      293,  293,  274,  616,  293,  293,  293,  293,  618,  271,
      293,  293,  293,  253,  619,  293,  366,  293,  293,  229,
      620,  356,  293,  293,  293,  293,  355,  293,  293,  293,
      293,  293,  293,  621,  293,  293,  293,  293,  293,  293,
      354,  293,  293,  293,  293,  624,  293,  353,  293,  293,
      622,  293,  623,  293,  293,  293,  293,  352,  625,  626,

      351,  293,  293,  293,  350,  293,  628,  628,  628,  628,
      628,  628,  293,  345,  344,  293,  627,  628,  628,  628,
      339,  338,  293,  527,  528,  529,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  332,  530,
      631,  631,  631,  632,  632,  632,  633,  633,  633,  380,
      380,  380,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  634,  634,  634,  635,  635,  635,  636,  636,  636,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  208,
      208,  654,  654,  654,  654,  654,  654,  653,  280,  274,
      208,  654,  654,  654,  655,  655,  655,  655,  655,  655,

      208,  655,  655,  655,  208,  208,  208,  208,  208,  208,
      208,  208,  271,  208,  208,  208,  253,  208,  656,  208,
      657,  208,  229,  658,  208,  208,  659,  208,  788,  208,
      788,  208,  208,  208,  208,  208,  208,  208,  208,  788,
      208,  208,  788,  208,  208,  208,  208,  662,  208,  788,
      788,  208,  788,  208,  660,  208,  661,  788,  208,  663,
      664,  208,  208,  208,  788,  208,  208,  208,  208,  208,
      788,  208,  208,  208,  666,  788,  667,  208,  788,  208,
      788,  665,  208,  208,  208,  208,  788,  208,  788,  208,
      208,  208,  208,  788,  668,  208,  460,  460,  460,  788,

      788,  208,  460,  460,  460,  208,  460,  460,  460,  788,
      788,  208,  460,  460,  460,  669,  669,  669,  670,  670,
      670,  671,  671,  671,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  469,  672,  672,  672,  673,
      673,  673,  674,  674,  674,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  293,  293,  677,  677,  677,  677,
      677,  677,  676,  788,  788,  293,  677,  677,  677,  678,
      678,  678,  678,  678,  678,  293,  678,  678,  678,  293,
      293,  293,  293,  293,  293,  293,  293,  788,  293,  293,
      293,  788,  293,  679,  293,  680,  293,  788,  681,  293,

      293,  682,  293,  788,  293,  788,  293,  293,  293,  293,
      293,  293,  293,  293,  788,  293,  293,  788,  293,  293,
      293,  293,  685,  293,  788,  788,  293,  788,  293,  683,
      293,  684,  788,  293,  686,  687,  293,  293,  293,  788,
      293,  293,  293,  293,  293,  788,  293,  293,  293,  689,
      788,  690,  293,  788,  293,  788,  688,  293,  293,  293,
      293,  788,  293,  788,  293,  293,  293,  293,  788,  691,
      293,  693,  693,  693,  788,  788,  293,  693,  693,  693,
      293,  693,  693,  693,  788,  788,  293,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  208,  208,  208,  208,

      208,  208,  208,  208,  788,  208,  208,  208,  788,  208,
      788,  208,  788,  208,  208,  208,  208,  708,  788,  208,
      788,  208,  709,  208,  788,  710,  208,  208,  208,  208,
      208,  788,  208,  208,  788,  208,  208,  208,  208,  788,
      208,  788,  712,  208,  711,  208,  208,  208,  208,  713,
      208,  208,  208,  208,  788,  715,  208,  208,  788,  714,
      208,  208,  208,  208,  208,  788,  208,  788,  716,  208,
      208,  208,  208,  788,  208,  718,  719,  719,  719,  788,
      208,  717,  788,  788,  208,  719,  719,  719,  788,  788,
      208,  719,  719,  719,  720,  720,  720,  720,  720,  720,

      720,  720,  720,  293,  293,  293,  293,  293,  293,  293,
      293,  788,  293,  293,  293,  788,  293,  788,  293,  788,
      293,  293,  293,  293,  721,  788,  293,  788,  293,  722,
      293,  788,  723,  293,  293,  293,  293,  293,  788,  293,
      293,  788,  293,  293,  293,  293,  788,  293,  788,  725,
      293,  724,  293,  293,  293,  293,  726,  293,  293,  293,
      293,  788,  728,  293,  293,  788,  727,  293,  293,  293,
      293,  293,  788,  293,  788,  729,  293,  293,  293,  293,
      788,  293,  731,  208,  208,  788,  788,  293,  730,  208,
      208,  293,  208,  208,  208,  788,  743,  293,  208,  208,

      208,  208,  208,  208,  208,  788,  745,  208,  208,  208,
      208,  744,  208,  208,  788,  788,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  746,  788,  208,  208,  747,
      788,  208,  208,  208,  208,  208,  208,  208,  293,  293,
      788,  208,  788,  208,  208,  788,  208,  293,  293,  293,
      788,  748,  788,  208,  293,  293,  208,  788,  293,  293,
      293,  293,  293,  293,  788,  293,  293,  293,  293,  749,
      750,  293,  788,  293,  788,  293,  788,  293,  751,  293,
      293,  293,  788,  293,  293,  293,  788,  293,  293,  293,
      293,  788,  752,  293,  293,  293,  293,  293,  788,  293,

      293,  208,  208,  788,  293,  293,  788,  293,  788,  293,
      208,  208,  208,  788,  293,  208,  208,  293,  788,  758,
      759,  208,  208,  208,  208,  788,  208,  208,  208,  788,
      788,  208,  293,  293,  208,  788,  760,  788,  208,  788,
      761,  293,  293,  293,  208,  293,  293,  762,  208,  788,
      763,  764,  293,  293,  293,  293,  293,  293,  293,  208,
      208,  788,  293,  208,  208,  293,  765,  788,  293,  788,
      208,  766,  208,  208,  208,  293,  773,  767,  293,  788,
      208,  208,  208,  208,  208,  774,  208,  208,  293,  293,
      293,  293,  208,  208,  788,  788,  775,  208,  788,  293,

      788,  293,  208,  293,  293,  776,  788,  208,  788,  293,
      788,  293,  293,  293,  293,  788,  777,  293,  293,  208,
      208,  208,  208,  293,  293,  208,  208,  778,  293,  788,
      208,  788,  208,  293,  293,  293,  208,  788,  293,  782,
      208,  788,  208,  293,  293,  293,  208,  293,  293,  208,
      208,  788,  293,  293,  293,  293,  208,  208,  293,  788,
      208,  783,  788,  293,  293,  788,  785,  208,  293,  786,
      208,  293,  293,  293,  788,  788,  788,  208,  788,  788,
      788,  788,  293,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  293,   99,   99,   99,   99,   99,   99,   99,

       99,  105,  105,  105,  105,  105,  105,  105,  105,  111,
      111,  111,  111,  111,  111,  111,  111,  116,  116,  116,
      116,  116,  116,  116,  116,  119,  119,  119,  119,  119,
      119,  119,  119,  165,  165,  165,  165,  165,  165,  165,
      165,  208,  788,  788,  208,  218,  788,  788,  218,  282,
      282,  788,  282,  282,  293,  788,  788,  293,  788,  788,
      293,  303,  788,  788,  303,  367,  788,  788,  788,  367,
      367,  367,  367,  370,  788,  788,  370,  380,  788,  788,
      380,  431,  431,  431,  431,  431,  431,  431,  435,  435,
      435,  435,  435,  435,  435,  439,  439,  439,  439,  439,

      439,  439,  460,  788,  788,  460,  788,  788,  460,  469,
      788,  788,  469,  485,  485,  485,  485,  485,  485,  788,
      485,   19,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788
    } ;

static yyconst flex_int16_t yy_chk[2790] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    3,    3,    3,    4,    4,    4,
      784,    3,    9,    9,    4,    5,    5,    5,    3,   10,
       10,    4,    5,    6,    6,    6,    7,    7,  780,    5,
        6,   32,    8,    8,  183,   32,    7,    6,   11,   11,
       11,    7,    8,   12,   12,   12,  183,    8,   21,   21,
       21,   37,   69,   69,   11,   37,   37,   71,   71,   12,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   15,   15,   15,
       15,   22,   42,  772,   41,   15,   15,   43,   45,  770,
       15,   23,   23,   25,   22,  768,   15,   15,   15,   15,
       22,   15,  102,   42,   23,   41,   41,  102,   43,   45,
       23,   66,   66,   66,   25,   25,   25,   25,   25,   25,

       25,   25,   26,   26,   26,   26,   26,   26,   26,   26,
      757,   15,   16,   16,   16,   16,   68,   68,   68,   36,
       16,   16,   36,   94,   94,   16,   36,   36,   36,   65,
      756,   16,   16,   16,   16,   38,   16,   38,   44,   44,
       36,  755,   36,   50,   50,   38,   70,   70,   70,   44,
       65,   72,   72,   72,   50,   38,   38,   96,   96,   44,
      103,  185,   50,  185,   50,  103,   16,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   27,   27,   51,   51,   52,   52,
       54,   54,   51,  108,  754,   27,  136,   51,  108,   52,
      136,   54,  160,  160,   51,   27,   52,   51,   54,   52,
      109,   54,   54,   53,   53,  109,   27,   27,   27,   27,
       27,   27,   27,   27,   53,   55,   55,  753,   53,  186,
       53,   56,   56,  186,   53,  738,   55,  736,   55,   57,
       57,   75,   56,   58,   58,  233,   55,   59,   59,  233,

       57,  735,   56,   58,   58,   60,   60,   59,   59,  733,
       57,   61,   61,  732,   58,  706,   60,   60,   59,  705,
       59,  704,   61,   61,   60,  703,   60,  146,   75,   91,
       91,   91,   61,   74,   74,   74,   78,   78,   74,   76,
       76,   76,   76,   76,   76,   76,   76,   78,  146,   75,
       75,   75,   75,   75,   75,   75,   75,   78,   79,   79,
       80,   80,   81,   81,   83,   83,   80,  123,  702,   79,
      701,   80,  123,   81,  191,   83,  700,   79,   80,   79,
       81,   80,   83,   81,  147,   83,   83,  191,  148,   82,
       82,   74,   74,   74,   74,   74,   74,   74,   74,   77,

       82,   84,   84,  699,   82,  147,   82,   85,   85,  148,
       82,  698,   84,  697,   84,  692,   86,   86,   85,   87,
       87,  651,   84,   90,   90,   77,   77,   86,   85,   87,
       87,   88,   88,  649,   90,   90,   77,   86,  162,  162,
       87,   88,   88,  192,   90,  648,   77,   93,   93,   93,
      192,  647,   88,  646,   88,   89,   89,   77,   77,   77,
       77,   77,   77,   77,   77,  645,   89,   89,   95,   95,
       95,   97,   97,   97,   89,  126,   89,  125,  125,  125,
      127,  127,  244,  145,  244,  156,  125,  244,  126,  125,
      644,  125,  643,  127,  126,  125,  129,  129,  141,  127,

      197,  197,  141,  141,  145,  145,  156,  129,  130,  130,
      130,  130,  130,  130,  130,  130,  140,  129,  642,  140,
      142,  641,  142,  140,  140,  140,  157,  157,  157,  179,
      142,  159,  159,  159,  161,  161,  161,  140,  640,  140,
      142,  142,  163,  163,  163,  194,  194,  194,  199,  199,
      179,  179,  179,  179,  179,  179,  179,  179,  180,  180,
      180,  180,  180,  180,  180,  180,  181,  181,  181,  181,
      181,  181,  181,  181,  196,  196,  196,  198,  198,  198,
      200,  200,  200,  202,  202,  202,  205,  205,  205,  206,
      206,  206,  639,  207,  213,  213,  208,  208,  637,  205,

      209,  209,  206,  215,  215,  205,  207,  208,  206,  222,
      222,  209,  207,  210,  210,  210,  630,  208,  212,  212,
      212,  209,  209,  214,  214,  214,  216,  216,  216,  219,
      219,  219,  221,  221,  221,  223,  223,  223,  224,  224,
      225,  225,  225,  227,  227,  228,  228,  287,  287,  236,
      245,  242,  562,  243,  227,  243,  228,  236,  248,  242,
      250,  252,  560,  243,  227,  559,  228,  236,  236,  242,
      242,  245,  245,  243,  243,  254,  254,  255,  255,  248,
      558,  250,  252,  256,  256,  254,  254,  557,  255,  272,
      257,  257,  258,  258,  256,  556,  254,  255,  255,  555,

      256,  257,  554,  258,  256,  259,  259,  553,  260,  260,
      272,  257,  258,  258,  259,  551,  259,  261,  261,  260,
      550,  262,  262,  549,  263,  263,  259,  260,  261,  260,
      262,  548,  262,  547,  261,  263,  264,  264,  261,  265,
      265,  546,  262,  266,  266,  263,  531,  264,  264,  530,
      265,  529,  267,  267,  266,  269,  269,  264,  266,  265,
      265,  268,  268,  267,  266,  267,  269,  270,  270,  282,
      526,  268,  268,  267,  273,  273,  269,  525,  270,  269,
      270,  524,  268,  289,  289,  273,  298,  298,  270,  274,
      274,  274,  275,  275,  275,  273,  276,  276,  276,  277,

      277,  277,  278,  278,  278,  279,  279,  279,  280,  280,
      280,  281,  281,  281,  300,  300,  281,  283,  283,  283,
      283,  283,  283,  283,  283,  303,  522,  282,  282,  282,
      282,  282,  282,  282,  282,  284,  284,  284,  286,  286,
      286,  288,  288,  288,  290,  290,  290,  293,  293,  295,
      295,  295,  297,  297,  297,  477,  294,  294,  293,  299,
      299,  299,  301,  301,  301,  307,  307,  294,  293,  281,
      281,  281,  281,  281,  281,  281,  281,  294,  294,  304,
      304,  304,  471,  303,  303,  303,  303,  303,  303,  303,
      303,  306,  306,  306,  308,  308,  308,  309,  309,  310,

      310,  310,  312,  312,  313,  313,  314,  314,  315,  315,
      468,  317,  317,  312,  462,  313,  314,  314,  438,  315,
      316,  316,  317,  312,  437,  313,  415,  314,  315,  315,
      405,  316,  317,  318,  318,  375,  375,  316,  319,  319,
      404,  316,  377,  377,  318,  320,  320,  319,  403,  319,
      321,  321,  402,  318,  318,  401,  320,  364,  399,  319,
      397,  321,  323,  323,  320,  396,  320,  321,  322,  322,
      364,  321,  395,  323,  324,  324,  364,  322,  394,  322,
      325,  325,  393,  323,  391,  324,  324,  326,  326,  322,
      389,  325,  327,  327,  388,  324,  328,  328,  326,  382,

      325,  325,  326,  327,  379,  327,  328,  328,  326,  329,
      329,  330,  330,  327,  331,  331,  373,  328,  384,  384,
      329,  371,  330,  368,  330,  331,  332,  332,  332,  366,
      329,  363,  330,  329,  362,  331,  333,  333,  333,  334,
      334,  334,  335,  335,  335,  336,  336,  336,  337,  337,
      337,  338,  338,  338,  344,  344,  350,  350,  386,  386,
      359,  359,  359,  361,  365,  365,  365,  355,  344,  359,
      350,  311,  359,  305,  359,  372,  372,  372,  359,  365,
      365,  374,  374,  374,  376,  376,  376,  378,  378,  378,
      380,  380,  380,  380,  380,  380,  380,  380,  381,  381,

      381,  383,  383,  383,  385,  385,  385,  387,  387,  387,
      390,  390,  400,  400,  407,  407,  407,  408,  408,  408,
      409,  409,  409,  410,  410,  410,  411,  411,  411,  412,
      412,  412,  413,  413,  413,  416,  416,  417,  417,  417,
      418,  418,  418,  419,  419,  419,  416,  420,  420,  420,
      464,  464,  416,  421,  421,  421,  416,  422,  422,  422,
      423,  423,  423,  424,  424,  424,  425,  425,  425,  426,
      426,  426,  427,  427,  427,  428,  428,  428,  429,  429,
      429,  430,  430,  430,  436,  440,  440,  441,  441,  443,
      443,  440,  436,  442,  442,  302,  440,  441,  441,  296,

      443,  442,  436,  436,  442,  292,  440,  291,  441,  285,
      443,  444,  444,  237,  442,  445,  445,  446,  446,  447,
      447,  444,  444,  235,  448,  448,  445,  447,  446,  234,
      447,  226,  444,  448,  220,  448,  445,  217,  446,  460,
      447,  449,  449,  450,  450,  448,  451,  451,  452,  452,
      211,  449,  449,  204,  450,  453,  453,  451,  452,  452,
      454,  454,  449,  469,  450,  450,  453,  451,  451,  452,
      201,  454,  455,  455,  456,  456,  453,  454,  457,  457,
      457,  454,  195,  455,  193,  456,  458,  458,  458,  456,
      459,  459,  459,  455,  190,  456,  189,  460,  460,  460,

      460,  460,  460,  460,  460,  461,  461,  461,  463,  463,
      463,  465,  465,  465,  466,  466,  467,  467,  467,  473,
      473,  469,  469,  469,  469,  469,  469,  469,  469,  470,
      470,  470,  472,  472,  472,  474,  474,  474,  475,  475,
      476,  476,  476,  478,  478,  478,  479,  479,  479,  480,
      480,  480,  481,  481,  481,  482,  482,  482,  483,  483,
      483,  484,  484,  484,  486,  486,  487,  487,  487,  488,
      488,  488,  489,  489,  489,  486,  490,  490,  490,  188,
      187,  486,  491,  491,  491,  486,  492,  492,  492,  493,
      493,  493,  494,  494,  494,  495,  495,  495,  496,  496,

      496,  497,  497,  497,  498,  498,  498,  499,  499,  499,
      500,  500,  500,  501,  501,  502,  502,  184,  182,  501,
      503,  503,  504,  504,  501,  502,  502,  168,  503,  505,
      505,  503,  166,  504,  501,  164,  502,  506,  506,  505,
      505,  503,  158,  504,  507,  507,  508,  508,  506,  154,
      505,  509,  509,  150,  508,  507,  143,  508,  506,  132,
      509,  122,  509,  510,  510,  507,  120,  508,  511,  511,
      512,  512,  509,  510,  510,  513,  513,  514,  514,  511,
      118,  512,  515,  515,  510,  513,  513,  115,  514,  511,
      511,  512,  512,  515,  516,  516,  513,  114,  514,  515,

      113,  517,  517,  515,  110,  516,  518,  518,  518,  519,
      519,  519,  517,  107,  104,  516,  517,  520,  520,  520,
      101,   98,  517,  527,  527,  527,  532,  532,  532,  533,
      533,  533,  534,  534,  534,  535,  535,  535,   92,  527,
      536,  536,  536,  537,  537,  537,  538,  538,  538,  539,
      539,  539,  540,  540,  540,  541,  541,  541,  542,  542,
      542,  543,  543,  543,  544,  544,  544,  545,  545,  545,
      563,  563,  563,  564,  564,  564,  565,  565,  565,  566,
      566,  567,  567,  567,  568,  568,  568,  566,   73,   67,
      566,  569,  569,  569,  570,  570,  570,  571,  571,  571,

      566,  572,  572,  572,  573,  573,  574,  574,  575,  575,
      576,  576,   63,  577,  577,  573,   47,  574,  573,  575,
      575,  576,   28,  576,  577,  573,  577,  574,   19,  575,
        0,  576,  578,  578,  577,  579,  579,  580,  580,    0,
      581,  581,    0,  578,  582,  582,  579,  580,  580,    0,
        0,  581,    0,  578,  578,  582,  579,    0,  580,  581,
      582,  581,  583,  583,    0,  582,  584,  584,  585,  585,
        0,  586,  586,  583,  584,    0,  585,  584,    0,  585,
        0,  583,  586,  583,  587,  587,    0,  584,    0,  585,
      588,  588,  586,    0,  587,  587,  589,  589,  589,    0,

        0,  588,  590,  590,  590,  587,  591,  591,  591,    0,
        0,  588,  592,  592,  592,  593,  593,  593,  594,  594,
      594,  595,  595,  595,  596,  596,  596,  597,  597,  597,
      598,  598,  598,  599,  599,  599,  600,  600,  600,  601,
      601,  601,  602,  602,  602,  603,  603,  603,  604,  604,
      604,  605,  605,  605,  606,  606,  607,  607,  607,  608,
      608,  608,  606,    0,    0,  606,  609,  609,  609,  610,
      610,  610,  611,  611,  611,  606,  612,  612,  612,  613,
      613,  614,  614,  615,  615,  616,  616,    0,  617,  617,
      613,    0,  614,  613,  615,  615,  616,    0,  616,  617,

      613,  617,  614,    0,  615,    0,  616,  618,  618,  617,
      619,  619,  620,  620,    0,  621,  621,    0,  618,  622,
      622,  619,  620,  620,    0,    0,  621,    0,  618,  618,
      622,  619,    0,  620,  621,  622,  621,  623,  623,    0,
      622,  624,  624,  625,  625,    0,  626,  626,  623,  624,
        0,  625,  624,    0,  625,    0,  623,  626,  623,  627,
      627,    0,  624,    0,  625,  628,  628,  626,    0,  627,
      627,  631,  631,  631,    0,    0,  628,  632,  632,  632,
      627,  633,  633,  633,    0,    0,  628,  634,  634,  634,
      635,  635,  635,  636,  636,  636,  653,  653,  654,  654,

      656,  656,  657,  657,    0,  658,  658,  653,    0,  654,
        0,  656,    0,  657,  659,  659,  658,  653,    0,  654,
        0,  656,  658,  657,    0,  659,  658,  660,  660,  661,
      661,    0,  662,  662,    0,  659,  663,  663,  660,    0,
      661,    0,  661,  662,  660,  664,  664,  663,  660,  662,
      661,  665,  665,  662,    0,  664,  664,  663,    0,  663,
      666,  666,  665,  667,  667,    0,  664,    0,  665,  668,
      668,  666,  665,    0,  667,  667,  669,  669,  669,    0,
      668,  666,    0,    0,  667,  670,  670,  670,    0,    0,
      668,  671,  671,  671,  672,  672,  672,  673,  673,  673,

      674,  674,  674,  676,  676,  677,  677,  679,  679,  680,
      680,    0,  681,  681,  676,    0,  677,    0,  679,    0,
      680,  682,  682,  681,  676,    0,  677,    0,  679,  681,
      680,    0,  682,  681,  683,  683,  684,  684,    0,  685,
      685,    0,  682,  686,  686,  683,    0,  684,    0,  684,
      685,  683,  687,  687,  686,  683,  685,  684,  688,  688,
      685,    0,  687,  687,  686,    0,  686,  689,  689,  688,
      690,  690,    0,  687,    0,  688,  691,  691,  689,  688,
        0,  690,  690,  708,  708,    0,    0,  691,  689,  709,
      709,  690,  710,  710,  708,    0,  708,  691,  711,  711,

      709,  713,  713,  710,  708,    0,  711,  712,  712,  711,
      709,  709,  713,  710,    0,    0,  714,  714,  712,  711,
      715,  715,  713,  716,  716,  712,    0,  714,  712,  714,
        0,  715,  717,  717,  716,  718,  718,  714,  721,  721,
        0,  715,    0,  717,  716,    0,  718,  722,  722,  721,
        0,  721,    0,  717,  723,  723,  718,    0,  722,  721,
      725,  725,  724,  724,    0,  723,  726,  726,  722,  722,
      724,  725,    0,  724,    0,  723,    0,  726,  725,  727,
      727,  725,    0,  724,  728,  728,    0,  726,  729,  729,
      727,    0,  727,  730,  730,  728,  731,  731,    0,  729,

      727,  743,  743,    0,  730,  728,    0,  731,    0,  729,
      744,  744,  743,    0,  730,  745,  745,  731,    0,  743,
      744,  744,  743,  746,  746,    0,  745,  747,  747,    0,
        0,  744,  748,  748,  746,    0,  745,    0,  747,    0,
      746,  749,  749,  748,  746,  750,  750,  747,  747,    0,
      748,  749,  749,  748,  751,  751,  750,  752,  752,  758,
      758,    0,  749,  759,  759,  751,  750,    0,  752,    0,
      758,  751,  760,  760,  759,  751,  758,  752,  752,    0,
      758,  761,  761,  760,  759,  760,  762,  762,  763,  763,
      764,  764,  761,  760,    0,    0,  762,  762,    0,  763,

        0,  764,  761,  765,  765,  763,    0,  762,    0,  763,
        0,  764,  766,  766,  765,    0,  765,  767,  767,  773,
      773,  774,  774,  766,  765,  775,  775,  767,  767,    0,
      773,    0,  774,  766,  776,  776,  775,    0,  767,  774,
      773,    0,  774,  777,  777,  776,  775,  778,  778,  782,
      782,    0,  783,  783,  777,  776,  785,  785,  778,    0,
      782,  777,    0,  783,  777,    0,  782,  785,  778,  783,
      782,  786,  786,  783,    0,    0,    0,  785,    0,    0,
        0,    0,  786,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  786,  789,  789,  789,  789,  789,  789,  789,

      789,  790,  790,  790,  790,  790,  790,  790,  790,  791,
      791,  791,  791,  791,  791,  791,  791,  792,  792,  792,
      792,  792,  792,  792,  792,  793,  793,  793,  793,  793,
      793,  793,  793,  794,  794,  794,  794,  794,  794,  794,
      794,  795,    0,    0,  795,  796,    0,    0,  796,  797,
      797,    0,  797,  797,  798,    0,    0,  798,    0,    0,
      798,  799,    0,    0,  799,  800,    0,    0,    0,  800,
      800,  800,  800,  801,    0,    0,  801,  802,    0,    0,
      802,  803,  803,  803,  803,  803,  803,  803,  804,  804,
      804,  804,  804,  804,  804,  805,  805,  805,  805,  805,

      805,  805,  806,    0,    0,  806,    0,    0,  806,  807,
        0,    0,  807,  808,  808,  808,  808,  808,  808,    0,
      808,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788
    } ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
/*
 *  Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 *  Copyright (C) 2008-2012 - Scilab Enterprises - Bruno JOFRET
 *
 *  This file must be used under the terms of the CeCILL.
 *  This source file is licensed as described in the file COPYING, which
 *  you should have received as part of this distribution.  The terms
 *  are also available at
 *  http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
 *
 */
#include "isatty.hxx"
#include "parse.hxx"
#include "parser_private.hxx"

#include "context.hxx"

extern "C"
{
#include "charEncoding.h"
#include "sci_malloc.h"
}

static int comment_level = 0;
static int last_token = 0;
static int exit_status = PARSE_ERROR;
static std::string current_file;
static std::string program_name;

static std::string *pstBuffer;

#define YY_USER_ACTION                          \
 yylloc.last_column += yyleng;

/* -*- Verbose Special Debug -*- */
//#define DEV
//#define TOKENDEV

#ifdef DEV
#define DEBUG(x) std::cout << "[DEBUG] " << x << std::endl;
#else
#define DEBUG(x) /* Nothing */
#endif

#define INITIAL 0
#define SIMPLESTRING 1
#define DOUBLESTRING 2
#define REGIONCOMMENT 3
#define LINECOMMENT 4
#define LINEBREAK 5
#define MATRIX 6
#define SHELLMODE 7
#define BEGINID 8

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 789 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2722 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinIf);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(IF);
}
	YY_BREAK
case 2:
YY_RULE_SETUP
{
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(THEN);
}
	YY_BREAK
case 3:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        // Pop to step out IF
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinElse);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(ELSE);
}
	YY_BREAK
case 4:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinElseIf);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(ELSEIF);
}
	YY_BREAK
case 5:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(END);
}
	YY_BREAK
case 6:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinSelect);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(SELECT);
}
	YY_BREAK
case 7:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinSwitch);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(SWITCH);
}
	YY_BREAK
case 8:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinOtherwise);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(OTHERWISE);
}
	YY_BREAK
case 9:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinCase);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(CASE);
}
	YY_BREAK
case 10:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinFunction);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(FUNCTION);
}
	YY_BREAK
case 11:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(ENDFUNCTION);
}
	YY_BREAK
case 12:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinFunction);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(HIDDENFUNCTION);
}
	YY_BREAK
case 13:
YY_RULE_SETUP
{
    DEBUG("BEGIN(INITIAL)");
 	BEGIN(INITIAL);
    return scan_throw(HIDDEN);
}
	YY_BREAK
case 14:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinFor);
    }
    BEGIN(INITIAL);
    return scan_throw(FOR);
}
	YY_BREAK
case 15:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinWhile);
    }
	BEGIN(INITIAL);
	return scan_throw(WHILE);
}
	YY_BREAK
case 16:
YY_RULE_SETUP
{
	BEGIN(INITIAL);
    return scan_throw(DO);
}
	YY_BREAK
case 17:
YY_RULE_SETUP
{
    	BEGIN(INITIAL);
        return scan_throw(BREAK);
}
	YY_BREAK
case 18:
YY_RULE_SETUP
{
    	BEGIN(INITIAL);
        return scan_throw(CONTINUE);
}
	YY_BREAK
case 19:
YY_RULE_SETUP
{
	ParserSingleInstance::pushControlStatus(Parser::WithinTry);
	BEGIN(INITIAL);
	return scan_throw(TRY);
}
	YY_BREAK
case 20:
YY_RULE_SETUP
{
    // Pop to step out TRY
	ParserSingleInstance::popControlStatus();
	ParserSingleInstance::pushControlStatus(Parser::WithinCatch);
	BEGIN(INITIAL);
	return scan_throw(CATCH);
}
	YY_BREAK
case 21:
YY_RULE_SETUP
{
    BEGIN(INITIAL);
    return scan_throw(RETURN);
}
	YY_BREAK
case 22:
YY_RULE_SETUP
{
    BEGIN(INITIAL);
    return scan_throw(RETURN);
}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
{
        BEGIN(BEGINID);
}
	YY_BREAK

case 24:
YY_RULE_SETUP
{
        wchar_t *pwText = to_wide_string(yytext);
        if (yytext != NULL && pwText == NULL)
        {
            std::string str = "can not convert'";
            str += yytext;
            str += "' to UTF-8";
            exit_status = SCAN_ERROR;
            scan_error("can not convert string to UTF-8");
        }
        yylval.str = new std::wstring(pwText);
	FREE(pwText);
	types::InternalType * pIT = symbol::Context::getInstance()->get(symbol::Symbol(*yylval.str));
        if (pIT && pIT->isCallable())
        {
            scan_throw(ID);
            BEGIN(SHELLMODE);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(ID);
        }
    }
	YY_BREAK

case 25:
YY_RULE_SETUP
{
  return scan_throw(NOT);
}
	YY_BREAK
case 26:
YY_RULE_SETUP
{
  return scan_throw(DOLLAR);
}
	YY_BREAK
case 27:
YY_RULE_SETUP
{
  return scan_throw(BOOLTRUE);
}
	YY_BREAK
case 28:
YY_RULE_SETUP
{
  return scan_throw(BOOLFALSE);
}
	YY_BREAK
case 29:
YY_RULE_SETUP
{
  return scan_throw(AND);
}
	YY_BREAK
case 30:
YY_RULE_SETUP
{
  return scan_throw(ANDAND);
}
	YY_BREAK
case 31:
YY_RULE_SETUP
{
  return scan_throw(OR);
}
	YY_BREAK
case 32:
YY_RULE_SETUP
{
  return scan_throw(OROR);
}
	YY_BREAK
case 33:
YY_RULE_SETUP
{
  return scan_throw(LPAREN);
}
	YY_BREAK
case 34:
YY_RULE_SETUP
{
  return scan_throw(RPAREN);
}
	YY_BREAK
case 35:
YY_RULE_SETUP
{
	scan_step();
  return scan_throw(SEMI);
}
	YY_BREAK
case 36:
YY_RULE_SETUP
{
	scan_step();
  return scan_throw(COMMA);
}
	YY_BREAK
case 37:
YY_RULE_SETUP
{
  return scan_throw(COLON);
}
	YY_BREAK
case 38:
YY_RULE_SETUP
{
  yy_push_state(MATRIX);
  ParserSingleInstance::pushControlStatus(Parser::WithinCell);
  return scan_throw(LBRACE);
}
	YY_BREAK
case 39:
YY_RULE_SETUP
{
  return scan_throw(RBRACE);
}
	YY_BREAK
case 40:
YY_RULE_SETUP
{
  return scan_throw(DOTQUOTE);
}
	YY_BREAK
case 41:
YY_RULE_SETUP
{
  return scan_throw(DOTTIMES);
}
	YY_BREAK
case 42:
YY_RULE_SETUP
{
  return scan_throw(DOTRDIVIDE);
}
	YY_BREAK
case 43:
YY_RULE_SETUP
{
  return scan_throw(DOTLDIVIDE);
}
	YY_BREAK
case 44:
YY_RULE_SETUP
{
  return scan_throw(DOTPOWER);
}
	YY_BREAK
case 45:
YY_RULE_SETUP
{
  return scan_throw(MINUS);
}
	YY_BREAK
case 46:
YY_RULE_SETUP
{
  return scan_throw(PLUS);
}
	YY_BREAK
case 47:
YY_RULE_SETUP
{
  return scan_throw(TIMES);
}
	YY_BREAK
case 48:
YY_RULE_SETUP
{
  return scan_throw(RDIVIDE);
}
	YY_BREAK
case 49:
YY_RULE_SETUP
{
  return scan_throw(LDIVIDE);
}
	YY_BREAK
case 50:
YY_RULE_SETUP
{
  return scan_throw(POWER);
}
	YY_BREAK
case 51:
YY_RULE_SETUP
{
  return scan_throw(KRONTIMES);
}
	YY_BREAK
case 52:
YY_RULE_SETUP
{
  return scan_throw(KRONRDIVIDE);
}
	YY_BREAK
case 53:
YY_RULE_SETUP
{
  return scan_throw(KRONLDIVIDE);
}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
{
    unput(yytext[yyleng - 1]);
    return scan_throw(CONTROLTIMES);
}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
{
    unput(yytext[yyleng - 1]);
    return scan_throw(CONTROLRDIVIDE);
}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
{
    unput(yytext[yyleng - 1]);
    return scan_throw(CONTROLLDIVIDE);
}
	YY_BREAK
case 57:
YY_RULE_SETUP
{
  return scan_throw(EQ);
}
	YY_BREAK
case 58:
YY_RULE_SETUP
{
  return scan_throw(NE);
}
	YY_BREAK
case 59:
YY_RULE_SETUP
{
  return scan_throw(LT);
}
	YY_BREAK
case 60:
YY_RULE_SETUP
{
  return scan_throw(GT);
}
	YY_BREAK
case 61:
YY_RULE_SETUP
{
  return scan_throw(LE);
}
	YY_BREAK
case 62:
YY_RULE_SETUP
{
  return scan_throw(GE);
}
	YY_BREAK
case 63:
YY_RULE_SETUP
{
  return scan_throw(ASSIGN);
 }
	YY_BREAK
case 64:
YY_RULE_SETUP
{
  DEBUG("yy_push_state(MATRIX)");
  yy_push_state(MATRIX);
  ParserSingleInstance::pushControlStatus(Parser::WithinMatrix);
  return scan_throw(LBRACK);
}
	YY_BREAK
case 65:
YY_RULE_SETUP
{
  return scan_throw(RBRACK);
}
	YY_BREAK
case 66:
YY_RULE_SETUP
{
  return scan_throw(DOT);
}
	YY_BREAK
case 67:
YY_RULE_SETUP
{
    ParserSingleInstance::pushControlStatus(Parser::WithinDots);
    yy_push_state(LINEBREAK);
}
	YY_BREAK
case 68:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] INTEGER : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(VARINT);
}
	YY_BREAK
case 69:
YY_RULE_SETUP
{
  scan_exponent_convert(yytext);
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
  scan_step();
  return scan_throw(VARFLOAT);
}
	YY_BREAK
case 70:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] NUMBER : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(NUM);
}
	YY_BREAK
case 71:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] LITTLE : " << yytext << std::endl;
#endif
  scan_step();
  return scan_throw(NUM);
}
	YY_BREAK
case 72:
YY_RULE_SETUP
{
    wchar_t *pwText = to_wide_string(yytext);
    if (yytext != NULL && pwText == NULL)
    {
        std::string str = "can not convert'";
        str += yytext;
        str += "' to UTF-8";
        exit_status = SCAN_ERROR;
        scan_error("can not convert string to UTF-8");
    }
    yylval.str = new std::wstring(pwText);
    FREE(pwText);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] ID : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(ID);
}
	YY_BREAK
case 73:
YY_RULE_SETUP
{
  yylval.comment = new std::wstring();
  comment_level = 1;
  ParserSingleInstance::pushControlStatus(Parser::WithinBlockComment);
  yy_push_state(REGIONCOMMENT);
}
	YY_BREAK
case 74:
YY_RULE_SETUP
{
  pstBuffer = new std::string();
  yy_push_state(LINECOMMENT);
}
	YY_BREAK
case 75:
YY_RULE_SETUP
{
  pstBuffer = new std::string();
  yy_push_state(DOUBLESTRING);
}
	YY_BREAK
case 76:
YY_RULE_SETUP
{
  /*
  ** Matrix Transposition special behaviour
  ** ID' []' toto()' are transposition call
  */
  if (last_token == ID
      || last_token == RBRACK
      || last_token == RPAREN
      || last_token == RBRACE
      || last_token == VARINT
      || last_token == VARFLOAT
      || last_token == NUM
      || last_token == BOOLTRUE
      || last_token == BOOLFALSE)
  {
      return scan_throw(QUOTE);
  }
  else
  {
      pstBuffer = new std::string();
      yy_push_state(SIMPLESTRING);
  }
}
	YY_BREAK
case 77:
YY_RULE_SETUP
{
  scan_step();
  scan_throw(SPACES);
}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 1;
  yylloc.last_column = 1;
  scan_step();
  if (last_token != EOL) {
      return scan_throw(EOL);
  }

}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 1;
  yylloc.last_column = 1;
  scan_step();
  if (last_token != EOL)
  {
      return scan_throw(EOL);
  }
  scan_throw(EOL);
}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 2;
  yylloc.last_column = 1;
  scan_step();
  if (last_token != EOL)
  {
      return scan_throw(EOL);
  }
  scan_throw(EOL);
}
	YY_BREAK
case 81:
YY_RULE_SETUP
{
    std::string str = "unexpected token '";
    str += yytext;
    str += "'";
    exit_status = SCAN_ERROR;
    scan_error(str);
}
	YY_BREAK

case 82:
YY_RULE_SETUP
{
      unput(yytext[yyleng -1]);
      if (last_token == ID
          || last_token == RPAREN
          || last_token == QUOTE
          || last_token == VARINT
          || last_token == VARFLOAT
          || last_token == NUM)
      {
          return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 83:
YY_RULE_SETUP
{
      return scan_throw(COLON);
  }
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
{
      yylloc.last_line += 1;
      yylloc.last_column = 1;
      if(last_token != DOTS && last_token != EOL)
      {
          return scan_throw(EOL);
      }
      scan_throw(EOL);
  }
	YY_BREAK
case 85:
YY_RULE_SETUP
{
    DEBUG("yy_pop_state()");
    yy_pop_state();
    ParserSingleInstance::popControlStatus();
    return scan_throw(RBRACK);
  }
	YY_BREAK
case 86:
YY_RULE_SETUP
{
    yy_pop_state();
    ParserSingleInstance::popControlStatus();
    return scan_throw(RBRACE);
  }
	YY_BREAK
case 87:
case 88:
YY_RULE_SETUP
{
    return scan_throw(PLUS);
  }
	YY_BREAK
case 89:
case 90:
YY_RULE_SETUP
{
    return scan_throw(MINUS);
  }
	YY_BREAK
case 91:
YY_RULE_SETUP
{
    // no need to unput the '+'
    if (last_token != LBRACK
       && last_token != EOL
       && last_token != SEMI
       && last_token != COMMA)
   {
       return scan_throw(COMMA);
   }  
  }
	YY_BREAK
case 92:
YY_RULE_SETUP
{
    unput('-');
    if (last_token != LBRACK
       && last_token != EOL
       && last_token != SEMI
       && last_token != COMMA)
   {
       return scan_throw(COMMA);
   }  
  }
	YY_BREAK
case 93:
YY_RULE_SETUP
{
    std::string str = "unexpected token '";
    str += yytext;
    str += "' within a matrix.";
    exit_status = SCAN_ERROR;
    scan_error(str);
  }
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
{
      /* Just do nothing */
      yylloc.last_line += 1;
      yylloc.last_column = 1;
      scan_step();
      scan_throw(EOL);
  }
	YY_BREAK
case 95:
YY_RULE_SETUP
{
      /* Just do nothing */
      pstBuffer = new std::string();
      yy_push_state(LINECOMMENT);
      scan_throw(DOTS);
  }
	YY_BREAK
case YY_STATE_EOF(MATRIX):
{
      yy_pop_state();
  }
	YY_BREAK

case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
{
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    scan_step();
    yy_pop_state();
    ParserSingleInstance::popControlStatus();
  }
	YY_BREAK
case 97:
YY_RULE_SETUP
{
    ++comment_level;
    yy_push_state(REGIONCOMMENT);
  }
	YY_BREAK
case 98:
YY_RULE_SETUP
{
    scan_throw(DOTS);
    pstBuffer = new std::string();
    yy_push_state(LINECOMMENT);
  }
	YY_BREAK
case 99:
YY_RULE_SETUP
{
      /* Do nothing... */
  }
	YY_BREAK
case YY_STATE_EOF(LINEBREAK):
{
      yy_pop_state();
  }
	YY_BREAK
case 100:
YY_RULE_SETUP
{
    std::string str = "unexpected token '";
    str += yytext;
    str += "' after line break with .. or ...";
    exit_status = SCAN_ERROR;
    scan_error(str);
  }
	YY_BREAK

case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
{
    //yylloc.last_line += 1;
    //yylloc.last_column = 1;
    //scan_step();
    yy_pop_state();
    for (int i = yyleng - 1 ; i >= 0 ; --i)
    {
        //std::cerr << "Unputting i = {" << i << "}" << std::endl;
        //std::cerr << "Unputting {" << yytext[i] << "}" << std::endl;
        unput(yytext[i]);
        yylloc.last_column--;
    }
    /*
    ** To forgot comments after lines break
    */
    if (last_token != DOTS)
    {
        //std::cerr << "pstBuffer = {" << *pstBuffer << "}" << std::endl;
        //std::cerr << "pstBuffer->c_str() = {" << pstBuffer->c_str() << "}" << std::endl;
        wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
        //std::wcerr << L"pwstBuffer = W{" << pwstBuffer << L"}" << std::endl;
        if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
        {
            std::string str = "can not convert'";
            str += pstBuffer->c_str();
            str += "' to UTF-8";
            exit_status = SCAN_ERROR;
            scan_error("can not convert string to UTF-8");
        }
        yylval.comment = new std::wstring(pwstBuffer);
        delete pstBuffer;
        FREE (pwstBuffer);
        return scan_throw(COMMENT);
    }
  }
	YY_BREAK
case YY_STATE_EOF(LINECOMMENT):
{
    yy_pop_state();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
    if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
    {
        std::string str = "can not convert'";
        str += pstBuffer->c_str();
        str += "' to UTF-8";
        exit_status = SCAN_ERROR;
        scan_error("can not convert string to UTF-8");
    }
    yylval.comment = new std::wstring(pwstBuffer);
    delete pstBuffer;
    FREE (pwstBuffer);
    return scan_throw(COMMENT);
  }
	YY_BREAK
case 102:
YY_RULE_SETUP
{
     // Put the char in a temporary CHAR buffer to go through UTF-8 trouble
     // only translate to WCHAR_T when popping state.
     *pstBuffer += yytext;
  }
	YY_BREAK

case 103:
YY_RULE_SETUP
{
    --comment_level;
    if (comment_level == 0) {
      ParserSingleInstance::popControlStatus();
      yy_pop_state();
      //return scan_throw(BLOCKCOMMENT);
    }
  }
	YY_BREAK
case 104:
YY_RULE_SETUP
{
    ++comment_level;
    yy_push_state(REGIONCOMMENT);
  }
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
{
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    scan_step();
    *yylval.comment += L"\n//";
  }
	YY_BREAK
case 106:
YY_RULE_SETUP
{
      wchar_t *pwText = to_wide_string(yytext);
      *yylval.comment += std::wstring(pwText);
      FREE(pwText);
  }
	YY_BREAK
case YY_STATE_EOF(REGIONCOMMENT):
{
      yy_pop_state();
//    std::string str = "unexpected end of file in a comment";
//    exit_status = SCAN_ERROR;
//    scan_error(str);
  }
	YY_BREAK

case 107:
YY_RULE_SETUP
{
    *pstBuffer += "\"";
  }
	YY_BREAK
case 108:
YY_RULE_SETUP
{
    *pstBuffer += "'";
  }
	YY_BREAK
case 109:
YY_RULE_SETUP
{
    *pstBuffer += "\"";
  }
	YY_BREAK
case 110:
YY_RULE_SETUP
{
    *pstBuffer += "'";
  }
	YY_BREAK
case 111:
YY_RULE_SETUP
{
    yy_pop_state();
    scan_step();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
    if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
    {
        std::string str = "can not convert'";
        str += pstBuffer->c_str();
        str += "' to UTF-8";
        exit_status = SCAN_ERROR;
        scan_error("can not convert string to UTF-8");
    }
    yylval.str = new std::wstring(pwstBuffer);
    delete pstBuffer;
    FREE(pwstBuffer);
    return scan_throw(STR);
  }
	YY_BREAK
case 112:
YY_RULE_SETUP
{
    std::string str = "Heterogeneous string detected, starting with ' and ending with \".";
    exit_status = SCAN_ERROR;
    scan_error(str);
  }
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
{
      /* Do nothing... Just skip */
  }
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
{
    std::string str = "unexpected end of line in a string.";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yylloc.last_line += 1;
    yylloc.last_column = 1;
  }
	YY_BREAK
case YY_STATE_EOF(SIMPLESTRING):
{
    std::string str = "unexpected end of file in a string.";
    exit_status = SCAN_ERROR;
    scan_error(str);
  }
	YY_BREAK
case 115:
YY_RULE_SETUP
{
    scan_step();
    *pstBuffer += yytext;
  }
	YY_BREAK

case 116:
YY_RULE_SETUP
{
    *pstBuffer += "\"";
  }
	YY_BREAK
case 117:
YY_RULE_SETUP
{
    *pstBuffer += "'";
  }
	YY_BREAK
case 118:
YY_RULE_SETUP
{
    *pstBuffer += "\"";
  }
	YY_BREAK
case 119:
YY_RULE_SETUP
{
    *pstBuffer += "'";
  }
	YY_BREAK
case 120:
YY_RULE_SETUP
{
    yy_pop_state();
    scan_step();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
    if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
    {
        std::string str = "can not convert'";
        str += pstBuffer->c_str();
        str += "' to UTF-8";
        exit_status = SCAN_ERROR;
        scan_error("can not convert string to UTF-8");
    }
    yylval.str = new std::wstring(pwstBuffer);
    delete pstBuffer;
    FREE(pwstBuffer);
    return scan_throw(STR);
  }
	YY_BREAK
case 121:
YY_RULE_SETUP
{
    std::string str = "Heterogeneous string detected, starting with \" and ending with '.";
    exit_status = SCAN_ERROR;
    scan_error(str);
  }
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
{
      /* Do nothing... Just skip */
  }
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
{
    std::string str = "unexpected end of line in a string";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yylloc.last_line += 1;
    yylloc.last_column = 1;
  }
	YY_BREAK
case YY_STATE_EOF(DOUBLESTRING):
{
    std::string str = "unexpected end of file in a string";
    exit_status = SCAN_ERROR;
    scan_error(str);
  }
	YY_BREAK
case 124:
YY_RULE_SETUP
{
   scan_step();
   *pstBuffer += yytext;
  }
	YY_BREAK

case 125:
YY_RULE_SETUP
{
        if (last_token == ID)
        {
            scan_throw(SPACES);
            return ID;
        }
    }
	YY_BREAK
case 126:
YY_RULE_SETUP
{
        BEGIN(INITIAL);
        scan_step();
        return scan_throw(SEMI);
    }
	YY_BREAK
case 127:
YY_RULE_SETUP
{
        BEGIN(INITIAL);
        scan_step();
        return scan_throw(COMMA);
    }
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
{
        BEGIN(INITIAL);
        yylloc.last_line += 1;
        yylloc.last_column = 1;
        scan_step();
        return scan_throw(EOL);
    }
	YY_BREAK
case 129:
YY_RULE_SETUP
{
        if (last_token == STR)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(ASSIGN);
        }
    }
	YY_BREAK
case 130:
YY_RULE_SETUP
{
        if (last_token == STR)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(LPAREN);
        }
    }
	YY_BREAK
case 131:
YY_RULE_SETUP
{
        if (last_token == STR)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(LT);
        }
    }
	YY_BREAK
case 132:
YY_RULE_SETUP
{
        if (last_token == STR)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(GT);
        }
    }
	YY_BREAK
case 133:
YY_RULE_SETUP
{
        if (last_token == STR)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(NOT);
        }
    }
	YY_BREAK
case 134:
YY_RULE_SETUP
{
	wchar_t *pwText = to_wide_string(yytext);
        yylval.str = new std::wstring(pwText);
	FREE(pwText);
        return scan_throw(STR);
    }
	YY_BREAK
case YY_STATE_EOF(SHELLMODE):
{
        BEGIN(INITIAL);
    }
	YY_BREAK

case 135:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(BEGINID):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 789 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 789 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 788);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

int scan_throw(int token) {
  last_token = token;
#ifdef DEV
  std::cout << "--> [DEBUG] TOKEN : " << token << std::endl;
#endif
  return token;
}

int get_last_token() {
    return last_token;
}

void scan_step() {
  yylloc.first_line = yylloc.last_line;
  yylloc.first_column = yylloc.last_column;
}

void scan_error(std::string msg)
{
    wchar_t* pstMsg = to_wide_string(msg.c_str());

    //std::wcerr << pstMsg << std::endl;
    ParserSingleInstance::PrintError(pstMsg);
    ParserSingleInstance::setExitStatus(Parser::Failed);
    ParserSingleInstance::resetControlStatus();
    FREE(pstMsg);
    last_token = YYEOF;
    BEGIN(INITIAL);
}

/*
** convert floating numbers to C standard
** 1.2d-3 -> 1.2e-3
** 1.2D-3 -> 1.2e-3
*/
void scan_exponent_convert(char *in)
{
  char *pString;
  while((pString=strpbrk(in,"d"))!=NULL)
    {
      *pString='e';
    }
  while((pString=strpbrk(in,"D"))!=NULL)
    {
      *pString='e';
    }
}

#ifdef _MSC_VER
int isatty (int desc)
{
  return 0;
}
#endif

