
#line 3 "src/cpp/parse/scanscilab.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types.
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

#define YY_LESS_LINENO(n)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
{
FILE *yy_input_file;

char *yy_ch_buf;		/* input buffer */
char *yy_buf_pos;		/* current position in input buffer */

/* Size of input buffer in bytes, not including room for EOB
 * characters.
 */
yy_size_t yy_buf_size;

/* Number of characters read into yy_ch_buf, not including EOB
 * characters.
 */
int yy_n_chars;

/* Whether we "own" the buffer - i.e., we know we created it,
 * and can realloc() it to grow it, and should free() it to
 * delete it.
 */
int yy_is_our_buffer;

/* Whether this is an "interactive" input source; if so, and
 * if we're using stdio for input, then we want to use getc()
 * instead of fread(), to make sure we stop fetching input after
 * each newline.
 */
int yy_is_interactive;

/* Whether we're considered to be at the beginning of a line.
 * If so, '^' rules will be active on the next match, otherwise
 * not.
 */
int yy_at_bol;

int yy_bs_lineno; /**< The line count. */
int yy_bs_column; /**< The column count. */

/* Whether to try to fill the input buffer when we reach the
 * end of it.
 */
int yy_fill_buffer;

int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
/* When an EOF's been seen but there's still some text to process
 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
 * shouldn't try reading from the input source any more.  We might
 * still have a bunch of tokens to match, though, because of
 * possible backing-up.
 *
 * When we actually see the EOF, we change the status to "new"
 * (via yyrestart()), so that the user can continue scanning by
 * just pointing yyin at a new input file.
 */
#define YY_BUFFER_EOF_PENDING 2

};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file, int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b, FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes, int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *, yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 139
#define YY_END_OF_BUFFER 140
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
{
flex_int32_t yy_verify;
flex_int32_t yy_nxt;
};
static yyconst flex_int16_t yy_acclist[922] =
{
0,
16407,  117,  117,  127,  127,  107,  107,  103,  103,  140,
82,  139,   78,   82,  139,   79,  139,   79,   82,  139,
76,   82,  139,   73,   82,  139,   26,   82,  139,   73,
82,  139,   29,   82,  139,   77,   82,  139,   33,   82,
139,   34,   82,  139,   47,   82,  139,   46,   82,  139,
36,   82,  139,   45,   82,  139,   66,   82,  139,   48,
82,  139,   68,   82,  139,   37,   82,  139,   35,   82,
139,   59,   82,  139,   63,   82,  139,   60,   82,  139,
73,   82,  139,   25,   82,  139,   64,   82,  139,   49,
82,  139,   65,   82,  139,   50,   82,  139,   73,   82,

139,   73,   82,  139,   73,   82,  139,   73,   82,  139,
73,   82,  139,   73,   82,  139,   73,   82,  139,   73,
82,  139,   73,   82,  139,   73,   82,  139,   73,   82,
139,   73,   82,  139,   38,   82,  139,   31,   82,  139,
39,   82,  139,   25,   82,  139,   82,  139,   82,  139,
82,  139,   82,  139,   82,  139,   82,  139,   82,  139,
82,  139,   78,   82,  139, 16407,   73,   82,  139,   26,
82,  139,   73,   82,  139,   73,   82,  139,   73,   82,
139,   73,   82,  139,   73,   82,  139,   73,   82,  139,
73,   82,  139,   73,   82,  139,   73,   82,  139,   73,

82,  139,   73,   82,  139,   73,   82,  139,   73,   82,
139,   73,   82,  139,   82,  139,   82,  139,   82,  139,
82,  139,   82,  139,   82,  139,   82,  139,   82,  139,
117,  118,  139,  116,  139,  116,  118,  139,  114,  118,
139,  113,  118,  139,  118,  139,  127,  128,  139,  126,
139,  126,  128,  139,  123,  128,  139,  124,  128,  139,
128,  139,  107,  108,  139,  106,  139,  106,  108,  139,
108,  139,  108,  139,  103,  139,  102,  139,  102,  139,
101,  139,  100,  101,  139,   97,  139,   97,  101,  139,
101,  139,   94,  139,   78,   94,  139,   85,  139,   85,

94,  139,   76,   94,  139,   73,   94,  139,   26,   94,
139,   73,   94,  139,   29,   94,  139,   77,   94,  139,
33,   83,   94,  139,   34,   94,  139,   47,   94,  139,
88,   94,  139,   36,   94,  139,   90,   94,  139,   66,
94,  139,   48,   94,  139,   68,   94,  139,   37,   84,
94,  139,   35,   94,  139,   59,   94,  139,   63,   94,
139,   60,   94,  139,   25,   94,  139,   64,   94,  139,
49,   94,  139,   86,   94,  139,   50,   94,  139,   38,
94,  139,   31,   94,  139,   87,   94,  139,   25,   94,
139,   94,  139,   94,  139,   94,  139,   94,  139,   94,

139,   94,  139,   94,  139,   94,  139,  138,  139,  129,
139,  132,  139,  132,  139,   76,  139,   77,  139,  134,
138,  139,  131,  139,  130,  139,  135,  138,  139,  133,
138,  139,  136,  138,  139,  137,  138,  139,  139,   24,
139,  139,   24,  139,   24,  139,   24,  139,   24,  139,
24,  139,   24,  139,   24,  139,   24,  139,   24,  139,
24,  139,   24,  139,   24,  139,   24,  139,  139,  139,
139,  139,  139,  139,  139,  139,   78,   80,   80,   79,
73,   73,   73,   28,   73,   27,   73,   30,   50,   40,
41,   67,   42,   72,   43,   44,   74,   75,   71,   68,

61,   58,   57,   62,   73,   73,   73,   16,   73,   73,
73,   73,   73,   73,    1,   73,   73,   73,   73,   73,
73,   73,   73,   32,   73,   78, 16407,   73,   73,   73,
28,   73,   27,   73,   73,   73,   73,   16,   73,   73,
73,   73,   73,   73,    1,   73,   73,   73,   73,   73,
73,   73,   73,   73,  117,  116,  109,  110,  111,  112,
127,  126,  119,  120,  121,  122,  107,  106,  104,  105,
103,  102,  100,   97,   98,   99,   78,   83,   92,   93,
84,   85,   84,  138,  129,  132,   24,   24,   24,   24,
24,   24,   16,   24,   24,   24,   24,   24,   24,    1,

24,   24,   24,   24,   24,   24,   24,   24,   24,   81,
81,   73,   54,   51,   52,   53,   55,   71,   69,   70,
56,   73,   73,   73,   73,   73,    5,   73,   14,   73,
73,   73,   73,   73,   73,   73,   73,   73,   19,   73,
73, 8215,   73,   73,   73,   73,   73,   73,    5,   73,
14,   73,   73,   73,   73,   73,   73,   73,   73,   73,
19,   73,   73,  115,  115,  125,  125,   89,   91,   95,
95,   24,   24,   24,   24,   24,   24,    5,   24,   14,
24,   24,   24,   24,   24,   24,   24,   24,   24,   19,
24,   24,   73,   73,    9,   73,   73,   73,    3,   73,

73,   73,   73,   73,   73,   73,   73,   73,    2,   73,
73,   73,   73,   73,    9,   73,   73,   73,    3,   73,
73,   73,   73,   73,   73,   73,   73,   73,    2,   73,
73,   73,   96,   24,   24,    9,   24,   24,   24,    3,
24,   24,   24,   24,   24,   24,   24,   24,   24,    2,
24,   24,   24,   73,   73,   73,   17,   73,   20,   73,
73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
15,   73,   73,   73,   73,   17,   73,   20,   73,   73,
73,   73,   73,   73,   73,   73,   73,   73,   73,   15,
73,   24,   24,   24,   17,   24,   20,   24,   24,   24,

24,   24,   24,   24,   24,   24,   24,   24,   15,   24,
73,   73,    4,   73,   73,   73,   13,   73,   73,   22,
73,   21,   73,    6,   73,    7,   73,   73,   73,    4,
73,   73,   73,   13,   73,   73,   22,   73,   21,   73,
6,   73,    7,   73,   24,   24,    4,   24,   24,   24,
13,   24,   24,   22,   24,   21,   24,    6,   24,    7,
24,   73,   73,   73,   73,   73,   73,   73,   73,   73,
73,   24,   24,   24,   24,   24,   73,   18,   73,   73,
10,   73,   73,   73,   18,   73,   73,   10,   73,   73,
24,   18,   24,   24,   10,   24,   24,   12,   73,   73,

8,   73,   12,   73,   73,    8,   73,   12,   24,   24,
8,   24,   73,   73,   24,   11,   73,   11,   73,   11,
24
} ;

static yyconst flex_int16_t yy_accept[797] =
{
0,
1,    1,    2,    3,    4,    5,    6,    7,    8,    9,
10,   10,   10,   10,   10,   10,   10,   10,   10,   11,
13,   16,   18,   21,   24,   27,   30,   33,   36,   39,
42,   45,   48,   51,   54,   57,   60,   63,   66,   69,
72,   75,   78,   81,   84,   87,   90,   93,   96,   99,
102,  105,  108,  111,  114,  117,  120,  123,  126,  129,
132,  135,  138,  141,  144,  147,  149,  151,  153,  155,
157,  159,  161,  163,  167,  170,  173,  176,  179,  182,
185,  188,  191,  194,  197,  200,  203,  206,  209,  212,
215,  217,  219,  221,  223,  225,  227,  229,  231,  234,

236,  239,  242,  245,  247,  250,  252,  255,  258,  261,
263,  266,  268,  271,  273,  275,  277,  279,  281,  283,
286,  288,  291,  293,  295,  298,  300,  303,  306,  309,
312,  315,  318,  321,  325,  328,  331,  334,  337,  340,
343,  346,  349,  353,  356,  359,  362,  365,  368,  371,
374,  377,  380,  383,  386,  389,  392,  394,  396,  398,
400,  402,  404,  406,  408,  410,  412,  414,  416,  418,
420,  423,  425,  427,  430,  433,  436,  439,  440,  442,
443,  445,  447,  449,  451,  453,  455,  457,  459,  461,
463,  465,  467,  469,  470,  471,  472,  473,  474,  475,

476,  477,  478,  479,  480,  480,  480,  481,  482,  483,
483,  483,  483,  483,  483,  483,  483,  483,  484,  484,
484,  484,  484,  484,  484,  484,  484,  486,  488,  489,
490,  490,  491,  492,  493,  494,  495,  496,  497,  498,
498,  499,  500,  501,  501,  501,  501,  502,  503,  503,
504,  504,  505,  505,  505,  506,  507,  508,  510,  511,
512,  513,  514,  515,  517,  518,  519,  520,  521,  522,
523,  524,  525,  525,  526,  526,  526,  526,  526,  526,
526,  526,  528,  528,  528,  528,  528,  528,  528,  528,
528,  528,  528,  528,  529,  530,  530,  530,  530,  530,

530,  530,  530,  530,  531,  531,  531,  531,  531,  531,
531,  531,  531,  533,  535,  536,  537,  538,  540,  541,
542,  543,  544,  545,  547,  548,  549,  550,  551,  552,
553,  554,  555,  555,  555,  555,  555,  555,  555,  555,
556,  557,  558,  559,  560,  561,  561,  562,  563,  564,
565,  566,  567,  567,  568,  569,  570,  571,  572,  573,
574,  575,  576,  577,  578,  579,  580,  581,  582,  583,
583,  584,  585,  586,  587,  588,  589,  589,  589,  589,
589,  589,  589,  589,  589,  590,  590,  590,  590,  590,
590,  590,  590,  590,  591,  592,  593,  595,  596,  597,

598,  599,  600,  602,  603,  604,  605,  606,  607,  608,
609,  610,  610,  610,  610,  610,  610,  610,  610,  611,
612,  613,  613,  613,  613,  613,  613,  613,  613,  613,
613,  613,  613,  613,  613,  613,  614,  615,  616,  617,
618,  619,  619,  620,  620,  621,  622,  623,  624,  625,
626,  627,  629,  631,  632,  633,  634,  635,  636,  637,
638,  639,  641,  642,  642,  642,  642,  642,  642,  642,
642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
642,  642,  643,  644,  644,  644,  644,  644,  644,  644,

644,  644,  644,  644,  644,  644,  644,  644,  645,  646,
647,  648,  649,  651,  653,  654,  655,  656,  657,  658,
659,  660,  661,  663,  664,  664,  664,  664,  665,  666,
667,  668,  669,  670,  670,  671,  672,  672,  673,  673,
673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
673,  673,  673,  674,  675,  676,  677,  678,  680,  682,
683,  684,  685,  686,  687,  688,  689,  690,  692,  693,
693,  693,  693,  694,  694,  694,  694,  694,  694,  694,
695,  697,  698,  699,  701,  702,  703,  704,  705,  706,
707,  708,  709,  711,  712,  713,  713,  713,  713,  713,

713,  713,  713,  713,  713,  713,  713,  713,  713,  713,
713,  713,  713,  714,  714,  714,  714,  714,  714,  714,
715,  717,  718,  719,  721,  722,  723,  724,  725,  726,
727,  728,  729,  731,  732,  733,  734,  735,  735,  735,
735,  735,  735,  735,  736,  738,  739,  740,  742,  743,
744,  745,  746,  747,  748,  749,  750,  752,  753,  754,
755,  756,  757,  759,  761,  762,  763,  764,  765,  766,
767,  768,  769,  770,  771,  773,  773,  773,  773,  773,
773,  773,  773,  774,  775,  776,  778,  780,  781,  782,
783,  784,  785,  786,  787,  788,  789,  790,  792,  793,

794,  795,  797,  799,  800,  801,  802,  803,  804,  805,
806,  807,  808,  809,  811,  812,  813,  815,  816,  817,
819,  820,  822,  824,  826,  828,  828,  828,  829,  830,
832,  833,  834,  836,  837,  839,  841,  843,  845,  846,
847,  849,  850,  851,  853,  854,  856,  858,  860,  862,
863,  864,  865,  866,  867,  868,  869,  870,  871,  872,
873,  874,  875,  876,  877,  878,  880,  881,  883,  884,
885,  887,  888,  890,  891,  892,  894,  895,  897,  898,
900,  901,  903,  905,  906,  908,  910,  911,  913,  914,
915,  916,  918,  920,  922,  922

} ;

static yyconst flex_int32_t yy_ec[256] =
{
0,
1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
2,    2,    4,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    2,    1,    5,    6,    7,    8,    9,   10,   11,
12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
23,   24,   25,   26,   25,   25,   25,   27,   28,   29,
25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
25,   25,   25,   30,   25,   25,   25,   25,   25,   25,
31,   32,   33,   34,   25,    1,   35,   36,   37,   38,

39,   40,   25,   41,   42,   25,   43,   44,   45,   46,
47,   25,   25,   48,   49,   50,   51,   25,   52,   25,
53,   25,   54,   55,   56,   57,    1,   58,   58,   58,
58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
58,   58,   58,   59,   59,   59,   59,   59,   59,   59,
59,   59,   59,   59,   59,   59,   59,   59,   59,   60,
60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
60,    1,    1,   61,   61,   61,   61,   61,   61,   61,

61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
61,   61,   61,   62,   63,   63,   63,   63,   63,   63,
63,   63,   63,   63,   63,   63,   64,   65,   65,   66,
67,   67,   67,   68,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1
} ;

static yyconst flex_int32_t yy_meta[69] =
{
0,
1,    2,    3,    3,    4,    5,    5,    6,    1,    4,
7,    1,    8,    1,    9,    1,   10,    8,   11,    1,
9,    7,    7,    7,    5,    7,    5,    5,    5,    5,
1,    1,    1,    1,    5,    5,    5,    5,    5,    5,
5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
5,    5,    5,    1,    1,    1,    7,    1,    1,    1,
5,    5,    5,    5,    5,    5,    5,    5
} ;

static yyconst flex_int16_t yy_base[820] =
{
0,
0,   68,  134,  137,  145,  153,  156,  162,  142,  149,
169,  174,  192,    0,  259,  315,  372,    0, 1959, 2818,
179,  263,  273, 2818,  237,  245,  412, 1897, 2818, 2818,
2818,  151, 2818, 2818, 2818,  314,  171,  323, 2818, 2818,
266,  264,  269,  305,  270, 2818, 1888, 2818, 2818,  415,
419,  417,  314,  421,  452,  455,  457,  459,  461,  474,
487, 2818, 1841, 2818,  326,  237, 1835,  263,  127,  307,
131,  310, 1831,  536,  468,  483,  603,  512,  524,  526,
528,  540,  566,  578,  581,  585,  597,  600,  632,  645,
460, 1824,  523,  256,  529,  293,  533, 1824,    0, 2818,

1873,  281,  448, 1857,    0, 2818, 1868,  516,  555, 1849,
0, 2818, 1857, 1835, 1835,    0, 2818, 1843, 2818, 1843,
2818, 1835,  606, 2818,  685,  491,  639, 2818,  654,  645,
0, 1826, 2818, 2818, 2818,  346, 2818, 2818, 2818,  704,
631,  701, 1824, 2818,  632,  636,  655,  656, 2818, 1807,
2818, 2818, 2818, 1763, 2818,  674,  632, 1752,  666,  298,
672,  563,  675, 1750,    0, 1783, 2818, 1781, 2818, 2818,
0, 2818, 2818,    0,    0,    0,    0, 2818,  687,  695,
703, 1686,  132, 1670,  479,  409, 1674, 1670, 1659, 1661,
444,  652, 1655,  683, 1633,  686,  587,  714,  643,  717,

1625,  776, 2818, 1673,  779,  782,  786,  762,  766,  750,
1602,  755,  657,  760,  730,  763, 1599,    0,  766, 1595,
769,  740,  772,  745,  775, 1594,  807,  809, 2818, 2818,
0, 2818,  546, 1632, 1628,  823, 1621, 2818, 2818,    0,
2818,  825,  839,  827,  854,  852, 2818, 2818,  675, 2818,
846, 2818,  858,    0,  850,  842,  855,  857,  864,  879,
882,  891,  886,  898,  904,  910,  913,  922,  926,  938,
940, 2818,  900,  944,  927,  937,  940,  943,  946,  949,
952, 1011,  959,  967,  978, 1571,  981,  840,  984,  887,
987, 1570, 1621, 1019, 1031,  992, 1554,  995,  934,  998,

957, 1004, 1555, 1063, 1008, 1516, 1025, 1028, 1030, 1032,
1035, 1517, 1067, 1069, 1071, 1073, 1103, 1105, 1107, 1110,
1122, 1129, 1136, 1138, 1151, 1153, 1155, 1167, 1181, 1183,
1185, 1189, 1046, 1056, 1182, 1185, 1188, 1191, 1194,    0,
2818, 2818, 2818, 2818, 2818, 1160,    0, 2818, 2818, 2818,
2818, 2818, 1252,    0, 2818, 2818, 2818,    0, 2818, 1525,
2818, 2818, 2818, 1256, 2818, 1479, 1472, 1453,  956, 1260,
1448,    0, 1434, 2818,    0, 1380, 1215, 1366, 1221, 1083,
1224, 1130, 1227, 1365, 1227, 1238, 1361, 1241, 1179, 1244,
1206, 1247, 1360, 1368, 1259, 1359,    0, 1350, 1359, 1223,

1222, 1223,    0, 1216, 1261, 1190, 1190, 1191, 1175, 1184,
0, 1254, 1257, 1260, 1263, 1266, 1269, 1272, 2818, 1221,
1304, 1277, 1280, 1283, 1287, 1293, 1297, 1300, 1303, 1306,
1309, 1312, 1315, 1318, 1321, 2818, 2818, 2818, 2818, 2818,
1363, 1203, 1197, 1189, 1187, 2818, 1354, 1356, 1363, 1358,
1380, 1382, 1385, 1387, 1404, 1399, 1411, 1416, 1418, 1423,
1430, 1435, 1442, 1419, 1429, 1435, 1441, 1438, 1144, 1441,
1290, 1452, 1424, 1455, 1142, 1467, 1458, 1138, 1461, 1432,
1464, 1466, 1478, 1136, 1481, 1484, 1487, 1490, 1493, 1496,
1499, 2818, 1531, 1504, 1507, 1510, 1514, 1520, 1524, 1527,

1530, 1533, 1536, 1539, 1542, 1545, 1548, 1580, 1582, 1587,
1589, 1596, 1604, 1611, 1613, 1618, 1630, 1635, 1637, 1642,
1644, 1649, 1661, 1668, 1644, 1647, 1655, 2818, 1184, 2818,
1170, 1169, 1159, 1717, 2818, 1151, 1128, 1098, 1664, 1667,
1670, 1673, 1678, 1681, 1684, 1687, 1690, 1693, 1696, 1699,
1702, 1705, 1103, 1081, 1081, 1062, 1069, 1040,    0, 1033,
981,  950,  932,  930,  940,  925,  903,    0,  891, 1708,
1711, 1714, 1746, 1719, 1722, 1729, 1732, 1735, 1739, 1771,
1773, 1775, 1777, 1780, 1799, 1802, 1804, 1807, 1811, 1829,
1833, 1835, 1838, 1851, 1857, 1834, 1840, 1844, 1850, 1853,

1856, 1859, 1862, 1865, 1868, 1871, 1874, 1877, 1880, 1883,
1886, 1889, 1921, 1894, 1897, 1904, 1907, 1910, 1914, 1946,
1948, 1950, 1952, 1955, 1974, 1977, 1979, 1982, 1986, 2004,
2008, 2010, 2013, 2026, 2032, 2818,  888, 2009, 2015, 2019,
2025, 2028, 2031,  875,    0,  869,  864,  861,  845,  838,
844,  826,  820,  807,  808,  803,    0,  772,    0, 2063,
2065,    0, 2067, 2069, 2072, 2081, 2094, 2096, 2099, 2103,
2112, 2118, 2127, 2130, 2136, 2114, 2123, 2129, 2132, 2135,
2138,    0, 2170, 2172,    0, 2174, 2176, 2179, 2188, 2201,
2203, 2206, 2210, 2219, 2225, 2234, 2237, 2243,  743,    0,

0,    0,    0,  741,  707,  691,  677,  635,  611,  612,
566,  559,  553,    0, 2250, 2256, 2259, 2265, 2274, 2268,
2283, 2287, 2290, 2299, 2302,    0,    0, 2305, 2314, 2321,
2329, 2327, 2333, 2346, 2351, 2355, 2360, 2363,  543,  528,
0,  540,  524,    0,  525,    0,    0,    0,    0, 2368,
2377, 2382, 2390, 2394, 2399, 2408, 2412, 2421, 2424,  463,
404,  321,  301,  280, 2426, 2430, 2439, 2448, 2453, 2455,
2457, 2470, 2479, 2484,  233,    0,  231,    0,  228, 2486,
2488, 2492, 2501, 2510, 2514,    0,  114,    0, 2516, 2519,
97, 2523, 2538,    0, 2818, 2588, 2599, 2610, 2621, 2632,

2643, 2650, 2657, 2667, 2672, 2679, 2690, 2701, 2712, 2723,
2734, 2741, 2748, 2759, 2769, 2779, 2788, 2795, 2806
} ;

static yyconst flex_int16_t yy_def[820] =
{
0,
795,  795,  796,  796,  797,  797,  798,  798,  799,  799,
800,  800,  795,   13,  801,  801,  795,   17,  795,  795,
795,  795,  795,  795,  802,  803,  802,  795,  795,  795,
795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
795,  795,  795,   27,  795,  795,  795,  795,  795,   27,
27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
27,  795,  795,  795,  795,  795,  795,  795,  795,  795,
795,  795,  795,  804,  805,  806,  805,   77,   77,   77,
77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
795,  795,  795,  795,  795,  795,  795,  795,  807,  795,

795,  795,  795,  795,  808,  795,  795,  795,  795,  795,
809,  795,  795,  795,  795,  810,  795,  795,  795,  795,
795,  795,  795,  795,  795,  795,  795,  795,   27,  803,
27,  795,  795,  795,  795,  795,  795,  795,  795,  795,
795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
795,  795,  795,  795,  811,  795,  795,  795,  795,  795,
811,  795,  795,  811,  811,  811,  811,  795,  812,  813,
812,  181,  181,  181,  181,  181,  181,  181,  181,  181,
181,  181,  181,  795,  795,  795,  795,  795,  795,  795,

795,  795,  795,  795,  795,  795,  795,   27,   27,  795,
795,  795,  795,  795,  795,  795,  795,  130,  795,  795,
795,  795,  795,  795,  795,  795,   27,   27,  795,  795,
814,  795,  795,  795,  795,  795,  795,  795,  795,  815,
795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
795,  795,  795,  816,   27,   27,   27,   27,   27,   27,
27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
27,  795,  795,   27,  795,  795,  795,  795,  795,  795,
795,  804,  817,  818,  795,  795,  795,  795,  795,  795,
795,  795,  819,   77,   77,  795,  795,  795,  795,  795,

795,  795,  795,  806,  795,  795,  795,  795,  795,  795,
795,  795,   77,   77,   77,   77,   77,   77,   77,   77,
77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
77,   77,  795,  795,  795,  795,  795,  795,  795,  807,
795,  795,  795,  795,  795,  795,  808,  795,  795,  795,
795,  795,  795,  809,  795,  795,  795,  810,  795,  795,
795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
795,  811,  795,  795,  181,  181,  795,  795,  795,  795,
795,  795,  795,  795,  813,  795,  795,  795,  795,  795,
795,  795,  795,  181,  181,  181,  181,  181,  181,  181,

181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
181,  795,  795,  795,  795,  795,  795,  795,  795,  795,
27,  795,  795,  795,  795,  795,  795,  795,  795,  795,
795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
795,  795,  795,  795,  795,  795,   27,   27,   27,   27,
27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
27,   27,   27,  795,  795,  795,  817,  795,  795,  795,
795,  795,  795,  795,  795,  818,  795,  795,  795,  795,
795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
795,  795,   77,  795,  795,  795,  795,  795,  795,  795,

795,  795,  795,  795,  795,  795,  795,   77,   77,   77,
77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
77,   77,   77,   77,  795,  795,  795,  795,  795,  795,
795,  795,  795,  795,  795,  795,  795,  181,  795,  795,
795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
795,  795,  181,  181,  181,  181,  181,  181,  181,  181,
181,  181,  181,  181,  181,  181,  181,  181,  181,  795,
795,  795,   27,  795,  795,  795,  795,  795,  795,   27,
27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
27,   27,   27,   27,   27,  795,  795,  795,  795,  795,

795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
795,  795,   77,  795,  795,  795,  795,  795,  795,   77,
77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
77,   77,   77,   77,   77,  795,  181,  795,  795,  795,
795,  795,  795,  181,  181,  181,  181,  181,  181,  181,
181,  181,  181,  181,  181,  181,  181,  181,  181,   27,
27,  130,   27,   27,   27,   27,   27,   27,   27,   27,
27,   27,   27,   27,   27,  795,  795,  795,  795,  795,
795,  467,   77,   77,  304,   77,   77,   77,   77,   77,
77,   77,   77,   77,   77,   77,   77,   77,  181,  181,

385,  181,  181,  181,  181,  181,  181,  181,  181,  181,
181,  181,  181,  181,   27,   27,   27,   27,   27,   27,
27,   27,   27,   27,   27,  467,  476,   77,   77,   77,
77,   77,   77,   77,   77,   77,   77,   77,  181,  181,
181,  181,  181,  181,  181,  181,  181,  181,  181,   27,
27,   27,   27,   27,   77,   77,   77,   77,   77,  181,
181,  181,  181,  181,   27,   27,   27,   27,   27,   77,
77,   77,   77,   77,  181,  181,  181,  181,  181,   27,
27,   27,   77,   77,   77,  181,  181,  181,   27,   77,
181,   27,   77,  181,    0,  795,  795,  795,  795,  795,

795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
795,  795,  795,  795,  795,  795,  795,  795,  795
} ;

static yyconst flex_int16_t yy_nxt[2887] =
{
0,
20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
40,   41,   42,   43,   44,   45,   44,   44,   44,   44,
46,   47,   48,   49,   44,   50,   51,   52,   53,   54,
55,   56,   44,   44,   44,   44,   57,   58,   59,   60,
44,   61,   44,   62,   63,   64,   65,   20,   20,   20,
66,   67,   68,   69,   70,   71,   72,   73,   20,   74,
22,   23,   24,   75,   76,   77,   28,   29,   30,   31,
32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
42,   43,   78,   45,   78,   78,   78,   78,   46,   47,

48,   49,   78,   79,   80,   81,   82,   83,   84,   85,
78,   78,   78,   78,   86,   87,   88,   89,   78,   90,
78,   62,   63,   64,   65,   20,   20,   20,   91,   92,
93,   94,   95,   96,   97,   98,  100,  101,  102,  100,
101,  102,  794,  103,  117,  118,  103,  106,  107,  108,
104,  117,  118,  104,  109,  106,  107,  108,  112,  113,
791,  110,  109,  230,  112,  113,  395,  231,  114,  110,
120,  121,  122,  115,  114,  120,  121,  122,  396,  115,
202,  203,  204,  239,  277,  277,  123,  240,  241,  279,
279,  123,  124,  125,  126,  127,  128,  129,  130,  131,

132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
142,  143,  144,  145,  146,  147,  129,  148,  129,  129,
129,  129,  149,  150,  151,  152,  129,  129,  129,  129,
129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
129,  129,  129,  129,  129,  153,  154,  155,  156,  124,
124,  124,  157,  158,  159,  160,  161,  162,  163,  164,
166,  167,  168,  169,  205,  249,  788,  246,  170,  171,
251,  253,  787,  172,  205,  207,  209,  206,  786,  173,
174,  175,  176,  206,  177,  342,  250,  206,  247,  248,
343,  252,  248,  206,  274,  274,  274,  210,  211,  212,

213,  214,  215,  216,  217,  219,  220,  221,  222,  223,
224,  225,  226,  335,  335,  177,  166,  167,  168,  169,
276,  276,  276,  232,  170,  171,  233,  273,  779,  172,
234,  235,  236,  208,  208,  173,  174,  175,  176,  242,
177,  243,  208,  208,  208,  237,  778,  238,  248,  244,
245,  337,  337,  208,  208,  277,  277,  259,  230,  260,
244,  245,  231,  208,  278,  278,  278,  280,  280,  280,
777,  177,  178,  178,  178,  178,  178,  179,  180,  181,
178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
178,  178,  178,  178,  178,  178,  181,  178,  181,  181,

181,  181,  178,  178,  178,  178,  181,  182,  183,  184,
185,  186,  187,  188,  181,  181,  181,  181,  189,  190,
191,  192,  181,  193,  181,  178,  178,  178,  178,  178,
178,  178,  194,  195,  196,  197,  198,  199,  200,  201,
227,  228,  776,  208,  208,  208,  208,  208,  208,  208,
208,  227,  344,  256,  208,  400,  208,  345,  208,  401,
208,  228,  255,  258,  208,  257,  208,  261,  208,  293,
208,  262,  210,  211,  212,  213,  214,  215,  216,  217,
208,  208,  406,  208,  208,  208,  208,  208,  208,  208,
208,  208,  205,  263,  264,  407,  208,  266,  208,  267,

208,  208,  208,  208,  208,  206,  265,  295,  208,  775,
208,  206,  268,  208,  269,  208,  208,  332,  332,  332,
349,  270,  398,  208,  399,  350,  208,  271,  296,  297,
298,  299,  300,  301,  302,  303,  208,  282,  203,  204,
294,  294,  284,  305,  306,  307,  308,  309,  310,  311,
312,  294,  294,  294,  294,  294,  294,  294,  238,  351,
316,  294,  437,  294,  352,  294,  764,  294,  294,  294,
763,  315,  317,  294,  318,  294,  762,  294,  761,  294,
334,  334,  334,  319,  760,  320,  336,  336,  336,  294,
338,  338,  338,  749,  294,  294,  285,  286,  287,  288,

289,  290,  291,  292,  293,  294,  294,  294,  748,  294,
294,  747,  321,  294,  294,  294,  322,  294,  362,  323,
324,  279,  279,  363,  294,  294,  294,  294,  294,  294,
294,  313,  314,  246,  325,  326,  294,  249,  327,  294,
205,  369,  313,  239,  414,  414,  294,  240,  241,  294,
746,  328,  314,  206,  247,  248,  251,  253,  250,  206,
294,  294,  745,  296,  297,  298,  299,  300,  301,  302,
303,  294,  329,  294,  294,  273,  249,  252,  248,  330,
744,  294,  208,  208,  294,  331,  364,  203,  204,  274,
274,  274,  408,  208,  294,  365,  248,  250,  366,  409,

367,  416,  416,  208,  368,  219,  220,  221,  222,  223,
224,  225,  226,  232,  424,  424,  233,  242,  743,  243,
370,  235,  236,  276,  276,  276,  376,  244,  245,  278,
278,  278,  280,  280,  280,  237,  742,  238,  244,  245,
411,  411,  411,  413,  413,  413,  741,  377,  378,  379,
380,  381,  382,  383,  384,  386,  387,  388,  389,  390,
391,  392,  393,  377,  378,  379,  380,  381,  382,  383,
384,  415,  415,  415,  417,  417,  417,  202,  203,  204,
205,  419,  420,  205,  419,  420,  740,  205,  426,  426,
208,  208,  739,  206,  208,  208,  206,  431,  431,  206,

206,  208,  206,  433,  433,  208,  206,  208,  208,  208,
714,  208,  423,  423,  423,  208,  421,  425,  425,  425,
427,  427,  427,  218,  218,  218,  430,  430,  430,  432,
432,  432,  434,  434,  434,  208,  208,  208,  208,  713,
442,  236,  442,  441,  712,  443,  208,  251,  208,  244,
245,  244,  245,  246,  711,  242,  208,  243,  208,  253,
244,  245,  244,  245,  710,  244,  245,  444,  252,  444,
208,  208,  445,  709,  247,  248,  244,  245,  208,  208,
248,  208,  708,  208,  208,  208,  208,  707,  447,  208,
448,  449,  208,  208,  208,  706,  208,  487,  487,  208,

450,  273,  705,  208,  208,  704,  208,  208,  208,  703,
208,  208,  451,  208,  208,  208,  452,  702,  208,  208,
208,  208,  248,  455,  699,  208,  208,  208,  208,  453,
208,  208,  208,  208,  658,  208,  454,  208,  208,  208,
208,  208,  208,  208,  456,  489,  489,  208,  657,  208,
208,  208,  208,  208,  208,  208,  459,  205,  457,  458,
293,  208,  208,  460,  461,  208,  208,  208,  208,  208,
206,  208,  208,  208,  656,  208,  206,  208,  655,  208,
654,  463,  653,  208,  274,  274,  274,  208,  652,  208,
462,  496,  496,  208,  274,  274,  274,  274,  274,  274,

274,  274,  274,  464,  464,  464,  465,  465,  465,  466,
466,  466,  282,  203,  204,  498,  498,  284,  651,  468,
469,  470,  471,  472,  473,  474,  475,  477,  478,  479,
480,  481,  482,  483,  484,  283,  283,  283,  486,  486,
486,  488,  488,  488,  490,  490,  490,  294,  294,  294,
294,  294,  495,  495,  495,  497,  497,  497,  294,  294,
294,  499,  499,  499,  293,  304,  304,  304,  294,  650,
294,  285,  286,  287,  288,  289,  290,  291,  292,  649,
294,  493,  502,  502,  502,  503,  503,  504,  504,  504,
505,  505,  506,  506,  506,  294,  294,  294,  294,  294,

294,  294,  294,  332,  332,  332,  294,  648,  294,  508,
294,  647,  294,  332,  332,  332,  294,  646,  294,  645,
294,  509,  510,  305,  306,  307,  308,  309,  310,  311,
312,  294,  294,  294,  294,  294,  294,  644,  294,  294,
541,  541,  294,  637,  294,  636,  294,  513,  511,  294,
294,  294,  294,  535,  294,  512,  294,  294,  294,  294,
533,  294,  528,  529,  294,  294,  294,  294,  294,  514,
532,  294,  530,  516,  515,  294,  346,  294,  294,  294,
294,  294,  294,  294,  294,  294,  528,  294,  543,  543,
294,  517,  294,  609,  294,  294,  294,  603,  520,  602,

294,  518,  519,  596,  294,  445,  294,  445,  521,  294,
294,  294,  294,  294,  294,  443,  294,  294,  294,  522,
294,  443,  294,  419,  294,  569,  524,  568,  294,  567,
294,  566,  294,  565,  294,  523,  548,  548,  294,  332,
332,  332,  332,  332,  332,  525,  525,  525,  526,  526,
526,  527,  527,  527,  530,  531,  562,  364,  203,  204,
561,  534,  535,  536,  550,  550,  365,  560,  353,  366,
559,  367,  375,  375,  375,  368,  370,  537,  540,  540,
540,  542,  542,  542,  544,  544,  544,  386,  387,  388,
389,  390,  391,  392,  393,  385,  385,  385,  547,  547,

547,  549,  549,  549,  551,  551,  551,  554,  555,  563,
564,  411,  411,  411,  411,  411,  411,  411,  411,  411,
411,  411,  411,  570,  570,  570,  571,  571,  571,  572,
572,  572,  208,  208,  208,  208,  208,  208,  208,  208,
208,  208,  208,  208,  208,  208,  208,  598,  598,  573,
574,  574,  574,  208,  575,  575,  575,  576,  576,  576,
218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
218,  218,  577,  577,  577,  578,  578,  578,  579,  579,
579,  441,  208,  208,  208,  208,  208,  208,  580,  244,
245,  208,  208,  208,  581,  208,  558,  208,  557,  582,

244,  245,  208,  208,  556,  208,  553,  583,  208,  208,
208,  208,  208,  208,  208,  208,  208,  552,  584,  208,
546,  585,  545,  586,  208,  539,  208,  208,  208,  208,
538,  208,  208,  208,  208,  373,  208,  588,  208,  208,
208,  587,  293,  208,  208,  208,  208,  208,  208,  371,
208,  208,  208,  208,  371,  208,  591,  208,  208,  208,
208,  589,  208,  208,  208,  208,  590,  208,  293,  208,
208,  208,  592,  533,  208,  593,  595,  595,  595,  208,
532,  208,  600,  600,  208,  594,  595,  595,  595,  605,
605,  208,  595,  595,  595,  467,  467,  467,  597,  597,

597,  468,  469,  470,  471,  472,  473,  474,  475,  599,
599,  599,  601,  601,  601,  476,  476,  476,  604,  604,
604,  606,  606,  606,  607,  607,  360,  477,  478,  479,
480,  481,  482,  483,  484,  608,  608,  608,  283,  283,
283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
610,  610,  610,  611,  611,  611,  612,  612,  612,  294,
294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
294,  294,  294,  294,  507,  501,  613,  614,  614,  614,
294,  615,  615,  615,  616,  616,  616,  304,  304,  304,
304,  304,  304,  304,  304,  304,  304,  304,  304,  617,

617,  617,  618,  618,  618,  619,  619,  619,  294,  294,
294,  294,  500,  494,  620,  294,  294,  294,  294,  294,
621,  294,  293,  622,  294,  294,  294,  491,  294,  294,
485,  294,  294,  294,  624,  294,  294,  439,  623,  294,
294,  294,  294,  625,  438,  294,  294,  294,  234,  626,
294,  435,  294,  294,  429,  627,  428,  294,  294,  294,
294,  422,  294,  294,  294,  294,  294,  294,  628,  294,
294,  294,  294,  294,  294,  203,  294,  294,  294,  294,
631,  294,  418,  294,  294,  629,  294,  630,  294,  294,
294,  294,  412,  632,  633,  410,  294,  294,  294,  405,

294,  635,  635,  635,  635,  635,  635,  294,  404,  403,
294,  634,  635,  635,  635,  402,  397,  294,  534,  535,
536,  375,  375,  375,  375,  375,  375,  375,  375,  375,
375,  375,  375,  394,  537,  638,  638,  638,  639,  639,
639,  640,  640,  640,  385,  385,  385,  385,  385,  385,
385,  385,  385,  385,  385,  385,  641,  641,  641,  642,
642,  642,  643,  643,  643,  659,  659,  659,  659,  659,
659,  659,  659,  659,  208,  208,  661,  661,  661,  661,
661,  661,  660,  374,  373,  208,  661,  661,  661,  662,
662,  662,  662,  662,  662,  208,  662,  662,  662,  208,

208,  208,  208,  208,  208,  208,  208,  281,  208,  208,
208,  275,  208,  663,  208,  664,  208,  272,  665,  208,
208,  666,  208,  254,  208,  371,  208,  208,  208,  208,
208,  208,  208,  208,  229,  208,  208,  361,  208,  208,
208,  208,  669,  208,  360,  359,  208,  357,  208,  667,
208,  668,  356,  208,  670,  671,  208,  208,  208,  355,
208,  208,  208,  208,  208,  353,  208,  208,  208,  673,
348,  674,  208,  346,  208,  341,  672,  208,  208,  208,
208,  339,  208,  333,  208,  208,  208,  208,  281,  675,
208,  467,  467,  467,  275,  272,  208,  467,  467,  467,

208,  467,  467,  467,  254,  229,  208,  467,  467,  467,
676,  676,  676,  677,  677,  677,  678,  678,  678,  476,
476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
476,  679,  679,  679,  680,  680,  680,  681,  681,  681,
682,  682,  682,  682,  682,  682,  682,  682,  682,  294,
294,  684,  684,  684,  684,  684,  684,  683,  795,  795,
294,  684,  684,  684,  685,  685,  685,  685,  685,  685,
294,  685,  685,  685,  294,  294,  294,  294,  294,  294,
294,  294,  795,  294,  294,  294,  795,  294,  686,  294,
687,  294,  795,  688,  294,  294,  689,  294,  795,  294,

795,  294,  294,  294,  294,  294,  294,  294,  294,  795,
294,  294,  795,  294,  294,  294,  294,  692,  294,  795,
795,  294,  795,  294,  690,  294,  691,  795,  294,  693,
694,  294,  294,  294,  795,  294,  294,  294,  294,  294,
795,  294,  294,  294,  696,  795,  697,  294,  795,  294,
795,  695,  294,  294,  294,  294,  795,  294,  795,  294,
294,  294,  294,  795,  698,  294,  700,  700,  700,  795,
795,  294,  700,  700,  700,  294,  700,  700,  700,  795,
795,  294,  701,  701,  701,  701,  701,  701,  701,  701,
701,  208,  208,  208,  208,  208,  208,  208,  208,  795,

208,  208,  208,  795,  208,  795,  208,  795,  208,  208,
208,  208,  715,  795,  208,  795,  208,  716,  208,  795,
717,  208,  208,  208,  208,  208,  795,  208,  208,  795,
208,  208,  208,  208,  795,  208,  795,  719,  208,  718,
208,  208,  208,  208,  720,  208,  208,  208,  208,  795,
722,  208,  208,  795,  721,  208,  208,  208,  208,  208,
795,  208,  795,  723,  208,  208,  208,  208,  795,  208,
725,  726,  726,  726,  795,  208,  724,  795,  795,  208,
726,  726,  726,  795,  795,  208,  726,  726,  726,  727,
727,  727,  727,  727,  727,  727,  727,  727,  294,  294,

294,  294,  294,  294,  294,  294,  795,  294,  294,  294,
795,  294,  795,  294,  795,  294,  294,  294,  294,  728,
795,  294,  795,  294,  729,  294,  795,  730,  294,  294,
294,  294,  294,  795,  294,  294,  795,  294,  294,  294,
294,  795,  294,  795,  732,  294,  731,  294,  294,  294,
294,  733,  294,  294,  294,  294,  795,  735,  294,  294,
795,  734,  294,  294,  294,  294,  294,  795,  294,  795,
736,  294,  294,  294,  294,  795,  294,  738,  208,  208,
795,  795,  294,  737,  208,  208,  294,  208,  208,  208,
795,  750,  294,  208,  208,  208,  208,  208,  208,  208,

795,  752,  208,  208,  208,  208,  751,  208,  208,  795,
795,  208,  208,  208,  208,  208,  208,  208,  208,  208,
753,  795,  208,  208,  754,  795,  208,  208,  208,  208,
208,  208,  208,  294,  294,  795,  208,  795,  208,  208,
795,  208,  294,  294,  294,  795,  755,  795,  208,  294,
294,  208,  795,  294,  294,  294,  294,  294,  294,  795,
294,  294,  294,  294,  756,  757,  294,  795,  294,  795,
294,  795,  294,  758,  294,  294,  294,  795,  294,  294,
294,  795,  294,  294,  294,  294,  795,  759,  294,  294,
294,  294,  294,  795,  294,  294,  208,  208,  795,  294,

294,  795,  294,  795,  294,  208,  208,  208,  795,  294,
208,  208,  294,  795,  765,  766,  208,  208,  208,  208,
795,  208,  208,  208,  795,  795,  208,  294,  294,  208,
795,  767,  795,  208,  795,  768,  294,  294,  294,  208,
294,  294,  769,  208,  795,  770,  771,  294,  294,  294,
294,  294,  294,  294,  208,  208,  795,  294,  208,  208,
294,  772,  795,  294,  795,  208,  773,  208,  208,  208,
294,  780,  774,  294,  795,  208,  208,  208,  208,  208,
781,  208,  208,  294,  294,  294,  294,  208,  208,  795,
795,  782,  208,  795,  294,  795,  294,  208,  294,  294,

783,  795,  208,  795,  294,  795,  294,  294,  294,  294,
795,  784,  294,  294,  208,  208,  208,  208,  294,  294,
208,  208,  785,  294,  795,  208,  795,  208,  294,  294,
294,  208,  795,  294,  789,  208,  795,  208,  294,  294,
294,  208,  294,  294,  208,  208,  795,  294,  294,  294,
294,  208,  208,  294,  795,  208,  790,  795,  294,  294,
795,  792,  208,  294,  793,  208,  294,  294,  294,  795,
795,  795,  208,  795,  795,  795,  795,  294,  795,  795,
795,  795,  795,  795,  795,  795,  795,  294,   99,   99,
99,   99,   99,   99,   99,   99,   99,   99,   99,  105,

105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
111,  116,  116,  116,  116,  116,  116,  116,  116,  116,
116,  116,  119,  119,  119,  119,  119,  119,  119,  119,
119,  119,  119,  165,  165,  165,  165,  165,  165,  165,
165,  165,  165,  165,  208,  795,  795,  795,  795,  795,
208,  218,  795,  795,  795,  795,  795,  218,  283,  283,
795,  283,  283,  294,  795,  795,  294,  795,  795,  795,
795,  795,  294,  304,  795,  795,  795,  795,  795,  304,
340,  340,  795,  795,  340,  340,  340,  340,  340,  795,

340,  347,  347,  795,  795,  347,  347,  347,  347,  347,
795,  347,  354,  354,  795,  354,  354,  354,  354,  795,
354,  354,  354,  358,  358,  795,  358,  358,  358,  358,
358,  358,  358,  358,  372,  795,  795,  795,  372,  372,
372,  372,  795,  372,  372,  375,  795,  795,  795,  795,
795,  375,  385,  795,  795,  795,  795,  795,  385,  436,
436,  436,  436,  436,  436,  436,  436,  436,  436,  440,
440,  440,  440,  440,  440,  440,  440,  440,  440,  446,
446,  446,  446,  446,  446,  446,  446,  446,  446,  467,
795,  795,  467,  795,  795,  795,  795,  795,  467,  476,

795,  795,  795,  795,  795,  476,  492,  492,  492,  492,
492,  492,  795,  492,  492,  492,  492,   19,  795,  795,
795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
795,  795,  795,  795,  795,  795
} ;

static yyconst flex_int16_t yy_chk[2887] =
{
0,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    2,    2,
2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
2,    2,    2,    2,    2,    2,    3,    3,    3,    4,
4,    4,  791,    3,    9,    9,    4,    5,    5,    5,
3,   10,   10,    4,    5,    6,    6,    6,    7,    7,
787,    5,    6,   32,    8,    8,  183,   32,    7,    6,
11,   11,   11,    7,    8,   12,   12,   12,  183,    8,
21,   21,   21,   37,   69,   69,   11,   37,   37,   71,
71,   12,   13,   13,   13,   13,   13,   13,   13,   13,

13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
15,   15,   15,   15,   22,   42,  779,   41,   15,   15,
43,   45,  777,   15,   23,   23,   25,   22,  775,   15,
15,   15,   15,   22,   15,  102,   42,   23,   41,   41,
102,   43,   45,   23,   66,   66,   66,   25,   25,   25,

25,   25,   25,   25,   25,   26,   26,   26,   26,   26,
26,   26,   26,   94,   94,   15,   16,   16,   16,   16,
68,   68,   68,   36,   16,   16,   36,   65,  764,   16,
36,   36,   36,   44,   44,   16,   16,   16,   16,   38,
16,   38,   53,   53,   44,   36,  763,   36,   65,   38,
38,   96,   96,   53,   44,  160,  160,   53,  136,   53,
38,   38,  136,   53,   70,   70,   70,   72,   72,   72,
762,   16,   17,   17,   17,   17,   17,   17,   17,   17,
17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
27,   27,  761,   50,   50,   52,   52,   51,   51,   54,
54,   27,  103,   51,   50,  186,   52,  103,   51,  186,
54,   27,   50,   52,   50,   51,   52,   54,   51,   75,
54,   54,   27,   27,   27,   27,   27,   27,   27,   27,
55,   55,  191,   56,   56,   57,   57,   58,   58,   59,
59,   55,  126,   55,   56,  191,   57,   58,   58,   59,

59,   55,   60,   60,   56,  126,   57,   75,   58,  760,
59,  126,   59,   60,   60,   61,   61,   91,   91,   91,
108,   60,  185,   60,  185,  108,   61,   61,   75,   75,
75,   75,   75,   75,   75,   75,   61,   74,   74,   74,
78,   78,   74,   76,   76,   76,   76,   76,   76,   76,
76,   78,   79,   79,   80,   80,   81,   81,  233,  109,
80,   78,  233,   79,  109,   80,  745,   81,   82,   82,
743,   79,   80,   79,   81,   80,  742,   81,  740,   82,
93,   93,   93,   82,  739,   82,   95,   95,   95,   82,
97,   97,   97,  713,   83,   83,   74,   74,   74,   74,

74,   74,   74,   74,   77,   83,   84,   84,  712,   85,
85,  711,   83,   86,   86,   83,   83,   84,  123,   84,
85,  162,  162,  123,   86,   87,   87,   84,   88,   88,
85,   77,   77,  145,   86,   87,   87,  146,   88,   88,
127,  127,   77,  141,  197,  197,   87,  141,  141,   88,
710,   88,   77,  127,  145,  145,  147,  148,  146,  127,
89,   89,  709,   77,   77,   77,   77,   77,   77,   77,
77,   89,   89,   90,   90,  156,  249,  147,  148,   89,
708,   89,  129,  129,   90,   90,  125,  125,  125,  157,
157,  157,  192,  129,   90,  125,  156,  249,  125,  192,

125,  199,  199,  129,  125,  130,  130,  130,  130,  130,
130,  130,  130,  140,  213,  213,  140,  142,  707,  142,
140,  140,  140,  159,  159,  159,  179,  142,  142,  161,
161,  161,  163,  163,  163,  140,  706,  140,  142,  142,
194,  194,  194,  196,  196,  196,  705,  179,  179,  179,
179,  179,  179,  179,  179,  180,  180,  180,  180,  180,
180,  180,  180,  181,  181,  181,  181,  181,  181,  181,
181,  198,  198,  198,  200,  200,  200,  202,  202,  202,
205,  205,  205,  206,  206,  206,  704,  207,  215,  215,
208,  208,  699,  205,  209,  209,  206,  222,  222,  205,

207,  208,  206,  224,  224,  209,  207,  210,  210,  210,
658,  208,  212,  212,  212,  209,  209,  214,  214,  214,
216,  216,  216,  219,  219,  219,  221,  221,  221,  223,
223,  223,  225,  225,  225,  227,  227,  228,  228,  656,
244,  236,  244,  242,  655,  244,  227,  251,  228,  236,
236,  242,  242,  246,  654,  243,  227,  243,  228,  253,
236,  236,  242,  242,  653,  243,  243,  245,  251,  245,
256,  256,  245,  652,  246,  246,  243,  243,  255,  255,
253,  256,  651,  257,  257,  258,  258,  650,  255,  255,
256,  256,  259,  259,  257,  649,  258,  288,  288,  255,

257,  273,  648,  259,  257,  647,  258,  260,  260,  646,
261,  261,  259,  259,  263,  263,  260,  644,  260,  262,
262,  261,  273,  263,  637,  263,  264,  264,  260,  261,
262,  261,  265,  265,  569,  263,  262,  264,  266,  266,
262,  267,  267,  265,  265,  290,  290,  264,  567,  266,
268,  268,  267,  265,  269,  269,  267,  369,  266,  266,
283,  268,  267,  268,  269,  269,  270,  270,  271,  271,
369,  268,  274,  274,  566,  269,  369,  270,  565,  271,
564,  271,  563,  274,  275,  275,  275,  270,  562,  271,
270,  299,  299,  274,  276,  276,  276,  277,  277,  277,

278,  278,  278,  279,  279,  279,  280,  280,  280,  281,
281,  281,  282,  282,  282,  301,  301,  282,  561,  283,
283,  283,  283,  283,  283,  283,  283,  284,  284,  284,
284,  284,  284,  284,  284,  285,  285,  285,  287,  287,
287,  289,  289,  289,  291,  291,  291,  294,  294,  296,
296,  296,  298,  298,  298,  300,  300,  300,  294,  295,
295,  302,  302,  302,  304,  305,  305,  305,  294,  560,
295,  282,  282,  282,  282,  282,  282,  282,  282,  558,
295,  295,  307,  307,  307,  308,  308,  309,  309,  309,
310,  310,  311,  311,  311,  313,  313,  314,  314,  315,

315,  316,  316,  333,  333,  333,  313,  557,  314,  315,
315,  556,  316,  334,  334,  334,  313,  555,  314,  554,
315,  316,  316,  304,  304,  304,  304,  304,  304,  304,
304,  317,  317,  318,  318,  319,  319,  553,  320,  320,
380,  380,  317,  538,  318,  537,  319,  320,  317,  320,
321,  321,  317,  536,  318,  319,  319,  322,  322,  320,
533,  321,  346,  346,  323,  323,  324,  324,  322,  321,
532,  321,  531,  323,  322,  323,  346,  324,  322,  325,
325,  326,  326,  327,  327,  323,  529,  324,  382,  382,
325,  325,  326,  484,  327,  328,  328,  478,  327,  475,

325,  326,  326,  469,  327,  445,  328,  444,  328,  329,
329,  330,  330,  331,  331,  443,  328,  332,  332,  329,
329,  442,  330,  420,  331,  410,  331,  409,  332,  408,
329,  407,  330,  406,  331,  330,  389,  389,  332,  335,
335,  335,  336,  336,  336,  337,  337,  337,  338,  338,
338,  339,  339,  339,  353,  353,  404,  364,  364,  364,
402,  370,  370,  370,  391,  391,  364,  401,  353,  364,
400,  364,  377,  377,  377,  364,  370,  370,  379,  379,
379,  381,  381,  381,  383,  383,  383,  385,  385,  385,
385,  385,  385,  385,  385,  386,  386,  386,  388,  388,

388,  390,  390,  390,  392,  392,  392,  395,  395,  405,
405,  412,  412,  412,  413,  413,  413,  414,  414,  414,
415,  415,  415,  416,  416,  416,  417,  417,  417,  418,
418,  418,  421,  421,  422,  422,  422,  423,  423,  423,
424,  424,  424,  421,  425,  425,  425,  471,  471,  421,
426,  426,  426,  421,  427,  427,  427,  428,  428,  428,
429,  429,  429,  430,  430,  430,  431,  431,  431,  432,
432,  432,  433,  433,  433,  434,  434,  434,  435,  435,
435,  441,  447,  447,  448,  448,  450,  450,  447,  441,
441,  449,  449,  447,  448,  448,  399,  450,  398,  449,

441,  441,  449,  447,  396,  448,  394,  450,  451,  451,
452,  452,  449,  453,  453,  454,  454,  393,  451,  451,
387,  452,  384,  454,  453,  378,  454,  456,  456,  451,
376,  452,  455,  455,  453,  373,  454,  456,  456,  457,
457,  455,  467,  455,  458,  458,  459,  459,  456,  371,
457,  460,  460,  455,  368,  458,  459,  459,  461,  461,
457,  457,  460,  462,  462,  458,  458,  459,  476,  461,
463,  463,  460,  367,  462,  461,  464,  464,  464,  461,
366,  463,  473,  473,  462,  463,  465,  465,  465,  480,
480,  463,  466,  466,  466,  468,  468,  468,  470,  470,

470,  467,  467,  467,  467,  467,  467,  467,  467,  472,
472,  472,  474,  474,  474,  477,  477,  477,  479,  479,
479,  481,  481,  481,  482,  482,  360,  476,  476,  476,
476,  476,  476,  476,  476,  483,  483,  483,  485,  485,
485,  486,  486,  486,  487,  487,  487,  488,  488,  488,
489,  489,  489,  490,  490,  490,  491,  491,  491,  493,
493,  494,  494,  494,  495,  495,  495,  496,  496,  496,
493,  497,  497,  497,  312,  306,  493,  498,  498,  498,
493,  499,  499,  499,  500,  500,  500,  501,  501,  501,
502,  502,  502,  503,  503,  503,  504,  504,  504,  505,

505,  505,  506,  506,  506,  507,  507,  507,  508,  508,
509,  509,  303,  297,  508,  510,  510,  511,  511,  508,
509,  509,  293,  510,  512,  512,  510,  292,  511,  508,
286,  509,  513,  513,  512,  512,  510,  237,  511,  514,
514,  515,  515,  513,  235,  512,  516,  516,  234,  515,
514,  226,  515,  513,  220,  516,  217,  516,  517,  517,
514,  211,  515,  518,  518,  519,  519,  516,  517,  517,
520,  520,  521,  521,  518,  204,  519,  522,  522,  517,
520,  520,  201,  521,  518,  518,  519,  519,  522,  523,
523,  520,  195,  521,  522,  193,  524,  524,  522,  190,

523,  525,  525,  525,  526,  526,  526,  524,  189,  188,
523,  524,  527,  527,  527,  187,  184,  524,  534,  534,
534,  539,  539,  539,  540,  540,  540,  541,  541,  541,
542,  542,  542,  182,  534,  543,  543,  543,  544,  544,
544,  545,  545,  545,  546,  546,  546,  547,  547,  547,
548,  548,  548,  549,  549,  549,  550,  550,  550,  551,
551,  551,  552,  552,  552,  570,  570,  570,  571,  571,
571,  572,  572,  572,  573,  573,  574,  574,  574,  575,
575,  575,  573,  168,  166,  573,  576,  576,  576,  577,
577,  577,  578,  578,  578,  573,  579,  579,  579,  580,

580,  581,  581,  582,  582,  583,  583,  164,  584,  584,
580,  158,  581,  580,  582,  582,  583,  154,  583,  584,
580,  584,  581,  150,  582,  143,  583,  585,  585,  584,
586,  586,  587,  587,  132,  588,  588,  122,  585,  589,
589,  586,  587,  587,  120,  118,  588,  115,  585,  585,
589,  586,  114,  587,  588,  589,  588,  590,  590,  113,
589,  591,  591,  592,  592,  110,  593,  593,  590,  591,
107,  592,  591,  104,  592,  101,  590,  593,  590,  594,
594,   98,  591,   92,  592,  595,  595,  593,   73,  594,
594,  596,  596,  596,   67,   63,  595,  597,  597,  597,

594,  598,  598,  598,   47,   28,  595,  599,  599,  599,
600,  600,  600,  601,  601,  601,  602,  602,  602,  603,
603,  603,  604,  604,  604,  605,  605,  605,  606,  606,
606,  607,  607,  607,  608,  608,  608,  609,  609,  609,
610,  610,  610,  611,  611,  611,  612,  612,  612,  613,
613,  614,  614,  614,  615,  615,  615,  613,   19,    0,
613,  616,  616,  616,  617,  617,  617,  618,  618,  618,
613,  619,  619,  619,  620,  620,  621,  621,  622,  622,
623,  623,    0,  624,  624,  620,    0,  621,  620,  622,
622,  623,    0,  623,  624,  620,  624,  621,    0,  622,

0,  623,  625,  625,  624,  626,  626,  627,  627,    0,
628,  628,    0,  625,  629,  629,  626,  627,  627,    0,
0,  628,    0,  625,  625,  629,  626,    0,  627,  628,
629,  628,  630,  630,    0,  629,  631,  631,  632,  632,
0,  633,  633,  630,  631,    0,  632,  631,    0,  632,
0,  630,  633,  630,  634,  634,    0,  631,    0,  632,
635,  635,  633,    0,  634,  634,  638,  638,  638,    0,
0,  635,  639,  639,  639,  634,  640,  640,  640,    0,
0,  635,  641,  641,  641,  642,  642,  642,  643,  643,
643,  660,  660,  661,  661,  663,  663,  664,  664,    0,

665,  665,  660,    0,  661,    0,  663,    0,  664,  666,
666,  665,  660,    0,  661,    0,  663,  665,  664,    0,
666,  665,  667,  667,  668,  668,    0,  669,  669,    0,
666,  670,  670,  667,    0,  668,    0,  668,  669,  667,
671,  671,  670,  667,  669,  668,  672,  672,  669,    0,
671,  671,  670,    0,  670,  673,  673,  672,  674,  674,
0,  671,    0,  672,  675,  675,  673,  672,    0,  674,
674,  676,  676,  676,    0,  675,  673,    0,    0,  674,
677,  677,  677,    0,    0,  675,  678,  678,  678,  679,
679,  679,  680,  680,  680,  681,  681,  681,  683,  683,

684,  684,  686,  686,  687,  687,    0,  688,  688,  683,
0,  684,    0,  686,    0,  687,  689,  689,  688,  683,
0,  684,    0,  686,  688,  687,    0,  689,  688,  690,
690,  691,  691,    0,  692,  692,    0,  689,  693,  693,
690,    0,  691,    0,  691,  692,  690,  694,  694,  693,
690,  692,  691,  695,  695,  692,    0,  694,  694,  693,
0,  693,  696,  696,  695,  697,  697,    0,  694,    0,
695,  698,  698,  696,  695,    0,  697,  697,  715,  715,
0,    0,  698,  696,  716,  716,  697,  717,  717,  715,
0,  715,  698,  718,  718,  716,  720,  720,  717,  715,

0,  718,  719,  719,  718,  716,  716,  720,  717,    0,
0,  721,  721,  719,  718,  722,  722,  720,  723,  723,
719,    0,  721,  719,  721,    0,  722,  724,  724,  723,
725,  725,  721,  728,  728,    0,  722,    0,  724,  723,
0,  725,  729,  729,  728,    0,  728,    0,  724,  730,
730,  725,    0,  729,  728,  732,  732,  731,  731,    0,
730,  733,  733,  729,  729,  731,  732,    0,  731,    0,
730,    0,  733,  732,  734,  734,  732,    0,  731,  735,
735,    0,  733,  736,  736,  734,    0,  734,  737,  737,
735,  738,  738,    0,  736,  734,  750,  750,    0,  737,

735,    0,  738,    0,  736,  751,  751,  750,    0,  737,
752,  752,  738,    0,  750,  751,  751,  750,  753,  753,
0,  752,  754,  754,    0,    0,  751,  755,  755,  753,
0,  752,    0,  754,    0,  753,  756,  756,  755,  753,
757,  757,  754,  754,    0,  755,  756,  756,  755,  758,
758,  757,  759,  759,  765,  765,    0,  756,  766,  766,
758,  757,    0,  759,    0,  765,  758,  767,  767,  766,
758,  765,  759,  759,    0,  765,  768,  768,  767,  766,
767,  769,  769,  770,  770,  771,  771,  768,  767,    0,
0,  769,  769,    0,  770,    0,  771,  768,  772,  772,

770,    0,  769,    0,  770,    0,  771,  773,  773,  772,
0,  772,  774,  774,  780,  780,  781,  781,  773,  772,
782,  782,  774,  774,    0,  780,    0,  781,  773,  783,
783,  782,    0,  774,  781,  780,    0,  781,  784,  784,
783,  782,  785,  785,  789,  789,    0,  790,  790,  784,
783,  792,  792,  785,    0,  789,  784,    0,  790,  784,
0,  789,  792,  785,  790,  789,  793,  793,  790,    0,
0,    0,  792,    0,    0,    0,    0,  793,    0,    0,
0,    0,    0,    0,    0,    0,    0,  793,  796,  796,
796,  796,  796,  796,  796,  796,  796,  796,  796,  797,

797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
798,  799,  799,  799,  799,  799,  799,  799,  799,  799,
799,  799,  800,  800,  800,  800,  800,  800,  800,  800,
800,  800,  800,  801,  801,  801,  801,  801,  801,  801,
801,  801,  801,  801,  802,    0,    0,    0,    0,    0,
802,  803,    0,    0,    0,    0,    0,  803,  804,  804,
0,  804,  804,  805,    0,    0,  805,    0,    0,    0,
0,    0,  805,  806,    0,    0,    0,    0,    0,  806,
807,  807,    0,    0,  807,  807,  807,  807,  807,    0,

807,  808,  808,    0,    0,  808,  808,  808,  808,  808,
0,  808,  809,  809,    0,  809,  809,  809,  809,    0,
809,  809,  809,  810,  810,    0,  810,  810,  810,  810,
810,  810,  810,  810,  811,    0,    0,    0,  811,  811,
811,  811,    0,  811,  811,  812,    0,    0,    0,    0,
0,  812,  813,    0,    0,    0,    0,    0,  813,  814,
814,  814,  814,  814,  814,  814,  814,  814,  814,  815,
815,  815,  815,  815,  815,  815,  815,  815,  815,  816,
816,  816,  816,  816,  816,  816,  816,  816,  816,  817,
0,    0,  817,    0,    0,    0,    0,    0,  817,  818,

0,    0,    0,    0,    0,  818,  819,  819,  819,  819,
819,  819,    0,  819,  819,  819,  819,  795,  795,  795,
795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
795,  795,  795,  795,  795,  795,  795,  795,  795,  795,
795,  795,  795,  795,  795,  795
} ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf = 0, *yy_state_ptr = 0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
/*
 *  Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 *  Copyright (C) 2008-2012 - Scilab Enterprises - Bruno JOFRET
 *
 *  This file must be used under the terms of the CeCILL.
 *  This source file is licensed as described in the file COPYING, which
 *  you should have received as part of this distribution.  The terms
 *  are also available at
 *  http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
 *
 */
#include "isatty.hxx"
#include "parse.hxx"
#include "parser_private.hxx"

#include "context.hxx"

extern "C"
{
#include "charEncoding.h"
#include "sci_malloc.h"
}

static int matrix_level = 0;
static int comment_level = 0;
static int last_token = 0;
static int exit_status = PARSE_ERROR;
static std::string current_file;
static std::string program_name;

static std::string *pstBuffer;

static bool rejected = false;

#define YY_USER_ACTION                          \
 yylloc.last_column += yyleng;

/* -*- Verbose Special Debug -*- */
//#define DEV
//#define TOKENDEV

#ifdef DEV
#define DEBUG(x) std::cout << "[DEBUG] " << x << std::endl;
#else
#define DEBUG(x) /* Nothing */
#endif

#define INITIAL 0
#define SIMPLESTRING 1
#define DOUBLESTRING 2
#define REGIONCOMMENT 3
#define LINECOMMENT 4
#define LINEBREAK 5
#define MATRIX 6
#define SHELLMODE 7
#define BEGINID 8

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

static void yyunput (int c, char *buf_ptr  );

#ifndef yytext_ptr
static void yy_flex_strncpy (char *, yyconst char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = NULL;

static void yy_push_state (int new_state );

static void yy_pop_state (void );

static int yy_top_state (void );

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
 
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
register yy_state_type yy_current_state;
register char * yy_cp, *yy_bp;
register int yy_act;

if ( !(yy_init) )
{
    (yy_init) = 1;

#ifdef YY_USER_INIT
    YY_USER_INIT;
#endif

    /* Create the reject buffer large enough to save one state per allowed character. */
    if ( ! (yy_state_buf) )
    {
        (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
    }
    if ( ! (yy_state_buf) )
    {
        YY_FATAL_ERROR( "out of dynamic memory in yylex()" );
    }

    if ( ! (yy_start) )
    {
        (yy_start) = 1;    /* first start state */
    }

    if ( ! yyin )
    {
        yyin = stdin;
    }

    if ( ! yyout )
    {
        yyout = stdout;
    }

    if ( ! YY_CURRENT_BUFFER )
    {
        yyensure_buffer_stack ();
        YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin, YY_BUF_SIZE );
    }

    yy_load_buffer_state( );
}

while ( 1 )		/* loops until end-of-file is reached */
{
    yy_cp = (yy_c_buf_p);

    /* Support of yytext. */
    *yy_cp = (yy_hold_char);

    /* yy_bp points to the position in yy_ch_buf of the start of
     * the current run.
     */
    yy_bp = yy_cp;

    yy_current_state = (yy_start);
    yy_current_state += YY_AT_BOL();

    (yy_state_ptr) = (yy_state_buf);
    *(yy_state_ptr)++ = yy_current_state;

yy_match:
    do
    {
        register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
        while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
        {
            yy_current_state = (int) yy_def[yy_current_state];
            if ( yy_current_state >= 796 )
            {
                yy_c = yy_meta[(unsigned int) yy_c];
            }
        }
        yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
        *(yy_state_ptr)++ = yy_current_state;
        ++yy_cp;
    }
    while ( yy_base[yy_current_state] != 2818 );

yy_find_action:
    yy_current_state = *--(yy_state_ptr);
    (yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
    for ( ; ; ) /* until we find what rule we matched */
    {
        if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
        {
            yy_act = yy_acclist[(yy_lp)];
            if ( yy_act & YY_TRAILING_HEAD_MASK ||
                    (yy_looking_for_trail_begin) )
            {
                if ( yy_act == (yy_looking_for_trail_begin) )
                {
                    (yy_looking_for_trail_begin) = 0;
                    yy_act &= ~YY_TRAILING_HEAD_MASK;
                    break;
                }
            }
            else if ( yy_act & YY_TRAILING_MASK )
            {
                (yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
                (yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
            }
            else
            {
                (yy_full_match) = yy_cp;
                (yy_full_state) = (yy_state_ptr);
                (yy_full_lp) = (yy_lp);
                break;
            }
            ++(yy_lp);
            goto find_rule;
        }
        --yy_cp;
        yy_current_state = *--(yy_state_ptr);
        (yy_lp) = yy_accept[yy_current_state];
    }

    YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

    switch ( yy_act )
    {
            /* beginning of action switch */
        case 1:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::pushControlStatus(Parser::WithinIf);
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(IF);
            }
            YY_BREAK
        case 2:
            YY_RULE_SETUP
            {
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(THEN);
            }
            YY_BREAK
        case 3:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    // Pop to step out IF
                    ParserSingleInstance::popControlStatus();
                    ParserSingleInstance::pushControlStatus(Parser::WithinElse);
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(ELSE);
            }
            YY_BREAK
        case 4:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::popControlStatus();
                    ParserSingleInstance::pushControlStatus(Parser::WithinElseIf);
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(ELSEIF);
            }
            YY_BREAK
        case 5:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::popControlStatus();
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(END);
            }
            YY_BREAK
        case 6:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::pushControlStatus(Parser::WithinSelect);
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(SELECT);
            }
            YY_BREAK
        case 7:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::pushControlStatus(Parser::WithinSwitch);
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(SWITCH);
            }
            YY_BREAK
        case 8:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::popControlStatus();
                    ParserSingleInstance::pushControlStatus(Parser::WithinOtherwise);
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(OTHERWISE);
            }
            YY_BREAK
        case 9:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::popControlStatus();
                    ParserSingleInstance::pushControlStatus(Parser::WithinCase);
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(CASE);
            }
            YY_BREAK
        case 10:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::pushControlStatus(Parser::WithinFunction);
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(FUNCTION);
            }
            YY_BREAK
        case 11:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::popControlStatus();
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(ENDFUNCTION);
            }
            YY_BREAK
        case 12:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::pushControlStatus(Parser::WithinFunction);
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(HIDDENFUNCTION);
            }
            YY_BREAK
        case 13:
            YY_RULE_SETUP
            {
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(HIDDEN);
            }
            YY_BREAK
        case 14:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::pushControlStatus(Parser::WithinFor);
                }
                BEGIN(INITIAL);
                return scan_throw(FOR);
            }
            YY_BREAK
        case 15:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::pushControlStatus(Parser::WithinWhile);
                }
                BEGIN(INITIAL);
                return scan_throw(WHILE);
            }
            YY_BREAK
        case 16:
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                return scan_throw(DO);
            }
            YY_BREAK
        case 17:
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                return scan_throw(BREAK);
            }
            YY_BREAK
        case 18:
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                return scan_throw(CONTINUE);
            }
            YY_BREAK
        case 19:
            YY_RULE_SETUP
            {
                ParserSingleInstance::pushControlStatus(Parser::WithinTry);
                BEGIN(INITIAL);
                return scan_throw(TRY);
            }
            YY_BREAK
        case 20:
            YY_RULE_SETUP
            {
                // Pop to step out TRY
                ParserSingleInstance::popControlStatus();
                ParserSingleInstance::pushControlStatus(Parser::WithinCatch);
                BEGIN(INITIAL);
                return scan_throw(CATCH);
            }
            YY_BREAK
        case 21:
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                return scan_throw(RETURN);
            }
            YY_BREAK
        case 22:
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                return scan_throw(RETURN);
            }
            YY_BREAK
        case 23:
            /* rule 23 can match eol */
            YY_RULE_SETUP
            {
                BEGIN(BEGINID);
            }
            YY_BREAK

        case 24:
            YY_RULE_SETUP
            {
                wchar_t *pwText = to_wide_string(yytext);
                if (yytext != NULL && pwText == NULL)
                {
                    std::string str = "can not convert'";
                    str += yytext;
                    str += "' to UTF-8";
                    exit_status = SCAN_ERROR;
                    scan_error("can not convert string to UTF-8");
                }
                yylval.str = new std::wstring(pwText);
                FREE(pwText);
                types::InternalType * pIT = symbol::Context::getInstance()->get(symbol::Symbol(*yylval.str));
                if (pIT && pIT->isCallable())
                {
                    scan_throw(ID);
                    BEGIN(SHELLMODE);
                }
                else
                {
                    BEGIN(INITIAL);
                    return scan_throw(ID);
                }
            }
            YY_BREAK

        case 25:
            YY_RULE_SETUP
            {
                return scan_throw(NOT);
            }
            YY_BREAK
        case 26:
            YY_RULE_SETUP
            {
                return scan_throw(DOLLAR);
            }
            YY_BREAK
        case 27:
            YY_RULE_SETUP
            {
                return scan_throw(BOOLTRUE);
            }
            YY_BREAK
        case 28:
            YY_RULE_SETUP
            {
                return scan_throw(BOOLFALSE);
            }
            YY_BREAK
        case 29:
            YY_RULE_SETUP
            {
                return scan_throw(AND);
            }
            YY_BREAK
        case 30:
            YY_RULE_SETUP
            {
                return scan_throw(ANDAND);
            }
            YY_BREAK
        case 31:
            YY_RULE_SETUP
            {
                return scan_throw(OR);
            }
            YY_BREAK
        case 32:
            YY_RULE_SETUP
            {
                return scan_throw(OROR);
            }
            YY_BREAK
        case 33:
            YY_RULE_SETUP
            {
                return scan_throw(LPAREN);
            }
            YY_BREAK
        case 34:
            YY_RULE_SETUP
            {
                return scan_throw(RPAREN);
            }
            YY_BREAK
        case 35:
            YY_RULE_SETUP
            {
                scan_step();
                return scan_throw(SEMI);
            }
            YY_BREAK
        case 36:
            YY_RULE_SETUP
            {
                scan_step();
                return scan_throw(COMMA);
            }
            YY_BREAK
        case 37:
            YY_RULE_SETUP
            {
                return scan_throw(COLON);
            }
            YY_BREAK
        case 38:
            YY_RULE_SETUP
            {
                yy_push_state(MATRIX);
                ParserSingleInstance::pushControlStatus(Parser::WithinCell);
                return scan_throw(LBRACE);
            }
            YY_BREAK
        case 39:
            YY_RULE_SETUP
            {
                return scan_throw(RBRACE);
            }
            YY_BREAK
        case 40:
            YY_RULE_SETUP
            {
                return scan_throw(DOTQUOTE);
            }
            YY_BREAK
        case 41:
            YY_RULE_SETUP
            {
                return scan_throw(DOTTIMES);
            }
            YY_BREAK
        case 42:
            YY_RULE_SETUP
            {
                return scan_throw(DOTRDIVIDE);
            }
            YY_BREAK
        case 43:
            YY_RULE_SETUP
            {
                return scan_throw(DOTLDIVIDE);
            }
            YY_BREAK
        case 44:
            YY_RULE_SETUP
            {
                return scan_throw(DOTPOWER);
            }
            YY_BREAK
        case 45:
            YY_RULE_SETUP
            {
                return scan_throw(MINUS);
            }
            YY_BREAK
        case 46:
            YY_RULE_SETUP
            {
                return scan_throw(PLUS);
            }
            YY_BREAK
        case 47:
            YY_RULE_SETUP
            {
                return scan_throw(TIMES);
            }
            YY_BREAK
        case 48:
            YY_RULE_SETUP
            {
                return scan_throw(RDIVIDE);
            }
            YY_BREAK
        case 49:
            YY_RULE_SETUP
            {
                return scan_throw(LDIVIDE);
            }
            YY_BREAK
        case 50:
            YY_RULE_SETUP
            {
                return scan_throw(POWER);
            }
            YY_BREAK
        case 51:
            YY_RULE_SETUP
            {
                return scan_throw(KRONTIMES);
            }
            YY_BREAK
        case 52:
            YY_RULE_SETUP
            {
                return scan_throw(KRONRDIVIDE);
            }
            YY_BREAK
        case 53:
            YY_RULE_SETUP
            {
                return scan_throw(KRONLDIVIDE);
            }
            YY_BREAK
        case 54:
            /* rule 54 can match eol */
            YY_RULE_SETUP
            {
                unput(yytext[yyleng - 1]);
                return scan_throw(CONTROLTIMES);
            }
            YY_BREAK
        case 55:
            /* rule 55 can match eol */
            YY_RULE_SETUP
            {
                unput(yytext[yyleng - 1]);
                return scan_throw(CONTROLRDIVIDE);
            }
            YY_BREAK
        case 56:
            /* rule 56 can match eol */
            YY_RULE_SETUP
            {
                unput(yytext[yyleng - 1]);
                return scan_throw(CONTROLLDIVIDE);
            }
            YY_BREAK
        case 57:
            YY_RULE_SETUP
            {
                return scan_throw(EQ);
            }
            YY_BREAK
        case 58:
            YY_RULE_SETUP
            {
                return scan_throw(NE);
            }
            YY_BREAK
        case 59:
            YY_RULE_SETUP
            {
                return scan_throw(LT);
            }
            YY_BREAK
        case 60:
            YY_RULE_SETUP
            {
                return scan_throw(GT);
            }
            YY_BREAK
        case 61:
            YY_RULE_SETUP
            {
                return scan_throw(LE);
            }
            YY_BREAK
        case 62:
            YY_RULE_SETUP
            {
                return scan_throw(GE);
            }
            YY_BREAK
        case 63:
            YY_RULE_SETUP
            {
                return scan_throw(ASSIGN);
            }
            YY_BREAK
        case 64:
            YY_RULE_SETUP
            {
                DEBUG("yy_push_state(MATRIX)");
                yy_push_state(MATRIX);
                ParserSingleInstance::pushControlStatus(Parser::WithinMatrix);
                return scan_throw(LBRACK);
            }
            YY_BREAK
        case 65:
            YY_RULE_SETUP
            {
                return scan_throw(RBRACK);
            }
            YY_BREAK
        case 66:
            YY_RULE_SETUP
            {
                return scan_throw(DOT);
            }
            YY_BREAK
        case 67:
            YY_RULE_SETUP
            {
                ParserSingleInstance::pushControlStatus(Parser::WithinDots);
                yy_push_state(LINEBREAK);
            }
            YY_BREAK
        case 68:
            YY_RULE_SETUP
            {
                yylval.number = atof(yytext);
#ifdef TOKENDEV
                std::cout << "--> [DEBUG] INTEGER : " << yytext << std::endl;
#endif
                //  scan_step();
                return scan_throw(VARINT);
            }
            YY_BREAK
        case 69:
            YY_RULE_SETUP
            {
                scan_exponent_convert(yytext);
                yylval.number = atof(yytext);
#ifdef TOKENDEV
                std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
                scan_step();
                return scan_throw(VARFLOAT);
            }
            YY_BREAK
        case 70:
            YY_RULE_SETUP
            {
                yylval.number = atof(yytext);
#ifdef TOKENDEV
                std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
                scan_step();
                return scan_throw(VARFLOAT);
            }
            YY_BREAK
        case 71:
            YY_RULE_SETUP
            {
                yylval.number = atof(yytext);
#ifdef TOKENDEV
                std::cout << "--> [DEBUG] NUMBER : " << yytext << std::endl;
#endif
                //  scan_step();
                return scan_throw(NUM);
            }
            YY_BREAK
        case 72:
            YY_RULE_SETUP
            {
                yylval.number = atof(yytext);
#ifdef TOKENDEV
                std::cout << "--> [DEBUG] LITTLE : " << yytext << std::endl;
#endif
                scan_step();
                return scan_throw(NUM);
            }
            YY_BREAK
        case 73:
            YY_RULE_SETUP
            {
                wchar_t *pwText = to_wide_string(yytext);
                if (yytext != NULL && pwText == NULL)
                {
                    std::string str = "can not convert'";
                    str += yytext;
                    str += "' to UTF-8";
                    exit_status = SCAN_ERROR;
                    scan_error("can not convert string to UTF-8");
                }
                yylval.str = new std::wstring(pwText);
                FREE(pwText);
#ifdef TOKENDEV
                std::cout << "--> [DEBUG] ID : " << yytext << std::endl;
#endif
                //  scan_step();
                return scan_throw(ID);
            }
            YY_BREAK
        case 74:
            YY_RULE_SETUP
            {
                yylval.comment = new std::wstring();
                comment_level = 1;
                ParserSingleInstance::pushControlStatus(Parser::WithinBlockComment);
                yy_push_state(REGIONCOMMENT);
            }
            YY_BREAK
        case 75:
            YY_RULE_SETUP
            {
                pstBuffer = new std::string();
                yy_push_state(LINECOMMENT);
            }
            YY_BREAK
        case 76:
            YY_RULE_SETUP
            {
                pstBuffer = new std::string();
                yy_push_state(DOUBLESTRING);
            }
            YY_BREAK
        case 77:
            YY_RULE_SETUP
            {
                /*
                ** Matrix Transposition special behaviour
                ** ID' []' toto()' are transposition call
                */
                if (last_token == ID
                || last_token == RBRACK
                || last_token == RPAREN
                || last_token == RBRACE
                || last_token == VARINT
                || last_token == VARFLOAT
                || last_token == NUM
                || last_token == BOOLTRUE
                || last_token == BOOLFALSE)
                {
                    return scan_throw(QUOTE);
                }
                else
                {
                    pstBuffer = new std::string();
                    yy_push_state(SIMPLESTRING);
                }
            }
            YY_BREAK
        case 78:
            YY_RULE_SETUP
            {
                scan_step();
                scan_throw(SPACES);
            }
            YY_BREAK
        case 79:
            /* rule 79 can match eol */
            YY_RULE_SETUP
            {
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                scan_step();
                if (last_token != EOL)
                {
                    return scan_throw(EOL);
                }

            }
            YY_BREAK
        case 80:
            /* rule 80 can match eol */
            YY_RULE_SETUP
            {
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                scan_step();
                if (last_token != EOL)
                {
                    return scan_throw(EOL);
                }
                scan_throw(EOL);
            }
            YY_BREAK
        case 81:
            /* rule 81 can match eol */
            YY_RULE_SETUP
            {
                yylloc.last_line += 2;
                yylloc.last_column = 1;
                scan_step();
                if (last_token != EOL)
                {
                    return scan_throw(EOL);
                }
                scan_throw(EOL);
            }
            YY_BREAK
        case 82:
            YY_RULE_SETUP
            {
                std::string str = "unexpected token '";
                str += yytext;
                str += "'";
                exit_status = SCAN_ERROR;
                scan_error(str);
            }
            YY_BREAK

        case 83:
            YY_RULE_SETUP
            {
                unput(yytext[yyleng - 1]);
                if (last_token == ID
                || last_token == RPAREN
                || last_token == QUOTE
                || last_token == VARINT
                || last_token == VARFLOAT
                || last_token == NUM)
                {
                    return scan_throw(COMMA);
                }
            }
            YY_BREAK
        case 84:
            YY_RULE_SETUP
            {
                return scan_throw(COLON);
            }
            YY_BREAK
        case 85:
            /* rule 85 can match eol */
            YY_RULE_SETUP
            {
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                if (last_token != DOTS && last_token != EOL)
                {
                    return scan_throw(EOL);
                }
                scan_throw(EOL);
            }
            YY_BREAK
        case 86:
            YY_RULE_SETUP
            {
                DEBUG("yy_pop_state()");
                yy_pop_state();
                ParserSingleInstance::popControlStatus();
                return scan_throw(RBRACK);
            }
            YY_BREAK
        case 87:
            YY_RULE_SETUP
            {
                yy_pop_state();
                ParserSingleInstance::popControlStatus();
                return scan_throw(RBRACE);
            }
            YY_BREAK
        case 88:
        case 89:
            YY_RULE_SETUP
            {
                return scan_throw(PLUS);
            }
            YY_BREAK
        case 90:
        case 91:
            YY_RULE_SETUP
            {
                return scan_throw(MINUS);
            }
            YY_BREAK
        case 92:
            YY_RULE_SETUP
            {
                // no need to unput the '+'
                if (last_token != LBRACK
                && last_token != EOL
                && last_token != SEMI
                && last_token != COMMA)
                {
                    return scan_throw(COMMA);
                }
            }
            YY_BREAK
        case 93:
            YY_RULE_SETUP
            {
                unput('-');
                if (last_token != LBRACK
                && last_token != EOL
                && last_token != SEMI
                && last_token != COMMA)
                {
                    return scan_throw(COMMA);
                }
            }
            YY_BREAK
        case 94:
            YY_RULE_SETUP
            {
                std::string str = "unexpected token '";
                str += yytext;
                str += "' within a matrix.";
                exit_status = SCAN_ERROR;
                scan_error(str);
            }
            YY_BREAK
        case 95:
            /* rule 95 can match eol */
            YY_RULE_SETUP
            {
                /* Just do nothing */
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                scan_step();
                scan_throw(EOL);
            }
            YY_BREAK
        case 96:
            YY_RULE_SETUP
            {
                /* Just do nothing */
                pstBuffer = new std::string();
                yy_push_state(LINECOMMENT);
                scan_throw(DOTS);
            }
            YY_BREAK
        case YY_STATE_EOF(MATRIX):
        {
            yy_pop_state();
        }
        YY_BREAK

        case 97:
            /* rule 97 can match eol */
            YY_RULE_SETUP
            {
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                scan_step();
                yy_pop_state();
                ParserSingleInstance::popControlStatus();
            }
            YY_BREAK
        case 98:
            YY_RULE_SETUP
            {
                ++comment_level;
                yy_push_state(REGIONCOMMENT);
            }
            YY_BREAK
        case 99:
            YY_RULE_SETUP
            {
                scan_throw(DOTS);
                pstBuffer = new std::string();
                yy_push_state(LINECOMMENT);
            }
            YY_BREAK
        case 100:
            YY_RULE_SETUP
            {
                /* Do nothing... */
            }
            YY_BREAK
        case YY_STATE_EOF(LINEBREAK):
        {
            yy_pop_state();
        }
        YY_BREAK
        case 101:
            YY_RULE_SETUP
            {
                std::string str = "unexpected token '";
                str += yytext;
                str += "' after line break with .. or ...";
                exit_status = SCAN_ERROR;
                scan_error(str);
            }
            YY_BREAK

        case 102:
            /* rule 102 can match eol */
            YY_RULE_SETUP
            {
                //yylloc.last_line += 1;
                //yylloc.last_column = 1;
                //scan_step();
                yy_pop_state();
                for (int i = yyleng - 1 ; i >= 0 ; --i)
                {
                    //std::cerr << "Unputting i = {" << i << "}" << std::endl;
                    //std::cerr << "Unputting {" << yytext[i] << "}" << std::endl;
                    unput(yytext[i]);
                    yylloc.last_column--;
                }
                /*
                ** To forgot comments after lines break
                */
                if (last_token != DOTS)
                {
                    //std::cerr << "pstBuffer = {" << *pstBuffer << "}" << std::endl;
                    //std::cerr << "pstBuffer->c_str() = {" << pstBuffer->c_str() << "}" << std::endl;
                    wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
                    //std::wcerr << L"pwstBuffer = W{" << pwstBuffer << L"}" << std::endl;
                    if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
                    {
                        std::string str = "can not convert'";
                        str += pstBuffer->c_str();
                        str += "' to UTF-8";
                        exit_status = SCAN_ERROR;
                        scan_error("can not convert string to UTF-8");
                    }
                    yylval.comment = new std::wstring(pwstBuffer);
                    delete pstBuffer;
                    FREE (pwstBuffer);
                    return scan_throw(COMMENT);
                }
            }
            YY_BREAK
        case YY_STATE_EOF(LINECOMMENT):
        {
            yy_pop_state();
            wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
            if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
            {
                std::string str = "can not convert'";
                str += pstBuffer->c_str();
                str += "' to UTF-8";
                exit_status = SCAN_ERROR;
                scan_error("can not convert string to UTF-8");
            }
            yylval.comment = new std::wstring(pwstBuffer);
            delete pstBuffer;
            FREE (pwstBuffer);
            return scan_throw(COMMENT);
        }
        YY_BREAK
        case 103:
            YY_RULE_SETUP
            {
                // Put the char in a temporary CHAR buffer to go through UTF-8 trouble
                // only translate to WCHAR_T when popping state.
                *pstBuffer += yytext;
            }
            YY_BREAK

        case 104:
            YY_RULE_SETUP
            {
                --comment_level;
                if (comment_level == 0)
                {
                    ParserSingleInstance::popControlStatus();
                    yy_pop_state();
                    //return scan_throw(BLOCKCOMMENT);
                }
            }
            YY_BREAK
        case 105:
            YY_RULE_SETUP
            {
                ++comment_level;
                yy_push_state(REGIONCOMMENT);
            }
            YY_BREAK
        case 106:
            /* rule 106 can match eol */
            YY_RULE_SETUP
            {
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                scan_step();
                *yylval.comment += L"\n//";
            }
            YY_BREAK
        case 107:
        case 108:
            YY_RULE_SETUP
            {
                wchar_t *pwText = to_wide_string(yytext);
                *yylval.comment += std::wstring(pwText);
                FREE(pwText);
            }
            YY_BREAK
        case YY_STATE_EOF(REGIONCOMMENT):
        {
            yy_pop_state();
            //    std::string str = "unexpected end of file in a comment";
            //    exit_status = SCAN_ERROR;
            //    scan_error(str);
        }
        YY_BREAK

        case 109:
            YY_RULE_SETUP
            {
                *pstBuffer += "\"";
            }
            YY_BREAK
        case 110:
            YY_RULE_SETUP
            {
                *pstBuffer += "'";
            }
            YY_BREAK
        case 111:
            YY_RULE_SETUP
            {
                *pstBuffer += "\"";
            }
            YY_BREAK
        case 112:
            YY_RULE_SETUP
            {
                *pstBuffer += "'";
            }
            YY_BREAK
        case 113:
            YY_RULE_SETUP
            {
                yy_pop_state();
                scan_step();
                wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
                if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
                {
                    std::string str = "can not convert'";
                    str += pstBuffer->c_str();
                    str += "' to UTF-8";
                    exit_status = SCAN_ERROR;
                    scan_error("can not convert string to UTF-8");
                }
                yylval.str = new std::wstring(pwstBuffer);
                delete pstBuffer;
                FREE(pwstBuffer);
                return scan_throw(STR);
            }
            YY_BREAK
        case 114:
            YY_RULE_SETUP
            {
                std::string str = "Heterogeneous string detected, starting with ' and ending with \".";
                exit_status = SCAN_ERROR;
                scan_error(str);
            }
            YY_BREAK
        case 115:
            /* rule 115 can match eol */
            YY_RULE_SETUP
            {
                /* Do nothing... Just skip */
            }
            YY_BREAK
        case 116:
            /* rule 116 can match eol */
            YY_RULE_SETUP
            {
                std::string str = "unexpected end of line in a string.";
                exit_status = SCAN_ERROR;
                scan_error(str);
                yylloc.last_line += 1;
                yylloc.last_column = 1;
            }
            YY_BREAK
        case YY_STATE_EOF(SIMPLESTRING):
        {
            std::string str = "unexpected end of file in a string.";
            exit_status = SCAN_ERROR;
            scan_error(str);
        }
        YY_BREAK
        case 117:
        case 118:
            YY_RULE_SETUP
            {
                scan_step();
                *pstBuffer += yytext;
            }
            YY_BREAK

        case 119:
            YY_RULE_SETUP
            {
                *pstBuffer += "\"";
            }
            YY_BREAK
        case 120:
            YY_RULE_SETUP
            {
                *pstBuffer += "'";
            }
            YY_BREAK
        case 121:
            YY_RULE_SETUP
            {
                *pstBuffer += "\"";
            }
            YY_BREAK
        case 122:
            YY_RULE_SETUP
            {
                *pstBuffer += "'";
            }
            YY_BREAK
        case 123:
            YY_RULE_SETUP
            {
                yy_pop_state();
                scan_step();
                wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
                if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
                {
                    std::string str = "can not convert'";
                    str += pstBuffer->c_str();
                    str += "' to UTF-8";
                    exit_status = SCAN_ERROR;
                    scan_error("can not convert string to UTF-8");
                }
                yylval.str = new std::wstring(pwstBuffer);
                delete pstBuffer;
                FREE(pwstBuffer);
                return scan_throw(STR);
            }
            YY_BREAK
        case 124:
            YY_RULE_SETUP
            {
                std::string str = "Heterogeneous string detected, starting with \" and ending with '.";
                exit_status = SCAN_ERROR;
                scan_error(str);
            }
            YY_BREAK
        case 125:
            /* rule 125 can match eol */
            YY_RULE_SETUP
            {
                /* Do nothing... Just skip */
            }
            YY_BREAK
        case 126:
            /* rule 126 can match eol */
            YY_RULE_SETUP
            {
                std::string str = "unexpected end of line in a string";
                exit_status = SCAN_ERROR;
                scan_error(str);
                yylloc.last_line += 1;
                yylloc.last_column = 1;
            }
            YY_BREAK
        case YY_STATE_EOF(DOUBLESTRING):
        {
            std::string str = "unexpected end of file in a string";
            exit_status = SCAN_ERROR;
            scan_error(str);
        }
        YY_BREAK
        case 127:
        case 128:
            YY_RULE_SETUP
            {
                scan_step();
                *pstBuffer += yytext;
            }
            YY_BREAK

        case 129:
            YY_RULE_SETUP
            {
                if (last_token == ID)
                {
                    scan_throw(SPACES);
                    return ID;
                }
            }
            YY_BREAK
        case 130:
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                scan_step();
                return scan_throw(SEMI);
            }
            YY_BREAK
        case 131:
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                scan_step();
                return scan_throw(COMMA);
            }
            YY_BREAK
        case 132:
            /* rule 132 can match eol */
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                scan_step();
                return scan_throw(EOL);
            }
            YY_BREAK
        case 133:
            YY_RULE_SETUP
            {
                if (last_token == STR)
                {
                    wchar_t *pwText = to_wide_string(yytext);
                    yylval.str = new std::wstring(pwText);
                    FREE(pwText);
                    return scan_throw(STR);
                }
                else
                {
                    BEGIN(INITIAL);
                    return scan_throw(ASSIGN);
                }
            }
            YY_BREAK
        case 134:
            YY_RULE_SETUP
            {
                if (last_token == STR)
                {
                    wchar_t *pwText = to_wide_string(yytext);
                    yylval.str = new std::wstring(pwText);
                    FREE(pwText);
                    return scan_throw(STR);
                }
                else
                {
                    BEGIN(INITIAL);
                    return scan_throw(LPAREN);
                }
            }
            YY_BREAK
        case 135:
            YY_RULE_SETUP
            {
                if (last_token == STR)
                {
                    wchar_t *pwText = to_wide_string(yytext);
                    yylval.str = new std::wstring(pwText);
                    FREE(pwText);
                    return scan_throw(STR);
                }
                else
                {
                    BEGIN(INITIAL);
                    return scan_throw(LT);
                }
            }
            YY_BREAK
        case 136:
            YY_RULE_SETUP
            {
                if (last_token == STR)
                {
                    wchar_t *pwText = to_wide_string(yytext);
                    yylval.str = new std::wstring(pwText);
                    FREE(pwText);
                    return scan_throw(STR);
                }
                else
                {
                    BEGIN(INITIAL);
                    return scan_throw(GT);
                }
            }
            YY_BREAK
        case 137:
            YY_RULE_SETUP
            {
                if (last_token == STR)
                {
                    wchar_t *pwText = to_wide_string(yytext);
                    yylval.str = new std::wstring(pwText);
                    FREE(pwText);
                    return scan_throw(STR);
                }
                else
                {
                    BEGIN(INITIAL);
                    return scan_throw(NOT);
                }
            }
            YY_BREAK
        case 138:
            YY_RULE_SETUP
            {
                wchar_t *pwText = to_wide_string(yytext);
                yylval.str = new std::wstring(pwText);
                FREE(pwText);
                return scan_throw(STR);
            }
            YY_BREAK
        case YY_STATE_EOF(SHELLMODE):
        {
            BEGIN(INITIAL);
        }
        YY_BREAK

        case 139:
            YY_RULE_SETUP
            ECHO;
            YY_BREAK
        case YY_STATE_EOF(INITIAL):
        case YY_STATE_EOF(BEGINID):
            yyterminate();

        case YY_END_OF_BUFFER:
        {
            /* Amount of text matched not including the EOB char. */
            int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

            /* Undo the effects of YY_DO_BEFORE_ACTION. */
            *yy_cp = (yy_hold_char);
            YY_RESTORE_YY_MORE_OFFSET

            if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
            {
                /* We're scanning a new file or input source.  It's
                 * possible that this happened because the user
                 * just pointed yyin at a new source and called
                 * yylex().  If so, then we have to assure
                 * consistency between YY_CURRENT_BUFFER and our
                 * globals.  Here is the right place to do so, because
                 * this is the first action (other than possibly a
                 * back-up) that will match for the new input source.
                 */
                (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
                YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
                YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
            }

            /* Note that here we test for yy_c_buf_p "<=" to the position
             * of the first EOB in the buffer, since yy_c_buf_p will
             * already have been incremented past the NUL character
             * (since all states make transitions on EOB to the
             * end-of-buffer state).  Contrast this with the test
             * in input().
             */
            if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
            {
                /* This was really a NUL. */
                yy_state_type yy_next_state;

                (yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

                yy_current_state = yy_get_previous_state(  );

                /* Okay, we're now positioned to make the NUL
                 * transition.  We couldn't have
                 * yy_get_previous_state() go ahead and do it
                 * for us because it doesn't know how to deal
                 * with the possibility of jamming (and we don't
                 * want to build jamming into it because then it
                 * will run more slowly).
                 */

                yy_next_state = yy_try_NUL_trans( yy_current_state );

                yy_bp = (yytext_ptr) + YY_MORE_ADJ;

                if ( yy_next_state )
                {
                    /* Consume the NUL. */
                    yy_cp = ++(yy_c_buf_p);
                    yy_current_state = yy_next_state;
                    goto yy_match;
                }

                else
                {
                    yy_cp = (yy_c_buf_p);
                    goto yy_find_action;
                }
            }

            else switch ( yy_get_next_buffer(  ) )
                {
                    case EOB_ACT_END_OF_FILE:
                    {
                        (yy_did_buffer_switch_on_eof) = 0;

                        if ( yywrap( ) )
                        {
                            /* Note: because we've taken care in
                             * yy_get_next_buffer() to have set up
                             * yytext, we can now set up
                             * yy_c_buf_p so that if some total
                             * hoser (like flex itself) wants to
                             * call the scanner after we return the
                             * YY_NULL, it'll still work - another
                             * YY_NULL will get returned.
                             */
                            (yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

                            yy_act = YY_STATE_EOF(YY_START);
                            goto do_action;
                        }

                        else
                        {
                            if ( ! (yy_did_buffer_switch_on_eof) )
                            {
                                YY_NEW_FILE;
                            }
                        }
                        break;
                    }

                    case EOB_ACT_CONTINUE_SCAN:
                        (yy_c_buf_p) =
                            (yytext_ptr) + yy_amount_of_matched_text;

                        yy_current_state = yy_get_previous_state(  );

                        yy_cp = (yy_c_buf_p);
                        yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                        goto yy_match;

                    case EOB_ACT_LAST_MATCH:
                        (yy_c_buf_p) =
                            &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

                        yy_current_state = yy_get_previous_state(  );

                        yy_cp = (yy_c_buf_p);
                        yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                        goto yy_find_action;
                }
            break;
        }

        default:
            YY_FATAL_ERROR(
                "fatal flex scanner internal error--no action found" );
    } /* end of action switch */
} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
register char *source = (yytext_ptr);
register int number_to_move, i;
int ret_val;

if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
    YY_FATAL_ERROR(
        "fatal flex scanner internal error--end of buffer missed" );

if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
{
    /* Don't try to fill the buffer, so this is an EOF. */
    if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
    {
        /* We matched a single character, the EOB, so
         * treat this as a final EOF.
         */
        return EOB_ACT_END_OF_FILE;
    }

    else
    {
        /* We matched some text prior to the EOB, first
         * process it.
         */
        return EOB_ACT_LAST_MATCH;
    }
}

/* Try to read more data. */

/* First move last chars to start of buffer. */
number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

for ( i = 0; i < number_to_move; ++i )
{
    *(dest++) = *(source++);
}

if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
    /* don't do the read, it's not guaranteed to return an EOF,
     * just force an EOF
     */
{
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;
}

else
{
    int num_to_read =
        YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

    while ( num_to_read <= 0 )
    {
        /* Not enough room in the buffer - grow it. */

        YY_FATAL_ERROR(
            "input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

    }

    if ( num_to_read > YY_READ_BUF_SIZE )
    {
        num_to_read = YY_READ_BUF_SIZE;
    }

    /* Read in more data. */
    YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
              (yy_n_chars), (size_t) num_to_read );

    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
}

if ( (yy_n_chars) == 0 )
{
    if ( number_to_move == YY_MORE_ADJ )
    {
        ret_val = EOB_ACT_END_OF_FILE;
        yyrestart(yyin  );
    }

    else
    {
        ret_val = EOB_ACT_LAST_MATCH;
        YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
            YY_BUFFER_EOF_PENDING;
    }
}

else
{
    ret_val = EOB_ACT_CONTINUE_SCAN;
}

if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size)
{
    /* Extend the array by 50%, plus the number we really need. */
    yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
    YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, new_size  );
    if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
    {
        YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
    }
}

(yy_n_chars) += number_to_move;
YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state (void)
{
register yy_state_type yy_current_state;
register char *yy_cp;

yy_current_state = (yy_start);
yy_current_state += YY_AT_BOL();

(yy_state_ptr) = (yy_state_buf);
*(yy_state_ptr)++ = yy_current_state;

for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
{
    register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
    {
        yy_current_state = (int) yy_def[yy_current_state];
        if ( yy_current_state >= 796 )
        {
            yy_c = yy_meta[(unsigned int) yy_c];
        }
    }
    yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
    *(yy_state_ptr)++ = yy_current_state;
}

return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
register int yy_is_jam;

register YY_CHAR yy_c = 1;
while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
{
    yy_current_state = (int) yy_def[yy_current_state];
    if ( yy_current_state >= 796 )
    {
        yy_c = yy_meta[(unsigned int) yy_c];
    }
}
yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
yy_is_jam = (yy_current_state == 795);
if ( ! yy_is_jam )
{
    *(yy_state_ptr)++ = yy_current_state;
}

return yy_is_jam ? 0 : yy_current_state;
}

static void yyunput (int c, register char * yy_bp )
{
register char *yy_cp;

yy_cp = (yy_c_buf_p);

/* undo effects of setting up yytext */
*yy_cp = (yy_hold_char);

if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
{
    /* need to shift things up to make room */
    /* +2 for EOB chars. */
    register int number_to_move = (yy_n_chars) + 2;
    register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
                              YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
    register char *source =
        &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

    while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
    {
        *--dest = *--source;
    }

    yy_cp += (int) (dest - source);
    yy_bp += (int) (dest - source);
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
        (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

    if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
    {
        YY_FATAL_ERROR( "flex scanner push-back overflow" );
    }
}

*--yy_cp = (char) c;

(yytext_ptr) = yy_bp;
(yy_hold_char) = *yy_cp;
(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput (void)
#else
static int input  (void)
#endif

{
    int c;

    *(yy_c_buf_p) = (yy_hold_char);

    if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
    {
        /* yy_c_buf_p now points to the character we want to return.
         * If this occurs *before* the EOB characters, then it's a
         * valid NUL; if not, then we've hit the end of the buffer.
         */
        if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
            /* This was really a NUL. */
        {
            *(yy_c_buf_p) = '\0';
        }

        else
        {
            /* need more input */
            int offset = (yy_c_buf_p) - (yytext_ptr);
            ++(yy_c_buf_p);

            switch ( yy_get_next_buffer(  ) )
            {
                case EOB_ACT_LAST_MATCH:
                    /* This happens because yy_g_n_b()
                     * sees that we've accumulated a
                     * token and flags that we need to
                     * try matching the token before
                     * proceeding.  But for input(),
                     * there's no matching to consider.
                     * So convert the EOB_ACT_LAST_MATCH
                     * to EOB_ACT_END_OF_FILE.
                     */

                    /* Reset buffer status. */
                    yyrestart(yyin );

                    /*FALLTHROUGH*/

                case EOB_ACT_END_OF_FILE:
                {
                    if ( yywrap( ) )
                    {
                        return EOF;
                    }

                    if ( ! (yy_did_buffer_switch_on_eof) )
                    {
                        YY_NEW_FILE;
                    }
#ifdef __cplusplus
                    return yyinput();
#else
                    return input();
#endif
                }

                case EOB_ACT_CONTINUE_SCAN:
                    (yy_c_buf_p) = (yytext_ptr) + offset;
                    break;
            }
        }
    }

    c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
    *(yy_c_buf_p) = '\0';	/* preserve yytext */
    (yy_hold_char) = *++(yy_c_buf_p);

    YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

    return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 *
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyrestart  (FILE * input_file )
{

    if ( ! YY_CURRENT_BUFFER )
    {
        yyensure_buffer_stack ();
        YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin, YY_BUF_SIZE );
    }

    yy_init_buffer(YY_CURRENT_BUFFER, input_file );
    yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 *
 */
void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{

    /* TODO. We should be able to replace this entire function body
     * with
     *		yypop_buffer_state();
     *		yypush_buffer_state(new_buffer);
     */
    yyensure_buffer_stack ();
    if ( YY_CURRENT_BUFFER == new_buffer )
    {
        return;
    }

    if ( YY_CURRENT_BUFFER )
    {
        /* Flush out information for old buffer. */
        *(yy_c_buf_p) = (yy_hold_char);
        YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
    }

    YY_CURRENT_BUFFER_LVALUE = new_buffer;
    yy_load_buffer_state( );

    /* We don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    (yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
    (yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
    yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
    (yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 *
 * @return the allocated buffer state.
 */
YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
    if ( ! b )
    {
        YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
    }

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
    if ( ! b->yy_ch_buf )
    {
        YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
    }

    b->yy_is_our_buffer = 1;

    yy_init_buffer(b, file );

    return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 *
 */
void yy_delete_buffer (YY_BUFFER_STATE  b )
{

    if ( ! b )
    {
        return;
    }

    if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
    {
        YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;
    }

    if ( b->yy_is_our_buffer )
    {
        yyfree((void *) b->yy_ch_buf  );
    }

    yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
int oerrno = errno;

yy_flush_buffer(b );

b->yy_input_file = file;
b->yy_fill_buffer = 1;

/* If b is the current buffer, then yy_init_buffer was _probably_
 * called from yyrestart() or through yy_get_next_buffer.
 * In that case, we don't want to reset the lineno or column.
 */
if (b != YY_CURRENT_BUFFER)
{
    b->yy_bs_lineno = 1;
    b->yy_bs_column = 0;
}

b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;

errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 *
 */
void yy_flush_buffer (YY_BUFFER_STATE  b )
{
if ( ! b )
{
    return;
}

b->yy_n_chars = 0;

/* We always need two end-of-buffer characters.  The first causes
 * a transition to the end-of-buffer state.  The second causes
 * a jam in that state.
 */
b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

b->yy_buf_pos = &b->yy_ch_buf[0];

b->yy_at_bol = 1;
b->yy_buffer_status = YY_BUFFER_NEW;

if ( b == YY_CURRENT_BUFFER )
{
    yy_load_buffer_state( );
}
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
if (new_buffer == NULL)
{
    return;
}

yyensure_buffer_stack();

/* This block is copied from yy_switch_to_buffer. */
if ( YY_CURRENT_BUFFER )
{
    /* Flush out information for old buffer. */
    *(yy_c_buf_p) = (yy_hold_char);
    YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
}

/* Only push if top exists. Otherwise, replace top. */
if (YY_CURRENT_BUFFER)
{
    (yy_buffer_stack_top)++;
}
YY_CURRENT_BUFFER_LVALUE = new_buffer;

/* copied from yy_switch_to_buffer. */
yy_load_buffer_state( );
(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *
 */
void yypop_buffer_state (void)
{
if (!YY_CURRENT_BUFFER)
{
    return;
}

yy_delete_buffer(YY_CURRENT_BUFFER );
YY_CURRENT_BUFFER_LVALUE = NULL;
if ((yy_buffer_stack_top) > 0)
{
    --(yy_buffer_stack_top);
}

if (YY_CURRENT_BUFFER)
{
    yy_load_buffer_state( );
    (yy_did_buffer_switch_on_eof) = 1;
}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
int num_to_alloc;

if (!(yy_buffer_stack))
{

    /* First allocation is just for 2 elements, since we don't know if this
     * scanner will even need a stack. We use 2 instead of 1 to avoid an
     * immediate realloc on the next call.
     */
    num_to_alloc = 1;
    (yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
                        (num_to_alloc * sizeof(struct yy_buffer_state*)
                        );
    if ( ! (yy_buffer_stack) )
    {
        YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
    }

    memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

    (yy_buffer_stack_max) = num_to_alloc;
    (yy_buffer_stack_top) = 0;
    return;
}

if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1)
{

    /* Increase the buffer to prepare for a possible push. */
    int grow_size = 8 /* arbitrary grow size */;

    num_to_alloc = (yy_buffer_stack_max) + grow_size;
    (yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
                        ((yy_buffer_stack),
                         num_to_alloc * sizeof(struct yy_buffer_state*)
                        );
    if ( ! (yy_buffer_stack) )
    {
        YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
    }

    /* zero only the new slots.*/
    memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
    (yy_buffer_stack_max) = num_to_alloc;
}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
YY_BUFFER_STATE b;

if ( size < 2 ||
        base[size - 2] != YY_END_OF_BUFFER_CHAR ||
        base[size - 1] != YY_END_OF_BUFFER_CHAR )
    /* They forgot to leave room for the EOB's. */
{
    return 0;
}

b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
if ( ! b )
{
    YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );
}

b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
b->yy_buf_pos = b->yy_ch_buf = base;
b->yy_is_our_buffer = 0;
b->yy_input_file = 0;
b->yy_n_chars = b->yy_buf_size;
b->yy_is_interactive = 0;
b->yy_at_bol = 1;
b->yy_fill_buffer = 0;
b->yy_buffer_status = YY_BUFFER_NEW;

yy_switch_to_buffer(b  );

return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 *
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{

return yy_scan_bytes(yystr, strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
YY_BUFFER_STATE b;
char *buf;
yy_size_t n;
int i;

/* Get memory for full buffer, including space for trailing EOB's. */
n = _yybytes_len + 2;
buf = (char *) yyalloc(n  );
if ( ! buf )
{
    YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );
}

for ( i = 0; i < _yybytes_len; ++i )
{
    buf[i] = yybytes[i];
}

buf[_yybytes_len] = buf[_yybytes_len + 1] = YY_END_OF_BUFFER_CHAR;

b = yy_scan_buffer(buf, n );
if ( ! b )
{
    YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );
}

/* It's okay to grow etc. this buffer, and we should throw it
 * away when we're done.
 */
b->yy_is_our_buffer = 1;

return b;
}

static void yy_push_state (int  new_state )
{
if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
{
    yy_size_t new_size;

    (yy_start_stack_depth) += YY_START_STACK_INCR;
    new_size = (yy_start_stack_depth) * sizeof( int );

    if ( ! (yy_start_stack) )
    {
        (yy_start_stack) = (int *) yyalloc(new_size  );
    }

    else
    {
        (yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack), new_size  );
    }

    if ( ! (yy_start_stack) )
    {
        YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
    }
}

(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

BEGIN(new_state);
}

static void yy_pop_state  (void)
{
if ( --(yy_start_stack_ptr) < 0 )
{
    YY_FATAL_ERROR( "start-condition stack underflow" );
}

BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

static int yy_top_state  (void)
{
return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
(void) fprintf( stderr, "%s\n", msg );
exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 *
 */
int yyget_lineno  (void)
{

return yylineno;
}

/** Get the input stream.
 *
 */
FILE *yyget_in  (void)
{
return yyin;
}

/** Get the output stream.
 *
 */
FILE *yyget_out  (void)
{
return yyout;
}

/** Get the length of the current token.
 *
 */
int yyget_leng  (void)
{
return yyleng;
}

/** Get the current token.
 *
 */

char *yyget_text  (void)
{
return yytext;
}

/** Set the current line number.
 * @param line_number
 *
 */
void yyset_lineno (int  line_number )
{

yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 *
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
yyout = out_str ;
}

int yyget_debug  (void)
{
return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
/* Initialization is the same as for the non-reentrant scanner.
* This function is called from yylex_destroy(), so don't allocate here.
*/

(yy_buffer_stack) = 0;
(yy_buffer_stack_top) = 0;
(yy_buffer_stack_max) = 0;
(yy_c_buf_p) = (char *) 0;
(yy_init) = 0;
(yy_start) = 0;

(yy_start_stack_ptr) = 0;
(yy_start_stack_depth) = 0;
(yy_start_stack) =  NULL;

(yy_state_buf) = 0;
(yy_state_ptr) = 0;
(yy_full_match) = 0;
(yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
yyin = stdin;
yyout = stdout;
#else
yyin = (FILE *) 0;
yyout = (FILE *) 0;
#endif

/* For future reference: Set errno on error, since we are called by
 * yylex_init()
 */
return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{

/* Pop the buffer stack, destroying each element. */
while (YY_CURRENT_BUFFER)
{
    yy_delete_buffer(YY_CURRENT_BUFFER  );
    YY_CURRENT_BUFFER_LVALUE = NULL;
    yypop_buffer_state();
}

/* Destroy the stack itself. */
yyfree((yy_buffer_stack) );
(yy_buffer_stack) = NULL;

/* Destroy the start condition stack. */
yyfree((yy_start_stack)  );
(yy_start_stack) = NULL;

yyfree ( (yy_state_buf) );
(yy_state_buf)  = NULL;

/* Reset the globals. This is important in a non-reentrant scanner so the next time
 * yylex() is called, initialization will occur. */
yy_init_globals( );

return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
register int i;
for ( i = 0; i < n; ++i )
{
    s1[i] = s2[i];
}
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
register int n;
for ( n = 0; s[n]; ++n )
    ;

return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
/* The cast to (char *) in the following accommodates both
 * implementations that use char* generic pointers, and those
 * that use void* generic pointers.  It works with the latter
 * because both ANSI C and C++ allow castless assignment from
 * any pointer type to void*, and deal with argument conversions
 * as though doing an assignment.
 */
return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

int scan_throw(int token)
{
last_token = token;
#ifdef DEV
std::cout << "--> [DEBUG] TOKEN : " << token << std::endl;
#endif
return token;
}

int get_last_token()
{
return last_token;
}

void scan_step()
{
yylloc.first_line = yylloc.last_line;
yylloc.first_column = yylloc.last_column;
}

void scan_error(std::string msg)
{
wchar_t* pstMsg = to_wide_string(msg.c_str());

//std::wcerr << pstMsg << std::endl;
ParserSingleInstance::PrintError(pstMsg);
ParserSingleInstance::setExitStatus(Parser::Failed);
ParserSingleInstance::resetControlStatus();
FREE(pstMsg);
last_token = YYEOF;
BEGIN(INITIAL);
}

/*
** convert floating numbers to C standard
** 1.2d-3 -> 1.2e-3
** 1.2D-3 -> 1.2e-3
*/
void scan_exponent_convert(char *in)
{
for (; *in != 'd' && *in != 'D'; ++in);
*in = 'e';
}

#ifdef _MSC_VER
int isatty (int desc)
{
return 0;
}
#endif

