
#line 3 "src/cpp/parse/scanscilab.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 39
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types.
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

#define YY_LESS_LINENO(n)
#define YY_LINENO_REWIND_TO(ptr)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
{
    FILE *yy_input_file;

    char *yy_ch_buf;		/* input buffer */
    char *yy_buf_pos;		/* current position in input buffer */

    /* Size of input buffer in bytes, not including room for EOB
     * characters.
     */
    yy_size_t yy_buf_size;

    /* Number of characters read into yy_ch_buf, not including EOB
     * characters.
     */
    yy_size_t yy_n_chars;

    /* Whether we "own" the buffer - i.e., we know we created it,
     * and can realloc() it to grow it, and should free() it to
     * delete it.
     */
    int yy_is_our_buffer;

    /* Whether this is an "interactive" input source; if so, and
     * if we're using stdio for input, then we want to use getc()
     * instead of fread(), to make sure we stop fetching input after
     * each newline.
     */
    int yy_is_interactive;

    /* Whether we're considered to be at the beginning of a line.
     * If so, '^' rules will be active on the next match, otherwise
     * not.
     */
    int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

    /* Whether to try to fill the input buffer when we reach the
     * end of it.
     */
    int yy_fill_buffer;

    int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
    /* When an EOF's been seen but there's still some text to process
     * then we mark the buffer as YY_EOF_PENDING, to indicate that we
     * shouldn't try reading from the input source any more.  We might
     * still have a bunch of tokens to match, though, because of
     * possible backing-up.
     *
     * When we actually see the EOF, we change the status to "new"
     * (via yyrestart()), so that the user can continue scanning by
     * just pointing yyin at a new input file.
     */
#define YY_BUFFER_EOF_PENDING 2

};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file, int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b, FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes, yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *, yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 144
#define YY_END_OF_BUFFER 145
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
{
    flex_int32_t yy_verify;
    flex_int32_t yy_nxt;
};
static yyconst flex_int16_t yy_acclist[998] =
{
    0,
    16410,  122,  122,  132,  132,  112,  112,  108,  108,  145,
    85,  144,   81,   85,  144,   82,  144,   82,   85,  144,
    79,   85,  144,   76,   85,  144,   29,   85,  144,   76,
    85,  144,   32,   85,  144,   80,   85,  144,   36,   85,
    144,   37,   85,  144,   50,   85,  144,   49,   85,  144,
    39,   85,  144,   48,   85,  144,   69,   85,  144,   51,
    85,  144,   71,   85,  144,   40,   85,  144,   38,   85,
    144,   62,   85,  144,   66,   85,  144,   63,   85,  144,
    76,   85,  144,   28,   85,  144,   67,   85,  144,   52,
    85,  144,   68,   85,  144,   53,   85,  144,   76,   85,

    144,   76,   85,  144,   76,   85,  144,   76,   85,  144,
    76,   85,  144,   76,   85,  144,   76,   85,  144,   76,
    85,  144,   76,   85,  144,   76,   85,  144,   76,   85,
    144,   76,   85,  144,   41,   85,  144,   34,   85,  144,
    42,   85,  144,   28,   85,  144,   85,  144,   85,  144,
    85,  144,   85,  144,   85,  144,   85,  144,   85,  144,
    85,  144,   85,  144,   81,   85,  144, 16410,   76,   85,
    144,   29,   85,  144,   76,   85,  144,   76,   85,  144,
    76,   85,  144,   76,   85,  144,   76,   85,  144,   76,
    85,  144,   76,   85,  144,   76,   85,  144,   76,   85,

    144,   76,   85,  144,   76,   85,  144,   76,   85,  144,
    76,   85,  144,   76,   85,  144,   85,  144,   85,  144,
    85,  144,   85,  144,   85,  144,   85,  144,   85,  144,
    85,  144,   85,  144,  122,  123,  144,  121,  144,  121,
    123,  144,  119,  123,  144,  118,  123,  144,  123,  144,
    132,  133,  144,  131,  144,  131,  133,  144,  128,  133,
    144,  129,  133,  144,  133,  144,  112,  113,  144,  111,
    144,  111,  113,  144,  113,  144,  113,  144,  108,  144,
    107,  144,  107,  144,  106,  144,  105,  106,  144,  102,
    144,  102,  106,  144,  106,  144,   99,  144,   81,   99,

    144,   90,  144,   90,   99,  144,   79,   99,  144,   76,
    99,  144,   29,   99,  144,   76,   99,  144,   32,   99,
    144,   80,   99,  144,   86,   88,   99,  144,   87,   99,
    144,   50,   99,  144,   93,   99,  144,   39,   99,  144,
    95,   99,  144,   69,   99,  144,   51,   99,  144,   71,
    99,  144,   40,   89,   99,  144,   38,   99,  144,   62,
    99,  144,   66,   99,  144,   63,   99,  144,   28,   99,
    144,   67,   99,  144,   52,   99,  144,   91,   99,  144,
    53,   99,  144,   41,   99,  144,   34,   99,  144,   92,
    99,  144,   28,   99,  144,   99,  144,   99,  144,   99,

    144,   99,  144,   99,  144,   99,  144,   99,  144,   99,
    144,  143,  144,  134,  144,  137,  144,  137,  144,   79,
    144,   80,  144,  139,  143,  144,  136,  144,  135,  144,
    140,  143,  144,  138,  143,  144,  141,  143,  144,  142,
    143,  144,  144,   27,  144,  144,   27,  144,   27,  144,
    27,  144,   27,  144,   27,  144,   27,  144,   27,  144,
    27,  144,   27,  144,   27,  144,   27,  144,   27,  144,
    27,  144,   27,  144,  144,  144,  144,  144,  144,  144,
    144,  144,   81,   83,   83,   82,   76,   76,   76,    3,
    31,   76,    2,   30,   76,   33,   53,   43,   44,   70,

    45,   75,   46,   47,   77,   78,   74,   71,   64,   61,
    60,   65,   76,   76,   76,   19,   76,   76,   76,   76,
    76,   76,    4,   76,   76,   76,   76,   76,   76,   76,
    76,   35,   76,   81, 16410,   76,   76,   76,    3,   31,
    76,    2,   30,   76,   76,   76,   76,   19,   76,   76,
    76,   76,   76,   76,    4,   76,   76,   76,   76,   76,
    76,   76,   76,   76,  122,  121,  114,  115,  116,  117,
    132,  131,  124,  125,  126,  127,  112,  111,  109,  110,
    108,  107,  105,  102,  103,  104,   81,   88,   97,   98,
    89,   90,   31,   76,   30,   76,   89,  143,  134,  137,

    27,   27,   27,    3,   27,    2,   27,   27,   27,   27,
    19,   27,   27,   27,   27,   27,   27,    4,   27,   27,
    27,   27,   27,   27,   27,   27,   27,   84,   84,   76,
    57,   54,   55,   56,   58,   74,   72,   73,   59,   76,
    76,   76,   76,   76,    8,   76,   17,   76,   76,   76,
    76,   76,   76,   76,   76,   76,   22,   76,   76,    1,
    76, 8218, 8218,   76,   76,   76,   76,   76,   76,    8,
    76,   17,   76,   76,   76,   76,   76,   76,   76,   76,
    76,   22,   76,   76,    1,   76,  120,  120,  130,  130,
    94,   96,  100,  100,   27,   27,   27,   27,   27,   27,

    8,   27,   17,   27,   27,   27,   27,   27,   27,   27,
    27,   27,   22,   27,   27,   76,   76,   12,   76,   76,
    76,    6,   76,   76,   76,   76,   76,   76,   76,   76,
    76,    5,   76,   76,    1,    1,   76,    1,    1,    1,
    1,    1,    1,    1,    1,   76, 8218,   76,   76,   12,
    76,   76,   76,    6,   76,   76,   76,   76,   76,   76,
    76,   76,   76,    5,   76,   76,    1,    1,   76,    1,
    1,    1,    1,    1,    1,    1,    1,   76,  101,   27,
    27,   12,   27,   27,   27,    6,   27,   27,   27,   27,
    27,   27,   27,   27,   27,    5,   27,   27,   27,   76,

    76,   76,   20,   76,   23,   76,   76,   76,   76,   76,
    76,   76,   76,   76,   76,   76,   18,   76,    1,    1,
    1,    1,    1,    1,    1,   76,   76,   76,   20,   76,
    23,   76,   76,   76,   76,   76,   76,   76,   76,   76,
    76,   76,   18,   76,    1, 8218,    1, 8218,    1,    1,
    1,    1,    1,    1,    1,   27,   27,   27,   20,   27,
    23,   27,   27,   27,   27,   27,   27,   27,   27,   27,
    27,   27,   18,   27,   76,   76,    7,   76,   76,   76,
    16,   76,   76,   25,   76,   24,   76,    9,   76,   10,
    76,    1,    1,    1,   76,   76,    7,   76,   76,   76,

    16,   76,   76,   25,   76,   24,   76,    9,   76,   10,
    76,    1, 8218,    1,    1,    1,   27,   27,    7,   27,
    27,   27,   16,   27,   27,   25,   27,   24,   27,    9,
    27,   10,   27,   76,   76,   76,   76,   76,    1,   76,
    76,   76,   76,   76,   76,    1,   76,   27,   27,   27,
    27,   27,   76,   21,   76,   76,   13,   76,   76,   76,
    21,   76,   76,   13,   76,   76,   27,   21,   27,   27,
    13,   27,   27,   15,   76,   76,   11,   76,   15,   76,
    76,   11,   76,   15,   27,   27,   11,   27,   76,   76,
    27,   14,   76,   14,   76,   14,   27

} ;

static yyconst flex_int16_t yy_accept[855] =
{
    0,
    1,    1,    2,    3,    4,    5,    6,    7,    8,    9,
    10,   10,   10,   10,   10,   10,   10,   10,   10,   11,
    13,   16,   18,   21,   24,   27,   30,   33,   36,   39,
    42,   45,   48,   51,   54,   57,   60,   63,   66,   69,
    72,   75,   78,   81,   84,   87,   90,   93,   96,   99,
    102,  105,  108,  111,  114,  117,  120,  123,  126,  129,
    132,  135,  138,  141,  144,  147,  149,  151,  153,  155,
    157,  159,  161,  163,  165,  169,  172,  175,  178,  181,
    184,  187,  190,  193,  196,  199,  202,  205,  208,  211,
    214,  217,  219,  221,  223,  225,  227,  229,  231,  233,

    235,  238,  240,  243,  246,  249,  251,  254,  256,  259,
    262,  265,  267,  270,  272,  275,  277,  279,  281,  283,
    285,  287,  290,  292,  295,  297,  299,  302,  304,  307,
    310,  313,  316,  319,  322,  325,  329,  332,  335,  338,
    341,  344,  347,  350,  353,  357,  360,  363,  366,  369,
    372,  375,  378,  381,  384,  387,  390,  393,  396,  398,
    400,  402,  404,  406,  408,  410,  412,  414,  416,  418,
    420,  422,  424,  427,  429,  431,  434,  437,  440,  443,
    444,  446,  447,  449,  451,  453,  455,  457,  459,  461,
    463,  465,  467,  469,  471,  473,  475,  476,  477,  478,

    479,  480,  481,  482,  483,  484,  485,  486,  486,  486,
    487,  488,  489,  489,  489,  489,  489,  489,  489,  489,
    489,  490,  490,  490,  490,  490,  490,  490,  490,  490,
    493,  496,  497,  498,  498,  499,  500,  501,  502,  503,
    504,  505,  506,  506,  507,  508,  509,  509,  509,  509,
    510,  511,  511,  512,  512,  513,  513,  513,  514,  515,
    516,  518,  519,  520,  521,  522,  523,  525,  526,  527,
    528,  529,  530,  531,  532,  533,  533,  534,  534,  534,
    534,  534,  534,  534,  534,  534,  536,  536,  536,  536,
    536,  536,  536,  536,  536,  536,  536,  536,  537,  538,

    538,  538,  538,  538,  538,  538,  538,  538,  539,  539,
    539,  539,  539,  539,  539,  539,  539,  542,  545,  546,
    547,  548,  550,  551,  552,  553,  554,  555,  557,  558,
    559,  560,  561,  562,  563,  564,  565,  565,  565,  565,
    565,  565,  565,  565,  565,  566,  567,  568,  569,  570,
    571,  571,  572,  573,  574,  575,  576,  577,  577,  578,
    579,  580,  581,  582,  583,  584,  585,  586,  587,  588,
    589,  590,  591,  592,  593,  595,  597,  597,  598,  599,
    600,  601,  602,  603,  603,  603,  603,  603,  603,  603,
    603,  603,  604,  604,  604,  604,  604,  604,  604,  604,

    604,  606,  608,  609,  610,  611,  613,  614,  615,  616,
    617,  618,  620,  621,  622,  623,  624,  625,  626,  627,
    628,  628,  628,  628,  628,  628,  628,  628,  629,  630,
    631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
    631,  631,  631,  631,  631,  632,  633,  634,  635,  636,
    637,  637,  638,  638,  639,  640,  641,  642,  643,  644,
    645,  647,  649,  650,  651,  652,  653,  654,  655,  656,
    657,  659,  660,  662,  662,  662,  662,  662,  662,  662,
    662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
    662,  662,  662,  662,  662,  662,  662,  662,  662,  662,

    662,  662,  663,  664,  665,  665,  665,  665,  665,  665,
    665,  665,  665,  665,  665,  665,  665,  665,  665,  666,
    667,  668,  669,  670,  672,  674,  675,  676,  677,  678,
    679,  680,  681,  682,  684,  685,  687,  687,  687,  687,
    688,  689,  690,  691,  692,  693,  693,  694,  695,  695,
    696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
    696,  696,  696,  696,  696,  697,  698,  699,  700,  701,
    703,  705,  706,  707,  708,  709,  710,  711,  712,  713,
    715,  716,  716,  716,  716,  717,  717,  717,  717,  717,
    717,  717,  718,  720,  721,  722,  724,  725,  726,  727,

    728,  729,  730,  731,  732,  734,  735,  736,  738,  739,
    740,  741,  742,  743,  744,  745,  746,  747,  747,  747,
    747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
    747,  747,  747,  747,  747,  748,  749,  749,  749,  749,
    749,  749,  749,  750,  752,  753,  754,  756,  757,  758,
    759,  760,  761,  762,  763,  764,  766,  767,  768,  770,
    771,  772,  773,  774,  775,  776,  777,  778,  779,  780,
    781,  781,  781,  781,  781,  781,  781,  782,  784,  785,
    786,  788,  789,  790,  791,  792,  793,  794,  795,  796,
    798,  799,  800,  801,  802,  803,  805,  807,  808,  809,

    810,  811,  812,  813,  814,  815,  816,  817,  819,  820,
    821,  822,  823,  824,  825,  826,  826,  826,  826,  826,
    826,  826,  826,  827,  828,  829,  831,  833,  834,  835,
    836,  837,  838,  839,  840,  841,  842,  843,  845,  847,
    849,  850,  851,  852,  853,  854,  855,  856,  857,  858,
    859,  861,  863,  864,  865,  866,  867,  868,  869,  870,
    871,  872,  873,  875,  876,  877,  879,  880,  881,  883,
    884,  886,  888,  890,  892,  893,  894,  895,  895,  895,
    896,  897,  899,  900,  901,  903,  904,  906,  908,  910,
    912,  914,  915,  916,  917,  918,  919,  921,  922,  923,

    925,  926,  928,  930,  932,  934,  935,  936,  937,  938,
    939,  941,  942,  943,  944,  945,  946,  948,  949,  950,
    951,  952,  953,  954,  956,  957,  959,  960,  961,  963,
    964,  966,  967,  968,  970,  971,  973,  974,  976,  977,
    979,  981,  982,  984,  986,  987,  989,  990,  991,  992,
    994,  996,  998,  998
} ;

static yyconst flex_int32_t yy_ec[256] =
{
    0,
    1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
    2,    2,    4,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    2,    1,    5,    6,    7,    8,    9,   10,   11,
    12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
    19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
    23,   24,   25,   26,   25,   25,   25,   27,   28,   29,
    25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
    25,   25,   25,   30,   25,   25,   25,   25,   25,   25,
    31,   32,   33,   34,   25,    1,   35,   36,   37,   38,

    39,   40,   25,   41,   42,   25,   43,   44,   45,   46,
    47,   25,   25,   48,   49,   50,   51,   25,   52,   25,
    53,   25,   54,   55,   56,   57,    1,   58,   58,   58,
    58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
    58,   58,   58,   59,   59,   59,   59,   59,   59,   59,
    59,   59,   59,   59,   59,   59,   59,   59,   59,   60,
    60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
    60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
    60,   60,   60,   60,   60,   60,   61,   60,   60,   60,
    62,    1,    1,   63,   63,   63,   63,   63,   63,   63,

    63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
    63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
    63,   63,   63,   64,   65,   65,   65,   65,   65,   65,
    65,   65,   65,   65,   65,   65,   66,   67,   68,   69,
    70,   70,   70,   71,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1
} ;

static yyconst flex_int32_t yy_meta[72] =
{
    0,
    1,    2,    3,    4,    5,    6,    6,    7,    1,    5,
    8,    1,    9,    1,   10,    1,   11,    9,   12,    1,
    10,    8,    8,    8,    6,    1,    6,    6,    6,    6,
    1,    1,    1,    1,    6,    6,    6,    6,    6,    6,
    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
    6,    6,    6,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    6,    6,    6,    6,    6,    6,    6,    6,
    6
} ;

static yyconst flex_int16_t yy_base[880] =
{
    0,
    0,   71,  140,  143,  151,  159,  162,  168,  148,  155,
    175,  180,  198,    0,  268,  324,  381,    0,  925, 4408,
    185,  272,  282, 4408,  241,  250,  424,  910, 4408, 4408,
    4408,  157, 4408, 4408, 4408,  323,  177,  332, 4408, 4408,
    275,  273,  278,  314,  300, 4408,  896, 4408, 4408,  427,
    431,  429,  323,  433,  456,  470,  472,  474,  478,  486,
    502, 4408,  856, 4408,  335,  316,  270,  479,  133,  486,
    495,  499,  504,  836,  565,  635,  510,  705,  553,  556,
    560,  558,  572,  609,  611,  614,  617,  633,  639,  636,
    679,  565,  489,  634,  138,  652,  663,  656,  678,  829,

    0, 4408,  881,  290,  351,  852,    0, 4408,  843,  460,
    587,  796,    0, 4408,  796,  777,  780,    0, 4408,  747,
    4408,  744, 4408,  727,  581, 4408,  740,  726,  746, 4408,
    748,  716,  760,  688, 4408, 4408, 4408,  269, 4408, 4408,
    4408,  784,  596,  787,  688, 4408,  729,  568,  619,  648,
    4408,  668, 4408, 4408, 4408,  619, 4408,  789,  704,  620,
    761,  307,  769,  773,  778,  612,    0,  656, 4408,  652,
    4408, 4408,    0, 4408, 4408,    0,    0,    0,    0, 4408,
    784,  793,  836,  838,  841,  845,  843,  868,  880,  886,
    892,  894,  908,  910,  916,  938,  783,  697,  893,  321,

    911,  915,  922,  594,  805, 4408,  645,  983,  987,  790,
    963,  965,  959,  939,  964,  561,  969,  950,  974,  587,
    0,  979,  982,  987,  629,  992,  996, 1001,  559, 1035,
    1037, 4408, 4408,    0, 4408,  355,  598,  594, 1051,  567,
    4408, 4408,    0, 4408, 1053, 1067,  863, 1055, 1074, 4408,
    4408,  794, 4408,  894, 4408, 1080,    0, 1070, 1072, 1078,
    1085, 1087, 1100, 1103, 1112, 1116, 1119, 1131, 1134, 1138,
    1147, 1156, 1150, 1162, 4408, 1081, 1169, 1155, 1162, 1167,
    1172, 1177, 1182, 1187, 1192, 1253, 1199, 1208, 1222, 1225,
    1230,  668, 1235, 1239, 1244,  513,  939, 1285, 1297, 1249,

    1268, 1280,  674, 1291, 1272, 1296,  477, 1310, 1301, 1283,
    1306,  948, 1324, 1310, 1329,  475, 1363, 1365, 1367, 1369,
    1381, 1372, 1394, 1399, 1406, 1411, 1429, 1423, 1435, 1441,
    1448, 1453, 1457, 1470, 1472, 1475, 1468, 1473, 1478, 1483,
    1488, 1493, 1498, 1503,    0, 4408, 4408, 4408, 4408, 4408,
    1190,    0, 4408, 4408, 4408, 4408, 4408, 1563,    0, 4408,
    4408, 4408,    0, 4408,  527, 4408, 4408, 4408, 1567, 4408,
    523,  521,  519, 1445, 1544, 1546, 1586,  517,    0,  509,
    4408, 1562, 1568, 1555, 1456, 1562, 1152, 1567, 1571, 1576,
    451, 1576, 1590, 1539, 1595, 1200, 1600, 1604, 1609,  447,

    1643, 1645, 1647, 1649, 1661, 1652, 1674, 1679, 1686, 1691,
    1709, 1703, 1715, 1721, 1728, 1733, 1737, 1750, 1752, 1755,
    1748, 1753, 1758, 1763, 1768, 1773, 1778, 4408,  494, 1812,
    1785, 1795, 1805, 1810, 1815, 1820, 1825, 1830, 1835, 1840,
    1845, 1850, 1855, 1860, 4408, 4408, 4408, 4408, 4408, 1904,
    463,  453,  449,  436, 4408, 1895, 1897, 1904, 1899, 1921,
    1923, 1926, 1928, 1945, 1940, 1952, 1957, 1959, 1964, 1971,
    1976, 1983, 2033, 1970, 2047, 2052, 2113, 2058, 1545, 2063,
    1367, 2068, 1737, 2073,  304, 2134, 2079, 1549, 2084, 1374,
    2089, 1789, 2094,  280, 2099, 2104, 2109, 2127, 2132, 2148,

    2153, 4408, 2214, 2189, 2162, 2172, 2182, 2187, 2192, 2197,
    2202, 2207, 2212, 2217, 2222, 2227, 2232, 2237, 2271, 2273,
    2278, 2280, 2287, 2295, 2302, 2304, 2309, 2321, 2326, 2328,
    2333, 2335, 2340, 2352, 2359, 2409, 2335, 2346, 2423, 4408,
    321, 4408,  319,  286,  274, 2484, 4408,  182,  155, 2460,
    2433, 2453, 2458, 2463, 2468, 2473, 2478, 2483, 2488, 2493,
    2498, 2503, 2508, 2513, 2547, 2549, 2554, 2556, 2563, 2571,
    2578, 2580, 2585, 2597, 2602, 2604, 2609, 2611, 2616, 2628,
    2635, 2611, 2622, 2628, 2662, 2635, 2645, 2655, 2660, 2665,
    2670, 2704, 2706, 2708, 2710, 2713, 2732, 2735, 2737, 2740,

    2744, 2762, 2766, 2768, 2771, 2784,    0,    0, 2767, 1799,
    2777, 1450, 2782, 2113, 2787,  109, 2821, 2794, 2804, 2814,
    2819, 2824, 2829, 2834, 2839, 2844, 2849, 2854, 2859, 2864,
    2869, 2874, 2879, 2884, 2757, 2918, 2891, 2901, 2911, 2916,
    2921, 2926, 2960, 2962, 2964, 2966, 2969, 2988, 2991, 2993,
    2996, 3000, 3018, 3022, 3024, 3027, 3040, 3073,    0, 3027,
    1958, 3042, 1647, 3047, 2437, 3052,   91, 3086, 4408, 3088,
    3061, 3073, 3081, 3086, 3091, 3096, 3130, 3132, 3134, 3136,
    3139, 3158, 3161, 3163, 3166, 3170, 3188, 3192, 3194, 3197,
    3210, 3216, 3222, 3224,    0, 3228, 3240, 3246, 3253, 3255,

    3258, 3277, 3280, 3285, 3299, 3304, 3307, 3311, 3304, 3309,
    3314, 3319, 3324, 3329, 3334, 3339, 3344, 3349, 3354, 3359,
    3364,    0, 3398, 3400,    0, 3402, 3404, 3407, 3416, 3429,
    3431, 3434, 3438, 3447, 3453, 3462, 3465, 3471,    0, 1725,
    3458, 3464, 3469, 3474, 3479, 3484, 3489, 3523, 3525,    0,
    3527, 3529, 3532, 3541, 3554, 3556, 3559, 3563, 3572, 3578,
    3587, 3590, 3596, 3603, 3609, 3612, 3618, 3627, 3621, 3636,
    3640, 3643, 3652, 3655, 3638, 3648, 3653,    0,    0, 3687,
    3690, 3692, 3694, 3696, 3709, 3718, 3721, 3723, 3725, 3727,
    3032, 3720, 3725, 3730, 3764, 3767, 3769, 3771, 3773, 3786,

    3795, 3798, 3800, 3802, 3804, 3817, 3826, 3829, 3831, 3833,
    0, 3845, 3857, 3859, 3864, 3871,    0, 3876, 3888, 3895,
    3900, 3902, 3907, 3904, 3919, 3926, 3933, 3935, 3938, 3950,
    3957, 3964, 3966, 3969, 3981, 3988, 3995, 3997, 4003, 4011,
    4019, 4025, 4027, 4033, 4041, 4049, 4055, 4057, 4064, 4079,
    4082, 4086, 4408, 4136, 4148, 4160, 4172, 4184, 4196, 4203,
    4210, 4221, 4227, 4234, 4246, 4258, 4270, 4282, 4294, 4301,
    4308, 4320, 4331, 4342, 4352, 4359, 4371, 4383, 4395
} ;

static yyconst flex_int16_t yy_def[880] =
{
    0,
    853,  853,  854,  854,  855,  855,  856,  856,  857,  857,
    858,  858,  853,   13,  859,  859,  853,   17,  853,  853,
    853,  853,  853,  853,  860,  861,  860,  853,  853,  853,
    853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
    853,  853,  853,   27,  853,  853,  853,  853,  853,   27,
    27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
    27,  853,  853,  853,  853,  853,  853,  853,  853,  853,
    853,  853,  853,  853,  862,  863,  864,  863,   78,   78,
    78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
    78,  853,  853,  853,  853,  853,  853,  853,  853,  853,

    865,  853,  853,  853,  853,  853,  866,  853,  853,  853,
    853,  853,  867,  853,  853,  853,  853,  868,  853,  853,
    853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
    27,  861,   27,  853,  853,  853,  853,  853,  853,  853,
    853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
    853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
    853,  853,  853,  853,  853,  853,  869,  853,  853,  853,
    853,  853,  869,  853,  853,  869,  869,  869,  869,  853,
    870,  871,  870,  183,  183,  183,  183,  183,  183,  183,
    183,  183,  183,  183,  183,  183,  853,  853,  853,  853,

    853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
    27,   27,  853,  853,  853,  853,  853,  853,  853,  853,
    132,  853,  853,  853,  853,  853,  853,  853,  853,   27,
    27,  853,  853,  872,  853,  853,  853,  853,  853,  853,
    853,  853,  873,  853,  853,  853,  853,  853,  853,  853,
    853,  853,  853,  853,  853,  853,  874,   27,   27,   27,
    27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
    27,   27,   27,   27,  853,  853,   27,  853,  853,  853,
    853,  853,  853,  853,  853,  862,  875,  876,  853,  853,
    853,  853,  853,  853,  853,  853,  877,   78,   78,  853,

    853,  853,  853,  853,  853,  853,  853,  864,  853,  853,
    853,  853,  853,  853,  853,  853,   78,   78,   78,   78,
    78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
    78,   78,   78,   78,   78,   78,  853,  853,  853,  853,
    853,  853,  853,  853,  865,  853,  853,  853,  853,  853,
    853,  866,  853,  853,  853,  853,  853,  853,  867,  853,
    853,  853,  868,  853,  853,  853,  853,  853,  853,  853,
    853,  853,  853,  853,   27,   27,  853,  853,  869,  853,
    853,  183,  183,  853,  853,  853,  853,  853,  853,  853,
    853,  871,  853,  853,  853,  853,  853,  853,  853,  853,

    183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
    183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
    853,  853,  853,  853,  853,  853,  853,  853,  853,   27,
    853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
    853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
    853,  853,  853,  853,  853,   27,   27,   27,   27,   27,
    27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
    27,   27,  853,  853,  853,  853,  875,  853,  853,  853,
    853,  853,  853,  853,  853,  876,  853,  853,  853,  853,
    853,  853,  853,  853,  853,  853,  853,  853,  853,  853,

    853,  853,  877,   78,  853,  853,  853,  853,  853,  853,
    853,  853,  853,  853,  853,  853,  853,  853,   78,   78,
    78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
    78,   78,   78,   78,   78,  853,  853,  853,  853,  853,
    853,  853,  853,  853,  853,  853,  853,  853,  853,  183,
    853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
    853,  853,  853,  853,  183,  183,  183,  183,  183,  183,
    183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
    183,  853,  853,  853,   27,  853,  853,  853,  853,  853,
    853,   27,   27,   27,   27,   27,   27,   27,   27,   27,

    27,   27,   27,   27,   27,   27,  878,  473,  878,  878,
    878,  878,  878,  878,  878,  878,   27,  853,  853,  853,
    853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
    853,  853,  853,  853,  877,   78,  853,  853,  853,  853,
    853,  853,   78,   78,   78,   78,   78,   78,   78,   78,
    78,   78,   78,   78,   78,   78,   78,  879,  536,  878,
    878,  878,  878,  878,  878,  878,  878,   78,  853,  183,
    853,  853,  853,  853,  853,  853,  183,  183,  183,  183,
    183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
    183,  183,   27,   27,  132,   27,   27,   27,   27,   27,

    27,   27,   27,   27,   27,   27,   27,   27,  878,  878,
    878,  878,  878,  878,  878,  853,  853,  853,  853,  853,
    853,  477,   78,   78,  308,   78,   78,   78,   78,   78,
    78,   78,   78,   78,   78,   78,   78,   78,  878,  879,
    878,  878,  878,  878,  878,  878,  878,  183,  183,  392,
    183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
    183,  183,  183,   27,   27,   27,   27,   27,   27,   27,
    27,   27,   27,   27,  878,  878,  878,  477,  486,   78,
    78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
    879,  878,  878,  878,  183,  183,  183,  183,  183,  183,

    183,  183,  183,  183,  183,   27,   27,   27,   27,   27,
    473,   78,   78,   78,   78,   78,  536,  183,  183,  183,
    183,  183,   27,   27,   27,   27,   27,   78,   78,   78,
    78,   78,  183,  183,  183,  183,  183,   27,   27,   27,
    78,   78,   78,  183,  183,  183,   27,   78,  183,   27,
    78,  183,    0,  853,  853,  853,  853,  853,  853,  853,
    853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
    853,  853,  853,  853,  853,  853,  853,  853,  853
} ;

static yyconst flex_int16_t yy_nxt[4480] =
{
    0,
    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
    30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
    40,   41,   42,   43,   44,   45,   44,   44,   44,   44,
    46,   47,   48,   49,   44,   50,   51,   52,   53,   54,
    55,   56,   44,   44,   44,   44,   57,   58,   59,   60,
    44,   61,   44,   62,   63,   64,   65,   20,   20,   20,
    20,   20,   66,   67,   68,   69,   70,   71,   72,   73,
    74,   20,   75,   22,   23,   24,   76,   77,   78,   28,
    29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
    39,   40,   41,   42,   43,   79,   45,   79,   79,   79,

    79,   46,   47,   48,   49,   79,   80,   81,   82,   83,
    84,   85,   86,   79,   79,   79,   79,   87,   88,   89,
    90,   79,   91,   79,   62,   63,   64,   65,   20,   20,
    20,   20,   20,   92,   93,   94,   95,   96,   97,   98,
    99,  100,  102,  103,  104,  102,  103,  104,  747,  105,
    119,  120,  105,  108,  109,  110,  106,  119,  120,  106,
    111,  108,  109,  110,  114,  115,  715,  112,  111,  233,
    114,  115,  669,  234,  116,  112,  122,  123,  124,  117,
    116,  122,  123,  124,  547,  117,  205,  206,  207,  242,
    280,  280,  125,  243,  244,  339,  339,  125,  126,  127,

    128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
    138,  139,  140,  141,  142,  143,  144,  145,  146,  147,
    148,  149,  131,  150,  131,  131,  131,  131,  151,  152,
    153,  154,  131,  131,  131,  131,  131,  131,  131,  131,
    131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
    131,  155,  156,  157,  158,  126,  126,  126,  126,  126,
    159,  160,  161,  162,  163,  163,  164,  165,  166,  168,
    169,  170,  171,  208,  252,  545,  249,  172,  173,  254,
    212,  233,  174,  208,  210,  234,  209,  544,  175,  176,
    177,  178,  209,  179,  347,  253,  209,  250,  251,  348,

    255,  256,  209,  213,  214,  215,  216,  217,  217,  218,
    219,  220,  222,  223,  224,  225,  226,  226,  227,  228,
    229,  542,  251,  540,  179,  168,  169,  170,  171,  278,
    278,  278,  235,  172,  173,  236,  276,  631,  174,  237,
    238,  239,  211,  211,  175,  176,  177,  178,  245,  179,
    246,  211,  211,  211,  240,  349,  241,  251,  247,  248,
    350,  624,  211,  211,  280,  280,  262,  241,  263,  247,
    248,  446,  211,  277,  277,  277,  277,  277,  423,  423,
    179,  180,  180,  180,  180,  180,  181,  182,  183,  180,
    180,  180,  180,  180,  180,  180,  180,  180,  180,  180,

    180,  180,  180,  180,  180,  184,  180,  184,  184,  184,
    184,  180,  180,  180,  180,  184,  185,  186,  187,  188,
    189,  190,  191,  184,  184,  184,  184,  192,  193,  194,
    195,  184,  196,  184,  180,  180,  180,  180,  180,  180,
    180,  180,  180,  197,  198,  199,  200,  201,  201,  202,
    203,  204,  230,  231,  454,  211,  211,  211,  211,  211,
    211,  211,  211,  230,  354,  259,  211,  454,  211,  355,
    211,  452,  211,  231,  258,  261,  211,  260,  211,  264,
    211,  452,  211,  265,  211,  211,  213,  214,  215,  216,
    217,  217,  218,  219,  220,  211,  428,  266,  211,  211,

    211,  211,  211,  211,  564,  211,  211,  211,  557,  267,
    380,  211,  269,  211,  211,  211,  270,  211,  378,  211,
    378,  268,  545,  211,  544,  211,  272,  211,  365,  271,
    211,  211,  518,  273,  511,  211,  279,  279,  279,  279,
    279,  211,  274,  281,  281,  281,  281,  281,  337,  337,
    337,  211,  281,  281,  281,  282,  281,  283,  283,  283,
    283,  284,  284,  284,  284,  284,  286,  206,  207,  252,
    501,  288,  309,  310,  311,  312,  313,  313,  314,  315,
    316,  298,  298,  448,  298,  298,  298,  298,  298,  298,
    253,  356,  298,  367,  320,  298,  357,  298,  368,  298,

    298,  298,  298,  319,  322,  298,  321,  298,  242,  298,
    447,  298,  243,  244,  237,  323,  444,  324,  433,  433,
    254,  298,  336,  336,  336,  336,  336,  289,  290,  291,
    292,  293,  293,  294,  295,  296,  297,  298,  298,  298,
    298,  255,  298,  298,  437,  298,  298,  206,  298,  256,
    298,  427,  327,  328,  381,  325,  298,  380,  298,  326,
    298,  298,  298,  298,  298,  298,  329,  298,  298,  285,
    251,  330,  298,  275,  299,  298,  333,  331,  298,  278,
    278,  278,  298,  334,  257,  298,  440,  440,  298,  378,
    332,  338,  338,  338,  338,  338,  232,  300,  301,  302,

    303,  304,  304,  305,  306,  307,  297,  298,  298,  340,
    340,  340,  340,  340,  342,  342,  342,  342,  298,  335,
    340,  340,  340,  341,  340,  497,  497,  208,  298,  366,
    249,  507,  507,  317,  318,  343,  343,  343,  343,  343,
    209,  369,  206,  207,  317,  365,  209,  208,  374,  364,
    370,  250,  251,  371,  318,  372,  421,  421,  421,  373,
    209,  277,  277,  277,  277,  277,  209,  300,  301,  302,
    303,  304,  304,  305,  306,  307,  211,  211,  222,  223,
    224,  225,  226,  226,  227,  228,  229,  211,  375,  376,
    276,  208,  362,  235,  361,  252,  236,  211,  360,  375,

    377,  238,  239,  245,  209,  246,  205,  206,  207,  376,
    209,  251,  358,  247,  248,  240,  253,  241,  279,  279,
    279,  279,  279,  383,  247,  248,  281,  281,  281,  281,
    281,  283,  283,  283,  283,  284,  284,  284,  284,  284,
    420,  420,  420,  420,  420,  353,  384,  385,  386,  387,
    388,  388,  389,  390,  391,  393,  394,  395,  396,  397,
    397,  398,  399,  400,  401,  402,  382,  382,  351,  382,
    382,  382,  382,  382,  382,  401,  451,  382,  451,  404,
    382,  452,  382,  346,  382,  402,  344,  382,  403,  406,
    382,  405,  382,  285,  382,  254,  382,  382,  384,  385,

    386,  387,  388,  388,  389,  390,  391,  382,  382,  382,
    275,  407,  257,  408,  382,  382,  255,  382,  232,  382,
    382,  382,  382,  382,  853,  382,  409,  411,  853,  382,
    410,  412,  853,  382,  853,  382,  382,  382,  382,  382,
    297,  382,  853,  413,  382,  382,  414,  382,  415,  382,
    422,  422,  422,  422,  422,  382,  417,  382,  853,  382,
    853,  416,  853,  418,  503,  382,  382,  382,  424,  424,
    424,  424,  424,  425,  425,  425,  425,  382,  419,  426,
    426,  426,  426,  426,  208,  428,  429,  382,  208,  428,
    429,  211,  211,  211,  211,  503,  853,  209,  431,  431,

    431,  209,  211,  209,  211,  514,  514,  209,  435,  435,
    435,  435,  211,  853,  211,  430,  211,  211,  211,  211,
    211,  432,  432,  432,  432,  432,  434,  434,  434,  434,
    434,  436,  436,  436,  436,  436,  221,  221,  221,  221,
    221,  438,  438,  438,  439,  439,  439,  439,  439,  441,
    441,  441,  441,  441,  442,  442,  442,  442,  443,  443,
    443,  443,  443,  211,  211,  211,  211,  853,  453,  239,
    453,  450,  853,  454,  211,  249,  211,  247,  248,  247,
    248,  256,  276,  245,  211,  246,  211,  853,  247,  248,
    247,  248,  853,  247,  248,  853,  250,  251,  211,  211,

    211,  211,  251,  251,  247,  248,  211,  211,  456,  211,
    853,  211,  853,  211,  211,  211,  211,  211,  853,  211,
    457,  458,  853,  459,  211,  853,  211,  211,  211,  211,
    853,  211,  211,  853,  211,  460,  211,  461,  853,  211,
    211,  211,  211,  853,  211,  211,  853,  211,  211,  211,
    462,  211,  211,  464,  853,  211,  853,  463,  211,  211,
    211,  211,  211,  211,  853,  211,  211,  211,  211,  853,
    211,  465,  853,  211,  853,  211,  211,  211,  211,  211,
    211,  468,  466,  467,  211,  211,  211,  211,  469,  211,
    211,  211,  540,  541,  470,  211,  211,  211,  211,  211,

    297,  211,  471,  472,  853,  211,  351,  853,  211,  553,
    553,  211,  277,  277,  277,  277,  277,  853,  211,  277,
    277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
    277,  277,  277,  277,  277,  277,  277,  277,  473,  474,
    474,  474,  474,  474,  475,  475,  475,  475,  475,  476,
    476,  476,  476,  476,  286,  206,  207,  560,  560,  288,
    853,  478,  479,  480,  481,  482,  482,  483,  484,  485,
    487,  488,  489,  490,  491,  491,  492,  493,  494,  287,
    287,  287,  287,  287,  495,  495,  495,  496,  496,  496,
    496,  496,  498,  498,  498,  498,  498,  499,  499,  499,

    499,  500,  500,  500,  500,  500,  298,  298,  298,  298,
    298,  297,  853,  298,  298,  289,  290,  291,  292,  293,
    293,  294,  295,  296,  298,  298,  298,  505,  505,  505,
    509,  509,  509,  509,  298,  853,  298,  506,  506,  506,
    506,  506,  512,  512,  512,  853,  298,  504,  508,  508,
    508,  508,  508,  510,  510,  510,  510,  510,  308,  308,
    308,  308,  308,  513,  513,  513,  513,  513,  516,  516,
    516,  516,  309,  310,  311,  312,  313,  313,  314,  315,
    316,  515,  515,  515,  515,  515,  517,  517,  517,  517,
    517,  298,  298,  298,  298,  298,  298,  298,  298,  853,

    298,  298,  298,  853,  298,  519,  298,  853,  298,  298,
    298,  298,  298,  853,  298,  853,  298,  520,  521,  853,
    298,  298,  298,  298,  620,  620,  522,  298,  298,  853,
    298,  627,  627,  298,  298,  298,  524,  853,  298,  298,
    298,  853,  523,  298,  853,  298,  208,  853,  298,  853,
    298,  298,  298,  525,  853,  298,  526,  298,  298,  209,
    298,  853,  298,  298,  298,  209,  527,  853,  298,  298,
    298,  853,  298,  853,  298,  528,  298,  298,  298,  853,
    298,  298,  298,  853,  298,  298,  298,  298,  853,  529,
    530,  531,  298,  853,  532,  533,  298,  298,  298,  298,

    298,  298,  298,  298,  298,  853,  298,  711,  711,  298,
    853,  298,  853,  535,  298,  551,  551,  551,  853,  298,
    853,  298,  534,  853,  298,  336,  336,  336,  336,  336,
    336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
    336,  336,  336,  336,  336,  336,  336,  336,  336,  536,
    537,  537,  537,  537,  537,  538,  538,  538,  538,  538,
    539,  539,  539,  539,  539,  542,  543,  853,  369,  206,
    207,  853,  211,  211,  211,  211,  853,  370,  853,  358,
    371,  853,  372,  211,  853,  211,  373,  546,  547,  548,
    382,  382,  853,  211,  853,  211,  382,  382,  558,  558,

    558,  382,  377,  549,  618,  618,  618,  382,  625,  625,
    625,  382,  382,  382,  382,  382,  382,  382,  550,  552,
    552,  552,  552,  552,  554,  554,  554,  554,  554,  555,
    555,  555,  555,  556,  556,  556,  556,  556,  393,  394,
    395,  396,  397,  397,  398,  399,  400,  392,  392,  392,
    392,  392,  559,  559,  559,  559,  559,  561,  561,  561,
    561,  561,  562,  562,  562,  562,  563,  563,  563,  563,
    563,  382,  382,  382,  382,  382,  382,  382,  382,  853,
    382,  382,  382,  853,  382,  565,  382,  853,  382,  382,
    382,  382,  382,  853,  382,  853,  382,  566,  567,  853,

    382,  382,  382,  382,  743,  743,  568,  382,  382,  853,
    382,  853,  853,  382,  382,  382,  570,  853,  382,  382,
    382,  853,  569,  382,  853,  382,  791,  502,  382,  853,
    382,  382,  382,  571,  853,  382,  572,  382,  382,  853,
    382,  853,  382,  382,  382,  853,  573,  607,  382,  382,
    382,  853,  382,  853,  382,  574,  382,  382,  382,  853,
    382,  382,  382,  853,  382,  382,  382,  382,  853,  575,
    576,  577,  382,  853,  578,  579,  382,  382,  382,  382,
    382,  382,  382,  382,  382,  853,  382,  853,  853,  382,
    853,  382,  853,  581,  382,  622,  622,  622,  622,  382,

    853,  382,  580,  853,  382,  420,  420,  420,  420,  420,
    420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
    420,  420,  420,  420,  420,  582,  582,  582,  582,  582,
    583,  583,  583,  583,  583,  584,  584,  584,  584,  584,
    211,  211,  211,  211,  211,  211,  211,  629,  629,  629,
    629,  211,  211,  211,  211,  211,  211,  585,  709,  709,
    709,  211,  211,  211,  211,  211,  211,  211,  211,  211,
    211,  211,  586,  586,  586,  586,  586,  587,  587,  587,
    587,  587,  588,  588,  588,  588,  588,  221,  221,  221,
    221,  221,  221,  221,  221,  221,  221,  221,  221,  221,

    221,  221,  221,  221,  221,  221,  221,  589,  589,  589,
    589,  589,  590,  590,  590,  590,  590,  591,  591,  591,
    591,  591,  450,  211,  211,  211,  211,  211,  211,  592,
    247,  248,  211,  211,  211,  593,  211,  853,  211,  853,
    594,  247,  248,  211,  211,  853,  211,  853,  595,  211,
    211,  211,  211,  211,  211,  211,  211,  211,  853,  596,
    211,  853,  597,  853,  598,  211,  853,  211,  211,  211,
    211,  853,  211,  211,  211,  211,  853,  211,  600,  211,
    211,  211,  599,  853,  211,  211,  211,  211,  211,  211,
    853,  211,  211,  211,  211,  853,  211,  603,  211,  211,

    211,  211,  601,  211,  211,  211,  211,  602,  211,  853,
    211,  211,  211,  604,  853,  211,  605,  741,  741,  741,
    211,  853,  211,  853,  853,  211,  606,  617,  617,  617,
    617,  617,  211,  607,  607,  853,  607,  607,  608,  608,
    607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
    607,  608,  607,  607,  607,  607,  607,  608,  607,  608,
    608,  608,  608,  607,  607,  607,  607,  608,  608,  608,
    608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
    608,  608,  608,  608,  608,  608,  607,  607,  607,  607,
    607,  607,  607,  607,  607,  609,  610,  611,  612,  613,

    613,  614,  615,  616,  617,  617,  617,  617,  617,  617,
    617,  617,  617,  617,  297,  477,  477,  477,  477,  477,
    619,  619,  619,  619,  619,  621,  621,  621,  621,  621,
    623,  623,  623,  623,  623,  297,  486,  486,  486,  486,
    486,  626,  626,  626,  626,  626,  628,  628,  628,  628,
    628,  630,  630,  630,  630,  630,  287,  287,  287,  287,
    287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
    287,  713,  713,  713,  713,  478,  479,  480,  481,  482,
    482,  483,  484,  485,  287,  287,  287,  287,  287,  632,
    632,  632,  632,  632,  853,  853,  487,  488,  489,  490,

    491,  491,  492,  493,  494,  633,  633,  633,  633,  633,
    634,  634,  634,  634,  634,  635,  853,  298,  298,  298,
    298,  298,  298,  298,  502,  853,  853,  853,  298,  298,
    298,  298,  298,  298,  636,  502,  853,  502,  298,  298,
    298,  298,  298,  298,  298,  298,  298,  298,  298,  637,
    637,  637,  637,  637,  638,  638,  638,  638,  638,  639,
    639,  639,  639,  639,  308,  308,  308,  308,  308,  308,
    308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
    308,  308,  308,  308,  640,  640,  640,  640,  640,  641,
    641,  641,  641,  641,  642,  642,  642,  642,  642,  298,

    298,  298,  298,  853,  853,  643,  298,  298,  298,  298,
    298,  644,  298,  853,  645,  298,  298,  298,  853,  298,
    298,  853,  298,  298,  298,  647,  298,  298,  853,  646,
    298,  298,  298,  298,  648,  853,  298,  298,  298,  853,
    649,  298,  853,  298,  298,  853,  650,  853,  298,  298,
    298,  298,  853,  298,  298,  298,  298,  298,  298,  651,
    298,  298,  298,  298,  298,  298,  853,  298,  298,  298,
    298,  654,  298,  853,  298,  298,  652,  298,  653,  298,
    298,  298,  298,  853,  655,  656,  853,  298,  298,  298,
    853,  298,  668,  668,  668,  668,  668,  853,  298,  853,

    853,  298,  657,  668,  668,  668,  668,  668,  298,  607,
    658,  853,  607,  607,  659,  659,  607,  607,  607,  607,
    607,  607,  607,  607,  607,  607,  607,  659,  607,  607,
    607,  607,  607,  659,  607,  659,  659,  659,  659,  607,
    607,  607,  607,  659,  659,  659,  659,  659,  659,  659,
    659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
    659,  659,  607,  607,  607,  607,  607,  607,  607,  607,
    607,  660,  661,  662,  663,  664,  664,  665,  666,  667,
    668,  668,  668,  668,  668,  546,  547,  548,  382,  382,
    382,  382,  382,  382,  382,  745,  745,  745,  745,  382,

    853,  549,  853,  853,  853,  670,  853,  853,  853,  382,
    382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
    382,  382,  382,  382,  382,  671,  671,  671,  671,  671,
    672,  672,  672,  672,  672,  673,  673,  673,  673,  673,
    392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
    392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
    674,  674,  674,  674,  674,  675,  675,  675,  675,  675,
    676,  676,  676,  676,  676,  382,  382,  382,  382,  853,
    853,  677,  382,  382,  382,  382,  382,  678,  382,  853,
    679,  382,  382,  382,  853,  382,  382,  853,  382,  382,

    382,  681,  382,  382,  853,  680,  382,  382,  382,  382,
    682,  853,  382,  382,  382,  853,  683,  382,  853,  382,
    382,  853,  684,  853,  382,  382,  382,  382,  853,  382,
    382,  382,  382,  382,  382,  685,  382,  382,  382,  382,
    382,  382,  853,  382,  382,  382,  382,  688,  382,  853,
    382,  382,  686,  382,  687,  382,  382,  382,  382,  853,
    689,  690,  853,  382,  382,  382,  853,  382,  692,  692,
    692,  692,  692,  853,  382,  853,  853,  382,  691,  692,
    692,  692,  692,  692,  382,  692,  692,  692,  692,  692,
    211,  211,  694,  694,  694,  694,  694,  853,  693,  853,

    853,  211,  694,  694,  694,  694,  694,  853,  853,  853,
    853,  211,  694,  694,  694,  694,  694,  695,  695,  695,
    695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
    695,  695,  211,  211,  211,  211,  211,  211,  211,  211,
    853,  211,  211,  211,  853,  211,  696,  211,  697,  211,
    853,  698,  211,  211,  699,  211,  853,  211,  635,  211,
    211,  211,  211,  211,  211,  211,  211,  502,  211,  211,
    853,  211,  211,  211,  211,  702,  211,  853,  502,  211,
    502,  211,  700,  211,  701,  853,  211,  703,  704,  211,
    211,  211,  853,  211,  211,  211,  211,  211,  853,  211,

    211,  211,  706,  853,  707,  211,  853,  211,  853,  705,
    211,  211,  211,  211,  853,  211,  853,  211,  853,  853,
    211,  853,  708,  211,  608,  608,  608,  608,  608,  853,
    853,  853,  853,  211,  710,  710,  710,  710,  710,  712,
    712,  712,  712,  712,  714,  714,  714,  714,  714,  211,
    211,  477,  477,  477,  477,  477,  853,  853,  853,  853,
    211,  477,  477,  477,  477,  477,  853,  853,  853,  853,
    211,  477,  477,  477,  477,  477,  477,  477,  477,  477,
    477,  716,  716,  716,  716,  716,  717,  717,  717,  717,
    717,  718,  718,  718,  718,  718,  486,  486,  486,  486,

    486,  486,  486,  486,  486,  486,  486,  486,  486,  486,
    486,  486,  486,  486,  486,  486,  719,  719,  719,  719,
    719,  720,  720,  720,  720,  720,  721,  721,  721,  721,
    721,  722,  722,  722,  722,  722,  722,  722,  722,  722,
    722,  722,  722,  722,  722,  722,  298,  298,  724,  724,
    724,  724,  724,  853,  723,  853,  853,  298,  724,  724,
    724,  724,  724,  853,  853,  853,  853,  298,  724,  724,
    724,  724,  724,  725,  725,  725,  725,  725,  725,  725,
    725,  725,  725,  725,  725,  725,  725,  725,  298,  298,
    298,  298,  298,  298,  298,  298,  853,  298,  298,  298,

    853,  298,  726,  298,  727,  298,  853,  728,  298,  298,
    729,  298,  853,  298,  853,  298,  298,  298,  298,  298,
    298,  298,  298,  853,  298,  298,  853,  298,  298,  298,
    298,  732,  298,  791,  502,  298,  853,  298,  730,  298,
    731,  853,  298,  733,  734,  298,  298,  298,  853,  298,
    298,  298,  298,  298,  607,  298,  298,  298,  736,  853,
    737,  298,  853,  298,  853,  735,  298,  298,  298,  298,
    853,  298,  853,  298,  658,  502,  298,  853,  738,  298,
    853,  853,  853,  607,  659,  659,  659,  659,  659,  298,
    853,  853,  853,  853,  607,  607,  607,  853,  740,  742,

    742,  742,  742,  742,  744,  744,  744,  744,  744,  746,
    746,  746,  746,  746,  298,  298,  382,  382,  749,  749,
    749,  749,  749,  853,  748,  298,  853,  382,  853,  740,
    749,  749,  749,  749,  749,  298,  853,  382,  749,  749,
    749,  749,  749,  750,  750,  750,  750,  750,  750,  750,
    750,  750,  750,  750,  750,  750,  750,  750,  382,  382,
    382,  382,  382,  382,  382,  382,  853,  382,  382,  382,
    853,  382,  751,  382,  752,  382,  853,  753,  382,  382,
    754,  382,  853,  382,  853,  382,  382,  382,  382,  382,
    382,  382,  382,  853,  382,  382,  853,  382,  382,  382,

    382,  757,  382,  853,  853,  382,  853,  382,  755,  382,
    756,  853,  382,  758,  759,  382,  382,  382,  853,  382,
    382,  382,  382,  382,  853,  382,  382,  382,  761,  853,
    762,  382,  853,  382,  853,  760,  382,  382,  382,  382,
    853,  382,  853,  382,  382,  382,  382,  853,  763,  382,
    211,  211,  211,  211,  853,  382,  211,  211,  853,  382,
    853,  211,  853,  211,  853,  382,  853,  211,  211,  211,
    853,  764,  853,  211,  211,  211,  853,  211,  853,  211,
    853,  211,  211,  211,  211,  211,  211,  211,  853,  211,
    853,  765,  766,  853,  211,  211,  853,  211,  853,  768,

    767,  853,  211,  853,  211,  211,  211,  211,  211,  211,
    853,  853,  853,  211,  211,  853,  211,  853,  853,  211,
    853,  853,  769,  771,  211,  853,  211,  211,  211,  211,
    853,  770,  211,  211,  211,  211,  211,  853,  211,  211,
    211,  853,  853,  211,  772,  853,  211,  774,  211,  853,
    211,  853,  853,  773,  853,  853,  211,  853,  853,  853,
    211,  608,  608,  608,  608,  608,  608,  608,  608,  608,
    608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
    608,  775,  775,  775,  775,  775,  776,  776,  776,  776,
    776,  777,  777,  777,  777,  777,  778,  778,  778,  778,

    778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
    778,  779,  779,  779,  779,  779,  779,  779,  779,  779,
    779,  779,  779,  779,  779,  779,  298,  298,  298,  298,
    298,  298,  298,  298,  853,  298,  298,  298,  853,  298,
    853,  298,  853,  298,  298,  298,  298,  780,  853,  298,
    853,  298,  781,  298,  853,  782,  298,  298,  298,  298,
    298,  853,  298,  298,  853,  298,  298,  298,  298,  853,
    298,  853,  784,  298,  783,  298,  298,  298,  298,  785,
    298,  298,  298,  298,  853,  787,  298,  298,  853,  786,
    298,  298,  298,  298,  298,  853,  298,  853,  788,  298,

    298,  298,  298,  853,  298,  790,  853,  853,  853,  853,
    298,  789,  853,  853,  298,  659,  659,  659,  659,  659,
    298,  659,  659,  659,  659,  659,  659,  659,  659,  659,
    659,  659,  659,  659,  659,  659,  792,  792,  792,  792,
    792,  793,  793,  793,  793,  793,  794,  794,  794,  794,
    794,  382,  382,  382,  382,  382,  382,  382,  382,  853,
    382,  382,  382,  853,  382,  853,  382,  853,  382,  382,
    382,  382,  795,  853,  382,  853,  382,  796,  382,  853,
    797,  382,  382,  382,  382,  382,  853,  382,  382,  853,
    382,  382,  382,  382,  853,  382,  853,  799,  382,  798,

    382,  382,  382,  382,  800,  382,  382,  382,  382,  853,
    802,  382,  382,  853,  801,  382,  382,  382,  382,  382,
    853,  382,  853,  803,  382,  382,  382,  382,  853,  382,
    805,  211,  211,  853,  853,  382,  804,  211,  211,  382,
    211,  211,  211,  853,  806,  382,  211,  211,  211,  211,
    211,  211,  211,  853,  808,  211,  211,  211,  211,  807,
    211,  211,  853,  853,  211,  211,  211,  211,  211,  211,
    211,  211,  211,  809,  853,  211,  211,  810,  853,  211,
    211,  211,  211,  211,  211,  211,  853,  853,  853,  211,
    853,  211,  211,  853,  211,  811,  811,  811,  811,  811,

    853,  211,  853,  853,  211,  811,  811,  811,  811,  811,
    811,  811,  811,  811,  811,  298,  298,  853,  298,  298,
    298,  298,  298,  298,  298,  298,  298,  853,  812,  298,
    814,  298,  853,  298,  853,  298,  298,  298,  298,  298,
    813,  298,  815,  298,  853,  298,  298,  298,  298,  298,
    298,  298,  298,  298,  298,  298,  298,  298,  298,  816,
    298,  853,  298,  853,  298,  853,  298,  298,  853,  853,
    298,  853,  298,  853,  298,  853,  298,  817,  817,  817,
    817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
    817,  817,  382,  382,  853,  382,  382,  382,  382,  382,

    382,  382,  382,  382,  853,  818,  382,  820,  382,  853,
    382,  853,  382,  382,  382,  382,  382,  819,  382,  821,
    382,  853,  382,  382,  382,  382,  382,  382,  382,  382,
    382,  382,  382,  382,  382,  382,  822,  382,  853,  382,
    853,  382,  853,  382,  382,  211,  211,  382,  853,  382,
    853,  382,  853,  382,  211,  211,  211,  211,  211,  211,
    211,  211,  211,  823,  824,  211,  211,  853,  211,  853,
    211,  853,  211,  298,  298,  211,  826,  853,  825,  853,
    211,  827,  211,  853,  298,  298,  298,  298,  298,  853,
    853,  828,  298,  298,  298,  829,  298,  853,  298,  298,

    298,  853,  853,  298,  382,  382,  298,  853,  830,  831,
    298,  853,  853,  298,  853,  382,  382,  382,  853,  832,
    298,  853,  833,  382,  382,  382,  834,  382,  382,  382,
    382,  382,  211,  211,  382,  211,  211,  382,  853,  382,
    853,  382,  853,  211,  835,  836,  211,  211,  211,  382,
    837,  382,  838,  211,  211,  211,  211,  853,  211,  853,
    839,  211,  211,  298,  298,  211,  298,  298,  211,  853,
    853,  840,  211,  853,  298,  211,  853,  298,  298,  298,
    841,  853,  211,  853,  298,  298,  298,  298,  853,  298,
    853,  842,  298,  298,  382,  382,  298,  382,  382,  298,

    853,  853,  843,  298,  853,  382,  298,  853,  382,  382,
    382,  844,  853,  298,  853,  382,  382,  382,  382,  853,
    382,  853,  845,  382,  382,  211,  211,  382,  853,  853,
    382,  211,  211,  846,  382,  853,  211,  382,  853,  211,
    211,  853,  211,  853,  382,  853,  211,  298,  298,  847,
    211,  853,  211,  298,  298,  298,  298,  853,  298,  853,
    211,  382,  382,  853,  298,  853,  298,  853,  298,  382,
    382,  848,  382,  853,  298,  853,  298,  382,  382,  853,
    382,  853,  382,  211,  211,  298,  298,  849,  382,  853,
    382,  853,  382,  382,  211,  853,  298,  853,  382,  853,

    850,  853,  851,  382,  211,  853,  298,  211,  211,  852,
    298,  298,  853,  382,  382,  382,  853,  853,  211,  853,
    853,  298,  853,  853,  853,  382,  853,  853,  211,  853,
    853,  298,  853,  853,  853,  382,  101,  101,  101,  101,
    101,  101,  101,  101,  101,  101,  101,  101,  107,  107,
    107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
    113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
    113,  113,  118,  118,  118,  118,  118,  118,  118,  118,
    118,  118,  118,  118,  121,  121,  121,  121,  121,  121,
    121,  121,  121,  121,  121,  121,  167,  167,  167,  167,

    167,  167,  167,  167,  167,  167,  167,  167,  211,  853,
    853,  853,  853,  853,  211,  221,  853,  853,  853,  853,
    853,  221,  287,  287,  287,  853,  287,  287,  298,  853,
    853,  853,  298,  853,  853,  853,  853,  853,  298,  308,
    853,  853,  853,  853,  853,  308,  345,  345,  853,  853,
    853,  345,  345,  345,  345,  345,  853,  345,  352,  352,
    853,  853,  853,  352,  352,  352,  352,  352,  853,  352,
    359,  359,  853,  853,  359,  359,  359,  359,  853,  359,
    359,  359,  363,  363,  853,  853,  363,  363,  363,  363,
    363,  363,  363,  363,  379,  853,  853,  853,  853,  379,

    379,  379,  379,  853,  379,  379,  382,  853,  853,  853,
    853,  853,  382,  392,  853,  853,  853,  853,  853,  392,
    445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
    445,  449,  449,  449,  449,  449,  449,  449,  449,  449,
    449,  449,  455,  455,  455,  455,  455,  455,  455,  455,
    455,  455,  455,  477,  853,  853,  853,  477,  853,  853,
    853,  853,  853,  477,  486,  853,  853,  853,  853,  853,
    486,  502,  502,  502,  502,  502,  502,  502,  853,  502,
    502,  502,  502,  607,  607,  853,  607,  607,  607,  607,
    607,  607,  607,  607,  607,  739,  739,  739,  739,  739,

    739,  739,  739,  739,  739,  739,  739,   19,  853,  853,
    853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
    853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
    853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
    853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
    853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
    853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
    853,  853,  853,  853,  853,  853,  853,  853,  853
} ;

static yyconst flex_int16_t yy_chk[4480] =
{
    0,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    3,    3,    3,    4,    4,    4,  667,    3,
    9,    9,    4,    5,    5,    5,    3,   10,   10,    4,
    5,    6,    6,    6,    7,    7,  616,    5,    6,   32,
    8,    8,  549,   32,    7,    6,   11,   11,   11,    7,
    8,   12,   12,   12,  548,    8,   21,   21,   21,   37,
    69,   69,   11,   37,   37,   95,   95,   12,   13,   13,

    13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
    13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
    13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
    13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
    13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
    13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
    13,   13,   13,   13,   13,   13,   13,   13,   13,   15,
    15,   15,   15,   22,   42,  545,   41,   15,   15,   43,
    25,  138,   15,   23,   23,  138,   22,  544,   15,   15,
    15,   15,   22,   15,  104,   42,   23,   41,   41,  104,

    43,   45,   23,   25,   25,   25,   25,   25,   25,   25,
    25,   25,   26,   26,   26,   26,   26,   26,   26,   26,
    26,  543,   45,  541,   15,   16,   16,   16,   16,   67,
    67,   67,   36,   16,   16,   36,   65,  494,   16,   36,
    36,   36,   44,   44,   16,   16,   16,   16,   38,   16,
    38,   53,   53,   44,   36,  105,   36,   65,   38,   38,
    105,  485,   53,   44,  162,  162,   53,  236,   53,   38,
    38,  236,   53,   66,   66,   66,   66,   66,  200,  200,
    16,   17,   17,   17,   17,   17,   17,   17,   17,   17,
    17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

    17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
    17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
    17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
    17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
    17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
    17,   17,   27,   27,  454,   50,   50,   52,   52,   51,
    51,   54,   54,   27,  110,   51,   50,  453,   52,  110,
    51,  452,   54,   27,   50,   52,   50,   51,   52,   54,
    51,  451,   54,   54,   55,   55,   27,   27,   27,   27,
    27,   27,   27,   27,   27,   55,  429,   55,   56,   56,

    57,   57,   58,   58,  400,   55,   59,   59,  391,   56,
    380,   57,   58,   58,   60,   60,   59,   59,  378,   56,
    373,   57,  372,   58,  371,   60,   60,   59,  365,   59,
    61,   61,  316,   60,  307,   60,   68,   68,   68,   68,
    68,   61,   61,   70,   70,   70,   70,   70,   93,   93,
    93,   61,   71,   71,   71,   71,   71,   72,   72,   72,
    72,   73,   73,   73,   73,   73,   75,   75,   75,  148,
    296,   75,   77,   77,   77,   77,   77,   77,   77,   77,
    77,   79,   79,  240,   80,   80,   82,   82,   81,   81,
    148,  111,   79,  125,   81,   80,  111,   82,  125,   81,

    83,   83,   79,   80,   82,   80,   81,   82,  143,   81,
    238,   83,  143,  143,  237,   83,  229,   83,  216,  216,
    149,   83,   92,   92,   92,   92,   92,   75,   75,   75,
    75,   75,   75,   75,   75,   75,   76,   84,   84,   85,
    85,  149,   86,   86,  220,   87,   87,  207,   84,  150,
    85,  204,   85,   86,  170,   84,   87,  168,   84,   84,
    85,   88,   88,   86,   90,   90,   87,   89,   89,  166,
    150,   88,   88,  156,   76,   90,   90,   89,   89,  160,
    160,  160,   88,   90,  152,   90,  225,  225,   89,  145,
    89,   94,   94,   94,   94,   94,  134,   76,   76,   76,

    76,   76,   76,   76,   76,   76,   78,   91,   91,   96,
    96,   96,   96,   96,   98,   98,   98,   98,   91,   91,
    97,   97,   97,   97,   97,  292,  292,  128,   91,  124,
    147,  303,  303,   78,   78,   99,   99,   99,   99,   99,
    128,  127,  127,  127,   78,  122,  128,  129,  129,  120,
    127,  147,  147,  127,   78,  127,  198,  198,  198,  127,
    129,  159,  159,  159,  159,  159,  129,   78,   78,   78,
    78,   78,   78,   78,   78,   78,  131,  131,  132,  132,
    132,  132,  132,  132,  132,  132,  132,  131,  133,  133,
    158,  210,  117,  142,  116,  252,  142,  131,  115,  133,

    142,  142,  142,  144,  210,  144,  205,  205,  205,  133,
    210,  158,  112,  144,  144,  142,  252,  142,  161,  161,
    161,  161,  161,  181,  144,  144,  163,  163,  163,  163,
    163,  164,  164,  164,  164,  165,  165,  165,  165,  165,
    197,  197,  197,  197,  197,  109,  181,  181,  181,  181,
    181,  181,  181,  181,  181,  182,  182,  182,  182,  182,
    182,  182,  182,  182,  183,  183,  184,  184,  106,  185,
    185,  187,  187,  186,  186,  183,  247,  184,  247,  186,
    185,  247,  187,  103,  186,  183,  100,  184,  185,  187,
    185,  186,  187,   74,  186,  254,  188,  188,  183,  183,

    183,  183,  183,  183,  183,  183,  183,  188,  189,  189,
    63,  188,   47,  188,  190,  190,  254,  188,   28,  189,
    191,  191,  192,  192,   19,  190,  189,  190,    0,  189,
    189,  191,    0,  192,    0,  190,  193,  193,  194,  194,
    297,  191,    0,  192,  195,  195,  193,  193,  194,  194,
    199,  199,  199,  199,  199,  195,  195,  193,    0,  194,
    0,  194,    0,  195,  297,  195,  196,  196,  201,  201,
    201,  201,  201,  202,  202,  202,  202,  196,  196,  203,
    203,  203,  203,  203,  208,  208,  208,  196,  209,  209,
    209,  211,  211,  212,  212,  297,    0,  208,  214,  214,

    214,  209,  211,  208,  212,  312,  312,  209,  218,  218,
    218,  218,  211,    0,  212,  212,  213,  213,  213,  213,
    213,  215,  215,  215,  215,  215,  217,  217,  217,  217,
    217,  219,  219,  219,  219,  219,  222,  222,  222,  222,
    222,  223,  223,  223,  224,  224,  224,  224,  224,  226,
    226,  226,  226,  226,  227,  227,  227,  227,  228,  228,
    228,  228,  228,  230,  230,  231,  231,    0,  248,  239,
    248,  245,    0,  248,  230,  249,  231,  239,  239,  245,
    245,  256,  276,  246,  230,  246,  231,    0,  239,  239,
    245,  245,    0,  246,  246,    0,  249,  249,  258,  258,

    259,  259,  256,  276,  246,  246,  260,  260,  258,  258,
    0,  259,    0,  261,  261,  262,  262,  260,    0,  258,
    259,  259,    0,  260,  261,    0,  262,  260,  263,  263,
    0,  264,  264,    0,  261,  262,  262,  263,    0,  263,
    265,  265,  264,    0,  266,  266,    0,  267,  267,  263,
    264,  265,  264,  266,    0,  266,    0,  265,  267,  268,
    268,  265,  269,  269,    0,  266,  270,  270,  267,    0,
    268,  268,    0,  269,    0,  271,  271,  270,  273,  273,
    268,  270,  269,  269,  272,  272,  271,  270,  271,  273,
    274,  274,  351,  351,  272,  272,  271,  277,  277,  273,

    287,  274,  273,  274,    0,  272,  351,    0,  277,  387,
    387,  274,  278,  278,  278,  278,  278,    0,  277,  279,
    279,  279,  279,  279,  280,  280,  280,  280,  280,  281,
    281,  281,  281,  281,  282,  282,  282,  282,  282,  283,
    283,  283,  283,  283,  284,  284,  284,  284,  284,  285,
    285,  285,  285,  285,  286,  286,  286,  396,  396,  286,
    0,  287,  287,  287,  287,  287,  287,  287,  287,  287,
    288,  288,  288,  288,  288,  288,  288,  288,  288,  289,
    289,  289,  289,  289,  290,  290,  290,  291,  291,  291,
    291,  291,  293,  293,  293,  293,  293,  294,  294,  294,

    294,  295,  295,  295,  295,  295,  300,  300,  300,  300,
    300,  308,    0,  298,  298,  286,  286,  286,  286,  286,
    286,  286,  286,  286,  298,  299,  299,  301,  301,  301,
    305,  305,  305,  305,  298,    0,  299,  302,  302,  302,
    302,  302,  310,  310,  310,    0,  299,  299,  304,  304,
    304,  304,  304,  306,  306,  306,  306,  306,  309,  309,
    309,  309,  309,  311,  311,  311,  311,  311,  314,  314,
    314,  314,  308,  308,  308,  308,  308,  308,  308,  308,
    308,  313,  313,  313,  313,  313,  315,  315,  315,  315,
    315,  317,  317,  318,  318,  319,  319,  320,  320,    0,

    322,  322,  317,    0,  318,  319,  319,    0,  320,  321,
    321,  322,  317,    0,  318,    0,  319,  320,  320,    0,
    321,  322,  323,  323,  481,  481,  321,  324,  324,    0,
    321,  490,  490,  323,  325,  325,  324,    0,  324,  326,
    326,    0,  323,  323,    0,  325,  374,    0,  324,    0,
    326,  328,  328,  325,    0,  325,  326,  327,  327,  374,
    326,    0,  328,  329,  329,  374,  327,    0,  327,  330,
    330,    0,  328,    0,  329,  329,  331,  331,  327,    0,
    330,  332,  332,    0,  329,  333,  333,  331,    0,  330,
    330,  331,  332,    0,  332,  333,  333,  331,  334,  334,

    335,  335,  332,  336,  336,    0,  333,  612,  612,  334,
    0,  335,    0,  335,  336,  385,  385,  385,    0,  334,
    0,  335,  334,    0,  336,  337,  337,  337,  337,  337,
    338,  338,  338,  338,  338,  339,  339,  339,  339,  339,
    340,  340,  340,  340,  340,  341,  341,  341,  341,  341,
    342,  342,  342,  342,  342,  343,  343,  343,  343,  343,
    344,  344,  344,  344,  344,  358,  358,    0,  369,  369,
    369,    0,  375,  375,  376,  376,    0,  369,    0,  358,
    369,    0,  369,  375,    0,  376,  369,  377,  377,  377,
    382,  382,    0,  375,    0,  376,  383,  383,  394,  394,

    394,  382,  377,  377,  479,  479,  479,  383,  488,  488,
    488,  382,  384,  384,  384,  384,  384,  383,  383,  386,
    386,  386,  386,  386,  388,  388,  388,  388,  388,  389,
    389,  389,  389,  390,  390,  390,  390,  390,  392,  392,
    392,  392,  392,  392,  392,  392,  392,  393,  393,  393,
    393,  393,  395,  395,  395,  395,  395,  397,  397,  397,
    397,  397,  398,  398,  398,  398,  399,  399,  399,  399,
    399,  401,  401,  402,  402,  403,  403,  404,  404,    0,
    406,  406,  401,    0,  402,  403,  403,    0,  404,  405,
    405,  406,  401,    0,  402,    0,  403,  404,  404,    0,

    405,  406,  407,  407,  663,  663,  405,  408,  408,    0,
    405,    0,    0,  407,  409,  409,  408,    0,  408,  410,
    410,    0,  407,  407,    0,  409,  740,  740,  408,    0,
    410,  412,  412,  409,    0,  409,  410,  411,  411,    0,
    410,    0,  412,  413,  413,    0,  411,  740,  411,  414,
    414,    0,  412,    0,  413,  413,  415,  415,  411,    0,
    414,  416,  416,    0,  413,  417,  417,  415,    0,  414,
    414,  415,  416,    0,  416,  417,  417,  415,  418,  418,
    419,  419,  416,  420,  420,    0,  417,    0,    0,  418,
    0,  419,    0,  419,  420,  483,  483,  483,  483,  418,

    0,  419,  418,    0,  420,  421,  421,  421,  421,  421,
    422,  422,  422,  422,  422,  423,  423,  423,  423,  423,
    424,  424,  424,  424,  424,  425,  425,  425,  425,  425,
    426,  426,  426,  426,  426,  427,  427,  427,  427,  427,
    430,  430,  431,  431,  431,  431,  431,  492,  492,  492,
    492,  430,  432,  432,  432,  432,  432,  430,  610,  610,
    610,  430,  433,  433,  433,  433,  433,  434,  434,  434,
    434,  434,  435,  435,  435,  435,  435,  436,  436,  436,
    436,  436,  437,  437,  437,  437,  437,  438,  438,  438,
    438,  438,  439,  439,  439,  439,  439,  440,  440,  440,

    440,  440,  441,  441,  441,  441,  441,  442,  442,  442,
    442,  442,  443,  443,  443,  443,  443,  444,  444,  444,
    444,  444,  450,  456,  456,  457,  457,  459,  459,  456,
    450,  450,  458,  458,  456,  457,  457,    0,  459,    0,
    458,  450,  450,  458,  456,    0,  457,    0,  459,  460,
    460,  461,  461,  458,  462,  462,  463,  463,    0,  460,
    460,    0,  461,    0,  463,  462,    0,  463,  465,  465,
    460,    0,  461,  464,  464,  462,    0,  463,  465,  465,
    466,  466,  464,    0,  464,  467,  467,  468,  468,  465,
    0,  466,  469,  469,  464,    0,  467,  468,  468,  470,

    470,  466,  466,  469,  471,  471,  467,  467,  468,    0,
    470,  472,  472,  469,    0,  471,  470,  661,  661,  661,
    470,    0,  472,    0,    0,  471,  472,  474,  474,  474,
    474,  474,  472,  473,  473,    0,  473,  473,  473,  473,
    473,  473,  473,  473,  473,  473,  473,  473,  473,  473,
    473,  473,  473,  473,  473,  473,  473,  473,  473,  473,
    473,  473,  473,  473,  473,  473,  473,  473,  473,  473,
    473,  473,  473,  473,  473,  473,  473,  473,  473,  473,
    473,  473,  473,  473,  473,  473,  473,  473,  473,  473,
    473,  473,  473,  473,  473,  473,  473,  473,  473,  473,

    473,  473,  473,  473,  475,  475,  475,  475,  475,  476,
    476,  476,  476,  476,  477,  478,  478,  478,  478,  478,
    480,  480,  480,  480,  480,  482,  482,  482,  482,  482,
    484,  484,  484,  484,  484,  486,  487,  487,  487,  487,
    487,  489,  489,  489,  489,  489,  491,  491,  491,  491,
    491,  493,  493,  493,  493,  493,  495,  495,  495,  495,
    495,  496,  496,  496,  496,  496,  497,  497,  497,  497,
    497,  614,  614,  614,  614,  477,  477,  477,  477,  477,
    477,  477,  477,  477,  498,  498,  498,  498,  498,  499,
    499,  499,  499,  499,    0,    0,  486,  486,  486,  486,

    486,  486,  486,  486,  486,  500,  500,  500,  500,  500,
    501,  501,  501,  501,  501,  503,    0,  504,  504,  505,
    505,  505,  505,  505,  503,    0,    0,    0,  504,  506,
    506,  506,  506,  506,  504,  503,    0,  503,  504,  507,
    507,  507,  507,  507,  508,  508,  508,  508,  508,  509,
    509,  509,  509,  509,  510,  510,  510,  510,  510,  511,
    511,  511,  511,  511,  512,  512,  512,  512,  512,  513,
    513,  513,  513,  513,  514,  514,  514,  514,  514,  515,
    515,  515,  515,  515,  516,  516,  516,  516,  516,  517,
    517,  517,  517,  517,  518,  518,  518,  518,  518,  519,

    519,  520,  520,    0,    0,  519,  521,  521,  522,  522,
    519,  520,  520,    0,  521,  523,  523,  521,    0,  522,
    519,    0,  520,  524,  524,  523,  523,  521,    0,  522,
    525,  525,  526,  526,  524,    0,  523,  527,  527,    0,
    526,  525,    0,  526,  524,    0,  527,    0,  527,  528,
    528,  525,    0,  526,  529,  529,  530,  530,  527,  528,
    528,  531,  531,  532,  532,  529,    0,  530,  533,  533,
    528,  531,  531,    0,  532,  529,  529,  530,  530,  533,
    534,  534,  531,    0,  532,  533,    0,  535,  535,  533,
    0,  534,  537,  537,  537,  537,  537,    0,  535,    0,

    0,  534,  535,  538,  538,  538,  538,  538,  535,  536,
    536,    0,  536,  536,  536,  536,  536,  536,  536,  536,
    536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
    536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
    536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
    536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
    536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
    536,  536,  536,  536,  536,  536,  536,  536,  536,  536,
    539,  539,  539,  539,  539,  546,  546,  546,  550,  550,
    551,  551,  551,  551,  551,  665,  665,  665,  665,  550,

    0,  546,    0,    0,    0,  550,    0,    0,    0,  550,
    552,  552,  552,  552,  552,  553,  553,  553,  553,  553,
    554,  554,  554,  554,  554,  555,  555,  555,  555,  555,
    556,  556,  556,  556,  556,  557,  557,  557,  557,  557,
    558,  558,  558,  558,  558,  559,  559,  559,  559,  559,
    560,  560,  560,  560,  560,  561,  561,  561,  561,  561,
    562,  562,  562,  562,  562,  563,  563,  563,  563,  563,
    564,  564,  564,  564,  564,  565,  565,  566,  566,    0,
    0,  565,  567,  567,  568,  568,  565,  566,  566,    0,
    567,  569,  569,  567,    0,  568,  565,    0,  566,  570,

    570,  569,  569,  567,    0,  568,  571,  571,  572,  572,
    570,    0,  569,  573,  573,    0,  572,  571,    0,  572,
    570,    0,  573,    0,  573,  574,  574,  571,    0,  572,
    575,  575,  576,  576,  573,  574,  574,  577,  577,  578,
    578,  575,    0,  576,  579,  579,  574,  577,  577,    0,
    578,  575,  575,  576,  576,  579,  580,  580,  577,    0,
    578,  579,    0,  581,  581,  579,    0,  580,  582,  582,
    582,  582,  582,    0,  581,    0,    0,  580,  581,  583,
    583,  583,  583,  583,  581,  584,  584,  584,  584,  584,
    585,  585,  586,  586,  586,  586,  586,    0,  585,    0,

    0,  585,  587,  587,  587,  587,  587,    0,    0,    0,
    0,  585,  588,  588,  588,  588,  588,  589,  589,  589,
    589,  589,  590,  590,  590,  590,  590,  591,  591,  591,
    591,  591,  592,  592,  593,  593,  594,  594,  595,  595,
    0,  596,  596,  592,    0,  593,  592,  594,  594,  595,
    0,  595,  596,  592,  596,  593,    0,  594,  635,  595,
    597,  597,  596,  598,  598,  599,  599,  635,  600,  600,
    0,  597,  601,  601,  598,  599,  599,    0,  635,  600,
    635,  597,  597,  601,  598,    0,  599,  600,  601,  600,
    602,  602,    0,  601,  603,  603,  604,  604,    0,  605,

    605,  602,  603,    0,  604,  603,    0,  604,    0,  602,
    605,  602,  606,  606,    0,  603,    0,  604,    0,    0,
    605,    0,  606,  606,  609,  609,  609,  609,  609,    0,
    0,    0,    0,  606,  611,  611,  611,  611,  611,  613,
    613,  613,  613,  613,  615,  615,  615,  615,  615,  617,
    617,  618,  618,  618,  618,  618,    0,    0,    0,    0,
    617,  619,  619,  619,  619,  619,    0,    0,    0,    0,
    617,  620,  620,  620,  620,  620,  621,  621,  621,  621,
    621,  622,  622,  622,  622,  622,  623,  623,  623,  623,
    623,  624,  624,  624,  624,  624,  625,  625,  625,  625,

    625,  626,  626,  626,  626,  626,  627,  627,  627,  627,
    627,  628,  628,  628,  628,  628,  629,  629,  629,  629,
    629,  630,  630,  630,  630,  630,  631,  631,  631,  631,
    631,  632,  632,  632,  632,  632,  633,  633,  633,  633,
    633,  634,  634,  634,  634,  634,  636,  636,  637,  637,
    637,  637,  637,    0,  636,    0,    0,  636,  638,  638,
    638,  638,  638,    0,    0,    0,    0,  636,  639,  639,
    639,  639,  639,  640,  640,  640,  640,  640,  641,  641,
    641,  641,  641,  642,  642,  642,  642,  642,  643,  643,
    644,  644,  645,  645,  646,  646,    0,  647,  647,  643,

    0,  644,  643,  645,  645,  646,    0,  646,  647,  643,
    647,  644,    0,  645,    0,  646,  648,  648,  647,  649,
    649,  650,  650,    0,  651,  651,    0,  648,  652,  652,
    649,  650,  650,  791,  791,  651,    0,  648,  648,  652,
    649,    0,  650,  651,  652,  651,  653,  653,    0,  652,
    654,  654,  655,  655,  791,  656,  656,  653,  654,    0,
    655,  654,    0,  655,    0,  653,  656,  653,  657,  657,
    0,  654,    0,  655,  658,  658,  656,    0,  657,  657,
    0,    0,    0,  658,  660,  660,  660,  660,  660,  657,
    0,    0,    0,    0,  658,  658,  658,    0,  658,  662,

    662,  662,  662,  662,  664,  664,  664,  664,  664,  666,
    666,  666,  666,  666,  668,  668,  670,  670,  671,  671,
    671,  671,  671,    0,  670,  668,    0,  670,    0,  658,
    672,  672,  672,  672,  672,  668,    0,  670,  673,  673,
    673,  673,  673,  674,  674,  674,  674,  674,  675,  675,
    675,  675,  675,  676,  676,  676,  676,  676,  677,  677,
    678,  678,  679,  679,  680,  680,    0,  681,  681,  677,
    0,  678,  677,  679,  679,  680,    0,  680,  681,  677,
    681,  678,    0,  679,    0,  680,  682,  682,  681,  683,
    683,  684,  684,    0,  685,  685,    0,  682,  686,  686,

    683,  684,  684,    0,    0,  685,    0,  682,  682,  686,
    683,    0,  684,  685,  686,  685,  687,  687,    0,  686,
    688,  688,  689,  689,    0,  690,  690,  687,  688,    0,
    689,  688,    0,  689,    0,  687,  690,  687,  691,  691,
    0,  688,    0,  689,  692,  692,  690,    0,  691,  691,
    693,  693,  694,  694,    0,  692,  696,  696,    0,  691,
    0,  693,    0,  694,    0,  692,    0,  696,  697,  697,
    0,  693,    0,  694,  698,  698,    0,  696,    0,  697,
    0,  699,  699,  700,  700,  698,  701,  701,    0,  697,
    0,  698,  699,    0,  700,  698,    0,  701,    0,  701,

    700,    0,  699,    0,  700,  702,  702,  701,  703,  703,
    0,    0,    0,  704,  704,    0,  702,    0,    0,  703,
    0,    0,  702,  704,  704,    0,  702,  705,  705,  703,
    0,  703,  706,  706,  704,  707,  707,    0,  705,  708,
    708,    0,    0,  706,  705,    0,  707,  707,  705,    0,
    708,    0,    0,  706,    0,    0,  707,    0,    0,    0,
    708,  709,  709,  709,  709,  709,  710,  710,  710,  710,
    710,  711,  711,  711,  711,  711,  712,  712,  712,  712,
    712,  713,  713,  713,  713,  713,  714,  714,  714,  714,
    714,  715,  715,  715,  715,  715,  716,  716,  716,  716,

    716,  717,  717,  717,  717,  717,  718,  718,  718,  718,
    718,  719,  719,  719,  719,  719,  720,  720,  720,  720,
    720,  721,  721,  721,  721,  721,  723,  723,  724,  724,
    726,  726,  727,  727,    0,  728,  728,  723,    0,  724,
    0,  726,    0,  727,  729,  729,  728,  723,    0,  724,
    0,  726,  728,  727,    0,  729,  728,  730,  730,  731,
    731,    0,  732,  732,    0,  729,  733,  733,  730,    0,
    731,    0,  731,  732,  730,  734,  734,  733,  730,  732,
    731,  735,  735,  732,    0,  734,  734,  733,    0,  733,
    736,  736,  735,  737,  737,    0,  734,    0,  735,  738,

    738,  736,  735,    0,  737,  737,    0,    0,    0,    0,
    738,  736,    0,    0,  737,  741,  741,  741,  741,  741,
    738,  742,  742,  742,  742,  742,  743,  743,  743,  743,
    743,  744,  744,  744,  744,  744,  745,  745,  745,  745,
    745,  746,  746,  746,  746,  746,  747,  747,  747,  747,
    747,  748,  748,  749,  749,  751,  751,  752,  752,    0,
    753,  753,  748,    0,  749,    0,  751,    0,  752,  754,
    754,  753,  748,    0,  749,    0,  751,  753,  752,    0,
    754,  753,  755,  755,  756,  756,    0,  757,  757,    0,
    754,  758,  758,  755,    0,  756,    0,  756,  757,  755,

    759,  759,  758,  755,  757,  756,  760,  760,  757,    0,
    759,  759,  758,    0,  758,  761,  761,  760,  762,  762,
    0,  759,    0,  760,  763,  763,  761,  760,    0,  762,
    762,  764,  764,    0,    0,  763,  761,  765,  765,  762,
    766,  766,  764,    0,  764,  763,  767,  767,  765,  769,
    769,  766,  764,    0,  767,  768,  768,  767,  765,  765,
    769,  766,    0,    0,  770,  770,  768,  767,  771,  771,
    769,  772,  772,  768,    0,  770,  768,  770,    0,  771,
    773,  773,  772,  774,  774,  770,    0,    0,    0,  771,
    0,  773,  772,    0,  774,  775,  775,  775,  775,  775,

    0,  773,    0,    0,  774,  776,  776,  776,  776,  776,
    777,  777,  777,  777,  777,  780,  780,    0,  781,  781,
    782,  782,  783,  783,  784,  784,  780,    0,  780,  781,
    783,  782,    0,  783,    0,  784,  780,  785,  785,  781,
    781,  782,  784,  783,    0,  784,  786,  786,  785,  787,
    787,  788,  788,  789,  789,  790,  790,  786,  785,  786,
    787,    0,  788,    0,  789,    0,  790,  786,    0,    0,
    787,    0,  788,    0,  789,    0,  790,  792,  792,  792,
    792,  792,  793,  793,  793,  793,  793,  794,  794,  794,
    794,  794,  795,  795,    0,  796,  796,  797,  797,  798,

    798,  799,  799,  795,    0,  795,  796,  798,  797,    0,
    798,    0,  799,  795,  800,  800,  796,  796,  797,  799,
    798,    0,  799,  801,  801,  800,  802,  802,  803,  803,
    804,  804,  805,  805,  801,  800,  801,  802,    0,  803,
    0,  804,    0,  805,  801,  806,  806,  802,    0,  803,
    0,  804,    0,  805,  807,  807,  806,  808,  808,  809,
    809,  810,  810,  806,  807,  807,  806,    0,  808,    0,
    809,    0,  810,  812,  812,  807,  809,    0,  808,    0,
    809,  810,  810,    0,  812,  813,  813,  814,  814,    0,
    0,  812,  815,  815,  812,  813,  813,    0,  814,  816,

    816,    0,    0,  815,  818,  818,  813,    0,  814,  815,
    816,    0,    0,  815,    0,  818,  819,  819,    0,  816,
    816,    0,  818,  820,  820,  818,  819,  819,  821,  821,
    822,  822,  824,  824,  820,  823,  823,  819,    0,  821,
    0,  822,    0,  824,  820,  821,  823,  825,  825,  821,
    822,  822,  823,  824,  826,  826,  823,    0,  825,    0,
    825,  827,  827,  828,  828,  826,  829,  829,  825,    0,
    0,  827,  827,    0,  828,  826,    0,  829,  830,  830,
    828,    0,  827,    0,  828,  831,  831,  829,    0,  830,
    0,  830,  832,  832,  833,  833,  831,  834,  834,  830,

    0,    0,  832,  832,    0,  833,  831,    0,  834,  835,
    835,  833,    0,  832,    0,  833,  836,  836,  834,    0,
    835,    0,  835,  837,  837,  838,  838,  836,    0,    0,
    835,  839,  839,  837,  837,    0,  838,  836,    0,  840,
    840,    0,  839,    0,  837,    0,  838,  841,  841,  839,
    840,    0,  839,  842,  842,  843,  843,    0,  841,    0,
    840,  844,  844,    0,  842,    0,  843,    0,  841,  845,
    845,  842,  844,    0,  842,    0,  843,  846,  846,    0,
    845,    0,  844,  847,  847,  848,  848,  845,  846,    0,
    845,    0,  849,  849,  847,    0,  848,    0,  846,    0,

    847,    0,  848,  849,  847,    0,  848,  850,  850,  849,
    851,  851,    0,  849,  852,  852,    0,    0,  850,    0,
    0,  851,    0,    0,    0,  852,    0,    0,  850,    0,
    0,  851,    0,    0,    0,  852,  854,  854,  854,  854,
    854,  854,  854,  854,  854,  854,  854,  854,  855,  855,
    855,  855,  855,  855,  855,  855,  855,  855,  855,  855,
    856,  856,  856,  856,  856,  856,  856,  856,  856,  856,
    856,  856,  857,  857,  857,  857,  857,  857,  857,  857,
    857,  857,  857,  857,  858,  858,  858,  858,  858,  858,
    858,  858,  858,  858,  858,  858,  859,  859,  859,  859,

    859,  859,  859,  859,  859,  859,  859,  859,  860,    0,
    0,    0,    0,    0,  860,  861,    0,    0,    0,    0,
    0,  861,  862,  862,  862,    0,  862,  862,  863,    0,
    0,    0,  863,    0,    0,    0,    0,    0,  863,  864,
    0,    0,    0,    0,    0,  864,  865,  865,    0,    0,
    0,  865,  865,  865,  865,  865,    0,  865,  866,  866,
    0,    0,    0,  866,  866,  866,  866,  866,    0,  866,
    867,  867,    0,    0,  867,  867,  867,  867,    0,  867,
    867,  867,  868,  868,    0,    0,  868,  868,  868,  868,
    868,  868,  868,  868,  869,    0,    0,    0,    0,  869,

    869,  869,  869,    0,  869,  869,  870,    0,    0,    0,
    0,    0,  870,  871,    0,    0,    0,    0,    0,  871,
    872,  872,  872,  872,  872,  872,  872,  872,  872,  872,
    872,  873,  873,  873,  873,  873,  873,  873,  873,  873,
    873,  873,  874,  874,  874,  874,  874,  874,  874,  874,
    874,  874,  874,  875,    0,    0,    0,  875,    0,    0,
    0,    0,    0,  875,  876,    0,    0,    0,    0,    0,
    876,  877,  877,  877,  877,  877,  877,  877,    0,  877,
    877,  877,  877,  878,  878,    0,  878,  878,  878,  878,
    878,  878,  878,  878,  878,  879,  879,  879,  879,  879,

    879,  879,  879,  879,  879,  879,  879,  853,  853,  853,
    853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
    853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
    853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
    853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
    853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
    853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
    853,  853,  853,  853,  853,  853,  853,  853,  853
} ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf = 0, *yy_state_ptr = 0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
/*
 *  Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 *  Copyright (C) 2008-2012 - Scilab Enterprises - Bruno JOFRET
 *
 *  This file must be used under the terms of the CeCILL.
 *  This source file is licensed as described in the file COPYING, which
 *  you should have received as part of this distribution.  The terms
 *  are also available at
 *  http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
 *
 */
#include "isatty.hxx"
#include "parse.hxx"
#include "parser_private.hxx"

#include "context.hxx"

extern "C"
{
#include "charEncoding.h"
#include "sci_malloc.h"
}

static int comment_level = 0;
static int paren_level = 0;
static int last_token = 0;
static int exit_status = PARSE_ERROR;
static std::string current_file;
static std::string program_name;

static std::string *pstBuffer;

#define YY_USER_ACTION                          \
 yylloc.first_column = yylloc.last_column;yylloc.last_column += yyleng;
//yylloc.last_column += yyleng;

/* -*- Verbose Special Debug -*- */
//#define DEV
//#define TOKENDEV

#ifdef DEV
#define DEBUG(x) std::cout << "[DEBUG] " << x << std::endl;
#else
#define DEBUG(x) /* Nothing */
#endif

#define INITIAL 0
#define SIMPLESTRING 1
#define DOUBLESTRING 2
#define REGIONCOMMENT 3
#define LINECOMMENT 4
#define LINEBREAK 5
#define MATRIX 6
#define SHELLMODE 7
#define BEGINID 8

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

static void yyunput (int c, char *buf_ptr  );

#ifndef yytext_ptr
static void yy_flex_strncpy (char *, yyconst char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = NULL;

static void yy_push_state (int new_state );

static void yy_pop_state (void );

static int yy_top_state (void );

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
 
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
    register yy_state_type yy_current_state;
    register char *yy_cp, *yy_bp;
    register int yy_act;

    if ( !(yy_init) )
    {
        (yy_init) = 1;

#ifdef YY_USER_INIT
        YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
        {
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
        }
        if ( ! (yy_state_buf) )
        {
            YY_FATAL_ERROR( "out of dynamic memory in yylex()" );
        }

        if ( ! (yy_start) )
        {
            (yy_start) = 1;    /* first start state */
        }

        if ( ! yyin )
        {
            yyin = stdin;
        }

        if ( ! yyout )
        {
            yyout = stdout;
        }

        if ( ! YY_CURRENT_BUFFER )
        {
            yyensure_buffer_stack ();
            YY_CURRENT_BUFFER_LVALUE =
                yy_create_buffer(yyin, YY_BUF_SIZE );
        }

        yy_load_buffer_state( );
    }

    {

        while ( 1 )		/* loops until end-of-file is reached */
        {
            yy_cp = (yy_c_buf_p);

            /* Support of yytext. */
            *yy_cp = (yy_hold_char);

            /* yy_bp points to the position in yy_ch_buf of the start of
             * the current run.
             */
            yy_bp = yy_cp;

            yy_current_state = (yy_start);
            yy_current_state += YY_AT_BOL();

            (yy_state_ptr) = (yy_state_buf);
            *(yy_state_ptr)++ = yy_current_state;

yy_match:
            do
            {
                register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
                while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
                {
                    yy_current_state = (int) yy_def[yy_current_state];
                    if ( yy_current_state >= 854 )
                    {
                        yy_c = yy_meta[(unsigned int) yy_c];
                    }
                }
                yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
                *(yy_state_ptr)++ = yy_current_state;
                ++yy_cp;
            }
            while ( yy_base[yy_current_state] != 4408 );

yy_find_action:
            yy_current_state = *--(yy_state_ptr);
            (yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
            for ( ; ; ) /* until we find what rule we matched */
            {
                if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
                {
                    yy_act = yy_acclist[(yy_lp)];
                    if ( yy_act & YY_TRAILING_HEAD_MASK ||
                            (yy_looking_for_trail_begin) )
                    {
                        if ( yy_act == (yy_looking_for_trail_begin) )
                        {
                            (yy_looking_for_trail_begin) = 0;
                            yy_act &= ~YY_TRAILING_HEAD_MASK;
                            break;
                        }
                    }
                    else if ( yy_act & YY_TRAILING_MASK )
                    {
                        (yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
                        (yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
                    }
                    else
                    {
                        (yy_full_match) = yy_cp;
                        (yy_full_state) = (yy_state_ptr);
                        (yy_full_lp) = (yy_lp);
                        break;
                    }
                    ++(yy_lp);
                    goto find_rule;
                }
                --yy_cp;
                yy_current_state = *--(yy_state_ptr);
                (yy_lp) = yy_accept[yy_current_state];
            }

            YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

            switch ( yy_act )
            {
                /* beginning of action switch */
                case 1:
                    *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
                    (yy_c_buf_p) = yy_cp = yy_bp + 3;
                    YY_DO_BEFORE_ACTION; /* set up yytext again */
                    YY_RULE_SETUP
                    {
                        // BOM found ==> ignored
                    }
                    YY_BREAK
                case 2:
                    YY_RULE_SETUP
                    {
                        BEGIN(INITIAL);
                        return scan_throw(BOOLTRUE);
                    }
                    YY_BREAK
                case 3:
                    YY_RULE_SETUP
                    {
                        BEGIN(INITIAL);
                        return scan_throw(BOOLFALSE);
                    }
                    YY_BREAK
                case 4:
                    YY_RULE_SETUP
                    {
                        if (last_token != DOT)
                        {
                            ParserSingleInstance::pushControlStatus(Parser::WithinIf);
                        }
                        DEBUG("BEGIN(INITIAL)");
                        BEGIN(INITIAL);
                        return scan_throw(IF);
                    }
                    YY_BREAK
                case 5:
                    YY_RULE_SETUP
                    {
                        DEBUG("BEGIN(INITIAL)");
                        BEGIN(INITIAL);
                        return scan_throw(THEN);
                    }
                    YY_BREAK
                case 6:
                    YY_RULE_SETUP
                    {
                        if (last_token != DOT)
                        {
                            // Pop to step out IF
                            ParserSingleInstance::popControlStatus();
                            ParserSingleInstance::pushControlStatus(Parser::WithinElse);
                        }
                        DEBUG("BEGIN(INITIAL)");
                        BEGIN(INITIAL);
                        return scan_throw(ELSE);
                    }
                    YY_BREAK
                case 7:
                    YY_RULE_SETUP
                    {
                        if (last_token != DOT)
                        {
                            ParserSingleInstance::popControlStatus();
                            ParserSingleInstance::pushControlStatus(Parser::WithinElseIf);
                        }
                        DEBUG("BEGIN(INITIAL)");
                        BEGIN(INITIAL);
                        return scan_throw(ELSEIF);
                    }
                    YY_BREAK
                case 8:
                    YY_RULE_SETUP
                    {
                        if (last_token != DOT)
                        {
                            ParserSingleInstance::popControlStatus();
                        }
                        DEBUG("BEGIN(INITIAL)");
                        BEGIN(INITIAL);
                        return scan_throw(END);
                    }
                    YY_BREAK
                case 9:
                    YY_RULE_SETUP
                    {
                        if (last_token != DOT)
                        {
                            ParserSingleInstance::pushControlStatus(Parser::WithinSelect);
                        }
                        DEBUG("BEGIN(INITIAL)");
                        BEGIN(INITIAL);
                        return scan_throw(SELECT);
                    }
                    YY_BREAK
                case 10:
                    YY_RULE_SETUP
                    {
                        if (last_token != DOT)
                        {
                            ParserSingleInstance::pushControlStatus(Parser::WithinSwitch);
                        }
                        DEBUG("BEGIN(INITIAL)");
                        BEGIN(INITIAL);
                        return scan_throw(SWITCH);
                    }
                    YY_BREAK
                case 11:
                    YY_RULE_SETUP
                    {
                        if (last_token != DOT)
                        {
                            ParserSingleInstance::popControlStatus();
                            ParserSingleInstance::pushControlStatus(Parser::WithinOtherwise);
                        }
                        DEBUG("BEGIN(INITIAL)");
                        BEGIN(INITIAL);
                        return scan_throw(OTHERWISE);
                    }
                    YY_BREAK
                case 12:
                    YY_RULE_SETUP
                    {
                        if (last_token != DOT)
                        {
                            ParserSingleInstance::popControlStatus();
                            ParserSingleInstance::pushControlStatus(Parser::WithinCase);
                        }
                        DEBUG("BEGIN(INITIAL)");
                        BEGIN(INITIAL);
                        return scan_throw(CASE);
                    }
                    YY_BREAK
                case 13:
                    YY_RULE_SETUP
                    {
                        if (last_token != DOT)
                        {
                            ParserSingleInstance::pushControlStatus(Parser::WithinFunction);
                        }
                        DEBUG("BEGIN(INITIAL)");
                        BEGIN(INITIAL);
                        return scan_throw(FUNCTION);
                    }
                    YY_BREAK
                case 14:
                    YY_RULE_SETUP
                    {
                        if (last_token != DOT)
                        {
                            ParserSingleInstance::popControlStatus();
                        }
                        DEBUG("BEGIN(INITIAL)");
                        BEGIN(INITIAL);
                        return scan_throw(ENDFUNCTION);
                    }
                    YY_BREAK
                case 15:
                    YY_RULE_SETUP
                    {
                        if (last_token != DOT)
                        {
                            ParserSingleInstance::pushControlStatus(Parser::WithinFunction);
                        }
                        DEBUG("BEGIN(INITIAL)");
                        BEGIN(INITIAL);
                        return scan_throw(HIDDENFUNCTION);
                    }
                    YY_BREAK
                case 16:
                    YY_RULE_SETUP
                    {
                        DEBUG("BEGIN(INITIAL)");
                        BEGIN(INITIAL);
                        return scan_throw(HIDDEN);
                    }
                    YY_BREAK
                case 17:
                    YY_RULE_SETUP
                    {
                        if (last_token != DOT)
                        {
                            ParserSingleInstance::pushControlStatus(Parser::WithinFor);
                        }
                        BEGIN(INITIAL);
                        return scan_throw(FOR);
                    }
                    YY_BREAK
                case 18:
                    YY_RULE_SETUP
                    {
                        if (last_token != DOT)
                        {
                            ParserSingleInstance::pushControlStatus(Parser::WithinWhile);
                        }
                        BEGIN(INITIAL);
                        return scan_throw(WHILE);
                    }
                    YY_BREAK
                case 19:
                    YY_RULE_SETUP
                    {
                        BEGIN(INITIAL);
                        return scan_throw(DO);
                    }
                    YY_BREAK
                case 20:
                    YY_RULE_SETUP
                    {
                        BEGIN(INITIAL);
                        return scan_throw(BREAK);
                    }
                    YY_BREAK
                case 21:
                    YY_RULE_SETUP
                    {
                        BEGIN(INITIAL);
                        return scan_throw(CONTINUE);
                    }
                    YY_BREAK
                case 22:
                    YY_RULE_SETUP
                    {
                        ParserSingleInstance::pushControlStatus(Parser::WithinTry);
                        BEGIN(INITIAL);
                        return scan_throw(TRY);
                    }
                    YY_BREAK
                case 23:
                    YY_RULE_SETUP
                    {
                        // Pop to step out TRY
                        ParserSingleInstance::popControlStatus();
                        ParserSingleInstance::pushControlStatus(Parser::WithinCatch);
                        BEGIN(INITIAL);
                        return scan_throw(CATCH);
                    }
                    YY_BREAK
                case 24:
                    YY_RULE_SETUP
                    {
                        BEGIN(INITIAL);
                        return scan_throw(RETURN);
                    }
                    YY_BREAK
                case 25:
                    YY_RULE_SETUP
                    {
                        BEGIN(INITIAL);
                        return scan_throw(RETURN);
                    }
                    YY_BREAK
                case 26:
                    /* rule 26 can match eol */
                    YY_RULE_SETUP
                    {
                        BEGIN(BEGINID);
                    }
                    YY_BREAK

                case 27:
                    YY_RULE_SETUP
                    {
                        wchar_t *pwText = to_wide_string(yytext);
                        if (yytext != NULL && pwText == NULL)
                        {
                            std::string str = "can not convert'";
                            str += yytext;
                            str += "' to UTF-8";
                            exit_status = SCAN_ERROR;
                            scan_error("can not convert string to UTF-8");
                        }
                        yylval.str = new std::wstring(pwText);
                        FREE(pwText);
                        types::InternalType * pIT = symbol::Context::getInstance()->get(symbol::Symbol(*yylval.str));
                        if (pIT && pIT->isCallable())
                        {
                            scan_throw(ID);
                            BEGIN(SHELLMODE);
                        }
                        else
                        {
                            BEGIN(INITIAL);
                            return scan_throw(ID);
                        }
                    }
                    YY_BREAK

                case 28:
                    YY_RULE_SETUP
                    {
                        return scan_throw(NOT);
                    }
                    YY_BREAK
                case 29:
                    YY_RULE_SETUP
                    {
                        return scan_throw(DOLLAR);
                    }
                    YY_BREAK
                case 30:
                    YY_RULE_SETUP
                    {
                        return scan_throw(BOOLTRUE);
                    }
                    YY_BREAK
                case 31:
                    YY_RULE_SETUP
                    {
                        return scan_throw(BOOLFALSE);
                    }
                    YY_BREAK
                case 32:
                    YY_RULE_SETUP
                    {
                        return scan_throw(AND);
                    }
                    YY_BREAK
                case 33:
                    YY_RULE_SETUP
                    {
                        return scan_throw(ANDAND);
                    }
                    YY_BREAK
                case 34:
                    YY_RULE_SETUP
                    {
                        return scan_throw(OR);
                    }
                    YY_BREAK
                case 35:
                    YY_RULE_SETUP
                    {
                        return scan_throw(OROR);
                    }
                    YY_BREAK
                case 36:
                    YY_RULE_SETUP
                    {
                        return scan_throw(LPAREN);
                    }
                    YY_BREAK
                case 37:
                    YY_RULE_SETUP
                    {
                        return scan_throw(RPAREN);
                    }
                    YY_BREAK
                case 38:
                    YY_RULE_SETUP
                    {
                        scan_step();
                        return scan_throw(SEMI);
                    }
                    YY_BREAK
                case 39:
                    YY_RULE_SETUP
                    {
                        scan_step();
                        return scan_throw(COMMA);
                    }
                    YY_BREAK
                case 40:
                    YY_RULE_SETUP
                    {
                        return scan_throw(COLON);
                    }
                    YY_BREAK
                case 41:
                    YY_RULE_SETUP
                    {
                        yy_push_state(MATRIX);
                        ParserSingleInstance::pushControlStatus(Parser::WithinCell);
                        return scan_throw(LBRACE);
                    }
                    YY_BREAK
                case 42:
                    YY_RULE_SETUP
                    {
                        return scan_throw(RBRACE);
                    }
                    YY_BREAK
                case 43:
                    YY_RULE_SETUP
                    {
                        return scan_throw(DOTQUOTE);
                    }
                    YY_BREAK
                case 44:
                    YY_RULE_SETUP
                    {
                        return scan_throw(DOTTIMES);
                    }
                    YY_BREAK
                case 45:
                    YY_RULE_SETUP
                    {
                        return scan_throw(DOTRDIVIDE);
                    }
                    YY_BREAK
                case 46:
                    YY_RULE_SETUP
                    {
                        return scan_throw(DOTLDIVIDE);
                    }
                    YY_BREAK
                case 47:
                    YY_RULE_SETUP
                    {
                        return scan_throw(DOTPOWER);
                    }
                    YY_BREAK
                case 48:
                    YY_RULE_SETUP
                    {
                        return scan_throw(MINUS);
                    }
                    YY_BREAK
                case 49:
                    YY_RULE_SETUP
                    {
                        return scan_throw(PLUS);
                    }
                    YY_BREAK
                case 50:
                    YY_RULE_SETUP
                    {
                        return scan_throw(TIMES);
                    }
                    YY_BREAK
                case 51:
                    YY_RULE_SETUP
                    {
                        return scan_throw(RDIVIDE);
                    }
                    YY_BREAK
                case 52:
                    YY_RULE_SETUP
                    {
                        return scan_throw(LDIVIDE);
                    }
                    YY_BREAK
                case 53:
                    YY_RULE_SETUP
                    {
                        return scan_throw(POWER);
                    }
                    YY_BREAK
                case 54:
                    YY_RULE_SETUP
                    {
                        return scan_throw(KRONTIMES);
                    }
                    YY_BREAK
                case 55:
                    YY_RULE_SETUP
                    {
                        return scan_throw(KRONRDIVIDE);
                    }
                    YY_BREAK
                case 56:
                    YY_RULE_SETUP
                    {
                        return scan_throw(KRONLDIVIDE);
                    }
                    YY_BREAK
                case 57:
                    /* rule 57 can match eol */
                    YY_RULE_SETUP
                    {
                        unput(yytext[yyleng - 1]);
                        return scan_throw(CONTROLTIMES);
                    }
                    YY_BREAK
                case 58:
                    /* rule 58 can match eol */
                    YY_RULE_SETUP
                    {
                        unput(yytext[yyleng - 1]);
                        return scan_throw(CONTROLRDIVIDE);
                    }
                    YY_BREAK
                case 59:
                    /* rule 59 can match eol */
                    YY_RULE_SETUP
                    {
                        unput(yytext[yyleng - 1]);
                        return scan_throw(CONTROLLDIVIDE);
                    }
                    YY_BREAK
                case 60:
                    YY_RULE_SETUP
                    {
                        return scan_throw(EQ);
                    }
                    YY_BREAK
                case 61:
                    YY_RULE_SETUP
                    {
                        return scan_throw(NE);
                    }
                    YY_BREAK
                case 62:
                    YY_RULE_SETUP
                    {
                        return scan_throw(LT);
                    }
                    YY_BREAK
                case 63:
                    YY_RULE_SETUP
                    {
                        return scan_throw(GT);
                    }
                    YY_BREAK
                case 64:
                    YY_RULE_SETUP
                    {
                        return scan_throw(LE);
                    }
                    YY_BREAK
                case 65:
                    YY_RULE_SETUP
                    {
                        return scan_throw(GE);
                    }
                    YY_BREAK
                case 66:
                    YY_RULE_SETUP
                    {
                        return scan_throw(ASSIGN);
                    }
                    YY_BREAK
                case 67:
                    YY_RULE_SETUP
                    {
                        DEBUG("yy_push_state(MATRIX)");
                        yy_push_state(MATRIX);
                        ParserSingleInstance::pushControlStatus(Parser::WithinMatrix);
                        return scan_throw(LBRACK);
                    }
                    YY_BREAK
                case 68:
                    YY_RULE_SETUP
                    {
                        return scan_throw(RBRACK);
                    }
                    YY_BREAK
                case 69:
                    YY_RULE_SETUP
                    {
                        return scan_throw(DOT);
                    }
                    YY_BREAK
                case 70:
                    YY_RULE_SETUP
                    {
                        ParserSingleInstance::pushControlStatus(Parser::WithinDots);
                        yy_push_state(LINEBREAK);
                    }
                    YY_BREAK
                case 71:
                    YY_RULE_SETUP
                    {
                        yylval.number = atof(yytext);
#ifdef TOKENDEV
                        std::cout << "--> [DEBUG] INTEGER : " << yytext << std::endl;
#endif
                        //  scan_step();
                        return scan_throw(VARINT);
                    }
                    YY_BREAK
                case 72:
                    YY_RULE_SETUP
                    {
                        scan_exponent_convert(yytext);
                        yylval.number = atof(yytext);
#ifdef TOKENDEV
                        std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
                        scan_step();
                        return scan_throw(VARFLOAT);
                    }
                    YY_BREAK
                case 73:
                    YY_RULE_SETUP
                    {
                        yylval.number = atof(yytext);
#ifdef TOKENDEV
                        std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
                        scan_step();
                        return scan_throw(VARFLOAT);
                    }
                    YY_BREAK
                case 74:
                    YY_RULE_SETUP
                    {
                        yylval.number = atof(yytext);
#ifdef TOKENDEV
                        std::cout << "--> [DEBUG] NUMBER : " << yytext << std::endl;
#endif
                        //  scan_step();
                        return scan_throw(NUM);
                    }
                    YY_BREAK
                case 75:
                    YY_RULE_SETUP
                    {
                        yylval.number = atof(yytext);
#ifdef TOKENDEV
                        std::cout << "--> [DEBUG] LITTLE : " << yytext << std::endl;
#endif
                        scan_step();
                        return scan_throw(NUM);
                    }
                    YY_BREAK
                case 76:
                    YY_RULE_SETUP
                    {
                        wchar_t *pwText = to_wide_string(yytext);
                        if (yytext != NULL && pwText == NULL)
                        {
                            std::string str = "can not convert'";
                            str += yytext;
                            str += "' to UTF-8";
                            exit_status = SCAN_ERROR;
                            scan_error("can not convert string to UTF-8");
                        }
                        yylval.str = new std::wstring(pwText);
                        FREE(pwText);
#ifdef TOKENDEV
                        std::cout << "--> [DEBUG] ID : " << yytext << std::endl;
#endif
                        //  scan_step();
                        return scan_throw(ID);
                    }
                    YY_BREAK
                case 77:
                    YY_RULE_SETUP
                    {
                        yylval.comment = new std::wstring();
                        comment_level = 1;
                        ParserSingleInstance::pushControlStatus(Parser::WithinBlockComment);
                        yy_push_state(REGIONCOMMENT);
                    }
                    YY_BREAK
                case 78:
                    YY_RULE_SETUP
                    {
                        pstBuffer = new std::string();
                        yy_push_state(LINECOMMENT);
                    }
                    YY_BREAK
                case 79:
                    YY_RULE_SETUP
                    {
                        pstBuffer = new std::string();
                        yy_push_state(DOUBLESTRING);
                    }
                    YY_BREAK
                case 80:
                    YY_RULE_SETUP
                    {
                        /*
                        ** Matrix Transposition special behaviour
                        ** ID' []' toto()' are transposition call
                        */
                        if (last_token == ID
                        || last_token == RBRACK
                        || last_token == RPAREN
                        || last_token == RBRACE
                        || last_token == VARINT
                        || last_token == VARFLOAT
                        || last_token == NUM
                        || last_token == BOOLTRUE
                        || last_token == BOOLFALSE)
                        {
                            return scan_throw(QUOTE);
                        }
                        else
                        {
                            pstBuffer = new std::string();
                            yy_push_state(SIMPLESTRING);
                        }
                    }
                    YY_BREAK
                case 81:
                    YY_RULE_SETUP
                    {
                        scan_step();
                        scan_throw(SPACES);
                    }
                    YY_BREAK
                case 82:
                    /* rule 82 can match eol */
                    YY_RULE_SETUP
                    {
                        yylloc.last_line += 1;
                        yylloc.last_column = 1;
                        scan_step();
                        if (last_token != EOL)
                        {
                            return scan_throw(EOL);
                        }

                    }
                    YY_BREAK
                case 83:
                    /* rule 83 can match eol */
                    YY_RULE_SETUP
                    {
                        yylloc.last_line += 1;
                        yylloc.last_column = 1;
                        scan_step();
                        if (last_token != EOL)
                        {
                            return scan_throw(EOL);
                        }
                        scan_throw(EOL);
                    }
                    YY_BREAK
                case 84:
                    /* rule 84 can match eol */
                    YY_RULE_SETUP
                    {
                        yylloc.last_line += 2;
                        yylloc.last_column = 1;
                        scan_step();
                        if (last_token != EOL)
                        {
                            return scan_throw(EOL);
                        }
                        scan_throw(EOL);
                    }
                    YY_BREAK
                case 85:
                    YY_RULE_SETUP
                    {
                        std::string str = "unexpected token '";
                        str += yytext;
                        str += "'";
                        exit_status = SCAN_ERROR;
                        scan_error(str);
                    }
                    YY_BREAK

                case 86:
                    YY_RULE_SETUP
                    {
                        paren_level++;
                        return scan_throw(LPAREN);
                    }
                    YY_BREAK
                case 87:
                    YY_RULE_SETUP
                    {
                        paren_level--;
                        return scan_throw(RPAREN);
                    }
                    YY_BREAK
                case 88:
                    YY_RULE_SETUP
                    {
                        unput(yytext[yyleng - 1]);
                        if (last_token == ID
                        || last_token == RPAREN
                        || last_token == QUOTE
                        || last_token == VARINT
                        || last_token == VARFLOAT
                        || last_token == NUM)
                        {
                            return scan_throw(COMMA);
                        }
                    }
                    YY_BREAK
                case 89:
                    YY_RULE_SETUP
                    {
                        return scan_throw(COLON);
                    }
                    YY_BREAK
                case 90:
                    /* rule 90 can match eol */
                    YY_RULE_SETUP
                    {
                        yylloc.last_line += 1;
                        yylloc.last_column = 1;
                        if (last_token != DOTS && last_token != EOL)
                        {
                            return scan_throw(EOL);
                        }
                        scan_throw(EOL);
                    }
                    YY_BREAK
                case 91:
                    YY_RULE_SETUP
                    {
                        DEBUG("yy_pop_state()");
                        yy_pop_state();
                        ParserSingleInstance::popControlStatus();
                        return scan_throw(RBRACK);
                    }
                    YY_BREAK
                case 92:
                    YY_RULE_SETUP
                    {
                        yy_pop_state();
                        ParserSingleInstance::popControlStatus();
                        return scan_throw(RBRACE);
                    }
                    YY_BREAK
                case 93:
                case 94:
                    YY_RULE_SETUP
                    {
                        return scan_throw(PLUS);
                    }
                    YY_BREAK
                case 95:
                case 96:
                    YY_RULE_SETUP
                    {
                        return scan_throw(MINUS);
                    }
                    YY_BREAK
                case 97:
                    YY_RULE_SETUP
                    {
                        // no need to unput the '+'
                        if (last_token != LBRACK
                        && last_token != EOL
                        && last_token != SEMI
                        && last_token != COMMA
                        && paren_level == 0)
                        {
                            return scan_throw(COMMA);
                        }
                        else
                        {
                            unput('+');
                        }
                    }
                    YY_BREAK
                case 98:
                    YY_RULE_SETUP
                    {
                        unput('-');
                        if (last_token != LBRACK
                        && last_token != EOL
                        && last_token != SEMI
                        && last_token != COMMA
                        && paren_level == 0)
                        {
                            return scan_throw(COMMA);
                        }
                    }
                    YY_BREAK
                case 99:
                    YY_RULE_SETUP
                    {
                        std::string str = "unexpected token '";
                        str += yytext;
                        str += "' within a matrix.";
                        exit_status = SCAN_ERROR;
                        scan_error(str);
                    }
                    YY_BREAK
                case 100:
                    /* rule 100 can match eol */
                    YY_RULE_SETUP
                    {
                        /* Just do nothing */
                        yylloc.last_line += 1;
                        yylloc.last_column = 1;
                        scan_step();
                        scan_throw(EOL);
                    }
                    YY_BREAK
                case 101:
                    YY_RULE_SETUP
                    {
                        /* Just do nothing */
                        pstBuffer = new std::string();
                        yy_push_state(LINECOMMENT);
                        scan_throw(DOTS);
                    }
                    YY_BREAK
                case YY_STATE_EOF(MATRIX):
                {
                    yy_pop_state();
                }
                YY_BREAK

                case 102:
                    /* rule 102 can match eol */
                    YY_RULE_SETUP
                    {
                        yylloc.last_line += 1;
                        yylloc.last_column = 1;
                        scan_step();
                        yy_pop_state();
                        ParserSingleInstance::popControlStatus();
                    }
                    YY_BREAK
                case 103:
                    YY_RULE_SETUP
                    {
                        ++comment_level;
                        yy_push_state(REGIONCOMMENT);
                    }
                    YY_BREAK
                case 104:
                    YY_RULE_SETUP
                    {
                        scan_throw(DOTS);
                        pstBuffer = new std::string();
                        yy_push_state(LINECOMMENT);
                    }
                    YY_BREAK
                case 105:
                    YY_RULE_SETUP
                    {
                        /* Do nothing... */
                    }
                    YY_BREAK
                case YY_STATE_EOF(LINEBREAK):
                {
                    yy_pop_state();
                }
                YY_BREAK
                case 106:
                    YY_RULE_SETUP
                    {
                        std::string str = "unexpected token '";
                        str += yytext;
                        str += "' after line break with .. or ...";
                        exit_status = SCAN_ERROR;
                        scan_error(str);
                    }
                    YY_BREAK

                case 107:
                    /* rule 107 can match eol */
                    YY_RULE_SETUP
                    {
                        //yylloc.last_line += 1;
                        //yylloc.last_column = 1;
                        //scan_step();
                        yy_pop_state();
                        for (int i = yyleng - 1 ; i >= 0 ; --i)
                        {
                            //std::cerr << "Unputting i = {" << i << "}" << std::endl;
                            //std::cerr << "Unputting {" << yytext[i] << "}" << std::endl;
                            unput(yytext[i]);
                            yylloc.last_column--;
                        }
                        /*
                        ** To forgot comments after lines break
                        */
                        if (last_token != DOTS)
                        {
                            //std::cerr << "pstBuffer = {" << *pstBuffer << "}" << std::endl;
                            //std::cerr << "pstBuffer->c_str() = {" << pstBuffer->c_str() << "}" << std::endl;
                            wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
                            //std::wcerr << L"pwstBuffer = W{" << pwstBuffer << L"}" << std::endl;
                            if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
                            {
                                std::string str = "can not convert'";
                                str += pstBuffer->c_str();
                                str += "' to UTF-8";
                                exit_status = SCAN_ERROR;
                                scan_error("can not convert string to UTF-8");
                            }
                            yylval.comment = new std::wstring(pwstBuffer);
                            delete pstBuffer;
                            FREE (pwstBuffer);
                            return scan_throw(COMMENT);
                        }
                        else
                        {
                            delete pstBuffer;
                        }
                    }
                    YY_BREAK
                case YY_STATE_EOF(LINECOMMENT):
                {
                    yy_pop_state();
                    wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
                    if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
                    {
                        std::string str = "can not convert'";
                        str += pstBuffer->c_str();
                        str += "' to UTF-8";
                        exit_status = SCAN_ERROR;
                        scan_error("can not convert string to UTF-8");
                    }
                    yylval.comment = new std::wstring(pwstBuffer);
                    delete pstBuffer;
                    FREE (pwstBuffer);
                    return scan_throw(COMMENT);
                }
                YY_BREAK
                case 108:
                    YY_RULE_SETUP
                    {
                        // Put the char in a temporary CHAR buffer to go through UTF-8 trouble
                        // only translate to WCHAR_T when popping state.
                        *pstBuffer += yytext;
                    }
                    YY_BREAK

                case 109:
                    YY_RULE_SETUP
                    {
                        --comment_level;
                        if (comment_level == 0)
                        {
                            ParserSingleInstance::popControlStatus();
                            yy_pop_state();
                            //return scan_throw(BLOCKCOMMENT);
                        }
                    }
                    YY_BREAK
                case 110:
                    YY_RULE_SETUP
                    {
                        ++comment_level;
                        yy_push_state(REGIONCOMMENT);
                    }
                    YY_BREAK
                case 111:
                    /* rule 111 can match eol */
                    YY_RULE_SETUP
                    {
                        yylloc.last_line += 1;
                        yylloc.last_column = 1;
                        scan_step();
                        *yylval.comment += L"\n//";
                    }
                    YY_BREAK
                case 112:
                case 113:
                    YY_RULE_SETUP
                    {
                        wchar_t *pwText = to_wide_string(yytext);
                        *yylval.comment += std::wstring(pwText);
                        FREE(pwText);
                    }
                    YY_BREAK
                case YY_STATE_EOF(REGIONCOMMENT):
                {
                    yy_pop_state();
                    //    std::string str = "unexpected end of file in a comment";
                    //    exit_status = SCAN_ERROR;
                    //    scan_error(str);
                }
                YY_BREAK

                case 114:
                    YY_RULE_SETUP
                    {
                        *pstBuffer += "\"";
                    }
                    YY_BREAK
                case 115:
                    YY_RULE_SETUP
                    {
                        *pstBuffer += "'";
                    }
                    YY_BREAK
                case 116:
                    YY_RULE_SETUP
                    {
                        *pstBuffer += "\"";
                    }
                    YY_BREAK
                case 117:
                    YY_RULE_SETUP
                    {
                        *pstBuffer += "'";
                    }
                    YY_BREAK
                case 118:
                    YY_RULE_SETUP
                    {
                        yy_pop_state();
                        //scan_step();
                        wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
                        if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
                        {
                            std::string str = "can not convert'";
                            str += pstBuffer->c_str();
                            str += "' to UTF-8";
                            exit_status = SCAN_ERROR;
                            scan_error("can not convert string to UTF-8");
                        }
                        yylval.str = new std::wstring(pwstBuffer);
                        delete pstBuffer;
                        FREE(pwstBuffer);
                        yylloc.first_column = yylloc.last_column - yylval.str->size() - 2;
                        return scan_throw(STR);
                    }
                    YY_BREAK
                case 119:
                    YY_RULE_SETUP
                    {
                        std::string str = "Heterogeneous string detected, starting with ' and ending with \".";
                        exit_status = SCAN_ERROR;
                        scan_error(str);
                    }
                    YY_BREAK
                case 120:
                    /* rule 120 can match eol */
                    YY_RULE_SETUP
                    {
                        /* Do nothing... Just skip */
                    }
                    YY_BREAK
                case 121:
                    /* rule 121 can match eol */
                    YY_RULE_SETUP
                    {
                        std::string str = "unexpected end of line in a string.";
                        exit_status = SCAN_ERROR;
                        scan_error(str);
                        yylloc.last_line += 1;
                        yylloc.last_column = 1;
                    }
                    YY_BREAK
                case YY_STATE_EOF(SIMPLESTRING):
                {
                    std::string str = "unexpected end of file in a string.";
                    exit_status = SCAN_ERROR;
                    scan_error(str);
                }
                YY_BREAK
                case 122:
                case 123:
                    YY_RULE_SETUP
                    {
                        //scan_step();
                        *pstBuffer += yytext;
                    }
                    YY_BREAK

                case 124:
                    YY_RULE_SETUP
                    {
                        *pstBuffer += "\"";
                    }
                    YY_BREAK
                case 125:
                    YY_RULE_SETUP
                    {
                        *pstBuffer += "'";
                    }
                    YY_BREAK
                case 126:
                    YY_RULE_SETUP
                    {
                        *pstBuffer += "\"";
                    }
                    YY_BREAK
                case 127:
                    YY_RULE_SETUP
                    {
                        *pstBuffer += "'";
                    }
                    YY_BREAK
                case 128:
                    YY_RULE_SETUP
                    {
                        yy_pop_state();
                        //scan_step();
                        wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
                        if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
                        {
                            std::string str = "can not convert'";
                            str += pstBuffer->c_str();
                            str += "' to UTF-8";
                            exit_status = SCAN_ERROR;
                            scan_error("can not convert string to UTF-8");
                        }
                        yylval.str = new std::wstring(pwstBuffer);
                        delete pstBuffer;
                        FREE(pwstBuffer);
                        yylloc.first_column = yylloc.last_column - yylval.str->size() - 2;
                        return scan_throw(STR);
                    }
                    YY_BREAK
                case 129:
                    YY_RULE_SETUP
                    {
                        std::string str = "Heterogeneous string detected, starting with \" and ending with '.";
                        exit_status = SCAN_ERROR;
                        scan_error(str);
                    }
                    YY_BREAK
                case 130:
                    /* rule 130 can match eol */
                    YY_RULE_SETUP
                    {
                        /* Do nothing... Just skip */
                    }
                    YY_BREAK
                case 131:
                    /* rule 131 can match eol */
                    YY_RULE_SETUP
                    {
                        std::string str = "unexpected end of line in a string";
                        exit_status = SCAN_ERROR;
                        scan_error(str);
                        yylloc.last_line += 1;
                        yylloc.last_column = 1;
                    }
                    YY_BREAK
                case YY_STATE_EOF(DOUBLESTRING):
                {
                    std::string str = "unexpected end of file in a string";
                    exit_status = SCAN_ERROR;
                    scan_error(str);
                }
                YY_BREAK
                case 132:
                case 133:
                    YY_RULE_SETUP
                    {
                        //scan_step();
                        *pstBuffer += yytext;
                    }
                    YY_BREAK

                case 134:
                    YY_RULE_SETUP
                    {
                        if (last_token == ID)
                        {
                            scan_throw(SPACES);
                            return ID;
                        }
                    }
                    YY_BREAK
                case 135:
                    YY_RULE_SETUP
                    {
                        BEGIN(INITIAL);
                        scan_step();
                        return scan_throw(SEMI);
                    }
                    YY_BREAK
                case 136:
                    YY_RULE_SETUP
                    {
                        BEGIN(INITIAL);
                        scan_step();
                        return scan_throw(COMMA);
                    }
                    YY_BREAK
                case 137:
                    /* rule 137 can match eol */
                    YY_RULE_SETUP
                    {
                        BEGIN(INITIAL);
                        yylloc.last_line += 1;
                        yylloc.last_column = 1;
                        scan_step();
                        return scan_throw(EOL);
                    }
                    YY_BREAK
                case 138:
                    YY_RULE_SETUP
                    {
                        if (last_token == STR || last_token == SPACES)
                        {
                            wchar_t *pwText = to_wide_string(yytext);
                            yylval.str = new std::wstring(pwText);
                            FREE(pwText);
                            return scan_throw(STR);
                        }
                        else
                        {
                            BEGIN(INITIAL);
                            return scan_throw(ASSIGN);
                        }
                    }
                    YY_BREAK
                case 139:
                    YY_RULE_SETUP
                    {
                        if (last_token == STR || last_token == SPACES)
                        {
                            wchar_t *pwText = to_wide_string(yytext);
                            yylval.str = new std::wstring(pwText);
                            FREE(pwText);
                            return scan_throw(STR);
                        }
                        else
                        {
                            BEGIN(INITIAL);
                            return scan_throw(LPAREN);
                        }
                    }
                    YY_BREAK
                case 140:
                    YY_RULE_SETUP
                    {
                        if (last_token == STR || last_token == SPACES)
                        {
                            wchar_t *pwText = to_wide_string(yytext);
                            yylval.str = new std::wstring(pwText);
                            FREE(pwText);
                            return scan_throw(STR);
                        }
                        else
                        {
                            BEGIN(INITIAL);
                            return scan_throw(LT);
                        }
                    }
                    YY_BREAK
                case 141:
                    YY_RULE_SETUP
                    {
                        if (last_token == STR || last_token == SPACES)
                        {
                            wchar_t *pwText = to_wide_string(yytext);
                            yylval.str = new std::wstring(pwText);
                            FREE(pwText);
                            return scan_throw(STR);
                        }
                        else
                        {
                            BEGIN(INITIAL);
                            return scan_throw(GT);
                        }
                    }
                    YY_BREAK
                case 142:
                    YY_RULE_SETUP
                    {
                        if (last_token == STR || last_token == SPACES)
                        {
                            wchar_t *pwText = to_wide_string(yytext);
                            yylval.str = new std::wstring(pwText);
                            FREE(pwText);
                            return scan_throw(STR);
                        }
                        else
                        {
                            BEGIN(INITIAL);
                            return scan_throw(NOT);
                        }
                    }
                    YY_BREAK
                case 143:
                    YY_RULE_SETUP
                    {
                        wchar_t *pwText = to_wide_string(yytext);
                        yylval.str = new std::wstring(pwText);
                        FREE(pwText);
                        return scan_throw(STR);
                    }
                    YY_BREAK
                case YY_STATE_EOF(SHELLMODE):
                {
                    BEGIN(INITIAL);
                }
                YY_BREAK

                case 144:
                    YY_RULE_SETUP
                    ECHO;
                    YY_BREAK
                case YY_STATE_EOF(INITIAL):
                case YY_STATE_EOF(BEGINID):
                    yyterminate();

                case YY_END_OF_BUFFER:
                {
                    /* Amount of text matched not including the EOB char. */
                    int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

                    /* Undo the effects of YY_DO_BEFORE_ACTION. */
                    *yy_cp = (yy_hold_char);
                    YY_RESTORE_YY_MORE_OFFSET

                    if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
                    {
                        /* We're scanning a new file or input source.  It's
                         * possible that this happened because the user
                         * just pointed yyin at a new source and called
                         * yylex().  If so, then we have to assure
                         * consistency between YY_CURRENT_BUFFER and our
                         * globals.  Here is the right place to do so, because
                         * this is the first action (other than possibly a
                         * back-up) that will match for the new input source.
                         */
                        (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
                        YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
                        YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
                    }

                    /* Note that here we test for yy_c_buf_p "<=" to the position
                     * of the first EOB in the buffer, since yy_c_buf_p will
                     * already have been incremented past the NUL character
                     * (since all states make transitions on EOB to the
                     * end-of-buffer state).  Contrast this with the test
                     * in input().
                     */
                    if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
                    {
                        /* This was really a NUL. */
                        yy_state_type yy_next_state;

                        (yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

                        yy_current_state = yy_get_previous_state(  );

                        /* Okay, we're now positioned to make the NUL
                         * transition.  We couldn't have
                         * yy_get_previous_state() go ahead and do it
                         * for us because it doesn't know how to deal
                         * with the possibility of jamming (and we don't
                         * want to build jamming into it because then it
                         * will run more slowly).
                         */

                        yy_next_state = yy_try_NUL_trans( yy_current_state );

                        yy_bp = (yytext_ptr) + YY_MORE_ADJ;

                        if ( yy_next_state )
                        {
                            /* Consume the NUL. */
                            yy_cp = ++(yy_c_buf_p);
                            yy_current_state = yy_next_state;
                            goto yy_match;
                        }

                        else
                        {
                            yy_cp = (yy_c_buf_p);
                            goto yy_find_action;
                        }
                    }

                    else switch ( yy_get_next_buffer(  ) )
                        {
                            case EOB_ACT_END_OF_FILE:
                            {
                                (yy_did_buffer_switch_on_eof) = 0;

                                if ( yywrap( ) )
                                {
                                    /* Note: because we've taken care in
                                     * yy_get_next_buffer() to have set up
                                     * yytext, we can now set up
                                     * yy_c_buf_p so that if some total
                                     * hoser (like flex itself) wants to
                                     * call the scanner after we return the
                                     * YY_NULL, it'll still work - another
                                     * YY_NULL will get returned.
                                     */
                                    (yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

                                    yy_act = YY_STATE_EOF(YY_START);
                                    goto do_action;
                                }

                                else
                                {
                                    if ( ! (yy_did_buffer_switch_on_eof) )
                                    {
                                        YY_NEW_FILE;
                                    }
                                }
                                break;
                            }

                            case EOB_ACT_CONTINUE_SCAN:
                                (yy_c_buf_p) =
                                    (yytext_ptr) + yy_amount_of_matched_text;

                                yy_current_state = yy_get_previous_state(  );

                                yy_cp = (yy_c_buf_p);
                                yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                                goto yy_match;

                            case EOB_ACT_LAST_MATCH:
                                (yy_c_buf_p) =
                                    &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

                                yy_current_state = yy_get_previous_state(  );

                                yy_cp = (yy_c_buf_p);
                                yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                                goto yy_find_action;
                        }
                    break;
                }

                default:
                    YY_FATAL_ERROR(
                        "fatal flex scanner internal error--no action found" );
            } /* end of action switch */
        } /* end of scanning one token */
    } /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
    register char *source = (yytext_ptr);
    register int number_to_move, i;
    int ret_val;

    if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
        YY_FATAL_ERROR(
            "fatal flex scanner internal error--end of buffer missed" );

    if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
    {
        /* Don't try to fill the buffer, so this is an EOF. */
        if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
        {
            /* We matched a single character, the EOB, so
             * treat this as a final EOF.
             */
            return EOB_ACT_END_OF_FILE;
        }

        else
        {
            /* We matched some text prior to the EOB, first
             * process it.
             */
            return EOB_ACT_LAST_MATCH;
        }
    }

    /* Try to read more data. */

    /* First move last chars to start of buffer. */
    number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

    for ( i = 0; i < number_to_move; ++i )
    {
        *(dest++) = *(source++);
    }

    if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
        /* don't do the read, it's not guaranteed to return an EOF,
         * just force an EOF
         */
    {
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;
    }

    else
    {
        yy_size_t num_to_read =
            YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

        while ( num_to_read <= 0 )
        {
            /* Not enough room in the buffer - grow it. */

            YY_FATAL_ERROR(
                "input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

        }

        if ( num_to_read > YY_READ_BUF_SIZE )
        {
            num_to_read = YY_READ_BUF_SIZE;
        }

        /* Read in more data. */
        YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
                  (yy_n_chars), num_to_read );

        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
    }

    if ( (yy_n_chars) == 0 )
    {
        if ( number_to_move == YY_MORE_ADJ )
        {
            ret_val = EOB_ACT_END_OF_FILE;
            yyrestart(yyin  );
        }

        else
        {
            ret_val = EOB_ACT_LAST_MATCH;
            YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
                YY_BUFFER_EOF_PENDING;
        }
    }

    else
    {
        ret_val = EOB_ACT_CONTINUE_SCAN;
    }

    if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size)
    {
        /* Extend the array by 50%, plus the number we really need. */
        yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
        YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, new_size  );
        if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
        {
            YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
        }
    }

    (yy_n_chars) += number_to_move;
    YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
    YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

    (yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

    return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state (void)
{
    register yy_state_type yy_current_state;
    register char *yy_cp;

    yy_current_state = (yy_start);
    yy_current_state += YY_AT_BOL();

    (yy_state_ptr) = (yy_state_buf);
    *(yy_state_ptr)++ = yy_current_state;

    for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
    {
        register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
        while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
        {
            yy_current_state = (int) yy_def[yy_current_state];
            if ( yy_current_state >= 854 )
            {
                yy_c = yy_meta[(unsigned int) yy_c];
            }
        }
        yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
        *(yy_state_ptr)++ = yy_current_state;
    }

    return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
    register int yy_is_jam;

    register YY_CHAR yy_c = 1;
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
    {
        yy_current_state = (int) yy_def[yy_current_state];
        if ( yy_current_state >= 854 )
        {
            yy_c = yy_meta[(unsigned int) yy_c];
        }
    }
    yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
    yy_is_jam = (yy_current_state == 853);
    if ( ! yy_is_jam )
    {
        *(yy_state_ptr)++ = yy_current_state;
    }

    return yy_is_jam ? 0 : yy_current_state;
}

static void yyunput (int c, register char * yy_bp )
{
    register char *yy_cp;

    yy_cp = (yy_c_buf_p);

    /* undo effects of setting up yytext */
    *yy_cp = (yy_hold_char);

    if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
    {
        /* need to shift things up to make room */
        /* +2 for EOB chars. */
        register yy_size_t number_to_move = (yy_n_chars) + 2;
        register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
                                  YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
        register char *source =
            &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

        while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
        {
            *--dest = *--source;
        }

        yy_cp += (int) (dest - source);
        yy_bp += (int) (dest - source);
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
            (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

        if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
        {
            YY_FATAL_ERROR( "flex scanner push-back overflow" );
        }
    }

    *--yy_cp = (char) c;

    (yytext_ptr) = yy_bp;
    (yy_hold_char) = *yy_cp;
    (yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput (void)
#else
static int input  (void)
#endif

{
    int c;

    *(yy_c_buf_p) = (yy_hold_char);

    if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
    {
        /* yy_c_buf_p now points to the character we want to return.
         * If this occurs *before* the EOB characters, then it's a
         * valid NUL; if not, then we've hit the end of the buffer.
         */
        if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
            /* This was really a NUL. */
        {
            *(yy_c_buf_p) = '\0';
        }

        else
        {
            /* need more input */
            yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
            ++(yy_c_buf_p);

            switch ( yy_get_next_buffer(  ) )
            {
                case EOB_ACT_LAST_MATCH:
                    /* This happens because yy_g_n_b()
                     * sees that we've accumulated a
                     * token and flags that we need to
                     * try matching the token before
                     * proceeding.  But for input(),
                     * there's no matching to consider.
                     * So convert the EOB_ACT_LAST_MATCH
                     * to EOB_ACT_END_OF_FILE.
                     */

                    /* Reset buffer status. */
                    yyrestart(yyin );

                /*FALLTHROUGH*/

                case EOB_ACT_END_OF_FILE:
                {
                    if ( yywrap( ) )
                    {
                        return EOF;
                    }

                    if ( ! (yy_did_buffer_switch_on_eof) )
                    {
                        YY_NEW_FILE;
                    }
#ifdef __cplusplus
                    return yyinput();
#else
                    return input();
#endif
                }

                case EOB_ACT_CONTINUE_SCAN:
                    (yy_c_buf_p) = (yytext_ptr) + offset;
                    break;
            }
        }
    }

    c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
    *(yy_c_buf_p) = '\0';	/* preserve yytext */
    (yy_hold_char) = *++(yy_c_buf_p);

    YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

    return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 *
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyrestart  (FILE * input_file )
{

    if ( ! YY_CURRENT_BUFFER )
    {
        yyensure_buffer_stack ();
        YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin, YY_BUF_SIZE );
    }

    yy_init_buffer(YY_CURRENT_BUFFER, input_file );
    yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 *
 */
void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{

    /* TODO. We should be able to replace this entire function body
     * with
     *		yypop_buffer_state();
     *		yypush_buffer_state(new_buffer);
     */
    yyensure_buffer_stack ();
    if ( YY_CURRENT_BUFFER == new_buffer )
    {
        return;
    }

    if ( YY_CURRENT_BUFFER )
    {
        /* Flush out information for old buffer. */
        *(yy_c_buf_p) = (yy_hold_char);
        YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
    }

    YY_CURRENT_BUFFER_LVALUE = new_buffer;
    yy_load_buffer_state( );

    /* We don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    (yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
    (yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
    yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
    (yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 *
 * @return the allocated buffer state.
 */
YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
    if ( ! b )
    {
        YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
    }

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
    if ( ! b->yy_ch_buf )
    {
        YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
    }

    b->yy_is_our_buffer = 1;

    yy_init_buffer(b, file );

    return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 *
 */
void yy_delete_buffer (YY_BUFFER_STATE  b )
{

    if ( ! b )
    {
        return;
    }

    if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
    {
        YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;
    }

    if ( b->yy_is_our_buffer )
    {
        yyfree((void *) b->yy_ch_buf  );
    }

    yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
    int oerrno = errno;

    yy_flush_buffer(b );

    b->yy_input_file = file;
    b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER)
    {
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

    b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;

    errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 *
 */
void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    if ( ! b )
    {
        return;
    }

    b->yy_n_chars = 0;

    /* We always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[0];

    b->yy_at_bol = 1;
    b->yy_buffer_status = YY_BUFFER_NEW;

    if ( b == YY_CURRENT_BUFFER )
    {
        yy_load_buffer_state( );
    }
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    if (new_buffer == NULL)
    {
        return;
    }

    yyensure_buffer_stack();

    /* This block is copied from yy_switch_to_buffer. */
    if ( YY_CURRENT_BUFFER )
    {
        /* Flush out information for old buffer. */
        *(yy_c_buf_p) = (yy_hold_char);
        YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
    }

    /* Only push if top exists. Otherwise, replace top. */
    if (YY_CURRENT_BUFFER)
    {
        (yy_buffer_stack_top)++;
    }
    YY_CURRENT_BUFFER_LVALUE = new_buffer;

    /* copied from yy_switch_to_buffer. */
    yy_load_buffer_state( );
    (yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *
 */
void yypop_buffer_state (void)
{
    if (!YY_CURRENT_BUFFER)
    {
        return;
    }

    yy_delete_buffer(YY_CURRENT_BUFFER );
    YY_CURRENT_BUFFER_LVALUE = NULL;
    if ((yy_buffer_stack_top) > 0)
    {
        --(yy_buffer_stack_top);
    }

    if (YY_CURRENT_BUFFER)
    {
        yy_load_buffer_state( );
        (yy_did_buffer_switch_on_eof) = 1;
    }
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
    yy_size_t num_to_alloc;

    if (!(yy_buffer_stack))
    {

        /* First allocation is just for 2 elements, since we don't know if this
         * scanner will even need a stack. We use 2 instead of 1 to avoid an
         * immediate realloc on the next call.
         */
        num_to_alloc = 1;
        (yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
                            (num_to_alloc * sizeof(struct yy_buffer_state*)
                            );
        if ( ! (yy_buffer_stack) )
        {
            YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
        }

        memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

        (yy_buffer_stack_max) = num_to_alloc;
        (yy_buffer_stack_top) = 0;
        return;
    }

    if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1)
    {

        /* Increase the buffer to prepare for a possible push. */
        int grow_size = 8 /* arbitrary grow size */;

        num_to_alloc = (yy_buffer_stack_max) + grow_size;
        (yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
                            ((yy_buffer_stack),
                             num_to_alloc * sizeof(struct yy_buffer_state*)
                            );
        if ( ! (yy_buffer_stack) )
        {
            YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
        }

        /* zero only the new slots.*/
        memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
        (yy_buffer_stack_max) = num_to_alloc;
    }
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
    YY_BUFFER_STATE b;

    if ( size < 2 ||
            base[size - 2] != YY_END_OF_BUFFER_CHAR ||
            base[size - 1] != YY_END_OF_BUFFER_CHAR )
        /* They forgot to leave room for the EOB's. */
    {
        return 0;
    }

    b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
    if ( ! b )
    {
        YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );
    }

    b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
    b->yy_buf_pos = b->yy_ch_buf = base;
    b->yy_is_our_buffer = 0;
    b->yy_input_file = 0;
    b->yy_n_chars = b->yy_buf_size;
    b->yy_is_interactive = 0;
    b->yy_at_bol = 1;
    b->yy_fill_buffer = 0;
    b->yy_buffer_status = YY_BUFFER_NEW;

    yy_switch_to_buffer(b  );

    return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 *
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{

    return yy_scan_bytes(yystr, strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
    YY_BUFFER_STATE b;
    char *buf;
    yy_size_t n;
    yy_size_t i;

    /* Get memory for full buffer, including space for trailing EOB's. */
    n = _yybytes_len + 2;
    buf = (char *) yyalloc(n  );
    if ( ! buf )
    {
        YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );
    }

    for ( i = 0; i < _yybytes_len; ++i )
    {
        buf[i] = yybytes[i];
    }

    buf[_yybytes_len] = buf[_yybytes_len + 1] = YY_END_OF_BUFFER_CHAR;

    b = yy_scan_buffer(buf, n );
    if ( ! b )
    {
        YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );
    }

    /* It's okay to grow etc. this buffer, and we should throw it
     * away when we're done.
     */
    b->yy_is_our_buffer = 1;

    return b;
}

static void yy_push_state (int  new_state )
{
    if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
    {
        yy_size_t new_size;

        (yy_start_stack_depth) += YY_START_STACK_INCR;
        new_size = (yy_start_stack_depth) * sizeof( int );

        if ( ! (yy_start_stack) )
        {
            (yy_start_stack) = (int *) yyalloc(new_size  );
        }

        else
        {
            (yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack), new_size  );
        }

        if ( ! (yy_start_stack) )
        {
            YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
        }
    }

    (yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

    BEGIN(new_state);
}

static void yy_pop_state  (void)
{
    if ( --(yy_start_stack_ptr) < 0 )
    {
        YY_FATAL_ERROR( "start-condition stack underflow" );
    }

    BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

static int yy_top_state  (void)
{
    return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    (void) fprintf( stderr, "%s\n", msg );
    exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 *
 */
int yyget_lineno  (void)
{

    return yylineno;
}

/** Get the input stream.
 *
 */
FILE *yyget_in  (void)
{
    return yyin;
}

/** Get the output stream.
 *
 */
FILE *yyget_out  (void)
{
    return yyout;
}

/** Get the length of the current token.
 *
 */
yy_size_t yyget_leng  (void)
{
    return yyleng;
}

/** Get the current token.
 *
 */

char *yyget_text  (void)
{
    return yytext;
}

/** Set the current line number.
 * @param line_number
 *
 */
void yyset_lineno (int  line_number )
{

    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 *
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
    yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
    yyout = out_str ;
}

int yyget_debug  (void)
{
    return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
    yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
    /* Initialization is the same as for the non-reentrant scanner.
    * This function is called from yylex_destroy(), so don't allocate here.
    */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

    /* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{

    /* Pop the buffer stack, destroying each element. */
    while (YY_CURRENT_BUFFER)
    {
        yy_delete_buffer(YY_CURRENT_BUFFER  );
        YY_CURRENT_BUFFER_LVALUE = NULL;
        yypop_buffer_state();
    }

    /* Destroy the stack itself. */
    yyfree((yy_buffer_stack) );
    (yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
    yyfree((yy_start_stack)  );
    (yy_start_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
    register int i;
    for ( i = 0; i < n; ++i )
    {
        s1[i] = s2[i];
    }
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
    register int n;
    for ( n = 0; s[n]; ++n )
        ;

    return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
    return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
    /* The cast to (char *) in the following accommodates both
     * implementations that use char* generic pointers, and those
     * that use void* generic pointers.  It works with the latter
     * because both ANSI C and C++ allow castless assignment from
     * any pointer type to void*, and deal with argument conversions
     * as though doing an assignment.
     */
    return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
    free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

int scan_throw(int token)
{
    last_token = token;
#ifdef DEV
    std::cout << "--> [DEBUG] TOKEN : " << token << std::endl;
#endif
    return token;
}

int get_last_token()
{
    return last_token;
}

void scan_step()
{
    yylloc.first_line = yylloc.last_line;
    yylloc.first_column = yylloc.last_column;
}

void scan_error(std::string msg)
{
    wchar_t* pstMsg = to_wide_string(msg.c_str());

    //std::wcerr << pstMsg << std::endl;
    ParserSingleInstance::PrintError(pstMsg);
    ParserSingleInstance::setExitStatus(Parser::Failed);
    ParserSingleInstance::resetControlStatus();
    FREE(pstMsg);
    last_token = YYEOF;
    BEGIN(INITIAL);
}

/*
** convert floating numbers to C standard
** 1.2d-3 -> 1.2e-3
** 1.2D-3 -> 1.2e-3
*/
void scan_exponent_convert(char *in)
{
    for (; *in != 'd' && *in != 'D'; ++in);
    *in = 'e';
}

#ifdef _MSC_VER
int isatty (int desc)
{
    return 0;
}
#endif

