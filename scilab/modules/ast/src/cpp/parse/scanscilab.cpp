
#line 3 "src/cpp/parse/scanscilab.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types.
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

#define YY_LESS_LINENO(n)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
{
FILE *yy_input_file;

char *yy_ch_buf;		/* input buffer */
char *yy_buf_pos;		/* current position in input buffer */

/* Size of input buffer in bytes, not including room for EOB
 * characters.
 */
yy_size_t yy_buf_size;

/* Number of characters read into yy_ch_buf, not including EOB
 * characters.
 */
int yy_n_chars;

/* Whether we "own" the buffer - i.e., we know we created it,
 * and can realloc() it to grow it, and should free() it to
 * delete it.
 */
int yy_is_our_buffer;

/* Whether this is an "interactive" input source; if so, and
 * if we're using stdio for input, then we want to use getc()
 * instead of fread(), to make sure we stop fetching input after
 * each newline.
 */
int yy_is_interactive;

/* Whether we're considered to be at the beginning of a line.
 * If so, '^' rules will be active on the next match, otherwise
 * not.
 */
int yy_at_bol;

int yy_bs_lineno; /**< The line count. */
int yy_bs_column; /**< The column count. */

/* Whether to try to fill the input buffer when we reach the
 * end of it.
 */
int yy_fill_buffer;

int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
/* When an EOF's been seen but there's still some text to process
 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
 * shouldn't try reading from the input source any more.  We might
 * still have a bunch of tokens to match, though, because of
 * possible backing-up.
 *
 * When we actually see the EOF, we change the status to "new"
 * (via yyrestart()), so that the user can continue scanning by
 * just pointing yyin at a new input file.
 */
#define YY_BUFFER_EOF_PENDING 2

};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file, int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b, FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes, int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *, yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 147
#define YY_END_OF_BUFFER 148
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
{
flex_int32_t yy_verify;
flex_int32_t yy_nxt;
};
static yyconst flex_int16_t yy_acclist[969] =
{
0,
16407,  148,   81,  147,   77,   81,  147,   78,  147,   78,
81,  147,   75,   81,  147,   72,   81,  147,   26,   81,
147,   72,   81,  147,   29,   81,  147,   76,   81,  147,
33,   81,  147,   34,   81,  147,   47,   81,  147,   46,
81,  147,   36,   81,  147,   45,   81,  147,   66,   81,
147,   48,   81,  147,   68,   81,  147,   37,   81,  147,
35,   81,  147,   59,   81,  147,   63,   81,  147,   60,
81,  147,   72,   81,  147,   25,   81,  147,   64,   81,
147,   49,   81,  147,   65,   81,  147,   50,   81,  147,
72,   81,  147,   72,   81,  147,   72,   81,  147,   72,

81,  147,   72,   81,  147,   72,   81,  147,   72,   81,
147,   72,   81,  147,   72,   81,  147,   72,   81,  147,
72,   81,  147,   72,   81,  147,   38,   81,  147,   31,
81,  147,   39,   81,  147,   25,   81,  147,   81,  147,
81,  147,   81,  147,   81,  147,   81,  147,   81,  147,
81,  147,   81,  147,   77,   81,  147, 16407,   72,   81,
147,   26,   81,  147,   72,   81,  147,   72,   81,  147,
72,   81,  147,   72,   81,  147,   72,   81,  147,   72,
81,  147,   72,   81,  147,   72,   81,  147,   72,   81,
147,   72,   81,  147,   72,   81,  147,   72,   81,  147,

72,   81,  147,   72,   81,  147,   81,  147,   81,  147,
81,  147,   81,  147,   81,  147,   81,  147,   81,  147,
81,  147,  127,  147,  126,  147,  126,  127,  147,  124,
127,  147,  123,  127,  147,  127,  147,  136,  147,  135,
147,  135,  136,  147,  132,  136,  147,  133,  136,  147,
136,  147,  118,  147,  117,  147,  117,  118,  147,  118,
147,  118,  147,  114,  147,  113,  147,  113,  114,  147,
112,  147,  111,  112,  147,  108,  147,  108,  112,  147,
112,  147,   94,  147,   77,   94,  147,   84,  147,   84,
94,  147,   75,   94,  147,   72,   94,  147,   26,   94,

147,   72,   94,  147,   29,   94,  147,   76,   94,  147,
33,   82,   94,  147,   34,   94,  147,   47,   94,  147,
87,   94,  147,   36,   94,  147,   88,   94,  147,   66,
94,  147,   48,   94,  147,   68,   94,  147,   37,   83,
94,  147,   35,   94,  147,   59,   94,  147,   63,   94,
147,   60,   94,  147,   25,   94,  147,   64,   94,  147,
49,   94,  147,   85,   94,  147,   50,   94,  147,   38,
94,  147,   31,   94,  147,   86,   94,  147,   25,   94,
147,   94,  147,   94,  147,   94,  147,   94,  147,   94,
147,   94,  147,   94,  147,   94,  147,  107,  147,  104,

107,  147,  147,  103,  107,  147,  107,  147,  105,  107,
147,  106,  107,  147,   98,  107,  147,   97,  107,  147,
107,  147,   99,  107,  147,  107,  147,  107,  147,  107,
147,  107,  147,  107,  147,  107,  147,  107,  147,  107,
147,  146,  147,  137,  147,  140,  147,  140,  147,   75,
147,   76,  147,  142,  146,  147,  139,  147,  138,  147,
143,  146,  147,  141,  146,  147,  144,  146,  147,  145,
146,  147,   24,  147,  147,   24,  147,   24,  147,   24,
147,   24,  147,   24,  147,   24,  147,   24,  147,   24,
147,   24,  147,   24,  147,   24,  147,   24,  147,   24,

147,  147,  147,  147,  147,  147,  147,  147,  147,   77,
79,   79,   78,   72,   72,   72,   28,   72,   27,   72,
30,   50,   40,   41,   67,   42,   71,   43,   44,   73,
74,   70,   68,   61,   58,   57,   62,   72,   72,   72,
16,   72,   72,   72,   72,   72,   72,    1,   72,   72,
72,   72,   72,   72,   72,   72,   32,   72,   77, 16407,
72,   72,   72,   28,   72,   27,   72,   72,   72,   72,
16,   72,   72,   72,   72,   72,   72,    1,   72,   72,
72,   72,   72,   72,   72,   72,   72,  126,  119,  120,
121,  122,  135,  128,  129,  130,  131,  117,  115,  116,

113,  111,  108,  109,  110,   77,   82,   83,   84,   83,
104,  103,  103,  101,  100,   99,  103,  146,  137,  140,
24,   24,   24,   24,   24,   24,   16,   24,   24,   24,
24,   24,   24,    1,   24,   24,   24,   24,   24,   24,
24,   24,   24,   80,   80,   72,   54,   51,   52,   53,
55,   70,   69,   56,   72,   72,   72,   72,   72,    5,
72,   14,   72,   72,   72,   72,   72,   72,   72,   72,
72,   19,   72,   72, 8215,   72,   72,   72,   72,   72,
72,    5,   72,   14,   72,   72,   72,   72,   72,   72,
72,   72,   72,   19,   72,   72,  125,  125,  134,  134,

93,   89,   95,   95,  100,  102,   24,   24,   24,   24,
24,   24,    5,   24,   14,   24,   24,   24,   24,   24,
24,   24,   24,   24,   19,   24,   24,   72,   72,    9,
72,   72,   72,    3,   72,   72,   72,   72,   72,   72,
72,   72,   72,    2,   72,   72,   72,   72,   72,    9,
72,   72,   72,    3,   72,   72,   72,   72,   72,   72,
72,   72,   72,    2,   72,   72,   72,   93,   93,   92,
90,   96,  103,   24,   24,    9,   24,   24,   24,    3,
24,   24,   24,   24,   24,   24,   24,   24,   24,    2,
24,   24,   24,   72,   72,   72,   17,   72,   20,   72,

72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
15,   72,   72,   72,   72,   17,   72,   20,   72,   72,
72,   72,   72,   72,   72,   72,   72,   72,   72,   15,
72,   90,   91,  103,  103,   24,   24,   24,   17,   24,
20,   24,   24,   24,   24,   24,   24,   24,   24,   24,
24,   24,   15,   24,   72,   72,    4,   72,   72,   72,
13,   72,   72,   22,   72,   21,   72,    6,   72,    7,
72,   72,   72,    4,   72,   72,   72,   13,   72,   72,
22,   72,   21,   72,    6,   72,    7,   72,   93,   24,
24,    4,   24,   24,   24,   13,   24,   24,   22,   24,

21,   24,    6,   24,    7,   24,   72,   72,   72,   72,
72,   72,   72,   72,   72,   72,   93,   93,   24,   24,
24,   24,   24,   72,   18,   72,   72,   10,   72,   72,
72,   18,   72,   72,   10,   72,   72,   24,   18,   24,
24,   10,   24,   24,   12,   72,   72,    8,   72,   12,
72,   72,    8,   72,   12,   24,   24,    8,   24,   72,
72,   24,   11,   72,   11,   72,   11,   24
} ;

static yyconst flex_int16_t yy_accept[937] =
{
0,
1,    1,    2,    2,    2,    2,    2,    2,    2,    2,
2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
2,    3,    5,    8,   10,   13,   16,   19,   22,   25,
28,   31,   34,   37,   40,   43,   46,   49,   52,   55,
58,   61,   64,   67,   70,   73,   76,   79,   82,   85,
88,   91,   94,   97,  100,  103,  106,  109,  112,  115,
118,  121,  124,  127,  130,  133,  136,  139,  141,  143,
145,  147,  149,  151,  153,  155,  159,  162,  165,  168,
171,  174,  177,  180,  183,  186,  189,  192,  195,  198,
201,  204,  207,  209,  211,  213,  215,  217,  219,  221,

223,  225,  227,  230,  233,  236,  238,  240,  242,  245,
248,  251,  253,  255,  257,  260,  262,  264,  266,  268,
271,  273,  276,  278,  281,  283,  285,  288,  290,  293,
296,  299,  302,  305,  308,  311,  315,  318,  321,  324,
327,  330,  333,  336,  339,  343,  346,  349,  352,  355,
358,  361,  364,  367,  370,  373,  376,  379,  382,  384,
386,  388,  390,  392,  394,  396,  398,  400,  403,  404,
407,  409,  412,  415,  418,  421,  423,  426,  428,  430,
432,  434,  436,  438,  440,  442,  444,  446,  448,  450,
452,  454,  457,  459,  461,  464,  467,  470,  473,  475,

476,  478,  480,  482,  484,  486,  488,  490,  492,  494,
496,  498,  500,  502,  503,  504,  505,  506,  507,  508,
509,  510,  511,  512,  513,  513,  513,  514,  515,  516,
516,  516,  516,  516,  516,  516,  516,  516,  517,  517,
517,  517,  517,  517,  517,  517,  517,  519,  521,  522,
523,  523,  524,  525,  526,  527,  528,  529,  530,  531,
531,  532,  533,  534,  534,  534,  535,  536,  536,  537,
537,  538,  538,  538,  539,  540,  541,  543,  544,  545,
546,  547,  548,  550,  551,  552,  553,  554,  555,  556,
557,  558,  558,  559,  559,  559,  559,  559,  559,  559,

559,  561,  561,  561,  561,  561,  561,  561,  561,  561,
561,  561,  561,  562,  563,  563,  563,  563,  563,  563,
563,  563,  563,  564,  564,  564,  564,  564,  564,  564,
564,  564,  566,  568,  569,  570,  571,  573,  574,  575,
576,  577,  578,  580,  581,  582,  583,  584,  585,  586,
587,  588,  588,  588,  588,  588,  588,  588,  588,  589,
590,  591,  592,  593,  593,  594,  595,  596,  597,  598,
598,  599,  600,  601,  602,  603,  604,  605,  606,  607,
608,  608,  609,  610,  610,  611,  612,  613,  613,  613,
613,  613,  613,  613,  613,  613,  614,  614,  614,  614,

614,  614,  614,  614,  614,  615,  616,  617,  617,  618,
618,  618,  618,  618,  618,  618,  618,  619,  620,  621,
622,  623,  623,  623,  623,  623,  623,  623,  623,  623,
624,  624,  624,  624,  624,  624,  624,  624,  624,  625,
626,  627,  629,  630,  631,  632,  633,  634,  636,  637,
638,  639,  640,  641,  642,  643,  644,  644,  644,  644,
644,  644,  644,  644,  645,  646,  647,  647,  647,  647,
647,  647,  647,  647,  647,  647,  647,  647,  647,  647,
647,  648,  649,  650,  651,  652,  653,  653,  654,  655,
656,  657,  658,  659,  660,  662,  664,  665,  666,  667,

668,  669,  670,  671,  672,  674,  675,  675,  675,  675,
675,  675,  675,  675,  675,  675,  675,  675,  675,  675,
675,  675,  675,  675,  675,  675,  675,  675,  675,  675,
675,  675,  675,  675,  675,  676,  677,  677,  677,  677,
677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
677,  678,  679,  680,  681,  682,  684,  686,  687,  688,
689,  690,  691,  692,  693,  694,  696,  697,  697,  697,
697,  698,  699,  700,  701,  702,  702,  702,  702,  703,
703,  703,  703,  703,  703,  703,  703,  703,  703,  704,
705,  705,  705,  705,  705,  705,  705,  705,  705,  705,

705,  705,  705,  705,  705,  705,  706,  706,  707,  707,
707,  707,  708,  708,  708,  708,  708,  708,  708,  708,
708,  708,  708,  708,  708,  708,  708,  709,  710,  711,
712,  713,  715,  717,  718,  719,  720,  721,  722,  723,
724,  725,  727,  728,  728,  728,  728,  729,  729,  729,
729,  729,  729,  729,  730,  732,  733,  734,  736,  737,
738,  739,  740,  741,  742,  743,  744,  746,  747,  748,
748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
748,  748,  748,  748,  748,  748,  748,  749,  749,  749,
749,  749,  749,  749,  750,  752,  753,  754,  756,  757,

758,  759,  760,  761,  762,  763,  764,  766,  767,  768,
769,  769,  769,  769,  769,  769,  769,  769,  769,  770,
770,  770,  770,  770,  770,  770,  770,  770,  771,  772,
772,  772,  772,  772,  772,  772,  772,  772,  773,  773,
773,  773,  773,  773,  773,  774,  775,  775,  775,  775,
775,  775,  775,  776,  778,  779,  780,  782,  783,  784,
785,  786,  787,  788,  789,  790,  792,  793,  794,  795,
796,  797,  799,  801,  802,  803,  804,  805,  806,  807,
808,  809,  810,  811,  813,  813,  813,  813,  813,  813,
813,  813,  814,  815,  816,  818,  820,  821,  822,  823,

824,  825,  826,  827,  828,  829,  830,  832,  832,  832,
832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
832,  832,  833,  833,  834,  834,  834,  834,  835,  836,
837,  838,  839,  841,  843,  844,  845,  846,  847,  848,
849,  850,  851,  852,  853,  855,  856,  857,  859,  860,
861,  863,  864,  866,  868,  870,  872,  872,  872,  873,
874,  876,  877,  878,  880,  881,  883,  885,  887,  889,
889,  889,  889,  889,  889,  889,  890,  891,  892,  894,
895,  896,  898,  899,  901,  903,  905,  907,  908,  909,
910,  911,  912,  913,  914,  915,  916,  917,  918,  919,

920,  921,  922,  923,  924,  925,  927,  928,  930,  931,
932,  934,  935,  937,  938,  939,  941,  942,  944,  945,
947,  948,  950,  952,  953,  955,  957,  958,  960,  961,
962,  963,  965,  967,  969,  969
} ;

static yyconst flex_int32_t yy_ec[256] =
{
0,
1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
2,    2,    4,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    2,    1,    5,    6,    7,    8,    9,   10,   11,
12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
23,   24,   25,   26,   25,   25,   25,   27,   27,   28,
25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
25,   25,   25,   29,   25,   25,   25,   25,   25,   25,
30,   31,   32,   33,   25,    1,   34,   35,   36,   37,

38,   39,   25,   40,   41,   25,   42,   43,   44,   45,
46,   25,   25,   47,   48,   49,   50,   25,   51,   25,
52,   25,   53,   54,   55,   56,    1,   57,   57,   57,
57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
57,   57,   57,   58,   58,   58,   58,   58,   58,   58,
58,   58,   58,   58,   58,   58,   58,   58,   58,   59,
59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
59,    1,    1,   60,   60,   60,   60,   60,   60,   60,

60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
60,   60,   60,   61,   62,   62,   62,   62,   62,   62,
62,   62,   62,   62,   62,   62,   63,   64,   64,   65,
66,   66,   66,   67,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1
} ;

static yyconst flex_int32_t yy_meta[68] =
{
0,
1,    2,    3,    3,    4,    5,    5,    6,    1,    4,
7,    1,    1,    1,    4,    1,    8,    1,    9,    1,
4,   10,   10,   10,    5,   10,    5,    5,    5,    1,
1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
5,    5,    1,    1,    1,   10,    1,    1,    1,    5,
5,    5,    5,    5,    5,    5,    5
} ;

static yyconst flex_int16_t yy_base[961] =
{
0,
0,   67,  132,  135,  143,  151,  154,  160,  140,  147,
167,  172,  190,    0,  257,    0,  323,  378,  434,    0,
2224, 3281,  177,  327,  337, 3281,  302,  310,  474, 2214,
3281, 3281, 3281,  149, 3281, 3281, 3281,  377,  169,  386,
3281, 3281,  330,  328,  333,  378,  334, 3281, 2197, 3281,
3281,  383,  476,  478,  503,  480,  515,  521,  529,  533,
537,  545,  551, 3281, 2159, 3281,  395,  302, 2148,  327,
126,  357,  130,  362, 2145,  599,  557,  547,  665,  576,
598,  600,  602,  629,  604,  641,  647,  656,  659,  671,
695,  663,  540, 2141,  658,  334,  679,  367,  682, 2137,

3281, 3281, 2189,  345,  423, 2172, 3281, 3281, 2181,  506,
523, 2161, 3281, 3281, 2168, 2148, 2151, 3281, 3281, 2160,
3281, 2154, 3281, 2150,  622, 3281,  743,  741,  746, 3281,
736,  716,    0, 2135, 3281, 3281, 3281,  501, 3281, 3281,
3281,  774,  753,  771, 2140, 3281,  749,  593,  650,  654,
3281, 2119, 3281, 3281, 3281, 2076, 3281,  751,  737, 2067,
742,  463,  745,  648,  753, 2046, 3281, 2100, 3281,  753,
761, 3281, 3281, 3281, 3281, 2016,  812,  775, 1939,  778,
661,  783,  710,  786, 1930,    0, 1946, 3281, 1908, 3281,
3281,    0, 3281, 3281,    0,    0,    0,    0,  791,  799,

807, 1860,  131, 1858,  386,  501, 1853, 1848, 1824, 1830,
604,  835, 1826,  789, 1804,  819,  822,  826,  828,  831,
1803,  889, 3281, 1853,  892,  895,  899,  876,  880,  864,
1790,  869,  845,  874,  853,  877, 1785,    0,  880, 1780,
883,  860,  886,  888,  891, 1777,  923,  925, 3281, 3281,
0, 3281,  550, 1686, 1684,  938, 1674, 3281, 3281,    0,
3281,  940,  944,  736,  956, 3281, 3281,  964, 3281,  966,
3281,  967,    0,  955,  957,  963,  970,  972,  985,  988,
997, 1001, 1004, 1016, 1019, 1023, 1032, 1041, 1035, 1047,
3281,  995, 1054, 1040, 1043, 1047, 1050, 1053, 1056, 1059,

1117, 1075, 1065, 1086, 1630, 1089,  898, 1092, 1033, 1095,
1620, 1658, 1127, 1136, 1100, 1598, 1103, 1037, 1110, 1064,
1113, 1587, 1131, 1130, 1571, 1142, 1116, 1145, 1147, 1150,
1563, 1182, 1184, 1186, 1188, 1200, 1191, 1213, 1218, 1225,
1230, 1248, 1242, 1254, 1260, 1267, 1272, 1276, 1289, 1291,
1294, 1277, 1287, 1290, 1293, 1296, 1299, 1302, 3281, 3281,
3281, 3281, 3281, 1359, 3281, 3281, 3281, 3281, 3281, 1361,
3281, 3281, 3281, 3281, 1614, 3281, 3281, 3281, 1366, 3281,
1380, 1612, 1263, 1371, 1610, 1604, 1340, 1326, 1543, 1335,
1186, 1351, 1192, 1354, 1413, 1354, 1365, 1406, 1368, 1269,

1371, 1308, 1374, 1400, 1429, 1431, 1434, 1323,    0, 1377,
1380, 1405, 1416, 1419, 1422, 1425,    0, 1450, 3281,    0,
1399, 1428, 1339, 1431, 1314, 1434, 1337, 1437, 1333, 1437,
1448, 1322, 1451, 1397, 1454, 1401, 1457, 1322, 1293, 1469,
1284,    0, 1276, 1275, 1260, 1257, 1261,    0, 1252, 1471,
1247, 1245, 1242, 1221, 1227,    0, 1464, 1467, 1470, 1473,
1476, 1479, 1482, 3281, 1263, 1514, 1487, 1490, 1493, 1497,
1503, 1507, 1510, 1513, 1516, 1519, 1522, 1525, 1528, 1531,
3281, 3281, 3281, 3281, 3281, 1572, 1244, 1241, 3281, 1564,
1566, 1572, 1568, 1590, 1594, 1596, 1598, 1603, 1620, 1622,

1625, 1627, 1634, 1639, 1651, 1653, 1628, 1636, 1640, 1644,
1655, 1197, 1658, 1500, 1661, 1663, 1666, 1191, 1668, 1679,
1179, 1682, 1669, 1685, 1687, 1690, 1177, 1693, 1696, 1699,
1702, 1705, 1708, 1711, 3281, 1743, 1716, 1719, 1722, 1726,
1732, 1736, 1739, 1742, 1745, 1748, 1751, 1754, 1757, 1760,
1792, 1794, 1799, 1801, 1808, 1816, 1823, 1825, 1830, 1842,
1847, 1849, 1854, 1856, 1861, 1873, 1880, 1856, 1859, 1867,
3281, 1229, 3281, 1223, 1870, 1878, 1939, 1203, 1930, 1894,
1159, 1902, 1729, 1905, 1766, 1912, 1133, 1970, 3281, 1160,
1116, 1918, 1921, 1924, 1927, 1932, 1935, 1938, 1950, 1953,

1956, 1959, 1962, 1965, 1968, 2009, 1070, 1066, 1972, 1975,
1980, 1033, 1983, 1986, 1991, 1994, 1997, 2000, 2003, 2006,
2009, 2012, 2015, 2018, 2021, 2024, 1025, 1019, 1018, 1000,
1003, 1000,    0,  995,  991,  985,  965,  960,  969,  954,
950,    0,  945, 2027, 2030, 2033, 2065, 2038, 2041, 2048,
2051, 2054, 2058, 2090, 2092, 2094, 2096, 2099, 2118, 2121,
2123, 2126, 2130, 2148, 2152, 2154, 2157, 2170, 2176, 2153,
2159, 2163, 2169, 2172, 2175, 2178, 2181, 2184, 2187, 2190,
2193, 2196, 2199, 2202, 2205, 2208, 2240, 2213, 2216, 2223,
2226, 2229, 2233, 2265, 2267, 2269, 2271, 2274, 2293, 2296,

2298, 2301, 2305, 2323, 2327, 2329, 2332, 2345, 2351, 2341,
2328,  914, 2334, 1863, 2338, 1869, 2352,  913, 2352, 2363,
901, 2366, 1897, 2369, 1907, 2372,  867, 2413, 2415, 1622,
2378, 2386, 2389, 2397, 2400, 2403, 2406, 3281, 2409, 2412,
2415, 2418, 2421, 2424,    0,  870, 2427, 2430, 2433, 2436,
2439, 2442,  858,    0,  841,  797,  765,  747,  740,  748,
713,  714,  686,  685,  677,    0,  673,    0, 2474, 2476,
0, 2478, 2480, 2483, 2492, 2505, 2507, 2510, 2514, 2523,
2529, 2538, 2541, 2547, 2525, 2534, 2540, 2543, 2546, 2549,
0, 2581, 2583,    0, 2585, 2587, 2590, 2599, 2612, 2614,

2617, 2621, 2630, 2636, 2645, 2648, 2654, 2632, 2641, 2647,
2650, 2653, 2656, 2659, 2662, 2665, 2668, 2671, 2674, 2677,
2680, 2721,  682,  670, 2684, 2687, 2692,    0,    0,  634,
0,    0,    0,    0,  636,  640,  626,  603,  593,  585,
555,  544,  538,  543,    0, 2724, 2727, 2732, 2739, 2741,
2754, 2756, 2763, 2770, 2772, 2778,    0,    0, 2785, 2794,
2800, 2802, 2807, 2819, 2826, 2831, 2833, 2835, 2848, 2831,
2834, 2837, 2841, 2844, 2847,    0,  540,  527,    0,  533,
509,    0,  512,    0,    0,    0,    0, 2879, 2881, 2883,
2888, 2895, 2907, 2910, 2912, 2926, 2929,    0,    0,  499,

474,  360,  353,  330, 2934, 2941, 2953, 2956, 2958, 2970,
2972, 2975, 2984, 2989,  298,    0,  296,    0,  293, 2997,
3001, 3003, 3006, 3015, 3020,    0,  113,    0, 3028, 3037,
96, 3042, 3046,    0, 3281, 3095, 3105, 3115, 3125, 3135,
3145, 3151, 3156, 3164, 3169, 3174, 3179, 3184, 3193, 3199,
3204, 3213, 3223, 3233, 3242, 3247, 3256, 3261, 3266, 3271
} ;

static yyconst flex_int16_t yy_def[961] =
{
0,
935,  935,  936,  936,  937,  937,  938,  938,  939,  939,
940,  940,  935,   13,  935,   15,  941,  941,  935,   19,
935,  935,  935,  935,  935,  935,  942,  943,  942,  935,
935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
935,  935,  935,  935,  935,   29,  935,  935,  935,  935,
935,   29,   29,   29,   29,   29,   29,   29,   29,   29,
29,   29,   29,  935,  935,  935,  935,  935,  935,  935,
935,  935,  935,  935,  935,  944,  945,  946,  945,   79,
79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
79,   79,  935,  935,  935,  935,  935,  935,  935,  935,

935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
29,  943,   29,  935,  935,  935,  935,  935,  935,  935,
935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
935,  935,  935,  935,  935,  935,  935,  935,  935,  947,
948,  935,  935,  935,  935,  935,  935,  935,  935,  935,
935,  935,  935,  935,  935,  949,  935,  935,  935,  935,
935,  949,  935,  935,  949,  949,  949,  949,  950,  951,

950,  201,  201,  201,  201,  201,  201,  201,  201,  201,
201,  201,  201,  935,  935,  935,  935,  935,  935,  935,
935,  935,  935,  935,  935,  935,  935,   29,   29,  935,
935,  935,  935,  935,  935,  935,  935,  132,  935,  935,
935,  935,  935,  935,  935,  935,   29,   29,  935,  935,
952,  935,  935,  935,  935,  935,  935,  935,  935,  953,
935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
935,  935,  954,   29,   29,   29,   29,   29,   29,   29,
29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
935,  935,   29,  935,  935,  935,  935,  935,  935,  935,

944,  955,  956,  935,  935,  935,  935,  935,  935,  935,
935,  957,   79,   79,  935,  935,  935,  935,  935,  935,
935,  935,  946,  935,  935,  935,  935,  935,  935,  935,
935,   79,   79,   79,   79,   79,   79,   79,   79,   79,
79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
79,  935,  935,  935,  935,  935,  935,  935,  935,  935,
935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
958,  935,  935,  935,  935,  935,  947,  935,  935,  935,
935,  935,  935,  935,  935,  948,  935,  935,  935,  935,

935,  935,  935,  935,  935,  935,  935,  935,  387,  935,
935,  935,  935,  935,  935,  935,  949,  935,  935,  201,
201,  935,  935,  935,  935,  935,  935,  935,  935,  951,
935,  935,  935,  935,  935,  935,  935,  935,  201,  201,
201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
201,  201,  201,  201,  201,  201,  935,  935,  935,  935,
935,  935,  935,  935,  935,   29,  935,  935,  935,  935,
935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
935,  935,  935,  935,  935,  935,  935,  935,  935,   29,
29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

29,   29,   29,   29,   29,   29,  935,  935,  935,  955,
935,  935,  935,  935,  935,  935,  935,  935,  956,  935,
935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
935,  935,  935,  935,  935,   79,  935,  935,  935,  935,
935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
79,   79,   79,   79,   79,   79,   79,  935,  935,  935,
935,  935,  935,  935,  959,  960,  958,  935,  935,  935,
935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
935,  935,  935,  935,  935,  935,  935,  935,  935,  935,

935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
935,  201,  935,  935,  935,  935,  935,  935,  935,  935,
935,  935,  935,  935,  935,  935,  201,  201,  201,  201,
201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
201,  201,  201,  935,  935,  935,   29,  935,  935,  935,
935,  935,  935,   29,   29,   29,   29,   29,   29,   29,
29,   29,   29,   29,   29,   29,   29,   29,   29,  935,
935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
935,  935,  935,  935,  935,  935,   79,  935,  935,  935,
935,  935,  935,   79,   79,   79,   79,   79,   79,   79,

79,   79,   79,   79,   79,   79,   79,   79,   79,  959,
935,  935,  935,  935,  935,  935,  935,  935,  960,  935,
935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
935,  935,  935,  935,  387,  201,  935,  935,  935,  935,
935,  935,  201,  201,  201,  201,  201,  201,  201,  201,
201,  201,  201,  201,  201,  201,  201,  201,   29,   29,
132,   29,   29,   29,   29,   29,   29,   29,   29,   29,
29,   29,   29,   29,  935,  935,  935,  935,  935,  935,
510,   79,   79,  323,   79,   79,   79,   79,   79,   79,

79,   79,   79,   79,   79,   79,   79,  935,  935,  935,
935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
935,  935,  935,  935,  935,  935,  935,  387,  396,  201,
201,  430,  201,  201,  201,  201,  201,  201,  201,  201,
201,  201,  201,  201,  201,   29,   29,   29,   29,   29,
29,   29,   29,   29,   29,   29,  510,  519,   79,   79,
79,   79,   79,   79,   79,   79,   79,   79,   79,  935,
935,  935,  935,  935,  935,  710,  201,  201,  201,  201,
201,  201,  201,  201,  201,  201,  201,   29,   29,   29,
29,   29,   79,   79,   79,   79,   79,  710,  719,  201,

201,  201,  201,  201,   29,   29,   29,   29,   29,   79,
79,   79,   79,   79,  201,  201,  201,  201,  201,   29,
29,   29,   79,   79,   79,  201,  201,  201,   29,   79,
201,   29,   79,  201,    0,  935,  935,  935,  935,  935,
935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
935,  935,  935,  935,  935,  935,  935,  935,  935,  935
} ;

static yyconst flex_int16_t yy_nxt[3349] =
{
0,
22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
42,   43,   44,   45,   46,   47,   46,   46,   46,   48,
49,   50,   51,   46,   52,   53,   54,   55,   56,   57,
58,   46,   46,   46,   46,   59,   60,   61,   62,   46,
63,   46,   64,   65,   66,   67,   22,   22,   22,   68,
69,   70,   71,   72,   73,   74,   75,   22,   76,   24,
25,   26,   77,   78,   79,   30,   31,   32,   33,   34,
35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
45,   80,   47,   80,   80,   80,   48,   49,   50,   51,

80,   81,   82,   83,   84,   85,   86,   87,   80,   80,
80,   80,   88,   89,   90,   91,   80,   92,   80,   64,
65,   66,   67,   22,   22,   22,   93,   94,   95,   96,
97,   98,   99,  100,  102,  103,  104,  102,  103,  104,
934,  105,  119,  120,  105,  108,  109,  110,  106,  119,
120,  106,  111,  108,  109,  110,  114,  115,  931,  112,
111,  250,  114,  115,  440,  251,  116,  112,  122,  123,
124,  117,  116,  122,  123,  124,  441,  117,  222,  223,
224,  259,  296,  296,  125,  260,  261,  298,  298,  125,
126,  127,  128,  129,  130,  131,  132,  133,  134,  135,

136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
146,  147,  148,  149,  131,  150,  131,  131,  131,  151,
152,  153,  154,  131,  131,  131,  131,  131,  131,  131,
131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
131,  131,  155,  156,  157,  158,  126,  126,  126,  159,
160,  161,  162,  163,  164,  165,  166,  167,  168,  169,
167,  167,  170,  171,  170,  167,  167,  172,  173,  167,
174,  167,  175,  176,  167,  177,  167,  167,  167,  167,
167,  170,  167,  170,  170,  170,  167,  167,  167,  167,
170,  170,  170,  170,  170,  170,  170,  170,  170,  170,

170,  170,  170,  170,  170,  170,  170,  170,  170,  167,
167,  167,  167,  167,  167,  167,  178,  179,  180,  181,
182,  183,  184,  185,  187,  188,  189,  190,  225,  268,
928,  265,  191,  192,  270,  272,  927,  193,  225,  227,
229,  226,  926,  194,  195,  196,  197,  226,  198,  360,
269,  226,  266,  267,  361,  271,  267,  226,  293,  293,
293,  230,  231,  232,  233,  234,  235,  236,  237,  239,
240,  241,  242,  243,  244,  245,  246,  919,  198,  187,
188,  189,  190,  295,  295,  295,  252,  191,  192,  253,
354,  354,  193,  254,  255,  256,  292,  918,  194,  195,

196,  197,  262,  198,  263,  228,  228,  257,  917,  258,
228,  228,  264,  297,  297,  297,  228,  267,  299,  299,
299,  228,  264,  264,  356,  356,  228,  362,  443,  274,
444,  228,  363,  198,  169,  169,  169,  169,  169,  199,
200,  201,  169,  169,  169,  169,  169,  169,  169,  169,
169,  169,  169,  169,  169,  169,  169,  169,  201,  169,
201,  201,  201,  169,  169,  169,  169,  201,  202,  203,
204,  205,  206,  207,  208,  201,  201,  201,  201,  209,
210,  211,  212,  201,  213,  201,  169,  169,  169,  169,
169,  169,  169,  214,  215,  216,  217,  218,  219,  220,

221,  247,  248,  228,  228,  228,  228,  228,  228,  275,
366,  916,  247,  250,  228,  367,  228,  251,  228,  296,
296,  276,  248,  277,  228,  280,  228,  368,  228,  281,
228,  228,  369,  230,  231,  232,  233,  234,  235,  236,
237,  228,  228,  228,  915,  278,  445,  279,  228,  228,
446,  228,  904,  228,  903,  282,  228,  228,  312,  283,
228,  228,  258,  228,  228,  228,  482,  228,  902,  228,
285,  228,  228,  228,  286,  228,  901,  284,  228,  228,
900,  228,  887,  228,  288,  228,  886,  287,  885,  228,
290,  289,  884,  228,  268,  314,  351,  351,  351,  228,

301,  223,  224,  313,  313,  303,  324,  325,  326,  327,
328,  329,  330,  331,  313,  269,  315,  316,  317,  318,
319,  320,  321,  322,  313,  313,  313,  313,  313,  313,
313,  313,  313,  335,  377,  883,  313,  882,  313,  378,
313,  451,  313,  881,  334,  336,  313,  337,  313,  340,
313,  270,  313,  341,  452,  272,  313,  313,  304,  305,
306,  307,  308,  309,  310,  311,  312,  313,  313,  313,
880,  338,  271,  339,  313,  313,  267,  313,  879,  313,
878,  342,  877,  313,  313,  343,  313,  313,  824,  313,
313,  313,  332,  333,  313,  313,  345,  313,  313,  313,

824,  313,  350,  332,  344,  298,  298,  313,  346,  313,
845,  313,  844,  333,  353,  353,  353,  412,  412,  313,
843,  347,  313,  313,  315,  316,  317,  318,  319,  320,
321,  322,  842,  313,  348,  355,  355,  355,  357,  357,
357,  349,  225,  313,  379,  223,  224,  225,  383,  487,
265,  487,  292,  380,  488,  226,  381,  841,  381,  840,
226,  226,  382,  228,  228,  259,  226,  414,  414,  260,
261,  266,  267,  267,  228,  239,  240,  241,  242,  243,
244,  245,  246,  252,  228,  839,  253,  262,  838,  263,
384,  255,  256,  293,  293,  293,  837,  264,  295,  295,

295,  297,  297,  297,  257,  836,  258,  264,  264,  299,
299,  299,  388,  389,  390,  391,  392,  393,  394,  395,
397,  398,  399,  400,  401,  402,  403,  404,  406,  421,
407,  409,  409,  409,  411,  411,  411,  835,  408,  413,
413,  413,  415,  415,  415,  456,  456,  456,  408,  408,
422,  423,  424,  425,  426,  427,  428,  429,  431,  432,
433,  434,  435,  436,  437,  438,  422,  423,  424,  425,
426,  427,  428,  429,  453,  458,  458,  458,  459,  459,
834,  454,  460,  460,  460,  461,  461,  462,  462,  462,
222,  223,  224,  225,  464,  465,  225,  464,  465,  833,

225,  469,  469,  228,  228,  830,  226,  228,  228,  226,
471,  471,  226,  226,  228,  226,  476,  476,  228,  226,
228,  228,  228,  821,  228,  468,  468,  468,  228,  466,
470,  470,  470,  472,  472,  472,  238,  238,  238,  475,
475,  475,  477,  477,  477,  478,  478,  479,  479,  479,
228,  228,  228,  228,  530,  530,  256,  265,  486,  815,
262,  228,  263,  228,  264,  268,  264,  270,  272,  814,
264,  228,  808,  228,  264,  264,  264,  264,  266,  267,
264,  264,  228,  228,  228,  228,  269,  767,  271,  267,
228,  228,  490,  228,  766,  228,  292,  228,  228,  228,

228,  228,  765,  228,  491,  492,  764,  493,  228,  763,
228,  228,  228,  228,  762,  228,  228,  267,  228,  494,
228,  495,  761,  228,  228,  228,  228,  760,  228,  228,
759,  228,  228,  228,  496,  228,  228,  498,  758,  228,
757,  497,  228,  228,  228,  228,  228,  228,  756,  228,
228,  228,  228,  755,  228,  499,  754,  228,  753,  228,
228,  228,  228,  228,  228,  502,  500,  501,  228,  228,
228,  228,  503,  228,  228,  228,  312,  746,  504,  228,
228,  228,  228,  228,  608,  228,  505,  506,  608,  228,
532,  532,  228,  539,  539,  228,  293,  293,  293,  293,

293,  293,  228,  293,  293,  293,  293,  293,  293,  507,
507,  507,  508,  508,  508,  509,  509,  509,  301,  223,
224,  541,  541,  303,  520,  521,  522,  523,  524,  525,
526,  527,  312,  738,  511,  512,  513,  514,  515,  516,
517,  518,  302,  302,  302,  529,  529,  529,  531,  531,
531,  533,  533,  533,  313,  313,  313,  313,  313,  538,
538,  538,  589,  313,  313,  313,  540,  540,  540,  542,
542,  542,  546,  546,  313,  313,  304,  305,  306,  307,
308,  309,  310,  311,  313,  536,  323,  323,  323,  737,
324,  325,  326,  327,  328,  329,  330,  331,  545,  545,

545,  547,  547,  547,  548,  548,  549,  549,  549,  313,
313,  313,  313,  313,  313,  313,  313,  731,  313,  313,
313,  728,  313,  551,  313,  573,  313,  313,  313,  313,
313,  571,  313,  683,  313,  552,  553,  677,  313,  313,
313,  313,  594,  594,  554,  313,  313,  676,  313,  596,
596,  313,  313,  313,  556,  670,  313,  313,  313,  488,
555,  313,  488,  313,  225,  464,  313,  643,  313,  313,
313,  557,  642,  313,  558,  313,  313,  226,  313,  641,
313,  313,  313,  226,  559,  640,  313,  313,  313,  639,
313,  636,  313,  560,  313,  313,  313,  635,  313,  313,

313,  634,  313,  313,  313,  313,  633,  561,  562,  563,
313,  632,  564,  565,  313,  313,  313,  313,  313,  313,
313,  313,  313,  631,  313,  601,  601,  313,  630,  313,
627,  567,  313,  351,  351,  351,  607,  313,  607,  313,
566,  608,  313,  351,  351,  351,  351,  351,  351,  351,
351,  351,  568,  568,  568,  569,  569,  569,  570,  570,
570,  571,  572,  573,  574,  603,  603,  379,  223,  224,
615,  615,  588,  589,  590,  364,  380,  370,  626,  381,
620,  381,  387,  387,  387,  382,  576,  384,  591,  619,
577,  593,  593,  593,  617,  617,  578,  613,  579,  388,

389,  390,  391,  392,  393,  394,  395,  595,  595,  595,
597,  597,  597,  397,  398,  399,  400,  401,  402,  403,
404,  396,  396,  396,  600,  600,  600,  602,  602,  602,
604,  604,  604,  409,  409,  409,  409,  409,  409,  580,
581,  582,  583,  584,  585,  586,  587,  405,  612,  606,
406,  418,  407,  622,  622,  408,  605,  408,  624,  624,
408,  409,  409,  409,  599,  408,  408,  408,  408,  598,
408,  408,  409,  409,  409,  609,  609,  609,  610,  610,
610,  611,  611,  611,  420,  420,  420,  614,  614,  614,
616,  616,  616,  618,  618,  618,  431,  432,  433,  434,

435,  436,  437,  438,  430,  430,  430,  621,  621,  621,
623,  623,  623,  625,  625,  625,  628,  629,  637,  638,
456,  456,  456,  456,  456,  456,  456,  456,  456,  456,
456,  456,  644,  644,  644,  645,  645,  645,  646,  646,
646,  228,  228,  228,  228,  228,  228,  228,  228,  228,
228,  228,  228,  228,  228,  228,  672,  672,  647,  648,
648,  648,  228,  649,  649,  649,  650,  650,  650,  238,
238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
238,  651,  651,  651,  652,  652,  652,  653,  653,  653,
486,  228,  228,  228,  228,  228,  228,  654,  264,  228,

228,  592,  228,  655,  228,  386,  228,  656,  264,  264,
228,  385,  228,  385,  228,  375,  657,  228,  228,  550,
228,  228,  228,  228,  228,  228,  228,  658,  228,  544,
228,  228,  659,  660,  228,  823,  228,  823,  228,  661,
824,  228,  228,  543,  228,  312,  228,  228,  228,  228,
228,  228,  228,  228,  228,  228,  537,  662,  228,  312,
228,  228,  228,  228,  665,  228,  228,  228,  228,  312,
228,  663,  228,  228,  664,  228,  534,  228,  228,  228,
228,  228,  666,  667,  669,  669,  669,  228,  528,  228,
484,  228,  669,  669,  669,  668,  669,  669,  669,  228,

483,  228,  254,  511,  512,  513,  514,  515,  516,  517,
518,  510,  510,  510,  671,  671,  671,  673,  673,  673,
674,  674,  675,  675,  675,  679,  679,  520,  521,  522,
523,  524,  525,  526,  527,  519,  519,  519,  678,  678,
678,  680,  680,  680,  681,  681,  682,  682,  682,  302,
302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
302,  684,  684,  684,  685,  685,  685,  686,  686,  686,
313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
313,  313,  313,  313,  313,  733,  733,  687,  688,  688,
688,  313,  689,  689,  689,  690,  690,  690,  323,  323,

323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
691,  691,  691,  692,  692,  692,  693,  693,  693,  313,
313,  313,  313,  735,  735,  694,  313,  313,  313,  313,
313,  695,  313,  480,  696,  313,  313,  313,  474,  313,
313,  473,  313,  313,  313,  698,  313,  313,  467,  697,
313,  313,  313,  313,  699,  223,  313,  313,  313,  463,
700,  313,  457,  313,  313,  455,  701,  450,  313,  313,
313,  313,  449,  313,  313,  313,  313,  313,  313,  702,
313,  313,  313,  313,  313,  313,  448,  313,  313,  313,
313,  705,  313,  447,  313,  313,  703,  313,  704,  313,

313,  313,  313,  442,  706,  707,  439,  313,  313,  313,
419,  313,  709,  709,  709,  709,  709,  709,  313,  810,
810,  313,  708,  709,  709,  709,  812,  812,  313,  711,
712,  713,  714,  715,  716,  717,  718,  720,  721,  722,
723,  724,  725,  726,  727,  576,  729,  418,  579,  577,
575,  575,  575,  817,  817,  578,  730,  579,  732,  732,
732,  734,  734,  734,  819,  819,  730,  730,  736,  736,
736,  588,  589,  590,  387,  387,  387,  387,  387,  387,
387,  387,  387,  387,  387,  387,  416,  591,  739,  739,
739,  740,  740,  740,  741,  741,  741,  410,  580,  581,

582,  583,  584,  585,  586,  587,  396,  396,  396,  396,
396,  396,  396,  396,  396,  396,  396,  396,  742,  742,
742,  743,  743,  743,  744,  744,  744,  606,  745,  745,
745,  745,  745,  745,  405,  408,  745,  745,  745,  420,
420,  420,  420,  420,  420,  408,  408,  420,  420,  420,
420,  420,  420,  747,  747,  747,  748,  748,  748,  749,
749,  749,  430,  430,  430,  430,  430,  430,  430,  430,
430,  430,  430,  430,  750,  750,  750,  751,  751,  751,
752,  752,  752,  768,  768,  768,  768,  768,  768,  768,
768,  768,  228,  228,  770,  770,  770,  770,  770,  770,

769,  386,  300,  228,  770,  770,  770,  771,  771,  771,
771,  771,  771,  228,  771,  771,  771,  228,  228,  228,
228,  228,  228,  228,  228,  294,  228,  228,  228,  291,
228,  772,  228,  773,  228,  273,  774,  228,  228,  775,
228,  385,  228,  249,  228,  228,  228,  228,  228,  228,
228,  228,  376,  228,  228,  375,  228,  228,  228,  228,
778,  228,  374,  373,  228,  372,  228,  776,  228,  777,
371,  228,  779,  780,  228,  228,  228,  370,  228,  228,
228,  228,  228,  365,  228,  228,  228,  782,  364,  783,
228,  359,  228,  358,  781,  228,  228,  228,  228,  352,

228,  300,  228,  228,  228,  228,  294,  784,  228,  510,
510,  510,  291,  273,  228,  510,  510,  510,  228,  510,
510,  510,  249,  935,  228,  510,  510,  510,  785,  785,
785,  786,  786,  786,  787,  787,  787,  519,  519,  519,
519,  519,  519,  519,  519,  519,  519,  519,  519,  788,
788,  788,  789,  789,  789,  790,  790,  790,  791,  791,
791,  791,  791,  791,  791,  791,  791,  313,  313,  793,
793,  793,  793,  793,  793,  792,  935,  935,  313,  793,
793,  793,  794,  794,  794,  794,  794,  794,  313,  794,
794,  794,  313,  313,  313,  313,  313,  313,  313,  313,

935,  313,  313,  313,  935,  313,  795,  313,  796,  313,
935,  797,  313,  313,  798,  313,  935,  313,  935,  313,
313,  313,  313,  313,  313,  313,  313,  935,  313,  313,
935,  313,  313,  313,  313,  801,  313,  935,  935,  313,
935,  313,  799,  313,  800,  935,  313,  802,  803,  313,
313,  313,  935,  313,  313,  313,  313,  313,  935,  313,
313,  313,  805,  935,  806,  313,  935,  313,  935,  804,
313,  313,  313,  313,  935,  313,  935,  313,  313,  313,
313,  935,  807,  313,  710,  710,  710,  935,  935,  313,
809,  809,  809,  313,  811,  811,  811,  935,  935,  313,

711,  712,  713,  714,  715,  716,  717,  718,  813,  813,
813,  720,  721,  722,  723,  724,  725,  726,  727,  719,
719,  719,  816,  816,  816,  818,  818,  818,  820,  820,
820,  728,  935,  822,  575,  575,  575,  935,  935,  730,
935,  730,  575,  575,  575,  575,  575,  575,  935,  730,
730,  730,  730,  575,  575,  575,  825,  825,  825,  826,
826,  826,  827,  827,  827,  828,  828,  828,  828,  828,
828,  828,  828,  828,  829,  829,  829,  829,  829,  829,
829,  829,  829,  831,  831,  831,  831,  831,  831,  831,
831,  831,  832,  832,  832,  832,  832,  832,  832,  832,

832,  228,  228,  228,  228,  228,  228,  228,  228,  935,
228,  228,  228,  935,  228,  935,  228,  935,  228,  228,
228,  228,  846,  935,  228,  935,  228,  847,  228,  935,
848,  228,  228,  228,  228,  228,  935,  228,  228,  935,
228,  228,  228,  228,  935,  228,  935,  850,  228,  849,
228,  228,  228,  228,  851,  228,  228,  228,  228,  935,
853,  228,  228,  935,  852,  228,  228,  228,  228,  228,
935,  228,  935,  854,  228,  228,  228,  228,  935,  228,
856,  857,  857,  857,  935,  228,  855,  935,  935,  228,
857,  857,  857,  935,  935,  228,  857,  857,  857,  858,

858,  858,  858,  858,  858,  858,  858,  858,  313,  313,
313,  313,  313,  313,  313,  313,  935,  313,  313,  313,
935,  313,  935,  313,  935,  313,  313,  313,  313,  859,
935,  313,  935,  313,  860,  313,  935,  861,  313,  313,
313,  313,  313,  935,  313,  313,  935,  313,  313,  313,
313,  935,  313,  935,  863,  313,  862,  313,  313,  313,
313,  864,  313,  313,  313,  313,  935,  866,  313,  313,
935,  865,  313,  313,  313,  313,  313,  935,  313,  935,
867,  313,  313,  313,  313,  935,  313,  869,  710,  710,
710,  935,  313,  868,  935,  935,  313,  710,  710,  710,

935,  935,  313,  710,  710,  710,  710,  710,  710,  870,
870,  870,  871,  871,  871,  872,  872,  872,  719,  719,
719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
873,  873,  873,  874,  874,  874,  875,  875,  875,  822,
876,  876,  876,  876,  876,  876,  935,  730,  876,  876,
876,  228,  228,  935,  228,  228,  935,  730,  730,  228,
228,  935,  228,  935,  888,  228,  228,  228,  228,  228,
228,  935,  228,  935,  890,  228,  889,  228,  935,  228,
228,  228,  228,  228,  228,  935,  891,  228,  935,  228,
228,  228,  228,  935,  228,  935,  892,  228,  228,  228,

228,  228,  228,  935,  228,  228,  228,  935,  228,  935,
228,  228,  313,  313,  935,  935,  228,  935,  228,  935,
228,  313,  313,  313,  935,  893,  228,  313,  313,  313,
313,  935,  313,  313,  313,  313,  935,  895,  313,  935,
313,  935,  313,  894,  935,  313,  313,  313,  313,  935,
313,  935,  896,  313,  313,  313,  935,  313,  313,  313,
313,  313,  313,  313,  313,  935,  897,  313,  935,  313,
935,  313,  935,  313,  313,  313,  313,  935,  935,  313,
935,  313,  935,  313,  935,  935,  313,  898,  898,  898,
898,  898,  898,  898,  898,  898,  313,  899,  899,  899,

899,  899,  899,  899,  899,  899,  228,  228,  228,  228,
228,  228,  935,  935,  935,  228,  228,  228,  906,  228,
935,  228,  228,  228,  905,  935,  228,  228,  935,  228,
935,  907,  908,  228,  313,  313,  228,  313,  313,  313,
313,  935,  909,  228,  935,  313,  935,  911,  313,  935,
313,  935,  910,  313,  313,  313,  313,  313,  313,  935,
912,  228,  228,  935,  313,  935,  935,  313,  228,  228,
913,  935,  228,  935,  313,  935,  914,  313,  920,  228,
228,  228,  228,  228,  228,  228,  228,  935,  935,  228,
935,  228,  935,  921,  228,  922,  228,  313,  313,  313,

313,  228,  313,  313,  228,  935,  228,  935,  313,  935,
313,  313,  313,  313,  923,  924,  313,  313,  313,  935,
313,  935,  313,  313,  228,  228,  925,  313,  228,  228,
228,  228,  313,  313,  313,  228,  935,  313,  935,  228,
935,  228,  313,  313,  313,  228,  929,  313,  313,  228,
935,  228,  935,  313,  313,  228,  228,  935,  313,  935,
930,  935,  935,  313,  313,  313,  228,  935,  313,  228,
228,  935,  932,  313,  313,  313,  228,  935,  935,  935,
228,  933,  935,  935,  313,  313,  935,  935,  935,  935,
228,  935,  935,  935,  313,  101,  101,  101,  101,  101,

101,  101,  101,  101,  101,  107,  107,  107,  107,  107,
107,  107,  107,  107,  107,  113,  113,  113,  113,  113,
113,  113,  113,  113,  113,  118,  118,  118,  118,  118,
118,  118,  118,  118,  118,  121,  121,  121,  121,  121,
121,  121,  121,  121,  121,  186,  186,  186,  186,  186,
186,  186,  186,  186,  186,  228,  935,  935,  935,  228,
238,  935,  935,  935,  238,  302,  302,  935,  302,  302,
313,  935,  935,  313,  935,  935,  935,  313,  323,  935,
935,  935,  323,  387,  935,  935,  935,  387,  396,  935,
935,  935,  396,  417,  935,  935,  935,  417,  417,  417,

417,  417,  417,  420,  935,  935,  935,  420,  430,  935,
935,  935,  430,  481,  481,  481,  481,  481,  481,  481,
481,  935,  481,  485,  485,  485,  485,  485,  485,  485,
485,  935,  485,  489,  489,  489,  489,  489,  489,  489,
489,  935,  489,  510,  935,  935,  510,  935,  935,  935,
510,  519,  935,  935,  935,  519,  535,  535,  535,  535,
535,  535,  935,  535,  535,  575,  575,  575,  575,  575,
710,  935,  935,  935,  710,  719,  935,  935,  935,  719,
21,  935,  935,  935,  935,  935,  935,  935,  935,  935,
935,  935,  935,  935,  935,  935,  935,  935,  935,  935,

935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
935,  935,  935,  935,  935,  935,  935,  935
} ;

static yyconst flex_int16_t yy_chk[3349] =
{
0,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    2,    2,    2,
2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
2,    2,    2,    2,    3,    3,    3,    4,    4,    4,
931,    3,    9,    9,    4,    5,    5,    5,    3,   10,
10,    4,    5,    6,    6,    6,    7,    7,  927,    5,
6,   34,    8,    8,  203,   34,    7,    6,   11,   11,
11,    7,    8,   12,   12,   12,  203,    8,   23,   23,
23,   39,   71,   71,   11,   39,   39,   73,   73,   12,
13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
13,   13,   13,   13,   13,   13,   13,   15,   15,   15,
15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
15,   15,   15,   15,   17,   17,   17,   17,   24,   44,
919,   43,   17,   17,   45,   47,  917,   17,   25,   25,
27,   24,  915,   17,   17,   17,   17,   24,   17,  104,
44,   25,   43,   43,  104,   45,   47,   25,   68,   68,
68,   27,   27,   27,   27,   27,   27,   27,   27,   28,
28,   28,   28,   28,   28,   28,   28,  904,   17,   18,
18,   18,   18,   70,   70,   70,   38,   18,   18,   38,
96,   96,   18,   38,   38,   38,   67,  903,   18,   18,

18,   18,   40,   18,   40,   46,   46,   38,  902,   38,
52,   52,   40,   72,   72,   72,   46,   67,   74,   74,
74,   52,   40,   40,   98,   98,   46,  105,  205,   52,
205,   52,  105,   18,   19,   19,   19,   19,   19,   19,
19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

19,   29,   29,   53,   53,   54,   54,   56,   56,   53,
110,  901,   29,  138,   53,  110,   54,  138,   56,  162,
162,   53,   29,   54,   53,   56,   54,  111,   56,   56,
55,   55,  111,   29,   29,   29,   29,   29,   29,   29,
29,   55,   57,   57,  900,   55,  206,   55,   58,   58,
206,   55,  883,   57,  881,   57,   59,   59,   77,   58,
60,   60,  253,   57,   61,   61,  253,   59,  880,   58,
60,   60,   62,   62,   61,   61,  878,   59,   63,   63,
877,   60,  844,   62,   62,   61,  843,   61,  842,   63,
63,   62,  841,   62,  148,   77,   93,   93,   93,   63,

76,   76,   76,   80,   80,   76,   78,   78,   78,   78,
78,   78,   78,   78,   80,  148,   77,   77,   77,   77,
77,   77,   77,   77,   80,   81,   81,   82,   82,   83,
83,   85,   85,   82,  125,  840,   81,  839,   82,  125,
83,  211,   85,  838,   81,   82,   81,   83,   82,   85,
83,  149,   85,   85,  211,  150,   84,   84,   76,   76,
76,   76,   76,   76,   76,   76,   79,   84,   86,   86,
837,   84,  149,   84,   87,   87,  150,   84,  836,   86,
835,   86,  830,   88,   88,   87,   89,   89,  824,   86,
92,   92,   79,   79,   88,   87,   89,   89,   90,   90,

823,   92,   92,   79,   88,  164,  164,   89,   90,   90,
767,   92,  765,   79,   95,   95,   95,  181,  181,   90,
764,   90,   91,   91,   79,   79,   79,   79,   79,   79,
79,   79,  763,   91,   91,   97,   97,   97,   99,   99,
99,   91,  128,   91,  127,  127,  127,  129,  129,  264,
147,  264,  158,  127,  264,  128,  127,  762,  127,  761,
129,  128,  127,  131,  131,  143,  129,  183,  183,  143,
143,  147,  147,  158,  131,  132,  132,  132,  132,  132,
132,  132,  132,  142,  131,  760,  142,  144,  759,  144,
142,  142,  142,  159,  159,  159,  758,  144,  161,  161,

161,  163,  163,  163,  142,  757,  142,  144,  144,  165,
165,  165,  170,  170,  170,  170,  170,  170,  170,  170,
171,  171,  171,  171,  171,  171,  171,  171,  177,  199,
177,  178,  178,  178,  180,  180,  180,  756,  177,  182,
182,  182,  184,  184,  184,  214,  214,  214,  177,  177,
199,  199,  199,  199,  199,  199,  199,  199,  200,  200,
200,  200,  200,  200,  200,  200,  201,  201,  201,  201,
201,  201,  201,  201,  212,  216,  216,  216,  217,  217,
755,  212,  218,  218,  218,  219,  219,  220,  220,  220,
222,  222,  222,  225,  225,  225,  226,  226,  226,  753,

227,  233,  233,  228,  228,  746,  225,  229,  229,  226,
235,  235,  225,  227,  228,  226,  242,  242,  229,  227,
230,  230,  230,  727,  228,  232,  232,  232,  229,  229,
234,  234,  234,  236,  236,  236,  239,  239,  239,  241,
241,  241,  243,  243,  243,  244,  244,  245,  245,  245,
247,  247,  248,  248,  307,  307,  256,  265,  262,  721,
263,  247,  263,  248,  256,  268,  262,  270,  272,  718,
263,  247,  712,  248,  256,  256,  262,  262,  265,  265,
263,  263,  274,  274,  275,  275,  268,  643,  270,  272,
276,  276,  274,  274,  641,  275,  292,  277,  277,  278,

278,  276,  640,  274,  275,  275,  639,  276,  277,  638,
278,  276,  279,  279,  637,  280,  280,  292,  277,  278,
278,  279,  636,  279,  281,  281,  280,  635,  282,  282,
634,  283,  283,  279,  280,  281,  280,  282,  632,  282,
631,  281,  283,  284,  284,  281,  285,  285,  630,  282,
286,  286,  283,  629,  284,  284,  628,  285,  627,  287,
287,  286,  289,  289,  284,  286,  285,  285,  288,  288,
287,  286,  287,  289,  290,  290,  302,  612,  288,  288,
287,  293,  293,  289,  608,  290,  289,  290,  607,  288,
309,  309,  293,  318,  318,  290,  294,  294,  294,  295,

295,  295,  293,  296,  296,  296,  297,  297,  297,  298,
298,  298,  299,  299,  299,  300,  300,  300,  301,  301,
301,  320,  320,  301,  303,  303,  303,  303,  303,  303,
303,  303,  323,  591,  302,  302,  302,  302,  302,  302,
302,  302,  304,  304,  304,  306,  306,  306,  308,  308,
308,  310,  310,  310,  313,  313,  315,  315,  315,  317,
317,  317,  590,  314,  314,  313,  319,  319,  319,  321,
321,  321,  327,  327,  314,  313,  301,  301,  301,  301,
301,  301,  301,  301,  314,  314,  324,  324,  324,  587,
323,  323,  323,  323,  323,  323,  323,  323,  326,  326,

326,  328,  328,  328,  329,  329,  330,  330,  330,  332,
332,  333,  333,  334,  334,  335,  335,  581,  337,  337,
332,  578,  333,  334,  334,  574,  335,  336,  336,  337,
332,  572,  333,  527,  334,  335,  335,  521,  336,  337,
338,  338,  391,  391,  336,  339,  339,  518,  336,  393,
393,  338,  340,  340,  339,  512,  339,  341,  341,  488,
338,  338,  487,  340,  383,  465,  339,  455,  341,  343,
343,  340,  454,  340,  341,  342,  342,  383,  341,  453,
343,  344,  344,  383,  342,  452,  342,  345,  345,  451,
343,  449,  344,  344,  346,  346,  342,  447,  345,  347,

347,  446,  344,  348,  348,  346,  445,  345,  345,  346,
347,  444,  347,  348,  348,  346,  349,  349,  350,  350,
347,  351,  351,  443,  348,  400,  400,  349,  441,  350,
439,  350,  351,  352,  352,  352,  408,  349,  408,  350,
349,  408,  351,  353,  353,  353,  354,  354,  354,  355,
355,  355,  356,  356,  356,  357,  357,  357,  358,  358,
358,  364,  364,  370,  370,  402,  402,  379,  379,  379,
425,  425,  384,  384,  384,  364,  379,  370,  438,  379,
432,  379,  388,  388,  388,  379,  381,  384,  384,  429,
381,  390,  390,  390,  427,  427,  381,  423,  381,  387,

387,  387,  387,  387,  387,  387,  387,  392,  392,  392,
394,  394,  394,  396,  396,  396,  396,  396,  396,  396,
396,  397,  397,  397,  399,  399,  399,  401,  401,  401,
403,  403,  403,  410,  410,  410,  411,  411,  411,  381,
381,  381,  381,  381,  381,  381,  381,  405,  421,  406,
407,  418,  407,  434,  434,  405,  404,  406,  436,  436,
407,  412,  412,  412,  398,  405,  405,  406,  406,  395,
407,  407,  413,  413,  413,  414,  414,  414,  415,  415,
415,  416,  416,  416,  422,  422,  422,  424,  424,  424,
426,  426,  426,  428,  428,  428,  430,  430,  430,  430,

430,  430,  430,  430,  431,  431,  431,  433,  433,  433,
435,  435,  435,  437,  437,  437,  440,  440,  450,  450,
457,  457,  457,  458,  458,  458,  459,  459,  459,  460,
460,  460,  461,  461,  461,  462,  462,  462,  463,  463,
463,  466,  466,  467,  467,  467,  468,  468,  468,  469,
469,  469,  466,  470,  470,  470,  514,  514,  466,  471,
471,  471,  466,  472,  472,  472,  473,  473,  473,  474,
474,  474,  475,  475,  475,  476,  476,  476,  477,  477,
477,  478,  478,  478,  479,  479,  479,  480,  480,  480,
486,  490,  490,  491,  491,  493,  493,  490,  486,  492,

492,  389,  490,  491,  491,  386,  493,  492,  486,  486,
492,  385,  490,  382,  491,  375,  493,  494,  494,  331,
492,  495,  495,  496,  496,  497,  497,  494,  494,  325,
498,  498,  495,  497,  496,  730,  497,  730,  494,  498,
730,  498,  495,  322,  496,  510,  497,  499,  499,  500,
500,  498,  501,  501,  502,  502,  316,  499,  499,  312,
500,  503,  503,  501,  502,  502,  504,  504,  499,  519,
500,  500,  503,  501,  501,  502,  311,  504,  505,  505,
506,  506,  503,  504,  507,  507,  507,  504,  305,  505,
257,  506,  508,  508,  508,  506,  509,  509,  509,  505,

255,  506,  254,  510,  510,  510,  510,  510,  510,  510,
510,  511,  511,  511,  513,  513,  513,  515,  515,  515,
516,  516,  517,  517,  517,  523,  523,  519,  519,  519,
519,  519,  519,  519,  519,  520,  520,  520,  522,  522,
522,  524,  524,  524,  525,  525,  526,  526,  526,  528,
528,  528,  529,  529,  529,  530,  530,  530,  531,  531,
531,  532,  532,  532,  533,  533,  533,  534,  534,  534,
536,  536,  537,  537,  537,  538,  538,  538,  539,  539,
539,  536,  540,  540,  540,  583,  583,  536,  541,  541,
541,  536,  542,  542,  542,  543,  543,  543,  544,  544,

544,  545,  545,  545,  546,  546,  546,  547,  547,  547,
548,  548,  548,  549,  549,  549,  550,  550,  550,  551,
551,  552,  552,  585,  585,  551,  553,  553,  554,  554,
551,  552,  552,  246,  553,  555,  555,  553,  240,  554,
551,  237,  552,  556,  556,  555,  555,  553,  231,  554,
557,  557,  558,  558,  556,  224,  555,  559,  559,  221,
558,  557,  215,  558,  556,  213,  559,  210,  559,  560,
560,  557,  209,  558,  561,  561,  562,  562,  559,  560,
560,  563,  563,  564,  564,  561,  208,  562,  565,  565,
560,  563,  563,  207,  564,  561,  561,  562,  562,  565,

566,  566,  563,  204,  564,  565,  202,  567,  567,  565,
189,  566,  568,  568,  568,  569,  569,  569,  567,  714,
714,  566,  567,  570,  570,  570,  716,  716,  567,  575,
575,  575,  575,  575,  575,  575,  575,  576,  576,  576,
576,  576,  576,  576,  576,  577,  579,  187,  579,  577,
580,  580,  580,  723,  723,  577,  579,  577,  582,  582,
582,  584,  584,  584,  725,  725,  579,  579,  586,  586,
586,  588,  588,  588,  592,  592,  592,  593,  593,  593,
594,  594,  594,  595,  595,  595,  185,  588,  596,  596,
596,  597,  597,  597,  598,  598,  598,  179,  577,  577,

577,  577,  577,  577,  577,  577,  599,  599,  599,  600,
600,  600,  601,  601,  601,  602,  602,  602,  603,  603,
603,  604,  604,  604,  605,  605,  605,  606,  609,  609,
609,  610,  610,  610,  176,  606,  611,  611,  611,  613,
613,  613,  614,  614,  614,  606,  606,  615,  615,  615,
616,  616,  616,  617,  617,  617,  618,  618,  618,  619,
619,  619,  620,  620,  620,  621,  621,  621,  622,  622,
622,  623,  623,  623,  624,  624,  624,  625,  625,  625,
626,  626,  626,  644,  644,  644,  645,  645,  645,  646,
646,  646,  647,  647,  648,  648,  648,  649,  649,  649,

647,  168,  166,  647,  650,  650,  650,  651,  651,  651,
652,  652,  652,  647,  653,  653,  653,  654,  654,  655,
655,  656,  656,  657,  657,  160,  658,  658,  654,  156,
655,  654,  656,  656,  657,  152,  657,  658,  654,  658,
655,  145,  656,  134,  657,  659,  659,  658,  660,  660,
661,  661,  124,  662,  662,  122,  659,  663,  663,  660,
661,  661,  120,  117,  662,  116,  659,  659,  663,  660,
115,  661,  662,  663,  662,  664,  664,  112,  663,  665,
665,  666,  666,  109,  667,  667,  664,  665,  106,  666,
665,  103,  666,  100,  664,  667,  664,  668,  668,   94,

665,   75,  666,  669,  669,  667,   69,  668,  668,  670,
670,  670,   65,   49,  669,  671,  671,  671,  668,  672,
672,  672,   30,   21,  669,  673,  673,  673,  674,  674,
674,  675,  675,  675,  676,  676,  676,  677,  677,  677,
678,  678,  678,  679,  679,  679,  680,  680,  680,  681,
681,  681,  682,  682,  682,  683,  683,  683,  684,  684,
684,  685,  685,  685,  686,  686,  686,  687,  687,  688,
688,  688,  689,  689,  689,  687,    0,    0,  687,  690,
690,  690,  691,  691,  691,  692,  692,  692,  687,  693,
693,  693,  694,  694,  695,  695,  696,  696,  697,  697,

0,  698,  698,  694,    0,  695,  694,  696,  696,  697,
0,  697,  698,  694,  698,  695,    0,  696,    0,  697,
699,  699,  698,  700,  700,  701,  701,    0,  702,  702,
0,  699,  703,  703,  700,  701,  701,    0,    0,  702,
0,  699,  699,  703,  700,    0,  701,  702,  703,  702,
704,  704,    0,  703,  705,  705,  706,  706,    0,  707,
707,  704,  705,    0,  706,  705,    0,  706,    0,  704,
707,  704,  708,  708,    0,  705,    0,  706,  709,  709,
707,    0,  708,  708,  711,  711,  711,    0,    0,  709,
713,  713,  713,  708,  715,  715,  715,    0,    0,  709,

710,  710,  710,  710,  710,  710,  710,  710,  717,  717,
717,  719,  719,  719,  719,  719,  719,  719,  719,  720,
720,  720,  722,  722,  722,  724,  724,  724,  726,  726,
726,  728,    0,  729,  731,  731,  731,    0,    0,  728,
0,  729,  732,  732,  732,  733,  733,  733,    0,  728,
728,  729,  729,  734,  734,  734,  735,  735,  735,  736,
736,  736,  737,  737,  737,  739,  739,  739,  740,  740,
740,  741,  741,  741,  742,  742,  742,  743,  743,  743,
744,  744,  744,  747,  747,  747,  748,  748,  748,  749,
749,  749,  750,  750,  750,  751,  751,  751,  752,  752,

752,  769,  769,  770,  770,  772,  772,  773,  773,    0,
774,  774,  769,    0,  770,    0,  772,    0,  773,  775,
775,  774,  769,    0,  770,    0,  772,  774,  773,    0,
775,  774,  776,  776,  777,  777,    0,  778,  778,    0,
775,  779,  779,  776,    0,  777,    0,  777,  778,  776,
780,  780,  779,  776,  778,  777,  781,  781,  778,    0,
780,  780,  779,    0,  779,  782,  782,  781,  783,  783,
0,  780,    0,  781,  784,  784,  782,  781,    0,  783,
783,  785,  785,  785,    0,  784,  782,    0,    0,  783,
786,  786,  786,    0,    0,  784,  787,  787,  787,  788,

788,  788,  789,  789,  789,  790,  790,  790,  792,  792,
793,  793,  795,  795,  796,  796,    0,  797,  797,  792,
0,  793,    0,  795,    0,  796,  798,  798,  797,  792,
0,  793,    0,  795,  797,  796,    0,  798,  797,  799,
799,  800,  800,    0,  801,  801,    0,  798,  802,  802,
799,    0,  800,    0,  800,  801,  799,  803,  803,  802,
799,  801,  800,  804,  804,  801,    0,  803,  803,  802,
0,  802,  805,  805,  804,  806,  806,    0,  803,    0,
804,  807,  807,  805,  804,    0,  806,  806,  808,  808,
808,    0,  807,  805,    0,    0,  806,  809,  809,  809,

0,    0,  807,  810,  810,  810,  811,  811,  811,  812,
812,  812,  813,  813,  813,  814,  814,  814,  815,  815,
815,  816,  816,  816,  817,  817,  817,  818,  818,  818,
819,  819,  819,  820,  820,  820,  821,  821,  821,  822,
825,  825,  825,  826,  826,  826,    0,  822,  827,  827,
827,  846,  846,    0,  847,  847,    0,  822,  822,  848,
848,    0,  846,    0,  846,  847,  849,  849,  850,  850,
848,    0,  846,    0,  849,  847,  847,  849,    0,  850,
848,  851,  851,  852,  852,    0,  850,  849,    0,  850,
853,  853,  851,    0,  852,    0,  852,  854,  854,  855,

855,  853,  851,    0,  852,  856,  856,    0,  854,    0,
855,  853,  859,  859,    0,    0,  856,    0,  854,    0,
855,  860,  860,  859,    0,  859,  856,  861,  861,  862,
862,    0,  860,  859,  863,  863,    0,  862,  861,    0,
862,    0,  860,  860,    0,  863,  864,  864,  861,    0,
862,    0,  863,  865,  865,  863,    0,  864,  866,  866,
867,  867,  868,  868,  865,    0,  865,  864,    0,  866,
0,  867,    0,  868,  865,  869,  869,    0,    0,  866,
0,  867,    0,  868,    0,    0,  869,  870,  870,  870,
871,  871,  871,  872,  872,  872,  869,  873,  873,  873,

874,  874,  874,  875,  875,  875,  888,  888,  889,  889,
890,  890,    0,    0,    0,  891,  891,  888,  889,  889,
0,  890,  892,  892,  888,    0,  891,  888,    0,  889,
0,  890,  891,  892,  893,  893,  891,  894,  894,  895,
895,    0,  892,  892,    0,  893,    0,  894,  894,    0,
895,    0,  893,  896,  896,  893,  897,  897,  894,    0,
895,  905,  905,    0,  896,    0,    0,  897,  906,  906,
896,    0,  905,    0,  896,    0,  897,  897,  905,  906,
907,  907,  905,  908,  908,  909,  909,    0,    0,  906,
0,  907,    0,  907,  908,  909,  909,  910,  910,  911,

911,  907,  912,  912,  908,    0,  909,    0,  910,    0,
911,  913,  913,  912,  910,  912,  914,  914,  910,    0,
911,    0,  913,  912,  920,  920,  914,  914,  921,  921,
922,  922,  913,  923,  923,  920,    0,  914,    0,  921,
0,  922,  924,  924,  923,  920,  921,  925,  925,  921,
0,  922,    0,  924,  923,  929,  929,    0,  925,    0,
924,    0,    0,  924,  930,  930,  929,    0,  925,  932,
932,    0,  929,  933,  933,  930,  929,    0,    0,    0,
932,  930,    0,    0,  933,  930,    0,    0,    0,    0,
932,    0,    0,    0,  933,  936,  936,  936,  936,  936,

936,  936,  936,  936,  936,  937,  937,  937,  937,  937,
937,  937,  937,  937,  937,  938,  938,  938,  938,  938,
938,  938,  938,  938,  938,  939,  939,  939,  939,  939,
939,  939,  939,  939,  939,  940,  940,  940,  940,  940,
940,  940,  940,  940,  940,  941,  941,  941,  941,  941,
941,  941,  941,  941,  941,  942,    0,    0,    0,  942,
943,    0,    0,    0,  943,  944,  944,    0,  944,  944,
945,    0,    0,  945,    0,    0,    0,  945,  946,    0,
0,    0,  946,  947,    0,    0,    0,  947,  948,    0,
0,    0,  948,  949,    0,    0,    0,  949,  949,  949,

949,  949,  949,  950,    0,    0,    0,  950,  951,    0,
0,    0,  951,  952,  952,  952,  952,  952,  952,  952,
952,    0,  952,  953,  953,  953,  953,  953,  953,  953,
953,    0,  953,  954,  954,  954,  954,  954,  954,  954,
954,    0,  954,  955,    0,    0,  955,    0,    0,    0,
955,  956,    0,    0,    0,  956,  957,  957,  957,  957,
957,  957,    0,  957,  957,  958,  958,  958,  958,  958,
959,    0,    0,    0,  959,  960,    0,    0,    0,  960,
935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
935,  935,  935,  935,  935,  935,  935,  935,  935,  935,

935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
935,  935,  935,  935,  935,  935,  935,  935
} ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf = 0, *yy_state_ptr = 0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
/*
 *  Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 *  Copyright (C) 2008-2012 - Scilab Enterprises - Bruno JOFRET
 *
 *  This file must be used under the terms of the CeCILL.
 *  This source file is licensed as described in the file COPYING, which
 *  you should have received as part of this distribution.  The terms
 *  are also available at
 *  http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
 *
 */
#include "isatty.hxx"
#include "parse.hxx"
#include "parser_private.hxx"

#include "context.hxx"

extern "C"
{
#include "charEncoding.h"
#include "sci_malloc.h"
}

static int comment_level = 0;
static int last_token = 0;
static int exit_status = PARSE_ERROR;
static std::string current_file;
static std::string program_name;

static std::string *pstBuffer;

#define YY_USER_ACTION                          \
 yylloc.last_column += yyleng;

/* -*- Verbose Special Debug -*- */
//#define DEV
//#define TOKENDEV

#ifdef DEV
#define DEBUG(x) std::cout << "[DEBUG] " << x << std::endl;
#else
#define DEBUG(x) /* Nothing */
#endif

#define INITIAL 0
#define SIMPLESTRING 1
#define DOUBLESTRING 2
#define REGIONCOMMENT 3
#define LINECOMMENT 4
#define LINEBREAK 5
#define MATRIX 6
#define MATRIXMINUSID 7
#define SHELLMODE 8
#define BEGINID 9

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

static void yyunput (int c, char *buf_ptr  );

#ifndef yytext_ptr
static void yy_flex_strncpy (char *, yyconst char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = NULL;

static void yy_push_state (int new_state );

static void yy_pop_state (void );

static int yy_top_state (void );

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
 
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
register yy_state_type yy_current_state;
register char * yy_cp, *yy_bp;
register int yy_act;

if ( !(yy_init) )
{
    (yy_init) = 1;

#ifdef YY_USER_INIT
    YY_USER_INIT;
#endif

    /* Create the reject buffer large enough to save one state per allowed character. */
    if ( ! (yy_state_buf) )
    {
        (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
    }
    if ( ! (yy_state_buf) )
    {
        YY_FATAL_ERROR( "out of dynamic memory in yylex()" );
    }

    if ( ! (yy_start) )
    {
        (yy_start) = 1;    /* first start state */
    }

    if ( ! yyin )
    {
        yyin = stdin;
    }

    if ( ! yyout )
    {
        yyout = stdout;
    }

    if ( ! YY_CURRENT_BUFFER )
    {
        yyensure_buffer_stack ();
        YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin, YY_BUF_SIZE );
    }

    yy_load_buffer_state( );
}

while ( 1 )		/* loops until end-of-file is reached */
{
    yy_cp = (yy_c_buf_p);

    /* Support of yytext. */
    *yy_cp = (yy_hold_char);

    /* yy_bp points to the position in yy_ch_buf of the start of
     * the current run.
     */
    yy_bp = yy_cp;

    yy_current_state = (yy_start);
    yy_current_state += YY_AT_BOL();

    (yy_state_ptr) = (yy_state_buf);
    *(yy_state_ptr)++ = yy_current_state;

yy_match:
    do
    {
        register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
        while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
        {
            yy_current_state = (int) yy_def[yy_current_state];
            if ( yy_current_state >= 936 )
            {
                yy_c = yy_meta[(unsigned int) yy_c];
            }
        }
        yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
        *(yy_state_ptr)++ = yy_current_state;
        ++yy_cp;
    }
    while ( yy_base[yy_current_state] != 3281 );

yy_find_action:
    yy_current_state = *--(yy_state_ptr);
    (yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
    for ( ; ; ) /* until we find what rule we matched */
    {
        if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
        {
            yy_act = yy_acclist[(yy_lp)];
            if ( yy_act & YY_TRAILING_HEAD_MASK ||
                    (yy_looking_for_trail_begin) )
            {
                if ( yy_act == (yy_looking_for_trail_begin) )
                {
                    (yy_looking_for_trail_begin) = 0;
                    yy_act &= ~YY_TRAILING_HEAD_MASK;
                    break;
                }
            }
            else if ( yy_act & YY_TRAILING_MASK )
            {
                (yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
                (yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
            }
            else
            {
                (yy_full_match) = yy_cp;
                (yy_full_state) = (yy_state_ptr);
                (yy_full_lp) = (yy_lp);
                break;
            }
            ++(yy_lp);
            goto find_rule;
        }
        --yy_cp;
        yy_current_state = *--(yy_state_ptr);
        (yy_lp) = yy_accept[yy_current_state];
    }

    YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

    switch ( yy_act )
    {
            /* beginning of action switch */
        case 1:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::pushControlStatus(Parser::WithinIf);
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(IF);
            }
            YY_BREAK
        case 2:
            YY_RULE_SETUP
            {
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(THEN);
            }
            YY_BREAK
        case 3:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    // Pop to step out IF
                    ParserSingleInstance::popControlStatus();
                    ParserSingleInstance::pushControlStatus(Parser::WithinElse);
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(ELSE);
            }
            YY_BREAK
        case 4:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::popControlStatus();
                    ParserSingleInstance::pushControlStatus(Parser::WithinElseIf);
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(ELSEIF);
            }
            YY_BREAK
        case 5:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::popControlStatus();
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(END);
            }
            YY_BREAK
        case 6:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::pushControlStatus(Parser::WithinSelect);
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(SELECT);
            }
            YY_BREAK
        case 7:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::pushControlStatus(Parser::WithinSwitch);
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(SWITCH);
            }
            YY_BREAK
        case 8:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::popControlStatus();
                    ParserSingleInstance::pushControlStatus(Parser::WithinOtherwise);
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(OTHERWISE);
            }
            YY_BREAK
        case 9:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::popControlStatus();
                    ParserSingleInstance::pushControlStatus(Parser::WithinCase);
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(CASE);
            }
            YY_BREAK
        case 10:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::pushControlStatus(Parser::WithinFunction);
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(FUNCTION);
            }
            YY_BREAK
        case 11:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::popControlStatus();
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(ENDFUNCTION);
            }
            YY_BREAK
        case 12:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::pushControlStatus(Parser::WithinFunction);
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(HIDDENFUNCTION);
            }
            YY_BREAK
        case 13:
            YY_RULE_SETUP
            {
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(HIDDEN);
            }
            YY_BREAK
        case 14:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::pushControlStatus(Parser::WithinFor);
                }
                BEGIN(INITIAL);
                return scan_throw(FOR);
            }
            YY_BREAK
        case 15:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::pushControlStatus(Parser::WithinWhile);
                }
                BEGIN(INITIAL);
                return scan_throw(WHILE);
            }
            YY_BREAK
        case 16:
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                return scan_throw(DO);
            }
            YY_BREAK
        case 17:
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                return scan_throw(BREAK);
            }
            YY_BREAK
        case 18:
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                return scan_throw(CONTINUE);
            }
            YY_BREAK
        case 19:
            YY_RULE_SETUP
            {
                ParserSingleInstance::pushControlStatus(Parser::WithinTry);
                BEGIN(INITIAL);
                return scan_throw(TRY);
            }
            YY_BREAK
        case 20:
            YY_RULE_SETUP
            {
                // Pop to step out TRY
                ParserSingleInstance::popControlStatus();
                ParserSingleInstance::pushControlStatus(Parser::WithinCatch);
                BEGIN(INITIAL);
                return scan_throw(CATCH);
            }
            YY_BREAK
        case 21:
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                return scan_throw(RETURN);
            }
            YY_BREAK
        case 22:
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                return scan_throw(RETURN);
            }
            YY_BREAK
        case 23:
            /* rule 23 can match eol */
            YY_RULE_SETUP
            {
                BEGIN(BEGINID);
            }
            YY_BREAK

        case 24:
            YY_RULE_SETUP
            {
                wchar_t *pwText = to_wide_string(yytext);
                if (yytext != NULL && pwText == NULL)
                {
                    std::string str = "can not convert'";
                    str += yytext;
                    str += "' to UTF-8";
                    exit_status = SCAN_ERROR;
                    scan_error("can not convert string to UTF-8");
                }
                yylval.str = new std::wstring(pwText);
                FREE(pwText);
                types::InternalType * pIT = symbol::Context::getInstance()->get(symbol::Symbol(*yylval.str));
                if (pIT && pIT->isCallable())
                {
                    scan_throw(ID);
                    BEGIN(SHELLMODE);
                }
                else
                {
                    BEGIN(INITIAL);
                    return scan_throw(ID);
                }
            }
            YY_BREAK

        case 25:
            YY_RULE_SETUP
            {
                return scan_throw(NOT);
            }
            YY_BREAK
        case 26:
            YY_RULE_SETUP
            {
                return scan_throw(DOLLAR);
            }
            YY_BREAK
        case 27:
            YY_RULE_SETUP
            {
                return scan_throw(BOOLTRUE);
            }
            YY_BREAK
        case 28:
            YY_RULE_SETUP
            {
                return scan_throw(BOOLFALSE);
            }
            YY_BREAK
        case 29:
            YY_RULE_SETUP
            {
                return scan_throw(AND);
            }
            YY_BREAK
        case 30:
            YY_RULE_SETUP
            {
                return scan_throw(ANDAND);
            }
            YY_BREAK
        case 31:
            YY_RULE_SETUP
            {
                return scan_throw(OR);
            }
            YY_BREAK
        case 32:
            YY_RULE_SETUP
            {
                return scan_throw(OROR);
            }
            YY_BREAK
        case 33:
            YY_RULE_SETUP
            {
                return scan_throw(LPAREN);
            }
            YY_BREAK
        case 34:
            YY_RULE_SETUP
            {
                return scan_throw(RPAREN);
            }
            YY_BREAK
        case 35:
            YY_RULE_SETUP
            {
                scan_step();
                return scan_throw(SEMI);
            }
            YY_BREAK
        case 36:
            YY_RULE_SETUP
            {
                scan_step();
                return scan_throw(COMMA);
            }
            YY_BREAK
        case 37:
            YY_RULE_SETUP
            {
                return scan_throw(COLON);
            }
            YY_BREAK
        case 38:
            YY_RULE_SETUP
            {
                yy_push_state(MATRIX);
                ParserSingleInstance::pushControlStatus(Parser::WithinCell);
                return scan_throw(LBRACE);
            }
            YY_BREAK
        case 39:
            YY_RULE_SETUP
            {
                return scan_throw(RBRACE);
            }
            YY_BREAK
        case 40:
            YY_RULE_SETUP
            {
                return scan_throw(DOTQUOTE);
            }
            YY_BREAK
        case 41:
            YY_RULE_SETUP
            {
                return scan_throw(DOTTIMES);
            }
            YY_BREAK
        case 42:
            YY_RULE_SETUP
            {
                return scan_throw(DOTRDIVIDE);
            }
            YY_BREAK
        case 43:
            YY_RULE_SETUP
            {
                return scan_throw(DOTLDIVIDE);
            }
            YY_BREAK
        case 44:
            YY_RULE_SETUP
            {
                return scan_throw(DOTPOWER);
            }
            YY_BREAK
        case 45:
            YY_RULE_SETUP
            {
                return scan_throw(MINUS);
            }
            YY_BREAK
        case 46:
            YY_RULE_SETUP
            {
                return scan_throw(PLUS);
            }
            YY_BREAK
        case 47:
            YY_RULE_SETUP
            {
                return scan_throw(TIMES);
            }
            YY_BREAK
        case 48:
            YY_RULE_SETUP
            {
                return scan_throw(RDIVIDE);
            }
            YY_BREAK
        case 49:
            YY_RULE_SETUP
            {
                return scan_throw(LDIVIDE);
            }
            YY_BREAK
        case 50:
            YY_RULE_SETUP
            {
                return scan_throw(POWER);
            }
            YY_BREAK
        case 51:
            YY_RULE_SETUP
            {
                return scan_throw(KRONTIMES);
            }
            YY_BREAK
        case 52:
            YY_RULE_SETUP
            {
                return scan_throw(KRONRDIVIDE);
            }
            YY_BREAK
        case 53:
            YY_RULE_SETUP
            {
                return scan_throw(KRONLDIVIDE);
            }
            YY_BREAK
        case 54:
            /* rule 54 can match eol */
            YY_RULE_SETUP
            {
                unput(yytext[yyleng - 1]);
                return scan_throw(CONTROLTIMES);
            }
            YY_BREAK
        case 55:
            /* rule 55 can match eol */
            YY_RULE_SETUP
            {
                unput(yytext[yyleng - 1]);
                return scan_throw(CONTROLRDIVIDE);
            }
            YY_BREAK
        case 56:
            /* rule 56 can match eol */
            YY_RULE_SETUP
            {
                unput(yytext[yyleng - 1]);
                return scan_throw(CONTROLLDIVIDE);
            }
            YY_BREAK
        case 57:
            YY_RULE_SETUP
            {
                return scan_throw(EQ);
            }
            YY_BREAK
        case 58:
            YY_RULE_SETUP
            {
                return scan_throw(NE);
            }
            YY_BREAK
        case 59:
            YY_RULE_SETUP
            {
                return scan_throw(LT);
            }
            YY_BREAK
        case 60:
            YY_RULE_SETUP
            {
                return scan_throw(GT);
            }
            YY_BREAK
        case 61:
            YY_RULE_SETUP
            {
                return scan_throw(LE);
            }
            YY_BREAK
        case 62:
            YY_RULE_SETUP
            {
                return scan_throw(GE);
            }
            YY_BREAK
        case 63:
            YY_RULE_SETUP
            {
                return scan_throw(ASSIGN);
            }
            YY_BREAK
        case 64:
            YY_RULE_SETUP
            {
                DEBUG("yy_push_state(MATRIX)");
                yy_push_state(MATRIX);
                ParserSingleInstance::pushControlStatus(Parser::WithinMatrix);
                return scan_throw(LBRACK);
            }
            YY_BREAK
        case 65:
            YY_RULE_SETUP
            {
                return scan_throw(RBRACK);
            }
            YY_BREAK
        case 66:
            YY_RULE_SETUP
            {
                return scan_throw(DOT);
            }
            YY_BREAK
        case 67:
            YY_RULE_SETUP
            {
                ParserSingleInstance::pushControlStatus(Parser::WithinDots);
                yy_push_state(LINEBREAK);
            }
            YY_BREAK
        case 68:
            YY_RULE_SETUP
            {
                yylval.number = atof(yytext);
#ifdef TOKENDEV
                std::cout << "--> [DEBUG] INTEGER : " << yytext << std::endl;
#endif
                //  scan_step();
                return scan_throw(VARINT);
            }
            YY_BREAK
        case 69:
            YY_RULE_SETUP
            {
                scan_exponent_convert(yytext);
                yylval.number = atof(yytext);
#ifdef TOKENDEV
                std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
                scan_step();
                return scan_throw(VARFLOAT);
            }
            YY_BREAK
        case 70:
            YY_RULE_SETUP
            {
                yylval.number = atof(yytext);
#ifdef TOKENDEV
                std::cout << "--> [DEBUG] NUMBER : " << yytext << std::endl;
#endif
                //  scan_step();
                return scan_throw(NUM);
            }
            YY_BREAK
        case 71:
            YY_RULE_SETUP
            {
                yylval.number = atof(yytext);
#ifdef TOKENDEV
                std::cout << "--> [DEBUG] LITTLE : " << yytext << std::endl;
#endif
                scan_step();
                return scan_throw(NUM);
            }
            YY_BREAK
        case 72:
            YY_RULE_SETUP
            {
                wchar_t *pwText = to_wide_string(yytext);
                if (yytext != NULL && pwText == NULL)
                {
                    std::string str = "can not convert'";
                    str += yytext;
                    str += "' to UTF-8";
                    exit_status = SCAN_ERROR;
                    scan_error("can not convert string to UTF-8");
                }
                yylval.str = new std::wstring(pwText);
                FREE(pwText);
#ifdef TOKENDEV
                std::cout << "--> [DEBUG] ID : " << yytext << std::endl;
#endif
                //  scan_step();
                return scan_throw(ID);
            }
            YY_BREAK
        case 73:
            YY_RULE_SETUP
            {
                yylval.comment = new std::wstring();
                comment_level = 1;
                ParserSingleInstance::pushControlStatus(Parser::WithinBlockComment);
                yy_push_state(REGIONCOMMENT);
            }
            YY_BREAK
        case 74:
            YY_RULE_SETUP
            {
                pstBuffer = new std::string();
                yy_push_state(LINECOMMENT);
            }
            YY_BREAK
        case 75:
            YY_RULE_SETUP
            {
                pstBuffer = new std::string();
                yy_push_state(DOUBLESTRING);
            }
            YY_BREAK
        case 76:
            YY_RULE_SETUP
            {
                /*
                ** Matrix Transposition special behaviour
                ** ID' []' toto()' are transposition call
                */
                if (last_token == ID
                || last_token == RBRACK
                || last_token == RPAREN
                || last_token == RBRACE
                || last_token == VARINT
                || last_token == VARFLOAT
                || last_token == NUM
                || last_token == BOOLTRUE
                || last_token == BOOLFALSE)
                {
                    return scan_throw(QUOTE);
                }
                else
                {
                    pstBuffer = new std::string();
                    yy_push_state(SIMPLESTRING);
                }
            }
            YY_BREAK
        case 77:
            YY_RULE_SETUP
            {
                scan_step();
                scan_throw(SPACES);
            }
            YY_BREAK
        case 78:
            /* rule 78 can match eol */
            YY_RULE_SETUP
            {
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                scan_step();
                if (last_token != EOL)
                {
                    return scan_throw(EOL);
                }

            }
            YY_BREAK
        case 79:
            /* rule 79 can match eol */
            YY_RULE_SETUP
            {
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                scan_step();
                if (last_token != EOL)
                {
                    return scan_throw(EOL);
                }
                scan_throw(EOL);
            }
            YY_BREAK
        case 80:
            /* rule 80 can match eol */
            YY_RULE_SETUP
            {
                yylloc.last_line += 2;
                yylloc.last_column = 1;
                scan_step();
                if (last_token != EOL)
                {
                    return scan_throw(EOL);
                }
                scan_throw(EOL);
            }
            YY_BREAK
        case 81:
            YY_RULE_SETUP
            {
                std::string str = "unexpected token '";
                str += yytext;
                str += "'";
                exit_status = SCAN_ERROR;
                scan_error(str);
            }
            YY_BREAK

        case 82:
            YY_RULE_SETUP
            {
                unput(yytext[yyleng - 1]);
                if (last_token == ID
                || last_token == RPAREN
                || last_token == QUOTE
                || last_token == VARINT
                || last_token == VARFLOAT
                || last_token == NUM)
                {
                    return scan_throw(COMMA);
                }
            }
            YY_BREAK
        case 83:
            YY_RULE_SETUP
            {
                return scan_throw(COLON);
            }
            YY_BREAK
        case 84:
            /* rule 84 can match eol */
            YY_RULE_SETUP
            {
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                if (last_token != DOTS && last_token != EOL)
                {
                    return scan_throw(EOL);
                }
                scan_throw(EOL);
            }
            YY_BREAK
        case 85:
            YY_RULE_SETUP
            {
                DEBUG("yy_pop_state()");
                yy_pop_state();
                ParserSingleInstance::popControlStatus();
                return scan_throw(RBRACK);
            }
            YY_BREAK
        case 86:
            YY_RULE_SETUP
            {
                yy_pop_state();
                ParserSingleInstance::popControlStatus();
                return scan_throw(RBRACE);
            }
            YY_BREAK
        case 87:
            YY_RULE_SETUP
            {
                return scan_throw(PLUS);
            }
            YY_BREAK
        case 88:
            YY_RULE_SETUP
            {
                return scan_throw(MINUS);
            }
            YY_BREAK
        case 89:
            YY_RULE_SETUP
            {
                int i;
                for (i = yyleng - 1 ; i >= 0 ; --i)
                {
                    unput(yytext[i]);
                }
                yy_push_state(MATRIXMINUSID);
                if (last_token != LBRACK
                && last_token != EOL
                && last_token != SEMI
                && last_token != COMMA)
                {
                    return scan_throw(COMMA);
                }
            }
            YY_BREAK
        case 90:
            YY_RULE_SETUP
            {
                int i;
                for (i = yyleng - 1 ; i >= 0 ; --i)
                {
                    unput(yytext[i]);
                }
                yy_push_state(MATRIXMINUSID);
                if (last_token != LBRACK
                && last_token != EOL
                && last_token != SEMI
                && last_token != COMMA)
                {
                    return scan_throw(COMMA);
                }
            }
            YY_BREAK
        case 91:
            YY_RULE_SETUP
            {
                int i;
                for (i = yyleng - 1 ; i >= 0 ; --i)
                {
                    unput(yytext[i]);
                }
                yy_push_state(MATRIXMINUSID);
                if (last_token != LBRACK
                && last_token != EOL
                && last_token != SEMI
                && last_token != COMMA)
                {
                    return scan_throw(COMMA);
                }
            }
            YY_BREAK
        case 92:
            YY_RULE_SETUP
            {
                int i;
                for (i = yyleng - 1 ; i >= 0 ; --i)
                {
                    unput(yytext[i]);
                }
                yy_push_state(MATRIXMINUSID);
                if (last_token != LBRACK
                && last_token != EOL
                && last_token != SEMI
                && last_token != COMMA)
                {
                    return scan_throw(COMMA);
                }
            }
            YY_BREAK
        case 93:
            YY_RULE_SETUP
            {
                int i;
                for (i = yyleng - 1; i >= 0 ; --i)
                {
                    unput(yytext[i]);
                }
                yy_push_state(MATRIXMINUSID);
                if (last_token != LBRACK
                && last_token != EOL
                && last_token != SEMI
                && last_token != COMMA)
                {
                    return scan_throw(COMMA);
                }
            }
            YY_BREAK
        case 94:
            YY_RULE_SETUP
            {
                std::string str = "unexpected token '";
                str += yytext;
                str += "' within a matrix.";
                exit_status = SCAN_ERROR;
                scan_error(str);
            }
            YY_BREAK
        case 95:
            /* rule 95 can match eol */
            YY_RULE_SETUP
            {
                /* Just do nothing */
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                scan_step();
                scan_throw(EOL);
            }
            YY_BREAK
        case 96:
            YY_RULE_SETUP
            {
                /* Just do nothing */
                pstBuffer = new std::string();
                yy_push_state(LINECOMMENT);
                scan_throw(DOTS);
            }
            YY_BREAK
        case YY_STATE_EOF(MATRIX):
        {
            yy_pop_state();
        }
        YY_BREAK

        case 97:
            YY_RULE_SETUP
            {
                return scan_throw(MINUS);
            }
            YY_BREAK
        case 98:
            YY_RULE_SETUP
            {
                /* Do Nothing. */
            }
            YY_BREAK
        case 99:
            YY_RULE_SETUP
            {
                yy_pop_state();
                yylval.number = atof(yytext);
#ifdef TOKENDEV
                std::cout << "--> [DEBUG] INTEGER : " << yytext << std::endl;
#endif
                scan_step();
                return scan_throw(VARINT);
            }
            YY_BREAK
        case 100:
            YY_RULE_SETUP
            {
                yy_pop_state();
                yylval.number = atof(yytext);
#ifdef TOKENDEV
                std::cout << "--> [DEBUG] NUMBER : " << yytext << std::endl;
#endif
                scan_step();
                return scan_throw(NUM);
            }
            YY_BREAK
        case 101:
            YY_RULE_SETUP
            {
                yy_pop_state();
                yylval.number = atof(yytext);
#ifdef TOKENDEV
                std::cout << "--> [DEBUG] LITTLE : " << yytext << std::endl;
#endif
                scan_step();
                return scan_throw(NUM);
            }
            YY_BREAK
        case 102:
            YY_RULE_SETUP
            {
                yy_pop_state();
                scan_exponent_convert(yytext);
                yylval.number = atof(yytext);
#ifdef TOKENDEV
                std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
                scan_step();
                return scan_throw(VARFLOAT);
            }
            YY_BREAK
        case 103:
            YY_RULE_SETUP
            {
                yy_pop_state();
                wchar_t* pwText = to_wide_string(yytext);
                if (yytext != NULL && pwText == NULL)
                {
                    std::string str = "can not convert'";
                    str += yytext;
                    str += "' to UTF-8";
                    exit_status = SCAN_ERROR;
                    scan_error("can not convert string to UTF-8");
                }
                yylval.str = new std::wstring(pwText);
                FREE(pwText);
#ifdef TOKENDEV
                std::cout << "--> [DEBUG] ID : " << yytext << std::endl;
#endif
                scan_step();
                return scan_throw(ID);
            }
            YY_BREAK
        case 104:
            YY_RULE_SETUP
            {
                /* Do Nothing. */
            }
            YY_BREAK
        case 105:
            YY_RULE_SETUP
            {
                return scan_throw(LPAREN);
            }
            YY_BREAK
        case 106:
            YY_RULE_SETUP
            {
                return scan_throw(RPAREN);
            }
            YY_BREAK
        case 107:
            YY_RULE_SETUP
            {
                std::string str = "unexpected token '";
                str += yytext;
                str += "' within a matrix.";
                exit_status = SCAN_ERROR;
                scan_error(str);
            }
            YY_BREAK

        case 108:
            /* rule 108 can match eol */
            YY_RULE_SETUP
            {
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                scan_step();
                yy_pop_state();
                ParserSingleInstance::popControlStatus();
            }
            YY_BREAK
        case 109:
            YY_RULE_SETUP
            {
                ++comment_level;
                yy_push_state(REGIONCOMMENT);
            }
            YY_BREAK
        case 110:
            YY_RULE_SETUP
            {
                scan_throw(DOTS);
                pstBuffer = new std::string();
                yy_push_state(LINECOMMENT);
            }
            YY_BREAK
        case 111:
            YY_RULE_SETUP
            {
                /* Do nothing... */
            }
            YY_BREAK
        case YY_STATE_EOF(LINEBREAK):
        {
            yy_pop_state();
        }
        YY_BREAK
        case 112:
            YY_RULE_SETUP
            {
                std::string str = "unexpected token '";
                str += yytext;
                str += "' after line break with .. or ...";
                exit_status = SCAN_ERROR;
                scan_error(str);
            }
            YY_BREAK

        case 113:
            /* rule 113 can match eol */
            YY_RULE_SETUP
            {
                //yylloc.last_line += 1;
                //yylloc.last_column = 1;
                //scan_step();
                yy_pop_state();
                for (int i = yyleng - 1 ; i >= 0 ; --i)
                {
                    //std::cerr << "Unputting i = {" << i << "}" << std::endl;
                    //std::cerr << "Unputting {" << yytext[i] << "}" << std::endl;
                    unput(yytext[i]);
                    yylloc.last_column--;
                }
                /*
                ** To forgot comments after lines break
                */
                if (last_token != DOTS)
                {
                    //std::cerr << "pstBuffer = {" << *pstBuffer << "}" << std::endl;
                    //std::cerr << "pstBuffer->c_str() = {" << pstBuffer->c_str() << "}" << std::endl;
                    wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
                    //std::wcerr << L"pwstBuffer = W{" << pwstBuffer << L"}" << std::endl;
                    if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
                    {
                        std::string str = "can not convert'";
                        str += pstBuffer->c_str();
                        str += "' to UTF-8";
                        exit_status = SCAN_ERROR;
                        scan_error("can not convert string to UTF-8");
                    }
                    yylval.comment = new std::wstring(pwstBuffer);
                    delete pstBuffer;
                    FREE (pwstBuffer);
                    return scan_throw(COMMENT);
                }
            }
            YY_BREAK
        case YY_STATE_EOF(LINECOMMENT):
        {
            yy_pop_state();
            wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
            if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
            {
                std::string str = "can not convert'";
                str += pstBuffer->c_str();
                str += "' to UTF-8";
                exit_status = SCAN_ERROR;
                scan_error("can not convert string to UTF-8");
            }
            yylval.comment = new std::wstring(pwstBuffer);
            delete pstBuffer;
            FREE (pwstBuffer);
            return scan_throw(COMMENT);
        }
        YY_BREAK
        case 114:
            YY_RULE_SETUP
            {
                // Put the char in a temporary CHAR buffer to go through UTF-8 trouble
                // only translate to WCHAR_T when popping state.
                *pstBuffer += yytext;
            }
            YY_BREAK

        case 115:
            YY_RULE_SETUP
            {
                --comment_level;
                if (comment_level == 0)
                {
                    ParserSingleInstance::popControlStatus();
                    yy_pop_state();
                    //return scan_throw(BLOCKCOMMENT);
                }
            }
            YY_BREAK
        case 116:
            YY_RULE_SETUP
            {
                ++comment_level;
                yy_push_state(REGIONCOMMENT);
            }
            YY_BREAK
        case 117:
            /* rule 117 can match eol */
            YY_RULE_SETUP
            {
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                scan_step();
                *yylval.comment += L"\n//";
            }
            YY_BREAK
        case 118:
            YY_RULE_SETUP
            {
                wchar_t *pwText = to_wide_string(yytext);
                *yylval.comment += std::wstring(pwText);
                FREE(pwText);
            }
            YY_BREAK
        case YY_STATE_EOF(REGIONCOMMENT):
        {
            yy_pop_state();
            //    std::string str = "unexpected end of file in a comment";
            //    exit_status = SCAN_ERROR;
            //    scan_error(str);
        }
        YY_BREAK

        case 119:
            YY_RULE_SETUP
            {
                *pstBuffer += "\"";
            }
            YY_BREAK
        case 120:
            YY_RULE_SETUP
            {
                *pstBuffer += "'";
            }
            YY_BREAK
        case 121:
            YY_RULE_SETUP
            {
                *pstBuffer += "\"";
            }
            YY_BREAK
        case 122:
            YY_RULE_SETUP
            {
                *pstBuffer += "'";
            }
            YY_BREAK
        case 123:
            YY_RULE_SETUP
            {
                yy_pop_state();
                scan_step();
                wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
                if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
                {
                    std::string str = "can not convert'";
                    str += pstBuffer->c_str();
                    str += "' to UTF-8";
                    exit_status = SCAN_ERROR;
                    scan_error("can not convert string to UTF-8");
                }
                yylval.str = new std::wstring(pwstBuffer);
                delete pstBuffer;
                FREE(pwstBuffer);
                return scan_throw(STR);
            }
            YY_BREAK
        case 124:
            YY_RULE_SETUP
            {
                std::string str = "Heterogeneous string detected, starting with ' and ending with \".";
                exit_status = SCAN_ERROR;
                scan_error(str);
            }
            YY_BREAK
        case 125:
            /* rule 125 can match eol */
            YY_RULE_SETUP
            {
                /* Do nothing... Just skip */
            }
            YY_BREAK
        case 126:
            /* rule 126 can match eol */
            YY_RULE_SETUP
            {
                std::string str = "unexpected end of line in a string.";
                exit_status = SCAN_ERROR;
                scan_error(str);
                yylloc.last_line += 1;
                yylloc.last_column = 1;
            }
            YY_BREAK
        case YY_STATE_EOF(SIMPLESTRING):
        {
            std::string str = "unexpected end of file in a string.";
            exit_status = SCAN_ERROR;
            scan_error(str);
        }
        YY_BREAK
        case 127:
            YY_RULE_SETUP
            {
                scan_step();
                *pstBuffer += yytext;
            }
            YY_BREAK

        case 128:
            YY_RULE_SETUP
            {
                *pstBuffer += "\"";
            }
            YY_BREAK
        case 129:
            YY_RULE_SETUP
            {
                *pstBuffer += "'";
            }
            YY_BREAK
        case 130:
            YY_RULE_SETUP
            {
                *pstBuffer += "\"";
            }
            YY_BREAK
        case 131:
            YY_RULE_SETUP
            {
                *pstBuffer += "'";
            }
            YY_BREAK
        case 132:
            YY_RULE_SETUP
            {
                yy_pop_state();
                scan_step();
                wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
                if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
                {
                    std::string str = "can not convert'";
                    str += pstBuffer->c_str();
                    str += "' to UTF-8";
                    exit_status = SCAN_ERROR;
                    scan_error("can not convert string to UTF-8");
                }
                yylval.str = new std::wstring(pwstBuffer);
                delete pstBuffer;
                FREE(pwstBuffer);
                return scan_throw(STR);
            }
            YY_BREAK
        case 133:
            YY_RULE_SETUP
            {
                std::string str = "Heterogeneous string detected, starting with \" and ending with '.";
                exit_status = SCAN_ERROR;
                scan_error(str);
            }
            YY_BREAK
        case 134:
            /* rule 134 can match eol */
            YY_RULE_SETUP
            {
                /* Do nothing... Just skip */
            }
            YY_BREAK
        case 135:
            /* rule 135 can match eol */
            YY_RULE_SETUP
            {
                std::string str = "unexpected end of line in a string";
                exit_status = SCAN_ERROR;
                scan_error(str);
                yylloc.last_line += 1;
                yylloc.last_column = 1;
            }
            YY_BREAK
        case YY_STATE_EOF(DOUBLESTRING):
        {
            std::string str = "unexpected end of file in a string";
            exit_status = SCAN_ERROR;
            scan_error(str);
        }
        YY_BREAK
        case 136:
            YY_RULE_SETUP
            {
                scan_step();
                *pstBuffer += yytext;
            }
            YY_BREAK

        case 137:
            YY_RULE_SETUP
            {
                if (last_token == ID)
                {
                    scan_throw(SPACES);
                    return ID;
                }
            }
            YY_BREAK
        case 138:
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                scan_step();
                return scan_throw(SEMI);
            }
            YY_BREAK
        case 139:
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                scan_step();
                return scan_throw(COMMA);
            }
            YY_BREAK
        case 140:
            /* rule 140 can match eol */
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                scan_step();
                return scan_throw(EOL);
            }
            YY_BREAK
        case 141:
            YY_RULE_SETUP
            {
                if (last_token == STR)
                {
                    wchar_t *pwText = to_wide_string(yytext);
                    yylval.str = new std::wstring(pwText);
                    FREE(pwText);
                    return scan_throw(STR);
                }
                else
                {
                    BEGIN(INITIAL);
                    return scan_throw(ASSIGN);
                }
            }
            YY_BREAK
        case 142:
            YY_RULE_SETUP
            {
                if (last_token == STR)
                {
                    wchar_t *pwText = to_wide_string(yytext);
                    yylval.str = new std::wstring(pwText);
                    FREE(pwText);
                    return scan_throw(STR);
                }
                else
                {
                    BEGIN(INITIAL);
                    return scan_throw(LPAREN);
                }
            }
            YY_BREAK
        case 143:
            YY_RULE_SETUP
            {
                if (last_token == STR)
                {
                    wchar_t *pwText = to_wide_string(yytext);
                    yylval.str = new std::wstring(pwText);
                    FREE(pwText);
                    return scan_throw(STR);
                }
                else
                {
                    BEGIN(INITIAL);
                    return scan_throw(LT);
                }
            }
            YY_BREAK
        case 144:
            YY_RULE_SETUP
            {
                if (last_token == STR)
                {
                    wchar_t *pwText = to_wide_string(yytext);
                    yylval.str = new std::wstring(pwText);
                    FREE(pwText);
                    return scan_throw(STR);
                }
                else
                {
                    BEGIN(INITIAL);
                    return scan_throw(GT);
                }
            }
            YY_BREAK
        case 145:
            YY_RULE_SETUP
            {
                if (last_token == STR)
                {
                    wchar_t *pwText = to_wide_string(yytext);
                    yylval.str = new std::wstring(pwText);
                    FREE(pwText);
                    return scan_throw(STR);
                }
                else
                {
                    BEGIN(INITIAL);
                    return scan_throw(NOT);
                }
            }
            YY_BREAK
        case 146:
            YY_RULE_SETUP
            {
                wchar_t *pwText = to_wide_string(yytext);
                yylval.str = new std::wstring(pwText);
                FREE(pwText);
                return scan_throw(STR);
            }
            YY_BREAK
        case YY_STATE_EOF(SHELLMODE):
        {
            BEGIN(INITIAL);
        }
        YY_BREAK

        case 147:
            YY_RULE_SETUP
            ECHO;
            YY_BREAK
        case YY_STATE_EOF(INITIAL):
        case YY_STATE_EOF(MATRIXMINUSID):
        case YY_STATE_EOF(BEGINID):
            yyterminate();

        case YY_END_OF_BUFFER:
        {
            /* Amount of text matched not including the EOB char. */
            int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

            /* Undo the effects of YY_DO_BEFORE_ACTION. */
            *yy_cp = (yy_hold_char);
            YY_RESTORE_YY_MORE_OFFSET

            if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
            {
                /* We're scanning a new file or input source.  It's
                 * possible that this happened because the user
                 * just pointed yyin at a new source and called
                 * yylex().  If so, then we have to assure
                 * consistency between YY_CURRENT_BUFFER and our
                 * globals.  Here is the right place to do so, because
                 * this is the first action (other than possibly a
                 * back-up) that will match for the new input source.
                 */
                (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
                YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
                YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
            }

            /* Note that here we test for yy_c_buf_p "<=" to the position
             * of the first EOB in the buffer, since yy_c_buf_p will
             * already have been incremented past the NUL character
             * (since all states make transitions on EOB to the
             * end-of-buffer state).  Contrast this with the test
             * in input().
             */
            if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
            {
                /* This was really a NUL. */
                yy_state_type yy_next_state;

                (yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

                yy_current_state = yy_get_previous_state(  );

                /* Okay, we're now positioned to make the NUL
                 * transition.  We couldn't have
                 * yy_get_previous_state() go ahead and do it
                 * for us because it doesn't know how to deal
                 * with the possibility of jamming (and we don't
                 * want to build jamming into it because then it
                 * will run more slowly).
                 */

                yy_next_state = yy_try_NUL_trans( yy_current_state );

                yy_bp = (yytext_ptr) + YY_MORE_ADJ;

                if ( yy_next_state )
                {
                    /* Consume the NUL. */
                    yy_cp = ++(yy_c_buf_p);
                    yy_current_state = yy_next_state;
                    goto yy_match;
                }

                else
                {
                    yy_cp = (yy_c_buf_p);
                    goto yy_find_action;
                }
            }

            else switch ( yy_get_next_buffer(  ) )
                {
                    case EOB_ACT_END_OF_FILE:
                    {
                        (yy_did_buffer_switch_on_eof) = 0;

                        if ( yywrap( ) )
                        {
                            /* Note: because we've taken care in
                             * yy_get_next_buffer() to have set up
                             * yytext, we can now set up
                             * yy_c_buf_p so that if some total
                             * hoser (like flex itself) wants to
                             * call the scanner after we return the
                             * YY_NULL, it'll still work - another
                             * YY_NULL will get returned.
                             */
                            (yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

                            yy_act = YY_STATE_EOF(YY_START);
                            goto do_action;
                        }

                        else
                        {
                            if ( ! (yy_did_buffer_switch_on_eof) )
                            {
                                YY_NEW_FILE;
                            }
                        }
                        break;
                    }

                    case EOB_ACT_CONTINUE_SCAN:
                        (yy_c_buf_p) =
                            (yytext_ptr) + yy_amount_of_matched_text;

                        yy_current_state = yy_get_previous_state(  );

                        yy_cp = (yy_c_buf_p);
                        yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                        goto yy_match;

                    case EOB_ACT_LAST_MATCH:
                        (yy_c_buf_p) =
                            &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

                        yy_current_state = yy_get_previous_state(  );

                        yy_cp = (yy_c_buf_p);
                        yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                        goto yy_find_action;
                }
            break;
        }

        default:
            YY_FATAL_ERROR(
                "fatal flex scanner internal error--no action found" );
    } /* end of action switch */
} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
register char *source = (yytext_ptr);
register int number_to_move, i;
int ret_val;

if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
    YY_FATAL_ERROR(
        "fatal flex scanner internal error--end of buffer missed" );

if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
{
    /* Don't try to fill the buffer, so this is an EOF. */
    if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
    {
        /* We matched a single character, the EOB, so
         * treat this as a final EOF.
         */
        return EOB_ACT_END_OF_FILE;
    }

    else
    {
        /* We matched some text prior to the EOB, first
         * process it.
         */
        return EOB_ACT_LAST_MATCH;
    }
}

/* Try to read more data. */

/* First move last chars to start of buffer. */
number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

for ( i = 0; i < number_to_move; ++i )
{
    *(dest++) = *(source++);
}

if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
    /* don't do the read, it's not guaranteed to return an EOF,
     * just force an EOF
     */
{
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;
}

else
{
    int num_to_read =
        YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

    while ( num_to_read <= 0 )
    {
        /* Not enough room in the buffer - grow it. */

        YY_FATAL_ERROR(
            "input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

    }

    if ( num_to_read > YY_READ_BUF_SIZE )
    {
        num_to_read = YY_READ_BUF_SIZE;
    }

    /* Read in more data. */
    YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
              (yy_n_chars), (size_t) num_to_read );

    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
}

if ( (yy_n_chars) == 0 )
{
    if ( number_to_move == YY_MORE_ADJ )
    {
        ret_val = EOB_ACT_END_OF_FILE;
        yyrestart(yyin  );
    }

    else
    {
        ret_val = EOB_ACT_LAST_MATCH;
        YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
            YY_BUFFER_EOF_PENDING;
    }
}

else
{
    ret_val = EOB_ACT_CONTINUE_SCAN;
}

if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size)
{
    /* Extend the array by 50%, plus the number we really need. */
    yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
    YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, new_size  );
    if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
    {
        YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
    }
}

(yy_n_chars) += number_to_move;
YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state (void)
{
register yy_state_type yy_current_state;
register char *yy_cp;

yy_current_state = (yy_start);
yy_current_state += YY_AT_BOL();

(yy_state_ptr) = (yy_state_buf);
*(yy_state_ptr)++ = yy_current_state;

for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
{
    register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
    {
        yy_current_state = (int) yy_def[yy_current_state];
        if ( yy_current_state >= 936 )
        {
            yy_c = yy_meta[(unsigned int) yy_c];
        }
    }
    yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
    *(yy_state_ptr)++ = yy_current_state;
}

return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
register int yy_is_jam;

register YY_CHAR yy_c = 1;
while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
{
    yy_current_state = (int) yy_def[yy_current_state];
    if ( yy_current_state >= 936 )
    {
        yy_c = yy_meta[(unsigned int) yy_c];
    }
}
yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
yy_is_jam = (yy_current_state == 935);
if ( ! yy_is_jam )
{
    *(yy_state_ptr)++ = yy_current_state;
}

return yy_is_jam ? 0 : yy_current_state;
}

static void yyunput (int c, register char * yy_bp )
{
register char *yy_cp;

yy_cp = (yy_c_buf_p);

/* undo effects of setting up yytext */
*yy_cp = (yy_hold_char);

if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
{
    /* need to shift things up to make room */
    /* +2 for EOB chars. */
    register int number_to_move = (yy_n_chars) + 2;
    register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
                              YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
    register char *source =
        &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

    while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
    {
        *--dest = *--source;
    }

    yy_cp += (int) (dest - source);
    yy_bp += (int) (dest - source);
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
        (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

    if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
    {
        YY_FATAL_ERROR( "flex scanner push-back overflow" );
    }
}

*--yy_cp = (char) c;

(yytext_ptr) = yy_bp;
(yy_hold_char) = *yy_cp;
(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput (void)
#else
static int input  (void)
#endif

{
    int c;

    *(yy_c_buf_p) = (yy_hold_char);

    if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
    {
        /* yy_c_buf_p now points to the character we want to return.
         * If this occurs *before* the EOB characters, then it's a
         * valid NUL; if not, then we've hit the end of the buffer.
         */
        if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
            /* This was really a NUL. */
        {
            *(yy_c_buf_p) = '\0';
        }

        else
        {
            /* need more input */
            int offset = (yy_c_buf_p) - (yytext_ptr);
            ++(yy_c_buf_p);

            switch ( yy_get_next_buffer(  ) )
            {
                case EOB_ACT_LAST_MATCH:
                    /* This happens because yy_g_n_b()
                     * sees that we've accumulated a
                     * token and flags that we need to
                     * try matching the token before
                     * proceeding.  But for input(),
                     * there's no matching to consider.
                     * So convert the EOB_ACT_LAST_MATCH
                     * to EOB_ACT_END_OF_FILE.
                     */

                    /* Reset buffer status. */
                    yyrestart(yyin );

                    /*FALLTHROUGH*/

                case EOB_ACT_END_OF_FILE:
                {
                    if ( yywrap( ) )
                    {
                        return EOF;
                    }

                    if ( ! (yy_did_buffer_switch_on_eof) )
                    {
                        YY_NEW_FILE;
                    }
#ifdef __cplusplus
                    return yyinput();
#else
                    return input();
#endif
                }

                case EOB_ACT_CONTINUE_SCAN:
                    (yy_c_buf_p) = (yytext_ptr) + offset;
                    break;
            }
        }
    }

    c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
    *(yy_c_buf_p) = '\0';	/* preserve yytext */
    (yy_hold_char) = *++(yy_c_buf_p);

    YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

    return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 *
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyrestart  (FILE * input_file )
{

    if ( ! YY_CURRENT_BUFFER )
    {
        yyensure_buffer_stack ();
        YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin, YY_BUF_SIZE );
    }

    yy_init_buffer(YY_CURRENT_BUFFER, input_file );
    yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 *
 */
void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{

    /* TODO. We should be able to replace this entire function body
     * with
     *		yypop_buffer_state();
     *		yypush_buffer_state(new_buffer);
     */
    yyensure_buffer_stack ();
    if ( YY_CURRENT_BUFFER == new_buffer )
    {
        return;
    }

    if ( YY_CURRENT_BUFFER )
    {
        /* Flush out information for old buffer. */
        *(yy_c_buf_p) = (yy_hold_char);
        YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
    }

    YY_CURRENT_BUFFER_LVALUE = new_buffer;
    yy_load_buffer_state( );

    /* We don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    (yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
    (yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
    yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
    (yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 *
 * @return the allocated buffer state.
 */
YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
    if ( ! b )
    {
        YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
    }

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
    if ( ! b->yy_ch_buf )
    {
        YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
    }

    b->yy_is_our_buffer = 1;

    yy_init_buffer(b, file );

    return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 *
 */
void yy_delete_buffer (YY_BUFFER_STATE  b )
{

    if ( ! b )
    {
        return;
    }

    if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
    {
        YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;
    }

    if ( b->yy_is_our_buffer )
    {
        yyfree((void *) b->yy_ch_buf  );
    }

    yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
int oerrno = errno;

yy_flush_buffer(b );

b->yy_input_file = file;
b->yy_fill_buffer = 1;

/* If b is the current buffer, then yy_init_buffer was _probably_
 * called from yyrestart() or through yy_get_next_buffer.
 * In that case, we don't want to reset the lineno or column.
 */
if (b != YY_CURRENT_BUFFER)
{
    b->yy_bs_lineno = 1;
    b->yy_bs_column = 0;
}

b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;

errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 *
 */
void yy_flush_buffer (YY_BUFFER_STATE  b )
{
if ( ! b )
{
    return;
}

b->yy_n_chars = 0;

/* We always need two end-of-buffer characters.  The first causes
 * a transition to the end-of-buffer state.  The second causes
 * a jam in that state.
 */
b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

b->yy_buf_pos = &b->yy_ch_buf[0];

b->yy_at_bol = 1;
b->yy_buffer_status = YY_BUFFER_NEW;

if ( b == YY_CURRENT_BUFFER )
{
    yy_load_buffer_state( );
}
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
if (new_buffer == NULL)
{
    return;
}

yyensure_buffer_stack();

/* This block is copied from yy_switch_to_buffer. */
if ( YY_CURRENT_BUFFER )
{
    /* Flush out information for old buffer. */
    *(yy_c_buf_p) = (yy_hold_char);
    YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
}

/* Only push if top exists. Otherwise, replace top. */
if (YY_CURRENT_BUFFER)
{
    (yy_buffer_stack_top)++;
}
YY_CURRENT_BUFFER_LVALUE = new_buffer;

/* copied from yy_switch_to_buffer. */
yy_load_buffer_state( );
(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *
 */
void yypop_buffer_state (void)
{
if (!YY_CURRENT_BUFFER)
{
    return;
}

yy_delete_buffer(YY_CURRENT_BUFFER );
YY_CURRENT_BUFFER_LVALUE = NULL;
if ((yy_buffer_stack_top) > 0)
{
    --(yy_buffer_stack_top);
}

if (YY_CURRENT_BUFFER)
{
    yy_load_buffer_state( );
    (yy_did_buffer_switch_on_eof) = 1;
}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
int num_to_alloc;

if (!(yy_buffer_stack))
{

    /* First allocation is just for 2 elements, since we don't know if this
     * scanner will even need a stack. We use 2 instead of 1 to avoid an
     * immediate realloc on the next call.
     */
    num_to_alloc = 1;
    (yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
                        (num_to_alloc * sizeof(struct yy_buffer_state*)
                        );
    if ( ! (yy_buffer_stack) )
    {
        YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
    }

    memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

    (yy_buffer_stack_max) = num_to_alloc;
    (yy_buffer_stack_top) = 0;
    return;
}

if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1)
{

    /* Increase the buffer to prepare for a possible push. */
    int grow_size = 8 /* arbitrary grow size */;

    num_to_alloc = (yy_buffer_stack_max) + grow_size;
    (yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
                        ((yy_buffer_stack),
                         num_to_alloc * sizeof(struct yy_buffer_state*)
                        );
    if ( ! (yy_buffer_stack) )
    {
        YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
    }

    /* zero only the new slots.*/
    memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
    (yy_buffer_stack_max) = num_to_alloc;
}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
YY_BUFFER_STATE b;

if ( size < 2 ||
        base[size - 2] != YY_END_OF_BUFFER_CHAR ||
        base[size - 1] != YY_END_OF_BUFFER_CHAR )
    /* They forgot to leave room for the EOB's. */
{
    return 0;
}

b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
if ( ! b )
{
    YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );
}

b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
b->yy_buf_pos = b->yy_ch_buf = base;
b->yy_is_our_buffer = 0;
b->yy_input_file = 0;
b->yy_n_chars = b->yy_buf_size;
b->yy_is_interactive = 0;
b->yy_at_bol = 1;
b->yy_fill_buffer = 0;
b->yy_buffer_status = YY_BUFFER_NEW;

yy_switch_to_buffer(b  );

return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 *
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{

return yy_scan_bytes(yystr, strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
YY_BUFFER_STATE b;
char *buf;
yy_size_t n;
int i;

/* Get memory for full buffer, including space for trailing EOB's. */
n = _yybytes_len + 2;
buf = (char *) yyalloc(n  );
if ( ! buf )
{
    YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );
}

for ( i = 0; i < _yybytes_len; ++i )
{
    buf[i] = yybytes[i];
}

buf[_yybytes_len] = buf[_yybytes_len + 1] = YY_END_OF_BUFFER_CHAR;

b = yy_scan_buffer(buf, n );
if ( ! b )
{
    YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );
}

/* It's okay to grow etc. this buffer, and we should throw it
 * away when we're done.
 */
b->yy_is_our_buffer = 1;

return b;
}

static void yy_push_state (int  new_state )
{
if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
{
    yy_size_t new_size;

    (yy_start_stack_depth) += YY_START_STACK_INCR;
    new_size = (yy_start_stack_depth) * sizeof( int );

    if ( ! (yy_start_stack) )
    {
        (yy_start_stack) = (int *) yyalloc(new_size  );
    }

    else
    {
        (yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack), new_size  );
    }

    if ( ! (yy_start_stack) )
    {
        YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
    }
}

(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

BEGIN(new_state);
}

static void yy_pop_state  (void)
{
if ( --(yy_start_stack_ptr) < 0 )
{
    YY_FATAL_ERROR( "start-condition stack underflow" );
}

BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

static int yy_top_state  (void)
{
return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
(void) fprintf( stderr, "%s\n", msg );
exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 *
 */
int yyget_lineno  (void)
{

return yylineno;
}

/** Get the input stream.
 *
 */
FILE *yyget_in  (void)
{
return yyin;
}

/** Get the output stream.
 *
 */
FILE *yyget_out  (void)
{
return yyout;
}

/** Get the length of the current token.
 *
 */
int yyget_leng  (void)
{
return yyleng;
}

/** Get the current token.
 *
 */

char *yyget_text  (void)
{
return yytext;
}

/** Set the current line number.
 * @param line_number
 *
 */
void yyset_lineno (int  line_number )
{

yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 *
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
yyout = out_str ;
}

int yyget_debug  (void)
{
return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
/* Initialization is the same as for the non-reentrant scanner.
* This function is called from yylex_destroy(), so don't allocate here.
*/

(yy_buffer_stack) = 0;
(yy_buffer_stack_top) = 0;
(yy_buffer_stack_max) = 0;
(yy_c_buf_p) = (char *) 0;
(yy_init) = 0;
(yy_start) = 0;

(yy_start_stack_ptr) = 0;
(yy_start_stack_depth) = 0;
(yy_start_stack) =  NULL;

(yy_state_buf) = 0;
(yy_state_ptr) = 0;
(yy_full_match) = 0;
(yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
yyin = stdin;
yyout = stdout;
#else
yyin = (FILE *) 0;
yyout = (FILE *) 0;
#endif

/* For future reference: Set errno on error, since we are called by
 * yylex_init()
 */
return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{

/* Pop the buffer stack, destroying each element. */
while (YY_CURRENT_BUFFER)
{
    yy_delete_buffer(YY_CURRENT_BUFFER  );
    YY_CURRENT_BUFFER_LVALUE = NULL;
    yypop_buffer_state();
}

/* Destroy the stack itself. */
yyfree((yy_buffer_stack) );
(yy_buffer_stack) = NULL;

/* Destroy the start condition stack. */
yyfree((yy_start_stack)  );
(yy_start_stack) = NULL;

yyfree ( (yy_state_buf) );
(yy_state_buf)  = NULL;

/* Reset the globals. This is important in a non-reentrant scanner so the next time
 * yylex() is called, initialization will occur. */
yy_init_globals( );

return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
register int i;
for ( i = 0; i < n; ++i )
{
    s1[i] = s2[i];
}
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
register int n;
for ( n = 0; s[n]; ++n )
    ;

return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
/* The cast to (char *) in the following accommodates both
 * implementations that use char* generic pointers, and those
 * that use void* generic pointers.  It works with the latter
 * because both ANSI C and C++ allow castless assignment from
 * any pointer type to void*, and deal with argument conversions
 * as though doing an assignment.
 */
return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

int scan_throw(int token)
{
last_token = token;
#ifdef DEV
std::cout << "--> [DEBUG] TOKEN : " << token << std::endl;
#endif
return token;
}

int get_last_token()
{
return last_token;
}

void scan_step()
{
yylloc.first_line = yylloc.last_line;
yylloc.first_column = yylloc.last_column;
}

void scan_error(std::string msg)
{
wchar_t* pstMsg = to_wide_string(msg.c_str());

//std::wcerr << pstMsg << std::endl;
ParserSingleInstance::PrintError(pstMsg);
ParserSingleInstance::setExitStatus(Parser::Failed);
ParserSingleInstance::resetControlStatus();
FREE(pstMsg);
last_token = YYEOF;
BEGIN(INITIAL);
}

/*
** convert floating numbers to C standard
** 1.2d-3 -> 1.2e-3
** 1.2D-3 -> 1.2e-3
*/
void scan_exponent_convert(char *in)
{
char *pString;
while ((pString = strpbrk(in, "d")) != NULL)
{
    *pString = 'e';
}
while ((pString = strpbrk(in, "D")) != NULL)
{
    *pString = 'e';
}
}

#ifdef _MSC_VER
int isatty (int desc)
{
return 0;
}
#endif

