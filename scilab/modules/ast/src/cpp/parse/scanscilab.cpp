
#line 3 "src/cpp/parse/scanscilab.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types.
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

#define YY_LESS_LINENO(n)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
{
FILE *yy_input_file;

char *yy_ch_buf;		/* input buffer */
char *yy_buf_pos;		/* current position in input buffer */

/* Size of input buffer in bytes, not including room for EOB
 * characters.
 */
yy_size_t yy_buf_size;

/* Number of characters read into yy_ch_buf, not including EOB
 * characters.
 */
int yy_n_chars;

/* Whether we "own" the buffer - i.e., we know we created it,
 * and can realloc() it to grow it, and should free() it to
 * delete it.
 */
int yy_is_our_buffer;

/* Whether this is an "interactive" input source; if so, and
 * if we're using stdio for input, then we want to use getc()
 * instead of fread(), to make sure we stop fetching input after
 * each newline.
 */
int yy_is_interactive;

/* Whether we're considered to be at the beginning of a line.
 * If so, '^' rules will be active on the next match, otherwise
 * not.
 */
int yy_at_bol;

int yy_bs_lineno; /**< The line count. */
int yy_bs_column; /**< The column count. */

/* Whether to try to fill the input buffer when we reach the
 * end of it.
 */
int yy_fill_buffer;

int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
/* When an EOF's been seen but there's still some text to process
 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
 * shouldn't try reading from the input source any more.  We might
 * still have a bunch of tokens to match, though, because of
 * possible backing-up.
 *
 * When we actually see the EOF, we change the status to "new"
 * (via yyrestart()), so that the user can continue scanning by
 * just pointing yyin at a new input file.
 */
#define YY_BUFFER_EOF_PENDING 2

};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file, int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b, FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes, int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *, yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 142
#define YY_END_OF_BUFFER 143
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
{
flex_int32_t yy_verify;
flex_int32_t yy_nxt;
};
static yyconst flex_int16_t yy_acclist[937] =
{
0,
16408,  120,  120,  130,  130,  110,  110,  106,  106,  143,
83,  142,   79,   83,  142,   80,  142,   80,   83,  142,
77,   83,  142,   74,   83,  142,   27,   83,  142,   74,
83,  142,   30,   83,  142,   78,   83,  142,   34,   83,
142,   35,   83,  142,   48,   83,  142,   47,   83,  142,
37,   83,  142,   46,   83,  142,   67,   83,  142,   49,
83,  142,   69,   83,  142,   38,   83,  142,   36,   83,
142,   60,   83,  142,   64,   83,  142,   61,   83,  142,
26,   83,  142,   65,   83,  142,   50,   83,  142,   66,
83,  142,   51,   83,  142,   74,   83,  142,   74,   83,

142,   74,   83,  142,   74,   83,  142,   74,   83,  142,
74,   83,  142,   74,   83,  142,   74,   83,  142,   74,
83,  142,   74,   83,  142,   74,   83,  142,   39,   83,
142,   32,   83,  142,   40,   83,  142,   26,   83,  142,
83,  142,   83,  142,   83,  142,   83,  142,   83,  142,
83,  142,   83,  142,   83,  142,   83,  142,   79,   83,
142, 16408,   74,   83,  142,   27,   83,  142,   74,   83,
142,   74,   83,  142,   74,   83,  142,   74,   83,  142,
74,   83,  142,   74,   83,  142,   74,   83,  142,   74,
83,  142,   74,   83,  142,   74,   83,  142,   74,   83,

142,   74,   83,  142,   83,  142,   83,  142,   83,  142,
83,  142,   83,  142,   83,  142,   83,  142,   83,  142,
83,  142,  120,  121,  142,  119,  142,  119,  121,  142,
117,  121,  142,  116,  121,  142,  121,  142,  130,  131,
142,  129,  142,  129,  131,  142,  126,  131,  142,  127,
131,  142,  131,  142,  110,  111,  142,  109,  142,  109,
111,  142,  111,  142,  111,  142,  106,  142,  105,  142,
105,  142,  104,  142,  103,  104,  142,  100,  142,  100,
104,  142,  104,  142,   97,  142,   79,   97,  142,   88,
142,   88,   97,  142,   77,   97,  142,   74,   97,  142,

27,   97,  142,   74,   97,  142,   30,   97,  142,   78,
97,  142,   84,   86,   97,  142,   85,   97,  142,   48,
97,  142,   91,   97,  142,   37,   97,  142,   93,   97,
142,   67,   97,  142,   49,   97,  142,   69,   97,  142,
38,   87,   97,  142,   36,   97,  142,   60,   97,  142,
64,   97,  142,   61,   97,  142,   26,   97,  142,   65,
97,  142,   50,   97,  142,   89,   97,  142,   51,   97,
142,   39,   97,  142,   32,   97,  142,   90,   97,  142,
26,   97,  142,   97,  142,   97,  142,   97,  142,   97,
142,   97,  142,   97,  142,   97,  142,   97,  142,  141,

142,  132,  142,  135,  142,  135,  142,   77,  142,   78,
142,  137,  141,  142,  134,  142,  133,  142,  138,  141,
142,  136,  141,  142,  139,  141,  142,  140,  141,  142,
142,   25,  142,  142,   25,  142,   25,  142,   25,  142,
25,  142,   25,  142,   25,  142,   25,  142,   25,  142,
25,  142,   25,  142,   25,  142,   25,  142,  142,  142,
142,  142,  142,  142,  142,  142,   79,   81,   81,   80,
74,   74,    3,   29,   74,    2,   28,   74,   31,   51,
41,   42,   68,   43,   73,   44,   45,   75,   76,   72,
69,   62,   59,   58,   63,   74,   74,   74,   17,   74,

74,   74,   74,   74,    4,   74,   74,   74,   74,   74,
74,   74,   74,   33,   74,   79, 16408,   74,   74,    3,
29,   74,    2,   28,   74,   74,   74,   74,   17,   74,
74,   74,   74,   74,    4,   74,   74,   74,   74,   74,
74,   74,   74,   74,  120,  119,  112,  113,  114,  115,
130,  129,  122,  123,  124,  125,  110,  109,  107,  108,
106,  105,  103,  100,  101,  102,   79,   86,   95,   96,
87,   88,   29,   74,   28,   74,   87,  141,  132,  135,
25,   25,    3,   25,    2,   25,   25,   25,   25,   17,
25,   25,   25,   25,   25,    4,   25,   25,   25,   25,

25,   25,   25,   25,   25,   82,   82,   55,   52,   53,
54,   56,   72,   70,   71,   57,   74,   74,   74,   74,
74,    8,   74,   15,   74,   74,   74,   74,   74,   74,
74,   74,   20,   74,   74,    1,   74, 8216, 8216,   74,
74,   74,   74,   74,    8,   74,   15,   74,   74,   74,
74,   74,   74,   74,   74,   20,   74,   74,    1,   74,
118,  118,  128,  128,   92,   94,   98,   98,   25,   25,
25,   25,   25,    8,   25,   15,   25,   25,   25,   25,
25,   25,   25,   25,   20,   25,   25,   74,   12,   74,
74,   74,    6,   74,   74,   74,   74,   74,   74,   74,

74,    5,   74,   74,    1,    1,   74,    1,    1,    1,
1,    1,    1,    1,    1,   74, 8216,   74,   12,   74,
74,   74,    6,   74,   74,   74,   74,   74,   74,   74,
74,    5,   74,   74,    1,    1,   74,    1,    1,    1,
1,    1,    1,    1,    1,   74,   99,   25,   12,   25,
25,   25,    6,   25,   25,   25,   25,   25,   25,   25,
25,    5,   25,   25,   25,   74,   74,   18,   74,   21,
74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
16,   74,    1,    1,    1,    1,    1,    1,    1,   74,
74,   18,   74,   21,   74,   74,   74,   74,   74,   74,

74,   74,   74,   74,   16,   74,    1, 8216,    1, 8216,
1,    1,    1,    1,    1,    1,    1,   25,   25,   18,
25,   21,   25,   25,   25,   25,   25,   25,   25,   25,
25,   25,   16,   25,   74,    7,   74,   74,   74,   74,
23,   74,   22,   74,    9,   74,   10,   74,    1,    1,
1,   74,    7,   74,   74,   74,   74,   23,   74,   22,
74,    9,   74,   10,   74,    1, 8216,    1,    1,    1,
25,    7,   25,   25,   25,   25,   23,   25,   22,   25,
9,   25,   10,   25,   74,   74,   74,   74,    1,   74,
74,   74,   74,   74,    1,   74,   25,   25,   25,   25,

19,   74,   74,   13,   74,   74,   19,   74,   74,   13,
74,   74,   19,   25,   25,   13,   25,   25,   74,   11,
74,   74,   11,   74,   25,   11,   25,   74,   74,   25,
14,   74,   14,   74,   14,   25
} ;

static yyconst flex_int16_t yy_accept[810] =
{
0,
1,    1,    2,    3,    4,    5,    6,    7,    8,    9,
10,   10,   10,   10,   10,   10,   10,   10,   10,   11,
13,   16,   18,   21,   24,   27,   30,   33,   36,   39,
42,   45,   48,   51,   54,   57,   60,   63,   66,   69,
72,   75,   78,   81,   84,   87,   90,   93,   96,   99,
102,  105,  108,  111,  114,  117,  120,  123,  126,  129,
132,  135,  138,  141,  143,  145,  147,  149,  151,  153,
155,  157,  159,  163,  166,  169,  172,  175,  178,  181,
184,  187,  190,  193,  196,  199,  202,  205,  207,  209,
211,  213,  215,  217,  219,  221,  223,  226,  228,  231,

234,  237,  239,  242,  244,  247,  250,  253,  255,  258,
260,  263,  265,  267,  269,  271,  273,  275,  278,  280,
283,  285,  287,  290,  292,  295,  298,  301,  304,  307,
310,  313,  317,  320,  323,  326,  329,  332,  335,  338,
341,  345,  348,  351,  354,  357,  360,  363,  366,  369,
372,  375,  378,  381,  384,  386,  388,  390,  392,  394,
396,  398,  400,  402,  404,  406,  408,  410,  412,  415,
417,  419,  422,  425,  428,  431,  432,  434,  435,  437,
439,  441,  443,  445,  447,  449,  451,  453,  455,  457,
459,  460,  461,  462,  463,  464,  465,  466,  467,  468,

469,  470,  470,  470,  471,  472,  472,  472,  472,  472,
472,  472,  472,  472,  473,  473,  473,  473,  473,  473,
473,  473,  473,  476,  479,  480,  481,  481,  482,  483,
484,  485,  486,  487,  488,  489,  489,  490,  491,  492,
492,  492,  492,  493,  494,  494,  495,  495,  496,  496,
496,  497,  498,  499,  501,  502,  503,  504,  505,  507,
508,  509,  510,  511,  512,  513,  514,  515,  515,  516,
516,  516,  516,  516,  516,  516,  516,  516,  518,  518,
518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
519,  519,  519,  519,  519,  519,  519,  519,  519,  520,

520,  520,  520,  520,  520,  520,  520,  520,  523,  526,
527,  528,  529,  531,  532,  533,  534,  535,  537,  538,
539,  540,  541,  542,  543,  544,  545,  545,  545,  545,
545,  545,  545,  545,  545,  546,  547,  548,  549,  550,
551,  551,  552,  553,  554,  555,  556,  557,  557,  558,
559,  560,  561,  562,  563,  564,  565,  566,  567,  568,
569,  570,  571,  572,  573,  575,  577,  577,  578,  579,
580,  581,  582,  582,  582,  582,  582,  582,  582,  582,
582,  583,  583,  583,  583,  583,  583,  583,  583,  583,
585,  587,  588,  589,  590,  592,  593,  594,  595,  596,

598,  599,  600,  601,  602,  603,  604,  605,  606,  606,
606,  606,  606,  606,  606,  606,  607,  608,  608,  608,
608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
608,  608,  609,  610,  611,  612,  613,  614,  614,  615,
615,  616,  617,  618,  619,  620,  621,  622,  624,  626,
627,  628,  629,  630,  631,  632,  633,  635,  636,  638,
638,  638,  638,  638,  638,  638,  638,  638,  638,  638,
638,  638,  638,  638,  638,  638,  638,  638,  638,  638,
638,  638,  638,  638,  638,  638,  638,  638,  639,  640,
640,  640,  640,  640,  640,  640,  640,  640,  640,  640,

640,  640,  640,  640,  641,  642,  643,  644,  645,  647,
649,  650,  651,  652,  653,  654,  655,  656,  658,  659,
661,  661,  661,  661,  662,  663,  664,  665,  666,  667,
667,  668,  669,  669,  669,  669,  669,  669,  669,  669,
669,  669,  669,  669,  669,  669,  669,  669,  670,  671,
672,  673,  674,  676,  678,  679,  680,  681,  682,  683,
684,  685,  687,  688,  688,  688,  688,  688,  688,  688,
688,  688,  688,  689,  691,  692,  693,  695,  696,  697,
698,  699,  700,  701,  702,  704,  705,  706,  708,  709,
710,  711,  712,  713,  714,  715,  716,  717,  717,  717,

717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
717,  717,  717,  717,  717,  718,  718,  718,  718,  718,
718,  718,  719,  721,  722,  723,  725,  726,  727,  728,
729,  730,  731,  732,  734,  735,  736,  738,  739,  740,
741,  742,  743,  744,  745,  746,  747,  748,  748,  748,
748,  748,  748,  748,  749,  751,  752,  753,  755,  756,
757,  758,  759,  760,  761,  762,  764,  765,  766,  767,
768,  770,  772,  773,  774,  775,  776,  777,  778,  779,
780,  781,  783,  784,  785,  786,  787,  788,  789,  790,
790,  790,  790,  790,  790,  790,  790,  791,  792,  794,

796,  797,  798,  799,  800,  801,  802,  803,  804,  805,
807,  809,  811,  812,  813,  814,  815,  816,  817,  818,
819,  820,  822,  824,  825,  826,  827,  828,  829,  830,
831,  832,  833,  835,  836,  838,  839,  840,  841,  843,
845,  847,  849,  850,  851,  852,  852,  852,  853,  855,
856,  857,  858,  860,  862,  864,  866,  868,  869,  870,
871,  872,  874,  875,  876,  877,  879,  881,  883,  885,
886,  887,  888,  889,  891,  892,  893,  894,  895,  897,
898,  899,  900,  901,  903,  904,  906,  907,  909,  910,
912,  913,  915,  916,  918,  919,  920,  922,  923,  925,

926,  928,  929,  930,  931,  933,  935,  937,  937
} ;

static yyconst flex_int32_t yy_ec[256] =
{
0,
1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
2,    2,    4,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    2,    1,    5,    6,    7,    8,    9,   10,   11,
12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
23,   24,    6,   25,    6,    6,    6,   26,   27,   28,
6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
6,    6,    6,   29,    6,    6,    6,    6,    6,    6,
30,   31,   32,   33,    6,    1,   34,   35,   36,   37,

38,   39,    6,   40,   41,    6,   42,   43,   44,   45,
46,    6,    6,   47,   48,   49,   50,    6,   51,    6,
52,    6,   53,   54,   55,   56,    1,   57,   57,   57,
57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
57,   57,   57,   58,   58,   58,   58,   58,   58,   58,
58,   58,   58,   58,   58,   58,   58,   58,   58,   59,
59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
59,   59,   59,   59,   59,   59,   60,   59,   59,   59,
61,    1,    1,   62,   62,   62,   62,   62,   62,   62,

62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
62,   62,   62,   63,   64,   64,   64,   64,   64,   64,
64,   64,   64,   64,   64,   64,   65,   66,   67,   68,
69,   69,   69,   70,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1
} ;

static yyconst flex_int32_t yy_meta[71] =
{
0,
1,    2,    3,    4,    5,    6,    6,    7,    1,    5,
8,    1,    9,    1,   10,    1,   11,    9,   12,    1,
10,    8,    8,    8,    1,    6,    6,    6,    6,    1,
1,    1,    1,    6,    6,    6,    6,    6,    6,    6,
6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
6,    6,    1,    1,    1,    1,    1,    1,    1,    1,
1,    6,    6,    6,    6,    6,    6,    6,    6,    6
} ;

static yyconst flex_int16_t yy_base[835] =
{
0,
0,   70,  138,  141,  149,  157,  160,  166,  146,  153,
173,  178,  196,    0,  265,  320,  376,    0,  904, 4153,
183,  270,  279, 4153,  239,  248,  419,  893, 4153, 4153,
4153,  155, 4153, 4153, 4153,  319,  175,  329, 4153, 4153,
269,  272,  275,  276, 4153,  877, 4153, 4153,  325,  421,
423,  451,  425,  463,  469,  475,  477,  482,  504, 4153,
838, 4153,  317,  300,  267,  477,  132,  488,  497,  310,
502,  829,  562,  515,  524,  631,  567,  569,  571,  606,
573,  491,  608,  614,  633,  636,  638,  513,  417,  631,
137,  645,  650,  580,  655,  823,    0, 4153,  875,  274,

329,  844,    0, 4153,  848,  451,  599,  832,    0, 4153,
844,  826,  821,    0, 4153,  789, 4153,  783, 4153,  764,
655, 4153,  715,  718,  719, 4153,  699,  687,  730,  733,
4153, 4153, 4153,  334, 4153, 4153, 4153,  753,  719,  756,
728, 4153,  721,  646,  656,  723, 4153,  707, 4153, 4153,
4153,  632, 4153,  739,  730,  491,  738,  239,  743,  747,
752,  624,    0,  672, 4153,  653, 4153, 4153,    0, 4153,
4153,    0,    0,    0,    0, 4153,  752,  761,  804,  807,
811,  809,  836,  813,  848,  854,  860,  862,  867,  889,
862,  717,  873,  305,  882,  866,  887,  597,  933, 4153,

647,  947,  950,  759,  927,  900,  913,  920,  408,  925,
929,  934,  589,    0,  939,  942,  947,  484,  952,  956,
961,  587,  995,  997, 4153, 4153,    0, 4153,  446,  604,
596, 1011,  594, 4153, 4153,    0, 4153, 1013, 1016,  896,
1041,  741, 4153, 4153,  745, 4153,  758, 4153,  882,    0,
1030, 1033, 1035, 1037, 1049, 1062, 1065, 1074, 1067, 1081,
1079, 1096, 1103, 1108, 1112, 1121, 4153, 1029, 1126, 1119,
1124, 1129, 1134, 1139, 1144, 1149, 1154, 1214, 1161, 1170,
1184,  968, 1189,  510, 1194, 1108, 1199,  550, 1260, 1258,
1206, 1112, 1211,  518, 1231, 1235, 1241,  548, 1259, 1251,

1214, 1273,  906, 1278, 1245, 1283,  482, 1317, 1319, 1321,
1323, 1335, 1326, 1348, 1353, 1360, 1365, 1372, 1377, 1384,
1391, 1396, 1400, 1413, 1415, 1418, 1411, 1416, 1421, 1426,
1431, 1436, 1441, 1446,    0, 4153, 4153, 4153, 4153, 4153,
1505,    0, 4153, 4153, 4153, 4153, 4153, 1507,    0, 4153,
4153, 4153,    0, 4153,  525, 4153, 4153, 4153, 1512, 4153,
523,  521,  507, 1068, 1490, 1492, 1531,  505,    0,  499,
4153, 1508, 1485, 1254, 1493,  912, 1501, 1259, 1506,  442,
1506, 1520, 1399, 1525, 1076, 1530, 1534, 1539,  438, 1573,
1575, 1577, 1579, 1591, 1582, 1604, 1609, 1616, 1621, 1628,

1633, 1640, 1647, 1652, 1656, 1669, 1671, 1674, 1667, 1672,
1677, 1682, 1687, 1692, 1697, 4153,  490, 1702, 1707, 1712,
1717, 1722, 1727, 1732, 1737, 1742, 1747, 1752, 1757, 1762,
1767, 4153, 4153, 4153, 4153, 4153, 1810,  454,  438,  356,
354, 4153, 1804, 1802, 1806, 1821, 1828, 1830, 1833, 1835,
1847, 1852, 1859, 1861, 1864, 1866, 1878, 1890, 1939, 1863,
1877, 1953, 2013, 1959, 1655, 1964, 1101, 1969, 1973, 1978,
308, 2038, 1984, 1871, 1989, 1162, 1994, 1998, 2003,  292,
2008, 2013, 2027, 2032, 2037, 2052, 2057, 4153, 2117, 2063,
2072, 2077, 2085, 2090, 2095, 2100, 2105, 2110, 2115, 2120,

2125, 2130, 2135, 2169, 2171, 2176, 2178, 2185, 2193, 2200,
2202, 2207, 2215, 2219, 2224, 2231, 2238, 2243, 2246, 2295,
2309, 2314, 2319, 4153,  330, 4153,  317,  281,  271, 2379,
4153,  180,  153, 2327, 2332, 2341, 2346, 2351, 2356, 2361,
2366, 2371, 2376, 2381, 2386, 2391, 2396, 2430, 2432, 2437,
2439, 2446, 2454, 2461, 2463, 2468, 2476, 2480, 2485, 2492,
2499, 2504, 2507, 2500, 2505, 2510, 2515, 2520, 2525, 2530,
2535, 2540, 2574, 2576, 2578, 2580, 2583, 2602, 2605, 2608,
2614, 2617, 2631, 2633, 2645, 2647,    0,    0, 2630, 2066,
2640, 1321, 2645, 2649, 2654,  108, 2688, 2661, 2671, 2681,

2686, 2691, 2696, 2701, 2706, 2711, 2716, 2721, 2726, 2731,
2736, 2741, 2746, 2751, 2811, 2757, 2766, 2771, 2779, 2784,
2789, 2823, 2825, 2827, 2829, 2832, 2851, 2854, 2857, 2863,
2866, 2880, 2882, 2894, 2896, 2925,    0, 2880, 2335, 2894,
1328, 2899, 2665, 2904,   90, 2938, 4153, 2911, 2925, 2931,
2936, 2941, 2946, 2980, 2982, 2984, 2986, 2989, 3008, 3011,
3014, 3020, 3023, 3037, 3039, 3051, 3053, 3055, 3067,    0,
3069, 3081, 3083, 3085, 3097, 3109, 3112, 3115, 3127, 3131,
3139, 3145, 3132, 3138, 3143, 3148, 3153, 3158, 3163, 3168,
3173, 3178, 3183, 3188, 3193,    0, 3227,    0, 3229, 3231,

3234, 3236, 3243, 3258, 3261, 3265, 3277, 3280, 3292, 3289,
0, 3321, 3276, 3288, 3293, 3298, 3303, 3308, 3313, 3347,
0, 3349, 3351, 3354, 3356, 3363, 3378, 3381, 3385, 3397,
3400, 3412, 3409, 3415, 3427, 3431, 3440, 3434, 3443, 3449,
3456, 3462, 3449, 3455, 3460,    0,    0, 3494, 3496, 3498,
3500, 3512, 3503, 3526, 3528, 3530, 3560, 3513, 3527, 3532,
3566, 3568, 3570, 3572, 3584, 3575, 3598, 3600, 3602, 3606,
3614, 3628, 3630,    0, 3632, 3636, 3654, 3658,    0, 3662,
3666, 3680, 3684, 3688, 3702, 3706, 3710, 3718, 3724, 3732,
3740, 3746, 3755, 3748, 3762, 3764, 3770, 3777, 3779, 3786,

3792, 3801, 3808, 3810, 3805, 3823, 3832, 4153, 3881, 3893,
3905, 3917, 3929, 3941, 3948, 3955, 3966, 3972, 3979, 3991,
4003, 4015, 4027, 4039, 4046, 4053, 4065, 4076, 4087, 4097,
4104, 4116, 4128, 4140
} ;

static yyconst flex_int16_t yy_def[835] =
{
0,
808,  808,  809,  809,  810,  810,  811,  811,  812,  812,
813,  813,  808,   13,  814,  814,  808,   17,  808,  808,
808,  808,  808,  808,  815,  816,  815,  808,  808,  808,
808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
808,  808,  808,  808,  808,  808,  808,  808,   27,   27,
27,   27,   27,   27,   27,   27,   27,   27,   27,  808,
808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
808,  808,  817,  818,  819,  818,   76,   76,   76,   76,
76,   76,   76,   76,   76,   76,   76,  808,  808,  808,
808,  808,  808,  808,  808,  808,  820,  808,  808,  808,

808,  808,  821,  808,  808,  808,  808,  808,  822,  808,
808,  808,  808,  823,  808,  808,  808,  808,  808,  808,
808,  808,  808,  808,  808,  808,   27,  816,   27,  808,
808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
808,  808,  824,  808,  808,  808,  808,  808,  824,  808,
808,  824,  824,  824,  824,  808,  825,  826,  825,  179,
179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
808,  808,  808,  808,  808,  808,  808,  808,  808,  808,

808,  808,  808,  808,   27,  808,  808,  808,  808,  808,
808,  808,  808,  128,  808,  808,  808,  808,  808,  808,
808,  808,   27,   27,  808,  808,  827,  808,  808,  808,
808,  808,  808,  808,  808,  828,  808,  808,  808,  808,
808,  808,  808,  808,  808,  808,  808,  808,  808,  829,
27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
27,   27,   27,   27,   27,   27,  808,  808,   27,  808,
808,  808,  808,  808,  808,  808,  808,  817,  830,  831,
808,  808,  808,  808,  808,  808,  808,  808,  832,   76,
808,  808,  808,  808,  808,  808,  808,  808,  819,  808,

808,  808,  808,  808,  808,  808,  808,   76,   76,   76,
76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
76,   76,   76,   76,   76,   76,  808,  808,  808,  808,
808,  808,  808,  808,  820,  808,  808,  808,  808,  808,
808,  821,  808,  808,  808,  808,  808,  808,  822,  808,
808,  808,  823,  808,  808,  808,  808,  808,  808,  808,
808,  808,  808,  808,   27,   27,  808,  808,  824,  808,
808,  179,  808,  808,  808,  808,  808,  808,  808,  808,
826,  808,  808,  808,  808,  808,  808,  808,  808,  179,
179,  179,  179,  179,  179,  179,  179,  179,  179,  179,

179,  179,  179,  179,  179,  179,  179,  179,  808,  808,
808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
808,  808,   27,   27,   27,   27,   27,   27,   27,   27,
27,   27,   27,   27,   27,   27,   27,   27,  808,  808,
808,  808,  830,  808,  808,  808,  808,  808,  808,  808,
808,  831,  808,  808,  808,  808,  808,  808,  808,  808,
808,  808,  808,  808,  808,  808,  808,  808,  832,  808,
808,  808,  808,  808,  808,  808,  808,  808,  808,  808,

808,  808,  808,   76,   76,   76,   76,   76,   76,   76,
76,   76,   76,   76,   76,   76,   76,   76,   76,  808,
808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
808,  808,  808,  808,  808,  808,  808,  179,  179,  179,
179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
179,  179,  179,  808,  808,  808,  808,  808,  808,  808,
808,  808,   27,   27,   27,   27,   27,   27,   27,   27,
27,   27,   27,   27,   27,   27,  833,  459,  833,  833,
833,  833,  833,  833,  833,  833,   27,  808,  808,  808,

808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
808,  808,  808,  808,  832,  808,  808,  808,  808,  808,
808,   76,   76,   76,   76,   76,   76,   76,   76,   76,
76,   76,   76,   76,   76,  834,  520,  833,  833,  833,
833,  833,  833,  833,  833,   76,  808,  808,  808,  808,
808,  808,  808,  179,  179,  179,  179,  179,  179,  179,
179,  179,  179,  179,  179,  179,  179,  179,   27,  128,
27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
27,   27,  833,  833,  833,  833,  833,  833,  833,  808,
808,  808,  808,  808,  808,  463,   76,  299,   76,   76,

76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
833,  834,  833,  833,  833,  833,  833,  833,  833,  179,
381,  179,  179,  179,  179,  179,  179,  179,  179,  179,
179,  179,  179,   27,   27,   27,   27,   27,   27,   27,
27,   27,  833,  833,  833,  463,  472,   76,   76,   76,
76,   76,   76,   76,   76,   76,  834,  833,  833,  833,
179,  179,  179,  179,  179,  179,  179,  179,  179,   27,
27,   27,   27,  459,   76,   76,   76,   76,  520,  179,
179,  179,  179,   27,   27,   27,   27,   76,   76,   76,
76,  179,  179,  179,  179,   27,   27,   76,   76,  179,

179,   27,   76,  179,   27,   76,  179,    0,  808,  808,
808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
808,  808,  808,  808
} ;

static yyconst flex_int16_t yy_nxt[4224] =
{
0,
20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
40,   41,   42,   43,   44,   25,   25,   25,   25,   45,
46,   47,   48,   25,   49,   50,   51,   52,   53,   25,
54,   25,   25,   25,   25,   55,   56,   57,   58,   25,
59,   25,   60,   61,   62,   63,   20,   20,   20,   20,
20,   64,   65,   66,   67,   68,   69,   70,   71,   72,
20,   73,   22,   23,   24,   74,   75,   76,   28,   29,
30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
40,   41,   42,   43,   44,   74,   74,   74,   74,   45,

46,   47,   48,   74,   77,   78,   79,   80,   81,   74,
82,   74,   74,   74,   74,   83,   84,   85,   86,   74,
87,   74,   60,   61,   62,   63,   20,   20,   20,   20,
20,   88,   89,   90,   91,   92,   93,   94,   95,   96,
98,   99,  100,   98,   99,  100,  719,  101,  115,  116,
101,  104,  105,  106,  102,  115,  116,  102,  107,  104,
105,  106,  110,  111,  689,  108,  107,  226,  110,  111,
647,  227,  112,  108,  118,  119,  120,  113,  112,  118,
119,  120,  531,  113,  199,  200,  201,  235,  272,  272,
121,  236,  237,  329,  329,  121,  122,  123,  124,  125,

126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
146,  127,  127,  127,  127,  147,  148,  149,  150,  127,
127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
127,  127,  127,  127,  127,  127,  127,  127,  151,  152,
153,  154,  122,  122,  122,  122,  122,  155,  156,  157,
158,  159,  159,  160,  161,  162,  164,  165,  166,  167,
242,  202,  529,  245,  168,  169,  247,  249,  337,  170,
202,  204,  528,  338,  203,  171,  172,  173,  174,  175,
203,  243,  244,  203,  246,  272,  272,  248,  244,  203,

206,  207,  208,  209,  210,  210,  211,  212,  213,  215,
216,  217,  218,  219,  219,  220,  221,  222,  268,  526,
175,  164,  165,  166,  167,  270,  270,  270,  228,  168,
169,  229,  524,  339,  170,  230,  231,  232,  340,  244,
171,  172,  173,  174,  175,  238,  226,  239,  611,  233,
227,  234,  205,  205,  240,  241,  269,  269,  269,  269,
269,  411,  411,  205,  604,  240,  241,  275,  275,  275,
275,  251,  441,  205,  441,  175,  176,  176,  176,  176,
176,  177,  178,  179,  176,  176,  176,  176,  176,  176,
176,  176,  176,  176,  176,  176,  176,  176,  176,  176,

176,  177,  177,  177,  177,  176,  176,  176,  176,  177,
180,  181,  182,  183,  184,  177,  185,  177,  177,  177,
177,  186,  187,  188,  189,  177,  190,  177,  176,  176,
176,  176,  176,  176,  176,  176,  176,  191,  192,  193,
194,  195,  195,  196,  197,  198,  223,  224,  205,  205,
205,  205,  205,  205,  252,  344,  439,  223,  234,  205,
345,  205,  433,  205,  420,  420,  253,  224,  254,  205,
257,  205,  439,  205,  258,  327,  327,  327,  205,  205,
206,  207,  208,  209,  210,  210,  211,  212,  213,  205,
205,  205,  416,  255,  547,  256,  205,  205,  540,  205,

370,  259,  205,  205,  205,  205,  368,  205,  368,  205,
205,  205,  261,  205,  262,  205,  289,  260,  290,  290,
205,  264,  529,  205,  528,  205,  355,  263,  265,  318,
205,  205,  205,  271,  271,  271,  271,  271,  503,  290,
427,  427,  205,  266,  273,  273,  273,  273,  273,  270,
270,  270,  205,  273,  273,  273,  274,  273,  276,  276,
276,  276,  276,  278,  200,  201,  483,  483,  280,  326,
326,  326,  326,  326,  492,  492,  291,  292,  293,  294,
295,  295,  296,  297,  298,  300,  301,  302,  303,  304,
304,  305,  306,  307,  290,  290,  290,  290,  290,  290,

290,  290,  311,  346,  496,  290,  487,  290,  347,  290,
435,  290,  434,  310,  312,  290,  313,  290,  316,  290,
230,  290,  317,  281,  282,  283,  284,  285,  285,  286,
287,  288,  289,  290,  290,  290,  290,  332,  332,  332,
332,  290,  290,  431,  290,  424,  290,  245,  314,  200,
315,  320,  290,  415,  290,  371,  319,  247,  308,  309,
290,  290,  290,  290,  290,  290,  290,  357,  246,  308,
321,  290,  358,  370,  290,  323,  290,  325,  248,  309,
277,  290,  324,  322,  290,  267,  290,  328,  328,  328,
328,  328,  291,  292,  293,  294,  295,  295,  296,  297,

298,  330,  330,  330,  330,  330,  330,  330,  330,  331,
330,  333,  333,  333,  333,  333,  359,  200,  201,  202,
202,  364,  242,  250,  249,  360,  205,  205,  361,  368,
362,  235,  203,  203,  363,  236,  237,  205,  203,  203,
268,  225,  242,  243,  244,  244,  245,  205,  215,  216,
217,  218,  219,  219,  220,  221,  222,  365,  366,  247,
202,  244,  228,  243,  244,  229,  356,  246,  365,  367,
231,  232,  238,  203,  239,  409,  409,  409,  366,  203,
248,  240,  241,  233,  355,  234,  269,  269,  269,  269,
269,  354,  240,  241,  271,  271,  271,  271,  271,  273,

273,  273,  273,  273,  275,  275,  275,  275,  276,  276,
276,  276,  276,  373,  374,  375,  376,  377,  377,  378,
379,  380,  382,  383,  384,  385,  386,  386,  387,  388,
389,  390,  391,  352,  372,  372,  372,  372,  372,  372,
372,  372,  390,  351,  393,  372,  350,  372,  348,  372,
343,  372,  391,  392,  395,  372,  394,  372,  398,  372,
341,  372,  399,  372,  372,  373,  374,  375,  376,  377,
377,  378,  379,  380,  372,  372,  372,  336,  396,  334,
397,  372,  372,  249,  372,  277,  400,  372,  372,  372,
372,  267,  372,  250,  372,  372,  372,  402,  372,  403,

372,  225,  401,  808,  244,  372,  405,  808,  372,  438,
372,  438,  404,  406,  439,  372,  372,  372,  408,  408,
408,  408,  408,  413,  413,  413,  413,  372,  407,  410,
410,  410,  410,  410,  199,  200,  201,  372,  412,  412,
412,  412,  412,  414,  414,  414,  414,  414,  202,  416,
417,  202,  416,  417,  205,  205,  205,  205,  205,  205,
205,  203,  499,  499,  203,  205,  808,  203,  536,  536,
203,  418,  418,  418,  808,  205,  419,  419,  419,  419,
419,  421,  421,  421,  421,  421,  422,  422,  422,  422,
423,  423,  423,  423,  423,  214,  214,  214,  214,  214,

425,  425,  425,  426,  426,  426,  426,  426,  428,  428,
428,  428,  428,  429,  429,  429,  429,  430,  430,  430,
430,  430,  205,  205,  205,  205,  481,  481,  481,  232,
268,  437,  238,  205,  239,  205,  240,  241,  240,  241,
808,  240,  241,  205,  808,  205,  808,  240,  241,  240,
241,  244,  240,  241,  440,  808,  440,  205,  205,  441,
205,  205,  205,  205,  205,  205,  808,  443,  205,  202,
808,  205,  808,  205,  808,  205,  205,  205,  205,  446,
444,  445,  203,  205,  808,  205,  808,  205,  203,  205,
205,  808,  205,  205,  205,  205,  447,  205,  448,  808,

205,  205,  205,  205,  808,  205,  205,  205,  205,  205,
205,  449,  205,  205,  808,  205,  808,  205,  450,  205,
451,  808,  205,  205,  205,  808,  452,  453,  808,  205,
205,  205,  543,  543,  205,  205,  205,  808,  454,  205,
205,  205,  808,  455,  205,  456,  205,  808,  205,  205,
205,  205,  808,  205,  205,  808,  205,  600,  600,  205,
205,  458,  289,  457,  205,  485,  485,  485,  485,  205,
490,  490,  490,  808,  205,  269,  269,  269,  269,  269,
269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
269,  269,  269,  269,  269,  269,  269,  269,  269,  459,

460,  460,  460,  460,  460,  461,  461,  461,  461,  461,
462,  462,  462,  462,  462,  278,  200,  201,  607,  607,
280,  808,  464,  465,  466,  467,  468,  468,  469,  470,
471,  473,  474,  475,  476,  477,  477,  478,  479,  480,
279,  279,  279,  279,  279,  482,  482,  482,  482,  482,
484,  484,  484,  484,  484,  486,  486,  486,  486,  486,
289,  289,  290,  290,  290,  290,  290,  491,  491,  491,
491,  491,  497,  497,  497,  281,  282,  283,  284,  285,
285,  286,  287,  288,  489,  290,  290,  493,  493,  493,
493,  493,  494,  494,  494,  494,  290,  495,  495,  495,

495,  495,  501,  501,  501,  501,  290,  299,  299,  299,
299,  299,  534,  534,  534,  489,  538,  538,  538,  538,
300,  301,  302,  303,  304,  304,  305,  306,  307,  498,
498,  498,  498,  498,  500,  500,  500,  500,  500,  502,
502,  502,  502,  502,  290,  290,  290,  290,  290,  290,
290,  290,  808,  290,  290,  290,  808,  290,  504,  290,
808,  290,  290,  290,  290,  290,  808,  290,  808,  290,
505,  506,  808,  290,  290,  290,  290,  685,  685,  507,
290,  290,  808,  290,  715,  715,  290,  290,  290,  509,
808,  290,  290,  290,  808,  508,  290,  808,  290,  290,

290,  290,  808,  290,  290,  290,  510,  808,  290,  511,
290,  290,  290,  290,  808,  290,  512,  808,  290,  290,
290,  808,  290,  290,  290,  290,  808,  290,  290,  290,
808,  513,  514,  515,  290,  808,  516,  517,  290,  290,
290,  290,  290,  290,  290,  290,  290,  808,  290,  808,
808,  290,  808,  290,  808,  519,  290,  541,  541,  541,
808,  290,  808,  290,  518,  808,  290,  326,  326,  326,
326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
326,  520,  521,  521,  521,  521,  521,  522,  522,  522,

522,  522,  523,  523,  523,  523,  523,  524,  525,  526,
527,  808,  808,  359,  200,  201,  808,  205,  205,  205,
205,  341,  360,  348,  808,  361,  808,  362,  205,  808,
205,  363,  530,  531,  532,  372,  372,  808,  205,  808,
205,  372,  372,  372,  372,  372,  372,  367,  533,  535,
535,  535,  535,  535,  808,  808,  372,  537,  537,  537,
537,  537,  539,  539,  539,  539,  539,  382,  383,  384,
385,  386,  386,  387,  388,  389,  381,  381,  381,  381,
381,  542,  542,  542,  542,  542,  544,  544,  544,  544,
544,  545,  545,  545,  545,  546,  546,  546,  546,  546,

372,  372,  372,  372,  372,  372,  372,  372,  808,  372,
372,  372,  808,  372,  548,  372,  808,  372,  372,  372,
372,  372,  808,  372,  808,  372,  549,  550,  808,  372,
372,  372,  372,  808,  808,  551,  372,  372,  808,  372,
808,  808,  372,  372,  372,  553,  808,  372,  372,  372,
808,  552,  372,  808,  372,  372,  372,  372,  808,  372,
372,  372,  554,  808,  372,  555,  372,  372,  372,  372,
808,  372,  556,  808,  372,  372,  372,  808,  372,  372,
372,  372,  808,  372,  372,  372,  808,  557,  558,  559,
372,  808,  560,  561,  372,  372,  372,  372,  372,  372,

372,  372,  372,  808,  372,  808,  808,  372,  808,  372,
808,  563,  372,  598,  598,  598,  808,  372,  808,  372,
562,  808,  372,  408,  408,  408,  408,  408,  408,  408,
408,  408,  408,  408,  408,  408,  408,  408,  408,  408,
408,  408,  408,  564,  564,  564,  564,  564,  565,  565,
565,  565,  565,  566,  566,  566,  566,  566,  205,  205,
205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
205,  205,  205,  205,  205,  205,  205,  205,  567,  567,
567,  567,  567,  568,  568,  568,  568,  568,  569,  569,
569,  569,  569,  214,  214,  214,  214,  214,  214,  214,

214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
214,  214,  214,  570,  570,  570,  570,  570,  571,  571,
571,  571,  571,  572,  572,  572,  572,  572,  437,  205,
205,  205,  205,  205,  205,  240,  241,  573,  808,  574,
205,  575,  205,  808,  205,  808,  240,  241,  205,  205,
205,  808,  205,  808,  205,  205,  205,  205,  205,  205,
205,  205,  205,  205,  808,  577,  205,  808,  578,  576,
579,  205,  808,  205,  205,  205,  205,  808,  205,  205,
205,  205,  808,  205,  580,  205,  205,  205,  205,  205,
205,  205,  205,  205,  205,  205,  808,  205,  583,  205,

205,  581,  205,  808,  205,  205,  205,  205,  582,  205,
585,  808,  584,  808,  205,  808,  205,  205,  205,  597,
597,  597,  597,  597,  808,  808,  205,  808,  205,  605,
605,  605,  586,  597,  597,  597,  597,  597,  205,  587,
587,  808,  587,  587,  588,  588,  587,  587,  587,  587,
587,  587,  587,  587,  587,  587,  587,  588,  587,  587,
587,  587,  587,  587,  588,  588,  588,  588,  587,  587,
587,  587,  588,  588,  588,  588,  588,  588,  588,  588,
588,  588,  588,  588,  588,  588,  588,  588,  588,  588,
588,  587,  587,  587,  587,  587,  587,  587,  587,  587,

589,  590,  591,  592,  593,  593,  594,  595,  596,  597,
597,  597,  597,  597,  289,  463,  463,  463,  463,  463,
599,  599,  599,  599,  599,  601,  601,  601,  601,  601,
602,  602,  602,  602,  603,  603,  603,  603,  603,  289,
472,  472,  472,  472,  472,  606,  606,  606,  606,  606,
608,  608,  608,  608,  608,  609,  609,  609,  609,  610,
610,  610,  610,  610,  279,  279,  279,  279,  279,  279,
279,  279,  279,  279,  464,  465,  466,  467,  468,  468,
469,  470,  471,  279,  279,  279,  279,  279,  279,  279,
279,  279,  279,  612,  612,  612,  612,  612,  808,  473,

474,  475,  476,  477,  477,  478,  479,  480,  613,  613,
613,  613,  613,  614,  614,  614,  614,  614,  615,  290,
290,  290,  290,  290,  683,  683,  683,  488,  290,  290,
290,  290,  290,  290,  290,  290,  290,  290,  488,  808,
488,  290,  290,  290,  290,  290,  616,  616,  616,  616,
616,  617,  617,  617,  617,  617,  618,  618,  618,  618,
618,  299,  299,  299,  299,  299,  299,  299,  299,  299,
299,  299,  299,  299,  299,  299,  299,  299,  299,  299,
299,  619,  619,  619,  619,  619,  620,  620,  620,  620,
620,  621,  621,  621,  621,  621,  290,  290,  290,  290,

808,  808,  622,  290,  290,  290,  290,  290,  623,  290,
808,  624,  290,  290,  290,  808,  290,  290,  808,  290,
290,  290,  626,  290,  290,  808,  625,  290,  290,  290,
290,  627,  808,  290,  290,  290,  808,  628,  290,  808,
290,  290,  290,  290,  629,  290,  290,  290,  290,  808,
290,  290,  290,  290,  808,  290,  808,  290,  290,  290,
808,  632,  290,  290,  630,  290,  290,  290,  631,  290,
290,  290,  290,  290,  290,  808,  290,  808,  808,  633,
808,  290,  634,  808,  290,  808,  290,  808,  635,  808,
808,  290,  808,  808,  290,  587,  636,  808,  587,  587,

637,  637,  587,  587,  587,  587,  587,  587,  587,  587,
587,  587,  587,  637,  587,  587,  587,  587,  587,  587,
637,  637,  637,  637,  587,  587,  587,  587,  637,  637,
637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
637,  637,  637,  637,  637,  637,  637,  587,  587,  587,
587,  587,  587,  587,  587,  587,  638,  639,  640,  641,
642,  642,  643,  644,  645,  646,  646,  646,  646,  646,
646,  646,  646,  646,  646,  646,  646,  646,  646,  646,
530,  531,  532,  372,  372,  372,  372,  372,  372,  372,
372,  372,  372,  713,  713,  713,  533,  372,  372,  372,

372,  372,  372,  372,  372,  372,  372,  648,  648,  648,
648,  648,  649,  649,  649,  649,  649,  650,  650,  650,
650,  650,  381,  381,  381,  381,  381,  381,  381,  381,
381,  381,  381,  381,  381,  381,  381,  381,  381,  381,
381,  381,  651,  651,  651,  651,  651,  652,  652,  652,
652,  652,  653,  653,  653,  653,  653,  372,  372,  372,
372,  808,  808,  654,  372,  372,  372,  372,  372,  655,
372,  808,  656,  372,  372,  372,  808,  372,  372,  808,
372,  372,  372,  658,  372,  372,  808,  657,  372,  372,
372,  372,  659,  808,  372,  372,  372,  808,  660,  372,

808,  372,  372,  372,  372,  661,  372,  372,  372,  372,
808,  372,  372,  372,  372,  808,  372,  808,  372,  372,
372,  808,  664,  372,  372,  662,  372,  372,  372,  663,
372,  372,  372,  372,  372,  372,  808,  372,  808,  808,
665,  808,  372,  666,  808,  372,  808,  372,  808,  667,
808,  808,  372,  808,  808,  372,  668,  668,  668,  668,
668,  668,  668,  668,  668,  668,  668,  668,  668,  668,
668,  669,  669,  669,  669,  669,  669,  669,  669,  669,
669,  669,  669,  669,  669,  669,  670,  670,  670,  670,
670,  670,  670,  670,  670,  670,  670,  670,  670,  670,

670,  205,  205,  205,  205,  205,  205,  205,  205,  808,
205,  205,  205,  808,  205,  671,  205,  672,  205,  808,
673,  205,  205,  674,  205,  808,  205,  808,  205,  205,
205,  205,  205,  205,  808,  205,  205,  808,  808,  808,
205,  205,  205,  205,  205,  205,  205,  808,  808,  808,
205,  675,  205,  676,  677,  205,  205,  678,  205,  205,
205,  205,  205,  679,  808,  205,  680,  808,  681,  205,
808,  205,  205,  205,  205,  205,  808,  808,  808,  205,
808,  205,  808,  205,  682,  205,  588,  588,  588,  588,
588,  808,  808,  205,  808,  205,  684,  684,  684,  684,

684,  686,  686,  686,  686,  686,  687,  687,  687,  687,
688,  688,  688,  688,  688,  205,  205,  463,  463,  463,
463,  463,  717,  717,  717,  717,  205,  463,  463,  463,
463,  463,  808,  808,  808,  808,  205,  463,  463,  463,
463,  463,  463,  463,  463,  463,  463,  690,  690,  690,
690,  690,  691,  691,  691,  691,  691,  692,  692,  692,
692,  692,  472,  472,  472,  472,  472,  472,  472,  472,
472,  472,  472,  472,  472,  472,  472,  472,  472,  472,
472,  472,  693,  693,  693,  693,  693,  694,  694,  694,
694,  694,  695,  695,  695,  695,  695,  696,  696,  696,

696,  696,  696,  696,  696,  696,  696,  696,  696,  696,
696,  696,  615,  697,  697,  697,  697,  697,  808,  808,
808,  488,  697,  697,  697,  697,  697,  697,  697,  697,
697,  697,  488,  808,  488,  698,  698,  698,  698,  698,
698,  698,  698,  698,  698,  698,  698,  698,  698,  698,
290,  290,  290,  290,  290,  290,  290,  290,  808,  290,
290,  290,  808,  290,  699,  290,  700,  290,  808,  701,
290,  290,  702,  290,  808,  290,  808,  290,  290,  290,
290,  290,  290,  808,  290,  290,  808,  808,  808,  290,
290,  290,  290,  290,  290,  290,  808,  808,  808,  290,

703,  290,  704,  705,  290,  290,  706,  290,  290,  290,
290,  290,  707,  808,  290,  708,  808,  709,  290,  808,
290,  290,  290,  290,  290,  808,  636,  488,  290,  808,
290,  808,  290,  710,  290,  587,  637,  637,  637,  637,
637,  808,  290,  808,  290,  808,  587,  587,  587,  712,
714,  714,  714,  714,  714,  716,  716,  716,  716,  716,
718,  718,  718,  718,  718,  290,  290,  720,  720,  720,
720,  720,  808,  808,  808,  808,  290,  808,  808,  808,
712,  720,  720,  720,  720,  720,  290,  720,  720,  720,
720,  720,  721,  721,  721,  721,  721,  721,  721,  721,

721,  721,  721,  721,  721,  721,  721,  372,  372,  372,
372,  372,  372,  372,  372,  808,  372,  372,  372,  808,
372,  722,  372,  723,  372,  808,  724,  372,  372,  725,
372,  808,  372,  808,  372,  372,  372,  372,  372,  372,
808,  372,  372,  808,  808,  808,  372,  372,  372,  372,
372,  372,  372,  808,  808,  808,  372,  726,  372,  727,
728,  372,  372,  729,  372,  372,  372,  372,  372,  730,
808,  372,  731,  808,  732,  372,  808,  372,  372,  372,
372,  372,  372,  372,  808,  372,  808,  372,  808,  372,
733,  372,  808,  372,  205,  205,  205,  205,  808,  372,

808,  372,  808,  372,  808,  205,  808,  205,  205,  205,
205,  205,  205,  205,  808,  205,  808,  205,  808,  205,
808,  205,  808,  735,  205,  205,  808,  734,  808,  205,
808,  205,  808,  205,  808,  205,  205,  205,  808,  205,
205,  736,  205,  205,  808,  205,  808,  205,  808,  737,
205,  808,  739,  205,  205,  205,  808,  205,  205,  205,
205,  808,  738,  205,  808,  205,  205,  205,  808,  205,
808,  740,  205,  205,  808,  205,  808,  205,  742,  741,
808,  808,  808,  205,  808,  808,  808,  205,  588,  588,
588,  588,  588,  205,  588,  588,  588,  588,  588,  588,

588,  588,  588,  588,  588,  588,  588,  588,  588,  743,
743,  743,  743,  743,  744,  744,  744,  744,  744,  745,
745,  745,  745,  745,  746,  746,  746,  746,  746,  746,
746,  746,  746,  746,  746,  746,  746,  746,  746,  747,
747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
747,  747,  747,  747,  290,  290,  290,  290,  290,  290,
808,  290,  290,  290,  290,  290,  808,  290,  808,  290,
290,  290,  290,  808,  749,  290,  808,  290,  748,  290,
808,  290,  290,  808,  290,  290,  290,  750,  290,  290,
808,  290,  290,  290,  808,  808,  290,  808,  751,  290,

808,  808,  753,  290,  290,  290,  290,  290,  290,  290,
808,  752,  808,  290,  808,  290,  290,  290,  290,  290,
290,  754,  757,  488,  808,  290,  808,  290,  755,  808,
290,  756,  637,  637,  637,  637,  637,  290,  808,  808,
290,  808,  808,  587,  637,  637,  637,  637,  637,  637,
637,  637,  637,  637,  637,  637,  637,  637,  637,  758,
758,  758,  758,  758,  759,  759,  759,  759,  759,  760,
760,  760,  760,  760,  372,  372,  372,  372,  372,  372,
808,  372,  372,  372,  372,  372,  808,  372,  808,  372,
372,  372,  372,  808,  762,  372,  808,  372,  761,  372,

808,  372,  372,  808,  372,  372,  372,  763,  372,  372,
808,  372,  372,  372,  808,  808,  372,  808,  764,  372,
808,  808,  766,  372,  372,  372,  372,  372,  372,  372,
808,  765,  808,  372,  808,  372,  372,  372,  372,  372,
372,  767,  205,  205,  808,  372,  808,  372,  768,  808,
372,  769,  808,  205,  205,  205,  808,  372,  205,  205,
372,  205,  205,  205,  770,  205,  771,  205,  205,  205,
205,  205,  205,  808,  773,  205,  205,  205,  205,  205,
808,  205,  205,  205,  205,  772,  808,  205,  205,  205,
205,  205,  808,  808,  205,  808,  808,  205,  808,  808,

205,  808,  808,  808,  205,  774,  774,  774,  774,  774,
205,  774,  774,  774,  774,  774,  774,  774,  774,  774,
774,  290,  290,  290,  290,  290,  290,  290,  290,  808,
290,  290,  290,  776,  290,  808,  290,  808,  290,  290,
290,  290,  290,  775,  290,  777,  290,  808,  290,  808,
290,  290,  778,  290,  290,  290,  290,  290,  290,  808,
290,  757,  488,  808,  290,  808,  290,  808,  290,  779,
779,  779,  779,  779,  290,  808,  290,  808,  290,  808,
808,  808,  587,  779,  779,  779,  779,  779,  779,  779,
779,  779,  779,  372,  372,  372,  372,  372,  372,  372,

372,  808,  372,  372,  372,  781,  372,  808,  372,  808,
372,  372,  372,  372,  372,  780,  372,  782,  372,  808,
372,  808,  372,  372,  783,  372,  372,  372,  372,  372,
372,  808,  372,  205,  205,  808,  372,  808,  372,  808,
372,  205,  205,  784,  205,  808,  372,  808,  372,  808,
372,  808,  205,  808,  205,  205,  205,  205,  205,  290,
290,  808,  785,  290,  290,  808,  205,  808,  205,  788,
290,  808,  786,  808,  290,  808,  205,  787,  205,  808,
290,  290,  290,  808,  789,  290,  290,  808,  808,  372,
372,  808,  290,  372,  372,  808,  290,  808,  790,  792,

372,  808,  290,  808,  372,  791,  290,  372,  372,  808,
372,  372,  372,  808,  793,  205,  205,  808,  372,  808,
808,  808,  372,  808,  794,  808,  205,  808,  372,  205,
205,  795,  372,  205,  205,  808,  205,  205,  205,  808,
205,  808,  796,  808,  205,  290,  290,  797,  205,  808,
205,  290,  290,  808,  205,  808,  290,  808,  205,  290,
290,  808,  290,  808,  798,  808,  290,  290,  290,  808,
290,  808,  290,  372,  372,  372,  372,  799,  290,  808,
290,  808,  372,  372,  372,  808,  372,  808,  290,  372,
372,  205,  205,  372,  372,  800,  372,  205,  205,  801,

372,  808,  205,  372,  290,  290,  290,  290,  205,  802,
372,  808,  205,  372,  372,  290,  808,  290,  205,  372,
372,  808,  803,  808,  372,  290,  808,  290,  205,  205,
372,  804,  205,  205,  372,  290,  290,  372,  372,  205,
372,  808,  808,  205,  808,  805,  290,  808,  372,  205,
290,  290,  806,  205,  807,  808,  290,  808,  372,  372,
372,  290,  808,  808,  808,  808,  808,  808,  808,  808,
372,  290,  808,  808,  808,  808,  808,  808,  808,  808,
372,   97,   97,   97,   97,   97,   97,   97,   97,   97,
97,   97,   97,  103,  103,  103,  103,  103,  103,  103,

103,  103,  103,  103,  103,  109,  109,  109,  109,  109,
109,  109,  109,  109,  109,  109,  109,  114,  114,  114,
114,  114,  114,  114,  114,  114,  114,  114,  114,  117,
117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
117,  163,  163,  163,  163,  163,  163,  163,  163,  163,
163,  163,  163,  205,  808,  808,  808,  808,  808,  205,
214,  808,  808,  808,  808,  808,  214,  279,  279,  279,
808,  279,  279,  290,  808,  808,  808,  290,  808,  808,
808,  808,  808,  290,  299,  808,  808,  808,  808,  808,
299,  335,  335,  808,  808,  808,  335,  335,  335,  335,

335,  808,  335,  342,  342,  808,  808,  808,  342,  342,
342,  342,  342,  808,  342,  349,  349,  808,  808,  349,
349,  349,  349,  808,  349,  349,  349,  353,  353,  808,
808,  353,  353,  353,  353,  353,  353,  353,  353,  369,
808,  808,  808,  808,  369,  369,  369,  369,  808,  369,
369,  372,  808,  808,  808,  808,  808,  372,  381,  808,
808,  808,  808,  808,  381,  432,  432,  432,  432,  432,
432,  432,  432,  432,  432,  432,  436,  436,  436,  436,
436,  436,  436,  436,  436,  436,  436,  442,  442,  442,
442,  442,  442,  442,  442,  442,  442,  442,  463,  808,

808,  808,  463,  808,  808,  808,  808,  808,  463,  472,
808,  808,  808,  808,  808,  472,  488,  488,  488,  488,
488,  488,  488,  808,  488,  488,  488,  488,  587,  587,
808,  587,  587,  587,  587,  587,  587,  587,  587,  587,
711,  711,  711,  711,  711,  711,  711,  711,  711,  711,
711,  711,   19,  808,  808,  808,  808,  808,  808,  808,
808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
808,  808,  808,  808,  808,  808,  808,  808,  808,  808,

808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
808,  808,  808
} ;

static yyconst flex_int16_t yy_chk[4224] =
{
0,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
3,    3,    3,    4,    4,    4,  645,    3,    9,    9,
4,    5,    5,    5,    3,   10,   10,    4,    5,    6,
6,    6,    7,    7,  596,    5,    6,   32,    8,    8,
533,   32,    7,    6,   11,   11,   11,    7,    8,   12,
12,   12,  532,    8,   21,   21,   21,   37,   67,   67,
11,   37,   37,   91,   91,   12,   13,   13,   13,   13,

13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
13,   13,   13,   13,   13,   13,   15,   15,   15,   15,
41,   22,  529,   42,   15,   15,   43,   44,  100,   15,
23,   23,  528,  100,   22,   15,   15,   15,   15,   15,
22,   41,   41,   23,   42,  158,  158,   43,   44,   23,

25,   25,   25,   25,   25,   25,   25,   25,   25,   26,
26,   26,   26,   26,   26,   26,   26,   26,   63,  527,
15,   16,   16,   16,   16,   65,   65,   65,   36,   16,
16,   36,  525,  101,   16,   36,   36,   36,  101,   63,
16,   16,   16,   16,   16,   38,  134,   38,  480,   36,
134,   36,   49,   49,   38,   38,   64,   64,   64,   64,
64,  194,  194,   49,  471,   38,   38,   70,   70,   70,
70,   49,  441,   49,  440,   16,   17,   17,   17,   17,
17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
17,   17,   17,   17,   17,   17,   27,   27,   50,   50,
51,   51,   53,   53,   50,  106,  439,   27,  229,   50,
106,   51,  229,   53,  209,  209,   50,   27,   51,   50,
53,   51,  438,   53,   53,   89,   89,   89,   52,   52,
27,   27,   27,   27,   27,   27,   27,   27,   27,   52,
54,   54,  417,   52,  389,   52,   55,   55,  380,   52,

370,   54,   56,   56,   57,   57,  368,   55,  363,   58,
58,   54,   56,   56,   57,   57,   74,   55,   82,   82,
58,   58,  362,   56,  361,   57,  355,   57,   58,   82,
58,   59,   59,   66,   66,   66,   66,   66,  307,   82,
218,  218,   59,   59,   68,   68,   68,   68,   68,  156,
156,  156,   59,   69,   69,   69,   69,   69,   71,   71,
71,   71,   71,   73,   73,   73,  284,  284,   73,   88,
88,   88,   88,   88,  294,  294,   74,   74,   74,   74,
74,   74,   74,   74,   74,   75,   75,   75,   75,   75,
75,   75,   75,   75,   77,   77,   78,   78,   79,   79,

81,   81,   78,  107,  298,   77,  288,   78,  107,   79,
233,   81,  231,   77,   78,   77,   79,   78,   81,   79,
230,   81,   81,   73,   73,   73,   73,   73,   73,   73,
73,   73,   76,   80,   80,   83,   83,   94,   94,   94,
94,   84,   84,  222,   80,  213,   83,  144,   80,  201,
80,   84,   84,  198,   80,  166,   83,  145,   76,   76,
85,   85,   84,   86,   86,   87,   87,  121,  144,   76,
85,   85,  121,  164,   86,   86,   87,   87,  145,   76,
162,   85,   86,   85,   86,  152,   87,   90,   90,   90,
90,   90,   76,   76,   76,   76,   76,   76,   76,   76,

76,   92,   92,   92,   92,   92,   93,   93,   93,   93,
93,   95,   95,   95,   95,   95,  123,  123,  123,  124,
125,  125,  143,  148,  146,  123,  127,  127,  123,  141,
123,  139,  124,  125,  123,  139,  139,  127,  124,  125,
154,  130,  242,  143,  143,  146,  245,  127,  128,  128,
128,  128,  128,  128,  128,  128,  128,  129,  129,  247,
204,  154,  138,  242,  242,  138,  120,  245,  129,  138,
138,  138,  140,  204,  140,  192,  192,  192,  129,  204,
247,  140,  140,  138,  118,  138,  155,  155,  155,  155,
155,  116,  140,  140,  157,  157,  157,  157,  157,  159,

159,  159,  159,  159,  160,  160,  160,  160,  161,  161,
161,  161,  161,  177,  177,  177,  177,  177,  177,  177,
177,  177,  178,  178,  178,  178,  178,  178,  178,  178,
178,  179,  179,  113,  180,  180,  182,  182,  181,  181,
184,  184,  179,  112,  181,  180,  111,  182,  108,  181,
105,  184,  179,  180,  182,  180,  181,  182,  184,  181,
102,  184,  184,  183,  183,  179,  179,  179,  179,  179,
179,  179,  179,  179,  183,  185,  185,   99,  183,   96,
183,  186,  186,  249,  183,   72,  185,  187,  187,  188,
188,   61,  186,   46,  189,  189,  185,  187,  187,  188,

188,   28,  186,   19,  249,  189,  189,    0,  187,  240,
188,  240,  188,  189,  240,  189,  190,  190,  191,  191,
191,  191,  191,  196,  196,  196,  196,  190,  190,  193,
193,  193,  193,  193,  199,  199,  199,  190,  195,  195,
195,  195,  195,  197,  197,  197,  197,  197,  202,  202,
202,  203,  203,  203,  205,  205,  206,  206,  206,  206,
206,  202,  303,  303,  203,  205,    0,  202,  376,  376,
203,  207,  207,  207,    0,  205,  208,  208,  208,  208,
208,  210,  210,  210,  210,  210,  211,  211,  211,  211,
212,  212,  212,  212,  212,  215,  215,  215,  215,  215,

216,  216,  216,  217,  217,  217,  217,  217,  219,  219,
219,  219,  219,  220,  220,  220,  220,  221,  221,  221,
221,  221,  223,  223,  224,  224,  282,  282,  282,  232,
268,  238,  239,  223,  239,  224,  232,  232,  238,  238,
0,  239,  239,  223,    0,  224,    0,  232,  232,  238,
238,  268,  239,  239,  241,    0,  241,  251,  251,  241,
252,  252,  253,  253,  254,  254,    0,  251,  251,  364,
0,  252,    0,  253,    0,  254,  255,  255,  251,  253,
252,  252,  364,  253,    0,  254,    0,  255,  364,  256,
256,    0,  257,  257,  259,  259,  255,  255,  256,    0,

256,  258,  258,  257,    0,  259,  261,  261,  260,  260,
256,  257,  258,  257,    0,  259,    0,  261,  258,  260,
260,    0,  258,  262,  262,    0,  261,  261,    0,  260,
263,  263,  385,  385,  262,  264,  264,    0,  262,  265,
265,  263,    0,  263,  262,  264,  264,    0,  266,  266,
265,  263,    0,  269,  269,    0,  264,  467,  467,  266,
265,  266,  279,  265,  269,  286,  286,  286,  286,  266,
292,  292,  292,    0,  269,  270,  270,  270,  270,  270,
271,  271,  271,  271,  271,  272,  272,  272,  272,  272,
273,  273,  273,  273,  273,  274,  274,  274,  274,  274,

275,  275,  275,  275,  275,  276,  276,  276,  276,  276,
277,  277,  277,  277,  277,  278,  278,  278,  476,  476,
278,    0,  279,  279,  279,  279,  279,  279,  279,  279,
279,  280,  280,  280,  280,  280,  280,  280,  280,  280,
281,  281,  281,  281,  281,  283,  283,  283,  283,  283,
285,  285,  285,  285,  285,  287,  287,  287,  287,  287,
299,  289,  291,  291,  291,  291,  291,  293,  293,  293,
293,  293,  301,  301,  301,  278,  278,  278,  278,  278,
278,  278,  278,  278,  289,  290,  290,  295,  295,  295,
295,  295,  296,  296,  296,  296,  290,  297,  297,  297,

297,  297,  305,  305,  305,  305,  290,  300,  300,  300,
300,  300,  374,  374,  374,  289,  378,  378,  378,  378,
299,  299,  299,  299,  299,  299,  299,  299,  299,  302,
302,  302,  302,  302,  304,  304,  304,  304,  304,  306,
306,  306,  306,  306,  308,  308,  309,  309,  310,  310,
311,  311,    0,  313,  313,  308,    0,  309,  310,  310,
0,  311,  312,  312,  313,  308,    0,  309,    0,  310,
311,  311,    0,  312,  313,  314,  314,  592,  592,  312,
315,  315,    0,  312,  641,  641,  314,  316,  316,  315,
0,  315,  317,  317,    0,  314,  314,    0,  316,  318,

318,  315,    0,  317,  319,  319,  316,    0,  316,  317,
318,  320,  320,  317,    0,  319,  319,    0,  321,  321,
318,    0,  320,  322,  322,  319,    0,  323,  323,  321,
0,  320,  320,  321,  322,    0,  322,  323,  323,  321,
324,  324,  325,  325,  322,  326,  326,    0,  323,    0,
0,  324,    0,  325,    0,  325,  326,  383,  383,  383,
0,  324,    0,  325,  324,    0,  326,  327,  327,  327,
327,  327,  328,  328,  328,  328,  328,  329,  329,  329,
329,  329,  330,  330,  330,  330,  330,  331,  331,  331,
331,  331,  332,  332,  332,  332,  332,  333,  333,  333,

333,  333,  334,  334,  334,  334,  334,  341,  341,  348,
348,    0,    0,  359,  359,  359,    0,  365,  365,  366,
366,  341,  359,  348,    0,  359,    0,  359,  365,    0,
366,  359,  367,  367,  367,  372,  372,    0,  365,    0,
366,  373,  373,  373,  373,  373,  372,  367,  367,  375,
375,  375,  375,  375,    0,    0,  372,  377,  377,  377,
377,  377,  379,  379,  379,  379,  379,  381,  381,  381,
381,  381,  381,  381,  381,  381,  382,  382,  382,  382,
382,  384,  384,  384,  384,  384,  386,  386,  386,  386,
386,  387,  387,  387,  387,  388,  388,  388,  388,  388,

390,  390,  391,  391,  392,  392,  393,  393,    0,  395,
395,  390,    0,  391,  392,  392,    0,  393,  394,  394,
395,  390,    0,  391,    0,  392,  393,  393,    0,  394,
395,  396,  396,    0,    0,  394,  397,  397,    0,  394,
0,    0,  396,  398,  398,  397,    0,  397,  399,  399,
0,  396,  396,    0,  398,  400,  400,  397,    0,  399,
401,  401,  398,    0,  398,  399,  400,  402,  402,  399,
0,  401,  401,    0,  403,  403,  400,    0,  402,  404,
404,  401,    0,  405,  405,  403,    0,  402,  402,  403,
404,    0,  404,  405,  405,  403,  406,  406,  407,  407,

404,  408,  408,    0,  405,    0,    0,  406,    0,  407,
0,  407,  408,  465,  465,  465,    0,  406,    0,  407,
406,    0,  408,  409,  409,  409,  409,  409,  410,  410,
410,  410,  410,  411,  411,  411,  411,  411,  412,  412,
412,  412,  412,  413,  413,  413,  413,  413,  414,  414,
414,  414,  414,  415,  415,  415,  415,  415,  418,  418,
418,  418,  418,  419,  419,  419,  419,  419,  420,  420,
420,  420,  420,  421,  421,  421,  421,  421,  422,  422,
422,  422,  422,  423,  423,  423,  423,  423,  424,  424,
424,  424,  424,  425,  425,  425,  425,  425,  426,  426,

426,  426,  426,  427,  427,  427,  427,  427,  428,  428,
428,  428,  428,  429,  429,  429,  429,  429,  430,  430,
430,  430,  430,  431,  431,  431,  431,  431,  437,  444,
444,  443,  443,  445,  445,  437,  437,  443,    0,  444,
444,  445,  443,    0,  445,    0,  437,  437,  446,  446,
444,    0,  443,    0,  445,  447,  447,  448,  448,  446,
449,  449,  450,  450,    0,  447,  447,    0,  448,  446,
450,  449,    0,  450,  451,  451,  447,    0,  448,  452,
452,  449,    0,  450,  451,  451,  453,  453,  454,  454,
452,  455,  455,  456,  456,  451,    0,  453,  454,  454,

452,  452,  455,    0,  456,  457,  457,  453,  453,  454,
456,    0,  455,    0,  456,    0,  457,  458,  458,  460,
460,  460,  460,  460,    0,    0,  457,    0,  458,  474,
474,  474,  458,  461,  461,  461,  461,  461,  458,  459,
459,    0,  459,  459,  459,  459,  459,  459,  459,  459,
459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
459,  459,  459,  459,  459,  459,  459,  459,  459,  459,

459,  459,  459,  459,  459,  459,  459,  459,  459,  462,
462,  462,  462,  462,  463,  464,  464,  464,  464,  464,
466,  466,  466,  466,  466,  468,  468,  468,  468,  468,
469,  469,  469,  469,  470,  470,  470,  470,  470,  472,
473,  473,  473,  473,  473,  475,  475,  475,  475,  475,
477,  477,  477,  477,  477,  478,  478,  478,  478,  479,
479,  479,  479,  479,  481,  481,  481,  481,  481,  482,
482,  482,  482,  482,  463,  463,  463,  463,  463,  463,
463,  463,  463,  483,  483,  483,  483,  483,  484,  484,
484,  484,  484,  485,  485,  485,  485,  485,    0,  472,

472,  472,  472,  472,  472,  472,  472,  472,  486,  486,
486,  486,  486,  487,  487,  487,  487,  487,  489,  490,
490,  490,  490,  490,  590,  590,  590,  489,  491,  491,
491,  491,  491,  492,  492,  492,  492,  492,  489,    0,
489,  493,  493,  493,  493,  493,  494,  494,  494,  494,
494,  495,  495,  495,  495,  495,  496,  496,  496,  496,
496,  497,  497,  497,  497,  497,  498,  498,  498,  498,
498,  499,  499,  499,  499,  499,  500,  500,  500,  500,
500,  501,  501,  501,  501,  501,  502,  502,  502,  502,
502,  503,  503,  503,  503,  503,  504,  504,  505,  505,

0,    0,  504,  506,  506,  507,  507,  504,  505,  505,
0,  506,  508,  508,  506,    0,  507,  504,    0,  505,
509,  509,  508,  508,  506,    0,  507,  510,  510,  511,
511,  509,    0,  508,  512,  512,    0,  511,  510,    0,
511,  509,  513,  513,  512,  512,  514,  514,  510,    0,
511,  515,  515,  513,    0,  512,    0,  514,  516,  516,
0,  515,  515,  513,  513,  517,  517,  514,  514,  516,
518,  518,  515,  519,  519,    0,  517,    0,    0,  516,
0,  518,  517,    0,  519,    0,  517,    0,  519,    0,
0,  518,    0,    0,  519,  520,  520,    0,  520,  520,

520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
520,  520,  520,  520,  520,  521,  521,  521,  521,  521,
522,  522,  522,  522,  522,  523,  523,  523,  523,  523,
530,  530,  530,  534,  534,  534,  534,  534,  535,  535,
535,  535,  535,  639,  639,  639,  530,  536,  536,  536,

536,  536,  537,  537,  537,  537,  537,  538,  538,  538,
538,  538,  539,  539,  539,  539,  539,  540,  540,  540,
540,  540,  541,  541,  541,  541,  541,  542,  542,  542,
542,  542,  543,  543,  543,  543,  543,  544,  544,  544,
544,  544,  545,  545,  545,  545,  545,  546,  546,  546,
546,  546,  547,  547,  547,  547,  547,  548,  548,  549,
549,    0,    0,  548,  550,  550,  551,  551,  548,  549,
549,    0,  550,  552,  552,  550,    0,  551,  548,    0,
549,  553,  553,  552,  552,  550,    0,  551,  554,  554,
555,  555,  553,    0,  552,  556,  556,    0,  555,  554,

0,  555,  553,  557,  557,  556,  556,  558,  558,  554,
0,  555,  559,  559,  557,    0,  556,    0,  558,  560,
560,    0,  559,  559,  557,  557,  561,  561,  558,  558,
560,  562,  562,  559,  563,  563,    0,  561,    0,    0,
560,    0,  562,  561,    0,  563,    0,  561,    0,  563,
0,    0,  562,    0,    0,  563,  564,  564,  564,  564,
564,  565,  565,  565,  565,  565,  566,  566,  566,  566,
566,  567,  567,  567,  567,  567,  568,  568,  568,  568,
568,  569,  569,  569,  569,  569,  570,  570,  570,  570,
570,  571,  571,  571,  571,  571,  572,  572,  572,  572,

572,  573,  573,  574,  574,  575,  575,  576,  576,    0,
577,  577,  573,    0,  574,  573,  575,  575,  576,    0,
576,  577,  573,  577,  574,    0,  575,    0,  576,  578,
578,  577,  579,  579,    0,  580,  580,    0,    0,    0,
578,  581,  581,  579,  582,  582,  580,    0,    0,    0,
578,  578,  581,  579,  580,  582,  580,  581,  583,  583,
584,  584,  581,  582,    0,  582,  583,    0,  584,  583,
0,  584,  585,  585,  586,  586,    0,    0,    0,  583,
0,  584,    0,  585,  586,  586,  589,  589,  589,  589,
589,    0,    0,  585,    0,  586,  591,  591,  591,  591,

591,  593,  593,  593,  593,  593,  594,  594,  594,  594,
595,  595,  595,  595,  595,  597,  597,  598,  598,  598,
598,  598,  643,  643,  643,  643,  597,  599,  599,  599,
599,  599,    0,    0,    0,    0,  597,  600,  600,  600,
600,  600,  601,  601,  601,  601,  601,  602,  602,  602,
602,  602,  603,  603,  603,  603,  603,  604,  604,  604,
604,  604,  605,  605,  605,  605,  605,  606,  606,  606,
606,  606,  607,  607,  607,  607,  607,  608,  608,  608,
608,  608,  609,  609,  609,  609,  609,  610,  610,  610,
610,  610,  611,  611,  611,  611,  611,  612,  612,  612,

612,  612,  613,  613,  613,  613,  613,  614,  614,  614,
614,  614,  615,  616,  616,  616,  616,  616,    0,    0,
0,  615,  617,  617,  617,  617,  617,  618,  618,  618,
618,  618,  615,    0,  615,  619,  619,  619,  619,  619,
620,  620,  620,  620,  620,  621,  621,  621,  621,  621,
622,  622,  623,  623,  624,  624,  625,  625,    0,  626,
626,  622,    0,  623,  622,  624,  624,  625,    0,  625,
626,  622,  626,  623,    0,  624,    0,  625,  627,  627,
626,  628,  628,    0,  629,  629,    0,    0,    0,  627,
630,  630,  628,  631,  631,  629,    0,    0,    0,  627,

627,  630,  628,  629,  631,  629,  630,  632,  632,  633,
633,  630,  631,    0,  631,  632,    0,  633,  632,    0,
633,  634,  634,  635,  635,    0,  636,  636,  632,    0,
633,    0,  634,  635,  635,  636,  638,  638,  638,  638,
638,    0,  634,    0,  635,    0,  636,  636,  636,  636,
640,  640,  640,  640,  640,  642,  642,  642,  642,  642,
644,  644,  644,  644,  644,  646,  646,  648,  648,  648,
648,  648,    0,    0,    0,    0,  646,    0,    0,    0,
636,  649,  649,  649,  649,  649,  646,  650,  650,  650,
650,  650,  651,  651,  651,  651,  651,  652,  652,  652,

652,  652,  653,  653,  653,  653,  653,  654,  654,  655,
655,  656,  656,  657,  657,    0,  658,  658,  654,    0,
655,  654,  656,  656,  657,    0,  657,  658,  654,  658,
655,    0,  656,    0,  657,  659,  659,  658,  660,  660,
0,  661,  661,    0,    0,    0,  659,  662,  662,  660,
663,  663,  661,    0,    0,    0,  659,  659,  662,  660,
661,  663,  661,  662,  664,  664,  665,  665,  662,  663,
0,  663,  664,    0,  665,  664,    0,  665,  666,  666,
667,  667,  668,  668,    0,  664,    0,  665,    0,  666,
667,  667,    0,  668,  669,  669,  671,  671,    0,  666,

0,  667,    0,  668,    0,  669,    0,  671,  672,  672,
673,  673,  674,  674,    0,  669,    0,  671,    0,  672,
0,  673,    0,  674,  675,  675,    0,  673,    0,  672,
0,  673,    0,  674,    0,  675,  676,  676,    0,  677,
677,  675,  678,  678,    0,  675,    0,  676,    0,  676,
677,    0,  678,  678,  679,  679,    0,  676,  680,  680,
677,    0,  677,  678,    0,  679,  681,  681,    0,  680,
0,  679,  682,  682,    0,  679,    0,  681,  681,  680,
0,    0,    0,  682,    0,    0,    0,  681,  683,  683,
683,  683,  683,  682,  684,  684,  684,  684,  684,  685,

685,  685,  685,  685,  686,  686,  686,  686,  686,  687,
687,  687,  687,  687,  688,  688,  688,  688,  688,  689,
689,  689,  689,  689,  690,  690,  690,  690,  690,  691,
691,  691,  691,  691,  692,  692,  692,  692,  692,  693,
693,  693,  693,  693,  694,  694,  694,  694,  694,  695,
695,  695,  695,  695,  697,  697,  699,  699,  700,  700,
0,  701,  701,  702,  702,  697,    0,  699,    0,  700,
703,  703,  701,    0,  702,  697,    0,  699,  701,  700,
0,  703,  701,    0,  702,  704,  704,  703,  705,  705,
0,  703,  706,  706,    0,    0,  704,    0,  704,  705,

0,    0,  706,  706,  707,  707,  704,  708,  708,  705,
0,  705,    0,  706,    0,  707,  710,  710,  708,  709,
709,  707,  712,  712,    0,  707,    0,  710,  708,    0,
709,  709,  713,  713,  713,  713,  713,  710,    0,    0,
709,    0,    0,  712,  714,  714,  714,  714,  714,  715,
715,  715,  715,  715,  716,  716,  716,  716,  716,  717,
717,  717,  717,  717,  718,  718,  718,  718,  718,  719,
719,  719,  719,  719,  720,  720,  722,  722,  723,  723,
0,  724,  724,  725,  725,  720,    0,  722,    0,  723,
726,  726,  724,    0,  725,  720,    0,  722,  724,  723,

0,  726,  724,    0,  725,  727,  727,  726,  728,  728,
0,  726,  729,  729,    0,    0,  727,    0,  727,  728,
0,    0,  729,  729,  730,  730,  727,  731,  731,  728,
0,  728,    0,  729,    0,  730,  733,  733,  731,  732,
732,  730,  734,  734,    0,  730,    0,  733,  731,    0,
732,  732,    0,  734,  735,  735,    0,  733,  736,  736,
732,  738,  738,  734,  734,  735,  736,  737,  737,  736,
739,  739,  738,    0,  738,  735,  740,  740,  737,  736,
0,  739,  738,  741,  741,  737,    0,  740,  737,  742,
742,  739,    0,    0,  741,    0,    0,  740,    0,    0,

742,    0,    0,    0,  741,  743,  743,  743,  743,  743,
742,  744,  744,  744,  744,  744,  745,  745,  745,  745,
745,  748,  748,  749,  749,  750,  750,  751,  751,    0,
753,  753,  748,  750,  749,    0,  750,    0,  751,  752,
752,  753,  748,  748,  749,  751,  750,    0,  751,    0,
752,  753,  752,  754,  754,  755,  755,  756,  756,    0,
752,  757,  757,    0,  754,    0,  755,    0,  756,  758,
758,  758,  758,  758,  754,    0,  755,    0,  756,    0,
0,    0,  757,  759,  759,  759,  759,  759,  760,  760,
760,  760,  760,  761,  761,  762,  762,  763,  763,  764,

764,    0,  766,  766,  761,  763,  762,    0,  763,    0,
764,  765,  765,  766,  761,  761,  762,  764,  763,    0,
764,    0,  765,  766,  765,  767,  767,  768,  768,  769,
769,    0,  765,  770,  770,    0,  767,    0,  768,    0,
769,  771,  771,  770,  770,    0,  767,    0,  768,    0,
769,    0,  771,    0,  770,  772,  772,  773,  773,  775,
775,    0,  771,  776,  776,    0,  772,    0,  773,  775,
775,    0,  772,    0,  776,    0,  772,  773,  773,    0,
775,  777,  777,    0,  776,  778,  778,    0,    0,  780,
780,    0,  777,  781,  781,    0,  778,    0,  777,  780,

780,    0,  777,    0,  781,  778,  778,  782,  782,    0,
780,  783,  783,    0,  781,  784,  784,    0,  782,    0,
0,    0,  783,    0,  782,    0,  784,    0,  782,  785,
785,  783,  783,  786,  786,    0,  784,  787,  787,    0,
785,    0,  785,    0,  786,  788,  788,  787,  787,    0,
785,  789,  789,    0,  786,    0,  788,    0,  787,  790,
790,    0,  789,    0,  789,    0,  788,  791,  791,    0,
790,    0,  789,  792,  792,  794,  794,  791,  791,    0,
790,    0,  793,  793,  792,    0,  794,    0,  791,  795,
795,  796,  796,  793,  792,  793,  794,  797,  797,  795,

795,    0,  796,  793,  798,  798,  799,  799,  797,  796,
795,    0,  796,  800,  800,  798,    0,  799,  797,  801,
801,    0,  798,    0,  800,  798,    0,  799,  802,  802,
801,  800,  805,  805,  800,  803,  803,  804,  804,  802,
801,    0,    0,  805,    0,  802,  803,    0,  804,  802,
806,  806,  803,  805,  804,    0,  803,    0,  804,  807,
807,  806,    0,    0,    0,    0,    0,    0,    0,    0,
807,  806,    0,    0,    0,    0,    0,    0,    0,    0,
807,  809,  809,  809,  809,  809,  809,  809,  809,  809,
809,  809,  809,  810,  810,  810,  810,  810,  810,  810,

810,  810,  810,  810,  810,  811,  811,  811,  811,  811,
811,  811,  811,  811,  811,  811,  811,  812,  812,  812,
812,  812,  812,  812,  812,  812,  812,  812,  812,  813,
813,  813,  813,  813,  813,  813,  813,  813,  813,  813,
813,  814,  814,  814,  814,  814,  814,  814,  814,  814,
814,  814,  814,  815,    0,    0,    0,    0,    0,  815,
816,    0,    0,    0,    0,    0,  816,  817,  817,  817,
0,  817,  817,  818,    0,    0,    0,  818,    0,    0,
0,    0,    0,  818,  819,    0,    0,    0,    0,    0,
819,  820,  820,    0,    0,    0,  820,  820,  820,  820,

820,    0,  820,  821,  821,    0,    0,    0,  821,  821,
821,  821,  821,    0,  821,  822,  822,    0,    0,  822,
822,  822,  822,    0,  822,  822,  822,  823,  823,    0,
0,  823,  823,  823,  823,  823,  823,  823,  823,  824,
0,    0,    0,    0,  824,  824,  824,  824,    0,  824,
824,  825,    0,    0,    0,    0,    0,  825,  826,    0,
0,    0,    0,    0,  826,  827,  827,  827,  827,  827,
827,  827,  827,  827,  827,  827,  828,  828,  828,  828,
828,  828,  828,  828,  828,  828,  828,  829,  829,  829,
829,  829,  829,  829,  829,  829,  829,  829,  830,    0,

0,    0,  830,    0,    0,    0,    0,    0,  830,  831,
0,    0,    0,    0,    0,  831,  832,  832,  832,  832,
832,  832,  832,    0,  832,  832,  832,  832,  833,  833,
0,  833,  833,  833,  833,  833,  833,  833,  833,  833,
834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
834,  834,  808,  808,  808,  808,  808,  808,  808,  808,
808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
808,  808,  808,  808,  808,  808,  808,  808,  808,  808,

808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
808,  808,  808
} ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf = 0, *yy_state_ptr = 0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
/*
 *  Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 *  Copyright (C) 2008-2012 - Scilab Enterprises - Bruno JOFRET
 *
 *  This file must be used under the terms of the CeCILL.
 *  This source file is licensed as described in the file COPYING, which
 *  you should have received as part of this distribution.  The terms
 *  are also available at
 *  http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
 *
 */
#include "isatty.hxx"
#include "parse.hxx"
#include "parser_private.hxx"

#include "context.hxx"

extern "C"
{
#include "charEncoding.h"
#include "sci_malloc.h"
}

static int comment_level = 0;
static int paren_level = 0;
static int last_token = 0;
static int exit_status = PARSE_ERROR;
static int str_opener_column = 0;
static std::string current_file;
static std::string program_name;

static std::string pstBuffer;

extern void yyerror(std::string);

#define YY_USER_ACTION                          \
    yylloc.first_column = yylloc.last_column; yylloc.last_column += yyleng;
//yylloc.last_column += yyleng;

/* -*- Verbose Special Debug -*- */
//#define DEV
//#define TOKENDEV

#ifdef DEV
#define DEBUG(x) std::cout << "[DEBUG] " << x << std::endl;
#else
#define DEBUG(x) /* Nothing */
#endif

#define INITIAL 0
#define SIMPLESTRING 1
#define DOUBLESTRING 2
#define REGIONCOMMENT 3
#define LINECOMMENT 4
#define LINEBREAK 5
#define MATRIX 6
#define SHELLMODE 7
#define BEGINID 8

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

static void yyunput (int c, char *buf_ptr  );

#ifndef yytext_ptr
static void yy_flex_strncpy (char *, yyconst char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = NULL;

static void yy_push_state (int new_state );

static void yy_pop_state (void );

static int yy_top_state (void );

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
 
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
register yy_state_type yy_current_state;
register char * yy_cp, *yy_bp;
register int yy_act;

if ( !(yy_init) )
{
    (yy_init) = 1;

#ifdef YY_USER_INIT
    YY_USER_INIT;
#endif

    /* Create the reject buffer large enough to save one state per allowed character. */
    if ( ! (yy_state_buf) )
    {
        (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
    }
    if ( ! (yy_state_buf) )
    {
        YY_FATAL_ERROR( "out of dynamic memory in yylex()" );
    }

    if ( ! (yy_start) )
    {
        (yy_start) = 1;    /* first start state */
    }

    if ( ! yyin )
    {
        yyin = stdin;
    }

    if ( ! yyout )
    {
        yyout = stdout;
    }

    if ( ! YY_CURRENT_BUFFER )
    {
        yyensure_buffer_stack ();
        YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin, YY_BUF_SIZE );
    }

    yy_load_buffer_state( );
}

while ( 1 )		/* loops until end-of-file is reached */
{
    yy_cp = (yy_c_buf_p);

    /* Support of yytext. */
    *yy_cp = (yy_hold_char);

    /* yy_bp points to the position in yy_ch_buf of the start of
     * the current run.
     */
    yy_bp = yy_cp;

    yy_current_state = (yy_start);
    yy_current_state += YY_AT_BOL();

    (yy_state_ptr) = (yy_state_buf);
    *(yy_state_ptr)++ = yy_current_state;

yy_match:
    do
    {
        register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
        while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
        {
            yy_current_state = (int) yy_def[yy_current_state];
            if ( yy_current_state >= 809 )
            {
                yy_c = yy_meta[(unsigned int) yy_c];
            }
        }
        yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
        *(yy_state_ptr)++ = yy_current_state;
        ++yy_cp;
    }
    while ( yy_base[yy_current_state] != 4153 );

yy_find_action:
    yy_current_state = *--(yy_state_ptr);
    (yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
    for ( ; ; ) /* until we find what rule we matched */
    {
        if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
        {
            yy_act = yy_acclist[(yy_lp)];
            if ( yy_act & YY_TRAILING_HEAD_MASK ||
                    (yy_looking_for_trail_begin) )
            {
                if ( yy_act == (yy_looking_for_trail_begin) )
                {
                    (yy_looking_for_trail_begin) = 0;
                    yy_act &= ~YY_TRAILING_HEAD_MASK;
                    break;
                }
            }
            else if ( yy_act & YY_TRAILING_MASK )
            {
                (yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
                (yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
            }
            else
            {
                (yy_full_match) = yy_cp;
                (yy_full_state) = (yy_state_ptr);
                (yy_full_lp) = (yy_lp);
                break;
            }
            ++(yy_lp);
            goto find_rule;
        }
        --yy_cp;
        yy_current_state = *--(yy_state_ptr);
        (yy_lp) = yy_accept[yy_current_state];
    }

    YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

    switch ( yy_act )
    {
            /* beginning of action switch */
        case 1:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp = yy_bp + 3;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
            {
                // BOM found ==> ignored
            }
            YY_BREAK
        case 2:
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                return scan_throw(BOOLTRUE);
            }
            YY_BREAK
        case 3:
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                return scan_throw(BOOLFALSE);
            }
            YY_BREAK
        case 4:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::pushControlStatus(Parser::WithinIf);
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(IF);
            }
            YY_BREAK
        case 5:
            YY_RULE_SETUP
            {
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(THEN);
            }
            YY_BREAK
        case 6:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    // Pop to step out IF
                    ParserSingleInstance::popControlStatus();
                    ParserSingleInstance::pushControlStatus(Parser::WithinElse);
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(ELSE);
            }
            YY_BREAK
        case 7:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::popControlStatus();
                    ParserSingleInstance::pushControlStatus(Parser::WithinElseIf);
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(ELSEIF);
            }
            YY_BREAK
        case 8:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::popControlStatus();
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(END);
            }
            YY_BREAK
        case 9:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::pushControlStatus(Parser::WithinSelect);
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(SELECT);
            }
            YY_BREAK
        case 10:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::pushControlStatus(Parser::WithinSwitch);
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(SWITCH);
            }
            YY_BREAK
        case 11:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::popControlStatus();
                    ParserSingleInstance::pushControlStatus(Parser::WithinOtherwise);
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(OTHERWISE);
            }
            YY_BREAK
        case 12:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::popControlStatus();
                    ParserSingleInstance::pushControlStatus(Parser::WithinCase);
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(CASE);
            }
            YY_BREAK
        case 13:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::pushControlStatus(Parser::WithinFunction);
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(FUNCTION);
            }
            YY_BREAK
        case 14:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::popControlStatus();
                }
                DEBUG("BEGIN(INITIAL)");
                BEGIN(INITIAL);
                return scan_throw(ENDFUNCTION);
            }
            YY_BREAK
        case 15:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::pushControlStatus(Parser::WithinFor);
                }
                BEGIN(INITIAL);
                return scan_throw(FOR);
            }
            YY_BREAK
        case 16:
            YY_RULE_SETUP
            {
                if (last_token != DOT)
                {
                    ParserSingleInstance::pushControlStatus(Parser::WithinWhile);
                }
                BEGIN(INITIAL);
                return scan_throw(WHILE);
            }
            YY_BREAK
        case 17:
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                return scan_throw(DO);
            }
            YY_BREAK
        case 18:
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                return scan_throw(BREAK);
            }
            YY_BREAK
        case 19:
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                return scan_throw(CONTINUE);
            }
            YY_BREAK
        case 20:
            YY_RULE_SETUP
            {
                ParserSingleInstance::pushControlStatus(Parser::WithinTry);
                BEGIN(INITIAL);
                return scan_throw(TRY);
            }
            YY_BREAK
        case 21:
            YY_RULE_SETUP
            {
                // Pop to step out TRY
                ParserSingleInstance::popControlStatus();
                ParserSingleInstance::pushControlStatus(Parser::WithinCatch);
                BEGIN(INITIAL);
                return scan_throw(CATCH);
            }
            YY_BREAK
        case 22:
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                return scan_throw(RETURN);
            }
            YY_BREAK
        case 23:
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                return scan_throw(RETURN);
            }
            YY_BREAK
        case 24:
            /* rule 24 can match eol */
            YY_RULE_SETUP
            {
                BEGIN(BEGINID);
            }
            YY_BREAK

        case 25:
            YY_RULE_SETUP
            {
                wchar_t *pwText = to_wide_string(yytext);
                if (yytext != NULL && pwText == NULL)
                {
                    std::string str = "Can\'t convert \'";
                    str += yytext;
                    str += "\' to UTF-8";
                    BEGIN(INITIAL);
                    yyerror(str);
                    return scan_throw(FLEX_ERROR);
                }
                yylval.str = new std::wstring(pwText);
                FREE(pwText);
                types::InternalType * pIT = symbol::Context::getInstance()->get(symbol::Symbol(*yylval.str));
                if (pIT && pIT->isCallable())
                {
                    scan_throw(ID);
                    BEGIN(SHELLMODE);
                }
                else
                {
                    BEGIN(INITIAL);
                    return scan_throw(ID);
                }
            }
            YY_BREAK

        case 26:
            YY_RULE_SETUP
            {
                return scan_throw(NOT);
            }
            YY_BREAK
        case 27:
            YY_RULE_SETUP
            {
                return scan_throw(DOLLAR);
            }
            YY_BREAK
        case 28:
            YY_RULE_SETUP
            {
                return scan_throw(BOOLTRUE);
            }
            YY_BREAK
        case 29:
            YY_RULE_SETUP
            {
                return scan_throw(BOOLFALSE);
            }
            YY_BREAK
        case 30:
            YY_RULE_SETUP
            {
                return scan_throw(AND);
            }
            YY_BREAK
        case 31:
            YY_RULE_SETUP
            {
                return scan_throw(ANDAND);
            }
            YY_BREAK
        case 32:
            YY_RULE_SETUP
            {
                return scan_throw(OR);
            }
            YY_BREAK
        case 33:
            YY_RULE_SETUP
            {
                return scan_throw(OROR);
            }
            YY_BREAK
        case 34:
            YY_RULE_SETUP
            {
                return scan_throw(LPAREN);
            }
            YY_BREAK
        case 35:
            YY_RULE_SETUP
            {
                return scan_throw(RPAREN);
            }
            YY_BREAK
        case 36:
            YY_RULE_SETUP
            {
                scan_step();
                return scan_throw(SEMI);
            }
            YY_BREAK
        case 37:
            YY_RULE_SETUP
            {
                scan_step();
                return scan_throw(COMMA);
            }
            YY_BREAK
        case 38:
            YY_RULE_SETUP
            {
                return scan_throw(COLON);
            }
            YY_BREAK
        case 39:
            YY_RULE_SETUP
            {
                yy_push_state(MATRIX);
                ParserSingleInstance::pushControlStatus(Parser::WithinCell);
                return scan_throw(LBRACE);
            }
            YY_BREAK
        case 40:
            YY_RULE_SETUP
            {
                return scan_throw(RBRACE);
            }
            YY_BREAK
        case 41:
            YY_RULE_SETUP
            {
                return scan_throw(DOTQUOTE);
            }
            YY_BREAK
        case 42:
            YY_RULE_SETUP
            {
                return scan_throw(DOTTIMES);
            }
            YY_BREAK
        case 43:
            YY_RULE_SETUP
            {
                return scan_throw(DOTRDIVIDE);
            }
            YY_BREAK
        case 44:
            YY_RULE_SETUP
            {
                return scan_throw(DOTLDIVIDE);
            }
            YY_BREAK
        case 45:
            YY_RULE_SETUP
            {
                return scan_throw(DOTPOWER);
            }
            YY_BREAK
        case 46:
            YY_RULE_SETUP
            {
                return scan_throw(MINUS);
            }
            YY_BREAK
        case 47:
            YY_RULE_SETUP
            {
                return scan_throw(PLUS);
            }
            YY_BREAK
        case 48:
            YY_RULE_SETUP
            {
                return scan_throw(TIMES);
            }
            YY_BREAK
        case 49:
            YY_RULE_SETUP
            {
                return scan_throw(RDIVIDE);
            }
            YY_BREAK
        case 50:
            YY_RULE_SETUP
            {
                return scan_throw(LDIVIDE);
            }
            YY_BREAK
        case 51:
            YY_RULE_SETUP
            {
                return scan_throw(POWER);
            }
            YY_BREAK
        case 52:
            YY_RULE_SETUP
            {
                return scan_throw(KRONTIMES);
            }
            YY_BREAK
        case 53:
            YY_RULE_SETUP
            {
                return scan_throw(KRONRDIVIDE);
            }
            YY_BREAK
        case 54:
            YY_RULE_SETUP
            {
                return scan_throw(KRONLDIVIDE);
            }
            YY_BREAK
        case 55:
            /* rule 55 can match eol */
            YY_RULE_SETUP
            {
                unput(yytext[yyleng - 1]);
                return scan_throw(CONTROLTIMES);
            }
            YY_BREAK
        case 56:
            /* rule 56 can match eol */
            YY_RULE_SETUP
            {
                unput(yytext[yyleng - 1]);
                return scan_throw(CONTROLRDIVIDE);
            }
            YY_BREAK
        case 57:
            /* rule 57 can match eol */
            YY_RULE_SETUP
            {
                unput(yytext[yyleng - 1]);
                return scan_throw(CONTROLLDIVIDE);
            }
            YY_BREAK
        case 58:
            YY_RULE_SETUP
            {
                return scan_throw(EQ);
            }
            YY_BREAK
        case 59:
            YY_RULE_SETUP
            {
                return scan_throw(NE);
            }
            YY_BREAK
        case 60:
            YY_RULE_SETUP
            {
                return scan_throw(LT);
            }
            YY_BREAK
        case 61:
            YY_RULE_SETUP
            {
                return scan_throw(GT);
            }
            YY_BREAK
        case 62:
            YY_RULE_SETUP
            {
                return scan_throw(LE);
            }
            YY_BREAK
        case 63:
            YY_RULE_SETUP
            {
                return scan_throw(GE);
            }
            YY_BREAK
        case 64:
            YY_RULE_SETUP
            {
                return scan_throw(ASSIGN);
            }
            YY_BREAK
        case 65:
            YY_RULE_SETUP
            {
                DEBUG("yy_push_state(MATRIX)");
                yy_push_state(MATRIX);
                ParserSingleInstance::pushControlStatus(Parser::WithinMatrix);
                return scan_throw(LBRACK);
            }
            YY_BREAK
        case 66:
            YY_RULE_SETUP
            {
                return scan_throw(RBRACK);
            }
            YY_BREAK
        case 67:
            YY_RULE_SETUP
            {
                return scan_throw(DOT);
            }
            YY_BREAK
        case 68:
            YY_RULE_SETUP
            {
                ParserSingleInstance::pushControlStatus(Parser::WithinDots);
                yy_push_state(LINEBREAK);
            }
            YY_BREAK
        case 69:
            YY_RULE_SETUP
            {
                yylval.number = atof(yytext);
#ifdef TOKENDEV
                std::cout << "--> [DEBUG] INTEGER : " << yytext << std::endl;
#endif
                //  scan_step();
                return scan_throw(VARINT);
            }
            YY_BREAK
        case 70:
            YY_RULE_SETUP
            {
                scan_exponent_convert(yytext);
                yylval.number = atof(yytext);
#ifdef TOKENDEV
                std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
                //scan_step();
                return scan_throw(VARFLOAT);
            }
            YY_BREAK
        case 71:
            YY_RULE_SETUP
            {
                yylval.number = atof(yytext);
#ifdef TOKENDEV
                std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
                //scan_step();
                return scan_throw(VARFLOAT);
            }
            YY_BREAK
        case 72:
            YY_RULE_SETUP
            {
                yylval.number = atof(yytext);
#ifdef TOKENDEV
                std::cout << "--> [DEBUG] NUMBER : " << yytext << std::endl;
#endif
                //  scan_step();
                return scan_throw(NUM);
            }
            YY_BREAK
        case 73:
            YY_RULE_SETUP
            {
                yylval.number = atof(yytext);
#ifdef TOKENDEV
                std::cout << "--> [DEBUG] LITTLE : " << yytext << std::endl;
#endif
                //  scan_step();
                return scan_throw(NUM);
            }
            YY_BREAK
        case 74:
            YY_RULE_SETUP
            {
                wchar_t *pwText = to_wide_string(yytext);
                if (yytext != NULL && pwText == NULL)
                {
                    std::string str = "Can\'t convert \'";
                    str += yytext;
                    str += "\' to UTF-8";
                    BEGIN(INITIAL);
                    yyerror(str);
                    return scan_throw(FLEX_ERROR);
                }
                yylval.str = new std::wstring(pwText);
                FREE(pwText);
#ifdef TOKENDEV
                std::cout << "--> [DEBUG] ID : " << yytext << std::endl;
#endif
                //  scan_step();
                return scan_throw(ID);
            }
            YY_BREAK
        case 75:
            YY_RULE_SETUP
            {
                yylval.comment = new std::wstring();
                comment_level = 1;
                ParserSingleInstance::pushControlStatus(Parser::WithinBlockComment);
                yy_push_state(REGIONCOMMENT);
            }
            YY_BREAK
        case 76:
            YY_RULE_SETUP
            {
                pstBuffer.clear();
                yy_push_state(LINECOMMENT);
            }
            YY_BREAK
        case 77:
            YY_RULE_SETUP
            {
                pstBuffer.clear();
                str_opener_column = yylloc.first_column;
                yy_push_state(DOUBLESTRING);
            }
            YY_BREAK
        case 78:
            YY_RULE_SETUP
            {
                /*
                ** Matrix Transposition special behaviour
                ** ID' []' toto()' are transposition call
                */
                if (last_token == ID
                || last_token == RBRACK
                || last_token == RPAREN
                || last_token == RBRACE
                || last_token == VARINT
                || last_token == VARFLOAT
                || last_token == NUM
                || last_token == BOOLTRUE
                || last_token == BOOLFALSE)
                {
                    return scan_throw(QUOTE);
                }
                else
                {
                    pstBuffer.clear();
                    str_opener_column = yylloc.first_column;
                    yy_push_state(SIMPLESTRING);
                }
            }
            YY_BREAK
        case 79:
            YY_RULE_SETUP
            {
                scan_step();
                scan_throw(SPACES);
            }
            YY_BREAK
        case 80:
            /* rule 80 can match eol */
            YY_RULE_SETUP
            {
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                scan_step();
                if (last_token != EOL)
                {
                    return scan_throw(EOL);
                }

            }
            YY_BREAK
        case 81:
            /* rule 81 can match eol */
            YY_RULE_SETUP
            {
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                scan_step();
                if (last_token != EOL)
                {
                    return scan_throw(EOL);
                }
                scan_throw(EOL);
            }
            YY_BREAK
        case 82:
            /* rule 82 can match eol */
            YY_RULE_SETUP
            {
                yylloc.last_line += 2;
                yylloc.last_column = 1;
                scan_step();
                if (last_token != EOL)
                {
                    return scan_throw(EOL);
                }
                scan_throw(EOL);
            }
            YY_BREAK
        case 83:
            YY_RULE_SETUP
            {
                std::string str = "Unexpected token \'";
                str += yytext;
                str += "\'";
                BEGIN(INITIAL);
                yyerror(str);
                return scan_throw(FLEX_ERROR);
            }
            YY_BREAK

        case 84:
            YY_RULE_SETUP
            {
                paren_level++;
                return scan_throw(LPAREN);
            }
            YY_BREAK
        case 85:
            YY_RULE_SETUP
            {
                paren_level--;
                return scan_throw(RPAREN);
            }
            YY_BREAK
        case 86:
            YY_RULE_SETUP
            {
                unput(yytext[yyleng - 1]);
                if (last_token == ID
                || last_token == RPAREN
                || last_token == QUOTE
                || last_token == VARINT
                || last_token == VARFLOAT
                || last_token == NUM)
                {
                    return scan_throw(COMMA);
                }
            }
            YY_BREAK
        case 87:
            YY_RULE_SETUP
            {
                return scan_throw(COLON);
            }
            YY_BREAK
        case 88:
            /* rule 88 can match eol */
            YY_RULE_SETUP
            {
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                if (last_token != DOTS && last_token != EOL)
                {
                    return scan_throw(EOL);
                }
                scan_throw(EOL);
            }
            YY_BREAK
        case 89:
            YY_RULE_SETUP
            {
                DEBUG("yy_pop_state()");
                yy_pop_state();
                ParserSingleInstance::popControlStatus();
                return scan_throw(RBRACK);
            }
            YY_BREAK
        case 90:
            YY_RULE_SETUP
            {
                yy_pop_state();
                ParserSingleInstance::popControlStatus();
                return scan_throw(RBRACE);
            }
            YY_BREAK
        case 91:
        case 92:
            YY_RULE_SETUP
            {
                return scan_throw(PLUS);
            }
            YY_BREAK
        case 93:
        case 94:
            YY_RULE_SETUP
            {
                return scan_throw(MINUS);
            }
            YY_BREAK
        case 95:
            YY_RULE_SETUP
            {
                // no need to unput the '+'
                if (last_token != LBRACK
                && last_token != EOL
                && last_token != SEMI
                && last_token != COMMA
                && paren_level == 0)
                {
                    return scan_throw(COMMA);
                }
                else
                {
                    return scan_throw(PLUS);
                }
            }
            YY_BREAK
        case 96:
            YY_RULE_SETUP
            {
                if (last_token != LBRACK
                && last_token != EOL
                && last_token != SEMI
                && last_token != COMMA
                && paren_level == 0)
                {
                    return scan_throw(COMMA);
                }
                else
                {
                    return scan_throw(MINUS);
                }
            }
            YY_BREAK
        case 97:
            YY_RULE_SETUP
            {
                std::string str = "Unexpected token \'";
                str += yytext;
                str += "\' within a matrix.";
                BEGIN(INITIAL);
                yyerror(str);
                return scan_throw(FLEX_ERROR);
            }
            YY_BREAK
        case 98:
            /* rule 98 can match eol */
            YY_RULE_SETUP
            {
                /* Just do nothing */
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                scan_step();
                scan_throw(EOL);
            }
            YY_BREAK
        case 99:
            YY_RULE_SETUP
            {
                /* Just do nothing */
                pstBuffer.clear();
                yy_push_state(LINECOMMENT);
                scan_throw(DOTS);
            }
            YY_BREAK
        case YY_STATE_EOF(MATRIX):
        {
            yy_pop_state();
        }
        YY_BREAK

        case 100:
            /* rule 100 can match eol */
            YY_RULE_SETUP
            {
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                scan_step();
                yy_pop_state();
                ParserSingleInstance::popControlStatus();
            }
            YY_BREAK
        case 101:
            YY_RULE_SETUP
            {
                ++comment_level;
                yy_push_state(REGIONCOMMENT);
            }
            YY_BREAK
        case 102:
            YY_RULE_SETUP
            {
                scan_throw(DOTS);
                pstBuffer.clear();
                yy_push_state(LINECOMMENT);
            }
            YY_BREAK
        case 103:
            YY_RULE_SETUP
            {
                /* Do nothing... */
            }
            YY_BREAK
        case YY_STATE_EOF(LINEBREAK):
        {
            yy_pop_state();
        }
        YY_BREAK
        case 104:
            YY_RULE_SETUP
            {
                std::string str = "Unexpected token \'";
                str += yytext;
                str += "\' after line break with .. or ...";
                BEGIN(INITIAL);
                yyerror(str);
                return scan_throw(FLEX_ERROR);
            }
            YY_BREAK

        case 105:
            /* rule 105 can match eol */
            YY_RULE_SETUP
            {
                //yylloc.last_line += 1;
                //yylloc.last_column = 1;
                //scan_step();
                yy_pop_state();
                for (int i = yyleng - 1 ; i >= 0 ; --i)
                {
                    //std::cerr << "Unputting i = {" << i << "}" << std::endl;
                    //std::cerr << "Unputting {" << yytext[i] << "}" << std::endl;
                    unput(yytext[i]);
                    yylloc.last_column--;
                }
                /*
                ** To forgot comments after lines break
                */
                if (last_token != DOTS)
                {
                    //std::cerr << "pstBuffer = {" << *pstBuffer << "}" << std::endl;
                    //std::cerr << "pstBuffer->c_str() = {" << pstBuffer->c_str() << "}" << std::endl;
                    wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
                    //std::wcerr << L"pwstBuffer = W{" << pwstBuffer << L"}" << std::endl;
                    if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
                    {
                        pstBuffer.clear();
                        std::string str = "Can\'t convert \'";
                        str += pstBuffer.c_str();
                        str += "\' to UTF-8";
                        BEGIN(INITIAL);
                        yyerror(str);
                        return scan_throw(FLEX_ERROR);
                    }
                    yylval.comment = new std::wstring(pwstBuffer);
                    pstBuffer.clear();
                    FREE (pwstBuffer);
                    return scan_throw(COMMENT);
                }
                else
                {
                    pstBuffer.clear();
                }
            }
            YY_BREAK
        case YY_STATE_EOF(LINECOMMENT):
        {
            yy_pop_state();
            wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
            if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
            {
                pstBuffer.clear();
                std::string str = "Can\'t convert \'";
                str += pstBuffer.c_str();
                str += "\' to UTF-8";
                BEGIN(INITIAL);
                yyerror(str);
                return scan_throw(FLEX_ERROR);
            }
            yylval.comment = new std::wstring(pwstBuffer);
            pstBuffer.clear();
            FREE (pwstBuffer);
            return scan_throw(COMMENT);
        }
        YY_BREAK
        case 106:
            YY_RULE_SETUP
            {
                // Put the char in a temporary CHAR buffer to go through UTF-8 trouble
                // only translate to WCHAR_T when popping state.
                pstBuffer += yytext;
            }
            YY_BREAK

        case 107:
            YY_RULE_SETUP
            {
                --comment_level;
                if (comment_level == 0)
                {
                    ParserSingleInstance::popControlStatus();
                    yy_pop_state();
                    //return scan_throw(BLOCKCOMMENT);
                }
            }
            YY_BREAK
        case 108:
            YY_RULE_SETUP
            {
                ++comment_level;
                yy_push_state(REGIONCOMMENT);
            }
            YY_BREAK
        case 109:
            /* rule 109 can match eol */
            YY_RULE_SETUP
            {
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                scan_step();
                *yylval.comment += L"\n//";
            }
            YY_BREAK
        case 110:
        case 111:
            YY_RULE_SETUP
            {
                wchar_t *pwText = to_wide_string(yytext);
                *yylval.comment += std::wstring(pwText);
                FREE(pwText);
            }
            YY_BREAK
        case YY_STATE_EOF(REGIONCOMMENT):
        {
            yy_pop_state();
            //    std::string str = "unexpected end of file in a comment";
            //    scan_error(str);
        }
        YY_BREAK

        case 112:
            YY_RULE_SETUP
            {
                pstBuffer += "\"";
            }
            YY_BREAK
        case 113:
            YY_RULE_SETUP
            {
                pstBuffer += "'";
            }
            YY_BREAK
        case 114:
            YY_RULE_SETUP
            {
                pstBuffer += "\"";
            }
            YY_BREAK
        case 115:
            YY_RULE_SETUP
            {
                pstBuffer += "'";
            }
            YY_BREAK
        case 116:
            YY_RULE_SETUP
            {
                yy_pop_state();
                //scan_step();
                wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
                if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
                {
                    pstBuffer.clear();
                    std::string str = "Can\'t convert \'";
                    str += pstBuffer.c_str();
                    str += "\' to UTF-8";
                    BEGIN(INITIAL);
                    yyerror(str);
                    return scan_throw(FLEX_ERROR);
                }
                yylval.str = new std::wstring(pwstBuffer);
                pstBuffer.clear();
                FREE(pwstBuffer);
                yylloc.first_column = str_opener_column;
                return scan_throw(STR);
            }
            YY_BREAK
        case 117:
            YY_RULE_SETUP
            {
                pstBuffer.clear();
                BEGIN(INITIAL);
                yyerror("Heterogeneous string detected, starting with \' and ending with \".");
                return scan_throw(FLEX_ERROR);
            }
            YY_BREAK
        case 118:
            /* rule 118 can match eol */
            YY_RULE_SETUP
            {
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                /* Do nothing... Just skip */
            }
            YY_BREAK
        case 119:
            /* rule 119 can match eol */
            YY_RULE_SETUP
            {
                pstBuffer.clear();
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                BEGIN(INITIAL);
                yyerror("Unexpected end of line in a string.");
                return scan_throw(FLEX_ERROR);
            }
            YY_BREAK
        case YY_STATE_EOF(SIMPLESTRING):
        {
            pstBuffer.clear();
            BEGIN(INITIAL);
            yyerror("Unexpected end of file in a string.");
            return scan_throw(FLEX_ERROR);
        }
        YY_BREAK
        case 120:
        case 121:
            YY_RULE_SETUP
            {
                //scan_step();
                pstBuffer += yytext;
            }
            YY_BREAK

        case 122:
            YY_RULE_SETUP
            {
                pstBuffer += "\"";
            }
            YY_BREAK
        case 123:
            YY_RULE_SETUP
            {
                pstBuffer += "'";
            }
            YY_BREAK
        case 124:
            YY_RULE_SETUP
            {
                pstBuffer += "\"";
            }
            YY_BREAK
        case 125:
            YY_RULE_SETUP
            {
                pstBuffer += "'";
            }
            YY_BREAK
        case 126:
            YY_RULE_SETUP
            {
                yy_pop_state();
                //scan_step();
                wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
                if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
                {
                    pstBuffer.clear();
                    std::string str = "Can\'t convert \'";
                    str += pstBuffer.c_str();
                    str += "\' to UTF-8";
                    BEGIN(INITIAL);
                    yyerror(str);
                    return scan_throw(FLEX_ERROR);
                }
                yylval.str = new std::wstring(pwstBuffer);
                pstBuffer.clear();
                FREE(pwstBuffer);
                yylloc.first_column = str_opener_column;
                return scan_throw(STR);
            }
            YY_BREAK
        case 127:
            YY_RULE_SETUP
            {
                pstBuffer.clear();
                BEGIN(INITIAL);
                yyerror("Heterogeneous string detected, starting with \" and ending with \'.");
                return scan_throw(FLEX_ERROR);
            }
            YY_BREAK
        case 128:
            /* rule 128 can match eol */
            YY_RULE_SETUP
            {
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                /* Do nothing... Just skip */
            }
            YY_BREAK
        case 129:
            /* rule 129 can match eol */
            YY_RULE_SETUP
            {
                pstBuffer.clear();
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                BEGIN(INITIAL);
                yyerror("Unexpected end of line in a string.");
                return scan_throw(FLEX_ERROR);
            }
            YY_BREAK
        case YY_STATE_EOF(DOUBLESTRING):
        {
            pstBuffer.clear();
            BEGIN(INITIAL);
            yyerror("Unexpected end of file in a string.");
            return scan_throw(FLEX_ERROR);
        }
        YY_BREAK
        case 130:
        case 131:
            YY_RULE_SETUP
            {
                //scan_step();
                pstBuffer += yytext;
            }
            YY_BREAK

        case 132:
            YY_RULE_SETUP
            {
                if (last_token == ID)
                {
                    scan_throw(SPACES);
                    return ID;
                }
            }
            YY_BREAK
        case 133:
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                scan_step();
                return scan_throw(SEMI);
            }
            YY_BREAK
        case 134:
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                scan_step();
                return scan_throw(COMMA);
            }
            YY_BREAK
        case 135:
            /* rule 135 can match eol */
            YY_RULE_SETUP
            {
                BEGIN(INITIAL);
                yylloc.last_line += 1;
                yylloc.last_column = 1;
                scan_step();
                return scan_throw(EOL);
            }
            YY_BREAK
        case 136:
            YY_RULE_SETUP
            {
                if (last_token == STR || last_token == SPACES)
                {
                    wchar_t *pwText = to_wide_string(yytext);
                    yylval.str = new std::wstring(pwText);
                    FREE(pwText);
                    return scan_throw(STR);
                }
                else
                {
                    BEGIN(INITIAL);
                    return scan_throw(ASSIGN);
                }
            }
            YY_BREAK
        case 137:
            YY_RULE_SETUP
            {
                if (last_token == STR || last_token == SPACES)
                {
                    wchar_t *pwText = to_wide_string(yytext);
                    yylval.str = new std::wstring(pwText);
                    FREE(pwText);
                    return scan_throw(STR);
                }
                else
                {
                    BEGIN(INITIAL);
                    return scan_throw(LPAREN);
                }
            }
            YY_BREAK
        case 138:
            YY_RULE_SETUP
            {
                if (last_token == STR || last_token == SPACES)
                {
                    wchar_t *pwText = to_wide_string(yytext);
                    yylval.str = new std::wstring(pwText);
                    FREE(pwText);
                    return scan_throw(STR);
                }
                else
                {
                    BEGIN(INITIAL);
                    return scan_throw(LT);
                }
            }
            YY_BREAK
        case 139:
            YY_RULE_SETUP
            {
                if (last_token == STR || last_token == SPACES)
                {
                    wchar_t *pwText = to_wide_string(yytext);
                    yylval.str = new std::wstring(pwText);
                    FREE(pwText);
                    return scan_throw(STR);
                }
                else
                {
                    BEGIN(INITIAL);
                    return scan_throw(GT);
                }
            }
            YY_BREAK
        case 140:
            YY_RULE_SETUP
            {
                if (last_token == STR || last_token == SPACES)
                {
                    wchar_t *pwText = to_wide_string(yytext);
                    yylval.str = new std::wstring(pwText);
                    FREE(pwText);
                    return scan_throw(STR);
                }
                else
                {
                    BEGIN(INITIAL);
                    return scan_throw(NOT);
                }
            }
            YY_BREAK
        case 141:
            YY_RULE_SETUP
            {
                wchar_t *pwText = to_wide_string(yytext);
                yylval.str = new std::wstring(pwText);
                FREE(pwText);
                return scan_throw(STR);
            }
            YY_BREAK
        case YY_STATE_EOF(SHELLMODE):
        {
            BEGIN(INITIAL);
        }
        YY_BREAK

        case 142:
            YY_RULE_SETUP
            ECHO;
            YY_BREAK
        case YY_STATE_EOF(INITIAL):
        case YY_STATE_EOF(BEGINID):
            yyterminate();

        case YY_END_OF_BUFFER:
        {
            /* Amount of text matched not including the EOB char. */
            int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

            /* Undo the effects of YY_DO_BEFORE_ACTION. */
            *yy_cp = (yy_hold_char);
            YY_RESTORE_YY_MORE_OFFSET

            if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
            {
                /* We're scanning a new file or input source.  It's
                 * possible that this happened because the user
                 * just pointed yyin at a new source and called
                 * yylex().  If so, then we have to assure
                 * consistency between YY_CURRENT_BUFFER and our
                 * globals.  Here is the right place to do so, because
                 * this is the first action (other than possibly a
                 * back-up) that will match for the new input source.
                 */
                (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
                YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
                YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
            }

            /* Note that here we test for yy_c_buf_p "<=" to the position
             * of the first EOB in the buffer, since yy_c_buf_p will
             * already have been incremented past the NUL character
             * (since all states make transitions on EOB to the
             * end-of-buffer state).  Contrast this with the test
             * in input().
             */
            if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
            {
                /* This was really a NUL. */
                yy_state_type yy_next_state;

                (yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

                yy_current_state = yy_get_previous_state(  );

                /* Okay, we're now positioned to make the NUL
                 * transition.  We couldn't have
                 * yy_get_previous_state() go ahead and do it
                 * for us because it doesn't know how to deal
                 * with the possibility of jamming (and we don't
                 * want to build jamming into it because then it
                 * will run more slowly).
                 */

                yy_next_state = yy_try_NUL_trans( yy_current_state );

                yy_bp = (yytext_ptr) + YY_MORE_ADJ;

                if ( yy_next_state )
                {
                    /* Consume the NUL. */
                    yy_cp = ++(yy_c_buf_p);
                    yy_current_state = yy_next_state;
                    goto yy_match;
                }

                else
                {
                    yy_cp = (yy_c_buf_p);
                    goto yy_find_action;
                }
            }

            else switch ( yy_get_next_buffer(  ) )
                {
                    case EOB_ACT_END_OF_FILE:
                    {
                        (yy_did_buffer_switch_on_eof) = 0;

                        if ( yywrap( ) )
                        {
                            /* Note: because we've taken care in
                             * yy_get_next_buffer() to have set up
                             * yytext, we can now set up
                             * yy_c_buf_p so that if some total
                             * hoser (like flex itself) wants to
                             * call the scanner after we return the
                             * YY_NULL, it'll still work - another
                             * YY_NULL will get returned.
                             */
                            (yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

                            yy_act = YY_STATE_EOF(YY_START);
                            goto do_action;
                        }

                        else
                        {
                            if ( ! (yy_did_buffer_switch_on_eof) )
                            {
                                YY_NEW_FILE;
                            }
                        }
                        break;
                    }

                    case EOB_ACT_CONTINUE_SCAN:
                        (yy_c_buf_p) =
                            (yytext_ptr) + yy_amount_of_matched_text;

                        yy_current_state = yy_get_previous_state(  );

                        yy_cp = (yy_c_buf_p);
                        yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                        goto yy_match;

                    case EOB_ACT_LAST_MATCH:
                        (yy_c_buf_p) =
                            &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

                        yy_current_state = yy_get_previous_state(  );

                        yy_cp = (yy_c_buf_p);
                        yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                        goto yy_find_action;
                }
            break;
        }

        default:
            YY_FATAL_ERROR(
                "fatal flex scanner internal error--no action found" );
    } /* end of action switch */
} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
register char *source = (yytext_ptr);
register int number_to_move, i;
int ret_val;

if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
    YY_FATAL_ERROR(
        "fatal flex scanner internal error--end of buffer missed" );

if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
{
    /* Don't try to fill the buffer, so this is an EOF. */
    if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
    {
        /* We matched a single character, the EOB, so
         * treat this as a final EOF.
         */
        return EOB_ACT_END_OF_FILE;
    }

    else
    {
        /* We matched some text prior to the EOB, first
         * process it.
         */
        return EOB_ACT_LAST_MATCH;
    }
}

/* Try to read more data. */

/* First move last chars to start of buffer. */
number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

for ( i = 0; i < number_to_move; ++i )
{
    *(dest++) = *(source++);
}

if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
    /* don't do the read, it's not guaranteed to return an EOF,
     * just force an EOF
     */
{
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;
}

else
{
    int num_to_read =
        YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

    while ( num_to_read <= 0 )
    {
        /* Not enough room in the buffer - grow it. */

        YY_FATAL_ERROR(
            "input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

    }

    if ( num_to_read > YY_READ_BUF_SIZE )
    {
        num_to_read = YY_READ_BUF_SIZE;
    }

    /* Read in more data. */
    YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
              (yy_n_chars), (size_t) num_to_read );

    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
}

if ( (yy_n_chars) == 0 )
{
    if ( number_to_move == YY_MORE_ADJ )
    {
        ret_val = EOB_ACT_END_OF_FILE;
        yyrestart(yyin  );
    }

    else
    {
        ret_val = EOB_ACT_LAST_MATCH;
        YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
            YY_BUFFER_EOF_PENDING;
    }
}

else
{
    ret_val = EOB_ACT_CONTINUE_SCAN;
}

if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size)
{
    /* Extend the array by 50%, plus the number we really need. */
    yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
    YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, new_size  );
    if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
    {
        YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
    }
}

(yy_n_chars) += number_to_move;
YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state (void)
{
register yy_state_type yy_current_state;
register char *yy_cp;

yy_current_state = (yy_start);
yy_current_state += YY_AT_BOL();

(yy_state_ptr) = (yy_state_buf);
*(yy_state_ptr)++ = yy_current_state;

for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
{
    register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
    {
        yy_current_state = (int) yy_def[yy_current_state];
        if ( yy_current_state >= 809 )
        {
            yy_c = yy_meta[(unsigned int) yy_c];
        }
    }
    yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
    *(yy_state_ptr)++ = yy_current_state;
}

return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
register int yy_is_jam;

register YY_CHAR yy_c = 1;
while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
{
    yy_current_state = (int) yy_def[yy_current_state];
    if ( yy_current_state >= 809 )
    {
        yy_c = yy_meta[(unsigned int) yy_c];
    }
}
yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
yy_is_jam = (yy_current_state == 808);
if ( ! yy_is_jam )
{
    *(yy_state_ptr)++ = yy_current_state;
}

return yy_is_jam ? 0 : yy_current_state;
}

static void yyunput (int c, register char * yy_bp )
{
register char *yy_cp;

yy_cp = (yy_c_buf_p);

/* undo effects of setting up yytext */
*yy_cp = (yy_hold_char);

if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
{
    /* need to shift things up to make room */
    /* +2 for EOB chars. */
    register int number_to_move = (yy_n_chars) + 2;
    register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
                              YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
    register char *source =
        &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

    while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
    {
        *--dest = *--source;
    }

    yy_cp += (int) (dest - source);
    yy_bp += (int) (dest - source);
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
        (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

    if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
    {
        YY_FATAL_ERROR( "flex scanner push-back overflow" );
    }
}

*--yy_cp = (char) c;

(yytext_ptr) = yy_bp;
(yy_hold_char) = *yy_cp;
(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput (void)
#else
static int input  (void)
#endif

{
    int c;

    *(yy_c_buf_p) = (yy_hold_char);

    if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
    {
        /* yy_c_buf_p now points to the character we want to return.
         * If this occurs *before* the EOB characters, then it's a
         * valid NUL; if not, then we've hit the end of the buffer.
         */
        if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
            /* This was really a NUL. */
        {
            *(yy_c_buf_p) = '\0';
        }

        else
        {
            /* need more input */
            int offset = (yy_c_buf_p) - (yytext_ptr);
            ++(yy_c_buf_p);

            switch ( yy_get_next_buffer(  ) )
            {
                case EOB_ACT_LAST_MATCH:
                    /* This happens because yy_g_n_b()
                     * sees that we've accumulated a
                     * token and flags that we need to
                     * try matching the token before
                     * proceeding.  But for input(),
                     * there's no matching to consider.
                     * So convert the EOB_ACT_LAST_MATCH
                     * to EOB_ACT_END_OF_FILE.
                     */

                    /* Reset buffer status. */
                    yyrestart(yyin );

                    /*FALLTHROUGH*/

                case EOB_ACT_END_OF_FILE:
                {
                    if ( yywrap( ) )
                    {
                        return EOF;
                    }

                    if ( ! (yy_did_buffer_switch_on_eof) )
                    {
                        YY_NEW_FILE;
                    }
#ifdef __cplusplus
                    return yyinput();
#else
                    return input();
#endif
                }

                case EOB_ACT_CONTINUE_SCAN:
                    (yy_c_buf_p) = (yytext_ptr) + offset;
                    break;
            }
        }
    }

    c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
    *(yy_c_buf_p) = '\0';	/* preserve yytext */
    (yy_hold_char) = *++(yy_c_buf_p);

    YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

    return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 *
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyrestart  (FILE * input_file )
{

    if ( ! YY_CURRENT_BUFFER )
    {
        yyensure_buffer_stack ();
        YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin, YY_BUF_SIZE );
    }

    yy_init_buffer(YY_CURRENT_BUFFER, input_file );
    yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 *
 */
void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{

    /* TODO. We should be able to replace this entire function body
     * with
     *		yypop_buffer_state();
     *		yypush_buffer_state(new_buffer);
     */
    yyensure_buffer_stack ();
    if ( YY_CURRENT_BUFFER == new_buffer )
    {
        return;
    }

    if ( YY_CURRENT_BUFFER )
    {
        /* Flush out information for old buffer. */
        *(yy_c_buf_p) = (yy_hold_char);
        YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
    }

    YY_CURRENT_BUFFER_LVALUE = new_buffer;
    yy_load_buffer_state( );

    /* We don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    (yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
    (yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
    yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
    (yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 *
 * @return the allocated buffer state.
 */
YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
    if ( ! b )
    {
        YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
    }

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
    if ( ! b->yy_ch_buf )
    {
        YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
    }

    b->yy_is_our_buffer = 1;

    yy_init_buffer(b, file );

    return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 *
 */
void yy_delete_buffer (YY_BUFFER_STATE  b )
{

    if ( ! b )
    {
        return;
    }

    if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
    {
        YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;
    }

    if ( b->yy_is_our_buffer )
    {
        yyfree((void *) b->yy_ch_buf  );
    }

    yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
int oerrno = errno;

yy_flush_buffer(b );

b->yy_input_file = file;
b->yy_fill_buffer = 1;

/* If b is the current buffer, then yy_init_buffer was _probably_
 * called from yyrestart() or through yy_get_next_buffer.
 * In that case, we don't want to reset the lineno or column.
 */
if (b != YY_CURRENT_BUFFER)
{
    b->yy_bs_lineno = 1;
    b->yy_bs_column = 0;
}

b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;

errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 *
 */
void yy_flush_buffer (YY_BUFFER_STATE  b )
{
if ( ! b )
{
    return;
}

b->yy_n_chars = 0;

/* We always need two end-of-buffer characters.  The first causes
 * a transition to the end-of-buffer state.  The second causes
 * a jam in that state.
 */
b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

b->yy_buf_pos = &b->yy_ch_buf[0];

b->yy_at_bol = 1;
b->yy_buffer_status = YY_BUFFER_NEW;

if ( b == YY_CURRENT_BUFFER )
{
    yy_load_buffer_state( );
}
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
if (new_buffer == NULL)
{
    return;
}

yyensure_buffer_stack();

/* This block is copied from yy_switch_to_buffer. */
if ( YY_CURRENT_BUFFER )
{
    /* Flush out information for old buffer. */
    *(yy_c_buf_p) = (yy_hold_char);
    YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
}

/* Only push if top exists. Otherwise, replace top. */
if (YY_CURRENT_BUFFER)
{
    (yy_buffer_stack_top)++;
}
YY_CURRENT_BUFFER_LVALUE = new_buffer;

/* copied from yy_switch_to_buffer. */
yy_load_buffer_state( );
(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *
 */
void yypop_buffer_state (void)
{
if (!YY_CURRENT_BUFFER)
{
    return;
}

yy_delete_buffer(YY_CURRENT_BUFFER );
YY_CURRENT_BUFFER_LVALUE = NULL;
if ((yy_buffer_stack_top) > 0)
{
    --(yy_buffer_stack_top);
}

if (YY_CURRENT_BUFFER)
{
    yy_load_buffer_state( );
    (yy_did_buffer_switch_on_eof) = 1;
}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
int num_to_alloc;

if (!(yy_buffer_stack))
{

    /* First allocation is just for 2 elements, since we don't know if this
     * scanner will even need a stack. We use 2 instead of 1 to avoid an
     * immediate realloc on the next call.
     */
    num_to_alloc = 1;
    (yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
                        (num_to_alloc * sizeof(struct yy_buffer_state*)
                        );
    if ( ! (yy_buffer_stack) )
    {
        YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
    }

    memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

    (yy_buffer_stack_max) = num_to_alloc;
    (yy_buffer_stack_top) = 0;
    return;
}

if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1)
{

    /* Increase the buffer to prepare for a possible push. */
    int grow_size = 8 /* arbitrary grow size */;

    num_to_alloc = (yy_buffer_stack_max) + grow_size;
    (yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
                        ((yy_buffer_stack),
                         num_to_alloc * sizeof(struct yy_buffer_state*)
                        );
    if ( ! (yy_buffer_stack) )
    {
        YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
    }

    /* zero only the new slots.*/
    memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
    (yy_buffer_stack_max) = num_to_alloc;
}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
YY_BUFFER_STATE b;

if ( size < 2 ||
        base[size - 2] != YY_END_OF_BUFFER_CHAR ||
        base[size - 1] != YY_END_OF_BUFFER_CHAR )
    /* They forgot to leave room for the EOB's. */
{
    return 0;
}

b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
if ( ! b )
{
    YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );
}

b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
b->yy_buf_pos = b->yy_ch_buf = base;
b->yy_is_our_buffer = 0;
b->yy_input_file = 0;
b->yy_n_chars = b->yy_buf_size;
b->yy_is_interactive = 0;
b->yy_at_bol = 1;
b->yy_fill_buffer = 0;
b->yy_buffer_status = YY_BUFFER_NEW;

yy_switch_to_buffer(b  );

return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 *
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{

return yy_scan_bytes(yystr, strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
YY_BUFFER_STATE b;
char *buf;
yy_size_t n;
int i;

/* Get memory for full buffer, including space for trailing EOB's. */
n = _yybytes_len + 2;
buf = (char *) yyalloc(n  );
if ( ! buf )
{
    YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );
}

for ( i = 0; i < _yybytes_len; ++i )
{
    buf[i] = yybytes[i];
}

buf[_yybytes_len] = buf[_yybytes_len + 1] = YY_END_OF_BUFFER_CHAR;

b = yy_scan_buffer(buf, n );
if ( ! b )
{
    YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );
}

/* It's okay to grow etc. this buffer, and we should throw it
 * away when we're done.
 */
b->yy_is_our_buffer = 1;

return b;
}

static void yy_push_state (int  new_state )
{
if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
{
    yy_size_t new_size;

    (yy_start_stack_depth) += YY_START_STACK_INCR;
    new_size = (yy_start_stack_depth) * sizeof( int );

    if ( ! (yy_start_stack) )
    {
        (yy_start_stack) = (int *) yyalloc(new_size  );
    }

    else
    {
        (yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack), new_size  );
    }

    if ( ! (yy_start_stack) )
    {
        YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
    }
}

(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

BEGIN(new_state);
}

static void yy_pop_state  (void)
{
if ( --(yy_start_stack_ptr) < 0 )
{
    YY_FATAL_ERROR( "start-condition stack underflow" );
}

BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

static int yy_top_state  (void)
{
return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
(void) fprintf( stderr, "%s\n", msg );
exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 *
 */
int yyget_lineno  (void)
{

return yylineno;
}

/** Get the input stream.
 *
 */
FILE *yyget_in  (void)
{
return yyin;
}

/** Get the output stream.
 *
 */
FILE *yyget_out  (void)
{
return yyout;
}

/** Get the length of the current token.
 *
 */
int yyget_leng  (void)
{
return yyleng;
}

/** Get the current token.
 *
 */

char *yyget_text  (void)
{
return yytext;
}

/** Set the current line number.
 * @param line_number
 *
 */
void yyset_lineno (int  line_number )
{

yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 *
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
yyout = out_str ;
}

int yyget_debug  (void)
{
return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
/* Initialization is the same as for the non-reentrant scanner.
* This function is called from yylex_destroy(), so don't allocate here.
*/

(yy_buffer_stack) = 0;
(yy_buffer_stack_top) = 0;
(yy_buffer_stack_max) = 0;
(yy_c_buf_p) = (char *) 0;
(yy_init) = 0;
(yy_start) = 0;

(yy_start_stack_ptr) = 0;
(yy_start_stack_depth) = 0;
(yy_start_stack) =  NULL;

(yy_state_buf) = 0;
(yy_state_ptr) = 0;
(yy_full_match) = 0;
(yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
yyin = stdin;
yyout = stdout;
#else
yyin = (FILE *) 0;
yyout = (FILE *) 0;
#endif

/* For future reference: Set errno on error, since we are called by
 * yylex_init()
 */
return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{

/* Pop the buffer stack, destroying each element. */
while (YY_CURRENT_BUFFER)
{
    yy_delete_buffer(YY_CURRENT_BUFFER  );
    YY_CURRENT_BUFFER_LVALUE = NULL;
    yypop_buffer_state();
}

/* Destroy the stack itself. */
yyfree((yy_buffer_stack) );
(yy_buffer_stack) = NULL;

/* Destroy the start condition stack. */
yyfree((yy_start_stack)  );
(yy_start_stack) = NULL;

yyfree ( (yy_state_buf) );
(yy_state_buf)  = NULL;

/* Reset the globals. This is important in a non-reentrant scanner so the next time
 * yylex() is called, initialization will occur. */
yy_init_globals( );

return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
register int i;
for ( i = 0; i < n; ++i )
{
    s1[i] = s2[i];
}
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
register int n;
for ( n = 0; s[n]; ++n )
    ;

return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
/* The cast to (char *) in the following accommodates both
 * implementations that use char* generic pointers, and those
 * that use void* generic pointers.  It works with the latter
 * because both ANSI C and C++ allow castless assignment from
 * any pointer type to void*, and deal with argument conversions
 * as though doing an assignment.
 */
return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

int scan_throw(int token)
{
last_token = token;
#ifdef DEV
std::cout << "--> [DEBUG] TOKEN : " << token << std::endl;
#endif
return token;
}

int get_last_token()
{
return last_token;
}

void scan_step()
{
yylloc.first_line = yylloc.last_line;
yylloc.first_column = yylloc.last_column;
}

/*
** convert floating numbers to C standard
** 1.2d-3 -> 1.2e-3
** 1.2D-3 -> 1.2e-3
*/
void scan_exponent_convert(char *in)
{
for (; *in != 'd' && *in != 'D'; ++in);
*in = 'e';
}

#ifdef _MSC_VER
int isatty (int desc)
{
return 0;
}
#endif

