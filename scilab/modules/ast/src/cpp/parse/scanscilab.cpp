
#line 3 "src/cpp/parse/scanscilab.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 147
#define YY_END_OF_BUFFER 148
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[970] =
    {   0,
    16407,  148,   81,  147,   77,   81,  147,   78,  147,   78,
       81,  147,   75,   81,  147,   72,   81,  147,   26,   81,
      147,   72,   81,  147,   29,   81,  147,   76,   81,  147,
       33,   81,  147,   34,   81,  147,   47,   81,  147,   46,
       81,  147,   36,   81,  147,   45,   81,  147,   66,   81,
      147,   48,   81,  147,   68,   81,  147,   37,   81,  147,
       35,   81,  147,   59,   81,  147,   63,   81,  147,   60,
       81,  147,   72,   81,  147,   25,   81,  147,   64,   81,
      147,   49,   81,  147,   65,   81,  147,   50,   81,  147,
       72,   81,  147,   72,   81,  147,   72,   81,  147,   72,

       81,  147,   72,   81,  147,   72,   81,  147,   72,   81,
      147,   72,   81,  147,   72,   81,  147,   72,   81,  147,
       72,   81,  147,   72,   81,  147,   38,   81,  147,   31,
       81,  147,   39,   81,  147,   25,   81,  147,   81,  147,
       81,  147,   81,  147,   81,  147,   81,  147,   81,  147,
       81,  147,   81,  147,   77,   81,  147,16407,   72,   81,
      147,   26,   81,  147,   72,   81,  147,   72,   81,  147,
       72,   81,  147,   72,   81,  147,   72,   81,  147,   72,
       81,  147,   72,   81,  147,   72,   81,  147,   72,   81,
      147,   72,   81,  147,   72,   81,  147,   72,   81,  147,

       72,   81,  147,   72,   81,  147,   81,  147,   81,  147,
       81,  147,   81,  147,   81,  147,   81,  147,   81,  147,
       81,  147,  127,  147,  126,  147,  126,  127,  147,  124,
      127,  147,  123,  127,  147,  127,  147,  136,  147,  135,
      147,  135,  136,  147,  132,  136,  147,  133,  136,  147,
      136,  147,  118,  147,  117,  147,  117,  118,  147,  118,
      147,  118,  147,  114,  147,  113,  147,  113,  114,  147,
      112,  147,  111,  112,  147,  108,  147,  108,  112,  147,
      112,  147,   94,  147,   77,   94,  147,   84,  147,   84,
       94,  147,   75,   94,  147,   72,   94,  147,   26,   94,

      147,   72,   94,  147,   29,   94,  147,   76,   94,  147,
       33,   82,   94,  147,   34,   94,  147,   47,   94,  147,
       87,   94,  147,   36,   94,  147,   88,   94,  147,   66,
       94,  147,   48,   94,  147,   68,   94,  147,   37,   83,
       94,  147,   35,   94,  147,   59,   94,  147,   63,   94,
      147,   60,   94,  147,   25,   94,  147,   64,   94,  147,
       49,   94,  147,   85,   94,  147,   50,   94,  147,   38,
       94,  147,   31,   94,  147,   86,   94,  147,   25,   94,
      147,   94,  147,   94,  147,   94,  147,   94,  147,   94,
      147,   94,  147,   94,  147,   94,  147,  107,  147,  104,

      107,  147,  147,  103,  107,  147,  107,  147,  105,  107,
      147,  106,  107,  147,   98,  107,  147,   97,  107,  147,
      107,  147,   99,  107,  147,  107,  147,  107,  147,  107,
      147,  107,  147,  107,  147,  107,  147,  107,  147,  107,
      147,  146,  147,  137,  147,  140,  147,  140,  147,   75,
      147,   76,  147,  142,  146,  147,  139,  147,  138,  147,
      143,  146,  147,  141,  146,  147,  144,  146,  147,  145,
      146,  147,   24,  147,  147,   24,  147,   24,  147,   24,
      147,   24,  147,   24,  147,   24,  147,   24,  147,   24,
      147,   24,  147,   24,  147,   24,  147,   24,  147,   24,

      147,  147,  147,  147,  147,  147,  147,  147,  147,   77,
       79,   79,   78,   72,   72,   72,   28,   72,   27,   72,
       30,   50,   40,   41,   67,   42,   71,   43,   44,   73,
       74,   70,   68,   61,   58,   57,   62,   72,   72,   72,
       16,   72,   72,   72,   72,   72,   72,    1,   72,   72,
       72,   72,   72,   72,   72,   72,   32,   72,   77,16407,
       72,   72,   72,   28,   72,   27,   72,   72,   72,   72,
       16,   72,   72,   72,   72,   72,   72,    1,   72,   72,
       72,   72,   72,   72,   72,   72,   72,  126,  119,  120,
      121,  122,  135,  128,  129,  130,  131,  117,  115,  116,

      113,  111,  108,  109,  110,   77,   82,   83,   84,   83,
      104,  103,  103,  101,  100,   99,  103,  146,  137,  140,
       24,   24,   24,   24,   24,   24,   16,   24,   24,   24,
       24,   24,   24,    1,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   80,   80,   72,   54,   51,   52,   53,
       55,   70,   69,   56,   72,   72,   72,   72,   72,    5,
       72,   14,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   19,   72,   72, 8215, 8215,   72,   72,   72,   72,
       72,   72,    5,   72,   14,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   19,   72,   72,  125,  125,  134,

      134,   93,   89,   95,   95,  100,  102,   24,   24,   24,
       24,   24,   24,    5,   24,   14,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   19,   24,   24,   72,   72,
        9,   72,   72,   72,    3,   72,   72,   72,   72,   72,
       72,   72,   72,   72,    2,   72,   72,   72,   72,   72,
        9,   72,   72,   72,    3,   72,   72,   72,   72,   72,
       72,   72,   72,   72,    2,   72,   72,   72,   93,   93,
       92,   90,   96,  103,   24,   24,    9,   24,   24,   24,
        3,   24,   24,   24,   24,   24,   24,   24,   24,   24,
        2,   24,   24,   24,   72,   72,   72,   17,   72,   20,

       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   15,   72,   72,   72,   72,   17,   72,   20,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       15,   72,   90,   91,  103,  103,   24,   24,   24,   17,
       24,   20,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   15,   24,   72,   72,    4,   72,   72,
       72,   13,   72,   72,   22,   72,   21,   72,    6,   72,
        7,   72,   72,   72,    4,   72,   72,   72,   13,   72,
       72,   22,   72,   21,   72,    6,   72,    7,   72,   93,
       24,   24,    4,   24,   24,   24,   13,   24,   24,   22,

       24,   21,   24,    6,   24,    7,   24,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   93,   93,   24,
       24,   24,   24,   24,   72,   18,   72,   72,   10,   72,
       72,   72,   18,   72,   72,   10,   72,   72,   24,   18,
       24,   24,   10,   24,   24,   12,   72,   72,    8,   72,
       12,   72,   72,    8,   72,   12,   24,   24,    8,   24,
       72,   72,   24,   11,   72,   11,   72,   11,   24
    } ;

static yyconst flex_int16_t yy_accept[933] =
    {   0,
        1,    1,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    3,    5,    8,   10,   13,   16,   19,   22,   25,
       28,   31,   34,   37,   40,   43,   46,   49,   52,   55,
       58,   61,   64,   67,   70,   73,   76,   79,   82,   85,
       88,   91,   94,   97,  100,  103,  106,  109,  112,  115,
      118,  121,  124,  127,  130,  133,  136,  139,  141,  143,
      145,  147,  149,  151,  153,  155,  159,  162,  165,  168,
      171,  174,  177,  180,  183,  186,  189,  192,  195,  198,
      201,  204,  207,  209,  211,  213,  215,  217,  219,  221,

      223,  225,  227,  230,  233,  236,  238,  240,  242,  245,
      248,  251,  253,  255,  257,  260,  262,  264,  266,  268,
      271,  273,  276,  278,  281,  283,  285,  288,  290,  293,
      296,  299,  302,  305,  308,  311,  315,  318,  321,  324,
      327,  330,  333,  336,  339,  343,  346,  349,  352,  355,
      358,  361,  364,  367,  370,  373,  376,  379,  382,  384,
      386,  388,  390,  392,  394,  396,  398,  400,  403,  404,
      407,  409,  412,  415,  418,  421,  423,  426,  428,  430,
      432,  434,  436,  438,  440,  442,  444,  446,  448,  450,
      452,  454,  457,  459,  461,  464,  467,  470,  473,  475,

      476,  478,  480,  482,  484,  486,  488,  490,  492,  494,
      496,  498,  500,  502,  503,  504,  505,  506,  507,  508,
      509,  510,  511,  512,  513,  513,  513,  514,  515,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  519,  521,  522,
      523,  523,  524,  525,  526,  527,  528,  529,  530,  531,
      531,  532,  533,  534,  534,  535,  536,  537,  538,  538,
      539,  540,  541,  543,  544,  545,  546,  547,  548,  550,
      551,  552,  553,  554,  555,  556,  557,  558,  559,  559,
      559,  559,  559,  559,  559,  559,  561,  561,  561,  561,

      561,  561,  561,  561,  561,  561,  561,  561,  562,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  566,  568,  569,
      570,  571,  573,  574,  575,  576,  577,  578,  580,  581,
      582,  583,  584,  585,  586,  587,  588,  588,  588,  588,
      588,  588,  588,  588,  589,  590,  591,  592,  593,  593,
      594,  595,  596,  597,  598,  598,  599,  600,  601,  602,
      603,  604,  605,  606,  607,  608,  608,  609,  610,  610,
      611,  612,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  614,  614,  614,  614,  614,  614,  614,  614,  614,

      615,  616,  617,  617,  618,  618,  618,  618,  618,  618,
      618,  618,  619,  620,  621,  622,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  625,  626,  627,  629,  630,  631,
      632,  633,  634,  636,  637,  638,  639,  640,  641,  642,
      643,  644,  644,  644,  644,  644,  644,  644,  644,  645,
      646,  647,  647,  647,  647,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  647,  648,  649,  650,  651,
      652,  653,  653,  654,  655,  656,  657,  658,  659,  660,
      662,  664,  665,  666,  667,  668,  669,  670,  671,  672,

      674,  675,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  675,
      676,  677,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  679,  680,  681,
      682,  683,  685,  687,  688,  689,  690,  691,  692,  693,
      694,  695,  697,  698,  698,  698,  698,  699,  700,  701,
      702,  703,  703,  703,  703,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  705,  706,  706,  706,  706,
      706,  706,  706,  706,  706,  706,  706,  706,  706,  706,

      706,  706,  707,  707,  708,  708,  708,  708,  709,  709,
      709,  709,  709,  709,  709,  709,  709,  709,  709,  709,
      709,  709,  709,  710,  711,  712,  713,  714,  716,  718,
      719,  720,  721,  722,  723,  724,  725,  726,  728,  729,
      729,  729,  729,  730,  730,  730,  730,  730,  730,  730,
      731,  733,  734,  735,  737,  738,  739,  740,  741,  742,
      743,  744,  745,  747,  748,  749,  749,  749,  749,  749,
      749,  749,  749,  749,  749,  749,  749,  749,  749,  749,
      749,  749,  749,  750,  750,  750,  750,  750,  750,  750,
      751,  753,  754,  755,  757,  758,  759,  760,  761,  762,

      763,  764,  765,  767,  768,  769,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  772,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  774,  774,  774,  774,  774,  774,
      774,  775,  776,  776,  776,  776,  776,  776,  776,  777,
      779,  780,  781,  783,  784,  785,  786,  787,  788,  789,
      790,  791,  793,  794,  795,  796,  797,  798,  800,  802,
      803,  804,  805,  806,  807,  808,  809,  810,  811,  812,
      814,  814,  814,  814,  814,  814,  814,  814,  815,  816,
      817,  819,  821,  822,  823,  824,  825,  826,  827,  828,

      829,  830,  831,  833,  833,  833,  833,  833,  833,  833,
      833,  833,  833,  833,  833,  833,  833,  833,  834,  834,
      835,  835,  835,  835,  836,  837,  838,  839,  840,  842,
      844,  845,  846,  847,  848,  849,  850,  851,  852,  853,
      854,  856,  857,  858,  860,  861,  862,  864,  865,  867,
      869,  871,  873,  873,  873,  874,  875,  877,  878,  879,
      881,  882,  884,  886,  888,  890,  890,  890,  890,  890,
      890,  890,  891,  892,  893,  895,  896,  897,  899,  900,
      902,  904,  906,  908,  909,  910,  911,  912,  913,  914,
      915,  916,  917,  918,  919,  920,  921,  922,  923,  924,

      925,  926,  928,  929,  931,  932,  933,  935,  936,  938,
      939,  940,  942,  943,  945,  946,  948,  949,  951,  953,
      954,  956,  958,  959,  961,  962,  963,  964,  966,  968,
      970,  970
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,   25,   26,   25,   25,   25,   27,   27,   28,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   29,   25,   25,   25,   25,   25,   25,
       30,   31,   32,   33,   25,    1,   34,   35,   36,   37,

       38,   39,   25,   40,   41,   25,   42,   43,   44,   45,
       46,   25,   25,   47,   48,   49,   50,   25,   51,   25,
       52,   25,   53,   54,   55,   56,    1,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,    1,    1,   60,   60,   60,   60,   60,   60,   60,

       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   61,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   63,   64,   64,   65,
       66,   66,   66,   67,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[68] =
    {   0,
        1,    2,    3,    3,    4,    5,    5,    6,    1,    4,
        7,    1,    1,    1,    4,    1,    8,    1,    9,    1,
        4,   10,   10,   10,    5,   10,    5,    5,    5,    1,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    1,    1,    1,   10,    1,    1,    1,    5,
        5,    5,    5,    5,    5,    5,    5
    } ;

static yyconst flex_int16_t yy_base[957] =
    {   0,
        0,   67,  132,  135,  143,  151,  154,  160,  140,  147,
      167,  172,  190,    0,  257,    0,  323,  378,  434,    0,
     2152, 3277,  177,  327,  337, 3277,  302,  310,  474, 2140,
     3277, 3277, 3277,  149, 3277, 3277, 3277,  377,  169,  386,
     3277, 3277,  160, 2117, 2115,  378, 2109, 3277, 2109, 3277,
     3277,  383,  476,  478,  503,  480,  515,  521,  529,  533,
      537,  545,  551, 3277, 2068, 3277, 2076,  273, 2039,  278,
      131,  296,  292,  302, 1974,  599,  557,  547,  665,  576,
      598,  600,  602,  629,  604,  641,  647,  656,  659,  671,
      695,  663,  327, 1935,  357,  299,  361,  333,  540, 1926,

     3277, 3277, 1941,  416,  423, 1890, 3277, 3277, 1900,  506,
      523, 1883, 3277, 3277, 1887, 1865, 1856, 3277, 3277, 1861,
     3277, 1860, 3277, 1856,  622, 3277,  734,  731,  738, 3277,
      727,  707,    0, 1847, 3277, 3277, 3277,  412, 3277, 3277,
     3277,  765,  698,  762, 1850, 3277,  374, 1822, 1815, 1812,
     3277, 1813, 3277, 3277, 3277, 1645, 3277, 1674,  660, 1628,
      703,  463,  706,  597,  728, 1628, 3277, 1671, 3277,  741,
      749, 3277, 3277, 3277, 3277, 1637,  800,  733, 1594,  736,
      649,  763,  699,  766, 1583,    0, 1624, 3277, 1613, 3277,
     3277,    0, 3277, 3277,    0,    0,    0,    0,  779,  768,

      787, 1565,  131, 1564,  469,  501, 1567, 1563, 1549, 1421,
      817,  816, 1414,  800, 1387,  803,  807,  812,  808,  815,
     1384,  873, 3277, 1435,  876,  879,  883,  860,  864,  848,
     1328,  853,  829,  858,  837,  861, 1317,    0,  864, 1313,
      867,  844,  870,  872,  875, 1304,  907,  909, 3277, 3277,
        0, 3277,  550, 1339, 1329,  922, 1319, 3277, 3277,    0,
     3277,  924,  928,  938, 3277, 3277, 3277, 3277,    0,  935,
      939,  941,  943,  965,  968,  971,  980,  987,  973,  999,
     1002, 1004, 1016, 1030, 1032, 1034, 3277, 1038,  918, 1031,
     1034, 1037, 1040, 1043, 1046, 1104, 1052, 1060, 1071, 1273,

     1074,  882, 1077,  976, 1080, 1273, 1326, 1112, 1124, 1085,
     1265, 1088, 1028, 1091, 1051, 1097, 1259, 1155, 1101, 1251,
     1118, 1121, 1123, 1125, 1128, 1251, 1160, 1162, 1164, 1195,
     1197, 1199, 1201, 1223, 1226, 1229, 1242, 1238, 1254, 1256,
     1268, 1260, 1284, 1286, 1290, 1298, 1137, 1147, 1174, 1283,
     1286, 1291, 1294, 3277, 3277, 3277, 3277, 3277, 1317, 3277,
     3277, 3277, 3277, 3277, 1351, 3277, 3277, 3277, 3277, 1304,
     3277, 3277, 3277, 1355, 3277, 1369, 1300, 1358, 1360, 1298,
     1296, 1329, 1324, 1233, 1340, 1140, 1343, 1149, 1346, 1233,
     1346, 1357, 1227, 1360, 1206, 1363, 1326, 1366, 1223, 1418,

     1420, 1423, 1351,    0, 1369, 1394, 1405, 1408, 1411, 1414,
     1417,    0, 1274, 3277,    0, 1219, 1420, 1202, 1423, 1386,
     1426, 1390, 1429, 1202, 1429, 1440, 1197, 1443, 1446, 1448,
     1450, 1453, 1196, 1209, 1465, 1200,    0, 1193, 1202, 1190,
     1190, 1177,    0, 1172, 1467, 1167, 1159, 1134, 1110, 1041,
        0, 1460, 1463, 1466, 1469, 1472, 1475, 1478, 3277, 1077,
     1510, 1483, 1486, 1489, 1493, 1499, 1503, 1506, 1509, 1512,
     1515, 1518, 1521, 1524, 1527, 3277, 3277, 3277, 3277, 3277,
     1568, 1059, 1057, 3277, 1560, 1562, 1568, 1564, 1586, 1590,
     1592, 1594, 1599, 1616, 1618, 1621, 1623, 1630, 1635, 1647,

     1649, 1624, 1632, 1636, 1640, 1651, 1015, 1654, 1496, 1657,
     1659, 1662, 1015, 1664, 1675, 1011, 1678, 1665, 1681, 1683,
     1686, 1007, 1689, 1692, 1695, 1698, 1701, 1704, 1707, 3277,
     1054, 1739, 1712, 1715, 1718, 1722, 1728, 1732, 1735, 1738,
     1741, 1744, 1747, 1750, 1753, 1756, 1788, 1790, 1795, 1797,
     1804, 1812, 1819, 1821, 1826, 1838, 1843, 1845, 1850, 1852,
     1857, 1869, 1876, 1852, 1855, 1863, 3277, 1049, 3277, 1046,
     1866, 1874, 1935, 1027, 1926, 1890,  983, 1898, 1725, 1901,
     1762, 1908,  983, 1966, 3277, 1034, 1005, 1914, 1917, 1920,
     1923, 1928, 1931, 1934, 1946, 1949, 1952, 1955, 1958, 1961,

     1964, 2005, 1002,  992, 1968, 1971, 1976,  961, 1979, 1982,
     1987, 1990, 1993, 1996, 1999, 2002, 2005, 2008, 2011, 2014,
     2017, 2020,  969,  960,  959,  942,  951,  946,    0,  947,
      944,  941,  903,  900,  906,  893,  863,    0,  847, 2023,
     2026, 2029, 2061, 2034, 2037, 2044, 2047, 2050, 2054, 2086,
     2088, 2090, 2092, 2095, 2114, 2117, 2119, 2122, 2126, 2144,
     2148, 2150, 2153, 2166, 2172, 2149, 2155, 2159, 2165, 2168,
     2171, 2174, 2177, 2180, 2183, 2186, 2189, 2192, 2195, 2198,
     2201, 2204, 2236, 2209, 2212, 2219, 2222, 2225, 2229, 2261,
     2263, 2265, 2267, 2270, 2289, 2292, 2294, 2297, 2301, 2319,

     2323, 2325, 2328, 2341, 2347, 2337, 2324,  825, 2330, 1859,
     2334, 1865, 2348,  779, 2348, 2359,  767, 2362, 1893, 2365,
     1903, 2368,  740, 2409, 2411, 1618, 2374, 2382, 2385, 2393,
     2396, 2399, 2402, 3277, 2405, 2408, 2411, 2414, 2417, 2420,
        0,  752, 2423, 2426, 2429, 2432, 2435, 2438,  738,    0,
      737,  710,  708,  697,  694,  701,  674,  669,  654,  653,
      647,    0,  643,    0, 2470, 2472,    0, 2474, 2476, 2479,
     2488, 2501, 2503, 2506, 2510, 2519, 2525, 2534, 2537, 2543,
     2521, 2530, 2536, 2539, 2542, 2545,    0, 2577, 2579,    0,
     2581, 2583, 2586, 2595, 2608, 2610, 2613, 2617, 2626, 2632,

     2641, 2644, 2650, 2628, 2637, 2643, 2646, 2649, 2652, 2655,
     2658, 2661, 2664, 2667, 2670, 2673, 2676, 2717,  660,  658,
     2680, 2683, 2688,    0,    0,  624,    0,    0,    0,    0,
      626,  613,  599,  601,  593,  585,  578,  550,  544,  549,
        0, 2720, 2723, 2728, 2735, 2737, 2750, 2752, 2759, 2766,
     2768, 2774,    0,    0, 2781, 2790, 2796, 2798, 2803, 2815,
     2822, 2827, 2829, 2831, 2844, 2827, 2830, 2833, 2837, 2840,
     2843,    0,  546,  533,    0,  545,  531,    0,  528,    0,
        0,    0,    0, 2875, 2877, 2879, 2884, 2891, 2903, 2906,
     2908, 2922, 2925,    0,    0,  509,  515,  496,  473,  383,

     2930, 2937, 2949, 2952, 2954, 2966, 2968, 2971, 2980, 2985,
      364,    0,  337,    0,  305, 2993, 2997, 2999, 3002, 3011,
     3016,    0,  113,    0, 3024, 3033,   96, 3038, 3042,    0,
     3277, 3091, 3101, 3111, 3121, 3131, 3141, 3147, 3152, 3160,
     3165, 3170, 3175, 3180, 3189, 3195, 3200, 3209, 3219, 3229,
     3238, 3243, 3252, 3257, 3262, 3267
    } ;

static yyconst flex_int16_t yy_def[957] =
    {   0,
      931,  931,  932,  932,  933,  933,  934,  934,  935,  935,
      936,  936,  931,   13,  931,   15,  937,  937,  931,   19,
      931,  931,  931,  931,  931,  931,  938,  939,  938,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,   29,  931,  931,  931,  931,
      931,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  940,  941,  942,  941,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,  931,  931,  931,  931,  931,  931,  931,  931,

      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
       29,  939,   29,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  943,
      944,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  945,  931,  931,  931,  931,
      931,  945,  931,  931,  945,  945,  945,  945,  946,  947,

      946,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,   29,   29,  931,
      931,  931,  931,  931,  931,  931,  931,  132,  931,  931,
      931,  931,  931,  931,  931,  931,   29,   29,  931,  931,
      948,  931,  931,  931,  931,  931,  931,  931,  931,  949,
      931,  931,  931,  931,  931,  931,  931,  931,  950,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,  931,   29,  931,  931,
      931,  931,  931,  931,  931,  940,  951,  952,  931,  931,

      931,  931,  931,  931,  931,  931,  953,   79,   79,  931,
      931,  931,  931,  931,  931,  931,  931,  942,  931,  931,
      931,  931,  931,  931,  931,  931,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  954,  931,  931,  931,  931,
      931,  943,  931,  931,  931,  931,  931,  931,  931,  931,
      944,  931,  931,  931,  931,  931,  931,  931,  931,  931,

      931,  931,  931,  382,  931,  931,  931,  931,  931,  931,
      931,  945,  931,  931,  201,  201,  931,  931,  931,  931,
      931,  931,  931,  931,  947,  931,  931,  931,  931,  931,
      931,  931,  931,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  931,  931,  931,  931,  931,  931,  931,  931,  931,
       29,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,  931,  931,  931,  951,  931,  931,  931,  931,  931,
      931,  931,  931,  952,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      953,   79,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,  931,  931,  931,  931,  931,  931,  931,
      955,  956,  954,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,

      931,  931,  931,  931,  931,  931,  931,  201,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  931,
      931,  931,   29,  931,  931,  931,  931,  931,  931,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,   79,  931,  931,  931,  931,  931,  931,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,

       79,   79,   79,   79,   79,  955,  931,  931,  931,  931,
      931,  931,  931,  931,  956,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      382,  201,  931,  931,  931,  931,  931,  931,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,   29,   29,  132,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
      931,  931,  931,  931,  931,  931,  505,   79,   79,  318,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,

       79,   79,   79,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  382,  391,  201,  201,  425,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,  505,  514,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,  931,  931,  931,  931,  931,
      931,  706,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,   29,   29,   29,   29,   29,   79,   79,
       79,   79,   79,  706,  715,  201,  201,  201,  201,  201,

       29,   29,   29,   29,   29,   79,   79,   79,   79,   79,
      201,  201,  201,  201,  201,   29,   29,   29,   79,   79,
       79,  201,  201,  201,   29,   79,  201,   29,   79,  201,
        0,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931
    } ;

static yyconst flex_int16_t yy_nxt[3345] =
    {   0,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   46,   46,   46,   48,
       49,   50,   51,   46,   52,   53,   54,   55,   56,   57,
       58,   46,   46,   46,   46,   59,   60,   61,   62,   46,
       63,   46,   64,   65,   66,   67,   22,   22,   22,   68,
       69,   70,   71,   72,   73,   74,   75,   22,   76,   24,
       25,   26,   77,   78,   79,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   80,   47,   80,   80,   80,   48,   49,   50,   51,

       80,   81,   82,   83,   84,   85,   86,   87,   80,   80,
       80,   80,   88,   89,   90,   91,   80,   92,   80,   64,
       65,   66,   67,   22,   22,   22,   93,   94,   95,   96,
       97,   98,   99,  100,  102,  103,  104,  102,  103,  104,
      930,  105,  119,  120,  105,  108,  109,  110,  106,  119,
      120,  106,  111,  108,  109,  110,  114,  115,  927,  112,
      111,  250,  114,  115,  435,  251,  116,  112,  122,  123,
      124,  117,  116,  122,  123,  124,  436,  117,  222,  223,
      224,  259,  265,  266,  125,  260,  261,  291,  291,  125,
      126,  127,  128,  129,  130,  131,  132,  133,  134,  135,

      136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
      146,  147,  148,  149,  131,  150,  131,  131,  131,  151,
      152,  153,  154,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  155,  156,  157,  158,  126,  126,  126,  159,
      160,  161,  162,  163,  164,  165,  166,  167,  168,  169,
      167,  167,  170,  171,  170,  167,  167,  172,  173,  167,
      174,  167,  175,  176,  167,  177,  167,  167,  167,  167,
      167,  170,  167,  170,  170,  170,  167,  167,  167,  167,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,

      170,  170,  170,  170,  170,  170,  170,  170,  170,  167,
      167,  167,  167,  167,  167,  167,  178,  179,  180,  181,
      182,  183,  184,  185,  187,  188,  189,  190,  225,  288,
      288,  288,  191,  192,  290,  290,  290,  193,  225,  227,
      229,  226,  924,  194,  195,  196,  197,  226,  198,  293,
      293,  226,  292,  292,  292,  349,  349,  226,  294,  294,
      294,  230,  231,  232,  233,  234,  235,  236,  237,  239,
      240,  241,  242,  243,  244,  245,  246,  923,  198,  187,
      188,  189,  190,  346,  346,  346,  252,  191,  192,  253,
      351,  351,  193,  254,  255,  256,  265,  266,  194,  195,

      196,  197,  262,  198,  263,  228,  228,  257,  922,  258,
      228,  228,  264,  348,  348,  348,  228,  350,  350,  350,
      355,  228,  264,  264,  250,  356,  228,  357,  251,  270,
      915,  228,  358,  198,  169,  169,  169,  169,  169,  199,
      200,  201,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  201,  169,
      201,  201,  201,  169,  169,  169,  169,  201,  202,  203,
      204,  205,  206,  207,  208,  201,  201,  201,  201,  209,
      210,  211,  212,  201,  213,  201,  169,  169,  169,  169,
      169,  169,  169,  214,  215,  216,  217,  218,  219,  220,

      221,  247,  248,  228,  228,  228,  228,  228,  228,  271,
      361,  438,  247,  439,  228,  362,  228,  914,  228,  291,
      291,  272,  248,  273,  228,  276,  228,  363,  228,  277,
      228,  228,  364,  230,  231,  232,  233,  234,  235,  236,
      237,  228,  228,  228,  913,  274,  440,  275,  228,  228,
      441,  228,  912,  228,  911,  278,  228,  228,  307,  279,
      228,  228,  258,  228,  228,  228,  477,  228,  900,  228,
      281,  228,  228,  228,  282,  228,  899,  280,  228,  228,
      898,  228,  897,  228,  284,  228,  896,  283,  883,  228,
      286,  285,  882,  228,  881,  309,  352,  352,  352,  228,

      296,  223,  224,  308,  308,  298,  319,  320,  321,  322,
      323,  324,  325,  326,  308,  880,  310,  311,  312,  313,
      314,  315,  316,  317,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  330,  372,  879,  308,  878,  308,  373,
      308,  877,  308,  876,  329,  331,  308,  332,  308,  335,
      308,  875,  308,  336,  293,  293,  308,  308,  299,  300,
      301,  302,  303,  304,  305,  306,  307,  308,  308,  308,
      874,  333,  873,  334,  308,  308,  820,  308,  820,  308,
      841,  337,  840,  308,  308,  338,  308,  308,  839,  308,
      308,  308,  327,  328,  308,  308,  340,  308,  308,  308,

      838,  308,  345,  327,  339,  407,  407,  308,  341,  308,
      259,  308,  837,  328,  260,  261,  288,  288,  288,  308,
      836,  342,  308,  308,  310,  311,  312,  313,  314,  315,
      316,  317,  225,  308,  343,  374,  223,  224,  835,  225,
      378,  344,  834,  308,  375,  226,  833,  376,  832,  376,
      831,  226,  226,  377,  228,  228,  409,  409,  226,  290,
      290,  290,  292,  292,  292,  228,  239,  240,  241,  242,
      243,  244,  245,  246,  252,  228,  830,  253,  262,  829,
      263,  379,  255,  256,  294,  294,  294,  826,  264,  404,
      404,  404,  406,  406,  406,  257,  817,  258,  264,  264,

      383,  384,  385,  386,  387,  388,  389,  390,  392,  393,
      394,  395,  396,  397,  398,  399,  401,  416,  402,  408,
      408,  408,  410,  410,  410,  811,  403,  426,  427,  428,
      429,  430,  431,  432,  433,  810,  403,  403,  417,  418,
      419,  420,  421,  422,  423,  424,  417,  418,  419,  420,
      421,  422,  423,  424,  446,  448,  451,  451,  451,  453,
      453,  453,  449,  454,  454,  456,  456,  447,  455,  455,
      455,  457,  457,  457,  222,  223,  224,  225,  459,  460,
      225,  459,  460,  804,  225,  464,  464,  228,  228,  763,
      226,  228,  228,  226,  466,  466,  226,  226,  228,  226,

      471,  471,  228,  226,  228,  228,  228,  762,  228,  463,
      463,  463,  228,  461,  465,  465,  465,  467,  467,  467,
      238,  238,  238,  470,  470,  470,  472,  472,  472,  473,
      473,  474,  474,  474,  228,  228,  228,  228,  525,  525,
      256,  761,  481,  760,  262,  228,  263,  228,  264,  759,
      264,  482,  758,  482,  264,  228,  483,  228,  264,  264,
      264,  264,  228,  228,  264,  264,  228,  228,  228,  228,
      228,  228,  485,  228,  288,  288,  288,  228,  757,  228,
      756,  228,  755,  228,  754,  488,  486,  487,  753,  228,
      752,  228,  228,  228,  751,  228,  228,  750,  228,  228,

      228,  228,  749,  228,  490,  742,  228,  228,  228,  228,
      604,  228,  489,  228,  228,  228,  228,  491,  228,  228,
      604,  228,  734,  493,  492,  228,  228,  228,  228,  228,
      228,  228,  228,  527,  527,  228,  585,  228,  494,  733,
      228,  727,  228,  228,  228,  724,  497,  228,  569,  495,
      496,  567,  228,  307,  228,  531,  498,  228,  228,  228,
      228,  228,  228,  679,  228,  228,  228,  499,  228,  673,
      228,  672,  228,  666,  501,  483,  228,  483,  228,  459,
      228,  639,  228,  500,  535,  535,  228,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  502,  502,  502,  503,

      503,  503,  504,  504,  504,  296,  223,  224,  537,  537,
      298,  506,  507,  508,  509,  510,  511,  512,  513,  515,
      516,  517,  518,  519,  520,  521,  522,  297,  297,  297,
      524,  524,  524,  526,  526,  526,  528,  528,  528,  308,
      308,  308,  308,  308,  534,  534,  534,  536,  536,  536,
      308,  308,  308,  538,  538,  538,  307,  318,  318,  318,
      308,  638,  308,  299,  300,  301,  302,  303,  304,  305,
      306,  637,  308,  532,  541,  541,  541,  542,  542,  543,
      543,  543,  544,  544,  545,  545,  545,  308,  308,  308,
      308,  308,  308,  346,  346,  346,  590,  590,  308,  636,

      308,  547,  308,  346,  346,  346,  592,  592,  308,  635,
      308,  632,  308,  631,  319,  320,  321,  322,  323,  324,
      325,  326,  308,  308,  308,  308,  308,  308,  308,  308,
      346,  346,  346,  308,  630,  308,  629,  308,  628,  308,
      627,  550,  548,  549,  626,  308,  623,  308,  551,  308,
      308,  308,  622,  308,  308,  616,  308,  308,  615,  552,
      609,  308,  597,  597,  308,  308,  308,  308,  608,  308,
      308,  308,  553,  554,  308,  413,  308,  308,  555,  601,
      308,  308,  308,  308,  308,  595,  308,  308,  308,  594,
      308,  588,  308,  556,  308,  308,  308,  381,  308,  380,

      560,  380,  308,  557,  558,  370,  308,  546,  308,  540,
      559,  308,  308,  308,  308,  539,  308,  308,  308,  567,
      568,  561,  308,  533,  308,  308,  308,  531,  308,  529,
      563,  523,  308,  359,  308,  479,  308,  562,  308,  346,
      346,  346,  564,  564,  564,  478,  308,  565,  565,  565,
      566,  566,  566,  569,  570,  254,  374,  223,  224,  225,
      475,  584,  585,  586,  603,  375,  603,  365,  376,  604,
      376,  469,  226,  468,  377,  572,  379,  587,  226,  573,
      382,  382,  382,  599,  599,  574,  462,  575,  383,  384,
      385,  386,  387,  388,  389,  390,  589,  589,  589,  591,

      591,  591,  593,  593,  593,  392,  393,  394,  395,  396,
      397,  398,  399,  391,  391,  391,  596,  596,  596,  598,
      598,  598,  600,  600,  600,  404,  404,  404,  576,  577,
      578,  579,  580,  581,  582,  583,  400,  223,  602,  401,
      458,  402,  611,  611,  403,  452,  403,  613,  613,  403,
      404,  404,  404,  450,  403,  403,  403,  403,  445,  403,
      403,  404,  404,  404,  404,  404,  404,  605,  605,  605,
      606,  606,  606,  607,  607,  607,  415,  415,  415,  610,
      610,  610,  612,  612,  612,  614,  614,  614,  426,  427,
      428,  429,  430,  431,  432,  433,  425,  425,  425,  617,

      617,  617,  618,  618,  619,  619,  619,  620,  620,  621,
      621,  621,  624,  625,  633,  634,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  640,  640,
      640,  641,  641,  641,  642,  642,  642,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  668,  668,  643,  644,  644,  644,  228,  645,
      645,  645,  646,  646,  646,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  647,  647,  647,
      648,  648,  648,  649,  649,  649,  481,  228,  228,  228,
      228,  228,  228,  650,  264,  228,  228,  444,  228,  651,

      228,  443,  228,  652,  264,  264,  228,  442,  228,  437,
      228,  434,  653,  228,  228,  414,  228,  228,  228,  228,
      228,  228,  228,  654,  228,  413,  228,  228,  655,  656,
      228,  819,  228,  819,  228,  657,  820,  228,  228,  411,
      228,  307,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  405,  658,  228,  400,  228,  228,  228,  228,
      661,  228,  228,  228,  228,  307,  228,  659,  228,  228,
      660,  228,  381,  228,  228,  228,  228,  228,  662,  663,
      665,  665,  665,  228,  295,  228,  289,  228,  665,  665,
      665,  664,  665,  665,  665,  228,  266,  228,  287,  506,

      507,  508,  509,  510,  511,  512,  513,  505,  505,  505,
      667,  667,  667,  669,  669,  669,  670,  670,  671,  671,
      671,  675,  675,  515,  516,  517,  518,  519,  520,  521,
      522,  514,  514,  514,  674,  674,  674,  676,  676,  676,
      677,  677,  678,  678,  678,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  680,  680,  680,
      681,  681,  681,  682,  682,  682,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  729,  729,  683,  684,  684,  684,  308,  685,  685,
      685,  686,  686,  686,  318,  318,  318,  318,  318,  318,

      318,  318,  318,  318,  318,  318,  687,  687,  687,  688,
      688,  688,  689,  689,  689,  308,  308,  308,  308,  731,
      731,  690,  308,  308,  308,  308,  308,  691,  308,  269,
      692,  308,  308,  308,  266,  308,  308,  268,  308,  308,
      308,  694,  308,  308,  267,  693,  308,  308,  308,  308,
      695,  380,  308,  308,  308,  249,  696,  308,  371,  308,
      308,  370,  697,  369,  308,  308,  308,  308,  368,  308,
      308,  308,  308,  308,  308,  698,  308,  308,  308,  308,
      308,  308,  367,  308,  308,  308,  308,  701,  308,  366,
      308,  308,  699,  308,  700,  308,  308,  308,  308,  365,

      702,  703,  360,  308,  308,  308,  359,  308,  705,  705,
      705,  705,  705,  705,  308,  806,  806,  308,  704,  705,
      705,  705,  808,  808,  308,  707,  708,  709,  710,  711,
      712,  713,  714,  716,  717,  718,  719,  720,  721,  722,
      723,  572,  725,  354,  575,  573,  571,  571,  571,  813,
      813,  574,  726,  575,  728,  728,  728,  730,  730,  730,
      815,  815,  726,  726,  732,  732,  732,  584,  585,  586,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  353,  587,  735,  735,  735,  736,  736,  736,
      737,  737,  737,  347,  576,  577,  578,  579,  580,  581,

      582,  583,  391,  391,  391,  391,  391,  391,  391,  391,
      391,  391,  391,  391,  738,  738,  738,  739,  739,  739,
      740,  740,  740,  602,  741,  741,  741,  741,  741,  741,
      295,  403,  741,  741,  741,  415,  415,  415,  415,  415,
      415,  403,  403,  415,  415,  415,  415,  415,  415,  743,
      743,  743,  744,  744,  744,  745,  745,  745,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      746,  746,  746,  747,  747,  747,  748,  748,  748,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  228,  228,
      766,  766,  766,  766,  766,  766,  765,  289,  266,  228,

      766,  766,  766,  767,  767,  767,  767,  767,  767,  228,
      767,  767,  767,  228,  228,  228,  228,  228,  228,  228,
      228,  287,  228,  228,  228,  269,  228,  768,  228,  769,
      228,  266,  770,  228,  228,  771,  228,  268,  228,  267,
      228,  228,  228,  228,  228,  228,  228,  228,  249,  228,
      228,  931,  228,  228,  228,  228,  774,  228,  931,  931,
      228,  931,  228,  772,  228,  773,  931,  228,  775,  776,
      228,  228,  228,  931,  228,  228,  228,  228,  228,  931,
      228,  228,  228,  778,  931,  779,  228,  931,  228,  931,
      777,  228,  228,  228,  228,  931,  228,  931,  228,  228,

      228,  228,  931,  780,  228,  505,  505,  505,  931,  931,
      228,  505,  505,  505,  228,  505,  505,  505,  931,  931,
      228,  505,  505,  505,  781,  781,  781,  782,  782,  782,
      783,  783,  783,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  514,  514,  514,  784,  784,  784,  785,  785,
      785,  786,  786,  786,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  308,  308,  789,  789,  789,  789,  789,
      789,  788,  931,  931,  308,  789,  789,  789,  790,  790,
      790,  790,  790,  790,  308,  790,  790,  790,  308,  308,
      308,  308,  308,  308,  308,  308,  931,  308,  308,  308,

      931,  308,  791,  308,  792,  308,  931,  793,  308,  308,
      794,  308,  931,  308,  931,  308,  308,  308,  308,  308,
      308,  308,  308,  931,  308,  308,  931,  308,  308,  308,
      308,  797,  308,  931,  931,  308,  931,  308,  795,  308,
      796,  931,  308,  798,  799,  308,  308,  308,  931,  308,
      308,  308,  308,  308,  931,  308,  308,  308,  801,  931,
      802,  308,  931,  308,  931,  800,  308,  308,  308,  308,
      931,  308,  931,  308,  308,  308,  308,  931,  803,  308,
      706,  706,  706,  931,  931,  308,  805,  805,  805,  308,
      807,  807,  807,  931,  931,  308,  707,  708,  709,  710,

      711,  712,  713,  714,  809,  809,  809,  716,  717,  718,
      719,  720,  721,  722,  723,  715,  715,  715,  812,  812,
      812,  814,  814,  814,  816,  816,  816,  724,  931,  818,
      571,  571,  571,  931,  931,  726,  931,  726,  571,  571,
      571,  571,  571,  571,  931,  726,  726,  726,  726,  571,
      571,  571,  821,  821,  821,  822,  822,  822,  823,  823,
      823,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  828,  828,
      828,  828,  828,  828,  828,  828,  828,  228,  228,  228,

      228,  228,  228,  228,  228,  931,  228,  228,  228,  931,
      228,  931,  228,  931,  228,  228,  228,  228,  842,  931,
      228,  931,  228,  843,  228,  931,  844,  228,  228,  228,
      228,  228,  931,  228,  228,  931,  228,  228,  228,  228,
      931,  228,  931,  846,  228,  845,  228,  228,  228,  228,
      847,  228,  228,  228,  228,  931,  849,  228,  228,  931,
      848,  228,  228,  228,  228,  228,  931,  228,  931,  850,
      228,  228,  228,  228,  931,  228,  852,  853,  853,  853,
      931,  228,  851,  931,  931,  228,  853,  853,  853,  931,
      931,  228,  853,  853,  853,  854,  854,  854,  854,  854,

      854,  854,  854,  854,  308,  308,  308,  308,  308,  308,
      308,  308,  931,  308,  308,  308,  931,  308,  931,  308,
      931,  308,  308,  308,  308,  855,  931,  308,  931,  308,
      856,  308,  931,  857,  308,  308,  308,  308,  308,  931,
      308,  308,  931,  308,  308,  308,  308,  931,  308,  931,
      859,  308,  858,  308,  308,  308,  308,  860,  308,  308,
      308,  308,  931,  862,  308,  308,  931,  861,  308,  308,
      308,  308,  308,  931,  308,  931,  863,  308,  308,  308,
      308,  931,  308,  865,  706,  706,  706,  931,  308,  864,
      931,  931,  308,  706,  706,  706,  931,  931,  308,  706,

      706,  706,  706,  706,  706,  866,  866,  866,  867,  867,
      867,  868,  868,  868,  715,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  869,  869,  869,  870,
      870,  870,  871,  871,  871,  818,  872,  872,  872,  872,
      872,  872,  931,  726,  872,  872,  872,  228,  228,  931,
      228,  228,  931,  726,  726,  228,  228,  931,  228,  931,
      884,  228,  228,  228,  228,  228,  228,  931,  228,  931,
      886,  228,  885,  228,  931,  228,  228,  228,  228,  228,
      228,  931,  887,  228,  931,  228,  228,  228,  228,  931,
      228,  931,  888,  228,  228,  228,  228,  228,  228,  931,

      228,  228,  228,  931,  228,  931,  228,  228,  308,  308,
      931,  931,  228,  931,  228,  931,  228,  308,  308,  308,
      931,  889,  228,  308,  308,  308,  308,  931,  308,  308,
      308,  308,  931,  891,  308,  931,  308,  931,  308,  890,
      931,  308,  308,  308,  308,  931,  308,  931,  892,  308,
      308,  308,  931,  308,  308,  308,  308,  308,  308,  308,
      308,  931,  893,  308,  931,  308,  931,  308,  931,  308,
      308,  308,  308,  931,  931,  308,  931,  308,  931,  308,
      931,  931,  308,  894,  894,  894,  894,  894,  894,  894,
      894,  894,  308,  895,  895,  895,  895,  895,  895,  895,

      895,  895,  228,  228,  228,  228,  228,  228,  931,  931,
      931,  228,  228,  228,  902,  228,  931,  228,  228,  228,
      901,  931,  228,  228,  931,  228,  931,  903,  904,  228,
      308,  308,  228,  308,  308,  308,  308,  931,  905,  228,
      931,  308,  931,  907,  308,  931,  308,  931,  906,  308,
      308,  308,  308,  308,  308,  931,  908,  228,  228,  931,
      308,  931,  931,  308,  228,  228,  909,  931,  228,  931,
      308,  931,  910,  308,  916,  228,  228,  228,  228,  228,
      228,  228,  228,  931,  931,  228,  931,  228,  931,  917,
      228,  918,  228,  308,  308,  308,  308,  228,  308,  308,

      228,  931,  228,  931,  308,  931,  308,  308,  308,  308,
      919,  920,  308,  308,  308,  931,  308,  931,  308,  308,
      228,  228,  921,  308,  228,  228,  228,  228,  308,  308,
      308,  228,  931,  308,  931,  228,  931,  228,  308,  308,
      308,  228,  925,  308,  308,  228,  931,  228,  931,  308,
      308,  228,  228,  931,  308,  931,  926,  931,  931,  308,
      308,  308,  228,  931,  308,  228,  228,  931,  928,  308,
      308,  308,  228,  931,  931,  931,  228,  929,  931,  931,
      308,  308,  931,  931,  931,  931,  228,  931,  931,  931,
      308,  101,  101,  101,  101,  101,  101,  101,  101,  101,

      101,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  228,  931,  931,  931,  228,  238,  931,  931,  931,
      238,  297,  297,  931,  297,  297,  308,  931,  931,  308,
      931,  931,  931,  308,  318,  931,  931,  931,  318,  382,
      931,  931,  931,  382,  391,  931,  931,  931,  391,  412,
      931,  931,  931,  412,  412,  412,  412,  412,  412,  415,

      931,  931,  931,  415,  425,  931,  931,  931,  425,  476,
      476,  476,  476,  476,  476,  476,  476,  931,  476,  480,
      480,  480,  480,  480,  480,  480,  480,  931,  480,  484,
      484,  484,  484,  484,  484,  484,  484,  931,  484,  505,
      931,  931,  505,  931,  931,  931,  505,  514,  931,  931,
      931,  514,  530,  530,  530,  530,  530,  530,  931,  530,
      530,  571,  571,  571,  571,  571,  706,  931,  931,  931,
      706,  715,  931,  931,  931,  715,   21,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,

      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931
    } ;

static yyconst flex_int16_t yy_chk[3345] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    3,    3,    3,    4,    4,    4,
      927,    3,    9,    9,    4,    5,    5,    5,    3,   10,
       10,    4,    5,    6,    6,    6,    7,    7,  923,    5,
        6,   34,    8,    8,  203,   34,    7,    6,   11,   11,
       11,    7,    8,   12,   12,   12,  203,    8,   23,   23,
       23,   39,   43,   43,   11,   39,   39,   71,   71,   12,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   17,   17,   17,   17,   24,   68,
       68,   68,   17,   17,   70,   70,   70,   17,   25,   25,
       27,   24,  915,   17,   17,   17,   17,   24,   17,   73,
       73,   25,   72,   72,   72,   96,   96,   25,   74,   74,
       74,   27,   27,   27,   27,   27,   27,   27,   27,   28,
       28,   28,   28,   28,   28,   28,   28,  913,   17,   18,
       18,   18,   18,   93,   93,   93,   38,   18,   18,   38,
       98,   98,   18,   38,   38,   38,  147,  147,   18,   18,

       18,   18,   40,   18,   40,   46,   46,   38,  911,   38,
       52,   52,   40,   95,   95,   95,   46,   97,   97,   97,
      104,   52,   40,   40,  138,  104,   46,  105,  138,   52,
      900,   52,  105,   18,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   29,   29,   53,   53,   54,   54,   56,   56,   53,
      110,  205,   29,  205,   53,  110,   54,  899,   56,  162,
      162,   53,   29,   54,   53,   56,   54,  111,   56,   56,
       55,   55,  111,   29,   29,   29,   29,   29,   29,   29,
       29,   55,   57,   57,  898,   55,  206,   55,   58,   58,
      206,   55,  897,   57,  896,   57,   59,   59,   77,   58,
       60,   60,  253,   57,   61,   61,  253,   59,  879,   58,
       60,   60,   62,   62,   61,   61,  877,   59,   63,   63,
      876,   60,  874,   62,   62,   61,  873,   61,  840,   63,
       63,   62,  839,   62,  838,   77,   99,   99,   99,   63,

       76,   76,   76,   80,   80,   76,   78,   78,   78,   78,
       78,   78,   78,   78,   80,  837,   77,   77,   77,   77,
       77,   77,   77,   77,   80,   81,   81,   82,   82,   83,
       83,   85,   85,   82,  125,  836,   81,  835,   82,  125,
       83,  834,   85,  833,   81,   82,   81,   83,   82,   85,
       83,  832,   85,   85,  164,  164,   84,   84,   76,   76,
       76,   76,   76,   76,   76,   76,   79,   84,   86,   86,
      831,   84,  826,   84,   87,   87,  820,   84,  819,   86,
      763,   86,  761,   88,   88,   87,   89,   89,  760,   86,
       92,   92,   79,   79,   88,   87,   89,   89,   90,   90,

      759,   92,   92,   79,   88,  181,  181,   89,   90,   90,
      143,   92,  758,   79,  143,  143,  159,  159,  159,   90,
      757,   90,   91,   91,   79,   79,   79,   79,   79,   79,
       79,   79,  128,   91,   91,  127,  127,  127,  756,  129,
      129,   91,  755,   91,  127,  128,  754,  127,  753,  127,
      752,  128,  129,  127,  131,  131,  183,  183,  129,  161,
      161,  161,  163,  163,  163,  131,  132,  132,  132,  132,
      132,  132,  132,  132,  142,  131,  751,  142,  144,  749,
      144,  142,  142,  142,  165,  165,  165,  742,  144,  178,
      178,  178,  180,  180,  180,  142,  723,  142,  144,  144,

      170,  170,  170,  170,  170,  170,  170,  170,  171,  171,
      171,  171,  171,  171,  171,  171,  177,  199,  177,  182,
      182,  182,  184,  184,  184,  717,  177,  200,  200,  200,
      200,  200,  200,  200,  200,  714,  177,  177,  199,  199,
      199,  199,  199,  199,  199,  199,  201,  201,  201,  201,
      201,  201,  201,  201,  211,  212,  214,  214,  214,  216,
      216,  216,  212,  217,  217,  219,  219,  211,  218,  218,
      218,  220,  220,  220,  222,  222,  222,  225,  225,  225,
      226,  226,  226,  708,  227,  233,  233,  228,  228,  639,
      225,  229,  229,  226,  235,  235,  225,  227,  228,  226,

      242,  242,  229,  227,  230,  230,  230,  637,  228,  232,
      232,  232,  229,  229,  234,  234,  234,  236,  236,  236,
      239,  239,  239,  241,  241,  241,  243,  243,  243,  244,
      244,  245,  245,  245,  247,  247,  248,  248,  302,  302,
      256,  636,  262,  635,  263,  247,  263,  248,  256,  634,
      262,  264,  633,  264,  263,  247,  264,  248,  256,  256,
      262,  262,  270,  270,  263,  263,  271,  271,  272,  272,
      273,  273,  270,  270,  289,  289,  289,  271,  632,  272,
      631,  273,  630,  270,  628,  272,  271,  271,  627,  272,
      626,  273,  274,  274,  625,  275,  275,  624,  276,  276,

      279,  279,  623,  274,  275,  608,  275,  277,  277,  276,
      604,  279,  274,  274,  278,  278,  275,  276,  277,  276,
      603,  279,  587,  278,  277,  278,  280,  280,  277,  281,
      281,  282,  282,  304,  304,  278,  586,  280,  280,  583,
      281,  577,  282,  283,  283,  574,  282,  280,  570,  281,
      281,  568,  282,  297,  283,  531,  283,  284,  284,  285,
      285,  286,  286,  522,  283,  288,  288,  284,  284,  516,
      285,  513,  286,  507,  286,  483,  288,  482,  284,  460,
      285,  450,  286,  285,  313,  313,  288,  290,  290,  290,
      291,  291,  291,  292,  292,  292,  293,  293,  293,  294,

      294,  294,  295,  295,  295,  296,  296,  296,  315,  315,
      296,  297,  297,  297,  297,  297,  297,  297,  297,  298,
      298,  298,  298,  298,  298,  298,  298,  299,  299,  299,
      301,  301,  301,  303,  303,  303,  305,  305,  305,  308,
      308,  310,  310,  310,  312,  312,  312,  314,  314,  314,
      308,  309,  309,  316,  316,  316,  318,  319,  319,  319,
      308,  449,  309,  296,  296,  296,  296,  296,  296,  296,
      296,  448,  309,  309,  321,  321,  321,  322,  322,  323,
      323,  323,  324,  324,  325,  325,  325,  327,  327,  328,
      328,  329,  329,  347,  347,  347,  386,  386,  327,  447,

      328,  329,  329,  348,  348,  348,  388,  388,  327,  446,
      328,  444,  329,  442,  318,  318,  318,  318,  318,  318,
      318,  318,  330,  330,  331,  331,  332,  332,  333,  333,
      349,  349,  349,  330,  441,  331,  440,  332,  439,  333,
      438,  331,  330,  330,  436,  331,  434,  332,  333,  333,
      334,  334,  433,  335,  335,  427,  336,  336,  424,  334,
      418,  334,  395,  395,  335,  338,  338,  336,  416,  337,
      337,  334,  335,  336,  335,  413,  338,  336,  337,  399,
      337,  339,  339,  340,  340,  393,  338,  342,  342,  390,
      337,  384,  339,  339,  340,  341,  341,  381,  342,  380,

      342,  377,  339,  340,  340,  370,  341,  326,  342,  320,
      341,  343,  343,  344,  344,  317,  341,  345,  345,  359,
      359,  343,  343,  311,  344,  346,  346,  307,  345,  306,
      345,  300,  343,  359,  344,  257,  346,  344,  345,  350,
      350,  350,  351,  351,  351,  255,  346,  352,  352,  352,
      353,  353,  353,  365,  365,  254,  374,  374,  374,  378,
      246,  379,  379,  379,  403,  374,  403,  365,  374,  403,
      374,  240,  378,  237,  374,  376,  379,  379,  378,  376,
      383,  383,  383,  397,  397,  376,  231,  376,  382,  382,
      382,  382,  382,  382,  382,  382,  385,  385,  385,  387,

      387,  387,  389,  389,  389,  391,  391,  391,  391,  391,
      391,  391,  391,  392,  392,  392,  394,  394,  394,  396,
      396,  396,  398,  398,  398,  405,  405,  405,  376,  376,
      376,  376,  376,  376,  376,  376,  400,  224,  401,  402,
      221,  402,  420,  420,  400,  215,  401,  422,  422,  402,
      406,  406,  406,  213,  400,  400,  401,  401,  210,  402,
      402,  407,  407,  407,  408,  408,  408,  409,  409,  409,
      410,  410,  410,  411,  411,  411,  417,  417,  417,  419,
      419,  419,  421,  421,  421,  423,  423,  423,  425,  425,
      425,  425,  425,  425,  425,  425,  426,  426,  426,  428,

      428,  428,  429,  429,  430,  430,  430,  431,  431,  432,
      432,  432,  435,  435,  445,  445,  452,  452,  452,  453,
      453,  453,  454,  454,  454,  455,  455,  455,  456,  456,
      456,  457,  457,  457,  458,  458,  458,  461,  461,  462,
      462,  462,  463,  463,  463,  464,  464,  464,  461,  465,
      465,  465,  509,  509,  461,  466,  466,  466,  461,  467,
      467,  467,  468,  468,  468,  469,  469,  469,  470,  470,
      470,  471,  471,  471,  472,  472,  472,  473,  473,  473,
      474,  474,  474,  475,  475,  475,  481,  485,  485,  486,
      486,  488,  488,  485,  481,  487,  487,  209,  485,  486,

      486,  208,  488,  487,  481,  481,  487,  207,  485,  204,
      486,  202,  488,  489,  489,  189,  487,  490,  490,  491,
      491,  492,  492,  489,  489,  187,  493,  493,  490,  492,
      491,  726,  492,  726,  489,  493,  726,  493,  490,  185,
      491,  505,  492,  494,  494,  495,  495,  493,  496,  496,
      497,  497,  179,  494,  494,  176,  495,  498,  498,  496,
      497,  497,  499,  499,  494,  514,  495,  495,  498,  496,
      496,  497,  168,  499,  500,  500,  501,  501,  498,  499,
      502,  502,  502,  499,  166,  500,  160,  501,  503,  503,
      503,  501,  504,  504,  504,  500,  158,  501,  156,  505,

      505,  505,  505,  505,  505,  505,  505,  506,  506,  506,
      508,  508,  508,  510,  510,  510,  511,  511,  512,  512,
      512,  518,  518,  514,  514,  514,  514,  514,  514,  514,
      514,  515,  515,  515,  517,  517,  517,  519,  519,  519,
      520,  520,  521,  521,  521,  523,  523,  523,  524,  524,
      524,  525,  525,  525,  526,  526,  526,  527,  527,  527,
      528,  528,  528,  529,  529,  529,  532,  532,  533,  533,
      533,  534,  534,  534,  535,  535,  535,  532,  536,  536,
      536,  579,  579,  532,  537,  537,  537,  532,  538,  538,
      538,  539,  539,  539,  540,  540,  540,  541,  541,  541,

      542,  542,  542,  543,  543,  543,  544,  544,  544,  545,
      545,  545,  546,  546,  546,  547,  547,  548,  548,  581,
      581,  547,  549,  549,  550,  550,  547,  548,  548,  152,
      549,  551,  551,  549,  150,  550,  547,  149,  548,  552,
      552,  551,  551,  549,  148,  550,  553,  553,  554,  554,
      552,  145,  551,  555,  555,  134,  554,  553,  124,  554,
      552,  122,  555,  120,  555,  556,  556,  553,  117,  554,
      557,  557,  558,  558,  555,  556,  556,  559,  559,  560,
      560,  557,  116,  558,  561,  561,  556,  559,  559,  115,
      560,  557,  557,  558,  558,  561,  562,  562,  559,  112,

      560,  561,  109,  563,  563,  561,  106,  562,  564,  564,
      564,  565,  565,  565,  563,  710,  710,  562,  563,  566,
      566,  566,  712,  712,  563,  571,  571,  571,  571,  571,
      571,  571,  571,  572,  572,  572,  572,  572,  572,  572,
      572,  573,  575,  103,  575,  573,  576,  576,  576,  719,
      719,  573,  575,  573,  578,  578,  578,  580,  580,  580,
      721,  721,  575,  575,  582,  582,  582,  584,  584,  584,
      588,  588,  588,  589,  589,  589,  590,  590,  590,  591,
      591,  591,  100,  584,  592,  592,  592,  593,  593,  593,
      594,  594,  594,   94,  573,  573,  573,  573,  573,  573,

      573,  573,  595,  595,  595,  596,  596,  596,  597,  597,
      597,  598,  598,  598,  599,  599,  599,  600,  600,  600,
      601,  601,  601,  602,  605,  605,  605,  606,  606,  606,
       75,  602,  607,  607,  607,  609,  609,  609,  610,  610,
      610,  602,  602,  611,  611,  611,  612,  612,  612,  613,
      613,  613,  614,  614,  614,  615,  615,  615,  616,  616,
      616,  617,  617,  617,  618,  618,  618,  619,  619,  619,
      620,  620,  620,  621,  621,  621,  622,  622,  622,  640,
      640,  640,  641,  641,  641,  642,  642,  642,  643,  643,
      644,  644,  644,  645,  645,  645,  643,   69,   67,  643,

      646,  646,  646,  647,  647,  647,  648,  648,  648,  643,
      649,  649,  649,  650,  650,  651,  651,  652,  652,  653,
      653,   65,  654,  654,  650,   49,  651,  650,  652,  652,
      653,   47,  653,  654,  650,  654,  651,   45,  652,   44,
      653,  655,  655,  654,  656,  656,  657,  657,   30,  658,
      658,   21,  655,  659,  659,  656,  657,  657,    0,    0,
      658,    0,  655,  655,  659,  656,    0,  657,  658,  659,
      658,  660,  660,    0,  659,  661,  661,  662,  662,    0,
      663,  663,  660,  661,    0,  662,  661,    0,  662,    0,
      660,  663,  660,  664,  664,    0,  661,    0,  662,  665,

      665,  663,    0,  664,  664,  666,  666,  666,    0,    0,
      665,  667,  667,  667,  664,  668,  668,  668,    0,    0,
      665,  669,  669,  669,  670,  670,  670,  671,  671,  671,
      672,  672,  672,  673,  673,  673,  674,  674,  674,  675,
      675,  675,  676,  676,  676,  677,  677,  677,  678,  678,
      678,  679,  679,  679,  680,  680,  680,  681,  681,  681,
      682,  682,  682,  683,  683,  684,  684,  684,  685,  685,
      685,  683,    0,    0,  683,  686,  686,  686,  687,  687,
      687,  688,  688,  688,  683,  689,  689,  689,  690,  690,
      691,  691,  692,  692,  693,  693,    0,  694,  694,  690,

        0,  691,  690,  692,  692,  693,    0,  693,  694,  690,
      694,  691,    0,  692,    0,  693,  695,  695,  694,  696,
      696,  697,  697,    0,  698,  698,    0,  695,  699,  699,
      696,  697,  697,    0,    0,  698,    0,  695,  695,  699,
      696,    0,  697,  698,  699,  698,  700,  700,    0,  699,
      701,  701,  702,  702,    0,  703,  703,  700,  701,    0,
      702,  701,    0,  702,    0,  700,  703,  700,  704,  704,
        0,  701,    0,  702,  705,  705,  703,    0,  704,  704,
      707,  707,  707,    0,    0,  705,  709,  709,  709,  704,
      711,  711,  711,    0,    0,  705,  706,  706,  706,  706,

      706,  706,  706,  706,  713,  713,  713,  715,  715,  715,
      715,  715,  715,  715,  715,  716,  716,  716,  718,  718,
      718,  720,  720,  720,  722,  722,  722,  724,    0,  725,
      727,  727,  727,    0,    0,  724,    0,  725,  728,  728,
      728,  729,  729,  729,    0,  724,  724,  725,  725,  730,
      730,  730,  731,  731,  731,  732,  732,  732,  733,  733,
      733,  735,  735,  735,  736,  736,  736,  737,  737,  737,
      738,  738,  738,  739,  739,  739,  740,  740,  740,  743,
      743,  743,  744,  744,  744,  745,  745,  745,  746,  746,
      746,  747,  747,  747,  748,  748,  748,  765,  765,  766,

      766,  768,  768,  769,  769,    0,  770,  770,  765,    0,
      766,    0,  768,    0,  769,  771,  771,  770,  765,    0,
      766,    0,  768,  770,  769,    0,  771,  770,  772,  772,
      773,  773,    0,  774,  774,    0,  771,  775,  775,  772,
        0,  773,    0,  773,  774,  772,  776,  776,  775,  772,
      774,  773,  777,  777,  774,    0,  776,  776,  775,    0,
      775,  778,  778,  777,  779,  779,    0,  776,    0,  777,
      780,  780,  778,  777,    0,  779,  779,  781,  781,  781,
        0,  780,  778,    0,    0,  779,  782,  782,  782,    0,
        0,  780,  783,  783,  783,  784,  784,  784,  785,  785,

      785,  786,  786,  786,  788,  788,  789,  789,  791,  791,
      792,  792,    0,  793,  793,  788,    0,  789,    0,  791,
        0,  792,  794,  794,  793,  788,    0,  789,    0,  791,
      793,  792,    0,  794,  793,  795,  795,  796,  796,    0,
      797,  797,    0,  794,  798,  798,  795,    0,  796,    0,
      796,  797,  795,  799,  799,  798,  795,  797,  796,  800,
      800,  797,    0,  799,  799,  798,    0,  798,  801,  801,
      800,  802,  802,    0,  799,    0,  800,  803,  803,  801,
      800,    0,  802,  802,  804,  804,  804,    0,  803,  801,
        0,    0,  802,  805,  805,  805,    0,    0,  803,  806,

      806,  806,  807,  807,  807,  808,  808,  808,  809,  809,
      809,  810,  810,  810,  811,  811,  811,  812,  812,  812,
      813,  813,  813,  814,  814,  814,  815,  815,  815,  816,
      816,  816,  817,  817,  817,  818,  821,  821,  821,  822,
      822,  822,    0,  818,  823,  823,  823,  842,  842,    0,
      843,  843,    0,  818,  818,  844,  844,    0,  842,    0,
      842,  843,  845,  845,  846,  846,  844,    0,  842,    0,
      845,  843,  843,  845,    0,  846,  844,  847,  847,  848,
      848,    0,  846,  845,    0,  846,  849,  849,  847,    0,
      848,    0,  848,  850,  850,  851,  851,  849,  847,    0,

      848,  852,  852,    0,  850,    0,  851,  849,  855,  855,
        0,    0,  852,    0,  850,    0,  851,  856,  856,  855,
        0,  855,  852,  857,  857,  858,  858,    0,  856,  855,
      859,  859,    0,  858,  857,    0,  858,    0,  856,  856,
        0,  859,  860,  860,  857,    0,  858,    0,  859,  861,
      861,  859,    0,  860,  862,  862,  863,  863,  864,  864,
      861,    0,  861,  860,    0,  862,    0,  863,    0,  864,
      861,  865,  865,    0,    0,  862,    0,  863,    0,  864,
        0,    0,  865,  866,  866,  866,  867,  867,  867,  868,
      868,  868,  865,  869,  869,  869,  870,  870,  870,  871,

      871,  871,  884,  884,  885,  885,  886,  886,    0,    0,
        0,  887,  887,  884,  885,  885,    0,  886,  888,  888,
      884,    0,  887,  884,    0,  885,    0,  886,  887,  888,
      889,  889,  887,  890,  890,  891,  891,    0,  888,  888,
        0,  889,    0,  890,  890,    0,  891,    0,  889,  892,
      892,  889,  893,  893,  890,    0,  891,  901,  901,    0,
      892,    0,    0,  893,  902,  902,  892,    0,  901,    0,
      892,    0,  893,  893,  901,  902,  903,  903,  901,  904,
      904,  905,  905,    0,    0,  902,    0,  903,    0,  903,
      904,  905,  905,  906,  906,  907,  907,  903,  908,  908,

      904,    0,  905,    0,  906,    0,  907,  909,  909,  908,
      906,  908,  910,  910,  906,    0,  907,    0,  909,  908,
      916,  916,  910,  910,  917,  917,  918,  918,  909,  919,
      919,  916,    0,  910,    0,  917,    0,  918,  920,  920,
      919,  916,  917,  921,  921,  917,    0,  918,    0,  920,
      919,  925,  925,    0,  921,    0,  920,    0,    0,  920,
      926,  926,  925,    0,  921,  928,  928,    0,  925,  929,
      929,  926,  925,    0,    0,    0,  928,  926,    0,    0,
      929,  926,    0,    0,    0,    0,  928,    0,    0,    0,
      929,  932,  932,  932,  932,  932,  932,  932,  932,  932,

      932,  933,  933,  933,  933,  933,  933,  933,  933,  933,
      933,  934,  934,  934,  934,  934,  934,  934,  934,  934,
      934,  935,  935,  935,  935,  935,  935,  935,  935,  935,
      935,  936,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  937,  937,  937,  937,  937,  937,  937,  937,  937,
      937,  938,    0,    0,    0,  938,  939,    0,    0,    0,
      939,  940,  940,    0,  940,  940,  941,    0,    0,  941,
        0,    0,    0,  941,  942,    0,    0,    0,  942,  943,
        0,    0,    0,  943,  944,    0,    0,    0,  944,  945,
        0,    0,    0,  945,  945,  945,  945,  945,  945,  946,

        0,    0,    0,  946,  947,    0,    0,    0,  947,  948,
      948,  948,  948,  948,  948,  948,  948,    0,  948,  949,
      949,  949,  949,  949,  949,  949,  949,    0,  949,  950,
      950,  950,  950,  950,  950,  950,  950,    0,  950,  951,
        0,    0,  951,    0,    0,    0,  951,  952,    0,    0,
        0,  952,  953,  953,  953,  953,  953,  953,    0,  953,
      953,  954,  954,  954,  954,  954,  955,    0,    0,    0,
      955,  956,    0,    0,    0,  956,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,

      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931,  931,  931,  931,  931,  931,  931,
      931,  931,  931,  931
    } ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
/*
 *  Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 *  Copyright (C) 2008-2012 - Scilab Enterprises - Bruno JOFRET
 *
 *  This file must be used under the terms of the CeCILL.
 *  This source file is licensed as described in the file COPYING, which
 *  you should have received as part of this distribution.  The terms
 *  are also available at
 *  http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
 *
 */
#include "isatty.hxx"
#include "parse.hxx"
#include "parser_private.hxx"

#include "context.hxx"

extern "C"
{
#include "charEncoding.h"
#include "sci_malloc.h"
}

static int matrix_level = 0;
static int comment_level = 0;
static int last_token = 0;
static int exit_status = PARSE_ERROR;
static std::string current_file;
static std::string program_name;

static std::string *pstBuffer;

static bool rejected = false;

#define YY_USER_ACTION                          \
 yylloc.last_column += yyleng;

/* -*- Verbose Special Debug -*- */
//#define DEV
//#define TOKENDEV

#ifdef DEV
#define DEBUG(x) std::cout << "[DEBUG] " << x << std::endl;
#else
#define DEBUG(x) /* Nothing */
#endif

#define INITIAL 0
#define SIMPLESTRING 1
#define DOUBLESTRING 2
#define REGIONCOMMENT 3
#define LINECOMMENT 4
#define LINEBREAK 5
#define MATRIX 6
#define MATRIXMINUSID 7
#define SHELLMODE 8
#define BEGINID 9

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 932 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3277 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinIf);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(IF);
}
	YY_BREAK
case 2:
YY_RULE_SETUP
{
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(THEN);
}
	YY_BREAK
case 3:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        // Pop to step out IF
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinElse);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(ELSE);
}
	YY_BREAK
case 4:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinElseIf);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(ELSEIF);
}
	YY_BREAK
case 5:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(END);
}
	YY_BREAK
case 6:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinSelect);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(SELECT);
}
	YY_BREAK
case 7:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinSwitch);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(SWITCH);
}
	YY_BREAK
case 8:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinOtherwise);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(OTHERWISE);
}
	YY_BREAK
case 9:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinCase);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(CASE);
}
	YY_BREAK
case 10:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinFunction);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(FUNCTION);
}
	YY_BREAK
case 11:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(ENDFUNCTION);
}
	YY_BREAK
case 12:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinFunction);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(HIDDENFUNCTION);
}
	YY_BREAK
case 13:
YY_RULE_SETUP
{
    DEBUG("BEGIN(INITIAL)");
 	BEGIN(INITIAL);
    return scan_throw(HIDDEN);
}
	YY_BREAK
case 14:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinFor);
    }
    BEGIN(INITIAL);
    return scan_throw(FOR);
}
	YY_BREAK
case 15:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinWhile);
    }
	BEGIN(INITIAL);
	return scan_throw(WHILE);
}
	YY_BREAK
case 16:
YY_RULE_SETUP
{
	BEGIN(INITIAL);
    return scan_throw(DO);
}
	YY_BREAK
case 17:
YY_RULE_SETUP
{
    	BEGIN(INITIAL);
        return scan_throw(BREAK);
}
	YY_BREAK
case 18:
YY_RULE_SETUP
{
    	BEGIN(INITIAL);
        return scan_throw(CONTINUE);
}
	YY_BREAK
case 19:
YY_RULE_SETUP
{
	ParserSingleInstance::pushControlStatus(Parser::WithinTry);
	BEGIN(INITIAL);
	return scan_throw(TRY);
}
	YY_BREAK
case 20:
YY_RULE_SETUP
{
    // Pop to step out TRY
	ParserSingleInstance::popControlStatus();
	ParserSingleInstance::pushControlStatus(Parser::WithinCatch);
	BEGIN(INITIAL);
	return scan_throw(CATCH);
}
	YY_BREAK
case 21:
YY_RULE_SETUP
{
    BEGIN(INITIAL);
    return scan_throw(RETURN);
}
	YY_BREAK
case 22:
YY_RULE_SETUP
{
    BEGIN(INITIAL);
    return scan_throw(RETURN);
}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
{
        BEGIN(BEGINID);
}
	YY_BREAK

case 24:
YY_RULE_SETUP
{
        wchar_t *pwText = to_wide_string(yytext);
        if (yytext != NULL && pwText == NULL)
        {
            std::string str = "can not convert'";
            str += yytext;
            str += "' to UTF-8";
            exit_status = SCAN_ERROR;
            scan_error("can not convert string to UTF-8");
        }
        yylval.str = new std::wstring(pwText);
	FREE(pwText);
        if (symbol::Context::getInstance()->get(symbol::Symbol(*yylval.str)) != NULL
            && symbol::Context::getInstance()->get(symbol::Symbol(*yylval.str))->isCallable())
        {
            scan_throw(ID);
            BEGIN(SHELLMODE);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(ID);
        }
    }
	YY_BREAK

case 25:
YY_RULE_SETUP
{
  return scan_throw(NOT);
}
	YY_BREAK
case 26:
YY_RULE_SETUP
{
  return scan_throw(DOLLAR);
}
	YY_BREAK
case 27:
YY_RULE_SETUP
{
  return scan_throw(BOOLTRUE);
}
	YY_BREAK
case 28:
YY_RULE_SETUP
{
  return scan_throw(BOOLFALSE);
}
	YY_BREAK
case 29:
YY_RULE_SETUP
{
  return scan_throw(AND);
}
	YY_BREAK
case 30:
YY_RULE_SETUP
{
  return scan_throw(ANDAND);
}
	YY_BREAK
case 31:
YY_RULE_SETUP
{
  return scan_throw(OR);
}
	YY_BREAK
case 32:
YY_RULE_SETUP
{
  return scan_throw(OROR);
}
	YY_BREAK
case 33:
YY_RULE_SETUP
{
  return scan_throw(LPAREN);
}
	YY_BREAK
case 34:
YY_RULE_SETUP
{
  return scan_throw(RPAREN);
}
	YY_BREAK
case 35:
YY_RULE_SETUP
{
	scan_step();
  return scan_throw(SEMI);
}
	YY_BREAK
case 36:
YY_RULE_SETUP
{
	scan_step();
  return scan_throw(COMMA);
}
	YY_BREAK
case 37:
YY_RULE_SETUP
{
  return scan_throw(COLON);
}
	YY_BREAK
case 38:
YY_RULE_SETUP
{
  yy_push_state(MATRIX);
  ParserSingleInstance::pushControlStatus(Parser::WithinCell);
  return scan_throw(LBRACE);
}
	YY_BREAK
case 39:
YY_RULE_SETUP
{
  return scan_throw(RBRACE);
}
	YY_BREAK
case 40:
YY_RULE_SETUP
{
  return scan_throw(DOTQUOTE);
}
	YY_BREAK
case 41:
YY_RULE_SETUP
{
  return scan_throw(DOTTIMES);
}
	YY_BREAK
case 42:
YY_RULE_SETUP
{
  return scan_throw(DOTRDIVIDE);
}
	YY_BREAK
case 43:
YY_RULE_SETUP
{
  return scan_throw(DOTLDIVIDE);
}
	YY_BREAK
case 44:
YY_RULE_SETUP
{
  return scan_throw(DOTPOWER);
}
	YY_BREAK
case 45:
YY_RULE_SETUP
{
  return scan_throw(MINUS);
}
	YY_BREAK
case 46:
YY_RULE_SETUP
{
  return scan_throw(PLUS);
}
	YY_BREAK
case 47:
YY_RULE_SETUP
{
  return scan_throw(TIMES);
}
	YY_BREAK
case 48:
YY_RULE_SETUP
{
  return scan_throw(RDIVIDE);
}
	YY_BREAK
case 49:
YY_RULE_SETUP
{
  return scan_throw(LDIVIDE);
}
	YY_BREAK
case 50:
YY_RULE_SETUP
{
  return scan_throw(POWER);
}
	YY_BREAK
case 51:
YY_RULE_SETUP
{
  return scan_throw(KRONTIMES);
}
	YY_BREAK
case 52:
YY_RULE_SETUP
{
  return scan_throw(KRONRDIVIDE);
}
	YY_BREAK
case 53:
YY_RULE_SETUP
{
  return scan_throw(KRONLDIVIDE);
}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
{
    unput(yytext[yyleng - 1]);
    return scan_throw(CONTROLTIMES);
}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
{
    unput(yytext[yyleng - 1]);
    return scan_throw(CONTROLRDIVIDE);
}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
{
    unput(yytext[yyleng - 1]);
    return scan_throw(CONTROLLDIVIDE);
}
	YY_BREAK
case 57:
YY_RULE_SETUP
{
  return scan_throw(EQ);
}
	YY_BREAK
case 58:
YY_RULE_SETUP
{
  return scan_throw(NE);
}
	YY_BREAK
case 59:
YY_RULE_SETUP
{
  return scan_throw(LT);
}
	YY_BREAK
case 60:
YY_RULE_SETUP
{
  return scan_throw(GT);
}
	YY_BREAK
case 61:
YY_RULE_SETUP
{
  return scan_throw(LE);
}
	YY_BREAK
case 62:
YY_RULE_SETUP
{
  return scan_throw(GE);
}
	YY_BREAK
case 63:
YY_RULE_SETUP
{
  return scan_throw(ASSIGN);
 }
	YY_BREAK
case 64:
YY_RULE_SETUP
{
  DEBUG("yy_push_state(MATRIX)");
  yy_push_state(MATRIX);
  ParserSingleInstance::pushControlStatus(Parser::WithinMatrix);
  return scan_throw(LBRACK);
}
	YY_BREAK
case 65:
YY_RULE_SETUP
{
  return scan_throw(RBRACK);
}
	YY_BREAK
case 66:
YY_RULE_SETUP
{
  return scan_throw(DOT);
}
	YY_BREAK
case 67:
YY_RULE_SETUP
{
    ParserSingleInstance::pushControlStatus(Parser::WithinDots);
    yy_push_state(LINEBREAK);
}
	YY_BREAK
case 68:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] INTEGER : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(VARINT);
}
	YY_BREAK
case 69:
YY_RULE_SETUP
{
  scan_exponent_convert(yytext);
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
  scan_step();
  return scan_throw(VARFLOAT);
}
	YY_BREAK
case 70:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] NUMBER : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(NUM);
}
	YY_BREAK
case 71:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] LITTLE : " << yytext << std::endl;
#endif
  scan_step();
  return scan_throw(NUM);
}
	YY_BREAK
case 72:
YY_RULE_SETUP
{
    wchar_t *pwText = to_wide_string(yytext);
    if (yytext != NULL && pwText == NULL)
    {
        std::string str = "can not convert'";
        str += yytext;
        str += "' to UTF-8";
        exit_status = SCAN_ERROR;
        scan_error("can not convert string to UTF-8");
    }
    yylval.str = new std::wstring(pwText);
    FREE(pwText);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] ID : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(ID);
}
	YY_BREAK
case 73:
YY_RULE_SETUP
{
  yylval.comment = new std::wstring();
  comment_level = 1;
  ParserSingleInstance::pushControlStatus(Parser::WithinBlockComment);
  yy_push_state(REGIONCOMMENT);
}
	YY_BREAK
case 74:
YY_RULE_SETUP
{
  pstBuffer = new std::string();
  yy_push_state(LINECOMMENT);
}
	YY_BREAK
case 75:
YY_RULE_SETUP
{
  pstBuffer = new std::string();
  yy_push_state(DOUBLESTRING);
}
	YY_BREAK
case 76:
YY_RULE_SETUP
{
  /*
  ** Matrix Transposition special behaviour
  ** ID' []' toto()' are transposition call
  */
  if (last_token == ID
      || last_token == RBRACK
      || last_token == RPAREN
      || last_token == RBRACE
      || last_token == VARINT
      || last_token == VARFLOAT
      || last_token == NUM
      || last_token == BOOLTRUE
      || last_token == BOOLFALSE)
  {
      return scan_throw(QUOTE);
  }
  else
  {
      pstBuffer = new std::string();
      yy_push_state(SIMPLESTRING);
  }
}
	YY_BREAK
case 77:
YY_RULE_SETUP
{
  scan_step();
  scan_throw(SPACES);
}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 1;
  yylloc.last_column = 1;
  scan_step();
  if (last_token != EOL) {
      return scan_throw(EOL);
  }

}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 1;
  yylloc.last_column = 1;
  scan_step();
  if (last_token != EOL)
  {
      return scan_throw(EOL);
  }
  scan_throw(EOL);
}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 2;
  yylloc.last_column = 1;
  scan_step();
  if (last_token != EOL)
  {
      return scan_throw(EOL);
  }
  scan_throw(EOL);
}
	YY_BREAK
case 81:
YY_RULE_SETUP
{
    std::string str = "unexpected token '";
    str += yytext;
    str += "'";
    exit_status = SCAN_ERROR;
    scan_error(str);
}
	YY_BREAK

case 82:
YY_RULE_SETUP
{
      unput(yytext[yyleng -1]);
      if (last_token == ID
          || last_token == RPAREN
          || last_token == QUOTE
          || last_token == VARINT
          || last_token == VARFLOAT
          || last_token == NUM)
      {
          return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 83:
YY_RULE_SETUP
{
      return scan_throw(COLON);
  }
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
{
      yylloc.last_line += 1;
      yylloc.last_column = 1;
      if(last_token != DOTS && last_token != EOL)
      {
          return scan_throw(EOL);
      }
      scan_throw(EOL);
  }
	YY_BREAK
case 85:
YY_RULE_SETUP
{
    DEBUG("yy_pop_state()");
    yy_pop_state();
    ParserSingleInstance::popControlStatus();
    return scan_throw(RBRACK);
  }
	YY_BREAK
case 86:
YY_RULE_SETUP
{
    yy_pop_state();
    ParserSingleInstance::popControlStatus();
    return scan_throw(RBRACE);
  }
	YY_BREAK
case 87:
YY_RULE_SETUP
{
    return scan_throw(PLUS);
  }
	YY_BREAK
case 88:
YY_RULE_SETUP
{
    return scan_throw(MINUS);
  }
	YY_BREAK
case 89:
YY_RULE_SETUP
{
   int i;
   for (i = yyleng - 1 ; i >= 0 ; --i)
   {
       unput(yytext[i]);
   }
   yy_push_state(MATRIXMINUSID);
   if (last_token != LBRACK
       && last_token != EOL
       && last_token != SEMI
       && last_token != COMMA)
   {
       return scan_throw(COMMA);
   }
  }
	YY_BREAK
case 90:
YY_RULE_SETUP
{
      int i;
      for (i = yyleng - 1 ; i >= 0 ; --i)
      {
          unput(yytext[i]);
      }
      yy_push_state(MATRIXMINUSID);
      if (last_token != LBRACK
          && last_token != EOL
          && last_token != SEMI
          && last_token != COMMA)
      {
          return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 91:
YY_RULE_SETUP
{
      int i;
      for (i = yyleng - 1 ; i >= 0 ; --i)
      {
          unput(yytext[i]);
      }
      yy_push_state(MATRIXMINUSID);
      if (last_token != LBRACK
          && last_token != EOL
          && last_token != SEMI
          && last_token != COMMA)
      {
          return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 92:
YY_RULE_SETUP
{
      int i;
      for (i = yyleng - 1 ; i >= 0 ; --i)
      {
          unput(yytext[i]);
      }
      yy_push_state(MATRIXMINUSID);
      if (last_token != LBRACK
          && last_token != EOL
          && last_token != SEMI
          && last_token != COMMA)
      {
          return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 93:
YY_RULE_SETUP
{
      int i;
      for (i = yyleng - 1; i >= 0 ; --i)
      {
          unput(yytext[i]);
      }
      yy_push_state(MATRIXMINUSID);
      if (last_token != LBRACK
          && last_token != EOL
          && last_token != SEMI
          && last_token != COMMA)
      {
          return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 94:
YY_RULE_SETUP
{
    std::string str = "unexpected token '";
    str += yytext;
    str += "' within a matrix.";
    exit_status = SCAN_ERROR;
    scan_error(str);
  }
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
{
      /* Just do nothing */
      yylloc.last_line += 1;
      yylloc.last_column = 1;
      scan_step();
      scan_throw(EOL);
  }
	YY_BREAK
case 96:
YY_RULE_SETUP
{
      /* Just do nothing */
      pstBuffer = new std::string();
      yy_push_state(LINECOMMENT);
      scan_throw(DOTS);
  }
	YY_BREAK
case YY_STATE_EOF(MATRIX):
{
      yy_pop_state();
  }
	YY_BREAK

case 97:
YY_RULE_SETUP
{
    return scan_throw(MINUS);
  }
	YY_BREAK
case 98:
YY_RULE_SETUP
{
     /* Do Nothing. */
  }
	YY_BREAK
case 99:
YY_RULE_SETUP
{
    yy_pop_state();
    yylval.number = atof(yytext);
#ifdef TOKENDEV
    std::cout << "--> [DEBUG] INTEGER : " << yytext << std::endl;
#endif
    scan_step();
    return scan_throw(VARINT);
  }
	YY_BREAK
case 100:
YY_RULE_SETUP
{
    yy_pop_state();
    yylval.number = atof(yytext);
#ifdef TOKENDEV
    std::cout << "--> [DEBUG] NUMBER : " << yytext << std::endl;
#endif
    scan_step();
    return scan_throw(NUM);
  }
	YY_BREAK
case 101:
YY_RULE_SETUP
{
    yy_pop_state();
    yylval.number = atof(yytext);
#ifdef TOKENDEV
    std::cout << "--> [DEBUG] LITTLE : " << yytext << std::endl;
#endif
    scan_step();
    return scan_throw(NUM);
  }
	YY_BREAK
case 102:
YY_RULE_SETUP
{
    yy_pop_state();
    scan_exponent_convert(yytext);
    yylval.number = atof(yytext);
#ifdef TOKENDEV
    std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
    scan_step();
    return scan_throw(VARFLOAT);
  }
	YY_BREAK
case 103:
YY_RULE_SETUP
{
    yy_pop_state();
    wchar_t* pwText = to_wide_string(yytext);
    if (yytext != NULL && pwText == NULL)
    {
        std::string str = "can not convert'";
        str += yytext;
        str += "' to UTF-8";
        exit_status = SCAN_ERROR;
        scan_error("can not convert string to UTF-8");
    }
    yylval.str = new std::wstring(pwText);
    FREE(pwText);
#ifdef TOKENDEV
    std::cout << "--> [DEBUG] ID : " << yytext << std::endl;
#endif
    scan_step();
    return scan_throw(ID);
  }
	YY_BREAK
case 104:
YY_RULE_SETUP
{
    /* Do Nothing. */
  }
	YY_BREAK
case 105:
YY_RULE_SETUP
{
      return scan_throw(LPAREN);
  }
	YY_BREAK
case 106:
YY_RULE_SETUP
{
      return scan_throw(RPAREN);
  }
	YY_BREAK
case 107:
YY_RULE_SETUP
{
    std::string str = "unexpected token '";
    str += yytext;
    str += "' within a matrix.";
    exit_status = SCAN_ERROR;
    scan_error(str);
  }
	YY_BREAK

case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
{
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    scan_step();
    yy_pop_state();
    ParserSingleInstance::popControlStatus();
  }
	YY_BREAK
case 109:
YY_RULE_SETUP
{
    ++comment_level;
    yy_push_state(REGIONCOMMENT);
  }
	YY_BREAK
case 110:
YY_RULE_SETUP
{
    scan_throw(DOTS);
    pstBuffer = new std::string();
    yy_push_state(LINECOMMENT);
  }
	YY_BREAK
case 111:
YY_RULE_SETUP
{
      /* Do nothing... */
  }
	YY_BREAK
case YY_STATE_EOF(LINEBREAK):
{
      yy_pop_state();
  }
	YY_BREAK
case 112:
YY_RULE_SETUP
{
    std::string str = "unexpected token '";
    str += yytext;
    str += "' after line break with .. or ...";
    exit_status = SCAN_ERROR;
    scan_error(str);
  }
	YY_BREAK

case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
{
    //yylloc.last_line += 1;
    //yylloc.last_column = 1;
    //scan_step();
    yy_pop_state();
    for (int i = yyleng - 1 ; i >= 0 ; --i)
    {
        //std::cerr << "Unputting i = {" << i << "}" << std::endl;
        //std::cerr << "Unputting {" << yytext[i] << "}" << std::endl;
        unput(yytext[i]);
        yylloc.last_column--;
    }
    /*
    ** To forgot comments after lines break
    */
    if (last_token != DOTS)
    {
        //std::cerr << "pstBuffer = {" << *pstBuffer << "}" << std::endl;
        //std::cerr << "pstBuffer->c_str() = {" << pstBuffer->c_str() << "}" << std::endl;
        wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
        //std::wcerr << L"pwstBuffer = W{" << pwstBuffer << L"}" << std::endl;
        if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
        {
            std::string str = "can not convert'";
            str += pstBuffer->c_str();
            str += "' to UTF-8";
            exit_status = SCAN_ERROR;
            scan_error("can not convert string to UTF-8");
        }
        yylval.comment = new std::wstring(pwstBuffer);
        delete pstBuffer;
        FREE (pwstBuffer);
        return scan_throw(COMMENT);
    }
  }
	YY_BREAK
case YY_STATE_EOF(LINECOMMENT):
{
    yy_pop_state();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
    if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
    {
        std::string str = "can not convert'";
        str += pstBuffer->c_str();
        str += "' to UTF-8";
        exit_status = SCAN_ERROR;
        scan_error("can not convert string to UTF-8");
    }
    yylval.comment = new std::wstring(pwstBuffer);
    delete pstBuffer;
    FREE (pwstBuffer);
    return scan_throw(COMMENT);
  }
	YY_BREAK
case 114:
YY_RULE_SETUP
{
     // Put the char in a temporary CHAR buffer to go through UTF-8 trouble
     // only translate to WCHAR_T when popping state.
     *pstBuffer += yytext;
  }
	YY_BREAK

case 115:
YY_RULE_SETUP
{
    --comment_level;
    if (comment_level == 0) {
      ParserSingleInstance::popControlStatus();
      yy_pop_state();
      //return scan_throw(BLOCKCOMMENT);
    }
  }
	YY_BREAK
case 116:
YY_RULE_SETUP
{
    ++comment_level;
    yy_push_state(REGIONCOMMENT);
  }
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
{
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    scan_step();
    *yylval.comment += L"\n//";
  }
	YY_BREAK
case 118:
YY_RULE_SETUP
{
      wchar_t *pwText = to_wide_string(yytext);
      *yylval.comment += std::wstring(pwText);
      FREE(pwText);
  }
	YY_BREAK
case YY_STATE_EOF(REGIONCOMMENT):
{
      yy_pop_state();
//    std::string str = "unexpected end of file in a comment";
//    exit_status = SCAN_ERROR;
//    scan_error(str);
  }
	YY_BREAK

case 119:
YY_RULE_SETUP
{
    *pstBuffer += "\"";
  }
	YY_BREAK
case 120:
YY_RULE_SETUP
{
    *pstBuffer += "'";
  }
	YY_BREAK
case 121:
YY_RULE_SETUP
{
    *pstBuffer += "\"";
  }
	YY_BREAK
case 122:
YY_RULE_SETUP
{
    *pstBuffer += "'";
  }
	YY_BREAK
case 123:
YY_RULE_SETUP
{
    yy_pop_state();
    scan_step();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
    if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
    {
        std::string str = "can not convert'";
        str += pstBuffer->c_str();
        str += "' to UTF-8";
        exit_status = SCAN_ERROR;
        scan_error("can not convert string to UTF-8");
    }
    yylval.str = new std::wstring(pwstBuffer);
    delete pstBuffer;
    FREE(pwstBuffer);
    return scan_throw(STR);
  }
	YY_BREAK
case 124:
YY_RULE_SETUP
{
    std::string str = "Heterogeneous string detected, starting with ' and ending with \".";
    exit_status = SCAN_ERROR;
    scan_error(str);
  }
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
{
      /* Do nothing... Just skip */
  }
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
{
    std::string str = "unexpected end of line in a string.";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yylloc.last_line += 1;
    yylloc.last_column = 1;
  }
	YY_BREAK
case YY_STATE_EOF(SIMPLESTRING):
{
    std::string str = "unexpected end of file in a string.";
    exit_status = SCAN_ERROR;
    scan_error(str);
  }
	YY_BREAK
case 127:
YY_RULE_SETUP
{
    scan_step();
    *pstBuffer += yytext;
  }
	YY_BREAK

case 128:
YY_RULE_SETUP
{
    *pstBuffer += "\"";
  }
	YY_BREAK
case 129:
YY_RULE_SETUP
{
    *pstBuffer += "'";
  }
	YY_BREAK
case 130:
YY_RULE_SETUP
{
    *pstBuffer += "\"";
  }
	YY_BREAK
case 131:
YY_RULE_SETUP
{
    *pstBuffer += "'";
  }
	YY_BREAK
case 132:
YY_RULE_SETUP
{
    yy_pop_state();
    scan_step();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
    if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
    {
        std::string str = "can not convert'";
        str += pstBuffer->c_str();
        str += "' to UTF-8";
        exit_status = SCAN_ERROR;
        scan_error("can not convert string to UTF-8");
    }
    yylval.str = new std::wstring(pwstBuffer);
    delete pstBuffer;
    FREE(pwstBuffer);
    return scan_throw(STR);
  }
	YY_BREAK
case 133:
YY_RULE_SETUP
{
    std::string str = "Heterogeneous string detected, starting with \" and ending with '.";
    exit_status = SCAN_ERROR;
    scan_error(str);
  }
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
{
      /* Do nothing... Just skip */
  }
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
{
    std::string str = "unexpected end of line in a string";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yylloc.last_line += 1;
    yylloc.last_column = 1;
  }
	YY_BREAK
case YY_STATE_EOF(DOUBLESTRING):
{
    std::string str = "unexpected end of file in a string";
    exit_status = SCAN_ERROR;
    scan_error(str);
  }
	YY_BREAK
case 136:
YY_RULE_SETUP
{
   scan_step();
   *pstBuffer += yytext;
  }
	YY_BREAK

case 137:
YY_RULE_SETUP
{
        if (last_token == ID)
        {
            scan_throw(SPACES);
            return ID;
        }
    }
	YY_BREAK
case 138:
YY_RULE_SETUP
{
        BEGIN(INITIAL);
        scan_step();
        return scan_throw(SEMI);
    }
	YY_BREAK
case 139:
YY_RULE_SETUP
{
        BEGIN(INITIAL);
        scan_step();
        return scan_throw(COMMA);
    }
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
{
        BEGIN(INITIAL);
        yylloc.last_line += 1;
        yylloc.last_column = 1;
        scan_step();
        return scan_throw(EOL);
    }
	YY_BREAK
case 141:
YY_RULE_SETUP
{
        if (last_token == STR)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(ASSIGN);
        }
    }
	YY_BREAK
case 142:
YY_RULE_SETUP
{
        if (last_token == STR)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(LPAREN);
        }
    }
	YY_BREAK
case 143:
YY_RULE_SETUP
{
        if (last_token == STR)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(LT);
        }
    }
	YY_BREAK
case 144:
YY_RULE_SETUP
{
        if (last_token == STR)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(GT);
        }
    }
	YY_BREAK
case 145:
YY_RULE_SETUP
{
        if (last_token == STR)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(NOT);
        }
    }
	YY_BREAK
case 146:
YY_RULE_SETUP
{
	wchar_t *pwText = to_wide_string(yytext);
        yylval.str = new std::wstring(pwText);
	FREE(pwText);
        return scan_throw(STR);
    }
	YY_BREAK
case YY_STATE_EOF(SHELLMODE):
{
        BEGIN(INITIAL);
    }
	YY_BREAK

case 147:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(MATRIXMINUSID):
			case YY_STATE_EOF(BEGINID):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 932 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 932 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 931);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

int scan_throw(int token) {
  last_token = token;
#ifdef DEV
  std::cout << "--> [DEBUG] TOKEN : " << token << std::endl;
#endif
  return token;
}

int get_last_token() {
    return last_token;
}

void scan_step() {
  yylloc.first_line = yylloc.last_line;
  yylloc.first_column = yylloc.last_column;
}

void scan_error(std::string msg)
{
    wchar_t* pstMsg = to_wide_string(msg.c_str());

    //std::wcerr << pstMsg << std::endl;
    ParserSingleInstance::PrintError(pstMsg);
    ParserSingleInstance::setExitStatus(Parser::Failed);
    ParserSingleInstance::resetControlStatus();
    FREE(pstMsg);
    last_token = YYEOF;
    BEGIN(INITIAL);
}

/*
** convert floating numbers to C standard
** 1.2d-3 -> 1.2e-3
** 1.2D-3 -> 1.2e-3
*/
void scan_exponent_convert(char *in)
{
  char *pString;
  while((pString=strpbrk(in,"d"))!=NULL)
    {
      *pString='e';
    }
  while((pString=strpbrk(in,"D"))!=NULL)
    {
      *pString='e';
    }
}

#ifdef _MSC_VER
int isatty (int desc)
{
  return 0;
}
#endif

