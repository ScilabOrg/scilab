
#line 3 "src/cpp/parse/scanscilab.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 135
#define YY_END_OF_BUFFER 136
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[908] =
    {   0,
    16407,  136,   81,  135,   77,   81,  135,   78,  135,   78,
       81,  135,   75,   81,  135,   72,   81,  135,   26,   81,
      135,   72,   81,  135,   29,   81,  135,   76,   81,  135,
       33,   81,  135,   34,   81,  135,   47,   81,  135,   46,
       81,  135,   36,   81,  135,   45,   81,  135,   66,   81,
      135,   48,   81,  135,   68,   81,  135,   37,   81,  135,
       35,   81,  135,   59,   81,  135,   63,   81,  135,   60,
       81,  135,   72,   81,  135,   25,   81,  135,   64,   81,
      135,   49,   81,  135,   65,   81,  135,   50,   81,  135,
       72,   81,  135,   72,   81,  135,   72,   81,  135,   72,

       81,  135,   72,   81,  135,   72,   81,  135,   72,   81,
      135,   72,   81,  135,   72,   81,  135,   72,   81,  135,
       72,   81,  135,   72,   81,  135,   38,   81,  135,   31,
       81,  135,   39,   81,  135,   25,   81,  135,   81,  135,
       81,  135,   81,  135,   81,  135,   81,  135,   81,  135,
       81,  135,   81,  135,   77,   81,  135,16407,   72,   81,
      135,   26,   81,  135,   72,   81,  135,   72,   81,  135,
       72,   81,  135,   72,   81,  135,   72,   81,  135,   72,
       81,  135,   72,   81,  135,   72,   81,  135,   72,   81,
      135,   72,   81,  135,   72,   81,  135,   72,   81,  135,

       72,   81,  135,   72,   81,  135,   81,  135,   81,  135,
       81,  135,   81,  135,   81,  135,   81,  135,   81,  135,
       81,  135,  115,  135,  114,  135,  114,  115,  135,  112,
      115,  135,  111,  115,  135,  115,  135,  124,  135,  123,
      135,  123,  124,  135,  120,  124,  135,  121,  124,  135,
      124,  135,  106,  135,  105,  135,  105,  106,  135,  106,
      135,  106,  135,  102,  135,  101,  135,  101,  102,  135,
      100,  135,   99,  100,  135,   96,  135,   96,  100,  135,
      100,  135,   93,  135,   77,   93,  135,   84,  135,   84,
       93,  135,   75,   93,  135,   72,   93,  135,   26,   93,

      135,   72,   93,  135,   29,   93,  135,   76,   93,  135,
       33,   82,   93,  135,   34,   93,  135,   47,   93,  135,
       87,   93,  135,   36,   93,  135,   89,   93,  135,   66,
       93,  135,   48,   93,  135,   68,   93,  135,   37,   83,
       93,  135,   35,   93,  135,   59,   93,  135,   63,   93,
      135,   60,   93,  135,   25,   93,  135,   64,   93,  135,
       49,   93,  135,   85,   93,  135,   50,   93,  135,   38,
       93,  135,   31,   93,  135,   86,   93,  135,   25,   93,
      135,   93,  135,   93,  135,   93,  135,   93,  135,   93,
      135,   93,  135,   93,  135,   93,  135,  134,  135,  125,

      135,  128,  135,  128,  135,   75,  135,   76,  135,  130,
      134,  135,  127,  135,  126,  135,  131,  134,  135,  129,
      134,  135,  132,  134,  135,  133,  134,  135,  135,   24,
      135,  135,   24,  135,   24,  135,   24,  135,   24,  135,
       24,  135,   24,  135,   24,  135,   24,  135,   24,  135,
       24,  135,   24,  135,   24,  135,   24,  135,  135,  135,
      135,  135,  135,  135,  135,  135,   77,   79,   79,   78,
       72,   72,   72,   28,   72,   27,   72,   30,   50,   40,
       41,   67,   42,   71,   43,   44,   73,   74,   70,   68,
       61,   58,   57,   62,   72,   72,   72,   16,   72,   72,

       72,   72,   72,   72,    1,   72,   72,   72,   72,   72,
       72,   72,   72,   32,   72,   77,16407,   72,   72,   72,
       28,   72,   27,   72,   72,   72,   72,   16,   72,   72,
       72,   72,   72,   72,    1,   72,   72,   72,   72,   72,
       72,   72,   72,   72,  114,  107,  108,  109,  110,  123,
      116,  117,  118,  119,  105,  103,  104,  101,   99,   96,
       97,   98,   77,   82,   91,   92,   83,   84,   83,  134,
      125,  128,   24,   24,   24,   24,   24,   24,   16,   24,
       24,   24,   24,   24,   24,    1,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   80,   80,   72,   54,   51,

       52,   53,   55,   70,   69,   56,   72,   72,   72,   72,
       72,    5,   72,   14,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   19,   72,   72, 8215, 8215,   72,   72,
       72,   72,   72,   72,    5,   72,   14,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   19,   72,   72,  113,
      113,  122,  122,   88,   90,   94,   94,   24,   24,   24,
       24,   24,   24,    5,   24,   14,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   19,   24,   24,   72,   72,
        9,   72,   72,   72,    3,   72,   72,   72,   72,   72,
       72,   72,   72,   72,    2,   72,   72,   72,   72,   72,

        9,   72,   72,   72,    3,   72,   72,   72,   72,   72,
       72,   72,   72,   72,    2,   72,   72,   72,   95,   24,
       24,    9,   24,   24,   24,    3,   24,   24,   24,   24,
       24,   24,   24,   24,   24,    2,   24,   24,   24,   72,
       72,   72,   17,   72,   20,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   15,   72,   72,   72,
       72,   17,   72,   20,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   15,   72,   24,   24,   24,
       17,   24,   20,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   15,   24,   72,   72,    4,   72,

       72,   72,   13,   72,   72,   22,   72,   21,   72,    6,
       72,    7,   72,   72,   72,    4,   72,   72,   72,   13,
       72,   72,   22,   72,   21,   72,    6,   72,    7,   72,
       24,   24,    4,   24,   24,   24,   13,   24,   24,   22,
       24,   21,   24,    6,   24,    7,   24,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   24,   24,   24,
       24,   24,   72,   18,   72,   72,   10,   72,   72,   72,
       18,   72,   72,   10,   72,   72,   24,   18,   24,   24,
       10,   24,   24,   12,   72,   72,    8,   72,   12,   72,
       72,    8,   72,   12,   24,   24,    8,   24,   72,   72,

       24,   11,   72,   11,   72,   11,   24
    } ;

static yyconst flex_int16_t yy_accept[786] =
    {   0,
        1,    1,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    3,
        5,    8,   10,   13,   16,   19,   22,   25,   28,   31,
       34,   37,   40,   43,   46,   49,   52,   55,   58,   61,
       64,   67,   70,   73,   76,   79,   82,   85,   88,   91,
       94,   97,  100,  103,  106,  109,  112,  115,  118,  121,
      124,  127,  130,  133,  136,  139,  141,  143,  145,  147,
      149,  151,  153,  155,  159,  162,  165,  168,  171,  174,
      177,  180,  183,  186,  189,  192,  195,  198,  201,  204,
      207,  209,  211,  213,  215,  217,  219,  221,  223,  225,

      227,  230,  233,  236,  238,  240,  242,  245,  248,  251,
      253,  255,  257,  260,  262,  264,  266,  268,  271,  273,
      276,  278,  281,  283,  285,  288,  290,  293,  296,  299,
      302,  305,  308,  311,  315,  318,  321,  324,  327,  330,
      333,  336,  339,  343,  346,  349,  352,  355,  358,  361,
      364,  367,  370,  373,  376,  379,  382,  384,  386,  388,
      390,  392,  394,  396,  398,  400,  402,  404,  406,  408,
      410,  413,  415,  417,  420,  423,  426,  429,  430,  432,
      433,  435,  437,  439,  441,  443,  445,  447,  449,  451,
      453,  455,  457,  459,  460,  461,  462,  463,  464,  465,

      466,  467,  468,  469,  470,  470,  470,  471,  472,  473,
      473,  473,  473,  473,  473,  473,  473,  473,  474,  474,
      474,  474,  474,  474,  474,  474,  474,  476,  478,  479,
      480,  480,  481,  482,  483,  484,  485,  486,  487,  488,
      488,  489,  490,  491,  491,  492,  493,  494,  495,  495,
      496,  497,  498,  500,  501,  502,  503,  504,  505,  507,
      508,  509,  510,  511,  512,  513,  514,  515,  516,  516,
      516,  516,  516,  516,  516,  516,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  519,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  521,  521,

      521,  521,  521,  521,  521,  521,  521,  523,  525,  526,
      527,  528,  530,  531,  532,  533,  534,  535,  537,  538,
      539,  540,  541,  542,  543,  544,  545,  545,  545,  545,
      545,  545,  545,  545,  546,  547,  548,  549,  550,  550,
      551,  552,  553,  554,  555,  555,  556,  557,  558,  559,
      560,  561,  562,  563,  564,  565,  566,  567,  568,  569,
      569,  570,  571,  572,  573,  574,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  577,  578,  579,  581,  582,  583,
      584,  585,  586,  588,  589,  590,  591,  592,  593,  594,

      595,  596,  596,  596,  596,  596,  596,  596,  596,  597,
      598,  599,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  600,  601,  602,  603,
      604,  605,  605,  606,  607,  608,  609,  610,  611,  612,
      614,  616,  617,  618,  619,  620,  621,  622,  623,  624,
      626,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  627,  627,
      628,  629,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  631,  632,  633,

      634,  635,  637,  639,  640,  641,  642,  643,  644,  645,
      646,  647,  649,  650,  650,  650,  650,  651,  652,  653,
      654,  655,  656,  656,  657,  658,  658,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,
      659,  659,  660,  661,  662,  663,  664,  666,  668,  669,
      670,  671,  672,  673,  674,  675,  676,  678,  679,  679,
      679,  679,  680,  680,  680,  680,  680,  680,  680,  681,
      683,  684,  685,  687,  688,  689,  690,  691,  692,  693,
      694,  695,  697,  698,  699,  699,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  699,  699,  699,  699,

      699,  699,  700,  700,  700,  700,  700,  700,  700,  701,
      703,  704,  705,  707,  708,  709,  710,  711,  712,  713,
      714,  715,  717,  718,  719,  720,  721,  721,  721,  721,
      721,  721,  721,  722,  724,  725,  726,  728,  729,  730,
      731,  732,  733,  734,  735,  736,  738,  739,  740,  741,
      742,  743,  745,  747,  748,  749,  750,  751,  752,  753,
      754,  755,  756,  757,  759,  759,  759,  759,  759,  759,
      759,  759,  760,  761,  762,  764,  766,  767,  768,  769,
      770,  771,  772,  773,  774,  775,  776,  778,  779,  780,
      781,  783,  785,  786,  787,  788,  789,  790,  791,  792,

      793,  794,  795,  797,  798,  799,  801,  802,  803,  805,
      806,  808,  810,  812,  814,  814,  814,  815,  816,  818,
      819,  820,  822,  823,  825,  827,  829,  831,  832,  833,
      835,  836,  837,  839,  840,  842,  844,  846,  848,  849,
      850,  851,  852,  853,  854,  855,  856,  857,  858,  859,
      860,  861,  862,  863,  864,  866,  867,  869,  870,  871,
      873,  874,  876,  877,  878,  880,  881,  883,  884,  886,
      887,  889,  891,  892,  894,  896,  897,  899,  900,  901,
      902,  904,  906,  908,  908
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,   25,   26,   25,   25,   25,   27,   27,   28,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   29,   25,   25,   25,   25,   25,   25,
       30,   31,   32,   33,   25,    1,   34,   35,   36,   37,

       38,   39,   25,   40,   41,   25,   42,   43,   44,   45,
       46,   25,   25,   47,   48,   49,   50,   25,   51,   25,
       52,   25,   53,   54,   55,   56,    1,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,    1,    1,   60,   60,   60,   60,   60,   60,   60,

       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   61,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   63,   64,   64,   65,
       66,   66,   66,   67,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[68] =
    {   0,
        1,    2,    3,    3,    4,    5,    5,    6,    1,    4,
        7,    1,    1,    1,    4,    1,    1,    1,    8,    1,
        4,    7,    7,    7,    5,    7,    5,    5,    5,    1,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    1,    1,    1,    7,    1,    1,    1,    5,
        5,    5,    5,    5,    5,    5,    5
    } ;

static yyconst flex_int16_t yy_base[805] =
    {   0,
        0,   67,  132,  135,  143,  151,  154,  160,  140,  147,
      167,  172,  190,    0,  256,  311,  367,    0, 1691, 2715,
      177,  260,  270, 2715,  235,  243,  407, 1672, 2715, 2715,
     2715,  149, 2715, 2715, 2715,  310,  169,  319, 2715, 2715,
      160, 1651, 1637,  311, 1632, 2715, 1636, 2715, 2715,  316,
      409,  411,  436,  413,  448,  454,  462,  466,  470,  478,
      484, 2715, 1596, 2715, 1624,  206, 1584,  211,  131,  229,
      225,  235, 1579,  532,  490,  480,  598,  509,  531,  533,
      535,  562,  537,  574,  580,  589,  592,  604,  628,  596,
      260, 1570,  290,  232,  294,  266,  473, 1569, 2715, 2715,

     1618,  349,  356, 1595, 2715, 2715, 1608,  439,  456, 1557,
     2715, 2715, 1570, 1472, 1475, 2715, 2715, 1475, 2715, 1474,
     2715, 1461,  555, 2715,  667,  664,  671, 2715,  660,  640,
        0, 1438, 2715, 2715, 2715,  345, 2715, 2715, 2715,  698,
      631,  695, 1442, 2715,  307, 1408, 1405, 1402, 2715, 1406,
     2715, 2715, 2715, 1363, 2715, 1384,  593, 1344,  636,  396,
      639,  530,  661, 1344,    0, 1397, 2715, 1390, 2715, 2715,
        0, 2715, 2715,    0,    0,    0,    0, 2715,  674,  682,
      690, 1342,  131, 1224,  402,  434, 1225, 1225, 1213, 1221,
      672,  599, 1208,  667, 1179,  701,  633,  704,  669,  707,

     1171,  765, 2715, 1221,  768,  771,  775,  752,  756,  740,
     1163,  745,  721,  750,  729,  753, 1163,    0,  756, 1157,
      759,  736,  762,  764,  767, 1151,  799,  801, 2715, 2715,
        0, 2715,  483, 1185, 1183,  814, 1181, 2715, 2715,    0,
     2715,  816,  820,  830, 2715, 2715, 2715, 2715,    0,  827,
      831,  833,  835,  857,  860,  863,  872,  879,  865,  891,
      894,  896,  908,  922,  924,  926, 2715,  930,  810,  923,
      926,  929,  932,  935,  938,  996,  944,  952,  963, 1135,
      966,  774,  969,  868,  972, 1135, 1188, 1004, 1016,  977,
     1125,  980,  920,  983,  943,  989, 1125, 1047,  993, 1119,

     1010, 1013, 1015, 1017, 1020, 1115, 1052, 1054, 1056, 1087,
     1089, 1091, 1093, 1115, 1118, 1121, 1134, 1130, 1146, 1148,
     1160, 1152, 1176, 1178, 1182, 1190, 1029, 1039, 1066, 1175,
     1178, 1183, 1186, 2715, 2715, 2715, 2715, 2715, 1209, 2715,
     2715, 2715, 2715, 2715, 1243, 2715, 2715, 2715, 2715, 1166,
     2715, 2715, 2715, 1247, 2715, 1159, 1151, 1149, 1250, 1251,
     1146,    0, 1143, 2715,    0, 1089, 1215, 1078, 1218, 1032,
     1221, 1041, 1224, 1076, 1224, 1235, 1072, 1238, 1098, 1241,
     1198, 1244, 1072, 1089, 1256, 1061,    0, 1056, 1065, 1045,
     1019, 1017,    0,  934, 1258,  929,  929,  930,  914,  923,

        0, 1251, 1254, 1257, 1260, 1263, 1266, 1269, 2715,  959,
     1301, 1274, 1277, 1280, 1284, 1290, 1294, 1297, 1300, 1303,
     1306, 1309, 1312, 1315, 1318, 2715, 2715, 2715, 2715, 2715,
     1359,  937,  929, 2715, 1351, 1353, 1359, 1355, 1377, 1381,
     1383, 1385, 1390, 1407, 1409, 1412, 1414, 1421, 1426, 1438,
     1440, 1415, 1423, 1427, 1431, 1442,  885, 1445, 1287, 1448,
     1450, 1453,  884, 1455, 1466,  879, 1469, 1456, 1472, 1474,
     1477,  877, 1480, 1483, 1486, 1489, 1492, 1495, 1498, 2715,
      930, 1530, 1503, 1506, 1509, 1513, 1519, 1523, 1526, 1529,
     1532, 1535, 1538, 1541, 1544, 1547, 1579, 1581, 1586, 1588,

     1595, 1603, 1610, 1612, 1617, 1629, 1634, 1636, 1641, 1643,
     1648, 1660, 1667, 1643, 1646, 1654, 2715,  926, 2715,  912,
      911,  901, 1715, 2715,  895,  877,  845, 1663, 1666, 1669,
     1672, 1677, 1680, 1683, 1686, 1689, 1692, 1695, 1698, 1701,
     1704,  853,  845,  845,  828,  837,  834,    0,  835,  808,
      804,  786,  784,  762,  733,  731,    0,  687, 1707, 1710,
     1713, 1745, 1718, 1721, 1728, 1731, 1734, 1738, 1770, 1772,
     1774, 1776, 1779, 1798, 1801, 1803, 1806, 1810, 1828, 1832,
     1834, 1837, 1850, 1856, 1833, 1839, 1843, 1849, 1852, 1855,
     1858, 1861, 1864, 1867, 1870, 1873, 1876, 1879, 1882, 1885,

     1888, 1920, 1893, 1896, 1903, 1906, 1909, 1913, 1945, 1947,
     1949, 1951, 1954, 1973, 1976, 1978, 1981, 1985, 2003, 2007,
     2009, 2012, 2025, 2031, 2715,  685, 2008, 2014, 2018, 2024,
     2027, 2030,  642,    0,  642,  639,  635,  622,  605,  602,
      587,  578,  569,  578,  576,    0,  572,    0, 2062, 2064,
        0, 2066, 2068, 2071, 2080, 2093, 2095, 2098, 2102, 2111,
     2117, 2126, 2129, 2135, 2113, 2122, 2128, 2131, 2134, 2137,
        0, 2169, 2171,    0, 2173, 2175, 2178, 2187, 2200, 2202,
     2205, 2209, 2218, 2224, 2233, 2236, 2242,  557,    0,    0,
        0,    0,  559,  546,  532,  534,  526,  518,  511,  483,

      477,  482,    0, 2249, 2255, 2258, 2264, 2273, 2267, 2282,
     2286, 2289, 2298, 2301,    0,    0, 2304, 2313, 2320, 2328,
     2326, 2332, 2345, 2350, 2354, 2359, 2362,  479,  466,    0,
      478,  464,    0,  461,    0,    0,    0,    0, 2367, 2376,
     2381, 2389, 2393, 2398, 2407, 2411, 2420, 2423,  442,  448,
      429,  406,  316, 2425, 2429, 2438, 2447, 2452, 2454, 2456,
     2469, 2478, 2483,  297,    0,  270,    0,  238, 2485, 2487,
     2491, 2500, 2509, 2513,    0,  113,    0, 2515, 2518,   96,
     2522, 2537,    0, 2715, 2586, 2594, 2602, 2610, 2618, 2626,
     2630, 2634, 2641, 2646, 2650, 2658, 2662, 2666, 2674, 2681,

     2688, 2694, 2698, 2706
    } ;

static yyconst flex_int16_t yy_def[805] =
    {   0,
      784,  784,  785,  785,  786,  786,  787,  787,  788,  788,
      789,  789,  784,   13,  790,  790,  784,   17,  784,  784,
      784,  784,  784,  784,  791,  792,  791,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,   27,  784,  784,  784,  784,  784,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  793,  794,  795,  794,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,

      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,   27,  792,
       27,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  796,  784,  784,  784,  784,  784,
      796,  784,  784,  796,  796,  796,  796,  784,  797,  798,
      797,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  784,  784,  784,  784,  784,  784,  784,

      784,  784,  784,  784,  784,  784,  784,   27,   27,  784,
      784,  784,  784,  784,  784,  784,  784,  130,  784,  784,
      784,  784,  784,  784,  784,  784,   27,   27,  784,  784,
      799,  784,  784,  784,  784,  784,  784,  784,  784,  800,
      784,  784,  784,  784,  784,  784,  784,  784,  801,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,  784,   27,  784,  784,
      784,  784,  784,  784,  784,  793,  802,  803,  784,  784,
      784,  784,  784,  784,  784,  784,  804,   77,   77,  784,
      784,  784,  784,  784,  784,  784,  784,  795,  784,  784,

      784,  784,  784,  784,  784,  784,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  796,  784,  784,  181,  181,  784,  784,  784,  784,
      784,  784,  784,  784,  798,  784,  784,  784,  784,  784,
      784,  784,  784,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,

      181,  784,  784,  784,  784,  784,  784,  784,  784,  784,
       27,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,  784,  784,  784,  802,  784,  784,  784,  784,  784,
      784,  784,  784,  803,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      804,   77,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,   77,   77,   77,   77,

       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  181,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  784,  784,
      784,   27,  784,  784,  784,  784,  784,  784,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,

      784,   77,  784,  784,  784,  784,  784,  784,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,  784,  181,  784,  784,  784,  784,
      784,  784,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,   27,   27,
      130,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,  784,  784,  784,  784,  784,  784,
      455,   77,   77,  298,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,  181,  181,  375,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,

      181,  181,  181,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,  455,  464,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,   27,   27,
       27,   27,   27,   77,   77,   77,   77,   77,  181,  181,
      181,  181,  181,   27,   27,   27,   27,   27,   77,   77,
       77,   77,   77,  181,  181,  181,  181,  181,   27,   27,
       27,   77,   77,   77,  181,  181,  181,   27,   77,  181,
       27,   77,  181,    0,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,

      784,  784,  784,  784
    } ;

static yyconst flex_int16_t yy_nxt[2783] =
    {   0,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   44,   44,   44,   46,
       47,   48,   49,   44,   50,   51,   52,   53,   54,   55,
       56,   44,   44,   44,   44,   57,   58,   59,   60,   44,
       61,   44,   62,   63,   64,   65,   20,   20,   20,   66,
       67,   68,   69,   70,   71,   72,   73,   20,   74,   22,
       23,   24,   75,   76,   77,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   78,   45,   78,   78,   78,   46,   47,   48,   49,

       78,   79,   80,   81,   82,   83,   84,   85,   78,   78,
       78,   78,   86,   87,   88,   89,   78,   90,   78,   62,
       63,   64,   65,   20,   20,   20,   91,   92,   93,   94,
       95,   96,   97,   98,  100,  101,  102,  100,  101,  102,
      783,  103,  117,  118,  103,  106,  107,  108,  104,  117,
      118,  104,  109,  106,  107,  108,  112,  113,  780,  110,
      109,  230,  112,  113,  385,  231,  114,  110,  120,  121,
      122,  115,  114,  120,  121,  122,  386,  115,  202,  203,
      204,  239,  245,  246,  123,  240,  241,  271,  271,  123,
      124,  125,  126,  127,  128,  129,  130,  131,  132,  133,

      134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
      144,  145,  146,  147,  129,  148,  129,  129,  129,  149,
      150,  151,  152,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  153,  154,  155,  156,  124,  124,  124,  157,
      158,  159,  160,  161,  162,  163,  164,  166,  167,  168,
      169,  205,  268,  268,  268,  170,  171,  270,  270,  270,
      172,  205,  207,  209,  206,  777,  173,  174,  175,  176,
      206,  177,  273,  273,  206,  272,  272,  272,  329,  329,
      206,  274,  274,  274,  210,  211,  212,  213,  214,  215,

      216,  217,  219,  220,  221,  222,  223,  224,  225,  226,
      776,  177,  166,  167,  168,  169,  326,  326,  326,  232,
      170,  171,  233,  331,  331,  172,  234,  235,  236,  245,
      246,  173,  174,  175,  176,  242,  177,  243,  208,  208,
      237,  775,  238,  208,  208,  244,  328,  328,  328,  208,
      330,  330,  330,  335,  208,  244,  244,  230,  336,  208,
      337,  231,  250,  768,  208,  338,  177,  178,  178,  178,
      178,  178,  179,  180,  181,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  181,  178,  181,  181,  181,  178,  178,  178,  178,

      181,  182,  183,  184,  185,  186,  187,  188,  181,  181,
      181,  181,  189,  190,  191,  192,  181,  193,  181,  178,
      178,  178,  178,  178,  178,  178,  194,  195,  196,  197,
      198,  199,  200,  201,  227,  228,  208,  208,  208,  208,
      208,  208,  251,  341,  388,  227,  389,  208,  342,  208,
      767,  208,  271,  271,  252,  228,  253,  208,  256,  208,
      343,  208,  257,  208,  208,  344,  210,  211,  212,  213,
      214,  215,  216,  217,  208,  208,  208,  766,  254,  390,
      255,  208,  208,  391,  208,  765,  208,  764,  258,  208,
      208,  287,  259,  208,  208,  238,  208,  208,  208,  427,

      208,  753,  208,  261,  208,  208,  208,  262,  208,  752,
      260,  208,  208,  751,  208,  750,  208,  264,  208,  749,
      263,  738,  208,  266,  265,  737,  208,  736,  289,  332,
      332,  332,  208,  276,  203,  204,  288,  288,  278,  299,
      300,  301,  302,  303,  304,  305,  306,  288,  735,  290,
      291,  292,  293,  294,  295,  296,  297,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  310,  352,  734,  288,
      733,  288,  353,  288,  732,  288,  731,  309,  311,  288,
      312,  288,  315,  288,  730,  288,  316,  273,  273,  288,
      288,  279,  280,  281,  282,  283,  284,  285,  286,  287,

      288,  288,  288,  729,  313,  728,  314,  288,  288,  703,
      288,  702,  288,  701,  317,  700,  288,  288,  318,  288,
      288,  699,  288,  288,  288,  307,  308,  288,  288,  320,
      288,  288,  288,  698,  288,  325,  307,  319,  398,  697,
      288,  321,  288,  239,  288,  399,  308,  240,  241,  268,
      268,  268,  288,  696,  322,  288,  288,  290,  291,  292,
      293,  294,  295,  296,  297,  205,  288,  323,  354,  203,
      204,  695,  205,  359,  324,  694,  288,  355,  206,  693,
      356,  692,  357,  691,  206,  206,  358,  208,  208,  404,
      404,  206,  270,  270,  270,  272,  272,  272,  208,  219,

      220,  221,  222,  223,  224,  225,  226,  232,  208,  396,
      233,  242,  366,  243,  360,  235,  236,  274,  274,  274,
      688,  244,  397,  401,  401,  401,  406,  406,  237,  647,
      238,  244,  244,  367,  368,  369,  370,  371,  372,  373,
      374,  376,  377,  378,  379,  380,  381,  382,  383,  367,
      368,  369,  370,  371,  372,  373,  374,  403,  403,  403,
      405,  405,  405,  407,  407,  407,  202,  203,  204,  205,
      409,  410,  205,  409,  410,  646,  205,  414,  414,  208,
      208,  645,  206,  208,  208,  206,  416,  416,  206,  206,
      208,  206,  421,  421,  208,  206,  208,  208,  208,  644,

      208,  413,  413,  413,  208,  411,  415,  415,  415,  417,
      417,  417,  218,  218,  218,  420,  420,  420,  422,  422,
      422,  423,  423,  424,  424,  424,  208,  208,  208,  208,
      475,  475,  236,  643,  431,  642,  242,  208,  243,  208,
      244,  641,  244,  432,  640,  432,  244,  208,  433,  208,
      244,  244,  244,  244,  208,  208,  244,  244,  208,  208,
      208,  208,  208,  208,  435,  208,  268,  268,  268,  208,
      639,  208,  638,  208,  637,  208,  636,  438,  436,  437,
      635,  208,  634,  208,  208,  208,  633,  208,  208,  626,
      208,  208,  208,  208,  625,  208,  440,  524,  208,  208,

      208,  208,  522,  208,  439,  208,  208,  208,  208,  441,
      208,  208,  521,  208,  519,  443,  442,  208,  208,  208,
      208,  208,  208,  208,  208,  477,  477,  208,  517,  208,
      444,  481,  208,  598,  208,  208,  208,  592,  447,  208,
      591,  445,  446,  585,  208,  287,  208,  433,  448,  208,
      208,  208,  208,  208,  208,  433,  208,  208,  208,  449,
      208,  409,  208,  558,  208,  557,  451,  556,  208,  555,
      208,  554,  208,  551,  208,  450,  485,  485,  208,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  452,  452,
      452,  453,  453,  453,  454,  454,  454,  276,  203,  204,

      487,  487,  278,  456,  457,  458,  459,  460,  461,  462,
      463,  465,  466,  467,  468,  469,  470,  471,  472,  277,
      277,  277,  474,  474,  474,  476,  476,  476,  478,  478,
      478,  288,  288,  288,  288,  288,  484,  484,  484,  486,
      486,  486,  288,  288,  288,  488,  488,  488,  287,  298,
      298,  298,  288,  550,  288,  279,  280,  281,  282,  283,
      284,  285,  286,  549,  288,  482,  491,  491,  491,  492,
      492,  493,  493,  493,  494,  494,  495,  495,  495,  288,
      288,  288,  288,  288,  288,  326,  326,  326,  530,  530,
      288,  548,  288,  497,  288,  326,  326,  326,  532,  532,

      288,  547,  288,  546,  288,  545,  299,  300,  301,  302,
      303,  304,  305,  306,  288,  288,  288,  288,  288,  288,
      288,  288,  326,  326,  326,  288,  542,  288,  541,  288,
      535,  288,  534,  500,  498,  499,  528,  288,  527,  288,
      501,  288,  288,  288,  363,  288,  288,  361,  288,  288,
      361,  502,  522,  288,  537,  537,  288,  288,  288,  288,
      521,  288,  288,  288,  503,  504,  288,  350,  288,  288,
      505,  496,  288,  288,  288,  288,  288,  490,  288,  288,
      288,  489,  288,  483,  288,  506,  288,  288,  288,  481,
      288,  479,  510,  473,  288,  507,  508,  429,  288,  428,

      288,  234,  509,  288,  288,  288,  288,  425,  288,  288,
      288,  517,  518,  511,  288,  419,  288,  288,  288,  418,
      288,  412,  513,  203,  288,  339,  288,  408,  288,  512,
      288,  326,  326,  326,  514,  514,  514,  402,  288,  515,
      515,  515,  516,  516,  516,  519,  520,  400,  354,  203,
      204,  205,  523,  524,  525,  539,  539,  355,  395,  345,
      356,  394,  357,  393,  206,  392,  358,  360,  526,  387,
      206,  365,  365,  365,  529,  529,  529,  531,  531,  531,
      533,  533,  533,  376,  377,  378,  379,  380,  381,  382,
      383,  375,  375,  375,  536,  536,  536,  538,  538,  538,

      540,  540,  540,  543,  544,  552,  553,  401,  401,  401,
      401,  401,  401,  401,  401,  401,  401,  401,  401,  559,
      559,  559,  560,  560,  560,  561,  561,  561,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  587,  587,  562,  563,  563,  563,  208,
      564,  564,  564,  565,  565,  565,  218,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  566,  566,
      566,  567,  567,  567,  568,  568,  568,  431,  208,  208,
      208,  208,  208,  208,  569,  244,  208,  208,  384,  208,
      570,  208,  364,  208,  571,  244,  244,  208,  363,  208,

      275,  208,  269,  572,  208,  208,  246,  208,  208,  208,
      208,  208,  208,  208,  573,  208,  267,  208,  208,  574,
      575,  208,  249,  208,  246,  208,  576,  248,  208,  208,
      247,  208,  287,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  361,  577,  208,  229,  208,  208,  208,
      208,  580,  208,  208,  208,  208,  287,  208,  578,  208,
      208,  579,  208,  351,  208,  208,  208,  208,  208,  581,
      582,  584,  584,  584,  208,  350,  208,  349,  208,  584,
      584,  584,  583,  584,  584,  584,  208,  348,  208,  347,
      456,  457,  458,  459,  460,  461,  462,  463,  455,  455,

      455,  586,  586,  586,  588,  588,  588,  589,  589,  590,
      590,  590,  594,  594,  465,  466,  467,  468,  469,  470,
      471,  472,  464,  464,  464,  593,  593,  593,  595,  595,
      595,  596,  596,  597,  597,  597,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  599,  599,
      599,  600,  600,  600,  601,  601,  601,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  346,  345,  602,  603,  603,  603,  288,  604,
      604,  604,  605,  605,  605,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  606,  606,  606,

      607,  607,  607,  608,  608,  608,  288,  288,  288,  288,
      340,  339,  609,  288,  288,  288,  288,  288,  610,  288,
      334,  611,  288,  288,  288,  333,  288,  288,  327,  288,
      288,  288,  613,  288,  288,  275,  612,  288,  288,  288,
      288,  614,  269,  288,  288,  288,  246,  615,  288,  267,
      288,  288,  249,  616,  246,  288,  288,  288,  288,  248,
      288,  288,  288,  288,  288,  288,  617,  288,  288,  288,
      288,  288,  288,  247,  288,  288,  288,  288,  620,  288,
      229,  288,  288,  618,  288,  619,  288,  288,  288,  288,
      784,  621,  622,  784,  288,  288,  288,  784,  288,  624,

      624,  624,  624,  624,  624,  288,  784,  784,  288,  623,
      624,  624,  624,  784,  784,  288,  523,  524,  525,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  784,  526,  627,  627,  627,  628,  628,  628,  629,
      629,  629,  375,  375,  375,  375,  375,  375,  375,  375,
      375,  375,  375,  375,  630,  630,  630,  631,  631,  631,
      632,  632,  632,  648,  648,  648,  648,  648,  648,  648,
      648,  648,  208,  208,  650,  650,  650,  650,  650,  650,
      649,  784,  784,  208,  650,  650,  650,  651,  651,  651,
      651,  651,  651,  208,  651,  651,  651,  208,  208,  208,

      208,  208,  208,  208,  208,  784,  208,  208,  208,  784,
      208,  652,  208,  653,  208,  784,  654,  208,  208,  655,
      208,  784,  208,  784,  208,  208,  208,  208,  208,  208,
      208,  208,  784,  208,  208,  784,  208,  208,  208,  208,
      658,  208,  784,  784,  208,  784,  208,  656,  208,  657,
      784,  208,  659,  660,  208,  208,  208,  784,  208,  208,
      208,  208,  208,  784,  208,  208,  208,  662,  784,  663,
      208,  784,  208,  784,  661,  208,  208,  208,  208,  784,
      208,  784,  208,  208,  208,  208,  784,  664,  208,  455,
      455,  455,  784,  784,  208,  455,  455,  455,  208,  455,

      455,  455,  784,  784,  208,  455,  455,  455,  665,  665,
      665,  666,  666,  666,  667,  667,  667,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  668,
      668,  668,  669,  669,  669,  670,  670,  670,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  288,  288,  673,
      673,  673,  673,  673,  673,  672,  784,  784,  288,  673,
      673,  673,  674,  674,  674,  674,  674,  674,  288,  674,
      674,  674,  288,  288,  288,  288,  288,  288,  288,  288,
      784,  288,  288,  288,  784,  288,  675,  288,  676,  288,
      784,  677,  288,  288,  678,  288,  784,  288,  784,  288,

      288,  288,  288,  288,  288,  288,  288,  784,  288,  288,
      784,  288,  288,  288,  288,  681,  288,  784,  784,  288,
      784,  288,  679,  288,  680,  784,  288,  682,  683,  288,
      288,  288,  784,  288,  288,  288,  288,  288,  784,  288,
      288,  288,  685,  784,  686,  288,  784,  288,  784,  684,
      288,  288,  288,  288,  784,  288,  784,  288,  288,  288,
      288,  784,  687,  288,  689,  689,  689,  784,  784,  288,
      689,  689,  689,  288,  689,  689,  689,  784,  784,  288,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  208,
      208,  208,  208,  208,  208,  208,  208,  784,  208,  208,

      208,  784,  208,  784,  208,  784,  208,  208,  208,  208,
      704,  784,  208,  784,  208,  705,  208,  784,  706,  208,
      208,  208,  208,  208,  784,  208,  208,  784,  208,  208,
      208,  208,  784,  208,  784,  708,  208,  707,  208,  208,
      208,  208,  709,  208,  208,  208,  208,  784,  711,  208,
      208,  784,  710,  208,  208,  208,  208,  208,  784,  208,
      784,  712,  208,  208,  208,  208,  784,  208,  714,  715,
      715,  715,  784,  208,  713,  784,  784,  208,  715,  715,
      715,  784,  784,  208,  715,  715,  715,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  288,  288,  288,  288,

      288,  288,  288,  288,  784,  288,  288,  288,  784,  288,
      784,  288,  784,  288,  288,  288,  288,  717,  784,  288,
      784,  288,  718,  288,  784,  719,  288,  288,  288,  288,
      288,  784,  288,  288,  784,  288,  288,  288,  288,  784,
      288,  784,  721,  288,  720,  288,  288,  288,  288,  722,
      288,  288,  288,  288,  784,  724,  288,  288,  784,  723,
      288,  288,  288,  288,  288,  784,  288,  784,  725,  288,
      288,  288,  288,  784,  288,  727,  208,  208,  784,  784,
      288,  726,  208,  208,  288,  208,  208,  208,  784,  739,
      288,  208,  208,  208,  208,  208,  208,  208,  784,  741,

      208,  208,  208,  208,  740,  208,  208,  784,  784,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  742,  784,
      208,  208,  743,  784,  208,  208,  208,  208,  208,  208,
      208,  288,  288,  784,  208,  784,  208,  208,  784,  208,
      288,  288,  288,  784,  744,  784,  208,  288,  288,  208,
      784,  288,  288,  288,  288,  288,  288,  784,  288,  288,
      288,  288,  745,  746,  288,  784,  288,  784,  288,  784,
      288,  747,  288,  288,  288,  784,  288,  288,  288,  784,
      288,  288,  288,  288,  784,  748,  288,  288,  288,  288,
      288,  784,  288,  288,  208,  208,  784,  288,  288,  784,

      288,  784,  288,  208,  208,  208,  784,  288,  208,  208,
      288,  784,  754,  755,  208,  208,  208,  208,  784,  208,
      208,  208,  784,  784,  208,  288,  288,  208,  784,  756,
      784,  208,  784,  757,  288,  288,  288,  208,  288,  288,
      758,  208,  784,  759,  760,  288,  288,  288,  288,  288,
      288,  288,  208,  208,  784,  288,  208,  208,  288,  761,
      784,  288,  784,  208,  762,  208,  208,  208,  288,  769,
      763,  288,  784,  208,  208,  208,  208,  208,  770,  208,
      208,  288,  288,  288,  288,  208,  208,  784,  784,  771,
      208,  784,  288,  784,  288,  208,  288,  288,  772,  784,

      208,  784,  288,  784,  288,  288,  288,  288,  784,  773,
      288,  288,  208,  208,  208,  208,  288,  288,  208,  208,
      774,  288,  784,  208,  784,  208,  288,  288,  288,  208,
      784,  288,  778,  208,  784,  208,  288,  288,  288,  208,
      288,  288,  208,  208,  784,  288,  288,  288,  288,  208,
      208,  288,  784,  208,  779,  784,  288,  288,  784,  781,
      208,  288,  782,  208,  288,  288,  288,  784,  784,  784,
      208,  784,  784,  784,  784,  288,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  288,   99,   99,   99,   99,
       99,   99,   99,   99,  105,  105,  105,  105,  105,  105,

      105,  105,  111,  111,  111,  111,  111,  111,  111,  111,
      116,  116,  116,  116,  116,  116,  116,  116,  119,  119,
      119,  119,  119,  119,  119,  119,  165,  165,  165,  165,
      165,  165,  165,  165,  208,  784,  784,  208,  218,  784,
      784,  218,  277,  277,  784,  277,  277,  288,  784,  784,
      288,  784,  784,  288,  298,  784,  784,  298,  362,  784,
      784,  784,  362,  362,  362,  362,  365,  784,  784,  365,
      375,  784,  784,  375,  426,  426,  426,  426,  426,  426,
      426,  430,  430,  430,  430,  430,  430,  430,  434,  434,
      434,  434,  434,  434,  434,  455,  784,  784,  455,  784,

      784,  455,  464,  784,  784,  464,  480,  480,  480,  480,
      480,  480,  784,  480,   19,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784
    } ;

static yyconst flex_int16_t yy_chk[2783] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    3,    3,    3,    4,    4,    4,
      780,    3,    9,    9,    4,    5,    5,    5,    3,   10,
       10,    4,    5,    6,    6,    6,    7,    7,  776,    5,
        6,   32,    8,    8,  183,   32,    7,    6,   11,   11,
       11,    7,    8,   12,   12,   12,  183,    8,   21,   21,
       21,   37,   41,   41,   11,   37,   37,   69,   69,   12,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   15,   15,   15,
       15,   22,   66,   66,   66,   15,   15,   68,   68,   68,
       15,   23,   23,   25,   22,  768,   15,   15,   15,   15,
       22,   15,   71,   71,   23,   70,   70,   70,   94,   94,
       23,   72,   72,   72,   25,   25,   25,   25,   25,   25,

       25,   25,   26,   26,   26,   26,   26,   26,   26,   26,
      766,   15,   16,   16,   16,   16,   91,   91,   91,   36,
       16,   16,   36,   96,   96,   16,   36,   36,   36,  145,
      145,   16,   16,   16,   16,   38,   16,   38,   44,   44,
       36,  764,   36,   50,   50,   38,   93,   93,   93,   44,
       95,   95,   95,  102,   50,   38,   38,  136,  102,   44,
      103,  136,   50,  753,   50,  103,   16,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   27,   27,   51,   51,   52,   52,
       54,   54,   51,  108,  185,   27,  185,   51,  108,   52,
      752,   54,  160,  160,   51,   27,   52,   51,   54,   52,
      109,   54,   54,   53,   53,  109,   27,   27,   27,   27,
       27,   27,   27,   27,   53,   55,   55,  751,   53,  186,
       53,   56,   56,  186,   53,  750,   55,  749,   55,   57,
       57,   75,   56,   58,   58,  233,   55,   59,   59,  233,

       57,  734,   56,   58,   58,   60,   60,   59,   59,  732,
       57,   61,   61,  731,   58,  729,   60,   60,   59,  728,
       59,  702,   61,   61,   60,  701,   60,  700,   75,   97,
       97,   97,   61,   74,   74,   74,   78,   78,   74,   76,
       76,   76,   76,   76,   76,   76,   76,   78,  699,   75,
       75,   75,   75,   75,   75,   75,   75,   78,   79,   79,
       80,   80,   81,   81,   83,   83,   80,  123,  698,   79,
      697,   80,  123,   81,  696,   83,  695,   79,   80,   79,
       81,   80,   83,   81,  694,   83,   83,  162,  162,   82,
       82,   74,   74,   74,   74,   74,   74,   74,   74,   77,

       82,   84,   84,  693,   82,  688,   82,   85,   85,  647,
       82,  645,   84,  644,   84,  643,   86,   86,   85,   87,
       87,  642,   84,   90,   90,   77,   77,   86,   85,   87,
       87,   88,   88,  641,   90,   90,   77,   86,  192,  640,
       87,   88,   88,  141,   90,  192,   77,  141,  141,  157,
      157,  157,   88,  639,   88,   89,   89,   77,   77,   77,
       77,   77,   77,   77,   77,  126,   89,   89,  125,  125,
      125,  638,  127,  127,   89,  637,   89,  125,  126,  636,
      125,  635,  125,  633,  126,  127,  125,  129,  129,  197,
      197,  127,  159,  159,  159,  161,  161,  161,  129,  130,

      130,  130,  130,  130,  130,  130,  130,  140,  129,  191,
      140,  142,  179,  142,  140,  140,  140,  163,  163,  163,
      626,  142,  191,  194,  194,  194,  199,  199,  140,  558,
      140,  142,  142,  179,  179,  179,  179,  179,  179,  179,
      179,  180,  180,  180,  180,  180,  180,  180,  180,  181,
      181,  181,  181,  181,  181,  181,  181,  196,  196,  196,
      198,  198,  198,  200,  200,  200,  202,  202,  202,  205,
      205,  205,  206,  206,  206,  556,  207,  213,  213,  208,
      208,  555,  205,  209,  209,  206,  215,  215,  205,  207,
      208,  206,  222,  222,  209,  207,  210,  210,  210,  554,

      208,  212,  212,  212,  209,  209,  214,  214,  214,  216,
      216,  216,  219,  219,  219,  221,  221,  221,  223,  223,
      223,  224,  224,  225,  225,  225,  227,  227,  228,  228,
      282,  282,  236,  553,  242,  552,  243,  227,  243,  228,
      236,  551,  242,  244,  550,  244,  243,  227,  244,  228,
      236,  236,  242,  242,  250,  250,  243,  243,  251,  251,
      252,  252,  253,  253,  250,  250,  269,  269,  269,  251,
      549,  252,  547,  253,  546,  250,  545,  252,  251,  251,
      544,  252,  543,  253,  254,  254,  542,  255,  255,  527,
      256,  256,  259,  259,  526,  254,  255,  525,  255,  257,

      257,  256,  522,  259,  254,  254,  258,  258,  255,  256,
      257,  256,  521,  259,  520,  258,  257,  258,  260,  260,
      257,  261,  261,  262,  262,  284,  284,  258,  518,  260,
      260,  481,  261,  472,  262,  263,  263,  466,  262,  260,
      463,  261,  261,  457,  262,  277,  263,  433,  263,  264,
      264,  265,  265,  266,  266,  432,  263,  268,  268,  264,
      264,  410,  265,  400,  266,  399,  266,  398,  268,  397,
      264,  396,  265,  394,  266,  265,  293,  293,  268,  270,
      270,  270,  271,  271,  271,  272,  272,  272,  273,  273,
      273,  274,  274,  274,  275,  275,  275,  276,  276,  276,

      295,  295,  276,  277,  277,  277,  277,  277,  277,  277,
      277,  278,  278,  278,  278,  278,  278,  278,  278,  279,
      279,  279,  281,  281,  281,  283,  283,  283,  285,  285,
      285,  288,  288,  290,  290,  290,  292,  292,  292,  294,
      294,  294,  288,  289,  289,  296,  296,  296,  298,  299,
      299,  299,  288,  392,  289,  276,  276,  276,  276,  276,
      276,  276,  276,  391,  289,  289,  301,  301,  301,  302,
      302,  303,  303,  303,  304,  304,  305,  305,  305,  307,
      307,  308,  308,  309,  309,  327,  327,  327,  370,  370,
      307,  390,  308,  309,  309,  328,  328,  328,  372,  372,

      307,  389,  308,  388,  309,  386,  298,  298,  298,  298,
      298,  298,  298,  298,  310,  310,  311,  311,  312,  312,
      313,  313,  329,  329,  329,  310,  384,  311,  383,  312,
      377,  313,  374,  311,  310,  310,  368,  311,  366,  312,
      313,  313,  314,  314,  363,  315,  315,  361,  316,  316,
      358,  314,  357,  314,  379,  379,  315,  318,  318,  316,
      356,  317,  317,  314,  315,  316,  315,  350,  318,  316,
      317,  306,  317,  319,  319,  320,  320,  300,  318,  322,
      322,  297,  317,  291,  319,  319,  320,  321,  321,  287,
      322,  286,  322,  280,  319,  320,  320,  237,  321,  235,

      322,  234,  321,  323,  323,  324,  324,  226,  321,  325,
      325,  339,  339,  323,  323,  220,  324,  326,  326,  217,
      325,  211,  325,  204,  323,  339,  324,  201,  326,  324,
      325,  330,  330,  330,  331,  331,  331,  195,  326,  332,
      332,  332,  333,  333,  333,  345,  345,  193,  354,  354,
      354,  359,  360,  360,  360,  381,  381,  354,  190,  345,
      354,  189,  354,  188,  359,  187,  354,  360,  360,  184,
      359,  367,  367,  367,  369,  369,  369,  371,  371,  371,
      373,  373,  373,  375,  375,  375,  375,  375,  375,  375,
      375,  376,  376,  376,  378,  378,  378,  380,  380,  380,

      382,  382,  382,  385,  385,  395,  395,  402,  402,  402,
      403,  403,  403,  404,  404,  404,  405,  405,  405,  406,
      406,  406,  407,  407,  407,  408,  408,  408,  411,  411,
      412,  412,  412,  413,  413,  413,  414,  414,  414,  411,
      415,  415,  415,  459,  459,  411,  416,  416,  416,  411,
      417,  417,  417,  418,  418,  418,  419,  419,  419,  420,
      420,  420,  421,  421,  421,  422,  422,  422,  423,  423,
      423,  424,  424,  424,  425,  425,  425,  431,  435,  435,
      436,  436,  438,  438,  435,  431,  437,  437,  182,  435,
      436,  436,  168,  438,  437,  431,  431,  437,  166,  435,

      164,  436,  158,  438,  439,  439,  156,  437,  440,  440,
      441,  441,  442,  442,  439,  439,  154,  443,  443,  440,
      442,  441,  150,  442,  148,  439,  443,  147,  443,  440,
      146,  441,  455,  442,  444,  444,  445,  445,  443,  446,
      446,  447,  447,  143,  444,  444,  132,  445,  448,  448,
      446,  447,  447,  449,  449,  444,  464,  445,  445,  448,
      446,  446,  447,  122,  449,  450,  450,  451,  451,  448,
      449,  452,  452,  452,  449,  120,  450,  118,  451,  453,
      453,  453,  451,  454,  454,  454,  450,  115,  451,  114,
      455,  455,  455,  455,  455,  455,  455,  455,  456,  456,

      456,  458,  458,  458,  460,  460,  460,  461,  461,  462,
      462,  462,  468,  468,  464,  464,  464,  464,  464,  464,
      464,  464,  465,  465,  465,  467,  467,  467,  469,  469,
      469,  470,  470,  471,  471,  471,  473,  473,  473,  474,
      474,  474,  475,  475,  475,  476,  476,  476,  477,  477,
      477,  478,  478,  478,  479,  479,  479,  482,  482,  483,
      483,  483,  484,  484,  484,  485,  485,  485,  482,  486,
      486,  486,  113,  110,  482,  487,  487,  487,  482,  488,
      488,  488,  489,  489,  489,  490,  490,  490,  491,  491,
      491,  492,  492,  492,  493,  493,  493,  494,  494,  494,

      495,  495,  495,  496,  496,  496,  497,  497,  498,  498,
      107,  104,  497,  499,  499,  500,  500,  497,  498,  498,
      101,  499,  501,  501,  499,   98,  500,  497,   92,  498,
      502,  502,  501,  501,  499,   73,  500,  503,  503,  504,
      504,  502,   67,  501,  505,  505,   65,  504,  503,   63,
      504,  502,   47,  505,   45,  505,  506,  506,  503,   43,
      504,  507,  507,  508,  508,  505,  506,  506,  509,  509,
      510,  510,  507,   42,  508,  511,  511,  506,  509,  509,
       28,  510,  507,  507,  508,  508,  511,  512,  512,  509,
       19,  510,  511,    0,  513,  513,  511,    0,  512,  514,

      514,  514,  515,  515,  515,  513,    0,    0,  512,  513,
      516,  516,  516,    0,    0,  513,  523,  523,  523,  528,
      528,  528,  529,  529,  529,  530,  530,  530,  531,  531,
      531,    0,  523,  532,  532,  532,  533,  533,  533,  534,
      534,  534,  535,  535,  535,  536,  536,  536,  537,  537,
      537,  538,  538,  538,  539,  539,  539,  540,  540,  540,
      541,  541,  541,  559,  559,  559,  560,  560,  560,  561,
      561,  561,  562,  562,  563,  563,  563,  564,  564,  564,
      562,    0,    0,  562,  565,  565,  565,  566,  566,  566,
      567,  567,  567,  562,  568,  568,  568,  569,  569,  570,

      570,  571,  571,  572,  572,    0,  573,  573,  569,    0,
      570,  569,  571,  571,  572,    0,  572,  573,  569,  573,
      570,    0,  571,    0,  572,  574,  574,  573,  575,  575,
      576,  576,    0,  577,  577,    0,  574,  578,  578,  575,
      576,  576,    0,    0,  577,    0,  574,  574,  578,  575,
        0,  576,  577,  578,  577,  579,  579,    0,  578,  580,
      580,  581,  581,    0,  582,  582,  579,  580,    0,  581,
      580,    0,  581,    0,  579,  582,  579,  583,  583,    0,
      580,    0,  581,  584,  584,  582,    0,  583,  583,  585,
      585,  585,    0,    0,  584,  586,  586,  586,  583,  587,

      587,  587,    0,    0,  584,  588,  588,  588,  589,  589,
      589,  590,  590,  590,  591,  591,  591,  592,  592,  592,
      593,  593,  593,  594,  594,  594,  595,  595,  595,  596,
      596,  596,  597,  597,  597,  598,  598,  598,  599,  599,
      599,  600,  600,  600,  601,  601,  601,  602,  602,  603,
      603,  603,  604,  604,  604,  602,    0,    0,  602,  605,
      605,  605,  606,  606,  606,  607,  607,  607,  602,  608,
      608,  608,  609,  609,  610,  610,  611,  611,  612,  612,
        0,  613,  613,  609,    0,  610,  609,  611,  611,  612,
        0,  612,  613,  609,  613,  610,    0,  611,    0,  612,

      614,  614,  613,  615,  615,  616,  616,    0,  617,  617,
        0,  614,  618,  618,  615,  616,  616,    0,    0,  617,
        0,  614,  614,  618,  615,    0,  616,  617,  618,  617,
      619,  619,    0,  618,  620,  620,  621,  621,    0,  622,
      622,  619,  620,    0,  621,  620,    0,  621,    0,  619,
      622,  619,  623,  623,    0,  620,    0,  621,  624,  624,
      622,    0,  623,  623,  627,  627,  627,    0,    0,  624,
      628,  628,  628,  623,  629,  629,  629,    0,    0,  624,
      630,  630,  630,  631,  631,  631,  632,  632,  632,  649,
      649,  650,  650,  652,  652,  653,  653,    0,  654,  654,

      649,    0,  650,    0,  652,    0,  653,  655,  655,  654,
      649,    0,  650,    0,  652,  654,  653,    0,  655,  654,
      656,  656,  657,  657,    0,  658,  658,    0,  655,  659,
      659,  656,    0,  657,    0,  657,  658,  656,  660,  660,
      659,  656,  658,  657,  661,  661,  658,    0,  660,  660,
      659,    0,  659,  662,  662,  661,  663,  663,    0,  660,
        0,  661,  664,  664,  662,  661,    0,  663,  663,  665,
      665,  665,    0,  664,  662,    0,    0,  663,  666,  666,
      666,    0,    0,  664,  667,  667,  667,  668,  668,  668,
      669,  669,  669,  670,  670,  670,  672,  672,  673,  673,

      675,  675,  676,  676,    0,  677,  677,  672,    0,  673,
        0,  675,    0,  676,  678,  678,  677,  672,    0,  673,
        0,  675,  677,  676,    0,  678,  677,  679,  679,  680,
      680,    0,  681,  681,    0,  678,  682,  682,  679,    0,
      680,    0,  680,  681,  679,  683,  683,  682,  679,  681,
      680,  684,  684,  681,    0,  683,  683,  682,    0,  682,
      685,  685,  684,  686,  686,    0,  683,    0,  684,  687,
      687,  685,  684,    0,  686,  686,  704,  704,    0,    0,
      687,  685,  705,  705,  686,  706,  706,  704,    0,  704,
      687,  707,  707,  705,  709,  709,  706,  704,    0,  707,

      708,  708,  707,  705,  705,  709,  706,    0,    0,  710,
      710,  708,  707,  711,  711,  709,  712,  712,  708,    0,
      710,  708,  710,    0,  711,  713,  713,  712,  714,  714,
      710,  717,  717,    0,  711,    0,  713,  712,    0,  714,
      718,  718,  717,    0,  717,    0,  713,  719,  719,  714,
        0,  718,  717,  721,  721,  720,  720,    0,  719,  722,
      722,  718,  718,  720,  721,    0,  720,    0,  719,    0,
      722,  721,  723,  723,  721,    0,  720,  724,  724,    0,
      722,  725,  725,  723,    0,  723,  726,  726,  724,  727,
      727,    0,  725,  723,  739,  739,    0,  726,  724,    0,

      727,    0,  725,  740,  740,  739,    0,  726,  741,  741,
      727,    0,  739,  740,  740,  739,  742,  742,    0,  741,
      743,  743,    0,    0,  740,  744,  744,  742,    0,  741,
        0,  743,    0,  742,  745,  745,  744,  742,  746,  746,
      743,  743,    0,  744,  745,  745,  744,  747,  747,  746,
      748,  748,  754,  754,    0,  745,  755,  755,  747,  746,
        0,  748,    0,  754,  747,  756,  756,  755,  747,  754,
      748,  748,    0,  754,  757,  757,  756,  755,  756,  758,
      758,  759,  759,  760,  760,  757,  756,    0,    0,  758,
      758,    0,  759,    0,  760,  757,  761,  761,  759,    0,

      758,    0,  759,    0,  760,  762,  762,  761,    0,  761,
      763,  763,  769,  769,  770,  770,  762,  761,  771,  771,
      763,  763,    0,  769,    0,  770,  762,  772,  772,  771,
        0,  763,  770,  769,    0,  770,  773,  773,  772,  771,
      774,  774,  778,  778,    0,  779,  779,  773,  772,  781,
      781,  774,    0,  778,  773,    0,  779,  773,    0,  778,
      781,  774,  779,  778,  782,  782,  779,    0,    0,    0,
      781,    0,    0,    0,    0,  782,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  782,  785,  785,  785,  785,
      785,  785,  785,  785,  786,  786,  786,  786,  786,  786,

      786,  786,  787,  787,  787,  787,  787,  787,  787,  787,
      788,  788,  788,  788,  788,  788,  788,  788,  789,  789,
      789,  789,  789,  789,  789,  789,  790,  790,  790,  790,
      790,  790,  790,  790,  791,    0,    0,  791,  792,    0,
        0,  792,  793,  793,    0,  793,  793,  794,    0,    0,
      794,    0,    0,  794,  795,    0,    0,  795,  796,    0,
        0,    0,  796,  796,  796,  796,  797,    0,    0,  797,
      798,    0,    0,  798,  799,  799,  799,  799,  799,  799,
      799,  800,  800,  800,  800,  800,  800,  800,  801,  801,
      801,  801,  801,  801,  801,  802,    0,    0,  802,    0,

        0,  802,  803,    0,    0,  803,  804,  804,  804,  804,
      804,  804,    0,  804,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
      784,  784
    } ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
/*
 *  Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 *  Copyright (C) 2008-2012 - Scilab Enterprises - Bruno JOFRET
 *
 *  This file must be used under the terms of the CeCILL.
 *  This source file is licensed as described in the file COPYING, which
 *  you should have received as part of this distribution.  The terms
 *  are also available at
 *  http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
 *
 */
#include "isatty.hxx"
#include "parse.hxx"
#include "parser_private.hxx"

#include "context.hxx"

extern "C"
{
#include "charEncoding.h"
#include "sci_malloc.h"
}

static int matrix_level = 0;
static int comment_level = 0;
static int last_token = 0;
static int exit_status = PARSE_ERROR;
static std::string current_file;
static std::string program_name;

static std::string *pstBuffer;

static bool rejected = false;

#define YY_USER_ACTION                          \
 yylloc.last_column += yyleng;

/* -*- Verbose Special Debug -*- */
//#define DEV
//#define TOKENDEV

#ifdef DEV
#define DEBUG(x) std::cout << "[DEBUG] " << x << std::endl;
#else
#define DEBUG(x) /* Nothing */
#endif

#define INITIAL 0
#define SIMPLESTRING 1
#define DOUBLESTRING 2
#define REGIONCOMMENT 3
#define LINECOMMENT 4
#define LINEBREAK 5
#define MATRIX 6
#define SHELLMODE 7
#define BEGINID 8

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 785 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2715 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinIf);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(IF);
}
	YY_BREAK
case 2:
YY_RULE_SETUP
{
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(THEN);
}
	YY_BREAK
case 3:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        // Pop to step out IF
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinElse);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(ELSE);
}
	YY_BREAK
case 4:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinElseIf);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(ELSEIF);
}
	YY_BREAK
case 5:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(END);
}
	YY_BREAK
case 6:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinSelect);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(SELECT);
}
	YY_BREAK
case 7:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinSwitch);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(SWITCH);
}
	YY_BREAK
case 8:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinOtherwise);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(OTHERWISE);
}
	YY_BREAK
case 9:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinCase);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(CASE);
}
	YY_BREAK
case 10:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinFunction);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(FUNCTION);
}
	YY_BREAK
case 11:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(ENDFUNCTION);
}
	YY_BREAK
case 12:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinFunction);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(HIDDENFUNCTION);
}
	YY_BREAK
case 13:
YY_RULE_SETUP
{
    DEBUG("BEGIN(INITIAL)");
 	BEGIN(INITIAL);
    return scan_throw(HIDDEN);
}
	YY_BREAK
case 14:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinFor);
    }
    BEGIN(INITIAL);
    return scan_throw(FOR);
}
	YY_BREAK
case 15:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinWhile);
    }
	BEGIN(INITIAL);
	return scan_throw(WHILE);
}
	YY_BREAK
case 16:
YY_RULE_SETUP
{
	BEGIN(INITIAL);
    return scan_throw(DO);
}
	YY_BREAK
case 17:
YY_RULE_SETUP
{
    	BEGIN(INITIAL);
        return scan_throw(BREAK);
}
	YY_BREAK
case 18:
YY_RULE_SETUP
{
    	BEGIN(INITIAL);
        return scan_throw(CONTINUE);
}
	YY_BREAK
case 19:
YY_RULE_SETUP
{
	ParserSingleInstance::pushControlStatus(Parser::WithinTry);
	BEGIN(INITIAL);
	return scan_throw(TRY);
}
	YY_BREAK
case 20:
YY_RULE_SETUP
{
    // Pop to step out TRY
	ParserSingleInstance::popControlStatus();
	ParserSingleInstance::pushControlStatus(Parser::WithinCatch);
	BEGIN(INITIAL);
	return scan_throw(CATCH);
}
	YY_BREAK
case 21:
YY_RULE_SETUP
{
    BEGIN(INITIAL);
    return scan_throw(RETURN);
}
	YY_BREAK
case 22:
YY_RULE_SETUP
{
    BEGIN(INITIAL);
    return scan_throw(RETURN);
}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
{
        BEGIN(BEGINID);
}
	YY_BREAK

case 24:
YY_RULE_SETUP
{
        wchar_t *pwText = to_wide_string(yytext);
        if (yytext != NULL && pwText == NULL)
        {
            std::string str = "can not convert'";
            str += yytext;
            str += "' to UTF-8";
            exit_status = SCAN_ERROR;
            scan_error("can not convert string to UTF-8");
        }
        yylval.str = new std::wstring(pwText);
	FREE(pwText);
        if (symbol::Context::getInstance()->get(symbol::Symbol(*yylval.str)) != NULL
            && symbol::Context::getInstance()->get(symbol::Symbol(*yylval.str))->isCallable())
        {
            scan_throw(ID);
            BEGIN(SHELLMODE);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(ID);
        }
    }
	YY_BREAK

case 25:
YY_RULE_SETUP
{
  return scan_throw(NOT);
}
	YY_BREAK
case 26:
YY_RULE_SETUP
{
  return scan_throw(DOLLAR);
}
	YY_BREAK
case 27:
YY_RULE_SETUP
{
  return scan_throw(BOOLTRUE);
}
	YY_BREAK
case 28:
YY_RULE_SETUP
{
  return scan_throw(BOOLFALSE);
}
	YY_BREAK
case 29:
YY_RULE_SETUP
{
  return scan_throw(AND);
}
	YY_BREAK
case 30:
YY_RULE_SETUP
{
  return scan_throw(ANDAND);
}
	YY_BREAK
case 31:
YY_RULE_SETUP
{
  return scan_throw(OR);
}
	YY_BREAK
case 32:
YY_RULE_SETUP
{
  return scan_throw(OROR);
}
	YY_BREAK
case 33:
YY_RULE_SETUP
{
  return scan_throw(LPAREN);
}
	YY_BREAK
case 34:
YY_RULE_SETUP
{
  return scan_throw(RPAREN);
}
	YY_BREAK
case 35:
YY_RULE_SETUP
{
	scan_step();
  return scan_throw(SEMI);
}
	YY_BREAK
case 36:
YY_RULE_SETUP
{
	scan_step();
  return scan_throw(COMMA);
}
	YY_BREAK
case 37:
YY_RULE_SETUP
{
  return scan_throw(COLON);
}
	YY_BREAK
case 38:
YY_RULE_SETUP
{
  yy_push_state(MATRIX);
  ParserSingleInstance::pushControlStatus(Parser::WithinCell);
  return scan_throw(LBRACE);
}
	YY_BREAK
case 39:
YY_RULE_SETUP
{
  return scan_throw(RBRACE);
}
	YY_BREAK
case 40:
YY_RULE_SETUP
{
  return scan_throw(DOTQUOTE);
}
	YY_BREAK
case 41:
YY_RULE_SETUP
{
  return scan_throw(DOTTIMES);
}
	YY_BREAK
case 42:
YY_RULE_SETUP
{
  return scan_throw(DOTRDIVIDE);
}
	YY_BREAK
case 43:
YY_RULE_SETUP
{
  return scan_throw(DOTLDIVIDE);
}
	YY_BREAK
case 44:
YY_RULE_SETUP
{
  return scan_throw(DOTPOWER);
}
	YY_BREAK
case 45:
YY_RULE_SETUP
{
  return scan_throw(MINUS);
}
	YY_BREAK
case 46:
YY_RULE_SETUP
{
  return scan_throw(PLUS);
}
	YY_BREAK
case 47:
YY_RULE_SETUP
{
  return scan_throw(TIMES);
}
	YY_BREAK
case 48:
YY_RULE_SETUP
{
  return scan_throw(RDIVIDE);
}
	YY_BREAK
case 49:
YY_RULE_SETUP
{
  return scan_throw(LDIVIDE);
}
	YY_BREAK
case 50:
YY_RULE_SETUP
{
  return scan_throw(POWER);
}
	YY_BREAK
case 51:
YY_RULE_SETUP
{
  return scan_throw(KRONTIMES);
}
	YY_BREAK
case 52:
YY_RULE_SETUP
{
  return scan_throw(KRONRDIVIDE);
}
	YY_BREAK
case 53:
YY_RULE_SETUP
{
  return scan_throw(KRONLDIVIDE);
}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
{
    unput(yytext[yyleng - 1]);
    return scan_throw(CONTROLTIMES);
}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
{
    unput(yytext[yyleng - 1]);
    return scan_throw(CONTROLRDIVIDE);
}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
{
    unput(yytext[yyleng - 1]);
    return scan_throw(CONTROLLDIVIDE);
}
	YY_BREAK
case 57:
YY_RULE_SETUP
{
  return scan_throw(EQ);
}
	YY_BREAK
case 58:
YY_RULE_SETUP
{
  return scan_throw(NE);
}
	YY_BREAK
case 59:
YY_RULE_SETUP
{
  return scan_throw(LT);
}
	YY_BREAK
case 60:
YY_RULE_SETUP
{
  return scan_throw(GT);
}
	YY_BREAK
case 61:
YY_RULE_SETUP
{
  return scan_throw(LE);
}
	YY_BREAK
case 62:
YY_RULE_SETUP
{
  return scan_throw(GE);
}
	YY_BREAK
case 63:
YY_RULE_SETUP
{
  return scan_throw(ASSIGN);
 }
	YY_BREAK
case 64:
YY_RULE_SETUP
{
  DEBUG("yy_push_state(MATRIX)");
  yy_push_state(MATRIX);
  ParserSingleInstance::pushControlStatus(Parser::WithinMatrix);
  return scan_throw(LBRACK);
}
	YY_BREAK
case 65:
YY_RULE_SETUP
{
  return scan_throw(RBRACK);
}
	YY_BREAK
case 66:
YY_RULE_SETUP
{
  return scan_throw(DOT);
}
	YY_BREAK
case 67:
YY_RULE_SETUP
{
    ParserSingleInstance::pushControlStatus(Parser::WithinDots);
    yy_push_state(LINEBREAK);
}
	YY_BREAK
case 68:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] INTEGER : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(VARINT);
}
	YY_BREAK
case 69:
YY_RULE_SETUP
{
  scan_exponent_convert(yytext);
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
  scan_step();
  return scan_throw(VARFLOAT);
}
	YY_BREAK
case 70:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] NUMBER : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(NUM);
}
	YY_BREAK
case 71:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] LITTLE : " << yytext << std::endl;
#endif
  scan_step();
  return scan_throw(NUM);
}
	YY_BREAK
case 72:
YY_RULE_SETUP
{
    wchar_t *pwText = to_wide_string(yytext);
    if (yytext != NULL && pwText == NULL)
    {
        std::string str = "can not convert'";
        str += yytext;
        str += "' to UTF-8";
        exit_status = SCAN_ERROR;
        scan_error("can not convert string to UTF-8");
    }
    yylval.str = new std::wstring(pwText);
    FREE(pwText);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] ID : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(ID);
}
	YY_BREAK
case 73:
YY_RULE_SETUP
{
  yylval.comment = new std::wstring();
  comment_level = 1;
  ParserSingleInstance::pushControlStatus(Parser::WithinBlockComment);
  yy_push_state(REGIONCOMMENT);
}
	YY_BREAK
case 74:
YY_RULE_SETUP
{
  pstBuffer = new std::string();
  yy_push_state(LINECOMMENT);
}
	YY_BREAK
case 75:
YY_RULE_SETUP
{
  pstBuffer = new std::string();
  yy_push_state(DOUBLESTRING);
}
	YY_BREAK
case 76:
YY_RULE_SETUP
{
  /*
  ** Matrix Transposition special behaviour
  ** ID' []' toto()' are transposition call
  */
  if (last_token == ID
      || last_token == RBRACK
      || last_token == RPAREN
      || last_token == RBRACE
      || last_token == VARINT
      || last_token == VARFLOAT
      || last_token == NUM
      || last_token == BOOLTRUE
      || last_token == BOOLFALSE)
  {
      return scan_throw(QUOTE);
  }
  else
  {
      pstBuffer = new std::string();
      yy_push_state(SIMPLESTRING);
  }
}
	YY_BREAK
case 77:
YY_RULE_SETUP
{
  scan_step();
  scan_throw(SPACES);
}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 1;
  yylloc.last_column = 1;
  scan_step();
  if (last_token != EOL) {
      return scan_throw(EOL);
  }

}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 1;
  yylloc.last_column = 1;
  scan_step();
  if (last_token != EOL)
  {
      return scan_throw(EOL);
  }
  scan_throw(EOL);
}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 2;
  yylloc.last_column = 1;
  scan_step();
  if (last_token != EOL)
  {
      return scan_throw(EOL);
  }
  scan_throw(EOL);
}
	YY_BREAK
case 81:
YY_RULE_SETUP
{
    std::string str = "unexpected token '";
    str += yytext;
    str += "'";
    exit_status = SCAN_ERROR;
    scan_error(str);
}
	YY_BREAK

case 82:
YY_RULE_SETUP
{
      unput(yytext[yyleng -1]);
      if (last_token == ID
          || last_token == RPAREN
          || last_token == QUOTE
          || last_token == VARINT
          || last_token == VARFLOAT
          || last_token == NUM)
      {
          return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 83:
YY_RULE_SETUP
{
      return scan_throw(COLON);
  }
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
{
      yylloc.last_line += 1;
      yylloc.last_column = 1;
      if(last_token != DOTS && last_token != EOL)
      {
          return scan_throw(EOL);
      }
      scan_throw(EOL);
  }
	YY_BREAK
case 85:
YY_RULE_SETUP
{
    DEBUG("yy_pop_state()");
    yy_pop_state();
    ParserSingleInstance::popControlStatus();
    return scan_throw(RBRACK);
  }
	YY_BREAK
case 86:
YY_RULE_SETUP
{
    yy_pop_state();
    ParserSingleInstance::popControlStatus();
    return scan_throw(RBRACE);
  }
	YY_BREAK
case 87:
case 88:
YY_RULE_SETUP
{
    return scan_throw(PLUS);
  }
	YY_BREAK
case 89:
case 90:
YY_RULE_SETUP
{
    return scan_throw(MINUS);
  }
	YY_BREAK
case 91:
YY_RULE_SETUP
{
    // no need to unput the '+'
    if (last_token != LBRACK
       && last_token != EOL
       && last_token != SEMI
       && last_token != COMMA)
   {
       return scan_throw(COMMA);
   }  
  }
	YY_BREAK
case 92:
YY_RULE_SETUP
{
    unput('-');
    if (last_token != LBRACK
       && last_token != EOL
       && last_token != SEMI
       && last_token != COMMA)
   {
       return scan_throw(COMMA);
   }  
  }
	YY_BREAK
case 93:
YY_RULE_SETUP
{
    std::string str = "unexpected token '";
    str += yytext;
    str += "' within a matrix.";
    exit_status = SCAN_ERROR;
    scan_error(str);
  }
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
{
      /* Just do nothing */
      yylloc.last_line += 1;
      yylloc.last_column = 1;
      scan_step();
      scan_throw(EOL);
  }
	YY_BREAK
case 95:
YY_RULE_SETUP
{
      /* Just do nothing */
      pstBuffer = new std::string();
      yy_push_state(LINECOMMENT);
      scan_throw(DOTS);
  }
	YY_BREAK
case YY_STATE_EOF(MATRIX):
{
      yy_pop_state();
  }
	YY_BREAK

case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
{
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    scan_step();
    yy_pop_state();
    ParserSingleInstance::popControlStatus();
  }
	YY_BREAK
case 97:
YY_RULE_SETUP
{
    ++comment_level;
    yy_push_state(REGIONCOMMENT);
  }
	YY_BREAK
case 98:
YY_RULE_SETUP
{
    scan_throw(DOTS);
    pstBuffer = new std::string();
    yy_push_state(LINECOMMENT);
  }
	YY_BREAK
case 99:
YY_RULE_SETUP
{
      /* Do nothing... */
  }
	YY_BREAK
case YY_STATE_EOF(LINEBREAK):
{
      yy_pop_state();
  }
	YY_BREAK
case 100:
YY_RULE_SETUP
{
    std::string str = "unexpected token '";
    str += yytext;
    str += "' after line break with .. or ...";
    exit_status = SCAN_ERROR;
    scan_error(str);
  }
	YY_BREAK

case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
{
    //yylloc.last_line += 1;
    //yylloc.last_column = 1;
    //scan_step();
    yy_pop_state();
    for (int i = yyleng - 1 ; i >= 0 ; --i)
    {
        //std::cerr << "Unputting i = {" << i << "}" << std::endl;
        //std::cerr << "Unputting {" << yytext[i] << "}" << std::endl;
        unput(yytext[i]);
        yylloc.last_column--;
    }
    /*
    ** To forgot comments after lines break
    */
    if (last_token != DOTS)
    {
        //std::cerr << "pstBuffer = {" << *pstBuffer << "}" << std::endl;
        //std::cerr << "pstBuffer->c_str() = {" << pstBuffer->c_str() << "}" << std::endl;
        wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
        //std::wcerr << L"pwstBuffer = W{" << pwstBuffer << L"}" << std::endl;
        if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
        {
            std::string str = "can not convert'";
            str += pstBuffer->c_str();
            str += "' to UTF-8";
            exit_status = SCAN_ERROR;
            scan_error("can not convert string to UTF-8");
        }
        yylval.comment = new std::wstring(pwstBuffer);
        delete pstBuffer;
        FREE (pwstBuffer);
        return scan_throw(COMMENT);
    }
  }
	YY_BREAK
case YY_STATE_EOF(LINECOMMENT):
{
    yy_pop_state();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
    if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
    {
        std::string str = "can not convert'";
        str += pstBuffer->c_str();
        str += "' to UTF-8";
        exit_status = SCAN_ERROR;
        scan_error("can not convert string to UTF-8");
    }
    yylval.comment = new std::wstring(pwstBuffer);
    delete pstBuffer;
    FREE (pwstBuffer);
    return scan_throw(COMMENT);
  }
	YY_BREAK
case 102:
YY_RULE_SETUP
{
     // Put the char in a temporary CHAR buffer to go through UTF-8 trouble
     // only translate to WCHAR_T when popping state.
     *pstBuffer += yytext;
  }
	YY_BREAK

case 103:
YY_RULE_SETUP
{
    --comment_level;
    if (comment_level == 0) {
      ParserSingleInstance::popControlStatus();
      yy_pop_state();
      //return scan_throw(BLOCKCOMMENT);
    }
  }
	YY_BREAK
case 104:
YY_RULE_SETUP
{
    ++comment_level;
    yy_push_state(REGIONCOMMENT);
  }
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
{
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    scan_step();
    *yylval.comment += L"\n//";
  }
	YY_BREAK
case 106:
YY_RULE_SETUP
{
      wchar_t *pwText = to_wide_string(yytext);
      *yylval.comment += std::wstring(pwText);
      FREE(pwText);
  }
	YY_BREAK
case YY_STATE_EOF(REGIONCOMMENT):
{
      yy_pop_state();
//    std::string str = "unexpected end of file in a comment";
//    exit_status = SCAN_ERROR;
//    scan_error(str);
  }
	YY_BREAK

case 107:
YY_RULE_SETUP
{
    *pstBuffer += "\"";
  }
	YY_BREAK
case 108:
YY_RULE_SETUP
{
    *pstBuffer += "'";
  }
	YY_BREAK
case 109:
YY_RULE_SETUP
{
    *pstBuffer += "\"";
  }
	YY_BREAK
case 110:
YY_RULE_SETUP
{
    *pstBuffer += "'";
  }
	YY_BREAK
case 111:
YY_RULE_SETUP
{
    yy_pop_state();
    scan_step();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
    if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
    {
        std::string str = "can not convert'";
        str += pstBuffer->c_str();
        str += "' to UTF-8";
        exit_status = SCAN_ERROR;
        scan_error("can not convert string to UTF-8");
    }
    yylval.str = new std::wstring(pwstBuffer);
    delete pstBuffer;
    FREE(pwstBuffer);
    return scan_throw(STR);
  }
	YY_BREAK
case 112:
YY_RULE_SETUP
{
    std::string str = "Heterogeneous string detected, starting with ' and ending with \".";
    exit_status = SCAN_ERROR;
    scan_error(str);
  }
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
{
      /* Do nothing... Just skip */
  }
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
{
    std::string str = "unexpected end of line in a string.";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yylloc.last_line += 1;
    yylloc.last_column = 1;
  }
	YY_BREAK
case YY_STATE_EOF(SIMPLESTRING):
{
    std::string str = "unexpected end of file in a string.";
    exit_status = SCAN_ERROR;
    scan_error(str);
  }
	YY_BREAK
case 115:
YY_RULE_SETUP
{
    scan_step();
    *pstBuffer += yytext;
  }
	YY_BREAK

case 116:
YY_RULE_SETUP
{
    *pstBuffer += "\"";
  }
	YY_BREAK
case 117:
YY_RULE_SETUP
{
    *pstBuffer += "'";
  }
	YY_BREAK
case 118:
YY_RULE_SETUP
{
    *pstBuffer += "\"";
  }
	YY_BREAK
case 119:
YY_RULE_SETUP
{
    *pstBuffer += "'";
  }
	YY_BREAK
case 120:
YY_RULE_SETUP
{
    yy_pop_state();
    scan_step();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
    if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
    {
        std::string str = "can not convert'";
        str += pstBuffer->c_str();
        str += "' to UTF-8";
        exit_status = SCAN_ERROR;
        scan_error("can not convert string to UTF-8");
    }
    yylval.str = new std::wstring(pwstBuffer);
    delete pstBuffer;
    FREE(pwstBuffer);
    return scan_throw(STR);
  }
	YY_BREAK
case 121:
YY_RULE_SETUP
{
    std::string str = "Heterogeneous string detected, starting with \" and ending with '.";
    exit_status = SCAN_ERROR;
    scan_error(str);
  }
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
{
      /* Do nothing... Just skip */
  }
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
{
    std::string str = "unexpected end of line in a string";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yylloc.last_line += 1;
    yylloc.last_column = 1;
  }
	YY_BREAK
case YY_STATE_EOF(DOUBLESTRING):
{
    std::string str = "unexpected end of file in a string";
    exit_status = SCAN_ERROR;
    scan_error(str);
  }
	YY_BREAK
case 124:
YY_RULE_SETUP
{
   scan_step();
   *pstBuffer += yytext;
  }
	YY_BREAK

case 125:
YY_RULE_SETUP
{
        if (last_token == ID)
        {
            scan_throw(SPACES);
            return ID;
        }
    }
	YY_BREAK
case 126:
YY_RULE_SETUP
{
        BEGIN(INITIAL);
        scan_step();
        return scan_throw(SEMI);
    }
	YY_BREAK
case 127:
YY_RULE_SETUP
{
        BEGIN(INITIAL);
        scan_step();
        return scan_throw(COMMA);
    }
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
{
        BEGIN(INITIAL);
        yylloc.last_line += 1;
        yylloc.last_column = 1;
        scan_step();
        return scan_throw(EOL);
    }
	YY_BREAK
case 129:
YY_RULE_SETUP
{
        if (last_token == STR)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(ASSIGN);
        }
    }
	YY_BREAK
case 130:
YY_RULE_SETUP
{
        if (last_token == STR)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(LPAREN);
        }
    }
	YY_BREAK
case 131:
YY_RULE_SETUP
{
        if (last_token == STR)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(LT);
        }
    }
	YY_BREAK
case 132:
YY_RULE_SETUP
{
        if (last_token == STR)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(GT);
        }
    }
	YY_BREAK
case 133:
YY_RULE_SETUP
{
        if (last_token == STR)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(NOT);
        }
    }
	YY_BREAK
case 134:
YY_RULE_SETUP
{
	wchar_t *pwText = to_wide_string(yytext);
        yylval.str = new std::wstring(pwText);
	FREE(pwText);
        return scan_throw(STR);
    }
	YY_BREAK
case YY_STATE_EOF(SHELLMODE):
{
        BEGIN(INITIAL);
    }
	YY_BREAK

case 135:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(BEGINID):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 785 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 785 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 784);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

int scan_throw(int token) {
  last_token = token;
#ifdef DEV
  std::cout << "--> [DEBUG] TOKEN : " << token << std::endl;
#endif
  return token;
}

int get_last_token() {
    return last_token;
}

void scan_step() {
  yylloc.first_line = yylloc.last_line;
  yylloc.first_column = yylloc.last_column;
}

void scan_error(std::string msg)
{
    wchar_t* pstMsg = to_wide_string(msg.c_str());

    //std::wcerr << pstMsg << std::endl;
    ParserSingleInstance::PrintError(pstMsg);
    ParserSingleInstance::setExitStatus(Parser::Failed);
    ParserSingleInstance::resetControlStatus();
    FREE(pstMsg);
    last_token = YYEOF;
    BEGIN(INITIAL);
}

/*
** convert floating numbers to C standard
** 1.2d-3 -> 1.2e-3
** 1.2D-3 -> 1.2e-3
*/
void scan_exponent_convert(char *in)
{
  char *pString;
  while((pString=strpbrk(in,"d"))!=NULL)
    {
      *pString='e';
    }
  while((pString=strpbrk(in,"D"))!=NULL)
    {
      *pString='e';
    }
}

#ifdef _MSC_VER
int isatty (int desc)
{
  return 0;
}
#endif

