
#line 3 "src/cpp/parse/scanscilab.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 39
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types.
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

#define YY_LESS_LINENO(n)
#define YY_LINENO_REWIND_TO(ptr)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
{
    FILE *yy_input_file;

    char *yy_ch_buf;		/* input buffer */
    char *yy_buf_pos;		/* current position in input buffer */

    /* Size of input buffer in bytes, not including room for EOB
     * characters.
     */
    yy_size_t yy_buf_size;

    /* Number of characters read into yy_ch_buf, not including EOB
     * characters.
     */
    yy_size_t yy_n_chars;

    /* Whether we "own" the buffer - i.e., we know we created it,
     * and can realloc() it to grow it, and should free() it to
     * delete it.
     */
    int yy_is_our_buffer;

    /* Whether this is an "interactive" input source; if so, and
     * if we're using stdio for input, then we want to use getc()
     * instead of fread(), to make sure we stop fetching input after
     * each newline.
     */
    int yy_is_interactive;

    /* Whether we're considered to be at the beginning of a line.
     * If so, '^' rules will be active on the next match, otherwise
     * not.
     */
    int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

    /* Whether to try to fill the input buffer when we reach the
     * end of it.
     */
    int yy_fill_buffer;

    int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
    /* When an EOF's been seen but there's still some text to process
     * then we mark the buffer as YY_EOF_PENDING, to indicate that we
     * shouldn't try reading from the input source any more.  We might
     * still have a bunch of tokens to match, though, because of
     * possible backing-up.
     *
     * When we actually see the EOF, we change the status to "new"
     * (via yyrestart()), so that the user can continue scanning by
     * just pointing yyin at a new input file.
     */
#define YY_BUFFER_EOF_PENDING 2

};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file, int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b, FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes, yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *, yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 142
#define YY_END_OF_BUFFER 143
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
{
    flex_int32_t yy_verify;
    flex_int32_t yy_nxt;
};
static yyconst flex_int16_t yy_acclist[978] =
{
    0,
    16408,  120,  120,  130,  130,  110,  110,  106,  106,  143,
    83,  142,   79,   83,  142,   80,  142,   80,   83,  142,
    77,   83,  142,   74,   83,  142,   27,   83,  142,   74,
    83,  142,   30,   83,  142,   78,   83,  142,   34,   83,
    142,   35,   83,  142,   48,   83,  142,   47,   83,  142,
    37,   83,  142,   46,   83,  142,   67,   83,  142,   49,
    83,  142,   69,   83,  142,   38,   83,  142,   36,   83,
    142,   60,   83,  142,   64,   83,  142,   61,   83,  142,
    74,   83,  142,   26,   83,  142,   65,   83,  142,   50,
    83,  142,   66,   83,  142,   51,   83,  142,   74,   83,

    142,   74,   83,  142,   74,   83,  142,   74,   83,  142,
    74,   83,  142,   74,   83,  142,   74,   83,  142,   74,
    83,  142,   74,   83,  142,   74,   83,  142,   74,   83,
    142,   74,   83,  142,   39,   83,  142,   32,   83,  142,
    40,   83,  142,   26,   83,  142,   83,  142,   83,  142,
    83,  142,   83,  142,   83,  142,   83,  142,   83,  142,
    83,  142,   83,  142,   79,   83,  142, 16408,   74,   83,
    142,   27,   83,  142,   74,   83,  142,   74,   83,  142,
    74,   83,  142,   74,   83,  142,   74,   83,  142,   74,
    83,  142,   74,   83,  142,   74,   83,  142,   74,   83,

    142,   74,   83,  142,   74,   83,  142,   74,   83,  142,
    74,   83,  142,   74,   83,  142,   83,  142,   83,  142,
    83,  142,   83,  142,   83,  142,   83,  142,   83,  142,
    83,  142,   83,  142,  120,  121,  142,  119,  142,  119,
    121,  142,  117,  121,  142,  116,  121,  142,  121,  142,
    130,  131,  142,  129,  142,  129,  131,  142,  126,  131,
    142,  127,  131,  142,  131,  142,  110,  111,  142,  109,
    142,  109,  111,  142,  111,  142,  111,  142,  106,  142,
    105,  142,  105,  142,  104,  142,  103,  104,  142,  100,
    142,  100,  104,  142,  104,  142,   97,  142,   79,   97,

    142,   88,  142,   88,   97,  142,   77,   97,  142,   74,
    97,  142,   27,   97,  142,   74,   97,  142,   30,   97,
    142,   78,   97,  142,   84,   86,   97,  142,   85,   97,
    142,   48,   97,  142,   91,   97,  142,   37,   97,  142,
    93,   97,  142,   67,   97,  142,   49,   97,  142,   69,
    97,  142,   38,   87,   97,  142,   36,   97,  142,   60,
    97,  142,   64,   97,  142,   61,   97,  142,   26,   97,
    142,   65,   97,  142,   50,   97,  142,   89,   97,  142,
    51,   97,  142,   39,   97,  142,   32,   97,  142,   90,
    97,  142,   26,   97,  142,   97,  142,   97,  142,   97,

    142,   97,  142,   97,  142,   97,  142,   97,  142,   97,
    142,  141,  142,  132,  142,  135,  142,  135,  142,   77,
    142,   78,  142,  137,  141,  142,  134,  142,  133,  142,
    138,  141,  142,  136,  141,  142,  139,  141,  142,  140,
    141,  142,  142,   25,  142,  142,   25,  142,   25,  142,
    25,  142,   25,  142,   25,  142,   25,  142,   25,  142,
    25,  142,   25,  142,   25,  142,   25,  142,   25,  142,
    25,  142,  142,  142,  142,  142,  142,  142,  142,  142,
    79,   81,   81,   80,   74,   74,   74,   29,   74,   28,
    74,   31,   51,   41,   42,   68,   43,   73,   44,   45,

    75,   76,   72,   69,   62,   59,   58,   63,   74,   74,
    74,   17,   74,   74,   74,   74,   74,   74,    2,   74,
    74,   74,   74,   74,   74,   74,   74,   33,   74,   79,
    16408,   74,   74,   74,   29,   74,   28,   74,   74,   74,
    74,   17,   74,   74,   74,   74,   74,   74,    2,   74,
    74,   74,   74,   74,   74,   74,   74,   74,  120,  119,
    112,  113,  114,  115,  130,  129,  122,  123,  124,  125,
    110,  109,  107,  108,  106,  105,  103,  100,  101,  102,
    79,   86,   95,   96,   87,   88,   87,  141,  132,  135,
    25,   25,   25,   25,   25,   25,   17,   25,   25,   25,

    25,   25,   25,    2,   25,   25,   25,   25,   25,   25,
    25,   25,   25,   82,   82,   74,   55,   52,   53,   54,
    56,   72,   70,   71,   57,   74,   74,   74,   74,   74,
    6,   74,   15,   74,   74,   74,   74,   74,   74,   74,
    74,   74,   20,   74,   74,    1,   74, 8216,   74,   74,
    74,   74,   74,   74,    6,   74,   15,   74,   74,   74,
    74,   74,   74,   74,   74,   74,   20,   74,   74,    1,
    74,  118,  118,  128,  128,   92,   94,   98,   98,   25,
    25,   25,   25,   25,   25,    6,   25,   15,   25,   25,
    25,   25,   25,   25,   25,   25,   25,   20,   25,   25,

    74,   74,   10,   74,   74,   74,    4,   74,   74,   74,
    74,   74,   74,   74,   74,   74,    3,   74,   74,    1,
    1,   74,    1,    1,    1,    1,    1,    1,    1,    1,
    74,   74,   74,   10,   74,   74,   74,    4,   74,   74,
    74,   74,   74,   74,   74,   74,   74,    3,   74,   74,
    1,    1,   74,    1,    1,    1,    1,    1,    1,    1,
    1,   74,   99,   25,   25,   10,   25,   25,   25,    4,
    25,   25,   25,   25,   25,   25,   25,   25,   25,    3,
    25,   25,   25,   74,   74,   74,   18,   74,   21,   74,
    74,   74,   74,   74,   74,   74,   74,   74,   74,   74,

    16,   74,    1,    1,    1,    1,    1,    1,    1,   74,
    74,   74,   18,   74,   21,   74,   74,   74,   74,   74,
    74,   74,   74,   74,   74,   74,   16,   74,    1, 8216,
    1,    1,    1,    1,    1,    1,    1,   25,   25,   25,
    18,   25,   21,   25,   25,   25,   25,   25,   25,   25,
    25,   25,   25,   25,   16,   25,   74,   74,    5,   74,
    74,   74,   14,   74,   74,   23,   74,   22,   74,    7,
    74,    8,   74,    1,    1,    1,   74,   74,    5,   74,
    74,   74,   14,   74,   74,   23,   74,   22,   74,    7,
    74,    8,   74,    1,    1,    1,   25,   25,    5,   25,

    25,   25,   14,   25,   25,   23,   25,   22,   25,    7,
    25,    8,   25,   74,   74,   74,   74,   74,    1,   74,
    74,   74,   74,   74,   74,    1,   74,   25,   25,   25,
    25,   25,   74,   19,   74,   74,   11,   74,   74,   74,
    19,   74,   74,   11,   74,   74,   25,   19,   25,   25,
    11,   25,   25,   13,   74,   74,    9,   74,   13,   74,
    74,    9,   74,   13,   25,   25,    9,   25,   74,   74,
    25,   12,   74,   12,   74,   12,   25
} ;

static yyconst flex_int16_t yy_accept[846] =
{
    0,
    1,    1,    2,    3,    4,    5,    6,    7,    8,    9,
    10,   10,   10,   10,   10,   10,   10,   10,   10,   11,
    13,   16,   18,   21,   24,   27,   30,   33,   36,   39,
    42,   45,   48,   51,   54,   57,   60,   63,   66,   69,
    72,   75,   78,   81,   84,   87,   90,   93,   96,   99,
    102,  105,  108,  111,  114,  117,  120,  123,  126,  129,
    132,  135,  138,  141,  144,  147,  149,  151,  153,  155,
    157,  159,  161,  163,  165,  169,  172,  175,  178,  181,
    184,  187,  190,  193,  196,  199,  202,  205,  208,  211,
    214,  217,  219,  221,  223,  225,  227,  229,  231,  233,

    235,  238,  240,  243,  246,  249,  251,  254,  256,  259,
    262,  265,  267,  270,  272,  275,  277,  279,  281,  283,
    285,  287,  290,  292,  295,  297,  299,  302,  304,  307,
    310,  313,  316,  319,  322,  325,  329,  332,  335,  338,
    341,  344,  347,  350,  353,  357,  360,  363,  366,  369,
    372,  375,  378,  381,  384,  387,  390,  393,  396,  398,
    400,  402,  404,  406,  408,  410,  412,  414,  416,  418,
    420,  422,  424,  427,  429,  431,  434,  437,  440,  443,
    444,  446,  447,  449,  451,  453,  455,  457,  459,  461,
    463,  465,  467,  469,  471,  473,  474,  475,  476,  477,

    478,  479,  480,  481,  482,  483,  484,  484,  484,  485,
    486,  487,  487,  487,  487,  487,  487,  487,  487,  487,
    488,  488,  488,  488,  488,  488,  488,  488,  488,  490,
    492,  493,  494,  494,  495,  496,  497,  498,  499,  500,
    501,  502,  502,  503,  504,  505,  505,  505,  505,  506,
    507,  507,  508,  508,  509,  509,  509,  510,  511,  512,
    514,  515,  516,  517,  518,  519,  521,  522,  523,  524,
    525,  526,  527,  528,  529,  529,  530,  530,  530,  530,
    530,  530,  530,  530,  530,  532,  532,  532,  532,  532,
    532,  532,  532,  532,  532,  532,  532,  533,  534,  534,

    534,  534,  534,  534,  534,  534,  534,  535,  535,  535,
    535,  535,  535,  535,  535,  535,  537,  539,  540,  541,
    542,  544,  545,  546,  547,  548,  549,  551,  552,  553,
    554,  555,  556,  557,  558,  559,  559,  559,  559,  559,
    559,  559,  559,  559,  560,  561,  562,  563,  564,  565,
    565,  566,  567,  568,  569,  570,  571,  571,  572,  573,
    574,  575,  576,  577,  578,  579,  580,  581,  582,  583,
    584,  585,  586,  587,  587,  588,  589,  590,  591,  592,
    593,  593,  593,  593,  593,  593,  593,  593,  593,  594,
    594,  594,  594,  594,  594,  594,  594,  594,  595,  596,

    597,  599,  600,  601,  602,  603,  604,  606,  607,  608,
    609,  610,  611,  612,  613,  614,  614,  614,  614,  614,
    614,  614,  614,  615,  616,  617,  617,  617,  617,  617,
    617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
    618,  619,  620,  621,  622,  623,  623,  624,  624,  625,
    626,  627,  628,  629,  630,  631,  633,  635,  636,  637,
    638,  639,  640,  641,  642,  643,  645,  646,  648,  648,
    648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
    648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
    648,  648,  648,  648,  648,  648,  648,  649,  650,  650,

    650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
    650,  650,  650,  651,  652,  653,  654,  655,  657,  659,
    660,  661,  662,  663,  664,  665,  666,  667,  669,  670,
    672,  672,  672,  672,  673,  674,  675,  676,  677,  678,
    678,  679,  680,  680,  681,  681,  681,  681,  681,  681,
    681,  681,  681,  681,  681,  681,  681,  681,  681,  682,
    683,  684,  685,  686,  688,  690,  691,  692,  693,  694,
    695,  696,  697,  698,  700,  701,  701,  701,  701,  702,
    702,  702,  702,  702,  702,  702,  703,  705,  706,  707,
    709,  710,  711,  712,  713,  714,  715,  716,  717,  719,

    720,  721,  723,  724,  725,  726,  727,  728,  729,  730,
    731,  732,  732,  732,  732,  732,  732,  732,  732,  732,
    732,  732,  732,  732,  732,  732,  732,  732,  732,  733,
    733,  733,  733,  733,  733,  733,  734,  736,  737,  738,
    740,  741,  742,  743,  744,  745,  746,  747,  748,  750,
    751,  752,  754,  755,  756,  757,  758,  759,  760,  761,
    762,  763,  764,  765,  765,  765,  765,  765,  765,  765,
    766,  768,  769,  770,  772,  773,  774,  775,  776,  777,
    778,  779,  780,  782,  783,  784,  785,  786,  787,  789,
    791,  792,  793,  794,  795,  796,  797,  798,  799,  800,

    801,  803,  804,  805,  806,  807,  808,  809,  810,  810,
    810,  810,  810,  810,  810,  810,  811,  812,  813,  815,
    817,  818,  819,  820,  821,  822,  823,  824,  825,  826,
    827,  829,  831,  832,  833,  834,  835,  836,  837,  838,
    839,  840,  841,  843,  845,  846,  847,  848,  849,  850,
    851,  852,  853,  854,  855,  857,  858,  859,  861,  862,
    863,  865,  866,  868,  870,  872,  874,  875,  876,  877,
    877,  877,  878,  879,  881,  882,  883,  885,  886,  888,
    890,  892,  894,  895,  896,  897,  898,  899,  901,  902,
    903,  905,  906,  908,  910,  912,  914,  915,  916,  917,

    918,  919,  921,  922,  923,  924,  925,  926,  928,  929,
    930,  931,  932,  933,  934,  936,  937,  939,  940,  941,
    943,  944,  946,  947,  948,  950,  951,  953,  954,  956,
    957,  959,  961,  962,  964,  966,  967,  969,  970,  971,
    972,  974,  976,  978,  978
} ;

static yyconst flex_int32_t yy_ec[256] =
{
    0,
    1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
    2,    2,    4,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    2,    1,    5,    6,    7,    8,    9,   10,   11,
    12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
    19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
    23,   24,   25,   26,   25,   25,   25,   27,   28,   29,
    25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
    25,   25,   25,   30,   25,   25,   25,   25,   25,   25,
    31,   32,   33,   34,   25,    1,   35,   36,   37,   38,

    39,   40,   25,   41,   42,   25,   43,   44,   45,   46,
    47,   25,   25,   48,   49,   50,   51,   25,   52,   25,
    53,   25,   54,   55,   56,   57,    1,   58,   58,   58,
    58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
    58,   58,   58,   59,   59,   59,   59,   59,   59,   59,
    59,   59,   59,   59,   59,   59,   59,   59,   59,   60,
    60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
    60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
    60,   60,   60,   60,   60,   60,   61,   60,   60,   60,
    62,    1,    1,   63,   63,   63,   63,   63,   63,   63,

    63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
    63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
    63,   63,   63,   64,   65,   65,   65,   65,   65,   65,
    65,   65,   65,   65,   65,   65,   66,   67,   68,   69,
    70,   70,   70,   71,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1
} ;

static yyconst flex_int32_t yy_meta[72] =
{
    0,
    1,    2,    3,    4,    5,    6,    6,    7,    1,    5,
    8,    1,    9,    1,   10,    1,   11,    9,   12,    1,
    10,    8,    8,    8,    6,    8,    6,    6,    6,    6,
    1,    1,    1,    1,    6,    6,    6,    6,    6,    6,
    6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
    6,    6,    6,    1,    1,    1,    8,    1,    1,    1,
    1,    1,    6,    6,    6,    6,    6,    6,    6,    6,
    6
} ;

static yyconst flex_int16_t yy_base[871] =
{
    0,
    0,   71,  140,  143,  151,  159,  162,  168,  148,  155,
    175,  180,  198,    0,  268,  324,  381,    0, 2136, 3690,
    185,  272,  282, 3690,  241,  250,  424, 2117, 3690, 3690,
    3690,  157, 3690, 3690, 3690,  323,  177,  332, 3690, 3690,
    275,  273,  278,  314,  300, 3690, 2102, 3690, 3690,  427,
    431,  429,  323,  433,  456,  470,  472,  474,  478,  486,
    502, 3690, 2050, 3690,  335,  316,  270,  479,  133,  486,
    495,  499,  504, 2042,  565,  635,  510,  705,  553,  556,
    560,  558,  572,  609,  611,  614,  617,  633,  639,  636,
    679,  565,  489,  634,  138,  652,  663,  656,  678, 2040,

    0, 3690, 2092,  290,  351, 2075,    0, 3690, 2085,  460,
    587, 2064,    0, 3690, 2071, 2053, 2053,    0, 3690, 2054,
    3690, 2054, 3690, 1947,  581, 3690,  740,  726,  746, 3690,
    748,  716,    0, 1916, 3690, 3690, 3690,  269, 3690, 3690,
    3690,  782,  596,  785, 1784, 3690,  729,  568,  619,  648,
    3690, 1755, 3690, 3690, 3690, 1710, 3690,  787,  704,  620,
    747,  307,  759,  766,  771, 1702,    0, 1744, 3690, 1738,
    3690, 3690,    0, 3690, 3690,    0,    0,    0,    0, 3690,
    771,  780,  789, 1686,  138, 1680,  278,  321, 1680, 1677,
    1664, 1673,  416,  604, 1668,  803,  697,  808,  321,  813,

    817,  822, 1640,  883, 3690, 1693,  886,  889,  893,  869,
    873,  867,  855,  872,  561,  877,  881,  886, 1632,    0,
    891,  860,  896,  629,  901,  905,  910, 1630,  944,  946,
    3690, 3690,    0, 3690,  492, 1584, 1474,  960, 1471, 3690,
    3690,    0, 3690,  962,  976,  777,  964,  983, 3690, 3690,
    792, 3690,  895, 3690,  989,    0,  979,  981,  987,  994,
    996, 1009, 1012, 1021, 1025, 1028, 1040, 1043, 1047, 1056,
    1065, 1059, 1071, 3690,  990, 1078, 1064, 1071, 1076, 1081,
    1086, 1091, 1096, 1101, 1162, 1108, 1117, 1131, 1134, 1139,
    668, 1144, 1148, 1153, 1423, 1475, 1194, 1206, 1158, 1177,

    1189,  674, 1200, 1181, 1205, 1375, 1219, 1210, 1192, 1215,
    847, 1233, 1219, 1238, 1372, 1272, 1274, 1276, 1278, 1290,
    1281, 1303, 1308, 1315, 1320, 1338, 1332, 1344, 1350, 1357,
    1362, 1366, 1379, 1381, 1384, 1377, 1382, 1387, 1392, 1397,
    1402, 1407, 1412,    0, 3690, 3690, 3690, 3690, 3690, 1099,
    0, 3690, 3690, 3690, 3690, 3690, 1472,    0, 3690, 3690,
    3690,    0, 3690, 1426, 3690, 3690, 3690, 1476, 3690, 1420,
    1418, 1413, 1354, 1480, 1401,    0, 1396, 3690,    0, 1342,
    1441, 1365, 1446,  853, 1451, 1455, 1460, 1331, 1460, 1474,
    1433, 1479, 1061, 1484, 1488, 1493, 1325, 1342, 1118, 1331,

    0, 1322, 1326, 1311, 1311, 1316,    0, 1310, 1285, 1303,
    1297, 1290, 1272, 1281,    0, 1498, 1503, 1508, 1513, 1518,
    1523, 1528, 3690, 1314, 1562, 1535, 1545, 1555, 1560, 1565,
    1570, 1575, 1580, 1585, 1590, 1595, 1600, 1605, 1610, 3690,
    3690, 3690, 3690, 3690, 1654, 1294, 1290, 1236, 1226, 3690,
    1645, 1647, 1654, 1649, 1671, 1673, 1676, 1678, 1695, 1690,
    1702, 1707, 1709, 1714, 1721, 1726, 1733, 1783, 1720, 1797,
    1802, 1863, 1808, 1538, 1813, 1283, 1818, 1822, 1827, 1164,
    1888, 1833, 1549, 1838, 1359, 1843, 1847, 1852, 1112, 1857,
    1862, 1877, 1882, 1887, 1902, 1907, 3690, 1941, 1914, 1924,

    1934, 1939, 1944, 1949, 1954, 1959, 1964, 1969, 1974, 1979,
    1984, 1989, 2023, 2025, 2030, 2032, 2039, 2047, 2054, 2056,
    2061, 2073, 2078, 2080, 2085, 2087, 2092, 2104, 2111, 2161,
    2087, 2098, 2175, 3690, 1124, 3690, 1114, 1112, 1082, 2236,
    3690, 1079, 1061, 1028, 2183, 2188, 2197, 2202, 2207, 2212,
    2217, 2222, 2227, 2232, 2237, 2242, 2247, 2252, 1031, 1025,
    1019, 1003, 1009, 1003,    0, 1003,  997,  993,  977,  971,
    981,  955,  956,    0,  953, 2257, 2262, 2267, 2301, 2274,
    2284, 2294, 2299, 2304, 2309, 2343, 2345, 2347, 2349, 2352,
    2371, 2374, 2376, 2379, 2383, 2401, 2405, 2407, 2410, 2423,

    0,    0, 2406, 1708, 2416, 1427, 2421, 1918, 2426,  924,
    2460, 2433, 2443, 2453, 2458, 2463, 2468, 2473, 2478, 2483,
    2488, 2493, 2498, 2503, 2508, 2513, 2518, 2523, 2557, 2530,
    2540, 2550, 2555, 2560, 2565, 2599, 2601, 2603, 2605, 2608,
    2627, 2630, 2632, 2635, 2639, 2657, 2661, 2663, 2666, 2679,
    2712,    0, 2666, 1928, 2681, 1716, 2686, 2288, 2691,  919,
    2725, 3690,  863, 2698, 2712, 2718, 2723, 2728, 2733,  853,
    0,  853,  780,  761,  746,  740,  711,  698,  685,  649,
    653,  648,    0,  635,    0, 2767, 2769,    0, 2771, 2773,
    2776, 2785, 2798, 2800, 2803, 2807, 2816, 2822, 2831, 2834,

    2840, 2827, 2833, 2838, 2843, 2848, 2853, 2858, 2863, 2868,
    2873, 2878, 2883, 2888,    0, 2922, 2924,    0, 2926, 2928,
    2931, 2940, 2953, 2955, 2958, 2962, 2971, 2977, 2986, 2989,
    2995,    0, 2982, 2988, 2993, 2998, 3003, 3008, 3013,  620,
    0,    0,    0,    0,  612,  615,  602,  575,  569,  559,
    545,  525,  485,  492,    0, 3047, 3050, 3052, 3054, 3056,
    3069, 3078, 3081, 3083, 3085, 3087, 3080, 3085, 3090,    0,
    0, 3124, 3127, 3129, 3131, 3133, 3146, 3155, 3158, 3160,
    3162, 3164, 3157, 3162, 3167,  487,  474,    0,  486,  474,
    0,  477,    0,    0,    0,    0, 3201, 3203, 3205, 3210,

    3217,    0, 3229, 3232, 3234, 3248, 3251,    0,  464,  458,
    432,  426,  313, 3256, 3263, 3275, 3278, 3280, 3292, 3294,
    3297, 3306, 3311,  292,    0,  246,    0,  237, 3319, 3323,
    3325, 3328, 3337, 3342,    0,  120,    0, 3350, 3359,  103,
    3364, 3368,    0, 3690, 3418, 3430, 3442, 3454, 3466, 3478,
    3485, 3492, 3503, 3509, 3516, 3528, 3540, 3552, 3564, 3576,
    3583, 3590, 3602, 3613, 3624, 3634, 3641, 3653, 3665, 3677
} ;

static yyconst flex_int16_t yy_def[871] =
{
    0,
    844,  844,  845,  845,  846,  846,  847,  847,  848,  848,
    849,  849,  844,   13,  850,  850,  844,   17,  844,  844,
    844,  844,  844,  844,  851,  852,  851,  844,  844,  844,
    844,  844,  844,  844,  844,  844,  844,  844,  844,  844,
    844,  844,  844,   27,  844,  844,  844,  844,  844,   27,
    27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
    27,  844,  844,  844,  844,  844,  844,  844,  844,  844,
    844,  844,  844,  844,  853,  854,  855,  854,   78,   78,
    78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
    78,  844,  844,  844,  844,  844,  844,  844,  844,  844,

    856,  844,  844,  844,  844,  844,  857,  844,  844,  844,
    844,  844,  858,  844,  844,  844,  844,  859,  844,  844,
    844,  844,  844,  844,  844,  844,  844,  844,  844,  844,
    27,  852,   27,  844,  844,  844,  844,  844,  844,  844,
    844,  844,  844,  844,  844,  844,  844,  844,  844,  844,
    844,  844,  844,  844,  844,  844,  844,  844,  844,  844,
    844,  844,  844,  844,  844,  844,  860,  844,  844,  844,
    844,  844,  860,  844,  844,  860,  860,  860,  860,  844,
    861,  862,  861,  183,  183,  183,  183,  183,  183,  183,
    183,  183,  183,  183,  183,  844,  844,  844,  844,  844,

    844,  844,  844,  844,  844,  844,  844,  844,  844,   27,
    27,  844,  844,  844,  844,  844,  844,  844,  844,  132,
    844,  844,  844,  844,  844,  844,  844,  844,   27,   27,
    844,  844,  863,  844,  844,  844,  844,  844,  844,  844,
    844,  864,  844,  844,  844,  844,  844,  844,  844,  844,
    844,  844,  844,  844,  844,  865,   27,   27,   27,   27,
    27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
    27,   27,   27,  844,  844,   27,  844,  844,  844,  844,
    844,  844,  844,  844,  853,  866,  867,  844,  844,  844,
    844,  844,  844,  844,  844,  868,   78,   78,  844,  844,

    844,  844,  844,  844,  844,  844,  855,  844,  844,  844,
    844,  844,  844,  844,  844,   78,   78,   78,   78,   78,
    78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
    78,   78,   78,   78,   78,  844,  844,  844,  844,  844,
    844,  844,  844,  856,  844,  844,  844,  844,  844,  844,
    857,  844,  844,  844,  844,  844,  844,  858,  844,  844,
    844,  859,  844,  844,  844,  844,  844,  844,  844,  844,
    844,  844,  844,  844,  844,  860,  844,  844,  183,  183,
    844,  844,  844,  844,  844,  844,  844,  844,  862,  844,
    844,  844,  844,  844,  844,  844,  844,  183,  183,  183,

    183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
    183,  183,  183,  183,  183,  844,  844,  844,  844,  844,
    844,  844,  844,  844,   27,  844,  844,  844,  844,  844,
    844,  844,  844,  844,  844,  844,  844,  844,  844,  844,
    844,  844,  844,  844,  844,  844,  844,  844,  844,  844,
    27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
    27,   27,   27,   27,   27,   27,   27,  844,  844,  844,
    844,  866,  844,  844,  844,  844,  844,  844,  844,  844,
    867,  844,  844,  844,  844,  844,  844,  844,  844,  844,
    844,  844,  844,  844,  844,  844,  844,   78,  844,  844,

    844,  844,  844,  844,  844,  844,  844,  844,  844,  844,
    844,  844,   78,   78,   78,   78,   78,   78,   78,   78,
    78,   78,   78,   78,   78,   78,   78,   78,   78,  844,
    844,  844,  844,  844,  844,  844,  844,  844,  844,  844,
    844,  844,  844,  183,  844,  844,  844,  844,  844,  844,
    844,  844,  844,  844,  844,  844,  844,  844,  183,  183,
    183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
    183,  183,  183,  183,  183,  844,  844,  844,   27,  844,
    844,  844,  844,  844,  844,   27,   27,   27,   27,   27,
    27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

    869,  468,  869,  869,  869,  869,  869,  869,  869,  869,
    27,  844,  844,  844,  844,  844,  844,  844,  844,  844,
    844,  844,  844,  844,  844,  844,  844,  844,   78,  844,
    844,  844,  844,  844,  844,   78,   78,   78,   78,   78,
    78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
    870,  530,  869,  869,  869,  869,  869,  869,  869,  869,
    78,  844,  183,  844,  844,  844,  844,  844,  844,  183,
    183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
    183,  183,  183,  183,  183,   27,   27,  132,   27,   27,
    27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

    27,  869,  869,  869,  869,  869,  869,  869,  844,  844,
    844,  844,  844,  844,  472,   78,   78,  307,   78,   78,
    78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
    78,  869,  869,  869,  869,  869,  869,  869,  869,  183,
    183,  389,  183,  183,  183,  183,  183,  183,  183,  183,
    183,  183,  183,  183,  183,   27,   27,   27,   27,   27,
    27,   27,   27,   27,   27,   27,  869,  869,  869,  472,
    481,   78,   78,   78,   78,   78,   78,   78,   78,   78,
    78,   78,  869,  869,  869,  183,  183,  183,  183,  183,
    183,  183,  183,  183,  183,  183,   27,   27,   27,   27,

    27,  468,   78,   78,   78,   78,   78,  530,  183,  183,
    183,  183,  183,   27,   27,   27,   27,   27,   78,   78,
    78,   78,   78,  183,  183,  183,  183,  183,   27,   27,
    27,   78,   78,   78,  183,  183,  183,   27,   78,  183,
    27,   78,  183,    0,  844,  844,  844,  844,  844,  844,
    844,  844,  844,  844,  844,  844,  844,  844,  844,  844,
    844,  844,  844,  844,  844,  844,  844,  844,  844,  844
} ;

static yyconst flex_int16_t yy_nxt[3762] =
{
    0,
    20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
    30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
    40,   41,   42,   43,   44,   45,   44,   44,   44,   44,
    46,   47,   48,   49,   44,   50,   51,   52,   53,   54,
    55,   56,   44,   44,   44,   44,   57,   58,   59,   60,
    44,   61,   44,   62,   63,   64,   65,   20,   20,   20,
    20,   20,   66,   67,   68,   69,   70,   71,   72,   73,
    74,   20,   75,   22,   23,   24,   76,   77,   78,   28,
    29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
    39,   40,   41,   42,   43,   79,   45,   79,   79,   79,

    79,   46,   47,   48,   49,   79,   80,   81,   82,   83,
    84,   85,   86,   79,   79,   79,   79,   87,   88,   89,
    90,   79,   91,   79,   62,   63,   64,   65,   20,   20,
    20,   20,   20,   92,   93,   94,   95,   96,   97,   98,
    99,  100,  102,  103,  104,  102,  103,  104,  843,  105,
    119,  120,  105,  108,  109,  110,  106,  119,  120,  106,
    111,  108,  109,  110,  114,  115,  840,  112,  111,  232,
    114,  115,  399,  233,  116,  112,  122,  123,  124,  117,
    116,  122,  123,  124,  400,  117,  204,  205,  206,  241,
    279,  279,  125,  242,  243,  338,  338,  125,  126,  127,

    128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
    138,  139,  140,  141,  142,  143,  144,  145,  146,  147,
    148,  149,  131,  150,  131,  131,  131,  131,  151,  152,
    153,  154,  131,  131,  131,  131,  131,  131,  131,  131,
    131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
    131,  155,  156,  157,  158,  126,  126,  126,  126,  126,
    159,  160,  161,  162,  163,  163,  164,  165,  166,  168,
    169,  170,  171,  207,  251,  837,  248,  172,  173,  253,
    211,  232,  174,  207,  209,  233,  208,  836,  175,  176,
    177,  178,  208,  179,  346,  252,  208,  249,  250,  347,

    254,  255,  208,  212,  213,  214,  215,  216,  216,  217,
    218,  219,  221,  222,  223,  224,  225,  225,  226,  227,
    228,  402,  250,  403,  179,  168,  169,  170,  171,  277,
    277,  277,  234,  172,  173,  235,  275,  835,  174,  236,
    237,  238,  210,  210,  175,  176,  177,  178,  244,  179,
    245,  210,  210,  210,  239,  348,  240,  250,  246,  247,
    349,  828,  210,  210,  279,  279,  261,  404,  262,  246,
    247,  405,  210,  276,  276,  276,  276,  276,  418,  418,
    179,  180,  180,  180,  180,  180,  181,  182,  183,  180,
    180,  180,  180,  180,  180,  180,  180,  180,  180,  180,

    180,  180,  180,  180,  180,  183,  180,  183,  183,  183,
    183,  180,  180,  180,  180,  183,  184,  185,  186,  187,
    188,  189,  190,  183,  183,  183,  183,  191,  192,  193,
    194,  183,  195,  183,  180,  180,  180,  180,  180,  180,
    180,  180,  180,  196,  197,  198,  199,  200,  200,  201,
    202,  203,  229,  230,  410,  210,  210,  210,  210,  210,
    210,  210,  210,  229,  353,  258,  210,  411,  210,  354,
    210,  827,  210,  230,  257,  260,  210,  259,  210,  263,
    210,  826,  210,  264,  210,  210,  212,  213,  214,  215,
    216,  216,  217,  218,  219,  210,  825,  265,  210,  210,

    210,  210,  210,  210,  240,  210,  210,  210,  441,  266,
    824,  210,  268,  210,  210,  210,  269,  210,  813,  210,
    812,  267,  811,  210,  810,  210,  271,  210,  809,  270,
    210,  210,  796,  272,  795,  210,  278,  278,  278,  278,
    278,  210,  273,  280,  280,  280,  280,  280,  336,  336,
    336,  210,  280,  280,  280,  281,  280,  282,  282,  282,
    282,  283,  283,  283,  283,  283,  285,  205,  206,  251,
    794,  287,  308,  309,  310,  311,  312,  312,  313,  314,
    315,  297,  297,  793,  297,  297,  297,  297,  297,  297,
    252,  355,  297,  366,  319,  297,  356,  297,  367,  297,

    297,  297,  297,  318,  321,  297,  320,  297,  241,  297,
    792,  297,  242,  243,  791,  322,  790,  323,  428,  428,
    253,  297,  335,  335,  335,  335,  335,  288,  289,  290,
    291,  292,  292,  293,  294,  295,  296,  297,  297,  297,
    297,  254,  297,  297,  412,  297,  297,  789,  297,  255,
    297,  413,  326,  327,  788,  324,  297,  787,  297,  325,
    297,  297,  297,  297,  297,  297,  328,  297,  297,  786,
    250,  329,  297,  755,  298,  297,  332,  330,  297,  277,
    277,  277,  297,  333,  754,  297,  435,  435,  297,  753,
    331,  337,  337,  337,  337,  337,  752,  299,  300,  301,

    302,  303,  303,  304,  305,  306,  296,  297,  297,  339,
    339,  339,  339,  339,  341,  341,  341,  341,  297,  334,
    339,  339,  339,  340,  339,  492,  492,  207,  297,  751,
    248,  501,  501,  316,  317,  342,  342,  342,  342,  342,
    208,  368,  205,  206,  316,  750,  208,  207,  373,  749,
    369,  249,  250,  370,  317,  371,  416,  416,  416,  372,
    208,  276,  276,  276,  276,  276,  208,  299,  300,  301,
    302,  303,  303,  304,  305,  306,  210,  210,  221,  222,
    223,  224,  225,  225,  226,  227,  228,  210,  275,  748,
    446,  234,  446,  251,  235,  447,  747,  210,  374,  237,

    238,  244,  746,  245,  278,  278,  278,  278,  278,  250,
    380,  246,  247,  239,  252,  240,  280,  280,  280,  280,
    280,  745,  246,  247,  282,  282,  282,  282,  283,  283,
    283,  283,  283,  381,  382,  383,  384,  385,  385,  386,
    387,  388,  390,  391,  392,  393,  394,  394,  395,  396,
    397,  381,  382,  383,  384,  385,  385,  386,  387,  388,
    415,  415,  415,  415,  415,  417,  417,  417,  417,  417,
    419,  419,  419,  419,  419,  420,  420,  420,  420,  421,
    421,  421,  421,  421,  204,  205,  206,  207,  423,  424,
    207,  423,  424,  744,  207,  743,  253,  210,  210,  740,

    208,  210,  210,  208,  508,  508,  208,  208,  210,  208,
    547,  547,  210,  208,  426,  426,  426,  254,  210,  433,
    433,  433,  210,  425,  210,  210,  210,  210,  210,  427,
    427,  427,  427,  427,  429,  429,  429,  429,  429,  430,
    430,  430,  430,  431,  431,  431,  431,  431,  220,  220,
    220,  220,  220,  434,  434,  434,  434,  434,  436,  436,
    436,  436,  436,  437,  437,  437,  437,  438,  438,  438,
    438,  438,  210,  210,  210,  210,  739,  448,  238,  448,
    445,  708,  449,  210,  248,  210,  246,  247,  246,  247,
    255,  275,  244,  210,  245,  210,  684,  246,  247,  246,

    247,  683,  246,  247,  682,  249,  250,  210,  210,  210,
    210,  250,  250,  246,  247,  210,  210,  451,  210,  681,
    210,  680,  210,  210,  210,  210,  210,  679,  210,  452,
    453,  678,  454,  210,  677,  210,  210,  210,  210,  676,
    210,  210,  675,  210,  455,  210,  456,  674,  210,  210,
    210,  210,  673,  210,  210,  672,  210,  210,  210,  457,
    210,  210,  459,  671,  210,  670,  458,  210,  210,  210,
    210,  210,  210,  663,  210,  210,  210,  210,  662,  210,
    460,  541,  210,  539,  210,  210,  210,  210,  210,  210,
    463,  461,  462,  210,  210,  210,  210,  464,  210,  210,

    210,  534,  535,  465,  210,  210,  210,  210,  210,  296,
    210,  466,  467,  538,  210,  350,  536,  210,  554,  554,
    210,  276,  276,  276,  276,  276,  534,  210,  276,  276,
    276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
    276,  276,  276,  276,  276,  276,  276,  468,  469,  469,
    469,  469,  469,  470,  470,  470,  470,  470,  471,  471,
    471,  471,  471,  285,  205,  206,  560,  561,  287,  625,
    473,  474,  475,  476,  477,  477,  478,  479,  480,  482,
    483,  484,  485,  486,  486,  487,  488,  489,  286,  286,
    286,  286,  286,  490,  490,  490,  491,  491,  491,  491,

    491,  493,  493,  493,  493,  493,  494,  494,  494,  494,
    495,  495,  495,  495,  495,  297,  297,  297,  297,  297,
    296,  618,  297,  297,  288,  289,  290,  291,  292,  292,
    293,  294,  295,  297,  297,  297,  499,  499,  499,  503,
    503,  503,  503,  297,  449,  297,  500,  500,  500,  500,
    500,  506,  506,  506,  449,  297,  498,  502,  502,  502,
    502,  502,  504,  504,  504,  504,  504,  307,  307,  307,
    307,  307,  507,  507,  507,  507,  507,  510,  510,  510,
    510,  308,  309,  310,  311,  312,  312,  313,  314,  315,
    509,  509,  509,  509,  509,  511,  511,  511,  511,  511,

    297,  297,  297,  297,  297,  297,  297,  297,  447,  297,
    297,  297,  447,  297,  513,  297,  423,  297,  297,  297,
    297,  297,  575,  297,  574,  297,  514,  515,  573,  297,
    297,  297,  297,  569,  570,  516,  297,  297,  572,  297,
    614,  614,  297,  297,  297,  518,  571,  297,  297,  297,
    568,  517,  297,  567,  297,  207,  566,  297,  565,  297,
    297,  297,  519,  564,  297,  520,  297,  297,  208,  297,
    563,  297,  297,  297,  208,  521,  562,  297,  297,  297,
    559,  297,  558,  297,  522,  297,  297,  297,  551,  297,
    297,  297,  544,  297,  297,  297,  297,  377,  523,  524,

    525,  297,  375,  526,  527,  297,  297,  297,  297,  297,
    297,  297,  297,  297,  375,  297,  621,  621,  297,  539,
    297,  538,  529,  297,  545,  545,  545,  364,  297,  512,
    297,  528,  505,  297,  335,  335,  335,  335,  335,  335,
    335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
    335,  335,  335,  335,  335,  335,  335,  335,  530,  531,
    531,  531,  531,  531,  532,  532,  532,  532,  532,  533,
    533,  533,  533,  533,  536,  537,  296,  368,  205,  206,
    496,  540,  541,  542,  704,  704,  369,  443,  357,  370,
    442,  371,  552,  552,  552,  372,  374,  543,  379,  379,

    379,  379,  379,  546,  546,  546,  546,  546,  548,  548,
    548,  548,  548,  549,  549,  549,  549,  550,  550,  550,
    550,  550,  390,  391,  392,  393,  394,  394,  395,  396,
    397,  389,  389,  389,  389,  389,  553,  553,  553,  553,
    553,  555,  555,  555,  555,  555,  556,  556,  556,  556,
    557,  557,  557,  557,  557,  415,  415,  415,  415,  415,
    415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
    415,  415,  415,  415,  415,  576,  576,  576,  576,  576,
    577,  577,  577,  577,  577,  578,  578,  578,  578,  578,
    210,  210,  210,  210,  210,  210,  210,  612,  612,  612,

    236,  210,  210,  210,  210,  210,  210,  579,  619,  619,
    619,  210,  210,  210,  210,  210,  210,  210,  210,  210,
    210,  210,  580,  580,  580,  580,  580,  581,  581,  581,
    581,  581,  582,  582,  582,  582,  582,  220,  220,  220,
    220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
    220,  220,  220,  220,  220,  220,  220,  583,  583,  583,
    583,  583,  584,  584,  584,  584,  584,  585,  585,  585,
    585,  585,  445,  210,  210,  210,  210,  210,  210,  586,
    246,  247,  210,  210,  210,  587,  210,  439,  210,  432,
    588,  246,  247,  210,  210,  205,  210,  422,  589,  210,

    210,  210,  210,  210,  210,  210,  210,  210,  414,  590,
    210,  409,  591,  408,  592,  210,  407,  210,  210,  210,
    210,  406,  210,  210,  210,  210,  401,  210,  594,  210,
    210,  210,  593,  398,  210,  210,  210,  210,  210,  210,
    378,  210,  210,  210,  210,  377,  210,  597,  210,  210,
    210,  210,  595,  210,  210,  210,  210,  596,  210,  284,
    210,  210,  210,  598,  274,  210,  599,  702,  702,  702,
    210,  256,  210,  735,  735,  210,  600,  611,  611,  611,
    611,  611,  210,  601,  601,  375,  601,  601,  602,  602,
    601,  601,  601,  601,  601,  601,  601,  601,  601,  601,

    601,  602,  601,  601,  601,  601,  601,  602,  601,  602,
    602,  602,  602,  601,  601,  601,  601,  602,  602,  602,
    602,  602,  602,  602,  602,  602,  602,  602,  602,  602,
    602,  602,  602,  602,  602,  602,  601,  601,  601,  601,
    601,  601,  601,  601,  601,  603,  604,  605,  606,  607,
    607,  608,  609,  610,  611,  611,  611,  611,  611,  611,
    611,  611,  611,  611,  296,  472,  472,  472,  472,  472,
    613,  613,  613,  613,  613,  615,  615,  615,  615,  615,
    616,  616,  616,  616,  617,  617,  617,  617,  617,  296,
    481,  481,  481,  481,  481,  620,  620,  620,  620,  620,

    622,  622,  622,  622,  622,  623,  623,  623,  623,  624,
    624,  624,  624,  624,  286,  286,  286,  286,  286,  286,
    286,  286,  286,  286,  231,  473,  474,  475,  476,  477,
    477,  478,  479,  480,  286,  286,  286,  286,  286,  286,
    286,  286,  286,  286,  626,  626,  626,  626,  626,  365,
    482,  483,  484,  485,  486,  486,  487,  488,  489,  627,
    627,  627,  627,  627,  628,  628,  628,  628,  628,  297,
    297,  297,  297,  297,  297,  297,  706,  706,  706,  706,
    297,  297,  297,  297,  297,  297,  629,  733,  733,  733,
    297,  297,  297,  297,  297,  297,  297,  297,  297,  297,

    297,  630,  630,  630,  630,  630,  631,  631,  631,  631,
    631,  632,  632,  632,  632,  632,  307,  307,  307,  307,
    307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
    307,  307,  307,  307,  307,  307,  633,  633,  633,  633,
    633,  634,  634,  634,  634,  634,  635,  635,  635,  635,
    635,  297,  297,  297,  297,  364,  363,  636,  297,  297,
    297,  297,  297,  637,  297,  361,  638,  297,  297,  297,
    360,  297,  297,  359,  297,  297,  297,  640,  297,  297,
    357,  639,  297,  297,  297,  297,  641,  352,  297,  297,
    297,  350,  642,  297,  345,  297,  297,  343,  643,  284,

    297,  297,  297,  297,  274,  297,  297,  297,  297,  297,
    297,  644,  297,  297,  297,  297,  297,  297,  256,  297,
    297,  297,  297,  647,  297,  231,  297,  297,  645,  297,
    646,  297,  297,  297,  297,  844,  648,  649,  844,  297,
    297,  297,  844,  297,  661,  661,  661,  661,  661,  844,
    297,  844,  844,  297,  650,  661,  661,  661,  661,  661,
    297,  601,  651,  844,  601,  601,  652,  652,  601,  601,
    601,  601,  601,  601,  601,  601,  601,  601,  601,  652,
    601,  601,  601,  601,  601,  652,  601,  652,  652,  652,
    652,  601,  601,  601,  601,  652,  652,  652,  652,  652,

    652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
    652,  652,  652,  652,  601,  601,  601,  601,  601,  601,
    601,  601,  601,  653,  654,  655,  656,  657,  657,  658,
    659,  660,  661,  661,  661,  661,  661,  540,  541,  542,
    379,  379,  379,  379,  379,  379,  379,  379,  379,  379,
    844,  844,  844,  543,  379,  379,  379,  379,  379,  379,
    379,  379,  379,  379,  664,  664,  664,  664,  664,  665,
    665,  665,  665,  665,  666,  666,  666,  666,  666,  389,
    389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
    389,  389,  389,  389,  389,  389,  389,  389,  389,  667,

    667,  667,  667,  667,  668,  668,  668,  668,  668,  669,
    669,  669,  669,  669,  685,  685,  685,  685,  685,  685,
    685,  685,  685,  685,  685,  685,  685,  685,  685,  210,
    210,  687,  687,  687,  687,  687,  844,  686,  844,  844,
    210,  687,  687,  687,  687,  687,  737,  737,  737,  737,
    210,  687,  687,  687,  687,  687,  688,  688,  688,  688,
    688,  688,  688,  688,  688,  688,  688,  688,  688,  688,
    688,  210,  210,  210,  210,  210,  210,  210,  210,  844,
    210,  210,  210,  844,  210,  689,  210,  690,  210,  844,
    691,  210,  210,  692,  210,  844,  210,  844,  210,  210,

    210,  210,  210,  210,  210,  210,  844,  210,  210,  844,
    210,  210,  210,  210,  695,  210,  844,  844,  210,  844,
    210,  693,  210,  694,  844,  210,  696,  697,  210,  210,
    210,  844,  210,  210,  210,  210,  210,  844,  210,  210,
    210,  699,  844,  700,  210,  844,  210,  844,  698,  210,
    210,  210,  210,  844,  210,  844,  210,  844,  844,  210,
    844,  701,  210,  602,  602,  602,  602,  602,  844,  844,
    844,  844,  210,  703,  703,  703,  703,  703,  705,  705,
    705,  705,  705,  707,  707,  707,  707,  707,  210,  210,
    472,  472,  472,  472,  472,  844,  844,  844,  844,  210,

    472,  472,  472,  472,  472,  844,  844,  844,  844,  210,
    472,  472,  472,  472,  472,  472,  472,  472,  472,  472,
    709,  709,  709,  709,  709,  710,  710,  710,  710,  710,
    711,  711,  711,  711,  711,  481,  481,  481,  481,  481,
    481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
    481,  481,  481,  481,  481,  712,  712,  712,  712,  712,
    713,  713,  713,  713,  713,  714,  714,  714,  714,  714,
    715,  715,  715,  715,  715,  715,  715,  715,  715,  715,
    715,  715,  715,  715,  715,  297,  297,  717,  717,  717,
    717,  717,  844,  716,  844,  844,  297,  717,  717,  717,

    717,  717,  844,  844,  844,  844,  297,  717,  717,  717,
    717,  717,  718,  718,  718,  718,  718,  718,  718,  718,
    718,  718,  718,  718,  718,  718,  718,  297,  297,  297,
    297,  297,  297,  297,  297,  844,  297,  297,  297,  844,
    297,  719,  297,  720,  297,  844,  721,  297,  297,  722,
    297,  844,  297,  844,  297,  297,  297,  297,  297,  297,
    297,  297,  844,  297,  297,  844,  297,  297,  297,  297,
    725,  297,  844,  844,  297,  844,  297,  723,  297,  724,
    844,  297,  726,  727,  297,  297,  297,  844,  297,  297,
    297,  297,  297,  844,  297,  297,  297,  729,  844,  730,

    297,  844,  297,  844,  728,  297,  297,  297,  297,  844,
    297,  844,  297,  651,  497,  297,  844,  731,  297,  844,
    844,  844,  601,  652,  652,  652,  652,  652,  297,  844,
    844,  844,  844,  601,  601,  601,  844,  601,  734,  734,
    734,  734,  734,  736,  736,  736,  736,  736,  738,  738,
    738,  738,  738,  297,  297,  741,  741,  741,  741,  741,
    844,  844,  844,  844,  297,  844,  844,  844,  601,  741,
    741,  741,  741,  741,  297,  741,  741,  741,  741,  741,
    742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
    742,  742,  742,  742,  742,  210,  210,  210,  210,  210,

    210,  210,  210,  844,  210,  210,  210,  844,  210,  844,
    210,  844,  210,  210,  210,  210,  756,  844,  210,  844,
    210,  757,  210,  844,  758,  210,  210,  210,  210,  210,
    844,  210,  210,  844,  210,  210,  210,  210,  844,  210,
    844,  760,  210,  759,  210,  210,  210,  210,  761,  210,
    210,  210,  210,  844,  763,  210,  210,  844,  762,  210,
    210,  210,  210,  210,  844,  210,  844,  764,  210,  210,
    210,  210,  844,  210,  766,  844,  844,  844,  844,  210,
    765,  844,  844,  210,  602,  602,  602,  602,  602,  210,
    602,  602,  602,  602,  602,  602,  602,  602,  602,  602,

    602,  602,  602,  602,  602,  767,  767,  767,  767,  767,
    768,  768,  768,  768,  768,  769,  769,  769,  769,  769,
    770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
    770,  770,  770,  770,  770,  771,  771,  771,  771,  771,
    771,  771,  771,  771,  771,  771,  771,  771,  771,  771,
    297,  297,  297,  297,  297,  297,  297,  297,  844,  297,
    297,  297,  844,  297,  844,  297,  844,  297,  297,  297,
    297,  772,  844,  297,  844,  297,  773,  297,  844,  774,
    297,  297,  297,  297,  297,  844,  297,  297,  844,  297,
    297,  297,  297,  844,  297,  844,  776,  297,  775,  297,

    297,  297,  297,  777,  297,  297,  297,  297,  844,  779,
    297,  297,  844,  778,  297,  297,  297,  297,  297,  844,
    297,  844,  780,  297,  297,  297,  297,  844,  297,  782,
    844,  844,  844,  844,  297,  781,  844,  844,  297,  652,
    652,  652,  652,  652,  297,  652,  652,  652,  652,  652,
    652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
    783,  783,  783,  783,  783,  784,  784,  784,  784,  784,
    785,  785,  785,  785,  785,  210,  210,  844,  210,  210,
    210,  210,  210,  210,  210,  210,  210,  844,  797,  210,
    799,  210,  844,  210,  844,  210,  210,  210,  210,  210,

    798,  210,  800,  210,  844,  210,  210,  210,  210,  210,
    210,  210,  210,  210,  210,  210,  210,  210,  210,  801,
    210,  844,  210,  844,  210,  844,  210,  210,  844,  844,
    210,  844,  210,  844,  210,  844,  210,  802,  802,  802,
    802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
    802,  802,  297,  297,  844,  297,  297,  297,  297,  297,
    297,  297,  297,  297,  844,  803,  297,  805,  297,  844,
    297,  844,  297,  297,  297,  297,  297,  804,  297,  806,
    297,  844,  297,  297,  297,  297,  297,  297,  297,  297,
    297,  297,  297,  297,  297,  297,  807,  297,  844,  297,

    844,  297,  844,  297,  297,  844,  844,  297,  844,  297,
    844,  297,  844,  297,  808,  808,  808,  808,  808,  808,
    808,  808,  808,  808,  808,  808,  808,  808,  808,  210,
    210,  210,  210,  210,  210,  844,  844,  844,  210,  210,
    210,  815,  210,  844,  210,  210,  210,  814,  844,  210,
    210,  844,  210,  844,  816,  817,  210,  297,  297,  210,
    297,  297,  297,  297,  844,  818,  210,  844,  297,  844,
    820,  297,  844,  297,  844,  819,  297,  297,  297,  297,
    297,  297,  844,  821,  210,  210,  844,  297,  844,  844,
    297,  210,  210,  822,  844,  210,  844,  297,  844,  823,

    297,  829,  210,  210,  210,  210,  210,  210,  210,  210,
    844,  844,  210,  844,  210,  844,  830,  210,  831,  210,
    297,  297,  297,  297,  210,  297,  297,  210,  844,  210,
    844,  297,  844,  297,  297,  297,  297,  832,  833,  297,
    297,  297,  844,  297,  844,  297,  297,  210,  210,  834,
    297,  210,  210,  210,  210,  297,  297,  297,  210,  844,
    297,  844,  210,  844,  210,  297,  297,  297,  210,  838,
    297,  297,  210,  844,  210,  844,  297,  297,  210,  210,
    844,  297,  844,  839,  844,  844,  297,  297,  297,  210,
    844,  297,  210,  210,  844,  841,  297,  297,  297,  210,

    844,  844,  844,  210,  842,  844,  844,  297,  297,  844,
    844,  844,  844,  210,  844,  844,  844,  297,  101,  101,
    101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
    107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
    107,  107,  113,  113,  113,  113,  113,  113,  113,  113,
    113,  113,  113,  113,  118,  118,  118,  118,  118,  118,
    118,  118,  118,  118,  118,  118,  121,  121,  121,  121,
    121,  121,  121,  121,  121,  121,  121,  121,  167,  167,
    167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
    210,  844,  844,  844,  844,  844,  210,  220,  844,  844,

    844,  844,  844,  220,  286,  286,  286,  844,  286,  286,
    297,  844,  844,  844,  297,  844,  844,  844,  844,  844,
    297,  307,  844,  844,  844,  844,  844,  307,  344,  344,
    844,  844,  844,  344,  344,  344,  344,  344,  844,  344,
    351,  351,  844,  844,  844,  351,  351,  351,  351,  351,
    844,  351,  358,  358,  844,  844,  358,  358,  358,  358,
    844,  358,  358,  358,  362,  362,  844,  844,  362,  362,
    362,  362,  362,  362,  362,  362,  376,  844,  844,  844,
    844,  376,  376,  376,  376,  844,  376,  376,  379,  844,
    844,  844,  844,  844,  379,  389,  844,  844,  844,  844,

    844,  389,  440,  440,  440,  440,  440,  440,  440,  440,
    440,  440,  440,  444,  444,  444,  444,  444,  444,  444,
    444,  444,  444,  444,  450,  450,  450,  450,  450,  450,
    450,  450,  450,  450,  450,  472,  844,  844,  844,  472,
    844,  844,  844,  844,  844,  472,  481,  844,  844,  844,
    844,  844,  481,  497,  497,  497,  497,  497,  497,  497,
    844,  497,  497,  497,  497,  601,  601,  844,  601,  601,
    601,  601,  601,  601,  601,  601,  601,  732,  732,  732,
    732,  732,  732,  732,  732,  732,  732,  732,  732,   19,
    844,  844,  844,  844,  844,  844,  844,  844,  844,  844,

    844,  844,  844,  844,  844,  844,  844,  844,  844,  844,
    844,  844,  844,  844,  844,  844,  844,  844,  844,  844,
    844,  844,  844,  844,  844,  844,  844,  844,  844,  844,
    844,  844,  844,  844,  844,  844,  844,  844,  844,  844,
    844,  844,  844,  844,  844,  844,  844,  844,  844,  844,
    844,  844,  844,  844,  844,  844,  844,  844,  844,  844,
    844
} ;

static yyconst flex_int16_t yy_chk[3762] =
{
    0,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    3,    3,    3,    4,    4,    4,  840,    3,
    9,    9,    4,    5,    5,    5,    3,   10,   10,    4,
    5,    6,    6,    6,    7,    7,  836,    5,    6,   32,
    8,    8,  185,   32,    7,    6,   11,   11,   11,    7,
    8,   12,   12,   12,  185,    8,   21,   21,   21,   37,
    69,   69,   11,   37,   37,   95,   95,   12,   13,   13,

    13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
    13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
    13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
    13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
    13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
    13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
    13,   13,   13,   13,   13,   13,   13,   13,   13,   15,
    15,   15,   15,   22,   42,  828,   41,   15,   15,   43,
    25,  138,   15,   23,   23,  138,   22,  826,   15,   15,
    15,   15,   22,   15,  104,   42,   23,   41,   41,  104,

    43,   45,   23,   25,   25,   25,   25,   25,   25,   25,
    25,   25,   26,   26,   26,   26,   26,   26,   26,   26,
    26,  187,   45,  187,   15,   16,   16,   16,   16,   67,
    67,   67,   36,   16,   16,   36,   65,  824,   16,   36,
    36,   36,   44,   44,   16,   16,   16,   16,   38,   16,
    38,   53,   53,   44,   36,  105,   36,   65,   38,   38,
    105,  813,   53,   44,  162,  162,   53,  188,   53,   38,
    38,  188,   53,   66,   66,   66,   66,   66,  199,  199,
    16,   17,   17,   17,   17,   17,   17,   17,   17,   17,
    17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

    17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
    17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
    17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
    17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
    17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
    17,   17,   27,   27,  193,   50,   50,   52,   52,   51,
    51,   54,   54,   27,  110,   51,   50,  193,   52,  110,
    51,  812,   54,   27,   50,   52,   50,   51,   52,   54,
    51,  811,   54,   54,   55,   55,   27,   27,   27,   27,
    27,   27,   27,   27,   27,   55,  810,   55,   56,   56,

    57,   57,   58,   58,  235,   55,   59,   59,  235,   56,
    809,   57,   58,   58,   60,   60,   59,   59,  792,   56,
    790,   57,  789,   58,  787,   60,   60,   59,  786,   59,
    61,   61,  754,   60,  753,   60,   68,   68,   68,   68,
    68,   61,   61,   70,   70,   70,   70,   70,   93,   93,
    93,   61,   71,   71,   71,   71,   71,   72,   72,   72,
    72,   73,   73,   73,   73,   73,   75,   75,   75,  148,
    752,   75,   77,   77,   77,   77,   77,   77,   77,   77,
    77,   79,   79,  751,   80,   80,   82,   82,   81,   81,
    148,  111,   79,  125,   81,   80,  111,   82,  125,   81,

    83,   83,   79,   80,   82,   80,   81,   82,  143,   81,
    750,   83,  143,  143,  749,   83,  748,   83,  215,  215,
    149,   83,   92,   92,   92,   92,   92,   75,   75,   75,
    75,   75,   75,   75,   75,   75,   76,   84,   84,   85,
    85,  149,   86,   86,  194,   87,   87,  747,   84,  150,
    85,  194,   85,   86,  746,   84,   87,  745,   84,   84,
    85,   88,   88,   86,   90,   90,   87,   89,   89,  740,
    150,   88,   88,  684,   76,   90,   90,   89,   89,  160,
    160,  160,   88,   90,  682,   90,  224,  224,   89,  681,
    89,   94,   94,   94,   94,   94,  680,   76,   76,   76,

    76,   76,   76,   76,   76,   76,   78,   91,   91,   96,
    96,   96,   96,   96,   98,   98,   98,   98,   91,   91,
    97,   97,   97,   97,   97,  291,  291,  128,   91,  679,
    147,  302,  302,   78,   78,   99,   99,   99,   99,   99,
    128,  127,  127,  127,   78,  678,  128,  129,  129,  677,
    127,  147,  147,  127,   78,  127,  197,  197,  197,  127,
    129,  159,  159,  159,  159,  159,  129,   78,   78,   78,
    78,   78,   78,   78,   78,   78,  131,  131,  132,  132,
    132,  132,  132,  132,  132,  132,  132,  131,  158,  676,
    246,  142,  246,  251,  142,  246,  675,  131,  142,  142,

    142,  144,  674,  144,  161,  161,  161,  161,  161,  158,
    181,  144,  144,  142,  251,  142,  163,  163,  163,  163,
    163,  673,  144,  144,  164,  164,  164,  164,  165,  165,
    165,  165,  165,  181,  181,  181,  181,  181,  181,  181,
    181,  181,  182,  182,  182,  182,  182,  182,  182,  182,
    182,  183,  183,  183,  183,  183,  183,  183,  183,  183,
    196,  196,  196,  196,  196,  198,  198,  198,  198,  198,
    200,  200,  200,  200,  200,  201,  201,  201,  201,  202,
    202,  202,  202,  202,  204,  204,  204,  207,  207,  207,
    208,  208,  208,  672,  209,  670,  253,  210,  210,  663,

    207,  211,  211,  208,  311,  311,  207,  209,  210,  208,
    384,  384,  211,  209,  213,  213,  213,  253,  210,  222,
    222,  222,  211,  211,  212,  212,  212,  212,  212,  214,
    214,  214,  214,  214,  216,  216,  216,  216,  216,  217,
    217,  217,  217,  218,  218,  218,  218,  218,  221,  221,
    221,  221,  221,  223,  223,  223,  223,  223,  225,  225,
    225,  225,  225,  226,  226,  226,  226,  227,  227,  227,
    227,  227,  229,  229,  230,  230,  660,  247,  238,  247,
    244,  610,  247,  229,  248,  230,  238,  238,  244,  244,
    255,  275,  245,  229,  245,  230,  575,  238,  238,  244,

    244,  573,  245,  245,  572,  248,  248,  257,  257,  258,
    258,  255,  275,  245,  245,  259,  259,  257,  257,  571,
    258,  570,  260,  260,  261,  261,  259,  569,  257,  258,
    258,  568,  259,  260,  567,  261,  259,  262,  262,  566,
    263,  263,  564,  260,  261,  261,  262,  563,  262,  264,
    264,  263,  562,  265,  265,  561,  266,  266,  262,  263,
    264,  263,  265,  560,  265,  559,  264,  266,  267,  267,
    264,  268,  268,  544,  265,  269,  269,  266,  543,  267,
    267,  542,  268,  539,  270,  270,  269,  272,  272,  267,
    269,  268,  268,  271,  271,  270,  269,  270,  272,  273,

    273,  350,  350,  271,  271,  270,  276,  276,  272,  286,
    273,  272,  273,  538,  271,  350,  537,  276,  393,  393,
    273,  277,  277,  277,  277,  277,  535,  276,  278,  278,
    278,  278,  278,  279,  279,  279,  279,  279,  280,  280,
    280,  280,  280,  281,  281,  281,  281,  281,  282,  282,
    282,  282,  282,  283,  283,  283,  283,  283,  284,  284,
    284,  284,  284,  285,  285,  285,  399,  399,  285,  489,
    286,  286,  286,  286,  286,  286,  286,  286,  286,  287,
    287,  287,  287,  287,  287,  287,  287,  287,  288,  288,
    288,  288,  288,  289,  289,  289,  290,  290,  290,  290,

    290,  292,  292,  292,  292,  292,  293,  293,  293,  293,
    294,  294,  294,  294,  294,  299,  299,  299,  299,  299,
    307,  480,  297,  297,  285,  285,  285,  285,  285,  285,
    285,  285,  285,  297,  298,  298,  300,  300,  300,  304,
    304,  304,  304,  297,  449,  298,  301,  301,  301,  301,
    301,  309,  309,  309,  448,  298,  298,  303,  303,  303,
    303,  303,  305,  305,  305,  305,  305,  308,  308,  308,
    308,  308,  310,  310,  310,  310,  310,  313,  313,  313,
    313,  307,  307,  307,  307,  307,  307,  307,  307,  307,
    312,  312,  312,  312,  312,  314,  314,  314,  314,  314,

    316,  316,  317,  317,  318,  318,  319,  319,  447,  321,
    321,  316,  446,  317,  318,  318,  424,  319,  320,  320,
    321,  316,  414,  317,  413,  318,  319,  319,  412,  320,
    321,  322,  322,  409,  409,  320,  323,  323,  411,  320,
    476,  476,  322,  324,  324,  323,  410,  323,  325,  325,
    408,  322,  322,  406,  324,  373,  405,  323,  404,  325,
    327,  327,  324,  403,  324,  325,  326,  326,  373,  325,
    402,  327,  328,  328,  373,  326,  400,  326,  329,  329,
    398,  327,  397,  328,  328,  330,  330,  326,  388,  329,
    331,  331,  380,  328,  332,  332,  330,  377,  329,  329,

    330,  331,  375,  331,  332,  332,  330,  333,  333,  334,
    334,  331,  335,  335,  372,  332,  485,  485,  333,  371,
    334,  370,  334,  335,  382,  382,  382,  364,  333,  315,
    334,  333,  306,  335,  336,  336,  336,  336,  336,  337,
    337,  337,  337,  337,  338,  338,  338,  338,  338,  339,
    339,  339,  339,  339,  340,  340,  340,  340,  340,  341,
    341,  341,  341,  341,  342,  342,  342,  342,  342,  343,
    343,  343,  343,  343,  357,  357,  296,  368,  368,  368,
    295,  374,  374,  374,  606,  606,  368,  239,  357,  368,
    237,  368,  391,  391,  391,  368,  374,  374,  381,  381,

    381,  381,  381,  383,  383,  383,  383,  383,  385,  385,
    385,  385,  385,  386,  386,  386,  386,  387,  387,  387,
    387,  387,  389,  389,  389,  389,  389,  389,  389,  389,
    389,  390,  390,  390,  390,  390,  392,  392,  392,  392,
    392,  394,  394,  394,  394,  394,  395,  395,  395,  395,
    396,  396,  396,  396,  396,  416,  416,  416,  416,  416,
    417,  417,  417,  417,  417,  418,  418,  418,  418,  418,
    419,  419,  419,  419,  419,  420,  420,  420,  420,  420,
    421,  421,  421,  421,  421,  422,  422,  422,  422,  422,
    425,  425,  426,  426,  426,  426,  426,  474,  474,  474,

    236,  425,  427,  427,  427,  427,  427,  425,  483,  483,
    483,  425,  428,  428,  428,  428,  428,  429,  429,  429,
    429,  429,  430,  430,  430,  430,  430,  431,  431,  431,
    431,  431,  432,  432,  432,  432,  432,  433,  433,  433,
    433,  433,  434,  434,  434,  434,  434,  435,  435,  435,
    435,  435,  436,  436,  436,  436,  436,  437,  437,  437,
    437,  437,  438,  438,  438,  438,  438,  439,  439,  439,
    439,  439,  445,  451,  451,  452,  452,  454,  454,  451,
    445,  445,  453,  453,  451,  452,  452,  228,  454,  219,
    453,  445,  445,  453,  451,  206,  452,  203,  454,  455,

    455,  456,  456,  453,  457,  457,  458,  458,  195,  455,
    455,  192,  456,  191,  458,  457,  190,  458,  460,  460,
    455,  189,  456,  459,  459,  457,  186,  458,  460,  460,
    461,  461,  459,  184,  459,  462,  462,  463,  463,  460,
    170,  461,  464,  464,  459,  168,  462,  463,  463,  465,
    465,  461,  461,  464,  466,  466,  462,  462,  463,  166,
    465,  467,  467,  464,  156,  466,  465,  604,  604,  604,
    465,  152,  467,  656,  656,  466,  467,  469,  469,  469,
    469,  469,  467,  468,  468,  145,  468,  468,  468,  468,
    468,  468,  468,  468,  468,  468,  468,  468,  468,  468,

    468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
    468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
    468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
    468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
    468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
    468,  468,  468,  468,  470,  470,  470,  470,  470,  471,
    471,  471,  471,  471,  472,  473,  473,  473,  473,  473,
    475,  475,  475,  475,  475,  477,  477,  477,  477,  477,
    478,  478,  478,  478,  479,  479,  479,  479,  479,  481,
    482,  482,  482,  482,  482,  484,  484,  484,  484,  484,

    486,  486,  486,  486,  486,  487,  487,  487,  487,  488,
    488,  488,  488,  488,  490,  490,  490,  490,  490,  491,
    491,  491,  491,  491,  134,  472,  472,  472,  472,  472,
    472,  472,  472,  472,  492,  492,  492,  492,  492,  493,
    493,  493,  493,  493,  494,  494,  494,  494,  494,  124,
    481,  481,  481,  481,  481,  481,  481,  481,  481,  495,
    495,  495,  495,  495,  496,  496,  496,  496,  496,  498,
    498,  499,  499,  499,  499,  499,  608,  608,  608,  608,
    498,  500,  500,  500,  500,  500,  498,  654,  654,  654,
    498,  501,  501,  501,  501,  501,  502,  502,  502,  502,

    502,  503,  503,  503,  503,  503,  504,  504,  504,  504,
    504,  505,  505,  505,  505,  505,  506,  506,  506,  506,
    506,  507,  507,  507,  507,  507,  508,  508,  508,  508,
    508,  509,  509,  509,  509,  509,  510,  510,  510,  510,
    510,  511,  511,  511,  511,  511,  512,  512,  512,  512,
    512,  513,  513,  514,  514,  122,  120,  513,  515,  515,
    516,  516,  513,  514,  514,  117,  515,  517,  517,  515,
    116,  516,  513,  115,  514,  518,  518,  517,  517,  515,
    112,  516,  519,  519,  520,  520,  518,  109,  517,  521,
    521,  106,  520,  519,  103,  520,  518,  100,  521,   74,

    521,  522,  522,  519,   63,  520,  523,  523,  524,  524,
    521,  522,  522,  525,  525,  526,  526,  523,   47,  524,
    527,  527,  522,  525,  525,   28,  526,  523,  523,  524,
    524,  527,  528,  528,  525,   19,  526,  527,    0,  529,
    529,  527,    0,  528,  531,  531,  531,  531,  531,    0,
    529,    0,    0,  528,  529,  532,  532,  532,  532,  532,
    529,  530,  530,    0,  530,  530,  530,  530,  530,  530,
    530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
    530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
    530,  530,  530,  530,  530,  530,  530,  530,  530,  530,

    530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
    530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
    530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
    530,  530,  533,  533,  533,  533,  533,  540,  540,  540,
    545,  545,  545,  545,  545,  546,  546,  546,  546,  546,
    0,    0,    0,  540,  547,  547,  547,  547,  547,  548,
    548,  548,  548,  548,  549,  549,  549,  549,  549,  550,
    550,  550,  550,  550,  551,  551,  551,  551,  551,  552,
    552,  552,  552,  552,  553,  553,  553,  553,  553,  554,
    554,  554,  554,  554,  555,  555,  555,  555,  555,  556,

    556,  556,  556,  556,  557,  557,  557,  557,  557,  558,
    558,  558,  558,  558,  576,  576,  576,  576,  576,  577,
    577,  577,  577,  577,  578,  578,  578,  578,  578,  579,
    579,  580,  580,  580,  580,  580,    0,  579,    0,    0,
    579,  581,  581,  581,  581,  581,  658,  658,  658,  658,
    579,  582,  582,  582,  582,  582,  583,  583,  583,  583,
    583,  584,  584,  584,  584,  584,  585,  585,  585,  585,
    585,  586,  586,  587,  587,  588,  588,  589,  589,    0,
    590,  590,  586,    0,  587,  586,  588,  588,  589,    0,
    589,  590,  586,  590,  587,    0,  588,    0,  589,  591,

    591,  590,  592,  592,  593,  593,    0,  594,  594,    0,
    591,  595,  595,  592,  593,  593,    0,    0,  594,    0,
    591,  591,  595,  592,    0,  593,  594,  595,  594,  596,
    596,    0,  595,  597,  597,  598,  598,    0,  599,  599,
    596,  597,    0,  598,  597,    0,  598,    0,  596,  599,
    596,  600,  600,    0,  597,    0,  598,    0,    0,  599,
    0,  600,  600,  603,  603,  603,  603,  603,    0,    0,
    0,    0,  600,  605,  605,  605,  605,  605,  607,  607,
    607,  607,  607,  609,  609,  609,  609,  609,  611,  611,
    612,  612,  612,  612,  612,    0,    0,    0,    0,  611,

    613,  613,  613,  613,  613,    0,    0,    0,    0,  611,
    614,  614,  614,  614,  614,  615,  615,  615,  615,  615,
    616,  616,  616,  616,  616,  617,  617,  617,  617,  617,
    618,  618,  618,  618,  618,  619,  619,  619,  619,  619,
    620,  620,  620,  620,  620,  621,  621,  621,  621,  621,
    622,  622,  622,  622,  622,  623,  623,  623,  623,  623,
    624,  624,  624,  624,  624,  625,  625,  625,  625,  625,
    626,  626,  626,  626,  626,  627,  627,  627,  627,  627,
    628,  628,  628,  628,  628,  629,  629,  630,  630,  630,
    630,  630,    0,  629,    0,    0,  629,  631,  631,  631,

    631,  631,    0,    0,    0,    0,  629,  632,  632,  632,
    632,  632,  633,  633,  633,  633,  633,  634,  634,  634,
    634,  634,  635,  635,  635,  635,  635,  636,  636,  637,
    637,  638,  638,  639,  639,    0,  640,  640,  636,    0,
    637,  636,  638,  638,  639,    0,  639,  640,  636,  640,
    637,    0,  638,    0,  639,  641,  641,  640,  642,  642,
    643,  643,    0,  644,  644,    0,  641,  645,  645,  642,
    643,  643,    0,    0,  644,    0,  641,  641,  645,  642,
    0,  643,  644,  645,  644,  646,  646,    0,  645,  647,
    647,  648,  648,    0,  649,  649,  646,  647,    0,  648,

    647,    0,  648,    0,  646,  649,  646,  650,  650,    0,
    647,    0,  648,  651,  651,  649,    0,  650,  650,    0,
    0,    0,  651,  653,  653,  653,  653,  653,  650,    0,
    0,    0,    0,  651,  651,  651,    0,  651,  655,  655,
    655,  655,  655,  657,  657,  657,  657,  657,  659,  659,
    659,  659,  659,  661,  661,  664,  664,  664,  664,  664,
    0,    0,    0,    0,  661,    0,    0,    0,  651,  665,
    665,  665,  665,  665,  661,  666,  666,  666,  666,  666,
    667,  667,  667,  667,  667,  668,  668,  668,  668,  668,
    669,  669,  669,  669,  669,  686,  686,  687,  687,  689,

    689,  690,  690,    0,  691,  691,  686,    0,  687,    0,
    689,    0,  690,  692,  692,  691,  686,    0,  687,    0,
    689,  691,  690,    0,  692,  691,  693,  693,  694,  694,
    0,  695,  695,    0,  692,  696,  696,  693,    0,  694,
    0,  694,  695,  693,  697,  697,  696,  693,  695,  694,
    698,  698,  695,    0,  697,  697,  696,    0,  696,  699,
    699,  698,  700,  700,    0,  697,    0,  698,  701,  701,
    699,  698,    0,  700,  700,    0,    0,    0,    0,  701,
    699,    0,    0,  700,  702,  702,  702,  702,  702,  701,
    703,  703,  703,  703,  703,  704,  704,  704,  704,  704,

    705,  705,  705,  705,  705,  706,  706,  706,  706,  706,
    707,  707,  707,  707,  707,  708,  708,  708,  708,  708,
    709,  709,  709,  709,  709,  710,  710,  710,  710,  710,
    711,  711,  711,  711,  711,  712,  712,  712,  712,  712,
    713,  713,  713,  713,  713,  714,  714,  714,  714,  714,
    716,  716,  717,  717,  719,  719,  720,  720,    0,  721,
    721,  716,    0,  717,    0,  719,    0,  720,  722,  722,
    721,  716,    0,  717,    0,  719,  721,  720,    0,  722,
    721,  723,  723,  724,  724,    0,  725,  725,    0,  722,
    726,  726,  723,    0,  724,    0,  724,  725,  723,  727,

    727,  726,  723,  725,  724,  728,  728,  725,    0,  727,
    727,  726,    0,  726,  729,  729,  728,  730,  730,    0,
    727,    0,  728,  731,  731,  729,  728,    0,  730,  730,
    0,    0,    0,    0,  731,  729,    0,    0,  730,  733,
    733,  733,  733,  733,  731,  734,  734,  734,  734,  734,
    735,  735,  735,  735,  735,  736,  736,  736,  736,  736,
    737,  737,  737,  737,  737,  738,  738,  738,  738,  738,
    739,  739,  739,  739,  739,  756,  756,    0,  757,  757,
    758,  758,  759,  759,  760,  760,  756,    0,  756,  757,
    759,  758,    0,  759,    0,  760,  756,  761,  761,  757,

    757,  758,  760,  759,    0,  760,  762,  762,  761,  763,
    763,  764,  764,  765,  765,  766,  766,  762,  761,  762,
    763,    0,  764,    0,  765,    0,  766,  762,    0,    0,
    763,    0,  764,    0,  765,    0,  766,  767,  767,  767,
    767,  767,  768,  768,  768,  768,  768,  769,  769,  769,
    769,  769,  772,  772,    0,  773,  773,  774,  774,  775,
    775,  776,  776,  772,    0,  772,  773,  775,  774,    0,
    775,    0,  776,  772,  777,  777,  773,  773,  774,  776,
    775,    0,  776,  778,  778,  777,  779,  779,  780,  780,
    781,  781,  782,  782,  778,  777,  778,  779,    0,  780,

    0,  781,    0,  782,  778,    0,    0,  779,    0,  780,
    0,  781,    0,  782,  783,  783,  783,  783,  783,  784,
    784,  784,  784,  784,  785,  785,  785,  785,  785,  797,
    797,  798,  798,  799,  799,    0,    0,    0,  800,  800,
    797,  798,  798,    0,  799,  801,  801,  797,    0,  800,
    797,    0,  798,    0,  799,  800,  801,  803,  803,  800,
    804,  804,  805,  805,    0,  801,  801,    0,  803,    0,
    804,  804,    0,  805,    0,  803,  806,  806,  803,  807,
    807,  804,    0,  805,  814,  814,    0,  806,    0,    0,
    807,  815,  815,  806,    0,  814,    0,  806,    0,  807,

    807,  814,  815,  816,  816,  814,  817,  817,  818,  818,
    0,    0,  815,    0,  816,    0,  816,  817,  818,  818,
    819,  819,  820,  820,  816,  821,  821,  817,    0,  818,
    0,  819,    0,  820,  822,  822,  821,  819,  821,  823,
    823,  819,    0,  820,    0,  822,  821,  829,  829,  823,
    823,  830,  830,  831,  831,  822,  832,  832,  829,    0,
    823,    0,  830,    0,  831,  833,  833,  832,  829,  830,
    834,  834,  830,    0,  831,    0,  833,  832,  838,  838,
    0,  834,    0,  833,    0,    0,  833,  839,  839,  838,
    0,  834,  841,  841,    0,  838,  842,  842,  839,  838,

    0,    0,    0,  841,  839,    0,    0,  842,  839,    0,
    0,    0,    0,  841,    0,    0,    0,  842,  845,  845,
    845,  845,  845,  845,  845,  845,  845,  845,  845,  845,
    846,  846,  846,  846,  846,  846,  846,  846,  846,  846,
    846,  846,  847,  847,  847,  847,  847,  847,  847,  847,
    847,  847,  847,  847,  848,  848,  848,  848,  848,  848,
    848,  848,  848,  848,  848,  848,  849,  849,  849,  849,
    849,  849,  849,  849,  849,  849,  849,  849,  850,  850,
    850,  850,  850,  850,  850,  850,  850,  850,  850,  850,
    851,    0,    0,    0,    0,    0,  851,  852,    0,    0,

    0,    0,    0,  852,  853,  853,  853,    0,  853,  853,
    854,    0,    0,    0,  854,    0,    0,    0,    0,    0,
    854,  855,    0,    0,    0,    0,    0,  855,  856,  856,
    0,    0,    0,  856,  856,  856,  856,  856,    0,  856,
    857,  857,    0,    0,    0,  857,  857,  857,  857,  857,
    0,  857,  858,  858,    0,    0,  858,  858,  858,  858,
    0,  858,  858,  858,  859,  859,    0,    0,  859,  859,
    859,  859,  859,  859,  859,  859,  860,    0,    0,    0,
    0,  860,  860,  860,  860,    0,  860,  860,  861,    0,
    0,    0,    0,    0,  861,  862,    0,    0,    0,    0,

    0,  862,  863,  863,  863,  863,  863,  863,  863,  863,
    863,  863,  863,  864,  864,  864,  864,  864,  864,  864,
    864,  864,  864,  864,  865,  865,  865,  865,  865,  865,
    865,  865,  865,  865,  865,  866,    0,    0,    0,  866,
    0,    0,    0,    0,    0,  866,  867,    0,    0,    0,
    0,    0,  867,  868,  868,  868,  868,  868,  868,  868,
    0,  868,  868,  868,  868,  869,  869,    0,  869,  869,
    869,  869,  869,  869,  869,  869,  869,  870,  870,  870,
    870,  870,  870,  870,  870,  870,  870,  870,  870,  844,
    844,  844,  844,  844,  844,  844,  844,  844,  844,  844,

    844,  844,  844,  844,  844,  844,  844,  844,  844,  844,
    844,  844,  844,  844,  844,  844,  844,  844,  844,  844,
    844,  844,  844,  844,  844,  844,  844,  844,  844,  844,
    844,  844,  844,  844,  844,  844,  844,  844,  844,  844,
    844,  844,  844,  844,  844,  844,  844,  844,  844,  844,
    844,  844,  844,  844,  844,  844,  844,  844,  844,  844,
    844
} ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf = 0, *yy_state_ptr = 0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
/*
 *  Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 *  Copyright (C) 2008-2012 - Scilab Enterprises - Bruno JOFRET
 *
 *  This file must be used under the terms of the CeCILL.
 *  This source file is licensed as described in the file COPYING, which
 *  you should have received as part of this distribution.  The terms
 *  are also available at
 *  http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
 *
 */
#include "isatty.hxx"
#include "parse.hxx"
#include "parser_private.hxx"

#include "context.hxx"

extern "C"
{
#include "charEncoding.h"
#include "sci_malloc.h"
}

static int comment_level = 0;
static int paren_level = 0;
static int last_token = 0;
static int exit_status = PARSE_ERROR;
static std::string current_file;
static std::string program_name;

static std::string *pstBuffer;

#define YY_USER_ACTION                          \
 yylloc.first_column = yylloc.last_column;yylloc.last_column += yyleng;
//yylloc.last_column += yyleng;

/* -*- Verbose Special Debug -*- */
//#define DEV
//#define TOKENDEV

#ifdef DEV
#define DEBUG(x) std::cout << "[DEBUG] " << x << std::endl;
#else
#define DEBUG(x) /* Nothing */
#endif

#define INITIAL 0
#define SIMPLESTRING 1
#define DOUBLESTRING 2
#define REGIONCOMMENT 3
#define LINECOMMENT 4
#define LINEBREAK 5
#define MATRIX 6
#define SHELLMODE 7
#define BEGINID 8

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

static void yyunput (int c, char *buf_ptr  );

#ifndef yytext_ptr
static void yy_flex_strncpy (char *, yyconst char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = NULL;

static void yy_push_state (int new_state );

static void yy_pop_state (void );

static int yy_top_state (void );

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
 
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
    register yy_state_type yy_current_state;
    register char *yy_cp, *yy_bp;
    register int yy_act;

    if ( !(yy_init) )
    {
        (yy_init) = 1;

#ifdef YY_USER_INIT
        YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
        {
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
        }
        if ( ! (yy_state_buf) )
        {
            YY_FATAL_ERROR( "out of dynamic memory in yylex()" );
        }

        if ( ! (yy_start) )
        {
            (yy_start) = 1;    /* first start state */
        }

        if ( ! yyin )
        {
            yyin = stdin;
        }

        if ( ! yyout )
        {
            yyout = stdout;
        }

        if ( ! YY_CURRENT_BUFFER )
        {
            yyensure_buffer_stack ();
            YY_CURRENT_BUFFER_LVALUE =
                yy_create_buffer(yyin, YY_BUF_SIZE );
        }

        yy_load_buffer_state( );
    }

    {

        while ( 1 )		/* loops until end-of-file is reached */
        {
            yy_cp = (yy_c_buf_p);

            /* Support of yytext. */
            *yy_cp = (yy_hold_char);

            /* yy_bp points to the position in yy_ch_buf of the start of
             * the current run.
             */
            yy_bp = yy_cp;

            yy_current_state = (yy_start);
            yy_current_state += YY_AT_BOL();

            (yy_state_ptr) = (yy_state_buf);
            *(yy_state_ptr)++ = yy_current_state;

yy_match:
            do
            {
                register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
                while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
                {
                    yy_current_state = (int) yy_def[yy_current_state];
                    if ( yy_current_state >= 845 )
                    {
                        yy_c = yy_meta[(unsigned int) yy_c];
                    }
                }
                yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
                *(yy_state_ptr)++ = yy_current_state;
                ++yy_cp;
            }
            while ( yy_base[yy_current_state] != 3690 );

yy_find_action:
            yy_current_state = *--(yy_state_ptr);
            (yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
            for ( ; ; ) /* until we find what rule we matched */
            {
                if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
                {
                    yy_act = yy_acclist[(yy_lp)];
                    if ( yy_act & YY_TRAILING_HEAD_MASK ||
                            (yy_looking_for_trail_begin) )
                    {
                        if ( yy_act == (yy_looking_for_trail_begin) )
                        {
                            (yy_looking_for_trail_begin) = 0;
                            yy_act &= ~YY_TRAILING_HEAD_MASK;
                            break;
                        }
                    }
                    else if ( yy_act & YY_TRAILING_MASK )
                    {
                        (yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
                        (yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
                    }
                    else
                    {
                        (yy_full_match) = yy_cp;
                        (yy_full_state) = (yy_state_ptr);
                        (yy_full_lp) = (yy_lp);
                        break;
                    }
                    ++(yy_lp);
                    goto find_rule;
                }
                --yy_cp;
                yy_current_state = *--(yy_state_ptr);
                (yy_lp) = yy_accept[yy_current_state];
            }

            YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

            switch ( yy_act )
            {
                /* beginning of action switch */
                case 1:
                    *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
                    (yy_c_buf_p) = yy_cp = yy_bp + 3;
                    YY_DO_BEFORE_ACTION; /* set up yytext again */
                    YY_RULE_SETUP
                    {
                        // BOM found ==> ignored
                    }
                    YY_BREAK
                case 2:
                    YY_RULE_SETUP
                    {
                        if (last_token != DOT)
                        {
                            ParserSingleInstance::pushControlStatus(Parser::WithinIf);
                        }
                        DEBUG("BEGIN(INITIAL)");
                        BEGIN(INITIAL);
                        return scan_throw(IF);
                    }
                    YY_BREAK
                case 3:
                    YY_RULE_SETUP
                    {
                        DEBUG("BEGIN(INITIAL)");
                        BEGIN(INITIAL);
                        return scan_throw(THEN);
                    }
                    YY_BREAK
                case 4:
                    YY_RULE_SETUP
                    {
                        if (last_token != DOT)
                        {
                            // Pop to step out IF
                            ParserSingleInstance::popControlStatus();
                            ParserSingleInstance::pushControlStatus(Parser::WithinElse);
                        }
                        DEBUG("BEGIN(INITIAL)");
                        BEGIN(INITIAL);
                        return scan_throw(ELSE);
                    }
                    YY_BREAK
                case 5:
                    YY_RULE_SETUP
                    {
                        if (last_token != DOT)
                        {
                            ParserSingleInstance::popControlStatus();
                            ParserSingleInstance::pushControlStatus(Parser::WithinElseIf);
                        }
                        DEBUG("BEGIN(INITIAL)");
                        BEGIN(INITIAL);
                        return scan_throw(ELSEIF);
                    }
                    YY_BREAK
                case 6:
                    YY_RULE_SETUP
                    {
                        if (last_token != DOT)
                        {
                            ParserSingleInstance::popControlStatus();
                        }
                        DEBUG("BEGIN(INITIAL)");
                        BEGIN(INITIAL);
                        return scan_throw(END);
                    }
                    YY_BREAK
                case 7:
                    YY_RULE_SETUP
                    {
                        if (last_token != DOT)
                        {
                            ParserSingleInstance::pushControlStatus(Parser::WithinSelect);
                        }
                        DEBUG("BEGIN(INITIAL)");
                        BEGIN(INITIAL);
                        return scan_throw(SELECT);
                    }
                    YY_BREAK
                case 8:
                    YY_RULE_SETUP
                    {
                        if (last_token != DOT)
                        {
                            ParserSingleInstance::pushControlStatus(Parser::WithinSwitch);
                        }
                        DEBUG("BEGIN(INITIAL)");
                        BEGIN(INITIAL);
                        return scan_throw(SWITCH);
                    }
                    YY_BREAK
                case 9:
                    YY_RULE_SETUP
                    {
                        if (last_token != DOT)
                        {
                            ParserSingleInstance::popControlStatus();
                            ParserSingleInstance::pushControlStatus(Parser::WithinOtherwise);
                        }
                        DEBUG("BEGIN(INITIAL)");
                        BEGIN(INITIAL);
                        return scan_throw(OTHERWISE);
                    }
                    YY_BREAK
                case 10:
                    YY_RULE_SETUP
                    {
                        if (last_token != DOT)
                        {
                            ParserSingleInstance::popControlStatus();
                            ParserSingleInstance::pushControlStatus(Parser::WithinCase);
                        }
                        DEBUG("BEGIN(INITIAL)");
                        BEGIN(INITIAL);
                        return scan_throw(CASE);
                    }
                    YY_BREAK
                case 11:
                    YY_RULE_SETUP
                    {
                        if (last_token != DOT)
                        {
                            ParserSingleInstance::pushControlStatus(Parser::WithinFunction);
                        }
                        DEBUG("BEGIN(INITIAL)");
                        BEGIN(INITIAL);
                        return scan_throw(FUNCTION);
                    }
                    YY_BREAK
                case 12:
                    YY_RULE_SETUP
                    {
                        if (last_token != DOT)
                        {
                            ParserSingleInstance::popControlStatus();
                        }
                        DEBUG("BEGIN(INITIAL)");
                        BEGIN(INITIAL);
                        return scan_throw(ENDFUNCTION);
                    }
                    YY_BREAK
                case 13:
                    YY_RULE_SETUP
                    {
                        if (last_token != DOT)
                        {
                            ParserSingleInstance::pushControlStatus(Parser::WithinFunction);
                        }
                        DEBUG("BEGIN(INITIAL)");
                        BEGIN(INITIAL);
                        return scan_throw(HIDDENFUNCTION);
                    }
                    YY_BREAK
                case 14:
                    YY_RULE_SETUP
                    {
                        DEBUG("BEGIN(INITIAL)");
                        BEGIN(INITIAL);
                        return scan_throw(HIDDEN);
                    }
                    YY_BREAK
                case 15:
                    YY_RULE_SETUP
                    {
                        if (last_token != DOT)
                        {
                            ParserSingleInstance::pushControlStatus(Parser::WithinFor);
                        }
                        BEGIN(INITIAL);
                        return scan_throw(FOR);
                    }
                    YY_BREAK
                case 16:
                    YY_RULE_SETUP
                    {
                        if (last_token != DOT)
                        {
                            ParserSingleInstance::pushControlStatus(Parser::WithinWhile);
                        }
                        BEGIN(INITIAL);
                        return scan_throw(WHILE);
                    }
                    YY_BREAK
                case 17:
                    YY_RULE_SETUP
                    {
                        BEGIN(INITIAL);
                        return scan_throw(DO);
                    }
                    YY_BREAK
                case 18:
                    YY_RULE_SETUP
                    {
                        BEGIN(INITIAL);
                        return scan_throw(BREAK);
                    }
                    YY_BREAK
                case 19:
                    YY_RULE_SETUP
                    {
                        BEGIN(INITIAL);
                        return scan_throw(CONTINUE);
                    }
                    YY_BREAK
                case 20:
                    YY_RULE_SETUP
                    {
                        ParserSingleInstance::pushControlStatus(Parser::WithinTry);
                        BEGIN(INITIAL);
                        return scan_throw(TRY);
                    }
                    YY_BREAK
                case 21:
                    YY_RULE_SETUP
                    {
                        // Pop to step out TRY
                        ParserSingleInstance::popControlStatus();
                        ParserSingleInstance::pushControlStatus(Parser::WithinCatch);
                        BEGIN(INITIAL);
                        return scan_throw(CATCH);
                    }
                    YY_BREAK
                case 22:
                    YY_RULE_SETUP
                    {
                        BEGIN(INITIAL);
                        return scan_throw(RETURN);
                    }
                    YY_BREAK
                case 23:
                    YY_RULE_SETUP
                    {
                        BEGIN(INITIAL);
                        return scan_throw(RETURN);
                    }
                    YY_BREAK
                case 24:
                    /* rule 24 can match eol */
                    YY_RULE_SETUP
                    {
                        BEGIN(BEGINID);
                    }
                    YY_BREAK

                case 25:
                    YY_RULE_SETUP
                    {
                        wchar_t *pwText = to_wide_string(yytext);
                        if (yytext != NULL && pwText == NULL)
                        {
                            std::string str = "can not convert'";
                            str += yytext;
                            str += "' to UTF-8";
                            exit_status = SCAN_ERROR;
                            scan_error("can not convert string to UTF-8");
                        }
                        yylval.str = new std::wstring(pwText);
                        FREE(pwText);
                        types::InternalType * pIT = symbol::Context::getInstance()->get(symbol::Symbol(*yylval.str));
                        if (pIT && pIT->isCallable())
                        {
                            scan_throw(ID);
                            BEGIN(SHELLMODE);
                        }
                        else
                        {
                            BEGIN(INITIAL);
                            return scan_throw(ID);
                        }
                    }
                    YY_BREAK

                case 26:
                    YY_RULE_SETUP
                    {
                        return scan_throw(NOT);
                    }
                    YY_BREAK
                case 27:
                    YY_RULE_SETUP
                    {
                        return scan_throw(DOLLAR);
                    }
                    YY_BREAK
                case 28:
                    YY_RULE_SETUP
                    {
                        return scan_throw(BOOLTRUE);
                    }
                    YY_BREAK
                case 29:
                    YY_RULE_SETUP
                    {
                        return scan_throw(BOOLFALSE);
                    }
                    YY_BREAK
                case 30:
                    YY_RULE_SETUP
                    {
                        return scan_throw(AND);
                    }
                    YY_BREAK
                case 31:
                    YY_RULE_SETUP
                    {
                        return scan_throw(ANDAND);
                    }
                    YY_BREAK
                case 32:
                    YY_RULE_SETUP
                    {
                        return scan_throw(OR);
                    }
                    YY_BREAK
                case 33:
                    YY_RULE_SETUP
                    {
                        return scan_throw(OROR);
                    }
                    YY_BREAK
                case 34:
                    YY_RULE_SETUP
                    {
                        return scan_throw(LPAREN);
                    }
                    YY_BREAK
                case 35:
                    YY_RULE_SETUP
                    {
                        return scan_throw(RPAREN);
                    }
                    YY_BREAK
                case 36:
                    YY_RULE_SETUP
                    {
                        scan_step();
                        return scan_throw(SEMI);
                    }
                    YY_BREAK
                case 37:
                    YY_RULE_SETUP
                    {
                        scan_step();
                        return scan_throw(COMMA);
                    }
                    YY_BREAK
                case 38:
                    YY_RULE_SETUP
                    {
                        return scan_throw(COLON);
                    }
                    YY_BREAK
                case 39:
                    YY_RULE_SETUP
                    {
                        yy_push_state(MATRIX);
                        ParserSingleInstance::pushControlStatus(Parser::WithinCell);
                        return scan_throw(LBRACE);
                    }
                    YY_BREAK
                case 40:
                    YY_RULE_SETUP
                    {
                        return scan_throw(RBRACE);
                    }
                    YY_BREAK
                case 41:
                    YY_RULE_SETUP
                    {
                        return scan_throw(DOTQUOTE);
                    }
                    YY_BREAK
                case 42:
                    YY_RULE_SETUP
                    {
                        return scan_throw(DOTTIMES);
                    }
                    YY_BREAK
                case 43:
                    YY_RULE_SETUP
                    {
                        return scan_throw(DOTRDIVIDE);
                    }
                    YY_BREAK
                case 44:
                    YY_RULE_SETUP
                    {
                        return scan_throw(DOTLDIVIDE);
                    }
                    YY_BREAK
                case 45:
                    YY_RULE_SETUP
                    {
                        return scan_throw(DOTPOWER);
                    }
                    YY_BREAK
                case 46:
                    YY_RULE_SETUP
                    {
                        return scan_throw(MINUS);
                    }
                    YY_BREAK
                case 47:
                    YY_RULE_SETUP
                    {
                        return scan_throw(PLUS);
                    }
                    YY_BREAK
                case 48:
                    YY_RULE_SETUP
                    {
                        return scan_throw(TIMES);
                    }
                    YY_BREAK
                case 49:
                    YY_RULE_SETUP
                    {
                        return scan_throw(RDIVIDE);
                    }
                    YY_BREAK
                case 50:
                    YY_RULE_SETUP
                    {
                        return scan_throw(LDIVIDE);
                    }
                    YY_BREAK
                case 51:
                    YY_RULE_SETUP
                    {
                        return scan_throw(POWER);
                    }
                    YY_BREAK
                case 52:
                    YY_RULE_SETUP
                    {
                        return scan_throw(KRONTIMES);
                    }
                    YY_BREAK
                case 53:
                    YY_RULE_SETUP
                    {
                        return scan_throw(KRONRDIVIDE);
                    }
                    YY_BREAK
                case 54:
                    YY_RULE_SETUP
                    {
                        return scan_throw(KRONLDIVIDE);
                    }
                    YY_BREAK
                case 55:
                    /* rule 55 can match eol */
                    YY_RULE_SETUP
                    {
                        unput(yytext[yyleng - 1]);
                        return scan_throw(CONTROLTIMES);
                    }
                    YY_BREAK
                case 56:
                    /* rule 56 can match eol */
                    YY_RULE_SETUP
                    {
                        unput(yytext[yyleng - 1]);
                        return scan_throw(CONTROLRDIVIDE);
                    }
                    YY_BREAK
                case 57:
                    /* rule 57 can match eol */
                    YY_RULE_SETUP
                    {
                        unput(yytext[yyleng - 1]);
                        return scan_throw(CONTROLLDIVIDE);
                    }
                    YY_BREAK
                case 58:
                    YY_RULE_SETUP
                    {
                        return scan_throw(EQ);
                    }
                    YY_BREAK
                case 59:
                    YY_RULE_SETUP
                    {
                        return scan_throw(NE);
                    }
                    YY_BREAK
                case 60:
                    YY_RULE_SETUP
                    {
                        return scan_throw(LT);
                    }
                    YY_BREAK
                case 61:
                    YY_RULE_SETUP
                    {
                        return scan_throw(GT);
                    }
                    YY_BREAK
                case 62:
                    YY_RULE_SETUP
                    {
                        return scan_throw(LE);
                    }
                    YY_BREAK
                case 63:
                    YY_RULE_SETUP
                    {
                        return scan_throw(GE);
                    }
                    YY_BREAK
                case 64:
                    YY_RULE_SETUP
                    {
                        return scan_throw(ASSIGN);
                    }
                    YY_BREAK
                case 65:
                    YY_RULE_SETUP
                    {
                        DEBUG("yy_push_state(MATRIX)");
                        yy_push_state(MATRIX);
                        ParserSingleInstance::pushControlStatus(Parser::WithinMatrix);
                        return scan_throw(LBRACK);
                    }
                    YY_BREAK
                case 66:
                    YY_RULE_SETUP
                    {
                        return scan_throw(RBRACK);
                    }
                    YY_BREAK
                case 67:
                    YY_RULE_SETUP
                    {
                        return scan_throw(DOT);
                    }
                    YY_BREAK
                case 68:
                    YY_RULE_SETUP
                    {
                        ParserSingleInstance::pushControlStatus(Parser::WithinDots);
                        yy_push_state(LINEBREAK);
                    }
                    YY_BREAK
                case 69:
                    YY_RULE_SETUP
                    {
                        yylval.number = atof(yytext);
#ifdef TOKENDEV
                        std::cout << "--> [DEBUG] INTEGER : " << yytext << std::endl;
#endif
                        //  scan_step();
                        return scan_throw(VARINT);
                    }
                    YY_BREAK
                case 70:
                    YY_RULE_SETUP
                    {
                        scan_exponent_convert(yytext);
                        yylval.number = atof(yytext);
#ifdef TOKENDEV
                        std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
                        scan_step();
                        return scan_throw(VARFLOAT);
                    }
                    YY_BREAK
                case 71:
                    YY_RULE_SETUP
                    {
                        yylval.number = atof(yytext);
#ifdef TOKENDEV
                        std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
                        scan_step();
                        return scan_throw(VARFLOAT);
                    }
                    YY_BREAK
                case 72:
                    YY_RULE_SETUP
                    {
                        yylval.number = atof(yytext);
#ifdef TOKENDEV
                        std::cout << "--> [DEBUG] NUMBER : " << yytext << std::endl;
#endif
                        //  scan_step();
                        return scan_throw(NUM);
                    }
                    YY_BREAK
                case 73:
                    YY_RULE_SETUP
                    {
                        yylval.number = atof(yytext);
#ifdef TOKENDEV
                        std::cout << "--> [DEBUG] LITTLE : " << yytext << std::endl;
#endif
                        scan_step();
                        return scan_throw(NUM);
                    }
                    YY_BREAK
                case 74:
                    YY_RULE_SETUP
                    {
                        wchar_t *pwText = to_wide_string(yytext);
                        if (yytext != NULL && pwText == NULL)
                        {
                            std::string str = "can not convert'";
                            str += yytext;
                            str += "' to UTF-8";
                            exit_status = SCAN_ERROR;
                            scan_error("can not convert string to UTF-8");
                        }
                        yylval.str = new std::wstring(pwText);
                        FREE(pwText);
#ifdef TOKENDEV
                        std::cout << "--> [DEBUG] ID : " << yytext << std::endl;
#endif
                        //  scan_step();
                        return scan_throw(ID);
                    }
                    YY_BREAK
                case 75:
                    YY_RULE_SETUP
                    {
                        yylval.comment = new std::wstring();
                        comment_level = 1;
                        ParserSingleInstance::pushControlStatus(Parser::WithinBlockComment);
                        yy_push_state(REGIONCOMMENT);
                    }
                    YY_BREAK
                case 76:
                    YY_RULE_SETUP
                    {
                        pstBuffer = new std::string();
                        yy_push_state(LINECOMMENT);
                    }
                    YY_BREAK
                case 77:
                    YY_RULE_SETUP
                    {
                        pstBuffer = new std::string();
                        yy_push_state(DOUBLESTRING);
                    }
                    YY_BREAK
                case 78:
                    YY_RULE_SETUP
                    {
                        /*
                        ** Matrix Transposition special behaviour
                        ** ID' []' toto()' are transposition call
                        */
                        if (last_token == ID
                        || last_token == RBRACK
                        || last_token == RPAREN
                        || last_token == RBRACE
                        || last_token == VARINT
                        || last_token == VARFLOAT
                        || last_token == NUM
                        || last_token == BOOLTRUE
                        || last_token == BOOLFALSE)
                        {
                            return scan_throw(QUOTE);
                        }
                        else
                        {
                            pstBuffer = new std::string();
                            yy_push_state(SIMPLESTRING);
                        }
                    }
                    YY_BREAK
                case 79:
                    YY_RULE_SETUP
                    {
                        scan_step();
                        scan_throw(SPACES);
                    }
                    YY_BREAK
                case 80:
                    /* rule 80 can match eol */
                    YY_RULE_SETUP
                    {
                        yylloc.last_line += 1;
                        yylloc.last_column = 1;
                        scan_step();
                        if (last_token != EOL)
                        {
                            return scan_throw(EOL);
                        }

                    }
                    YY_BREAK
                case 81:
                    /* rule 81 can match eol */
                    YY_RULE_SETUP
                    {
                        yylloc.last_line += 1;
                        yylloc.last_column = 1;
                        scan_step();
                        if (last_token != EOL)
                        {
                            return scan_throw(EOL);
                        }
                        scan_throw(EOL);
                    }
                    YY_BREAK
                case 82:
                    /* rule 82 can match eol */
                    YY_RULE_SETUP
                    {
                        yylloc.last_line += 2;
                        yylloc.last_column = 1;
                        scan_step();
                        if (last_token != EOL)
                        {
                            return scan_throw(EOL);
                        }
                        scan_throw(EOL);
                    }
                    YY_BREAK
                case 83:
                    YY_RULE_SETUP
                    {
                        std::string str = "unexpected token '";
                        str += yytext;
                        str += "'";
                        exit_status = SCAN_ERROR;
                        scan_error(str);
                    }
                    YY_BREAK

                case 84:
                    YY_RULE_SETUP
                    {
                        paren_level++;
                        return scan_throw(LPAREN);
                    }
                    YY_BREAK
                case 85:
                    YY_RULE_SETUP
                    {
                        paren_level--;
                        return scan_throw(RPAREN);
                    }
                    YY_BREAK
                case 86:
                    YY_RULE_SETUP
                    {
                        unput(yytext[yyleng - 1]);
                        if (last_token == ID
                        || last_token == RPAREN
                        || last_token == QUOTE
                        || last_token == VARINT
                        || last_token == VARFLOAT
                        || last_token == NUM)
                        {
                            return scan_throw(COMMA);
                        }
                    }
                    YY_BREAK
                case 87:
                    YY_RULE_SETUP
                    {
                        return scan_throw(COLON);
                    }
                    YY_BREAK
                case 88:
                    /* rule 88 can match eol */
                    YY_RULE_SETUP
                    {
                        yylloc.last_line += 1;
                        yylloc.last_column = 1;
                        if (last_token != DOTS && last_token != EOL)
                        {
                            return scan_throw(EOL);
                        }
                        scan_throw(EOL);
                    }
                    YY_BREAK
                case 89:
                    YY_RULE_SETUP
                    {
                        DEBUG("yy_pop_state()");
                        yy_pop_state();
                        ParserSingleInstance::popControlStatus();
                        return scan_throw(RBRACK);
                    }
                    YY_BREAK
                case 90:
                    YY_RULE_SETUP
                    {
                        yy_pop_state();
                        ParserSingleInstance::popControlStatus();
                        return scan_throw(RBRACE);
                    }
                    YY_BREAK
                case 91:
                case 92:
                    YY_RULE_SETUP
                    {
                        return scan_throw(PLUS);
                    }
                    YY_BREAK
                case 93:
                case 94:
                    YY_RULE_SETUP
                    {
                        return scan_throw(MINUS);
                    }
                    YY_BREAK
                case 95:
                    YY_RULE_SETUP
                    {
                        // no need to unput the '+'
                        if (last_token != LBRACK
                        && last_token != EOL
                        && last_token != SEMI
                        && last_token != COMMA
                        && paren_level == 0)
                        {
                            return scan_throw(COMMA);
                        }
                        else
                        {
                            unput('+');
                        }
                    }
                    YY_BREAK
                case 96:
                    YY_RULE_SETUP
                    {
                        unput('-');
                        if (last_token != LBRACK
                        && last_token != EOL
                        && last_token != SEMI
                        && last_token != COMMA
                        && paren_level == 0)
                        {
                            return scan_throw(COMMA);
                        }
                    }
                    YY_BREAK
                case 97:
                    YY_RULE_SETUP
                    {
                        std::string str = "unexpected token '";
                        str += yytext;
                        str += "' within a matrix.";
                        exit_status = SCAN_ERROR;
                        scan_error(str);
                    }
                    YY_BREAK
                case 98:
                    /* rule 98 can match eol */
                    YY_RULE_SETUP
                    {
                        /* Just do nothing */
                        yylloc.last_line += 1;
                        yylloc.last_column = 1;
                        scan_step();
                        scan_throw(EOL);
                    }
                    YY_BREAK
                case 99:
                    YY_RULE_SETUP
                    {
                        /* Just do nothing */
                        pstBuffer = new std::string();
                        yy_push_state(LINECOMMENT);
                        scan_throw(DOTS);
                    }
                    YY_BREAK
                case YY_STATE_EOF(MATRIX):
                {
                    yy_pop_state();
                }
                YY_BREAK

                case 100:
                    /* rule 100 can match eol */
                    YY_RULE_SETUP
                    {
                        yylloc.last_line += 1;
                        yylloc.last_column = 1;
                        scan_step();
                        yy_pop_state();
                        ParserSingleInstance::popControlStatus();
                    }
                    YY_BREAK
                case 101:
                    YY_RULE_SETUP
                    {
                        ++comment_level;
                        yy_push_state(REGIONCOMMENT);
                    }
                    YY_BREAK
                case 102:
                    YY_RULE_SETUP
                    {
                        scan_throw(DOTS);
                        pstBuffer = new std::string();
                        yy_push_state(LINECOMMENT);
                    }
                    YY_BREAK
                case 103:
                    YY_RULE_SETUP
                    {
                        /* Do nothing... */
                    }
                    YY_BREAK
                case YY_STATE_EOF(LINEBREAK):
                {
                    yy_pop_state();
                }
                YY_BREAK
                case 104:
                    YY_RULE_SETUP
                    {
                        std::string str = "unexpected token '";
                        str += yytext;
                        str += "' after line break with .. or ...";
                        exit_status = SCAN_ERROR;
                        scan_error(str);
                    }
                    YY_BREAK

                case 105:
                    /* rule 105 can match eol */
                    YY_RULE_SETUP
                    {
                        //yylloc.last_line += 1;
                        //yylloc.last_column = 1;
                        //scan_step();
                        yy_pop_state();
                        for (int i = yyleng - 1 ; i >= 0 ; --i)
                        {
                            //std::cerr << "Unputting i = {" << i << "}" << std::endl;
                            //std::cerr << "Unputting {" << yytext[i] << "}" << std::endl;
                            unput(yytext[i]);
                            yylloc.last_column--;
                        }
                        /*
                        ** To forgot comments after lines break
                        */
                        if (last_token != DOTS)
                        {
                            //std::cerr << "pstBuffer = {" << *pstBuffer << "}" << std::endl;
                            //std::cerr << "pstBuffer->c_str() = {" << pstBuffer->c_str() << "}" << std::endl;
                            wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
                            //std::wcerr << L"pwstBuffer = W{" << pwstBuffer << L"}" << std::endl;
                            if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
                            {
                                std::string str = "can not convert'";
                                str += pstBuffer->c_str();
                                str += "' to UTF-8";
                                exit_status = SCAN_ERROR;
                                scan_error("can not convert string to UTF-8");
                            }
                            yylval.comment = new std::wstring(pwstBuffer);
                            delete pstBuffer;
                            FREE (pwstBuffer);
                            return scan_throw(COMMENT);
                        }
                        else
                        {
                            delete pstBuffer;
                        }
                    }
                    YY_BREAK
                case YY_STATE_EOF(LINECOMMENT):
                {
                    yy_pop_state();
                    wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
                    if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
                    {
                        std::string str = "can not convert'";
                        str += pstBuffer->c_str();
                        str += "' to UTF-8";
                        exit_status = SCAN_ERROR;
                        scan_error("can not convert string to UTF-8");
                    }
                    yylval.comment = new std::wstring(pwstBuffer);
                    delete pstBuffer;
                    FREE (pwstBuffer);
                    return scan_throw(COMMENT);
                }
                YY_BREAK
                case 106:
                    YY_RULE_SETUP
                    {
                        // Put the char in a temporary CHAR buffer to go through UTF-8 trouble
                        // only translate to WCHAR_T when popping state.
                        *pstBuffer += yytext;
                    }
                    YY_BREAK

                case 107:
                    YY_RULE_SETUP
                    {
                        --comment_level;
                        if (comment_level == 0)
                        {
                            ParserSingleInstance::popControlStatus();
                            yy_pop_state();
                            //return scan_throw(BLOCKCOMMENT);
                        }
                    }
                    YY_BREAK
                case 108:
                    YY_RULE_SETUP
                    {
                        ++comment_level;
                        yy_push_state(REGIONCOMMENT);
                    }
                    YY_BREAK
                case 109:
                    /* rule 109 can match eol */
                    YY_RULE_SETUP
                    {
                        yylloc.last_line += 1;
                        yylloc.last_column = 1;
                        scan_step();
                        *yylval.comment += L"\n//";
                    }
                    YY_BREAK
                case 110:
                case 111:
                    YY_RULE_SETUP
                    {
                        wchar_t *pwText = to_wide_string(yytext);
                        *yylval.comment += std::wstring(pwText);
                        FREE(pwText);
                    }
                    YY_BREAK
                case YY_STATE_EOF(REGIONCOMMENT):
                {
                    yy_pop_state();
                    //    std::string str = "unexpected end of file in a comment";
                    //    exit_status = SCAN_ERROR;
                    //    scan_error(str);
                }
                YY_BREAK

                case 112:
                    YY_RULE_SETUP
                    {
                        *pstBuffer += "\"";
                    }
                    YY_BREAK
                case 113:
                    YY_RULE_SETUP
                    {
                        *pstBuffer += "'";
                    }
                    YY_BREAK
                case 114:
                    YY_RULE_SETUP
                    {
                        *pstBuffer += "\"";
                    }
                    YY_BREAK
                case 115:
                    YY_RULE_SETUP
                    {
                        *pstBuffer += "'";
                    }
                    YY_BREAK
                case 116:
                    YY_RULE_SETUP
                    {
                        yy_pop_state();
                        scan_step();
                        wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
                        if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
                        {
                            std::string str = "can not convert'";
                            str += pstBuffer->c_str();
                            str += "' to UTF-8";
                            exit_status = SCAN_ERROR;
                            scan_error("can not convert string to UTF-8");
                        }
                        yylval.str = new std::wstring(pwstBuffer);
                        delete pstBuffer;
                        FREE(pwstBuffer);
                        return scan_throw(STR);
                    }
                    YY_BREAK
                case 117:
                    YY_RULE_SETUP
                    {
                        std::string str = "Heterogeneous string detected, starting with ' and ending with \".";
                        exit_status = SCAN_ERROR;
                        scan_error(str);
                    }
                    YY_BREAK
                case 118:
                    /* rule 118 can match eol */
                    YY_RULE_SETUP
                    {
                        /* Do nothing... Just skip */
                    }
                    YY_BREAK
                case 119:
                    /* rule 119 can match eol */
                    YY_RULE_SETUP
                    {
                        std::string str = "unexpected end of line in a string.";
                        exit_status = SCAN_ERROR;
                        scan_error(str);
                        yylloc.last_line += 1;
                        yylloc.last_column = 1;
                    }
                    YY_BREAK
                case YY_STATE_EOF(SIMPLESTRING):
                {
                    std::string str = "unexpected end of file in a string.";
                    exit_status = SCAN_ERROR;
                    scan_error(str);
                }
                YY_BREAK
                case 120:
                case 121:
                    YY_RULE_SETUP
                    {
                        scan_step();
                        *pstBuffer += yytext;
                    }
                    YY_BREAK

                case 122:
                    YY_RULE_SETUP
                    {
                        *pstBuffer += "\"";
                    }
                    YY_BREAK
                case 123:
                    YY_RULE_SETUP
                    {
                        *pstBuffer += "'";
                    }
                    YY_BREAK
                case 124:
                    YY_RULE_SETUP
                    {
                        *pstBuffer += "\"";
                    }
                    YY_BREAK
                case 125:
                    YY_RULE_SETUP
                    {
                        *pstBuffer += "'";
                    }
                    YY_BREAK
                case 126:
                    YY_RULE_SETUP
                    {
                        yy_pop_state();
                        scan_step();
                        wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
                        if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
                        {
                            std::string str = "can not convert'";
                            str += pstBuffer->c_str();
                            str += "' to UTF-8";
                            exit_status = SCAN_ERROR;
                            scan_error("can not convert string to UTF-8");
                        }
                        yylval.str = new std::wstring(pwstBuffer);
                        delete pstBuffer;
                        FREE(pwstBuffer);
                        return scan_throw(STR);
                    }
                    YY_BREAK
                case 127:
                    YY_RULE_SETUP
                    {
                        std::string str = "Heterogeneous string detected, starting with \" and ending with '.";
                        exit_status = SCAN_ERROR;
                        scan_error(str);
                    }
                    YY_BREAK
                case 128:
                    /* rule 128 can match eol */
                    YY_RULE_SETUP
                    {
                        /* Do nothing... Just skip */
                    }
                    YY_BREAK
                case 129:
                    /* rule 129 can match eol */
                    YY_RULE_SETUP
                    {
                        std::string str = "unexpected end of line in a string";
                        exit_status = SCAN_ERROR;
                        scan_error(str);
                        yylloc.last_line += 1;
                        yylloc.last_column = 1;
                    }
                    YY_BREAK
                case YY_STATE_EOF(DOUBLESTRING):
                {
                    std::string str = "unexpected end of file in a string";
                    exit_status = SCAN_ERROR;
                    scan_error(str);
                }
                YY_BREAK
                case 130:
                case 131:
                    YY_RULE_SETUP
                    {
                        scan_step();
                        *pstBuffer += yytext;
                    }
                    YY_BREAK

                case 132:
                    YY_RULE_SETUP
                    {
                        if (last_token == ID)
                        {
                            scan_throw(SPACES);
                            return ID;
                        }
                    }
                    YY_BREAK
                case 133:
                    YY_RULE_SETUP
                    {
                        BEGIN(INITIAL);
                        scan_step();
                        return scan_throw(SEMI);
                    }
                    YY_BREAK
                case 134:
                    YY_RULE_SETUP
                    {
                        BEGIN(INITIAL);
                        scan_step();
                        return scan_throw(COMMA);
                    }
                    YY_BREAK
                case 135:
                    /* rule 135 can match eol */
                    YY_RULE_SETUP
                    {
                        BEGIN(INITIAL);
                        yylloc.last_line += 1;
                        yylloc.last_column = 1;
                        scan_step();
                        return scan_throw(EOL);
                    }
                    YY_BREAK
                case 136:
                    YY_RULE_SETUP
                    {
                        if (last_token == STR)
                        {
                            wchar_t *pwText = to_wide_string(yytext);
                            yylval.str = new std::wstring(pwText);
                            FREE(pwText);
                            return scan_throw(STR);
                        }
                        else
                        {
                            BEGIN(INITIAL);
                            return scan_throw(ASSIGN);
                        }
                    }
                    YY_BREAK
                case 137:
                    YY_RULE_SETUP
                    {
                        if (last_token == STR)
                        {
                            wchar_t *pwText = to_wide_string(yytext);
                            yylval.str = new std::wstring(pwText);
                            FREE(pwText);
                            return scan_throw(STR);
                        }
                        else
                        {
                            BEGIN(INITIAL);
                            return scan_throw(LPAREN);
                        }
                    }
                    YY_BREAK
                case 138:
                    YY_RULE_SETUP
                    {
                        if (last_token == STR)
                        {
                            wchar_t *pwText = to_wide_string(yytext);
                            yylval.str = new std::wstring(pwText);
                            FREE(pwText);
                            return scan_throw(STR);
                        }
                        else
                        {
                            BEGIN(INITIAL);
                            return scan_throw(LT);
                        }
                    }
                    YY_BREAK
                case 139:
                    YY_RULE_SETUP
                    {
                        if (last_token == STR)
                        {
                            wchar_t *pwText = to_wide_string(yytext);
                            yylval.str = new std::wstring(pwText);
                            FREE(pwText);
                            return scan_throw(STR);
                        }
                        else
                        {
                            BEGIN(INITIAL);
                            return scan_throw(GT);
                        }
                    }
                    YY_BREAK
                case 140:
                    YY_RULE_SETUP
                    {
                        if (last_token == STR)
                        {
                            wchar_t *pwText = to_wide_string(yytext);
                            yylval.str = new std::wstring(pwText);
                            FREE(pwText);
                            return scan_throw(STR);
                        }
                        else
                        {
                            BEGIN(INITIAL);
                            return scan_throw(NOT);
                        }
                    }
                    YY_BREAK
                case 141:
                    YY_RULE_SETUP
                    {
                        wchar_t *pwText = to_wide_string(yytext);
                        yylval.str = new std::wstring(pwText);
                        FREE(pwText);
                        return scan_throw(STR);
                    }
                    YY_BREAK
                case YY_STATE_EOF(SHELLMODE):
                {
                    BEGIN(INITIAL);
                }
                YY_BREAK

                case 142:
                    YY_RULE_SETUP
                    ECHO;
                    YY_BREAK
                case YY_STATE_EOF(INITIAL):
                case YY_STATE_EOF(BEGINID):
                    yyterminate();

                case YY_END_OF_BUFFER:
                {
                    /* Amount of text matched not including the EOB char. */
                    int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

                    /* Undo the effects of YY_DO_BEFORE_ACTION. */
                    *yy_cp = (yy_hold_char);
                    YY_RESTORE_YY_MORE_OFFSET

                    if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
                    {
                        /* We're scanning a new file or input source.  It's
                         * possible that this happened because the user
                         * just pointed yyin at a new source and called
                         * yylex().  If so, then we have to assure
                         * consistency between YY_CURRENT_BUFFER and our
                         * globals.  Here is the right place to do so, because
                         * this is the first action (other than possibly a
                         * back-up) that will match for the new input source.
                         */
                        (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
                        YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
                        YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
                    }

                    /* Note that here we test for yy_c_buf_p "<=" to the position
                     * of the first EOB in the buffer, since yy_c_buf_p will
                     * already have been incremented past the NUL character
                     * (since all states make transitions on EOB to the
                     * end-of-buffer state).  Contrast this with the test
                     * in input().
                     */
                    if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
                    {
                        /* This was really a NUL. */
                        yy_state_type yy_next_state;

                        (yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

                        yy_current_state = yy_get_previous_state(  );

                        /* Okay, we're now positioned to make the NUL
                         * transition.  We couldn't have
                         * yy_get_previous_state() go ahead and do it
                         * for us because it doesn't know how to deal
                         * with the possibility of jamming (and we don't
                         * want to build jamming into it because then it
                         * will run more slowly).
                         */

                        yy_next_state = yy_try_NUL_trans( yy_current_state );

                        yy_bp = (yytext_ptr) + YY_MORE_ADJ;

                        if ( yy_next_state )
                        {
                            /* Consume the NUL. */
                            yy_cp = ++(yy_c_buf_p);
                            yy_current_state = yy_next_state;
                            goto yy_match;
                        }

                        else
                        {
                            yy_cp = (yy_c_buf_p);
                            goto yy_find_action;
                        }
                    }

                    else switch ( yy_get_next_buffer(  ) )
                        {
                            case EOB_ACT_END_OF_FILE:
                            {
                                (yy_did_buffer_switch_on_eof) = 0;

                                if ( yywrap( ) )
                                {
                                    /* Note: because we've taken care in
                                     * yy_get_next_buffer() to have set up
                                     * yytext, we can now set up
                                     * yy_c_buf_p so that if some total
                                     * hoser (like flex itself) wants to
                                     * call the scanner after we return the
                                     * YY_NULL, it'll still work - another
                                     * YY_NULL will get returned.
                                     */
                                    (yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

                                    yy_act = YY_STATE_EOF(YY_START);
                                    goto do_action;
                                }

                                else
                                {
                                    if ( ! (yy_did_buffer_switch_on_eof) )
                                    {
                                        YY_NEW_FILE;
                                    }
                                }
                                break;
                            }

                            case EOB_ACT_CONTINUE_SCAN:
                                (yy_c_buf_p) =
                                    (yytext_ptr) + yy_amount_of_matched_text;

                                yy_current_state = yy_get_previous_state(  );

                                yy_cp = (yy_c_buf_p);
                                yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                                goto yy_match;

                            case EOB_ACT_LAST_MATCH:
                                (yy_c_buf_p) =
                                    &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

                                yy_current_state = yy_get_previous_state(  );

                                yy_cp = (yy_c_buf_p);
                                yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                                goto yy_find_action;
                        }
                    break;
                }

                default:
                    YY_FATAL_ERROR(
                        "fatal flex scanner internal error--no action found" );
            } /* end of action switch */
        } /* end of scanning one token */
    } /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
    register char *source = (yytext_ptr);
    register int number_to_move, i;
    int ret_val;

    if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
        YY_FATAL_ERROR(
            "fatal flex scanner internal error--end of buffer missed" );

    if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
    {
        /* Don't try to fill the buffer, so this is an EOF. */
        if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
        {
            /* We matched a single character, the EOB, so
             * treat this as a final EOF.
             */
            return EOB_ACT_END_OF_FILE;
        }

        else
        {
            /* We matched some text prior to the EOB, first
             * process it.
             */
            return EOB_ACT_LAST_MATCH;
        }
    }

    /* Try to read more data. */

    /* First move last chars to start of buffer. */
    number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

    for ( i = 0; i < number_to_move; ++i )
    {
        *(dest++) = *(source++);
    }

    if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
        /* don't do the read, it's not guaranteed to return an EOF,
         * just force an EOF
         */
    {
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;
    }

    else
    {
        yy_size_t num_to_read =
            YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

        while ( num_to_read <= 0 )
        {
            /* Not enough room in the buffer - grow it. */

            YY_FATAL_ERROR(
                "input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

        }

        if ( num_to_read > YY_READ_BUF_SIZE )
        {
            num_to_read = YY_READ_BUF_SIZE;
        }

        /* Read in more data. */
        YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
                  (yy_n_chars), num_to_read );

        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
    }

    if ( (yy_n_chars) == 0 )
    {
        if ( number_to_move == YY_MORE_ADJ )
        {
            ret_val = EOB_ACT_END_OF_FILE;
            yyrestart(yyin  );
        }

        else
        {
            ret_val = EOB_ACT_LAST_MATCH;
            YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
                YY_BUFFER_EOF_PENDING;
        }
    }

    else
    {
        ret_val = EOB_ACT_CONTINUE_SCAN;
    }

    if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size)
    {
        /* Extend the array by 50%, plus the number we really need. */
        yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
        YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, new_size  );
        if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
        {
            YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
        }
    }

    (yy_n_chars) += number_to_move;
    YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
    YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

    (yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

    return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state (void)
{
    register yy_state_type yy_current_state;
    register char *yy_cp;

    yy_current_state = (yy_start);
    yy_current_state += YY_AT_BOL();

    (yy_state_ptr) = (yy_state_buf);
    *(yy_state_ptr)++ = yy_current_state;

    for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
    {
        register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
        while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
        {
            yy_current_state = (int) yy_def[yy_current_state];
            if ( yy_current_state >= 845 )
            {
                yy_c = yy_meta[(unsigned int) yy_c];
            }
        }
        yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
        *(yy_state_ptr)++ = yy_current_state;
    }

    return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
    register int yy_is_jam;

    register YY_CHAR yy_c = 1;
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
    {
        yy_current_state = (int) yy_def[yy_current_state];
        if ( yy_current_state >= 845 )
        {
            yy_c = yy_meta[(unsigned int) yy_c];
        }
    }
    yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
    yy_is_jam = (yy_current_state == 844);
    if ( ! yy_is_jam )
    {
        *(yy_state_ptr)++ = yy_current_state;
    }

    return yy_is_jam ? 0 : yy_current_state;
}

static void yyunput (int c, register char * yy_bp )
{
    register char *yy_cp;

    yy_cp = (yy_c_buf_p);

    /* undo effects of setting up yytext */
    *yy_cp = (yy_hold_char);

    if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
    {
        /* need to shift things up to make room */
        /* +2 for EOB chars. */
        register yy_size_t number_to_move = (yy_n_chars) + 2;
        register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
                                  YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
        register char *source =
            &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

        while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
        {
            *--dest = *--source;
        }

        yy_cp += (int) (dest - source);
        yy_bp += (int) (dest - source);
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
            (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

        if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
        {
            YY_FATAL_ERROR( "flex scanner push-back overflow" );
        }
    }

    *--yy_cp = (char) c;

    (yytext_ptr) = yy_bp;
    (yy_hold_char) = *yy_cp;
    (yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput (void)
#else
static int input  (void)
#endif

{
    int c;

    *(yy_c_buf_p) = (yy_hold_char);

    if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
    {
        /* yy_c_buf_p now points to the character we want to return.
         * If this occurs *before* the EOB characters, then it's a
         * valid NUL; if not, then we've hit the end of the buffer.
         */
        if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
            /* This was really a NUL. */
        {
            *(yy_c_buf_p) = '\0';
        }

        else
        {
            /* need more input */
            yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
            ++(yy_c_buf_p);

            switch ( yy_get_next_buffer(  ) )
            {
                case EOB_ACT_LAST_MATCH:
                    /* This happens because yy_g_n_b()
                     * sees that we've accumulated a
                     * token and flags that we need to
                     * try matching the token before
                     * proceeding.  But for input(),
                     * there's no matching to consider.
                     * So convert the EOB_ACT_LAST_MATCH
                     * to EOB_ACT_END_OF_FILE.
                     */

                    /* Reset buffer status. */
                    yyrestart(yyin );

                /*FALLTHROUGH*/

                case EOB_ACT_END_OF_FILE:
                {
                    if ( yywrap( ) )
                    {
                        return EOF;
                    }

                    if ( ! (yy_did_buffer_switch_on_eof) )
                    {
                        YY_NEW_FILE;
                    }
#ifdef __cplusplus
                    return yyinput();
#else
                    return input();
#endif
                }

                case EOB_ACT_CONTINUE_SCAN:
                    (yy_c_buf_p) = (yytext_ptr) + offset;
                    break;
            }
        }
    }

    c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
    *(yy_c_buf_p) = '\0';	/* preserve yytext */
    (yy_hold_char) = *++(yy_c_buf_p);

    YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

    return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 *
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyrestart  (FILE * input_file )
{

    if ( ! YY_CURRENT_BUFFER )
    {
        yyensure_buffer_stack ();
        YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin, YY_BUF_SIZE );
    }

    yy_init_buffer(YY_CURRENT_BUFFER, input_file );
    yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 *
 */
void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{

    /* TODO. We should be able to replace this entire function body
     * with
     *		yypop_buffer_state();
     *		yypush_buffer_state(new_buffer);
     */
    yyensure_buffer_stack ();
    if ( YY_CURRENT_BUFFER == new_buffer )
    {
        return;
    }

    if ( YY_CURRENT_BUFFER )
    {
        /* Flush out information for old buffer. */
        *(yy_c_buf_p) = (yy_hold_char);
        YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
    }

    YY_CURRENT_BUFFER_LVALUE = new_buffer;
    yy_load_buffer_state( );

    /* We don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    (yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
    (yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
    yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
    (yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 *
 * @return the allocated buffer state.
 */
YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
    if ( ! b )
    {
        YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
    }

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
    if ( ! b->yy_ch_buf )
    {
        YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
    }

    b->yy_is_our_buffer = 1;

    yy_init_buffer(b, file );

    return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 *
 */
void yy_delete_buffer (YY_BUFFER_STATE  b )
{

    if ( ! b )
    {
        return;
    }

    if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
    {
        YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;
    }

    if ( b->yy_is_our_buffer )
    {
        yyfree((void *) b->yy_ch_buf  );
    }

    yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
    int oerrno = errno;

    yy_flush_buffer(b );

    b->yy_input_file = file;
    b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER)
    {
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

    b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;

    errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 *
 */
void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    if ( ! b )
    {
        return;
    }

    b->yy_n_chars = 0;

    /* We always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[0];

    b->yy_at_bol = 1;
    b->yy_buffer_status = YY_BUFFER_NEW;

    if ( b == YY_CURRENT_BUFFER )
    {
        yy_load_buffer_state( );
    }
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    if (new_buffer == NULL)
    {
        return;
    }

    yyensure_buffer_stack();

    /* This block is copied from yy_switch_to_buffer. */
    if ( YY_CURRENT_BUFFER )
    {
        /* Flush out information for old buffer. */
        *(yy_c_buf_p) = (yy_hold_char);
        YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
    }

    /* Only push if top exists. Otherwise, replace top. */
    if (YY_CURRENT_BUFFER)
    {
        (yy_buffer_stack_top)++;
    }
    YY_CURRENT_BUFFER_LVALUE = new_buffer;

    /* copied from yy_switch_to_buffer. */
    yy_load_buffer_state( );
    (yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *
 */
void yypop_buffer_state (void)
{
    if (!YY_CURRENT_BUFFER)
    {
        return;
    }

    yy_delete_buffer(YY_CURRENT_BUFFER );
    YY_CURRENT_BUFFER_LVALUE = NULL;
    if ((yy_buffer_stack_top) > 0)
    {
        --(yy_buffer_stack_top);
    }

    if (YY_CURRENT_BUFFER)
    {
        yy_load_buffer_state( );
        (yy_did_buffer_switch_on_eof) = 1;
    }
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
    yy_size_t num_to_alloc;

    if (!(yy_buffer_stack))
    {

        /* First allocation is just for 2 elements, since we don't know if this
         * scanner will even need a stack. We use 2 instead of 1 to avoid an
         * immediate realloc on the next call.
         */
        num_to_alloc = 1;
        (yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
                            (num_to_alloc * sizeof(struct yy_buffer_state*)
                            );
        if ( ! (yy_buffer_stack) )
        {
            YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
        }

        memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

        (yy_buffer_stack_max) = num_to_alloc;
        (yy_buffer_stack_top) = 0;
        return;
    }

    if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1)
    {

        /* Increase the buffer to prepare for a possible push. */
        int grow_size = 8 /* arbitrary grow size */;

        num_to_alloc = (yy_buffer_stack_max) + grow_size;
        (yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
                            ((yy_buffer_stack),
                             num_to_alloc * sizeof(struct yy_buffer_state*)
                            );
        if ( ! (yy_buffer_stack) )
        {
            YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
        }

        /* zero only the new slots.*/
        memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
        (yy_buffer_stack_max) = num_to_alloc;
    }
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
    YY_BUFFER_STATE b;

    if ( size < 2 ||
            base[size - 2] != YY_END_OF_BUFFER_CHAR ||
            base[size - 1] != YY_END_OF_BUFFER_CHAR )
        /* They forgot to leave room for the EOB's. */
    {
        return 0;
    }

    b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
    if ( ! b )
    {
        YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );
    }

    b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
    b->yy_buf_pos = b->yy_ch_buf = base;
    b->yy_is_our_buffer = 0;
    b->yy_input_file = 0;
    b->yy_n_chars = b->yy_buf_size;
    b->yy_is_interactive = 0;
    b->yy_at_bol = 1;
    b->yy_fill_buffer = 0;
    b->yy_buffer_status = YY_BUFFER_NEW;

    yy_switch_to_buffer(b  );

    return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 *
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{

    return yy_scan_bytes(yystr, strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
    YY_BUFFER_STATE b;
    char *buf;
    yy_size_t n;
    yy_size_t i;

    /* Get memory for full buffer, including space for trailing EOB's. */
    n = _yybytes_len + 2;
    buf = (char *) yyalloc(n  );
    if ( ! buf )
    {
        YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );
    }

    for ( i = 0; i < _yybytes_len; ++i )
    {
        buf[i] = yybytes[i];
    }

    buf[_yybytes_len] = buf[_yybytes_len + 1] = YY_END_OF_BUFFER_CHAR;

    b = yy_scan_buffer(buf, n );
    if ( ! b )
    {
        YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );
    }

    /* It's okay to grow etc. this buffer, and we should throw it
     * away when we're done.
     */
    b->yy_is_our_buffer = 1;

    return b;
}

static void yy_push_state (int  new_state )
{
    if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
    {
        yy_size_t new_size;

        (yy_start_stack_depth) += YY_START_STACK_INCR;
        new_size = (yy_start_stack_depth) * sizeof( int );

        if ( ! (yy_start_stack) )
        {
            (yy_start_stack) = (int *) yyalloc(new_size  );
        }

        else
        {
            (yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack), new_size  );
        }

        if ( ! (yy_start_stack) )
        {
            YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
        }
    }

    (yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

    BEGIN(new_state);
}

static void yy_pop_state  (void)
{
    if ( --(yy_start_stack_ptr) < 0 )
    {
        YY_FATAL_ERROR( "start-condition stack underflow" );
    }

    BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

static int yy_top_state  (void)
{
    return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    (void) fprintf( stderr, "%s\n", msg );
    exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 *
 */
int yyget_lineno  (void)
{

    return yylineno;
}

/** Get the input stream.
 *
 */
FILE *yyget_in  (void)
{
    return yyin;
}

/** Get the output stream.
 *
 */
FILE *yyget_out  (void)
{
    return yyout;
}

/** Get the length of the current token.
 *
 */
yy_size_t yyget_leng  (void)
{
    return yyleng;
}

/** Get the current token.
 *
 */

char *yyget_text  (void)
{
    return yytext;
}

/** Set the current line number.
 * @param line_number
 *
 */
void yyset_lineno (int  line_number )
{

    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 *
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
    yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
    yyout = out_str ;
}

int yyget_debug  (void)
{
    return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
    yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
    /* Initialization is the same as for the non-reentrant scanner.
    * This function is called from yylex_destroy(), so don't allocate here.
    */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

    /* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{

    /* Pop the buffer stack, destroying each element. */
    while (YY_CURRENT_BUFFER)
    {
        yy_delete_buffer(YY_CURRENT_BUFFER  );
        YY_CURRENT_BUFFER_LVALUE = NULL;
        yypop_buffer_state();
    }

    /* Destroy the stack itself. */
    yyfree((yy_buffer_stack) );
    (yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
    yyfree((yy_start_stack)  );
    (yy_start_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
    register int i;
    for ( i = 0; i < n; ++i )
    {
        s1[i] = s2[i];
    }
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
    register int n;
    for ( n = 0; s[n]; ++n )
        ;

    return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
    return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
    /* The cast to (char *) in the following accommodates both
     * implementations that use char* generic pointers, and those
     * that use void* generic pointers.  It works with the latter
     * because both ANSI C and C++ allow castless assignment from
     * any pointer type to void*, and deal with argument conversions
     * as though doing an assignment.
     */
    return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
    free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

int scan_throw(int token)
{
    last_token = token;
#ifdef DEV
    std::cout << "--> [DEBUG] TOKEN : " << token << std::endl;
#endif
    return token;
}

int get_last_token()
{
    return last_token;
}

void scan_step()
{
    yylloc.first_line = yylloc.last_line;
    yylloc.first_column = yylloc.last_column;
}

void scan_error(std::string msg)
{
    wchar_t* pstMsg = to_wide_string(msg.c_str());

    //std::wcerr << pstMsg << std::endl;
    ParserSingleInstance::PrintError(pstMsg);
    ParserSingleInstance::setExitStatus(Parser::Failed);
    ParserSingleInstance::resetControlStatus();
    FREE(pstMsg);
    last_token = YYEOF;
    BEGIN(INITIAL);
}

/*
** convert floating numbers to C standard
** 1.2d-3 -> 1.2e-3
** 1.2D-3 -> 1.2e-3
*/
void scan_exponent_convert(char *in)
{
    for (; *in != 'd' && *in != 'D'; ++in);
    *in = 'e';
}

#ifdef _MSC_VER
int isatty (int desc)
{
    return 0;
}
#endif

