#include "EditVar.hxx"
/* Generated by GIWS (version 1.3.0) */
/*

Copyright 2007-2008 INRIA
Copyright 2008-2011 DIGITEO

Author : Sylvestre Ledru & others

This is generated code.

This software is a computer program whose purpose is to hide the complexity
of accessing Java objects/methods from C++ code.

This software is governed by the CeCILL-B license under French law and
abiding by the rules of distribution of free software.  You can  use, 
modify and/ or redistribute the software under the terms of the CeCILL-B
license as circulated by CEA, CNRS and INRIA at the following URL
"http://www.cecill.info". 

As a counterpart to the access to the source code and  rights to copy,
modify and redistribute granted by the license, users are provided only
with a limited warranty  and the software's author,  the holder of the
economic rights,  and the successive licensors  have only  limited
liability. 

In this respect, the user's attention is drawn to the risks associated
with loading,  using,  modifying and/or developing or reproducing the
software by the user in light of its specific status of free software,
that may mean  that it is complicated to manipulate,  and  that  also
therefore means  that it is reserved for developers  and  experienced
professionals having in-depth computer knowledge. Users are therefore
encouraged to load and test the software's suitability as regards their
requirements in conditions enabling the security of their systems and/or 
data to be ensured and,  more generally, to use and operate it in the 
same conditions as regards security. 

The fact that you are presently reading this means that you have had
knowledge of the CeCILL-B license and that you accept its terms.
*/

namespace org_scilab_modules_ui_data {

// Returns the current env

JNIEnv * EditVar::getCurrentEnv() {
JNIEnv * curEnv = NULL;
jint res=this->jvm->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
if (res != JNI_OK) {
std::cerr << "Could not retrieve the current JVM." << std::endl;
exit(EXIT_FAILURE);

}
return curEnv;
}
// Destructor

EditVar::~EditVar() {
JNIEnv * curEnv = NULL;
this->jvm->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);

curEnv->DeleteGlobalRef(this->instance);
curEnv->DeleteGlobalRef(this->instanceClass);
curEnv->DeleteGlobalRef(this->stringArrayClass);}
// Constructors
EditVar::EditVar(JavaVM * jvm_) {
jmethodID constructObject = NULL ;
jobject localInstance ;
jclass localClass ;
const std::string construct="<init>";
const std::string param="()V";
jvm=jvm_;

JNIEnv * curEnv = getCurrentEnv();

localClass = curEnv->FindClass( this->className().c_str() ) ;
if (localClass == NULL) {
std::cerr << "Could not get the Class " << this->className() <<  std::endl;
curEnv->ExceptionDescribe();
exit(EXIT_FAILURE);
}

this->instanceClass = static_cast<jclass>(curEnv->NewGlobalRef(localClass));

/* localClass is not needed anymore */
curEnv->DeleteLocalRef(localClass);

if (this->instanceClass == NULL) {
std::cerr << "Could not create a Global Ref of " << this->className() <<  std::endl;
curEnv->ExceptionDescribe();
exit(EXIT_FAILURE);
}


constructObject = curEnv->GetMethodID( this->instanceClass, construct.c_str() , param.c_str() ) ;
if(constructObject == NULL){
std::cerr << "Could not retrieve the constructor of the class " << this->className() << " with the profile : " << construct << param << std::endl;
curEnv->ExceptionDescribe();
exit(EXIT_FAILURE);
}

localInstance = curEnv->NewObject( this->instanceClass, constructObject ) ;
if(localInstance == NULL){
std::cerr << "Could not instantiate the object " << this->className() << " with the constructor : " << construct << param << std::endl;
curEnv->ExceptionDescribe();
exit(EXIT_FAILURE);
}
 
this->instance = curEnv->NewGlobalRef(localInstance) ;
if(this->instance == NULL){
std::cerr << "Could not create a new global ref of " << this->className() << std::endl;
curEnv->ExceptionDescribe();
exit(EXIT_FAILURE);
}
/* localInstance not needed anymore */
curEnv->DeleteLocalRef(localInstance);

                /* Methods ID set to NULL */
voidopenVariableEditorDoublejobjectArray__doublejstringjava_lang_StringID=NULL;
voidopenVariableEditorComplexjobjectArray__doublejobjectArray__doublejstringjava_lang_StringID=NULL;
voidopenVariableEditorStringjobjectArray__java_lang_Stringjstringjava_lang_StringID=NULL;
voidopenVariableEditorBooleanjobjectArray__intjstringjava_lang_StringID=NULL;
voidopenVariableEditorInteger8jobjectArray__bytejstringjava_lang_StringID=NULL;
voidopenVariableEditorUInteger8jobjectArray__shortjstringjava_lang_StringID=NULL;
voidopenVariableEditorInteger16jobjectArray__shortjstringjava_lang_StringID=NULL;
voidopenVariableEditorUInteger16jobjectArray__intjstringjava_lang_StringID=NULL;
voidopenVariableEditorInteger32jobjectArray__intjstringjava_lang_StringID=NULL;
voidopenVariableEditorUInteger32jobjectArray__longjstringjava_lang_StringID=NULL;
voidrefreshVariableEditorDoublejobjectArray__doublejdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID=NULL;
voidrefreshVariableEditorComplexjobjectArray__doublejobjectArray__doublejdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID=NULL;
voidrefreshVariableEditorStringjobjectArray__java_lang_StringjdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID=NULL;
voidrefreshVariableEditorBooleanjobjectArray__intjdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID=NULL;
voidrefreshVariableEditorInteger8jobjectArray__bytejdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID=NULL;
voidrefreshVariableEditorUInteger8jobjectArray__shortjdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID=NULL;
voidrefreshVariableEditorInteger16jobjectArray__shortjdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID=NULL;
voidrefreshVariableEditorUInteger16jobjectArray__intjdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID=NULL;
voidrefreshVariableEditorInteger32jobjectArray__intjdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID=NULL;
voidrefreshVariableEditorUInteger32jobjectArray__longjdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID=NULL;
voidcloseVariableEditorID=NULL;


}

EditVar::EditVar(JavaVM * jvm_, jobject JObj) {
        jvm=jvm_;

        JNIEnv * curEnv = getCurrentEnv();

jclass localClass = curEnv->GetObjectClass(JObj);
        this->instanceClass = static_cast<jclass>(curEnv->NewGlobalRef(localClass));
        curEnv->DeleteLocalRef(localClass);

        if (this->instanceClass == NULL) {

std::cerr << "Could not create a Global Ref of " << this->className() <<  std::endl;
curEnv->ExceptionDescribe();
exit(EXIT_FAILURE);
        }

        this->instance = curEnv->NewGlobalRef(JObj) ;
        if(this->instance == NULL){

std::cerr << "Could not create a new global ref of " << this->className() << std::endl;
curEnv->ExceptionDescribe();
exit(EXIT_FAILURE);
        }
        /* Methods ID set to NULL */
        voidopenVariableEditorDoublejobjectArray__doublejstringjava_lang_StringID=NULL;
voidopenVariableEditorComplexjobjectArray__doublejobjectArray__doublejstringjava_lang_StringID=NULL;
voidopenVariableEditorStringjobjectArray__java_lang_Stringjstringjava_lang_StringID=NULL;
voidopenVariableEditorBooleanjobjectArray__intjstringjava_lang_StringID=NULL;
voidopenVariableEditorInteger8jobjectArray__bytejstringjava_lang_StringID=NULL;
voidopenVariableEditorUInteger8jobjectArray__shortjstringjava_lang_StringID=NULL;
voidopenVariableEditorInteger16jobjectArray__shortjstringjava_lang_StringID=NULL;
voidopenVariableEditorUInteger16jobjectArray__intjstringjava_lang_StringID=NULL;
voidopenVariableEditorInteger32jobjectArray__intjstringjava_lang_StringID=NULL;
voidopenVariableEditorUInteger32jobjectArray__longjstringjava_lang_StringID=NULL;
voidrefreshVariableEditorDoublejobjectArray__doublejdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID=NULL;
voidrefreshVariableEditorComplexjobjectArray__doublejobjectArray__doublejdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID=NULL;
voidrefreshVariableEditorStringjobjectArray__java_lang_StringjdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID=NULL;
voidrefreshVariableEditorBooleanjobjectArray__intjdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID=NULL;
voidrefreshVariableEditorInteger8jobjectArray__bytejdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID=NULL;
voidrefreshVariableEditorUInteger8jobjectArray__shortjdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID=NULL;
voidrefreshVariableEditorInteger16jobjectArray__shortjdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID=NULL;
voidrefreshVariableEditorUInteger16jobjectArray__intjdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID=NULL;
voidrefreshVariableEditorInteger32jobjectArray__intjdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID=NULL;
voidrefreshVariableEditorUInteger32jobjectArray__longjdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID=NULL;
voidcloseVariableEditorID=NULL;


}

// Generic methods

void EditVar::synchronize() {
if (getCurrentEnv()->MonitorEnter(instance) != JNI_OK) {
std::cerr << "Fail to enter monitor." << std::endl;
exit(EXIT_FAILURE);

}
}

void EditVar::endSynchronize() {
if ( getCurrentEnv()->MonitorExit(instance) != JNI_OK) {

std::cerr << "Fail to exit monitor." << std::endl;
exit(EXIT_FAILURE);
}
}
// Method(s)

void EditVar::openVariableEditorDouble (JavaVM * jvm_, double** data, int dataSize, int dataSizeCol, char * variableName){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidopenVariableEditorDoublejobjectArray__doublejstringjava_lang_StringID = curEnv->GetStaticMethodID(cls, "openVariableEditorDouble", "([[DLjava/lang/String;)V" ) ;
if (voidopenVariableEditorDoublejobjectArray__doublejstringjava_lang_StringID == NULL) {
std::cerr << "Could not access to the method " << "openVariableEditorDouble" << std::endl;
curEnv->ExceptionDescribe();

exit(EXIT_FAILURE);
}

 jobjectArray data_ = curEnv->NewObjectArray(dataSize, curEnv->FindClass("[D"),NULL);

 for (int i=0; i<dataSize; i++){

jdoubleArray dataLocal = curEnv->NewDoubleArray( dataSizeCol ) ;

curEnv->SetDoubleArrayRegion( dataLocal, 0, dataSizeCol, (jdouble*)(data[i]) ) ;
curEnv->SetObjectArrayElement(data_, i, dataLocal);
curEnv->DeleteLocalRef(dataLocal);
}

jstring variableName_ = curEnv->NewStringUTF( variableName );
if (variableName != NULL && variableName_ == NULL)
{
std::cerr << "Could not convert C string to Java UTF string, memory full." << std::endl;
exit(EXIT_FAILURE);
}


                         curEnv->CallStaticVoidMethod(cls, voidopenVariableEditorDoublejobjectArray__doublejstringjava_lang_StringID ,data_, variableName_);
                        curEnv->DeleteLocalRef(data_);
curEnv->DeleteLocalRef(variableName_);
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
curEnv->ExceptionDescribe() ;
}

}

void EditVar::openVariableEditorComplex (JavaVM * jvm_, double** realData, int realDataSize, int realDataSizeCol, double** imgData, int imgDataSize, int imgDataSizeCol, char * variableName){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidopenVariableEditorComplexjobjectArray__doublejobjectArray__doublejstringjava_lang_StringID = curEnv->GetStaticMethodID(cls, "openVariableEditorComplex", "([[D[[DLjava/lang/String;)V" ) ;
if (voidopenVariableEditorComplexjobjectArray__doublejobjectArray__doublejstringjava_lang_StringID == NULL) {
std::cerr << "Could not access to the method " << "openVariableEditorComplex" << std::endl;
curEnv->ExceptionDescribe();

exit(EXIT_FAILURE);
}

 jobjectArray realData_ = curEnv->NewObjectArray(realDataSize, curEnv->FindClass("[D"),NULL);

 for (int i=0; i<realDataSize; i++){

jdoubleArray realDataLocal = curEnv->NewDoubleArray( realDataSizeCol ) ;

curEnv->SetDoubleArrayRegion( realDataLocal, 0, realDataSizeCol, (jdouble*)(realData[i]) ) ;
curEnv->SetObjectArrayElement(realData_, i, realDataLocal);
curEnv->DeleteLocalRef(realDataLocal);
}

 jobjectArray imgData_ = curEnv->NewObjectArray(imgDataSize, curEnv->FindClass("[D"),NULL);

 for (int i=0; i<imgDataSize; i++){

jdoubleArray imgDataLocal = curEnv->NewDoubleArray( imgDataSizeCol ) ;

curEnv->SetDoubleArrayRegion( imgDataLocal, 0, imgDataSizeCol, (jdouble*)(imgData[i]) ) ;
curEnv->SetObjectArrayElement(imgData_, i, imgDataLocal);
curEnv->DeleteLocalRef(imgDataLocal);
}

jstring variableName_ = curEnv->NewStringUTF( variableName );
if (variableName != NULL && variableName_ == NULL)
{
std::cerr << "Could not convert C string to Java UTF string, memory full." << std::endl;
exit(EXIT_FAILURE);
}


                         curEnv->CallStaticVoidMethod(cls, voidopenVariableEditorComplexjobjectArray__doublejobjectArray__doublejstringjava_lang_StringID ,realData_, imgData_, variableName_);
                        curEnv->DeleteLocalRef(realData_);
curEnv->DeleteLocalRef(imgData_);
curEnv->DeleteLocalRef(variableName_);
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
curEnv->ExceptionDescribe() ;
}

}

void EditVar::openVariableEditorString (JavaVM * jvm_, char *** data, int dataSize, int dataSizeCol, char * variableName){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidopenVariableEditorStringjobjectArray__java_lang_Stringjstringjava_lang_StringID = curEnv->GetStaticMethodID(cls, "openVariableEditorString", "([[Ljava/lang/String;Ljava/lang/String;)V" ) ;
if (voidopenVariableEditorStringjobjectArray__java_lang_Stringjstringjava_lang_StringID == NULL) {
std::cerr << "Could not access to the method " << "openVariableEditorString" << std::endl;
curEnv->ExceptionDescribe();

exit(EXIT_FAILURE);
}
jclass stringArrayClass = curEnv->FindClass("java/lang/String");
// create java array of array of strings.
jobjectArray data_ = curEnv->NewObjectArray( dataSize, curEnv->FindClass("[Ljava/lang/String;"), NULL);
if (data_ == NULL)
{
std::cerr << "Could not allocate Java string array, memory full." << std::endl;
exit(EXIT_FAILURE);
}

for ( int i = 0; i < dataSize; i++)
{
jobjectArray dataLocal = curEnv->NewObjectArray( dataSizeCol, stringArrayClass, NULL);
// convert each char * to java strings and fill the java array.
for ( int j = 0; j < dataSizeCol; j++) {
jstring TempString = curEnv->NewStringUTF( data[i][j] );

if (TempString == NULL)
{
std::cerr << "Could not convert C string to Java UTF string, memory full." << std::endl;
exit(EXIT_FAILURE);
}

curEnv->SetObjectArrayElement( dataLocal, j, TempString);

// avoid keeping reference on to many strings
curEnv->DeleteLocalRef(TempString);
}
curEnv->SetObjectArrayElement(data_, i, dataLocal);
curEnv->DeleteLocalRef(dataLocal);

}
jstring variableName_ = curEnv->NewStringUTF( variableName );
if (variableName != NULL && variableName_ == NULL)
{
std::cerr << "Could not convert C string to Java UTF string, memory full." << std::endl;
exit(EXIT_FAILURE);
}


                         curEnv->CallStaticVoidMethod(cls, voidopenVariableEditorStringjobjectArray__java_lang_Stringjstringjava_lang_StringID ,data_, variableName_);
                        curEnv->DeleteLocalRef(stringArrayClass);
curEnv->DeleteLocalRef(data_);
curEnv->DeleteLocalRef(variableName_);
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
curEnv->ExceptionDescribe() ;
}

}

void EditVar::openVariableEditorBoolean (JavaVM * jvm_, int** data, int dataSize, int dataSizeCol, char * variableName){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidopenVariableEditorBooleanjobjectArray__intjstringjava_lang_StringID = curEnv->GetStaticMethodID(cls, "openVariableEditorBoolean", "([[ILjava/lang/String;)V" ) ;
if (voidopenVariableEditorBooleanjobjectArray__intjstringjava_lang_StringID == NULL) {
std::cerr << "Could not access to the method " << "openVariableEditorBoolean" << std::endl;
curEnv->ExceptionDescribe();

exit(EXIT_FAILURE);
}

 jobjectArray data_ = curEnv->NewObjectArray(dataSize, curEnv->FindClass("[I"),NULL);

 for (int i=0; i<dataSize; i++){

jintArray dataLocal = curEnv->NewIntArray( dataSizeCol ) ;

curEnv->SetIntArrayRegion( dataLocal, 0, dataSizeCol, (jint*)(data[i]) ) ;
curEnv->SetObjectArrayElement(data_, i, dataLocal);
curEnv->DeleteLocalRef(dataLocal);
}

jstring variableName_ = curEnv->NewStringUTF( variableName );
if (variableName != NULL && variableName_ == NULL)
{
std::cerr << "Could not convert C string to Java UTF string, memory full." << std::endl;
exit(EXIT_FAILURE);
}


                         curEnv->CallStaticVoidMethod(cls, voidopenVariableEditorBooleanjobjectArray__intjstringjava_lang_StringID ,data_, variableName_);
                        curEnv->DeleteLocalRef(data_);
curEnv->DeleteLocalRef(variableName_);
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
curEnv->ExceptionDescribe() ;
}

}

void EditVar::openVariableEditorInteger8 (JavaVM * jvm_, byte** data, int dataSize, int dataSizeCol, char * variableName){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidopenVariableEditorInteger8jobjectArray__bytejstringjava_lang_StringID = curEnv->GetStaticMethodID(cls, "openVariableEditorInteger8", "([[BLjava/lang/String;)V" ) ;
if (voidopenVariableEditorInteger8jobjectArray__bytejstringjava_lang_StringID == NULL) {
std::cerr << "Could not access to the method " << "openVariableEditorInteger8" << std::endl;
curEnv->ExceptionDescribe();

exit(EXIT_FAILURE);
}

 jobjectArray data_ = curEnv->NewObjectArray(dataSize, curEnv->FindClass("[B"),NULL);

 for (int i=0; i<dataSize; i++){

jbyteArray dataLocal = curEnv->NewByteArray( dataSizeCol ) ;

curEnv->SetByteArrayRegion( dataLocal, 0, dataSizeCol, (jbyte*)(data[i]) ) ;
curEnv->SetObjectArrayElement(data_, i, dataLocal);
curEnv->DeleteLocalRef(dataLocal);
}

jstring variableName_ = curEnv->NewStringUTF( variableName );
if (variableName != NULL && variableName_ == NULL)
{
std::cerr << "Could not convert C string to Java UTF string, memory full." << std::endl;
exit(EXIT_FAILURE);
}


                         curEnv->CallStaticVoidMethod(cls, voidopenVariableEditorInteger8jobjectArray__bytejstringjava_lang_StringID ,data_, variableName_);
                        curEnv->DeleteLocalRef(data_);
curEnv->DeleteLocalRef(variableName_);
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
curEnv->ExceptionDescribe() ;
}

}

void EditVar::openVariableEditorUInteger8 (JavaVM * jvm_, short** data, int dataSize, int dataSizeCol, char * variableName){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidopenVariableEditorUInteger8jobjectArray__shortjstringjava_lang_StringID = curEnv->GetStaticMethodID(cls, "openVariableEditorUInteger8", "([[SLjava/lang/String;)V" ) ;
if (voidopenVariableEditorUInteger8jobjectArray__shortjstringjava_lang_StringID == NULL) {
std::cerr << "Could not access to the method " << "openVariableEditorUInteger8" << std::endl;
curEnv->ExceptionDescribe();

exit(EXIT_FAILURE);
}

 jobjectArray data_ = curEnv->NewObjectArray(dataSize, curEnv->FindClass("[S"),NULL);

 for (int i=0; i<dataSize; i++){

jshortArray dataLocal = curEnv->NewShortArray( dataSizeCol ) ;

curEnv->SetShortArrayRegion( dataLocal, 0, dataSizeCol, (jshort*)(data[i]) ) ;
curEnv->SetObjectArrayElement(data_, i, dataLocal);
curEnv->DeleteLocalRef(dataLocal);
}

jstring variableName_ = curEnv->NewStringUTF( variableName );
if (variableName != NULL && variableName_ == NULL)
{
std::cerr << "Could not convert C string to Java UTF string, memory full." << std::endl;
exit(EXIT_FAILURE);
}


                         curEnv->CallStaticVoidMethod(cls, voidopenVariableEditorUInteger8jobjectArray__shortjstringjava_lang_StringID ,data_, variableName_);
                        curEnv->DeleteLocalRef(data_);
curEnv->DeleteLocalRef(variableName_);
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
curEnv->ExceptionDescribe() ;
}

}

void EditVar::openVariableEditorInteger16 (JavaVM * jvm_, short** data, int dataSize, int dataSizeCol, char * variableName){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidopenVariableEditorInteger16jobjectArray__shortjstringjava_lang_StringID = curEnv->GetStaticMethodID(cls, "openVariableEditorInteger16", "([[SLjava/lang/String;)V" ) ;
if (voidopenVariableEditorInteger16jobjectArray__shortjstringjava_lang_StringID == NULL) {
std::cerr << "Could not access to the method " << "openVariableEditorInteger16" << std::endl;
curEnv->ExceptionDescribe();

exit(EXIT_FAILURE);
}

 jobjectArray data_ = curEnv->NewObjectArray(dataSize, curEnv->FindClass("[S"),NULL);

 for (int i=0; i<dataSize; i++){

jshortArray dataLocal = curEnv->NewShortArray( dataSizeCol ) ;

curEnv->SetShortArrayRegion( dataLocal, 0, dataSizeCol, (jshort*)(data[i]) ) ;
curEnv->SetObjectArrayElement(data_, i, dataLocal);
curEnv->DeleteLocalRef(dataLocal);
}

jstring variableName_ = curEnv->NewStringUTF( variableName );
if (variableName != NULL && variableName_ == NULL)
{
std::cerr << "Could not convert C string to Java UTF string, memory full." << std::endl;
exit(EXIT_FAILURE);
}


                         curEnv->CallStaticVoidMethod(cls, voidopenVariableEditorInteger16jobjectArray__shortjstringjava_lang_StringID ,data_, variableName_);
                        curEnv->DeleteLocalRef(data_);
curEnv->DeleteLocalRef(variableName_);
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
curEnv->ExceptionDescribe() ;
}

}

void EditVar::openVariableEditorUInteger16 (JavaVM * jvm_, int** data, int dataSize, int dataSizeCol, char * variableName){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidopenVariableEditorUInteger16jobjectArray__intjstringjava_lang_StringID = curEnv->GetStaticMethodID(cls, "openVariableEditorUInteger16", "([[ILjava/lang/String;)V" ) ;
if (voidopenVariableEditorUInteger16jobjectArray__intjstringjava_lang_StringID == NULL) {
std::cerr << "Could not access to the method " << "openVariableEditorUInteger16" << std::endl;
curEnv->ExceptionDescribe();

exit(EXIT_FAILURE);
}

 jobjectArray data_ = curEnv->NewObjectArray(dataSize, curEnv->FindClass("[I"),NULL);

 for (int i=0; i<dataSize; i++){

jintArray dataLocal = curEnv->NewIntArray( dataSizeCol ) ;

curEnv->SetIntArrayRegion( dataLocal, 0, dataSizeCol, (jint*)(data[i]) ) ;
curEnv->SetObjectArrayElement(data_, i, dataLocal);
curEnv->DeleteLocalRef(dataLocal);
}

jstring variableName_ = curEnv->NewStringUTF( variableName );
if (variableName != NULL && variableName_ == NULL)
{
std::cerr << "Could not convert C string to Java UTF string, memory full." << std::endl;
exit(EXIT_FAILURE);
}


                         curEnv->CallStaticVoidMethod(cls, voidopenVariableEditorUInteger16jobjectArray__intjstringjava_lang_StringID ,data_, variableName_);
                        curEnv->DeleteLocalRef(data_);
curEnv->DeleteLocalRef(variableName_);
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
curEnv->ExceptionDescribe() ;
}

}

void EditVar::openVariableEditorInteger32 (JavaVM * jvm_, int** data, int dataSize, int dataSizeCol, char * variableName){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidopenVariableEditorInteger32jobjectArray__intjstringjava_lang_StringID = curEnv->GetStaticMethodID(cls, "openVariableEditorInteger32", "([[ILjava/lang/String;)V" ) ;
if (voidopenVariableEditorInteger32jobjectArray__intjstringjava_lang_StringID == NULL) {
std::cerr << "Could not access to the method " << "openVariableEditorInteger32" << std::endl;
curEnv->ExceptionDescribe();

exit(EXIT_FAILURE);
}

 jobjectArray data_ = curEnv->NewObjectArray(dataSize, curEnv->FindClass("[I"),NULL);

 for (int i=0; i<dataSize; i++){

jintArray dataLocal = curEnv->NewIntArray( dataSizeCol ) ;

curEnv->SetIntArrayRegion( dataLocal, 0, dataSizeCol, (jint*)(data[i]) ) ;
curEnv->SetObjectArrayElement(data_, i, dataLocal);
curEnv->DeleteLocalRef(dataLocal);
}

jstring variableName_ = curEnv->NewStringUTF( variableName );
if (variableName != NULL && variableName_ == NULL)
{
std::cerr << "Could not convert C string to Java UTF string, memory full." << std::endl;
exit(EXIT_FAILURE);
}


                         curEnv->CallStaticVoidMethod(cls, voidopenVariableEditorInteger32jobjectArray__intjstringjava_lang_StringID ,data_, variableName_);
                        curEnv->DeleteLocalRef(data_);
curEnv->DeleteLocalRef(variableName_);
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
curEnv->ExceptionDescribe() ;
}

}

void EditVar::openVariableEditorUInteger32 (JavaVM * jvm_, long long** data, int dataSize, int dataSizeCol, char * variableName){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidopenVariableEditorUInteger32jobjectArray__longjstringjava_lang_StringID = curEnv->GetStaticMethodID(cls, "openVariableEditorUInteger32", "([[JLjava/lang/String;)V" ) ;
if (voidopenVariableEditorUInteger32jobjectArray__longjstringjava_lang_StringID == NULL) {
std::cerr << "Could not access to the method " << "openVariableEditorUInteger32" << std::endl;
curEnv->ExceptionDescribe();

exit(EXIT_FAILURE);
}

 jobjectArray data_ = curEnv->NewObjectArray(dataSize, curEnv->FindClass("[J"),NULL);

 for (int i=0; i<dataSize; i++){

jlongArray dataLocal = curEnv->NewLongArray( dataSizeCol ) ;

curEnv->SetLongArrayRegion( dataLocal, 0, dataSizeCol, (jlong*)(data[i]) ) ;
curEnv->SetObjectArrayElement(data_, i, dataLocal);
curEnv->DeleteLocalRef(dataLocal);
}

jstring variableName_ = curEnv->NewStringUTF( variableName );
if (variableName != NULL && variableName_ == NULL)
{
std::cerr << "Could not convert C string to Java UTF string, memory full." << std::endl;
exit(EXIT_FAILURE);
}


                         curEnv->CallStaticVoidMethod(cls, voidopenVariableEditorUInteger32jobjectArray__longjstringjava_lang_StringID ,data_, variableName_);
                        curEnv->DeleteLocalRef(data_);
curEnv->DeleteLocalRef(variableName_);
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
curEnv->ExceptionDescribe() ;
}

}

void EditVar::refreshVariableEditorDouble (JavaVM * jvm_, double** data, int dataSize, int dataSizeCol, double* rowsIndex, int rowsIndexSize, double* colsIndex, int colsIndexSize, char * variableName){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidrefreshVariableEditorDoublejobjectArray__doublejdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID = curEnv->GetStaticMethodID(cls, "refreshVariableEditorDouble", "([[D[D[DLjava/lang/String;)V" ) ;
if (voidrefreshVariableEditorDoublejobjectArray__doublejdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID == NULL) {
std::cerr << "Could not access to the method " << "refreshVariableEditorDouble" << std::endl;
curEnv->ExceptionDescribe();

exit(EXIT_FAILURE);
}

 jobjectArray data_ = curEnv->NewObjectArray(dataSize, curEnv->FindClass("[D"),NULL);

 for (int i=0; i<dataSize; i++){

jdoubleArray dataLocal = curEnv->NewDoubleArray( dataSizeCol ) ;

curEnv->SetDoubleArrayRegion( dataLocal, 0, dataSizeCol, (jdouble*)(data[i]) ) ;
curEnv->SetObjectArrayElement(data_, i, dataLocal);
curEnv->DeleteLocalRef(dataLocal);
}

jdoubleArray rowsIndex_ = curEnv->NewDoubleArray( rowsIndexSize ) ;

curEnv->SetDoubleArrayRegion( rowsIndex_, 0, rowsIndexSize, (jdouble*)(rowsIndex) ) ;


jdoubleArray colsIndex_ = curEnv->NewDoubleArray( colsIndexSize ) ;

curEnv->SetDoubleArrayRegion( colsIndex_, 0, colsIndexSize, (jdouble*)(colsIndex) ) ;


jstring variableName_ = curEnv->NewStringUTF( variableName );
if (variableName != NULL && variableName_ == NULL)
{
std::cerr << "Could not convert C string to Java UTF string, memory full." << std::endl;
exit(EXIT_FAILURE);
}


                         curEnv->CallStaticVoidMethod(cls, voidrefreshVariableEditorDoublejobjectArray__doublejdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID ,data_, rowsIndex_, colsIndex_, variableName_);
                        curEnv->DeleteLocalRef(data_);
curEnv->DeleteLocalRef(rowsIndex_);
curEnv->DeleteLocalRef(colsIndex_);
curEnv->DeleteLocalRef(variableName_);
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
curEnv->ExceptionDescribe() ;
}

}

void EditVar::refreshVariableEditorComplex (JavaVM * jvm_, double** realData, int realDataSize, int realDataSizeCol, double** imgData, int imgDataSize, int imgDataSizeCol, double* rowsIndex, int rowsIndexSize, double* colsIndex, int colsIndexSize, char * variableName){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidrefreshVariableEditorComplexjobjectArray__doublejobjectArray__doublejdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID = curEnv->GetStaticMethodID(cls, "refreshVariableEditorComplex", "([[D[[D[D[DLjava/lang/String;)V" ) ;
if (voidrefreshVariableEditorComplexjobjectArray__doublejobjectArray__doublejdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID == NULL) {
std::cerr << "Could not access to the method " << "refreshVariableEditorComplex" << std::endl;
curEnv->ExceptionDescribe();

exit(EXIT_FAILURE);
}

 jobjectArray realData_ = curEnv->NewObjectArray(realDataSize, curEnv->FindClass("[D"),NULL);

 for (int i=0; i<realDataSize; i++){

jdoubleArray realDataLocal = curEnv->NewDoubleArray( realDataSizeCol ) ;

curEnv->SetDoubleArrayRegion( realDataLocal, 0, realDataSizeCol, (jdouble*)(realData[i]) ) ;
curEnv->SetObjectArrayElement(realData_, i, realDataLocal);
curEnv->DeleteLocalRef(realDataLocal);
}

 jobjectArray imgData_ = curEnv->NewObjectArray(imgDataSize, curEnv->FindClass("[D"),NULL);

 for (int i=0; i<imgDataSize; i++){

jdoubleArray imgDataLocal = curEnv->NewDoubleArray( imgDataSizeCol ) ;

curEnv->SetDoubleArrayRegion( imgDataLocal, 0, imgDataSizeCol, (jdouble*)(imgData[i]) ) ;
curEnv->SetObjectArrayElement(imgData_, i, imgDataLocal);
curEnv->DeleteLocalRef(imgDataLocal);
}

jdoubleArray rowsIndex_ = curEnv->NewDoubleArray( rowsIndexSize ) ;

curEnv->SetDoubleArrayRegion( rowsIndex_, 0, rowsIndexSize, (jdouble*)(rowsIndex) ) ;


jdoubleArray colsIndex_ = curEnv->NewDoubleArray( colsIndexSize ) ;

curEnv->SetDoubleArrayRegion( colsIndex_, 0, colsIndexSize, (jdouble*)(colsIndex) ) ;


jstring variableName_ = curEnv->NewStringUTF( variableName );
if (variableName != NULL && variableName_ == NULL)
{
std::cerr << "Could not convert C string to Java UTF string, memory full." << std::endl;
exit(EXIT_FAILURE);
}


                         curEnv->CallStaticVoidMethod(cls, voidrefreshVariableEditorComplexjobjectArray__doublejobjectArray__doublejdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID ,realData_, imgData_, rowsIndex_, colsIndex_, variableName_);
                        curEnv->DeleteLocalRef(realData_);
curEnv->DeleteLocalRef(imgData_);
curEnv->DeleteLocalRef(rowsIndex_);
curEnv->DeleteLocalRef(colsIndex_);
curEnv->DeleteLocalRef(variableName_);
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
curEnv->ExceptionDescribe() ;
}

}

void EditVar::refreshVariableEditorString (JavaVM * jvm_, char *** data, int dataSize, int dataSizeCol, double* rowsIndex, int rowsIndexSize, double* colsIndex, int colsIndexSize, char * variableName){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidrefreshVariableEditorStringjobjectArray__java_lang_StringjdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID = curEnv->GetStaticMethodID(cls, "refreshVariableEditorString", "([[Ljava/lang/String;[D[DLjava/lang/String;)V" ) ;
if (voidrefreshVariableEditorStringjobjectArray__java_lang_StringjdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID == NULL) {
std::cerr << "Could not access to the method " << "refreshVariableEditorString" << std::endl;
curEnv->ExceptionDescribe();

exit(EXIT_FAILURE);
}
jclass stringArrayClass = curEnv->FindClass("java/lang/String");
// create java array of array of strings.
jobjectArray data_ = curEnv->NewObjectArray( dataSize, curEnv->FindClass("[Ljava/lang/String;"), NULL);
if (data_ == NULL)
{
std::cerr << "Could not allocate Java string array, memory full." << std::endl;
exit(EXIT_FAILURE);
}

for ( int i = 0; i < dataSize; i++)
{
jobjectArray dataLocal = curEnv->NewObjectArray( dataSizeCol, stringArrayClass, NULL);
// convert each char * to java strings and fill the java array.
for ( int j = 0; j < dataSizeCol; j++) {
jstring TempString = curEnv->NewStringUTF( data[i][j] );

if (TempString == NULL)
{
std::cerr << "Could not convert C string to Java UTF string, memory full." << std::endl;
exit(EXIT_FAILURE);
}

curEnv->SetObjectArrayElement( dataLocal, j, TempString);

// avoid keeping reference on to many strings
curEnv->DeleteLocalRef(TempString);
}
curEnv->SetObjectArrayElement(data_, i, dataLocal);
curEnv->DeleteLocalRef(dataLocal);

}
jdoubleArray rowsIndex_ = curEnv->NewDoubleArray( rowsIndexSize ) ;

curEnv->SetDoubleArrayRegion( rowsIndex_, 0, rowsIndexSize, (jdouble*)(rowsIndex) ) ;


jdoubleArray colsIndex_ = curEnv->NewDoubleArray( colsIndexSize ) ;

curEnv->SetDoubleArrayRegion( colsIndex_, 0, colsIndexSize, (jdouble*)(colsIndex) ) ;


jstring variableName_ = curEnv->NewStringUTF( variableName );
if (variableName != NULL && variableName_ == NULL)
{
std::cerr << "Could not convert C string to Java UTF string, memory full." << std::endl;
exit(EXIT_FAILURE);
}


                         curEnv->CallStaticVoidMethod(cls, voidrefreshVariableEditorStringjobjectArray__java_lang_StringjdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID ,data_, rowsIndex_, colsIndex_, variableName_);
                        curEnv->DeleteLocalRef(stringArrayClass);
curEnv->DeleteLocalRef(data_);
curEnv->DeleteLocalRef(rowsIndex_);
curEnv->DeleteLocalRef(colsIndex_);
curEnv->DeleteLocalRef(variableName_);
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
curEnv->ExceptionDescribe() ;
}

}

void EditVar::refreshVariableEditorBoolean (JavaVM * jvm_, int** data, int dataSize, int dataSizeCol, double* rowsIndex, int rowsIndexSize, double* colsIndex, int colsIndexSize, char * variableName){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidrefreshVariableEditorBooleanjobjectArray__intjdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID = curEnv->GetStaticMethodID(cls, "refreshVariableEditorBoolean", "([[I[D[DLjava/lang/String;)V" ) ;
if (voidrefreshVariableEditorBooleanjobjectArray__intjdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID == NULL) {
std::cerr << "Could not access to the method " << "refreshVariableEditorBoolean" << std::endl;
curEnv->ExceptionDescribe();

exit(EXIT_FAILURE);
}

 jobjectArray data_ = curEnv->NewObjectArray(dataSize, curEnv->FindClass("[I"),NULL);

 for (int i=0; i<dataSize; i++){

jintArray dataLocal = curEnv->NewIntArray( dataSizeCol ) ;

curEnv->SetIntArrayRegion( dataLocal, 0, dataSizeCol, (jint*)(data[i]) ) ;
curEnv->SetObjectArrayElement(data_, i, dataLocal);
curEnv->DeleteLocalRef(dataLocal);
}

jdoubleArray rowsIndex_ = curEnv->NewDoubleArray( rowsIndexSize ) ;

curEnv->SetDoubleArrayRegion( rowsIndex_, 0, rowsIndexSize, (jdouble*)(rowsIndex) ) ;


jdoubleArray colsIndex_ = curEnv->NewDoubleArray( colsIndexSize ) ;

curEnv->SetDoubleArrayRegion( colsIndex_, 0, colsIndexSize, (jdouble*)(colsIndex) ) ;


jstring variableName_ = curEnv->NewStringUTF( variableName );
if (variableName != NULL && variableName_ == NULL)
{
std::cerr << "Could not convert C string to Java UTF string, memory full." << std::endl;
exit(EXIT_FAILURE);
}


                         curEnv->CallStaticVoidMethod(cls, voidrefreshVariableEditorBooleanjobjectArray__intjdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID ,data_, rowsIndex_, colsIndex_, variableName_);
                        curEnv->DeleteLocalRef(data_);
curEnv->DeleteLocalRef(rowsIndex_);
curEnv->DeleteLocalRef(colsIndex_);
curEnv->DeleteLocalRef(variableName_);
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
curEnv->ExceptionDescribe() ;
}

}

void EditVar::refreshVariableEditorInteger8 (JavaVM * jvm_, byte** data, int dataSize, int dataSizeCol, double* rowsIndex, int rowsIndexSize, double* colsIndex, int colsIndexSize, char * variableName){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidrefreshVariableEditorInteger8jobjectArray__bytejdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID = curEnv->GetStaticMethodID(cls, "refreshVariableEditorInteger8", "([[B[D[DLjava/lang/String;)V" ) ;
if (voidrefreshVariableEditorInteger8jobjectArray__bytejdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID == NULL) {
std::cerr << "Could not access to the method " << "refreshVariableEditorInteger8" << std::endl;
curEnv->ExceptionDescribe();

exit(EXIT_FAILURE);
}

 jobjectArray data_ = curEnv->NewObjectArray(dataSize, curEnv->FindClass("[B"),NULL);

 for (int i=0; i<dataSize; i++){

jbyteArray dataLocal = curEnv->NewByteArray( dataSizeCol ) ;

curEnv->SetByteArrayRegion( dataLocal, 0, dataSizeCol, (jbyte*)(data[i]) ) ;
curEnv->SetObjectArrayElement(data_, i, dataLocal);
curEnv->DeleteLocalRef(dataLocal);
}

jdoubleArray rowsIndex_ = curEnv->NewDoubleArray( rowsIndexSize ) ;

curEnv->SetDoubleArrayRegion( rowsIndex_, 0, rowsIndexSize, (jdouble*)(rowsIndex) ) ;


jdoubleArray colsIndex_ = curEnv->NewDoubleArray( colsIndexSize ) ;

curEnv->SetDoubleArrayRegion( colsIndex_, 0, colsIndexSize, (jdouble*)(colsIndex) ) ;


jstring variableName_ = curEnv->NewStringUTF( variableName );
if (variableName != NULL && variableName_ == NULL)
{
std::cerr << "Could not convert C string to Java UTF string, memory full." << std::endl;
exit(EXIT_FAILURE);
}


                         curEnv->CallStaticVoidMethod(cls, voidrefreshVariableEditorInteger8jobjectArray__bytejdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID ,data_, rowsIndex_, colsIndex_, variableName_);
                        curEnv->DeleteLocalRef(data_);
curEnv->DeleteLocalRef(rowsIndex_);
curEnv->DeleteLocalRef(colsIndex_);
curEnv->DeleteLocalRef(variableName_);
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
curEnv->ExceptionDescribe() ;
}

}

void EditVar::refreshVariableEditorUInteger8 (JavaVM * jvm_, short** data, int dataSize, int dataSizeCol, double* rowsIndex, int rowsIndexSize, double* colsIndex, int colsIndexSize, char * variableName){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidrefreshVariableEditorUInteger8jobjectArray__shortjdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID = curEnv->GetStaticMethodID(cls, "refreshVariableEditorUInteger8", "([[S[D[DLjava/lang/String;)V" ) ;
if (voidrefreshVariableEditorUInteger8jobjectArray__shortjdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID == NULL) {
std::cerr << "Could not access to the method " << "refreshVariableEditorUInteger8" << std::endl;
curEnv->ExceptionDescribe();

exit(EXIT_FAILURE);
}

 jobjectArray data_ = curEnv->NewObjectArray(dataSize, curEnv->FindClass("[S"),NULL);

 for (int i=0; i<dataSize; i++){

jshortArray dataLocal = curEnv->NewShortArray( dataSizeCol ) ;

curEnv->SetShortArrayRegion( dataLocal, 0, dataSizeCol, (jshort*)(data[i]) ) ;
curEnv->SetObjectArrayElement(data_, i, dataLocal);
curEnv->DeleteLocalRef(dataLocal);
}

jdoubleArray rowsIndex_ = curEnv->NewDoubleArray( rowsIndexSize ) ;

curEnv->SetDoubleArrayRegion( rowsIndex_, 0, rowsIndexSize, (jdouble*)(rowsIndex) ) ;


jdoubleArray colsIndex_ = curEnv->NewDoubleArray( colsIndexSize ) ;

curEnv->SetDoubleArrayRegion( colsIndex_, 0, colsIndexSize, (jdouble*)(colsIndex) ) ;


jstring variableName_ = curEnv->NewStringUTF( variableName );
if (variableName != NULL && variableName_ == NULL)
{
std::cerr << "Could not convert C string to Java UTF string, memory full." << std::endl;
exit(EXIT_FAILURE);
}


                         curEnv->CallStaticVoidMethod(cls, voidrefreshVariableEditorUInteger8jobjectArray__shortjdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID ,data_, rowsIndex_, colsIndex_, variableName_);
                        curEnv->DeleteLocalRef(data_);
curEnv->DeleteLocalRef(rowsIndex_);
curEnv->DeleteLocalRef(colsIndex_);
curEnv->DeleteLocalRef(variableName_);
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
curEnv->ExceptionDescribe() ;
}

}

void EditVar::refreshVariableEditorInteger16 (JavaVM * jvm_, short** data, int dataSize, int dataSizeCol, double* rowsIndex, int rowsIndexSize, double* colsIndex, int colsIndexSize, char * variableName){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidrefreshVariableEditorInteger16jobjectArray__shortjdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID = curEnv->GetStaticMethodID(cls, "refreshVariableEditorInteger16", "([[S[D[DLjava/lang/String;)V" ) ;
if (voidrefreshVariableEditorInteger16jobjectArray__shortjdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID == NULL) {
std::cerr << "Could not access to the method " << "refreshVariableEditorInteger16" << std::endl;
curEnv->ExceptionDescribe();

exit(EXIT_FAILURE);
}

 jobjectArray data_ = curEnv->NewObjectArray(dataSize, curEnv->FindClass("[S"),NULL);

 for (int i=0; i<dataSize; i++){

jshortArray dataLocal = curEnv->NewShortArray( dataSizeCol ) ;

curEnv->SetShortArrayRegion( dataLocal, 0, dataSizeCol, (jshort*)(data[i]) ) ;
curEnv->SetObjectArrayElement(data_, i, dataLocal);
curEnv->DeleteLocalRef(dataLocal);
}

jdoubleArray rowsIndex_ = curEnv->NewDoubleArray( rowsIndexSize ) ;

curEnv->SetDoubleArrayRegion( rowsIndex_, 0, rowsIndexSize, (jdouble*)(rowsIndex) ) ;


jdoubleArray colsIndex_ = curEnv->NewDoubleArray( colsIndexSize ) ;

curEnv->SetDoubleArrayRegion( colsIndex_, 0, colsIndexSize, (jdouble*)(colsIndex) ) ;


jstring variableName_ = curEnv->NewStringUTF( variableName );
if (variableName != NULL && variableName_ == NULL)
{
std::cerr << "Could not convert C string to Java UTF string, memory full." << std::endl;
exit(EXIT_FAILURE);
}


                         curEnv->CallStaticVoidMethod(cls, voidrefreshVariableEditorInteger16jobjectArray__shortjdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID ,data_, rowsIndex_, colsIndex_, variableName_);
                        curEnv->DeleteLocalRef(data_);
curEnv->DeleteLocalRef(rowsIndex_);
curEnv->DeleteLocalRef(colsIndex_);
curEnv->DeleteLocalRef(variableName_);
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
curEnv->ExceptionDescribe() ;
}

}

void EditVar::refreshVariableEditorUInteger16 (JavaVM * jvm_, int** data, int dataSize, int dataSizeCol, double* rowsIndex, int rowsIndexSize, double* colsIndex, int colsIndexSize, char * variableName){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidrefreshVariableEditorUInteger16jobjectArray__intjdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID = curEnv->GetStaticMethodID(cls, "refreshVariableEditorUInteger16", "([[I[D[DLjava/lang/String;)V" ) ;
if (voidrefreshVariableEditorUInteger16jobjectArray__intjdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID == NULL) {
std::cerr << "Could not access to the method " << "refreshVariableEditorUInteger16" << std::endl;
curEnv->ExceptionDescribe();

exit(EXIT_FAILURE);
}

 jobjectArray data_ = curEnv->NewObjectArray(dataSize, curEnv->FindClass("[I"),NULL);

 for (int i=0; i<dataSize; i++){

jintArray dataLocal = curEnv->NewIntArray( dataSizeCol ) ;

curEnv->SetIntArrayRegion( dataLocal, 0, dataSizeCol, (jint*)(data[i]) ) ;
curEnv->SetObjectArrayElement(data_, i, dataLocal);
curEnv->DeleteLocalRef(dataLocal);
}

jdoubleArray rowsIndex_ = curEnv->NewDoubleArray( rowsIndexSize ) ;

curEnv->SetDoubleArrayRegion( rowsIndex_, 0, rowsIndexSize, (jdouble*)(rowsIndex) ) ;


jdoubleArray colsIndex_ = curEnv->NewDoubleArray( colsIndexSize ) ;

curEnv->SetDoubleArrayRegion( colsIndex_, 0, colsIndexSize, (jdouble*)(colsIndex) ) ;


jstring variableName_ = curEnv->NewStringUTF( variableName );
if (variableName != NULL && variableName_ == NULL)
{
std::cerr << "Could not convert C string to Java UTF string, memory full." << std::endl;
exit(EXIT_FAILURE);
}


                         curEnv->CallStaticVoidMethod(cls, voidrefreshVariableEditorUInteger16jobjectArray__intjdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID ,data_, rowsIndex_, colsIndex_, variableName_);
                        curEnv->DeleteLocalRef(data_);
curEnv->DeleteLocalRef(rowsIndex_);
curEnv->DeleteLocalRef(colsIndex_);
curEnv->DeleteLocalRef(variableName_);
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
curEnv->ExceptionDescribe() ;
}

}

void EditVar::refreshVariableEditorInteger32 (JavaVM * jvm_, int** data, int dataSize, int dataSizeCol, double* rowsIndex, int rowsIndexSize, double* colsIndex, int colsIndexSize, char * variableName){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidrefreshVariableEditorInteger32jobjectArray__intjdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID = curEnv->GetStaticMethodID(cls, "refreshVariableEditorInteger32", "([[I[D[DLjava/lang/String;)V" ) ;
if (voidrefreshVariableEditorInteger32jobjectArray__intjdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID == NULL) {
std::cerr << "Could not access to the method " << "refreshVariableEditorInteger32" << std::endl;
curEnv->ExceptionDescribe();

exit(EXIT_FAILURE);
}

 jobjectArray data_ = curEnv->NewObjectArray(dataSize, curEnv->FindClass("[I"),NULL);

 for (int i=0; i<dataSize; i++){

jintArray dataLocal = curEnv->NewIntArray( dataSizeCol ) ;

curEnv->SetIntArrayRegion( dataLocal, 0, dataSizeCol, (jint*)(data[i]) ) ;
curEnv->SetObjectArrayElement(data_, i, dataLocal);
curEnv->DeleteLocalRef(dataLocal);
}

jdoubleArray rowsIndex_ = curEnv->NewDoubleArray( rowsIndexSize ) ;

curEnv->SetDoubleArrayRegion( rowsIndex_, 0, rowsIndexSize, (jdouble*)(rowsIndex) ) ;


jdoubleArray colsIndex_ = curEnv->NewDoubleArray( colsIndexSize ) ;

curEnv->SetDoubleArrayRegion( colsIndex_, 0, colsIndexSize, (jdouble*)(colsIndex) ) ;


jstring variableName_ = curEnv->NewStringUTF( variableName );
if (variableName != NULL && variableName_ == NULL)
{
std::cerr << "Could not convert C string to Java UTF string, memory full." << std::endl;
exit(EXIT_FAILURE);
}


                         curEnv->CallStaticVoidMethod(cls, voidrefreshVariableEditorInteger32jobjectArray__intjdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID ,data_, rowsIndex_, colsIndex_, variableName_);
                        curEnv->DeleteLocalRef(data_);
curEnv->DeleteLocalRef(rowsIndex_);
curEnv->DeleteLocalRef(colsIndex_);
curEnv->DeleteLocalRef(variableName_);
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
curEnv->ExceptionDescribe() ;
}

}

void EditVar::refreshVariableEditorUInteger32 (JavaVM * jvm_, long long** data, int dataSize, int dataSizeCol, double* rowsIndex, int rowsIndexSize, double* colsIndex, int colsIndexSize, char * variableName){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidrefreshVariableEditorUInteger32jobjectArray__longjdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID = curEnv->GetStaticMethodID(cls, "refreshVariableEditorUInteger32", "([[J[D[DLjava/lang/String;)V" ) ;
if (voidrefreshVariableEditorUInteger32jobjectArray__longjdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID == NULL) {
std::cerr << "Could not access to the method " << "refreshVariableEditorUInteger32" << std::endl;
curEnv->ExceptionDescribe();

exit(EXIT_FAILURE);
}

 jobjectArray data_ = curEnv->NewObjectArray(dataSize, curEnv->FindClass("[J"),NULL);

 for (int i=0; i<dataSize; i++){

jlongArray dataLocal = curEnv->NewLongArray( dataSizeCol ) ;

curEnv->SetLongArrayRegion( dataLocal, 0, dataSizeCol, (jlong*)(data[i]) ) ;
curEnv->SetObjectArrayElement(data_, i, dataLocal);
curEnv->DeleteLocalRef(dataLocal);
}

jdoubleArray rowsIndex_ = curEnv->NewDoubleArray( rowsIndexSize ) ;

curEnv->SetDoubleArrayRegion( rowsIndex_, 0, rowsIndexSize, (jdouble*)(rowsIndex) ) ;


jdoubleArray colsIndex_ = curEnv->NewDoubleArray( colsIndexSize ) ;

curEnv->SetDoubleArrayRegion( colsIndex_, 0, colsIndexSize, (jdouble*)(colsIndex) ) ;


jstring variableName_ = curEnv->NewStringUTF( variableName );
if (variableName != NULL && variableName_ == NULL)
{
std::cerr << "Could not convert C string to Java UTF string, memory full." << std::endl;
exit(EXIT_FAILURE);
}


                         curEnv->CallStaticVoidMethod(cls, voidrefreshVariableEditorUInteger32jobjectArray__longjdoubleArray_doublejdoubleArray_doublejstringjava_lang_StringID ,data_, rowsIndex_, colsIndex_, variableName_);
                        curEnv->DeleteLocalRef(data_);
curEnv->DeleteLocalRef(rowsIndex_);
curEnv->DeleteLocalRef(colsIndex_);
curEnv->DeleteLocalRef(variableName_);
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
curEnv->ExceptionDescribe() ;
}

}

void EditVar::closeVariableEditor (JavaVM * jvm_){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidcloseVariableEditorID = curEnv->GetStaticMethodID(cls, "closeVariableEditor", "()V" ) ;
if (voidcloseVariableEditorID == NULL) {
std::cerr << "Could not access to the method " << "closeVariableEditor" << std::endl;
curEnv->ExceptionDescribe();

exit(EXIT_FAILURE);
}

                         curEnv->CallStaticVoidMethod(cls, voidcloseVariableEditorID );
                        curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
curEnv->ExceptionDescribe() ;
}

}

}
