<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 1997-2008 - INRIA
 * 
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at    
 * http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" version="5.0-subset Scilab" xml:lang="en" xml:id="pvm_spawn">
  <info>
    <pubdate>$LastChangedDate$</pubdate>
  </info>
  <refnamediv>
    <refname>pvm_spawn</refname>
    <refpurpose> Starts new Scilab processes.  </refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <title>Calling Sequence</title>
    <synopsis>[tids, numt] = pvm_spawn(task, ntask, [nw], [where])</synopsis>
  </refsynopsisdiv>
  <refsection>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term>task : string, which is the file name of the scilab script (see exec) to be</term>
        <listitem>
          <para>started. The Scilab script must already reside on the host on which it is to be started.  The name must an absolute path.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>ntask</term>
        <listitem>
          <para>integer, specifying the number of copies of the  scilab script to start.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>win</term>
        <listitem>
          <para>string (optional). If win is  equal to ``nw'' the Scilab process will be spawned in background with out any window coming up.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>where</term>
        <listitem>
          <para>string (optional), can be a host name such as ``machine.domain.country'' or a PVM architecture class such as ``SUN4''. If you want to use localhost as host, set <literal>where</literal> value to <literal>"."</literal></para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>numt</term>
        <listitem>
          <para>integer, the actual number of tasks started. Values less than zero indicate a system error.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>tids</term>
        <listitem>
          <para>row of integers, array of the tids of the PVM processes started
     by this pvm_spawn call.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsection>
  <refsection>
    <title>Description</title>
    <para><literal>pvm_spawn</literal> 
    starts <literal>ntask</literal> 
    copies of the scilab script <literal>task</literal>.</para>
    <para>
    On systems that support environment,
    <literal>pvm_spawn</literal> passes selected variables from parent
    environment to children tasks. 
    If set, the envar <literal>PVM_EXPORT</literal> is passed.
    If <literal>PVM_EXPORT</literal> contains other names (separated by
    ':') they will 
    be passed too. This is useful for e.g.:</para>
    <programlisting><![CDATA[


 setenv DISPLAY myworkstation:0.0
 setenv MYSTERYVAR 13
 setenv PVM_EXPORT DISPLAY:MYSTERYVAR
   
    ]]></programlisting>
    <para>
    The hosts on which
    the PVM processes are started are determined by 
    the <literal>where</literal> arguments. On return the array
    <literal>tids</literal>  contains the PVM task identifiers for each
    process started.</para>
    <para>
    If <literal>pvm_spawn</literal> starts one or more tasks, 
    <literal>numt</literal> will be the actual number of tasks started. 
    If a system error occurs then <literal>numt</literal> will be &lt; 0.</para>
    <para>
    If <literal>numt</literal>  is less than <literal>ntask</literal> 
    then some executables have failed to start and the user should check the last
    locations in the <literal>tids</literal> array which will contain error codes
    (see below for meaning). The first <literal>numt</literal> 
    tids in the array are always valid.</para>
    <para>
    When the argument <literal>where</literal>
    is omitted an heuristic (round-robin assignment) is used to distribute the
    <literal>ntask</literal> processes across the virtual machine.</para>
    <para>
    In the special case where a multiprocessor is specified by
    <literal>where</literal>
    <literal>pvm_spawn</literal> will start all
    copies on this single machine using the vendor's underlying routines.</para>
  </refsection>
  <refsection>
    <title>See Also</title>
    <simplelist type="inline">
      <member>
        <link linkend="pvm">pvm</link>
      </member>
      <member>
        <link linkend="pvm_spawn_independent">pvm_spawn_independent</link>
      </member>
    </simplelist>
  </refsection>
</refentry>
