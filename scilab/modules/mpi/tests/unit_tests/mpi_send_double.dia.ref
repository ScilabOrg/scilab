rnk =    MPI_Comm_rank();
// =============================================================================
sizeNodes =    MPI_Comm_size();
if MPI_Comm_size() <> 2 then bugmes();quit;end
// Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
SLV = rnk;                // handy shortcuts, master is rank 0
// Copyright (C) 2010-2010 - DIGITEO - Sylvestre LEDRU
Master = ~ SLV;            // slaves are all other
if Master
    for slaveId = 1:sizeNodes-1
//
        value = rand(100,100) + rand(100,100) * %i;
        MPI_Send(value, slaveId);
//  This file is distributed under the same license as the Scilab package.
    end
    for slaveId = 1:sizeNodes-1
        tag=0;
// =============================================================================
        valueBack=MPI_Recv(slaveId, tag);
        assert_checkequal(valueBack,value + 1);
    end
//
else
    rankSource=0;
// <-- MPI TEST -->
    tag=0;
    value=MPI_Recv(rankSource, tag);
// This test sends a matrix of double [42,41] and, on each slave,
// it adds +1 to each element
// and send it back to the master
// 
MPI_Init();
rnk =    MPI_Comm_rank();
sizeNodes =    MPI_Comm_size();
if MPI_Comm_size() <> 2 then bugmes();quit;end
SLV = rnk;                // handy shortcuts, master is rank 0
Master = ~ SLV;            // slaves are all other
if Master
    for slaveId = 1:sizeNodes-1
        value = rand(100,100) + rand(100,100) * %i;
        MPI_Send(value, slaveId);
    end
    value=value+1;
    for slaveId = 1:sizeNodes-1
    // Send back to the master
        tag=0;
    MPI_Send(value,0);
        valueBack=MPI_Recv(slaveId, tag);
        assert_checkequal(valueBack,value + 1);
    end
end
MPI_Finalize();
else
    rankSource=0;
    tag=0;
    value=MPI_Recv(rankSource, tag);
    value=value+1;
    // Send back to the master
    MPI_Send(value,0);
end
MPI_Finalize();
