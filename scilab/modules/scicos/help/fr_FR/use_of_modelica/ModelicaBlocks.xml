<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scicos
 * 
 * Copyright (C) INRIA - METALAU Project <scicos@inria.fr> (HTML version)
 * Copyright (C) DIGITEO - Scilab Consortium (XML Docbook version)
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 * 
 * See the file ./license.txt
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" version="5.0-subset Scilab" xml:id="ModelicaBlocks">
  <refnamediv>
    <refname>ModelicaBlocks</refname>
    <refpurpose>Utilisation et cr√©ation des blocs Modelica dans Scicos</refpurpose>
  </refnamediv>
  <refsection id="Module_ModelicaBlocks">
    <title>Module</title>
    <itemizedlist>
      <listitem>
        <para>
          <link linkend="scicos_manual">Scicos</link>
        </para>
      </listitem>
    </itemizedlist>
  </refsection>
  <refsection id="ModelicaBlocksinScicos_ModelicaBlocks">
    <title>Modelica Blocks in Scicos</title>
    <para>
First method: Using a <link linkend="MBLOCK">Modelica generic block</link>
(available in the <link linkend="Others_pal">Others</link>
palette).
Using this block, you do not need writing the  interfacing 
function for the block, just define the input/output variable names and 
variable types and then write the Modelica program.

</para>
    <para>
Second method: Beside your Modelica program, you need to define an
interfacing function for your block. In the interfacing function, the
name of the joint Modelica model, input/output variable names,
input/output types (explicit or implicit), as well as the dialog box
for modifying the the block parameters in Scicos can be defined.
Several examples of Modelica blocks are available in
<link linkend="Electrical_pal">Electrical</link>
and
<link linkend="ThermoHydraulics_pal">Thermo-Hydraulics</link>
palettes.
</para>
    <para>
Remind that, once the interfacng function built, it should be loaded in Scilab, by
executing this command in Scilab:
</para>
    <para>

</para>
    <para>
You can load your block using "add new block" item in the
"Edit" menu of Scicos.
</para>
    <para>

</para>
  </refsection>
  <refsection id="ModelicaLibrariesinScicos_ModelicaBlocks">
    <title>Modelica Libraries in Scicos</title>
    <para>
The Modelica model corresponding to the Scicos block is defined inside a 
Modelica package. The directory where Modelica packages are located 
should be declared with the <emphasis role="bold">"modelica_libs"</emphasis> variable. e.g., if
you have defined your Modelica fiels in the MyModelicalibs, you should
execute this command in Scilab to inform the Modelica compiler about
the location of Modelica libraries:

</para>
    <para>

</para>
    <para>
The Modelica compiler looks for all Modelica files in the directories 
given by <emphasis role="bold">"modelica_libs"</emphasis> and use them for compile the main Modelica 
model generated by Scicos.
</para>
    <para>

</para>
  </refsection>
  <refsection id="ExternalFunctions_ModelicaBlocks">
    <title>External Functions</title>
    <para>
You can define and use external functions in your Modelica
model. External functions can be written in C or Fortran languages.
In order to use an external function in a Modeli model, the Modelica function prototype defining
inputs and output of the external function, the header file (*.h) of
the external function, and a *.DLL (Windows) or *.SO (Unix) library
are required.

</para>
    <para>
      <emphasis role="bold">Example of a Modelica function prototype:</emphasis>
    </para>
    <para>

</para>
    <para>
      <emphasis role="bold">Example of a header file (Optimal.h):</emphasis>
    </para>
    <para>

</para>
    <para>
The modelica compiler looks for required external libraries in the
directories gievn by <emphasis role="bold">"modelica_libs"</emphasis>. The user can place the
Modelica model, the header file, and the libraries in a directory e.g.,
Mylibs and then in Scilab execute the command:
</para>
    <para>


</para>
  </refsection>
  <refsection id="Auteurs_ModelicaBlocks">
    <title>Auteurs</title>
    <para><emphasis role="bold">Masoud Najafi</emphasis> - INRIA</para>
  </refsection>
</refentry>
