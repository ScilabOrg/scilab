<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
 * Scicos
 * 
 * Copyright (C) INRIA - METALAU Project <scicos@inria.fr> (HTML version)
 * Copyright (C) DIGITEO - Scilab Consortium (XML Docbook version)
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 * 
 * See the file ./license.txt
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" version="5.0-subset Scilab" xml:id="Context">
  <refnamediv>
    <refname>Context</refname>
    <refpurpose>Using symbolic parameters, context and masking in Scicos</refpurpose>
  </refnamediv>
  <refsection id="Modules_Context">
    <title>Modules</title>
    <itemizedlist>
      <listitem>
        <para>
          <link linkend="scicos_manual">Scicos</link>
        </para>
      </listitem>
    </itemizedlist>
  </refsection>
  <refsection id="Introduction_Context">
    <title>Introduction</title>
    <para>
In most cases, double clicking on a Scicos block leads to the opening of a dialog box used
to set the values of block parameters. These parameters, which we refer to as GUI parameters,
are not necessarily the exact duplicate of the block parameters used in the <emphasis role="italic">computational function</emphasis>
of the block used during simulation. For example the GUI parameters of a linear system block can be
the numerator and the denominator of its transfer function, whereas the parameters used during the
simulation are the <emphasis role="bold">A</emphasis>, <emphasis role="bold">B</emphasis>, <emphasis role="bold">C</emphasis> and <emphasis role="bold">D</emphasis> matrices associated with the time domain specification of
this transfer function. It is the role of the <emphasis role="italic">interfacing function</emphasis> of the block to examine the
GUI parameters given by the user, generate error messages if needed, and convert them into simulation
parameters.

</para>
    <para>
In specifying the GUI parameters, the user can enter numerical expressions in the dialog box, for example
 or , but he can also enter Scilab expressions such as:  or 
. But more importantly, the user can enter expressions using Scilab
variables: , . These variables, which we call  of the block,
must have been previously defined; in most cases this is done in a .
</para>
    <para>
Using symbolic parameters in specifying GUI parameters allows the user to easily change a system parameter
affecting multiple blocks (otherwise the GUI parameter of each block has to be individually changed). To
make an analogy with standard programming languages such as C, it would be like setting  
and using  everywhere in the program instead of . Symbolic parameters can also be used to
construct parameterized models, for example it is possible to build the model
of a fully generic linear-system-Kalman-filter system in which even the size of the blocks' states 
and input/outputs are not determined in advance and vary depending on the value of the parameters. 
Indeed, the sizes of the symbolic parameters can also be changed if it does not create inconsistencies in the diagram.  
</para>
    <para>

</para>
  </refsection>
  <refsection id="Diagramcontext_Context">
    <title>Diagram context</title>
    <para>
Each Scicos diagram (the main diagram as well as the Super Blocks) has a context associated with it.
The context is a <emphasis role="italic">Scilab script</emphasis>; it can be edited interactively using the ``Diagram/Context'' menu of
the diagram. To use a symbolic parameter, say the matrix <literal>A</literal>, to be used in defining 
the GUI parameter of a block, <literal>A</literal>
can be defined in the context of the diagram. But all the symbolic parameters of all the blocks in a diagram
are not necessarily defined in the context of that same diagram.

</para>
    <para>
      <emphasis role="bold">Scope of a context variable</emphasis>
    </para>
    <para>
A Scilab variable defined in the context of a diagram is accessible not only to the blocks of that diagram,
but also to the contexts and the blocks of all sub-diagrams below it. For example if  is defined in the
context of Diagram D1, and Diagram D2 is a sub-diagram of D1 (is the content of a super block of D1), then
 is available to the context of D2 and can be used in the definition of the GUI parameters of its blocks.
The context of D2 can for example contain the following instruction: .
</para>
    <para>
If the variable  is redefined in the context of Dn, one of the sub-diagrams of D1, then it is the new value
that is available in the blocks of Dn, and the context and the blocks of the sub-diagrams below it. So in general, to
find the definition of a symbolic parameter used in a block, first the context of the diagram containing the
block must be examined. If the parameter is not defined there, the context of the diagram containing the
first diagram must be examined and so on until the definition of the parameter is found.  
</para>
    <para>
This hierarchical treatment of parameter definition using multiple contexts as opposed to a single workspace
has many advantages. The most important advantage is that a Super Block can be placed inside a diagram
without any risk of conflict, even if symbolic parameters with similar names are used in both. Another advantage
is its natural usage in the masking operation that we shall see later.
</para>
    <para>
      <emphasis role="bold">Evaluation of the context</emphasis>
    </para>
    <para>
As previously stated, a context is nothing but a list of Scilab instructions: a Scilab script. The context
of a diagram must be evaluated (script executed) in order to compute 
the symbolic parameters that are used in the definition of the GUI parameters of its blocks. The contexts
are evaluated only when necessary, in particular when the content of a context is modified. In that case,
all the GUI parameters of all the blocks in the diagram in which the context has been modified are re-evaluated, and
so are the context and the blocks' GUI parameters of all the sub-diagrams below it. The reason for re-evaluating
the sub-diagrams below it has to do with the scope of the parameters defined in the context of the first diagram.
Indeed any change in this context can affect GUI parameters of all the blocks within sub-diagrams below this first
diagram.
</para>
    <para>
When a diagram is opened, its context is also evaluated so that symbolic parameters are 
made available in the environment.
The GUI parameters of the blocks are however not re-evaluated. The reason is that it is assumed that two
evaluation of the same identical contexts leads necessary to the same values of symbolic parameters. So, since
the content of the context of the diagram has not changed since it has last been saved, the blocks GUI parameters
must be up to date. This assumption holds in most cases, but not if functions such as  or  are
used in the context. Another instruction that can invalidate the assumption is the execution of an external
script, for example . Clearly if the file  is modified, the re-evaluation
of the context can lead to different values for the symbolic parameters. Scicos attempts to identify the presence 
of such commands inside the text of the context and issues a full re-evaluation if it finds it necessary when
a diagram is opened. But this identification is not full proof and a manual ``Evaluate'' button is provided to
force a full re-evaluation if the user finds it necessary. 
</para>
    <para>
The ``Evaluate'' button is particularly useful when the context contains an  command since Scicos
does not know if the executed file is edited. In such a case, it is up to the user to force an evaluation.
</para>
    <para>
Finally it should be noted that all the variables defined in a context, except for functions, are available 
as symbolic parameters. So it is recommended that intermediate variables used in the context be cleared at
the end of the context to avoid overloading the list of symbolic parameters. 
</para>
    <para>

</para>
  </refsection>
  <refsection id="Maskingoperation_Context">
    <title>Masking operation</title>
    <para>
The masking operation consists of modifying a Super Block in such a way that it resembles a regular block.
Double clicking on a masked block, opens a GUI, just as in the case of a regular block (double clicking on
a Super Block opens up the diagram contained in the Super Block). The GUI parameters of a masked block
are the symbolic parameters needed to evaluate its content. These parameters are identified automatically
when the ``Create Mask'' operation is applied to a Super Block. 

</para>
    <para>
By choosing to define or not to define in the context various symbolic parameters needed in a Super Block, user
can specify the GUI parameters of the block obtained after the masking operation. This is an easy way of
constructing custom blocks. The dialog box associated with the block can also be customized using the
``Customize Mask'' operation. Finally, the mask can be removed  by the ``Remove Mask'' operation. 

</para>
  </refsection>
  <refsection id="Authors_Context">
    <title>Authors</title>
    <para><emphasis role="bold">Ramine Nikoukhah</emphasis> - INRIA</para>
  </refsection>
</refentry>
