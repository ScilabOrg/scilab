// =============================================================================
// Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
// Copyright (C) 2014 - Scilab Enterprises - Paul Bignier
//
//  This file is distributed under the same license as the Scilab package.
// =============================================================================
loadXcosLibs();
// Allocate a summation block
o = BIGSOM_f("define")
objectCreated( 1 , BLOCK )
objectCreated( 2 , PORT )
objectCreated( 3 , PORT )
objectCreated( 4 , PORT )
o  = 
o.graphics
 ans  =
orig = [0,0]
sz = [2,3]
flip = %t
theta = 0
exprs = "[1;1]"
pin = [0;0]
pout = 0
pein = []
peout = []
gr_i = []
id = ""
in_implicit = ["E";"E"]
out_implicit = "E"
in_style = ["";""]
out_style = ""
in_label = ["";""]
out_label = ""
style = ""
o.model
 ans  =
sum type: 2
in = [-1;-1]
in2 = [1;1]
intyp = [1;1]
out = -1
out2 = 1
outtyp = 1
evtin = []
evtout = []
state = []
dstate = []
odstate = list()
rpar = [1;1]
ipar = []
opar = list()
blocktype = "c"
firing = []
dep_ut = [%t,%f]
label = ""
nzcross = 0
nmode = 0
equations = list()
uid = ""
o.gui
 ans  =
 BIGSOM_f
o.doc
 ans  =
     ()
// Set the block to itself without making any modification
// (scicos_getvalue returns BIGSOM_f default parameters)
p = funcprot();
funcprot(0);
function [ok,sgn,exprs] = scicos_getvalue(title, field, Type, exprs)
    ok = %t;
    sgn = [1; 1];
    exprs = sci2exp(sgn);
endfunction
funcprot(p);
o = BIGSOM_f("set", o)
objectCreated( 5 , BLOCK )
objectCreated( 6 , PORT )
objectCreated( 7 , PORT )
objectCreated( 8 , PORT )
objectDeleted( 2 , PORT )
objectDeleted( 3 , PORT )
objectDeleted( 4 , PORT )
objectDeleted( 1 , BLOCK )
o  = 
o.graphics
 ans  =
orig = [0,0]
sz = [2,3]
flip = %t
theta = 0
exprs = "[1;1]"
pin = [0;0]
pout = 0
pein = []
peout = []
gr_i = []
id = ""
in_implicit = ["E";"E"]
out_implicit = "E"
in_style = ["";""]
out_style = ""
in_label = ["";""]
out_label = ""
style = ""
o.model
 ans  =
sum type: 2
in = [-1;-1]
in2 = [1;1]
intyp = [1;1]
out = -1
out2 = 1
outtyp = 1
evtin = []
evtout = []
state = []
dstate = []
odstate = list()
rpar = [1;1]
ipar = []
opar = list()
blocktype = "c"
firing = []
dep_ut = [%t,%f]
label = ""
nzcross = 0
nmode = 0
equations = list()
uid = ""
// Now use scicos_getvalue to modify the 'exprs' and 'rpar' fields to "[-1;-1]" and '[-1;-1]'
p = funcprot();
funcprot(0);
function [ok,sgn,exprs] = scicos_getvalue(title, field, Type, exprs)
    ok = %t;
    sgn = [-1; -1];
    exprs = sci2exp(sgn);
endfunction
funcprot(p);
o = BIGSOM_f("set", o)
objectCreated( 9 , BLOCK )
objectCreated( 10 , PORT )
objectCreated( 11 , PORT )
objectCreated( 12 , PORT )
objectDeleted( 6 , PORT )
objectDeleted( 7 , PORT )
objectDeleted( 8 , PORT )
objectDeleted( 5 , BLOCK )
o  = 
o.graphics
 ans  =
orig = [0,0]
sz = [2,3]
flip = %t
theta = 0
exprs = "[-1;-1]"
pin = [0;0]
pout = 0
pein = []
peout = []
gr_i = []
id = ""
in_implicit = ["E";"E"]
out_implicit = "E"
in_style = ["";""]
out_style = ""
in_label = ["";""]
out_label = ""
style = ""
o.model
 ans  =
sum type: 2
in = [-1;-1]
in2 = [1;1]
intyp = [1;1]
out = -1
out2 = 1
outtyp = 1
evtin = []
evtout = []
state = []
dstate = []
odstate = list()
rpar = [-1;-1]
ipar = []
opar = list()
blocktype = "c"
firing = []
dep_ut = [%t,%f]
label = ""
nzcross = 0
nmode = 0
equations = list()
uid = ""
// Now modify the block's entry port #2 to '1' and add a new one with value '1'
p = funcprot();
funcprot(0);
function [ok,sgn,exprs] = scicos_getvalue(title, field, Type, exprs)
    ok = %t;
    sgn = [-1; 1; 1];
    exprs = sci2exp(sgn);
endfunction
funcprot(p);
o = BIGSOM_f("set", o)
objectCreated( 13 , BLOCK )
objectCreated( 14 , PORT )
objectCreated( 15 , PORT )
objectCreated( 16 , PORT )
objectCreated( 17 , PORT )
objectDeleted( 10 , PORT )
objectDeleted( 11 , PORT )
objectDeleted( 12 , PORT )
objectDeleted( 9 , BLOCK )
o  = 
o.graphics
 ans  =
orig = [0,0]
sz = [2,3]
flip = %t
theta = 0
exprs = "[-1;1;1]"
pin = [0;0;0]
pout = 0
pein = []
peout = []
gr_i = []
id = ""
in_implicit = ["E";"E";"E"]
out_implicit = "E"
in_style = ["";"";""]
out_style = ""
in_label = ["";"";""]
out_label = ""
style = ""
o.model
 ans  =
sum type: 2
in = [-1;-1;-1]
in2 = [1;1;1]
intyp = [1;1;1]
out = -1
out2 = 1
outtyp = 1
evtin = []
evtout = []
state = []
dstate = []
odstate = list()
rpar = [-1;1;1]
ipar = []
opar = list()
blocktype = "c"
firing = []
dep_ut = [%t,%f]
label = ""
nzcross = 0
nmode = 0
equations = list()
uid = ""
// Try with another block containing event inputs
o = CSCOPE("define")
objectCreated( 18 , BLOCK )
objectCreated( 19 , PORT )
objectCreated( 20 , PORT )
objectDeleted( 14 , PORT )
objectDeleted( 15 , PORT )
objectDeleted( 17 , PORT )
objectDeleted( 16 , PORT )
objectDeleted( 13 , BLOCK )
o  = 
o.graphics
 ans  =
orig = [0,0]
sz = [2,2]
flip = %t
theta = 0
exprs = ["1 3 5 7 9 11 13 15";"-1";"[]";"[600;400]";"-15";"15";"30";"20";"0";""]
pin = 0
pout = []
pein = 0
peout = []
gr_i = []
id = ""
in_implicit = "E"
out_implicit = []
in_style = ""
out_style = 
in_label = ""
out_label = 
style = ""
o.model
 ans  =
cscope type: 4
in = -1
in2 = 1
intyp = 1
out = []
out2 = []
outtyp = 1
evtin = 1
evtout = []
state = []
dstate = []
odstate = list()
rpar = [0;-15;15;30]
ipar = [-1;1;20;1;3;5;7;9;11;13;15;-1;-1;600;400]
opar = list()
blocktype = "c"
firing = []
dep_ut = [%t,%f]
label = ""
nzcross = 0
nmode = 0
equations = list()
uid = ""
o.gui
 ans  =
 CSCOPE
o.doc
 ans  =
     ()
// Set the block to itself without making any modification
// (scicos_getvalue returns CSCOPE_f default parameters)
p = funcprot();
funcprot(0);
function [ok,clrs,win,wpos,wdim,ymin,ymax,per,N,heritance,nom,exprs] = scicos_getvalue(title, fields, Type, exprs)
    ok = %t;
    clrs = model.ipar(4:11)
    win = model.ipar(1)
    wpos = model.ipar(12:13)
    wdim = model.ipar(14:15)
    ymin = model.rpar(2)
    ymax = model.rpar(3)
    per = model.rpar(4)
    N = model.ipar(3)
    heritance = 0
    nom = model.label
    exprs = graphics.exprs;
endfunction
funcprot(p);
o = CSCOPE("set", o)
objectCreated( 21 , BLOCK )
objectCreated( 22 , PORT )
objectCreated( 23 , PORT )
objectDeleted( 19 , PORT )
objectDeleted( 20 , PORT )
objectDeleted( 18 , BLOCK )
o  = 
// Test 'opar' and 'odstate'
o = LOGIC("define")
objectCreated( 24 , BLOCK )
objectCreated( 25 , PORT )
objectCreated( 26 , PORT )
objectCreated( 27 , PORT )
objectCreated( 28 , PORT )
objectDeleted( 22 , PORT )
objectDeleted( 23 , PORT )
objectDeleted( 21 , BLOCK )
o  = 
o.model.opar
 ans  =
       ans(1)
  0
  0
  0
  1
typeof(o.model.opar(1))
 ans  =
 int8
o.model.opar = list([1 2 3; 4 5 6], ["Hello" "world!"; "Test" "123"], [%i 2 3*%i; 4 5*%i 6], uint32([32 32; 32 32]));
o.model.opar
 ans  =
       ans(1)
    1.    2.    3.
    4.    5.    6.
       ans(2)
!Hello  world!  !
!               !
!Test   123     !
       ans(3)
    i      2.    3.i
    4.    5.i    6.
       ans(4)
  32  32
  32  32
o.model.odstate = list([1 2 3; 4 5 6], ["Hello" "world!"; "Test" "123"], [%i 2 3*%i; 4 5*%i 6], uint32([32 32; 32 32]));
o.model.odstate
 ans  =
       ans(1)
    1.    2.    3.
    4.    5.    6.
       ans(2)
!Hello  world!  !
!               !
!Test   123     !
       ans(3)
    i      2.    3.i
    4.    5.i    6.
       ans(4)
  32  32
  32  32
// Check that all the model items are freed
clear
objectDeleted( 25 , PORT )
objectDeleted( 26 , PORT )
objectDeleted( 27 , PORT )
objectDeleted( 28 , PORT )
objectDeleted( 24 , BLOCK )
