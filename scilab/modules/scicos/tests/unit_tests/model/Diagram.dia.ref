// =============================================================================
// Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
// Copyright (C) 2014 - Scilab Enterprises - Paul Bignier
//
//  This file is distributed under the same license as the Scilab package.
// =============================================================================
loadXcosLibs();
// Allocate a diagram and access its fields
scs_m = scicos_diagram()
objectCreated( 1 , DIAGRAM )
scs_m  = 
scs_m.props
 ans  =
wpar = []
title = ["Untitled";""]
tol = [0.000001,0.000001,1.0000D-10,100001,0,1,0]
tf = 100000
context = []
void1 = []
options = tlist("scsopt")
void2 = []
void3 = []
doc = list()
scs_m.objs
 ans  =
     ()
scs_m.version
 ans  =
 
scs_m.contrib
 ans  =
     ()
clear scs_m
objectDeleted( 1 , DIAGRAM )
// Create a dummy diagram with one undefined block then clear it
scs_m = scicos_diagram(objs=list(scicos_block()));
objectCreated( 2 , BLOCK )
objectCreated( 3 , DIAGRAM )
clear scs_m
objectDeleted( 2 , BLOCK )
objectDeleted( 3 , DIAGRAM )
// Create a diagram containing 2 summation blocks and two links
Sum    = BIGSOM_f("define");
objectCreated( 4 , BLOCK )
objectCreated( 5 , PORT )
objectCreated( 6 , PORT )
objectCreated( 7 , PORT )
Scope1 = CSCOPE("define");
objectCreated( 8 , BLOCK )
objectCreated( 9 , PORT )
objectCreated( 10 , PORT )
Scope2 = CSCOPE("define");
objectCreated( 11 , BLOCK )
objectCreated( 12 , PORT )
objectCreated( 13 , PORT )
lnk1   = scicos_link();          // Data link
objectCreated( 14 , LINK )
lnk2   = scicos_link(ct=[1,-1]); // Activation link
objectCreated( 15 , LINK )
scs_m = scicos_diagram( objs=list(Sum,Scope1,Scope2,lnk1,lnk2) )
objectCreated( 16 , DIAGRAM )
scs_m  = 
scs_m.objs
 ans  =
       ans(1)
       ans(2)
       ans(3)
       ans(4)
       ans(5)
// Link output port #1 of block #1 with input port #1 of block #2 thanks to lnk1
scs_m.objs(4).from = [1 1 0]; // Link block #1
scs_m.objs(1).graphics.pout   // Check that block #1 is connected to lnk1
 ans  =
    4.
scs_m.objs(1).model.out       // "
 ans  =
  - 1.
scs_m.objs(4).to = [2 1 1];   // Link block #2
scs_m.objs(4).from
 ans  =
    1.    1.    0.
scs_m.objs(4).to
 ans  =
    2.    1.    1.
scs_m.objs(2).graphics.pin    // Check that block #2 is connected to lnk1
 ans  =
    4.
scs_m.objs(2).model.in        // "
 ans  =
  - 1.
// Change the end of the link to input port #2 of block #2
scs_m.objs(4).to = [2 2 1];
objectCreated( 17 , PORT )
scs_m.objs(4).from
 ans  =
    1.    1.    0.
scs_m.objs(4).to
 ans  =
    2.    2.    1.
scs_m.objs(2).graphics.pin    // Check that block #2 is connected to lnk1
 ans  =
    0.
    4.
scs_m.objs(2).model.in        // "
 ans  =
  - 1.
  - 1.
// Disconnect the source
scs_m.objs(4).from = [0 0 0];
scs_m.objs(4).from
 ans  =
    0.    0.    0.
scs_m.objs(4).to
 ans  =
    2.    2.    1.
scs_m.objs(1).graphics.pout   // Check that block #1 is not connected
 ans  =
    0.
scs_m.objs(2).graphics.pin    // But block #2 is still connected to the link
 ans  =
    0.
    4.
// Disconnect the destination
scs_m.objs(4).to = [0 0 0];
scs_m.objs(2).graphics.pin    // Check that block #2 is not connected
 ans  =
    0.
    0.
// Now link the two Scope blocks together by adding an event output port to block #3 thanks to lnk2
scs_m.objs(5).from = [2 1 1]; // Link the input of block #2
scs_m.objs(5).to = [3 1 0];   // Add an event output to block #3 and link it to the previous
objectCreated( 18 , PORT )
scs_m.objs(5).from
 ans  =
    2.    1.    1.
scs_m.objs(5).to
 ans  =
    3.    1.    0.
scs_m.objs(2).graphics.pein   // Check that block #2 is connected to lnk2
 ans  =
    5.
scs_m.objs(2).model.evtin     // "
 ans  =
    1.
scs_m.objs(3).graphics.peout  // Check that block #3 is connected to lnk2
 ans  =
    5.
scs_m.objs(3).model.evtout    // "
 ans  =
  - 1.
// Verify that it is impossible to link two inputs or two outputs together
scs_m.objs(5).from = [2 1 0]; // Two outputs
scs_m.objs(5).to = [3 1 1];   // Two inputs
//===================================================================================================
// Test predefined link at diagram creation
clear scs_m;
objectDeleted( 16 , DIAGRAM )
lnk   = scicos_link( from=[1 1 0],to=[2 1 1] );
objectCreated( 19 , LINK )
scs_m = scicos_diagram( objs=list(Sum,Scope1,lnk) );
objectCreated( 20 , DIAGRAM )
scs_m.objs(3).from
 ans  =
    1.    1.    0.
scs_m.objs(3).to
 ans  =
    2.    1.    1.
scs_m.objs(1).graphics.pout   // Check that block #1 is connected to lnk
 ans  =
    3.
scs_m.objs(1).model.out       // "
 ans  =
  - 1.
scs_m.objs(2).graphics.pin    // Check that block #2 is connected to lnk
 ans  =
    3.
    0.
scs_m.objs(2).model.in        // "
 ans  =
  - 1.
  - 1.
//===================================================================================================
// Test predefined link insertion
clear scs_m;
objectDeleted( 20 , DIAGRAM )
lnk   = scicos_link( from=[1 1 0],to=[2 1 1] );
objectCreated( 21 , LINK )
objectDeleted( 19 , LINK )
scs_m = scicos_diagram( objs=list(Sum,Scope1) );
objectCreated( 22 , DIAGRAM )
scs_m.objs(1).graphics.pout   // Check that block #1 is not connected
 ans  =
    0.
scs_m.objs(1).model.out       // "
 ans  =
  - 1.
scs_m.objs(2).graphics.pin    // Check that block #2 is not connected
 ans  =
    0.
    0.
scs_m.objs(2).model.in        // "
 ans  =
  - 1.
  - 1.
scs_m.objs(3) = lnk;          // Add the predefined Link
objectCreated( 23 , LINK )
scs_m.objs
 ans  =
       ans(1)
       ans(2)
       ans(3)
scs_m.objs(3).from
 ans  =
    1.    1.    0.
scs_m.objs(3).to
 ans  =
    2.    1.    1.
scs_m.objs(1).graphics.pout   // Check that block #1 is connected to lnk
 ans  =
    3.
scs_m.objs(1).model.out       // "
 ans  =
  - 1.
scs_m.objs(2).graphics.pin    // Check that block #2 is connected to lnk
 ans  =
    3.
    0.
scs_m.objs(2).model.in        // "
 ans  =
  - 1.
  - 1.
//===================================================================================================
// Test Links insertion before Block insertion
clear scs_m;
objectDeleted( 23 , LINK )
objectDeleted( 22 , DIAGRAM )
lnk   = scicos_link( from=[2 1 0],to=[3 1 1] );
objectCreated( 24 , LINK )
objectDeleted( 21 , LINK )
scs_m = scicos_diagram();
objectCreated( 25 , DIAGRAM )
scs_m.objs(1) = lnk;          // Add the predefined Link
objectCreated( 26 , LINK )
scs_m.objs(1).from
 ans  =
    2.    1.    0.
scs_m.objs(1).to
 ans  =
    3.    1.    1.
scs_m.objs(2) = Sum;          // Add the Block that lnk's 'from' points to
objectCreated( 27 , BLOCK )
objectCreated( 28 , PORT )
objectCreated( 29 , PORT )
objectCreated( 30 , PORT )
scs_m.objs(3) = Scope1;       // Add the Block that lnk's 'to' points to
objectCreated( 31 , BLOCK )
objectCreated( 32 , PORT )
objectCreated( 33 , PORT )
objectCreated( 34 , PORT )
objectCreated( 35 , LINK )
objectCreated( 36 , PORT )
objectCreated( 37 , BLOCK )
objectCreated( 38 , PORT )
objectCreated( 39 , PORT )
scs_m.objs
 ans  =
       ans(1)
       ans(2)
       ans(3)
// Check that the linking has been done
// Sum (#2 in diagram) is linked to Scope1 (#3) through lnk (#1)
scs_m.objs(1).from
 ans  =
    2.    1.    0.
scs_m.objs(1).to
 ans  =
    3.    1.    1.
scs_m.objs(2).graphics.pout
 ans  =
    1.
scs_m.objs(2).model.out
 ans  =
  - 1.
scs_m.objs(3).graphics.pin
 ans  =
    1.
    0.
scs_m.objs(3).model.in
 ans  =
  - 1.
  - 1.
// Check that all the model items are freed
clear
objectDeleted( 26 , LINK )
objectDeleted( 28 , PORT )
objectDeleted( 29 , PORT )
objectDeleted( 30 , PORT )
objectDeleted( 27 , BLOCK )
objectDeleted( 32 , PORT )
objectDeleted( 33 , PORT )
objectDeleted( 34 , PORT )
objectDeleted( 31 , BLOCK )
objectDeleted( 25 , DIAGRAM )
objectDeleted( 5 , PORT )
objectDeleted( 6 , PORT )
objectDeleted( 7 , PORT )
objectDeleted( 4 , BLOCK )
objectDeleted( 9 , PORT )
objectDeleted( 17 , PORT )
objectDeleted( 10 , PORT )
objectDeleted( 8 , BLOCK )
objectDeleted( 12 , PORT )
objectDeleted( 13 , PORT )
objectDeleted( 18 , PORT )
objectDeleted( 11 , BLOCK )
objectDeleted( 14 , LINK )
objectDeleted( 15 , LINK )
objectDeleted( 24 , LINK )
