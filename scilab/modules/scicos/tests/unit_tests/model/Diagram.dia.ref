// =============================================================================
// Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
// Copyright (C) 2014 - Scilab Enterprises - Paul Bignier
//
//  This file is distributed under the same license as the Scilab package.
// =============================================================================
// <-- CLI SHELL MODE -->
loadXcosLibs();
// Allocate a diagram and access its fields
scs_m = scicos_diagram()
objectCreated( 1 , DIAGRAM )
propertyUpdated( 1 , DIAGRAM , TITLE ) : NO_CHANGES
propertyUpdated( 1 , DIAGRAM , PATH ) : NO_CHANGES
propertyUpdated( 1 , DIAGRAM , PROPERTIES ) : NO_CHANGES
propertyUpdated( 1 , DIAGRAM , PROPERTIES ) : NO_CHANGES
propertyUpdated( 1 , DIAGRAM , CONTEXT ) : NO_CHANGES
propertyUpdated( 1 , DIAGRAM , CHILDREN ) : NO_CHANGES
propertyUpdated( 1 , DIAGRAM , VERSION_NUMBER ) : NO_CHANGES
scs_m  = 
scs_m.props
 ans  =
wpar = []
title = ["Untitled";""]
tol = [0.000001,0.000001,1.0000D-10,100001,0,1,0]
tf = 100000
context = []
void1 = []
options = tlist("scsopt")
void2 = []
void3 = []
doc = list()
scs_m.objs
 ans  =
     ()
scs_m.version
 ans  =
 
scs_m.contrib
 ans  =
     ()
clear scs_m
objectDeleted( 1 , DIAGRAM )
// Create a dummy diagram with one undefined block then clear it
scs_m = scicos_diagram(objs=list(scicos_block()));
objectCreated( 2 , BLOCK )
propertyUpdated( 2 , BLOCK , GEOMETRY ) : NO_CHANGES
propertyUpdated( 2 , BLOCK , GEOMETRY ) : NO_CHANGES
propertyUpdated( 2 , BLOCK , ANGLE ) : NO_CHANGES
propertyUpdated( 2 , BLOCK , ANGLE ) : NO_CHANGES
propertyUpdated( 2 , BLOCK , EXPRS ) : NO_CHANGES
propertyUpdated( 2 , BLOCK , LABEL ) : NO_CHANGES
propertyUpdated( 2 , BLOCK , STYLE ) : NO_CHANGES
propertyUpdated( 2 , BLOCK , SIM_FUNCTION_NAME ) : NO_CHANGES
propertyUpdated( 2 , BLOCK , SIM_FUNCTION_API ) : NO_CHANGES
propertyUpdated( 2 , BLOCK , STATE ) : NO_CHANGES
propertyUpdated( 2 , BLOCK , DSTATE ) : NO_CHANGES
propertyUpdated( 2 , BLOCK , ODSTATE ) : NO_CHANGES
propertyUpdated( 2 , BLOCK , RPAR ) : NO_CHANGES
propertyUpdated( 2 , BLOCK , IPAR ) : NO_CHANGES
propertyUpdated( 2 , BLOCK , OPAR ) : NO_CHANGES
propertyUpdated( 2 , BLOCK , SIM_BLOCKTYPE ) : NO_CHANGES
propertyUpdated( 2 , BLOCK , SIM_DEP_UT ) : NO_CHANGES
propertyUpdated( 2 , BLOCK , LABEL ) : NO_CHANGES
propertyUpdated( 2 , BLOCK , NZCROSS ) : NO_CHANGES
propertyUpdated( 2 , BLOCK , NMODE ) : NO_CHANGES
propertyUpdated( 2 , BLOCK , UID ) : NO_CHANGES
propertyUpdated( 2 , BLOCK , INTERFACE_FUNCTION ) : NO_CHANGES
objectCreated( 3 , DIAGRAM )
propertyUpdated( 3 , DIAGRAM , TITLE ) : NO_CHANGES
propertyUpdated( 3 , DIAGRAM , PATH ) : NO_CHANGES
propertyUpdated( 3 , DIAGRAM , PROPERTIES ) : NO_CHANGES
propertyUpdated( 3 , DIAGRAM , PROPERTIES ) : NO_CHANGES
propertyUpdated( 3 , DIAGRAM , CONTEXT ) : NO_CHANGES
propertyUpdated( 2 , BLOCK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 3 , DIAGRAM , CHILDREN ) : SUCCESS
propertyUpdated( 3 , DIAGRAM , VERSION_NUMBER ) : NO_CHANGES
clear scs_m
propertyUpdated( 2 , BLOCK , PARENT_DIAGRAM ) : SUCCESS
objectDeleted( 2 , BLOCK )
objectDeleted( 3 , DIAGRAM )
// Create a diagram containing 2 summation blocks and two links
Sum    = BIGSOM_f("define");
objectCreated( 4 , BLOCK )
propertyUpdated( 4 , BLOCK , GEOMETRY ) : NO_CHANGES
propertyUpdated( 4 , BLOCK , GEOMETRY ) : SUCCESS
propertyUpdated( 4 , BLOCK , ANGLE ) : NO_CHANGES
propertyUpdated( 4 , BLOCK , ANGLE ) : NO_CHANGES
propertyUpdated( 4 , BLOCK , EXPRS ) : SUCCESS
objectCreated( 5 , PORT )
propertyUpdated( 5 , PORT , SOURCE_BLOCK ) : SUCCESS
propertyUpdated( 5 , PORT , PORT_KIND ) : SUCCESS
objectCreated( 6 , PORT )
propertyUpdated( 6 , PORT , SOURCE_BLOCK ) : SUCCESS
propertyUpdated( 6 , PORT , PORT_KIND ) : SUCCESS
propertyUpdated( 4 , BLOCK , INPUTS ) : SUCCESS
objectCreated( 7 , PORT )
propertyUpdated( 7 , PORT , SOURCE_BLOCK ) : SUCCESS
propertyUpdated( 7 , PORT , PORT_KIND ) : SUCCESS
propertyUpdated( 4 , BLOCK , OUTPUTS ) : SUCCESS
propertyUpdated( 4 , BLOCK , LABEL ) : NO_CHANGES
propertyUpdated( 5 , PORT , IMPLICIT ) : NO_CHANGES
propertyUpdated( 6 , PORT , IMPLICIT ) : NO_CHANGES
propertyUpdated( 7 , PORT , IMPLICIT ) : NO_CHANGES
propertyUpdated( 5 , PORT , STYLE ) : NO_CHANGES
propertyUpdated( 6 , PORT , STYLE ) : NO_CHANGES
propertyUpdated( 7 , PORT , STYLE ) : NO_CHANGES
propertyUpdated( 5 , PORT , LABEL ) : NO_CHANGES
propertyUpdated( 6 , PORT , LABEL ) : NO_CHANGES
propertyUpdated( 7 , PORT , LABEL ) : NO_CHANGES
propertyUpdated( 4 , BLOCK , STYLE ) : NO_CHANGES
propertyUpdated( 4 , BLOCK , SIM_FUNCTION_NAME ) : SUCCESS
propertyUpdated( 4 , BLOCK , SIM_FUNCTION_API ) : SUCCESS
propertyUpdated( 6 , PORT , DATATYPE ) : SUCCESS
propertyUpdated( 5 , PORT , DATATYPE ) : SUCCESS
propertyUpdated( 7 , PORT , DATATYPE ) : SUCCESS
propertyUpdated( 4 , BLOCK , STATE ) : NO_CHANGES
propertyUpdated( 4 , BLOCK , DSTATE ) : NO_CHANGES
propertyUpdated( 4 , BLOCK , ODSTATE ) : NO_CHANGES
propertyUpdated( 4 , BLOCK , RPAR ) : SUCCESS
propertyUpdated( 4 , BLOCK , IPAR ) : NO_CHANGES
propertyUpdated( 4 , BLOCK , OPAR ) : NO_CHANGES
propertyUpdated( 4 , BLOCK , SIM_BLOCKTYPE ) : NO_CHANGES
propertyUpdated( 4 , BLOCK , SIM_DEP_UT ) : SUCCESS
propertyUpdated( 4 , BLOCK , LABEL ) : NO_CHANGES
propertyUpdated( 4 , BLOCK , NZCROSS ) : NO_CHANGES
propertyUpdated( 4 , BLOCK , NMODE ) : NO_CHANGES
propertyUpdated( 4 , BLOCK , UID ) : NO_CHANGES
propertyUpdated( 4 , BLOCK , INTERFACE_FUNCTION ) : SUCCESS
Scope1 = CSCOPE("define");
objectCreated( 8 , BLOCK )
propertyUpdated( 8 , BLOCK , GEOMETRY ) : NO_CHANGES
propertyUpdated( 8 , BLOCK , GEOMETRY ) : SUCCESS
propertyUpdated( 8 , BLOCK , ANGLE ) : NO_CHANGES
propertyUpdated( 8 , BLOCK , ANGLE ) : NO_CHANGES
propertyUpdated( 8 , BLOCK , EXPRS ) : SUCCESS
objectCreated( 9 , PORT )
propertyUpdated( 9 , PORT , SOURCE_BLOCK ) : SUCCESS
propertyUpdated( 9 , PORT , PORT_KIND ) : SUCCESS
propertyUpdated( 8 , BLOCK , INPUTS ) : SUCCESS
objectCreated( 10 , PORT )
propertyUpdated( 10 , PORT , SOURCE_BLOCK ) : SUCCESS
propertyUpdated( 10 , PORT , PORT_KIND ) : SUCCESS
propertyUpdated( 8 , BLOCK , EVENT_INPUTS ) : SUCCESS
propertyUpdated( 8 , BLOCK , LABEL ) : NO_CHANGES
propertyUpdated( 9 , PORT , IMPLICIT ) : NO_CHANGES
propertyUpdated( 9 , PORT , STYLE ) : NO_CHANGES
propertyUpdated( 9 , PORT , LABEL ) : NO_CHANGES
propertyUpdated( 8 , BLOCK , STYLE ) : NO_CHANGES
propertyUpdated( 8 , BLOCK , SIM_FUNCTION_NAME ) : SUCCESS
propertyUpdated( 8 , BLOCK , SIM_FUNCTION_API ) : SUCCESS
propertyUpdated( 9 , PORT , DATATYPE ) : SUCCESS
propertyUpdated( 9 , PORT , DATATYPE ) : NO_CHANGES
propertyUpdated( 10 , PORT , DATATYPE ) : SUCCESS
propertyUpdated( 8 , BLOCK , STATE ) : NO_CHANGES
propertyUpdated( 8 , BLOCK , DSTATE ) : NO_CHANGES
propertyUpdated( 8 , BLOCK , ODSTATE ) : NO_CHANGES
propertyUpdated( 8 , BLOCK , RPAR ) : SUCCESS
propertyUpdated( 8 , BLOCK , IPAR ) : SUCCESS
propertyUpdated( 8 , BLOCK , OPAR ) : NO_CHANGES
propertyUpdated( 8 , BLOCK , SIM_BLOCKTYPE ) : NO_CHANGES
propertyUpdated( 8 , BLOCK , SIM_DEP_UT ) : SUCCESS
propertyUpdated( 8 , BLOCK , LABEL ) : NO_CHANGES
propertyUpdated( 8 , BLOCK , NZCROSS ) : NO_CHANGES
propertyUpdated( 8 , BLOCK , NMODE ) : NO_CHANGES
propertyUpdated( 8 , BLOCK , UID ) : NO_CHANGES
propertyUpdated( 8 , BLOCK , INTERFACE_FUNCTION ) : SUCCESS
Scope2 = CSCOPE("define");
objectCreated( 11 , BLOCK )
propertyUpdated( 11 , BLOCK , GEOMETRY ) : NO_CHANGES
propertyUpdated( 11 , BLOCK , GEOMETRY ) : SUCCESS
propertyUpdated( 11 , BLOCK , ANGLE ) : NO_CHANGES
propertyUpdated( 11 , BLOCK , ANGLE ) : NO_CHANGES
propertyUpdated( 11 , BLOCK , EXPRS ) : SUCCESS
objectCreated( 12 , PORT )
propertyUpdated( 12 , PORT , SOURCE_BLOCK ) : SUCCESS
propertyUpdated( 12 , PORT , PORT_KIND ) : SUCCESS
propertyUpdated( 11 , BLOCK , INPUTS ) : SUCCESS
objectCreated( 13 , PORT )
propertyUpdated( 13 , PORT , SOURCE_BLOCK ) : SUCCESS
propertyUpdated( 13 , PORT , PORT_KIND ) : SUCCESS
propertyUpdated( 11 , BLOCK , EVENT_INPUTS ) : SUCCESS
propertyUpdated( 11 , BLOCK , LABEL ) : NO_CHANGES
propertyUpdated( 12 , PORT , IMPLICIT ) : NO_CHANGES
propertyUpdated( 12 , PORT , STYLE ) : NO_CHANGES
propertyUpdated( 12 , PORT , LABEL ) : NO_CHANGES
propertyUpdated( 11 , BLOCK , STYLE ) : NO_CHANGES
propertyUpdated( 11 , BLOCK , SIM_FUNCTION_NAME ) : SUCCESS
propertyUpdated( 11 , BLOCK , SIM_FUNCTION_API ) : SUCCESS
propertyUpdated( 12 , PORT , DATATYPE ) : SUCCESS
propertyUpdated( 12 , PORT , DATATYPE ) : NO_CHANGES
propertyUpdated( 13 , PORT , DATATYPE ) : SUCCESS
propertyUpdated( 11 , BLOCK , STATE ) : NO_CHANGES
propertyUpdated( 11 , BLOCK , DSTATE ) : NO_CHANGES
propertyUpdated( 11 , BLOCK , ODSTATE ) : NO_CHANGES
propertyUpdated( 11 , BLOCK , RPAR ) : SUCCESS
propertyUpdated( 11 , BLOCK , IPAR ) : SUCCESS
propertyUpdated( 11 , BLOCK , OPAR ) : NO_CHANGES
propertyUpdated( 11 , BLOCK , SIM_BLOCKTYPE ) : NO_CHANGES
propertyUpdated( 11 , BLOCK , SIM_DEP_UT ) : SUCCESS
propertyUpdated( 11 , BLOCK , LABEL ) : NO_CHANGES
propertyUpdated( 11 , BLOCK , NZCROSS ) : NO_CHANGES
propertyUpdated( 11 , BLOCK , NMODE ) : NO_CHANGES
propertyUpdated( 11 , BLOCK , UID ) : NO_CHANGES
propertyUpdated( 11 , BLOCK , INTERFACE_FUNCTION ) : SUCCESS
lnk1   = scicos_link();          // Data link
objectCreated( 14 , LINK )
propertyUpdated( 14 , LINK , CONTROL_POINTS ) : NO_CHANGES
propertyUpdated( 14 , LINK , CONTROL_POINTS ) : NO_CHANGES
propertyUpdated( 14 , LINK , LABEL ) : NO_CHANGES
propertyUpdated( 14 , LINK , THICK ) : NO_CHANGES
propertyUpdated( 14 , LINK , COLOR ) : NO_CHANGES
propertyUpdated( 14 , LINK , KIND ) : NO_CHANGES
lnk2   = scicos_link(ct=[1,-1]); // Activation link
objectCreated( 15 , LINK )
propertyUpdated( 15 , LINK , CONTROL_POINTS ) : NO_CHANGES
propertyUpdated( 15 , LINK , CONTROL_POINTS ) : NO_CHANGES
propertyUpdated( 15 , LINK , LABEL ) : NO_CHANGES
propertyUpdated( 15 , LINK , THICK ) : NO_CHANGES
propertyUpdated( 15 , LINK , COLOR ) : NO_CHANGES
propertyUpdated( 15 , LINK , KIND ) : SUCCESS
scs_m = scicos_diagram( objs=list(Sum,Scope1,Scope2,lnk1,lnk2) )
objectCreated( 16 , DIAGRAM )
propertyUpdated( 16 , DIAGRAM , TITLE ) : NO_CHANGES
propertyUpdated( 16 , DIAGRAM , PATH ) : NO_CHANGES
propertyUpdated( 16 , DIAGRAM , PROPERTIES ) : NO_CHANGES
propertyUpdated( 16 , DIAGRAM , PROPERTIES ) : NO_CHANGES
propertyUpdated( 16 , DIAGRAM , CONTEXT ) : NO_CHANGES
propertyUpdated( 4 , BLOCK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 8 , BLOCK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 11 , BLOCK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 14 , LINK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 15 , LINK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 16 , DIAGRAM , CHILDREN ) : SUCCESS
propertyUpdated( 14 , LINK , SOURCE_PORT ) : NO_CHANGES
propertyUpdated( 14 , LINK , DESTINATION_PORT ) : NO_CHANGES
propertyUpdated( 15 , LINK , SOURCE_PORT ) : NO_CHANGES
propertyUpdated( 15 , LINK , DESTINATION_PORT ) : NO_CHANGES
propertyUpdated( 16 , DIAGRAM , VERSION_NUMBER ) : NO_CHANGES
scs_m  = 
scs_m.objs
 ans  =
       ans(1)
       ans(2)
       ans(3)
       ans(4)
       ans(5)
// Link output port #1 of block #1 with input port #1 of block #2 thanks to lnk1
scs_m.objs(4).from = [1 1 0]; // Link block #1
propertyUpdated( 7 , PORT , CONNECTED_SIGNALS ) : SUCCESS
propertyUpdated( 14 , LINK , SOURCE_PORT ) : SUCCESS
propertyUpdated( 4 , BLOCK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 8 , BLOCK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 11 , BLOCK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 14 , LINK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 15 , LINK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 4 , BLOCK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 8 , BLOCK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 11 , BLOCK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 14 , LINK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 15 , LINK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 16 , DIAGRAM , CHILDREN ) : NO_CHANGES
propertyUpdated( 7 , PORT , CONNECTED_SIGNALS ) : SUCCESS
propertyUpdated( 7 , PORT , CONNECTED_SIGNALS ) : SUCCESS
propertyUpdated( 14 , LINK , SOURCE_PORT ) : NO_CHANGES
propertyUpdated( 14 , LINK , DESTINATION_PORT ) : NO_CHANGES
propertyUpdated( 15 , LINK , SOURCE_PORT ) : NO_CHANGES
propertyUpdated( 15 , LINK , DESTINATION_PORT ) : NO_CHANGES
assert_checkequal(scs_m.objs(1).graphics.pout, 4);   // Check that block #1 is connected to lnk1
assert_checkequal(scs_m.objs(1).model.out,    -1);   // "
scs_m.objs(4).to = [2 1 1];   // Link block #2
propertyUpdated( 9 , PORT , CONNECTED_SIGNALS ) : SUCCESS
propertyUpdated( 14 , LINK , DESTINATION_PORT ) : SUCCESS
propertyUpdated( 4 , BLOCK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 8 , BLOCK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 11 , BLOCK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 14 , LINK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 15 , LINK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 4 , BLOCK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 8 , BLOCK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 11 , BLOCK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 14 , LINK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 15 , LINK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 16 , DIAGRAM , CHILDREN ) : NO_CHANGES
propertyUpdated( 7 , PORT , CONNECTED_SIGNALS ) : SUCCESS
propertyUpdated( 7 , PORT , CONNECTED_SIGNALS ) : SUCCESS
propertyUpdated( 14 , LINK , SOURCE_PORT ) : NO_CHANGES
propertyUpdated( 9 , PORT , CONNECTED_SIGNALS ) : SUCCESS
propertyUpdated( 9 , PORT , CONNECTED_SIGNALS ) : SUCCESS
propertyUpdated( 14 , LINK , DESTINATION_PORT ) : NO_CHANGES
propertyUpdated( 15 , LINK , SOURCE_PORT ) : NO_CHANGES
propertyUpdated( 15 , LINK , DESTINATION_PORT ) : NO_CHANGES
assert_checkequal(scs_m.objs(4).from, [1 1 0]);
assert_checkequal(scs_m.objs(4).to,   [2 1 1]);
assert_checkequal(scs_m.objs(2).graphics.pin, 4);    // Check that block #2 is connected to lnk1
assert_checkequal(scs_m.objs(2).model.in,    -1);    // "
// Change the end of the link to input port #2 of block #2
scs_m.objs(4).to = [2 2 1];
propertyUpdated( 9 , PORT , CONNECTED_SIGNALS ) : SUCCESS
objectCreated( 17 , PORT )
propertyUpdated( 17 , PORT , IMPLICIT ) : NO_CHANGES
propertyUpdated( 17 , PORT , PORT_KIND ) : SUCCESS
propertyUpdated( 17 , PORT , SOURCE_BLOCK ) : SUCCESS
propertyUpdated( 17 , PORT , CONNECTED_SIGNALS ) : NO_CHANGES
propertyUpdated( 17 , PORT , DATATYPE ) : SUCCESS
propertyUpdated( 8 , BLOCK , INPUTS ) : SUCCESS
propertyUpdated( 17 , PORT , CONNECTED_SIGNALS ) : SUCCESS
propertyUpdated( 14 , LINK , DESTINATION_PORT ) : SUCCESS
propertyUpdated( 4 , BLOCK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 8 , BLOCK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 11 , BLOCK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 14 , LINK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 15 , LINK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 4 , BLOCK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 8 , BLOCK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 11 , BLOCK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 14 , LINK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 15 , LINK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 16 , DIAGRAM , CHILDREN ) : NO_CHANGES
propertyUpdated( 7 , PORT , CONNECTED_SIGNALS ) : SUCCESS
propertyUpdated( 7 , PORT , CONNECTED_SIGNALS ) : SUCCESS
propertyUpdated( 14 , LINK , SOURCE_PORT ) : NO_CHANGES
propertyUpdated( 17 , PORT , CONNECTED_SIGNALS ) : SUCCESS
propertyUpdated( 17 , PORT , CONNECTED_SIGNALS ) : SUCCESS
propertyUpdated( 14 , LINK , DESTINATION_PORT ) : NO_CHANGES
propertyUpdated( 15 , LINK , SOURCE_PORT ) : NO_CHANGES
propertyUpdated( 15 , LINK , DESTINATION_PORT ) : NO_CHANGES
assert_checkequal(scs_m.objs(4).from, [1 1 0]);
assert_checkequal(scs_m.objs(4).to,   [2 2 1]);
assert_checkequal(scs_m.objs(2).graphics.pin, [0; 4]);   // Check that block #2 is connected to lnk1
assert_checkequal(scs_m.objs(2).model.in,     [-1; -1]); // "
// Disconnect the source
scs_m.objs(4).from = [0 0 0];
propertyUpdated( 7 , PORT , CONNECTED_SIGNALS ) : SUCCESS
propertyUpdated( 14 , LINK , SOURCE_PORT ) : SUCCESS
propertyUpdated( 4 , BLOCK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 8 , BLOCK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 11 , BLOCK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 14 , LINK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 15 , LINK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 4 , BLOCK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 8 , BLOCK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 11 , BLOCK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 14 , LINK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 15 , LINK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 16 , DIAGRAM , CHILDREN ) : NO_CHANGES
propertyUpdated( 14 , LINK , SOURCE_PORT ) : NO_CHANGES
propertyUpdated( 17 , PORT , CONNECTED_SIGNALS ) : SUCCESS
propertyUpdated( 17 , PORT , CONNECTED_SIGNALS ) : SUCCESS
propertyUpdated( 14 , LINK , DESTINATION_PORT ) : NO_CHANGES
propertyUpdated( 15 , LINK , SOURCE_PORT ) : NO_CHANGES
propertyUpdated( 15 , LINK , DESTINATION_PORT ) : NO_CHANGES
assert_checkequal(scs_m.objs(4).from, [0 0 0]);
assert_checkequal(scs_m.objs(4).to,   [2 2 1]);
assert_checkequal(scs_m.objs(1).graphics.pout, 0);     // Check that block #1 is not connected
assert_checkequal(scs_m.objs(2).graphics.pin, [0; 4]); // But block #2 is still connected to the link
// Disconnect the destination
scs_m.objs(4).to = [0 0 0];
propertyUpdated( 17 , PORT , CONNECTED_SIGNALS ) : SUCCESS
propertyUpdated( 14 , LINK , DESTINATION_PORT ) : SUCCESS
propertyUpdated( 4 , BLOCK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 8 , BLOCK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 11 , BLOCK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 14 , LINK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 15 , LINK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 4 , BLOCK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 8 , BLOCK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 11 , BLOCK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 14 , LINK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 15 , LINK , PARENT_DIAGRAM ) : SUCCESS
propertyUpdated( 16 , DIAGRAM , CHILDREN ) : NO_CHANGES
propertyUpdated( 14 , LINK , SOURCE_PORT ) : NO_CHANGES
propertyUpdated( 14 , LINK , DESTINATION_PORT ) : NO_CHANGES
propertyUpdated( 15 , LINK , SOURCE_PORT ) : NO_CHANGES
propertyUpdated( 15 , LINK , DESTINATION_PORT ) : NO_CHANGES
assert_checkequal(scs_m.objs(2).graphics.pin, [0 0]);  // Check that block #2 is not connected
assert_checkequal: Incompatible input arguments #1 and #2: Same sizes expected.
assert_checkequal(scs_m.objs(2).graphics.pin, [0, 0])
at line    74 of exec file called by :
