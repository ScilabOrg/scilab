// =============================================================================
// Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
// Copyright (C) 2013 - Scilab Enterprises - Paul Bignier
//
//  This file is distributed under the same license as the Scilab package.
// =============================================================================
// <-- ENGLISH IMPOSED -->
// <-- XCOS TEST -->
// Import diagram
assert_checktrue(importXcosDiagram("SCI/modules/xcos/tests/unit_tests/DDaskr_Platform_test.zcos"));
// Redefining messagebox() to avoid popup
prot = funcprot();
funcprot(0);
function messagebox(msg, msg_title)
 disp(msg);
endfunction
funcprot(prot);
Info = scicos_simulate(scs_m, list(), 'nw');
--------------------------------------------\
 Main Modelica : TMPDIR/DDaskr_Platform_test_im.mo

 Flat Modelica : TMPDIR/DDaskr_Platform_test_imf.mo
 Simulation C code :TMPDIR/DDaskr_Platform_test_im.c
 
!Modelica blocks are reduced to a block with:             !
!                                                         !
!Number of differential states: 4                         !
!                                                         !
!Number of algebraic states: 0                            !
!                                                         !
!Number of discrete time states  : 2                      !
!                                                         !
!Number of zero-crossing surfaces: 1                      !
!                                                         !
!Number of modes  : 0                                     !
!                                                         !
!Number of inputs : 0                                     !
!                                                         !
!Number of outputs: 3                                     !
!                                                         !
!Input/output dependency:[T]                              !
!                                                         !
!Analytical Jacobian: enabled  (%Jacobian=%t)             !
!                                                         !
!Parameter embedding mode: enabled (%Modelica_ParEmb=%t)  !
!                                                         !
!                                                         !
!                                                         !
!Generated files path: TMPDIR/          !
!                                                         !
!                                                         !
   Generate a loader file
   Generate a Makefile
   ilib_gen_Make: Copy compilation files (Makefile*, libtool...) to TMPDIR
   ilib_gen_Make: Copy DDaskr_Platform_test_im.c to TMPDIR
   ilib_gen_Make: configure : Generate Makefile.
   ilib_gen_Make: Modification of the Makefile in TMPDIR.
   Running the Makefile
   Generate a cleaner file
Shared archive loaded.
Link done.
// looking for the CLOCK_f/EVTDLY_f to update period
for path_1=1:length(scs_m.objs)
    if typeof(scs_m.objs(path_1))=="Block" & scs_m.objs(path_1).gui=="CLOCK_c" then
        CLOCK_f_scs_m = scs_m.objs(path_1).model.rpar;
        break;
    end
end
for path_2=1:length(CLOCK_f_scs_m)
    if typeof(CLOCK_f_scs_m.objs(path_2))=="Block" & CLOCK_f_scs_m.objs(path_2).gui=="EVTDLY_c" then
        EVTDLY_f_blk = CLOCK_f_scs_m.objs(path_2);
        break;
    end
end
for i=1:3  // 'max step size' = 10^-i, precision
    // Start by updating the clock block period (sampling)
    scs_m.objs(path_1).model.rpar.objs(path_2).graphics.exprs = [string(5*(10^-i));"0"];
    // Modify solver + run DDaskr + save results
    scs_m.props.tol(6) = 101;     // Solver
    scicos_simulate(scs_m, Info, 'nw'); // DDaskr
    ddaskrval = res.values;       // Results
    time = res.time;              // Time
    // Modify solver + run IDA + save results
    scs_m.props.tol(6) = 100;     // Solver
    scicos_simulate(scs_m, Info, 'nw'); // IDA
    idaval = res.values;          // Results
    // Compare results
    compa = abs(ddaskrval-idaval);
    // Extract mean, standard deviation, maximum
    mea = mean(compa);
    [maxi, indexMaxi] = max(compa);
    stdeviation = st_deviation(compa);
    // Verifying closeness of the results
    assert_checktrue(maxi <= 5*10^-(i+3));
    assert_checktrue(mea <= 5*10^-(i+3));
    assert_checktrue(stdeviation <= 5*10^-(i+3));
end
Warning : redefining function: dst                     . Use funcprot(0) to avoid this message

Warning : redefining function: dst                     . Use funcprot(0) to avoid this message

Warning : redefining function: dst                     . Use funcprot(0) to avoid this message

Warning : redefining function: dst                     . Use funcprot(0) to avoid this message

Warning : redefining function: dst                     . Use funcprot(0) to avoid this message

Warning : redefining function: dst                     . Use funcprot(0) to avoid this message

