// =============================================================================
// Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
// Copyright (C) 2015 - Scilab Enterprises - Paul Bignier
// Copyright (C) ????-2008 - INRIA
//
//  This file is distributed under the same license as the Scilab package.
// =============================================================================
// <-- CLI SHELL MODE -->
a = list("cos", [1.1 2]);
b = var2vec(a);
assert_checkequal(type(b), 1);
assert_checkequal(size(b), [15 1]);
// Double
a = [];
assert_checkequal(var2vec(a), [12; 2; 0; 0; 0]);
Mat = [10 11 12 13; 14 15 16 17];
assert_checkequal(var2vec(Mat), [12; 2; 2; 4; 0; 10; 14; 11; 15; 12; 16; 13; 17]);
HyperMat = hypermat([2, 2, 2], 1:8);
assert_checkequal(var2vec(HyperMat), [12; 3; 2; 2; 2; 0; (1:8)']);
cplx = HyperMat+HyperMat*%i;
assert_checkequal(var2vec(cplx), [12; 3; 2; 2; 2; 1; (1:8)'; (1:8)']);
// Integers
// int8
Mat8 = int8(Mat);
assert_checkequal(vec2var(var2vec(Mat8)), Mat8);
HyperMat8 = int8(HyperMat);
assert_checkequal(vec2var(var2vec(HyperMat8)), HyperMat8);
// uint8
uMat8 = uint8(Mat);
assert_checkequal(vec2var(var2vec(uMat8)), uMat8);
uHyperMat8 = uint8(HyperMat);
assert_checkequal(vec2var(var2vec(uHyperMat8)), uHyperMat8);
// int16
Mat16 = int16(Mat);
assert_checkequal(vec2var(var2vec(Mat16)), Mat16);
HyperMat16 = int16(HyperMat);
assert_checkequal(vec2var(var2vec(HyperMat16)), HyperMat16);
// uint16
uMat16 = uint16(Mat);
assert_checkequal(vec2var(var2vec(uMat16)), uMat16);
uHyperMat16 = uint16(HyperMat);
assert_checkequal(vec2var(var2vec(uHyperMat16)), uHyperMat16);
// int32
Mat32 = int32(Mat);
assert_checkequal(vec2var(var2vec(Mat32)), Mat32);
HyperMat32 = int32(HyperMat);
assert_checkequal(vec2var(var2vec(HyperMat32)), HyperMat32);
// uint32
uMat32 = uint32(Mat);
assert_checkequal(vec2var(var2vec(uMat32)), uMat32);
uHyperMat32 = uint32(HyperMat);
assert_checkequal(vec2var(var2vec(uHyperMat32)), uHyperMat32);
// Bool
bMat = (Mat>15);
assert_checkequal(vec2var(var2vec(bMat)), bMat);
bHyperMat = (HyperMat>4);
assert_checkequal(vec2var(var2vec(bHyperMat)), bHyperMat);
// String
sMat = string(Mat);
assert_checkequal(vec2var(var2vec(sMat)), sMat);
sHyperMat = string(HyperMat);
assert_checkequal(vec2var(var2vec(sHyperMat)), sHyperMat);
// List
// Double
l = list();
assert_checkequal(vec2var(var2vec(l)), l);
lEmpties = list([], "", [], "");
assert_checkequal(vec2var(var2vec(lEmpties)), lEmpties);
lMat = list(Mat);
assert_checkequal(vec2var(var2vec(lMat)), lMat);
lHyperMat = list(HyperMat);
assert_checkequal(vec2var(var2vec(lHyperMat)), lHyperMat);
// Integer
lMat8 = list(int8(Mat));
assert_checkequal(vec2var(var2vec(lMat8)), lMat8);
lHyperMat8 = list(int8(HyperMat));
assert_checkequal(vec2var(var2vec(lHyperMat8)), lHyperMat8);
// Bool
lbMat = list(Mat>15);
assert_checkequal(vec2var(var2vec(lbMat)), lbMat);
lbHyperMat = list(HyperMat>4);
assert_checkequal(vec2var(var2vec(lbHyperMat)), lbHyperMat);
// String
lsMat = list(string(Mat));
assert_checkequal(vec2var(var2vec(lsMat)), lsMat);
lsHyperMat = list(string(HyperMat));
assert_checkequal(vec2var(var2vec(lsHyperMat)), lsHyperMat);
// TList
tl = tlist("");
assert_checkequal(vec2var(var2vec(tl)), tl);
tlEmpties = tlist(["Type" "f1" "f2" "f3" "f4" "f5", "f6"]);
assert_checkequal(vec2var(var2vec(tlEmpties)), tlEmpties);
tlMixed = tlist(["Type" "f1" "f2" "f3" "f4" "f5", "f6"], [], Mat, HyperMat, int32(Mat), string(Mat), Mat>15);
assert_checkequal(vec2var(var2vec(tlMixed)), tlMixed);
// MList
ml = mlist("");
assert_checkequal(vec2var(var2vec(ml)), ml);
mlEmpties = mlist(["Type" "f1" "f2" "f3" "f4" "f5", "f6"]);
assert_checkequal(vec2var(var2vec(mlEmpties)), mlEmpties);
mlMixed = mlist(["Type" "f1" "f2" "f3" "f4" "f5", "f6"], [], Mat, HyperMat, int32(Mat), string(Mat), Mat>15);
assert_checkequal(vec2var(var2vec(mlMixed)), mlMixed);
// Struct
st = struct();
assert_checkequal(vec2var(var2vec(st)), st);
stFull = struct("f1", [], "f2", Mat, "f3", HyperMat, "f4", int32(Mat), "f5", string(Mat), "f6", Mat>15);
assert_checkequal(vec2var(var2vec(stFull)), stFull);
