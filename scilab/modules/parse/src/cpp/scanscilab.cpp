
#line 3 "src/cpp/scanscilab.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 134
#define YY_END_OF_BUFFER 135
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[903] =
    {   0,
    16405,  135,   79,  134,   75,   79,  134,   76,  134,   76,
       79,  134,   73,   79,  134,   70,   79,  134,   24,   79,
      134,   70,   79,  134,   27,   79,  134,   74,   79,  134,
       31,   79,  134,   32,   79,  134,   45,   79,  134,   44,
       79,  134,   34,   79,  134,   43,   79,  134,   64,   79,
      134,   46,   79,  134,   66,   79,  134,   35,   79,  134,
       33,   79,  134,   57,   79,  134,   61,   79,  134,   58,
       79,  134,   70,   79,  134,   23,   79,  134,   62,   79,
      134,   47,   79,  134,   63,   79,  134,   48,   79,  134,
       70,   79,  134,   70,   79,  134,   70,   79,  134,   70,

       79,  134,   70,   79,  134,   70,   79,  134,   70,   79,
      134,   70,   79,  134,   70,   79,  134,   70,   79,  134,
       70,   79,  134,   70,   79,  134,   36,   79,  134,   29,
       79,  134,   37,   79,  134,   23,   79,  134,   79,  134,
       79,  134,   79,  134,   79,  134,   79,  134,   79,  134,
       79,  134,   79,  134,   75,   79,  134,16405,   70,   79,
      134,   70,   79,  134,   34,   79,  134,   33,   79,  134,
       70,   79,  134,   70,   79,  134,   70,   79,  134,   70,
       79,  134,   70,   79,  134,   70,   79,  134,   70,   79,
      134,   70,   79,  134,   70,   79,  134,   70,   79,  134,

       70,   79,  134,   70,   79,  134,   70,   79,  134,   79,
      134,   79,  134,   79,  134,   79,  134,   79,  134,   79,
      134,   79,  134,   79,  134,  119,  134,  118,  134,  118,
      119,  134,  117,  119,  134,  116,  119,  134,  128,  134,
      126,  134,  126,  128,  134,  124,  128,  134,  125,  128,
      134,  128,  134,  111,  134,  110,  134,  110,  111,  134,
      111,  134,  111,  134,  107,  134,  106,  134,  106,  107,
      134,  105,  134,  104,  105,  134,  101,  134,  101,  105,
      134,  105,  134,   90,  134,   75,   90,  134,   76,   90,
      134,   73,   90,  134,   70,   90,  134,   24,   90,  134,

       70,   90,  134,   27,   90,  134,   74,   90,  134,   31,
       90,  134,   32,   90,  134,   45,   90,  134,   83,   90,
      134,   34,   90,  134,   84,   90,  134,   64,   90,  134,
       46,   90,  134,   66,   90,  134,   35,   80,   90,  134,
       33,   90,  134,   57,   90,  134,   61,   90,  134,   58,
       90,  134,   23,   90,  134,   62,   90,  134,   47,   90,
      134,   81,   90,  134,   48,   90,  134,   36,   90,  134,
       29,   90,  134,   82,   90,  134,   23,   90,  134,   90,
      134,   90,  134,   90,  134,   90,  134,   90,  134,   90,
      134,   90,  134,   90,  134,   75,   90,  134,   34,   90,

      134,   33,   90,  134,  100,  134,   99,  100,  134,  134,
       98,  100,  134,   93,  100,  134,   92,  100,  134,  100,
      134,   94,  100,  134,  100,  134,  100,  134,  100,  134,
      100,  134,  100,  134,  100,  134,  100,  134,  100,  134,
      133,  134,  129,  134,  132,  134,  132,  134,   73,  134,
       74,  134,  131,  134,  130,  134,   22,  134,   22,  134,
       22,  134,   22,  134,   22,  134,   22,  134,   22,  134,
       22,  134,   22,  134,   22,  134,   22,  134,   22,  134,
       22,  134,   22,  134,  134,  134,  134,  134,  134,  134,
      134,  134,   75,   76,   70,   70,   26,   70,   25,   70,

       28,   48,   38,   39,   65,   40,   69,   41,   42,   71,
       72,   68,   66,   59,   56,   55,   60,   70,   70,   16,
       70,   70,   70,   70,   70,   70,    1,   70,   70,   70,
       70,   70,   70,   70,   70,   30,   70,   75,16405,   77,
       78,   77,   78,   70,   70,   26,   70,   25,   70,   78,
       78,   70,   70,   16,   70,   70,   70,   70,   70,   70,
        1,   70,   70,   70,   70,   70,   70,   70,   70,   70,
      118,  112,  113,  114,  115,  126,  120,  121,  122,  123,
      127,  110,  108,  109,  106,  104,  101,  102,  103,   75,
       80,   80,   75,   99,   98,   96,   95,   94,   98,  133,

      129,  132,   22,   22,   22,   22,   16,   22,   22,   22,
       22,   22,   22,    1,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   70,   52,   49,   65,   50,   51,   53,
       68,   67,   54,   70,   70,   70,   70,    5,   70,   14,
       70,   70,   70,   70,   70,   70,   70,   70,   18,   70,
       70, 8213, 8213,   70,   70,   70,   70,   70,    5,   70,
       14,   70,   70,   70,   70,   70,   70,   70,   70,   18,
       70,   70,  127,   89,   85,   91,   91,   95,   97,   22,
       22,   22,   22,   22,    5,   22,   14,   22,   22,   22,
       22,   22,   22,   22,   22,   18,   22,   22,   70,   70,

        9,   70,   70,    3,   70,   70,   70,   70,   70,   70,
       70,   70,    2,   70,   70,   70,   70,   70,    9,   70,
       70,    3,   70,   70,   70,   70,   70,   70,   70,   70,
        2,   70,   70,   70,   89,   88,   86,   98,   22,   22,
        9,   22,   22,    3,   22,   22,   22,   22,   22,   22,
       22,   22,    2,   22,   22,   22,   70,   70,   17,   70,
       19,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       15,   70,   70,   70,   17,   70,   19,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   15,   70,   86,   87,
       98,   22,   22,   17,   22,   19,   22,   22,   22,   22,

       22,   22,   22,   22,   22,   15,   22,   70,    4,   70,
       70,   70,   13,   70,   70,   20,   70,    6,   70,    7,
       70,   70,    4,   70,   70,   70,   13,   70,   70,   20,
       70,    6,   70,    7,   70,   89,   22,    4,   22,   22,
       22,   13,   22,   22,   20,   22,    6,   22,    7,   22,
       70,   70,   70,   70,   70,   70,   70,   70,   89,   22,
       22,   22,   22,   70,   70,   10,   70,   70,   70,   70,
       10,   70,   70,   22,   22,   10,   22,   22,   12,   70,
       70,    8,   70,   12,   70,   70,    8,   70,   12,   22,
       22,    8,   22,   70,   70,   22,   11,   70,   11,   70,

       11,   22
    } ;

static yyconst flex_int16_t yy_accept[764] =
    {   0,
        1,    1,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    3,    5,    8,   10,   13,   16,   19,   22,   25,
       28,   31,   34,   37,   40,   43,   46,   49,   52,   55,
       58,   61,   64,   67,   70,   73,   76,   79,   82,   85,
       88,   91,   94,   97,  100,  103,  106,  109,  112,  115,
      118,  121,  124,  127,  130,  133,  136,  139,  141,  143,
      145,  147,  149,  151,  153,  155,  159,  162,  165,  168,
      171,  174,  177,  180,  183,  186,  189,  192,  195,  198,
      201,  204,  207,  210,  212,  214,  216,  218,  220,  222,

      224,  226,  228,  230,  233,  236,  239,  241,  243,  246,
      249,  252,  254,  256,  258,  261,  263,  265,  267,  269,
      272,  274,  277,  279,  282,  284,  286,  289,  292,  295,
      298,  301,  304,  307,  310,  313,  316,  319,  322,  325,
      328,  331,  334,  337,  341,  344,  347,  350,  353,  356,
      359,  362,  365,  368,  371,  374,  377,  380,  382,  384,
      386,  388,  390,  392,  394,  396,  399,  402,  405,  407,
      410,  411,  414,  417,  420,  422,  425,  427,  429,  431,
      433,  435,  437,  439,  441,  443,  445,  447,  449,  451,
      453,  455,  457,  459,  461,  463,  465,  467,  469,  471,

      473,  475,  477,  479,  481,  483,  485,  486,  487,  488,
      489,  490,  491,  492,  493,  494,  495,  496,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  499,  501,  502,
      503,  503,  504,  505,  506,  507,  508,  509,  510,  511,
      511,  512,  513,  514,  514,  515,  516,  517,  518,  518,
      519,  520,  522,  523,  524,  525,  526,  527,  529,  530,
      531,  532,  533,  534,  535,  536,  537,  538,  538,  538,
      538,  538,  538,  538,  538,  540,  542,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  545,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  548,

      550,  551,  552,  553,  554,  556,  557,  558,  559,  560,
      561,  563,  564,  565,  566,  567,  568,  569,  570,  571,
      571,  571,  571,  571,  571,  571,  571,  572,  573,  574,
      575,  576,  577,  578,  579,  580,  581,  582,  583,  584,
      585,  586,  587,  588,  589,  590,  591,  591,  592,  592,
      593,  594,  595,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  597,  598,  599,  599,  600,  600,  600,  600,
      600,  600,  600,  600,  601,  602,  603,  604,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  606,  607,  609,
      610,  611,  612,  613,  614,  616,  617,  618,  619,  620,

      621,  622,  623,  624,  624,  624,  624,  624,  624,  624,
      624,  625,  625,  625,  625,  625,  625,  625,  625,  626,
      627,  628,  629,  630,  631,  632,  632,  633,  634,  635,
      636,  637,  638,  640,  642,  643,  644,  645,  646,  647,
      648,  649,  651,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  653,  654,  655,  655,  655,  655,  655,
      655,  655,  655,  656,  657,  658,  659,  661,  663,  664,
      665,  666,  667,  668,  669,  670,  672,  673,  673,  673,
      673,  674,  675,  675,  676,  676,  676,  676,  676,  676,

      676,  676,  676,  676,  677,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  679,  679,  680,  680,  680,  680,
      681,  681,  681,  681,  681,  681,  681,  681,  682,  683,
      684,  685,  687,  689,  690,  691,  692,  693,  694,  695,
      696,  698,  699,  699,  699,  699,  700,  700,  700,  700,
      701,  703,  704,  706,  707,  708,  709,  710,  711,  712,
      713,  715,  716,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  718,  718,  718,  718,  719,  721,
      722,  724,  725,  726,  727,  728,  729,  730,  731,  733,
      734,  735,  736,  736,  736,  736,  736,  736,  736,  736,

      736,  737,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  739,  740,  740,  740,  740,  741,
      743,  744,  746,  747,  748,  749,  750,  751,  752,  753,
      755,  756,  757,  758,  759,  761,  763,  764,  765,  766,
      767,  768,  769,  770,  771,  773,  773,  773,  773,  773,
      774,  775,  777,  779,  780,  781,  782,  783,  784,  785,
      786,  787,  789,  789,  789,  789,  789,  789,  789,  789,
      790,  790,  791,  791,  791,  791,  792,  793,  794,  796,
      798,  799,  800,  801,  802,  803,  804,  805,  806,  808,
      809,  811,  812,  813,  815,  816,  818,  820,  822,  822,

      823,  825,  826,  827,  829,  830,  832,  834,  836,  836,
      836,  836,  837,  838,  840,  841,  842,  844,  845,  847,
      849,  851,  852,  853,  854,  855,  856,  857,  858,  859,
      860,  861,  862,  863,  864,  865,  866,  868,  869,  870,
      871,  873,  874,  875,  876,  878,  879,  881,  882,  884,
      886,  887,  889,  891,  892,  894,  895,  896,  897,  899,
      901,  903,  903
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,   25,   26,   25,   25,   25,   27,   27,   28,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   29,   25,   25,   25,   25,   25,   25,
       30,   31,   32,   33,   25,    1,   34,   35,   36,   37,

       38,   39,   25,   40,   41,   25,   42,   43,   25,   44,
       45,   25,   25,   46,   47,   48,   49,   25,   50,   25,
       51,   25,   52,   53,   54,   55,    1,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,    1,    1,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   60,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   62,   63,   63,   64,
       65,   65,   65,   66,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[67] =
    {   0,
        1,    2,    3,    3,    4,    5,    1,    6,    1,    4,
        7,    1,    1,    1,    3,    1,    8,    1,    9,    1,
        3,    1,    7,    1,    5,    1,    5,    5,    5,    1,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    1,    1,    1,    1,    1,    1,    1,    5,    5,
        5,    5,    5,    5,    5,    5
    } ;

static yyconst flex_int16_t yy_base[782] =
    {   0,
        0,   66,  130,  133,  141,  144,  149,  152,  138,  156,
      169,  172,  190,  148,  256,    0,  321,  325,  346,    0,
     1649, 2741, 1640, 2741, 1637, 2741,  118, 2741,  385, 1629,
     2741, 2741, 2741,  151, 2741, 2741, 2741,  408,  320,  415,
     2741, 2741,  162, 1610, 1609,  426, 1597, 2741, 1601, 2741,
     2741,  429,  432,  434,  455,  457,  472,  479,  486,  493,
      500,  507,  523, 2741, 1562, 2741, 1590,  287, 1553,  359,
      132,  372,  362,  379, 1552,  570,  635,  700,  489,  554,
      531,  538,  553,  560,  567,  574,  599,  613,  615,  617,
      620,  638,  643,  431, 1546,  486,  366,  560,  412,  568,

     1541, 2741, 2741, 1589,  329,  433, 2741, 2741, 1587,  454,
      462, 1571, 2741, 2741, 1582, 1565, 1567, 2741, 2741, 1566,
     2741, 1565, 2741, 1562,  463, 2741,  510, 1561, 2741,  664,
     2741,    0, 1553, 2741, 2741, 2741,  506, 2741, 2741, 2741,
      700,  580,  687, 1556, 2741,  493, 1534, 1530, 1529, 2741,
     1519, 2741, 2741, 2741, 1429, 2741, 1458,  623, 1421,  631,
      508,  651,  563,  664, 1414,  753,  732,  768, 2741, 1467,
     2741,  716, 2741, 2741, 1448,  713,  685, 1408,  688,  594,
      728,  618,  734, 1401,    0, 1453, 2741, 1449, 2741, 2741,
     2741, 2741,  748,  734, 1400, 1398, 1383,  672,  488, 1382,

     1378, 1363, 1365,  440,  554, 1359,  745, 1339,  748,  670,
      759,  680,  762, 1330, 1361, 2741,  793,  795,  769, 1242,
      772,  779,  781,  788,  791, 1239,  822,  824, 2741, 2741,
        0, 2741,  532, 1273, 1272,  837, 1270, 2741, 2741,    0,
     2741,  839,  852,  564, 2741, 2741, 2741, 2741,    0,  853,
      839,  855,  867,  870,  882,  888,  894,  896,  909,  911,
      917,  923,  938,  940,  944, 2741,  961,  897,  924,  937,
      940,  945,  948,  954, 1011, 2741, 1282,  959, 1025,  977,
     1226,  980,  798,  985,  802,  991, 1226, 1277, 1016, 1030,
      994, 1176, 1004,  848, 1009,  855, 1024, 1173, 1055, 1057,

     2741, 1211, 1059, 1061, 1063, 1084, 1087, 1090, 1105, 1111,
     1113, 1117, 1134, 1138, 1146, 1140, 1161, 1163, 1167, 1064,
     1114, 1141, 1160, 1163, 1166, 1169, 2741, 2741, 2741, 2741,
     2741, 2741, 2741, 2741, 2741, 2741, 1196, 2741, 2741, 2741,
     2741, 1208, 2741, 2741, 2741,  927, 1211, 1203, 1229, 1201,
     1233, 1199, 1179, 1194, 1135, 1199,  863, 1202,  917, 1205,
     1124, 1259, 1261, 1264,  593,    0, 1208, 1211, 1236, 1247,
     1250, 1253, 1256,    0, 1174, 2741,    0, 1115, 1259, 1102,
     1262,  951, 1265,  959, 1268, 1102, 1113,  983,    0, 1100,
     1106, 1091, 1086, 1088,    0, 1077, 1066, 1067, 1065, 1057,

     1042, 1027,    0, 1271, 1274, 1277, 1280, 1283, 1286, 1289,
     1320, 1294, 1297, 1300, 1304, 1309, 1313, 1316, 2741, 2741,
     2741, 2741, 2741, 2741, 1356, 1044, 1020, 2741, 1348, 1350,
     1356, 1352, 1373, 1377, 1379, 1385, 1381, 1402, 1406, 1408,
     1414, 1420, 1432, 1382, 1407, 1416, 1424, 1420,  941, 1435,
      997, 1438,  999, 1441,  931, 1444, 1447, 1450, 1453, 1456,
     1459, 1462, 2741,  982, 1493, 1467, 1470, 1473, 1477, 1482,
     1486, 1489, 1520, 1522, 1527, 1543, 1545, 1548, 1550, 1566,
     1571, 1573, 1578, 1595, 1600, 1602, 1608, 1596, 1601, 1604,
     2741, 1604,  959, 1608, 1615,  912, 1618, 1071, 1621, 1097,

     1624,  907, 1681, 2741,  955, 1684, 1633, 1636, 1639, 1642,
     1645, 1648, 1651, 1691,  915,  907, 1655, 1658, 1663,  864,
     1666, 1669, 1674, 1677, 1680, 1683, 1686,  868,  862,  861,
      855,  849,    0,  849,  843,  835,  816,  824,  809,  798,
        0,  797, 1689, 1692, 1695, 1726, 1700, 1703, 1710, 1741,
     1743, 1747, 1749, 1764, 1770, 1772, 1776, 1788, 1801, 1803,
     1815, 1817, 1819, 1750, 1803, 1812, 1815, 1818, 1821, 1824,
     1827, 1830, 1833, 1864, 1838, 1841, 1848, 1879, 1881, 1885,
     1887, 1902, 1908, 1910, 1914, 1926, 1939, 1941, 1953, 1955,
     1957, 1947, 1888,  775, 1941, 1127, 1958, 1150, 1961,  775,

     2001, 2003, 1085, 1967, 1975, 1978, 1986, 1989, 1992, 1995,
     1998, 2001, 2004,    0,  752, 2007, 2010, 2013,  716,    0,
      714,  711,  700,  675,  673,  659,  644,  649,  637,    0,
      631,    0, 2044, 2046, 2048, 2050, 2052, 2073, 2075, 2080,
     2097, 2102, 2104, 2109, 2125, 2049, 2102, 2105,    0, 2127,
     2139, 2141, 2143, 2155, 2157, 2169, 2183, 2185, 2190, 2197,
     2211, 2213, 2190, 2197, 2200, 2206, 2209, 2212, 2215, 2255,
      645,  643, 2219, 2222, 2227,    0,  612,    0,    0,    0,
      618,  609,  598,  570,  554,  546,  528,  528,    0, 2258,
     2261, 2266, 2279, 2282, 2284, 2287, 2300, 2305,    0, 2308,

     2312, 2326, 2330, 2338, 2342, 2356, 2359, 2363, 2343, 2352,
     2356,    0,  520,    0,  518,  495,    0,  468,    0,    0,
        0, 2377, 2389, 2391, 2395, 2412, 2416, 2419, 2433,    0,
      452,  447,  412,  393, 2440, 2437, 2454, 2458, 2461, 2475,
     2479, 2482,  387,  300,    0,  294, 2496, 2500, 2503, 2508,
     2521, 2524,    0,  121,    0, 2526, 2529,   95, 2547, 2550,
        0, 2741, 2598, 2607, 2616, 2625, 2634, 2643, 2648, 2656,
     2661, 2666, 2675, 2680, 2689, 2697, 2705, 2712, 2721, 2726,
     2731
    } ;

static yyconst flex_int16_t yy_def[782] =
    {   0,
      762,  762,  763,  763,  764,  764,  765,  765,  766,  766,
      767,  767,  762,   13,  762,   15,  768,  768,  762,   19,
      762,  762,  762,  762,  762,  762,  769,  762,  769,  762,
      762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  762,  762,   29,  762,  762,  762,  762,
      762,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  762,  762,  770,  771,  771,  762,  762,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,  762,  762,  762,  762,  762,  762,  762,

      762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  762,  762,  762,  762,  762,  762,   29,
      762,   29,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  772,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  762,  773,  762,  762,  762,  762,  762,
      762,  762,  774,  774,  194,  194,  194,  194,  194,  194,

      194,  194,  194,  194,  194,  194,  762,  762,  762,  762,
      762,  762,  762,  762,  762,  762,   29,   29,  762,  762,
      762,  762,  762,  762,  762,  762,   29,   29,  762,  762,
      775,  762,  762,  762,  762,  762,  762,  762,  762,  776,
      762,  762,  762,  762,  762,  762,  762,  762,  777,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,  762,   29,  762,  762,  762,
      762,  762,  762,  762,  770,  762,  762,  778,  762,  762,
      762,  762,  762,  762,  762,  762,  762,  779,   78,   78,
      762,  762,  762,  762,  762,  762,  762,  762,   78,   78,

      762,  762,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,  762,
      762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  762,  762,  762,  780,  762,  762,  762,
      762,  762,  772,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  762,  762,  353,  762,  762,  762,  762,
      762,  762,  762,  773,  762,  762,  194,  194,  762,  762,
      762,  762,  762,  762,  762,  762,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,

      194,  194,  194,  762,  762,  762,  762,  762,  762,  762,
       29,  762,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  762,  762,  762,  762,  762,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,  762,  762,  762,  778,  762,  762,  762,
      762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  779,   78,  762,  762,  762,  762,  762,
      762,  762,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,  762,  762,  762,
      762,  781,  762,  762,  762,  762,  762,  762,  762,  762,

      762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  762,  762,  762,  762,  762,  762,  194,
      762,  762,  762,  762,  762,  762,  762,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  194,  762,  762,  762,   29,  762,  762,  762,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  762,   78,  762,  762,  762,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,  781,  762,  762,  762,  762,  762,  762,  762,  762,

      762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  353,  194,  762,  762,  762,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  194,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,  762,  762,  762,  447,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  762,  762,  353,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  194,   29,
       29,   29,   29,   29,   29,   29,   29,   29,  447,   78,

       78,   78,   78,   78,   78,   78,   78,   78,  762,  762,
      762,  592,  194,  194,  194,  194,  194,  194,  194,  194,
      194,   29,   29,   29,   29,   78,   78,   78,   78,  592,
      194,  194,  194,  194,   29,   29,   29,   29,   78,   78,
       78,   78,  194,  194,  194,  194,   29,   29,   29,   78,
       78,   78,  194,  194,  194,   29,   78,  194,   29,   78,
      194,    0,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
      762
    } ;

static yyconst flex_int16_t yy_nxt[2808] =
    {   0,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   46,   46,   46,   48,
       49,   50,   51,   46,   52,   53,   54,   55,   56,   57,
       58,   46,   46,   46,   59,   60,   61,   62,   46,   63,
       46,   64,   65,   66,   67,   22,   22,   22,   68,   69,
       70,   71,   72,   73,   74,   75,   22,   76,   24,   25,
       26,   77,   28,   78,   30,   31,   32,   33,   34,   35,
       79,   37,   38,   39,   40,   41,   80,   43,   44,   45,
       81,   47,   81,   81,   81,   48,   49,   50,   51,   81,

       82,   83,   84,   85,   86,   87,   88,   81,   81,   81,
       89,   90,   91,   92,   81,   93,   81,   64,   65,   66,
       67,   22,   22,   22,   94,   95,   96,   97,   98,   99,
      100,  101,  103,  104,  105,  103,  104,  105,  761,  106,
      119,  120,  106,  108,  109,  110,  108,  109,  110,  166,
      111,  114,  115,  111,  114,  115,  218,  112,  119,  120,
      112,  116,  167,  230,  116,  758,  117,  231,  168,  117,
      122,  123,  124,  122,  123,  124,  219,  220,  221,  222,
      223,  224,  225,  226,  245,  246,  125,  270,  270,  125,
      126,  127,   24,  128,  129,  130,  131,  132,  133,  134,

      135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
      145,  146,  147,  148,  130,  149,  130,  130,  130,  150,
      151,  152,  153,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  154,  155,  156,  157,  126,  126,  126,  158,  159,
      160,  161,  162,  163,  164,  165,  169,  170,  171,  169,
      169,  172,  169,  172,  169,  169,  169,  169,  169,  173,
      169,  174,  175,  169,  176,  169,  169,  169,  169,  169,
      172,  169,  172,  172,  172,  169,  169,  169,  169,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,

      172,  172,  172,  172,  172,  172,  172,  169,  169,  169,
      169,  169,  169,  169,  177,  178,  179,  180,  181,  182,
      183,  184,  186,  187,  188,  189,  186,  187,  188,  189,
      190,  755,  239,  328,  190,  191,  240,  241,  329,  191,
      754,  192,  267,  267,  267,  192,  171,  171,  171,  171,
      171,  193,  171,  194,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      194,  171,  194,  194,  194,  171,  171,  171,  171,  194,
      195,  196,  197,  198,  199,  200,  201,  194,  194,  194,
      202,  203,  204,  205,  194,  206,  194,  171,  171,  171,

      171,  171,  171,  171,  207,  208,  209,  210,  211,  212,
      213,  214,  227,  228,  269,  269,  269,  232,  272,  272,
      233,  322,  322,  227,  234,  235,  236,  271,  271,  271,
      753,  242,  228,  243,  273,  273,  273,  330,  237,  746,
      238,  244,  331,  219,  220,  221,  222,  223,  224,  225,
      226,  244,  244,  217,  217,  745,  217,  217,  333,  217,
      217,  217,  217,  334,  217,  251,  335,  217,  324,  324,
      217,  336,  217,  217,  250,  344,  217,  398,  252,  217,
      345,  217,  217,  217,  217,  217,  319,  319,  319,  399,
      279,  301,  302,  217,  744,  217,  743,  253,  254,  217,

      217,  255,  217,  279,  217,  256,  217,  217,  734,  279,
      217,  346,  257,  217,  217,  245,  246,  258,  230,  217,
      217,  217,  231,  347,  217,  347,  217,  217,  217,  348,
      260,  217,  392,  259,  217,  217,  393,  261,  217,  733,
      217,  321,  321,  321,  238,  217,  263,  217,  420,  262,
      217,  217,  264,  732,  217,  279,  301,  302,  289,  289,
      731,  217,  265,  270,  270,  289,  289,  721,  279,  289,
      217,  275,  276,  277,  279,  720,  289,  426,  289,  426,
      289,  289,  427,  303,  279,  289,  304,  289,  289,  719,
      279,  289,  239,  400,  289,  289,  240,  241,  289,  401,

      289,  289,  289,  718,  305,  289,  515,  289,  515,  306,
      307,  516,  289,  717,  289,  323,  323,  323,  308,  272,
      272,  289,  309,  325,  325,  325,  289,  289,  280,  281,
      282,  283,  284,  285,  286,  287,  288,  289,  716,  310,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  369,
      369,  311,  715,  289,  313,  289,  714,  314,  289,  713,
      289,  672,  312,  672,  289,  289,  289,  289,  689,  315,
      289,  289,  688,  290,  371,  371,  289,  316,  267,  267,
      267,  289,  318,  317,  687,  289,  269,  269,  269,  686,
      289,  217,  217,  291,  292,  293,  294,  295,  296,  297,

      298,  288,  217,  242,  685,  243,  271,  271,  271,  232,
      684,  217,  233,  244,  390,  391,  349,  235,  236,  273,
      273,  273,  683,  244,  244,  406,  406,  299,  300,  363,
      237,  364,  238,  279,  301,  302,  408,  408,  299,  365,
      366,  366,  366,  368,  368,  368,  279,  300,  682,  365,
      365,  681,  279,  680,  351,  276,  277,  679,  291,  292,
      293,  294,  295,  296,  297,  298,  347,  279,  347,  279,
      301,  302,  348,  279,  354,  355,  356,  357,  358,  359,
      360,  361,  279,  370,  370,  370,  378,  677,  279,  372,
      372,  372,  379,  380,  381,  382,  383,  384,  385,  386,

      403,  403,  403,  405,  405,  405,  379,  380,  381,  382,
      383,  384,  385,  386,  407,  407,  407,  409,  409,  409,
      217,  217,  217,  217,  217,  217,  217,  413,  413,  413,
      669,  217,  663,  217,  414,  414,  415,  415,  415,  631,
      217,  630,  217,  411,  416,  416,  417,  417,  417,  217,
      217,  217,  217,  458,  458,  236,  629,  425,  460,  460,
      217,  628,  217,  244,  627,  244,  217,  217,  242,  217,
      243,  217,  626,  244,  244,  244,  244,  217,  244,  625,
      217,  217,  217,  217,  624,  430,  431,  623,  244,  244,
      429,  217,  622,  217,  217,  217,  621,  217,  217,  620,

      217,  619,  217,  468,  468,  217,  433,  615,  217,  217,
      217,  470,  470,  432,  217,  217,  217,  217,  509,  509,
      217,  217,  217,  217,  217,  516,  217,  434,  346,  217,
      436,  435,  217,  516,  217,  217,  217,  217,  217,  217,
      347,  217,  347,  217,  217,  217,  348,  217,  437,  217,
      217,  217,  267,  267,  267,  217,  217,  504,  438,  439,
      288,  217,  610,  440,  217,  217,  217,  217,  217,  604,
      217,  217,  217,  511,  511,  441,  217,  601,  217,  267,
      267,  267,  217,  464,  443,  217,  570,  217,  217,  217,
      442,  217,  267,  267,  267,  267,  267,  267,  564,  217,

      444,  444,  444,  445,  445,  445,  523,  523,  217,  446,
      446,  446,  275,  276,  277,  525,  525,  448,  449,  450,
      451,  452,  453,  454,  455,  279,  279,  301,  302,  529,
      530,  279,  278,  278,  278,  457,  457,  457,  427,  279,
      459,  459,  459,  289,  289,  279,  461,  461,  461,  289,
      289,  289,  566,  566,  289,  568,  568,  289,  289,  467,
      467,  467,  427,  289,  469,  469,  469,  542,  289,  280,
      281,  282,  283,  284,  285,  286,  287,  289,  465,  471,
      471,  471,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  541,  289,  540,  289,  473,  289,  671,  289,

      671,  289,  289,  672,  289,  539,  289,  474,  475,  538,
      289,  289,  289,  537,  289,  289,  536,  289,  289,  319,
      319,  319,  289,  477,  535,  289,  606,  606,  289,  534,
      476,  289,  289,  289,  289,  478,  533,  289,  289,  289,
      289,  289,  532,  289,  289,  289,  531,  480,  479,  289,
      528,  289,  289,  608,  608,  289,  481,  527,  289,  521,
      289,  289,  289,  520,  289,  289,  289,  289,  289,  319,
      319,  319,  289,  289,  289,  375,  289,  485,  289,  513,
      483,  482,  665,  665,  289,  289,  484,  289,  289,  289,
      289,  289,  507,  289,  289,  289,  319,  319,  319,  289,

      352,  289,  350,  487,  350,  289,  667,  667,  289,  342,
      289,  486,  491,  301,  289,  319,  319,  319,  488,  488,
      488,  489,  489,  489,  490,  490,  490,  493,  472,  494,
      503,  504,  505,  466,  351,  276,  277,  354,  355,  356,
      357,  358,  359,  360,  361,  506,  347,  279,  347,  353,
      353,  353,  348,  279,  508,  508,  508,  510,  510,  510,
      512,  512,  512,  366,  366,  366,  366,  366,  366,  495,
      496,  497,  498,  499,  500,  501,  502,  362,  464,  514,
      363,  462,  364,  456,  276,  365,  423,  365,  422,  421,
      365,  366,  366,  366,  418,  365,  365,  365,  365,  412,

      365,  365,  366,  366,  366,  517,  517,  517,  518,  518,
      518,  519,  519,  519,  377,  377,  377,  522,  522,  522,
      524,  524,  524,  526,  526,  526,  403,  403,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  543,  543,
      543,  544,  544,  544,  545,  545,  545,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  215,  546,  547,  547,  547,  217,  548,  548,
      548,  549,  549,  549,  425,  217,  217,  217,  217,  217,
      217,  550,  244,  217,  217,  410,  217,  551,  217,  553,
      217,  552,  244,  244,  217,  217,  404,  217,  402,  217,

      217,  217,  397,  217,  217,  217,  217,  217,  217,  217,
      396,  554,  217,  217,  555,  217,  395,  217,  557,  217,
      217,  556,  394,  217,  217,  288,  217,  389,  217,  217,
      217,  388,  217,  217,  217,  217,  217,  563,  563,  563,
      217,  217,  217,  559,  217,  387,  217,  217,  217,  217,
      558,  376,  217,  217,  375,  560,  373,  561,  217,  217,
      217,  217,  563,  563,  563,  367,  362,  217,  352,  274,
      217,  563,  563,  563,  562,  447,  447,  447,  268,  217,
      246,  266,  448,  449,  450,  451,  452,  453,  454,  455,
      565,  565,  565,  567,  567,  567,  569,  569,  569,  278,

      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  571,  571,  571,  572,  572,  572,  573,  573,  573,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  249,  574,  575,  575,  575,
      289,  576,  576,  576,  577,  577,  577,  289,  289,  289,
      289,  246,  248,  578,  289,  289,  247,  350,  289,  579,
      289,  229,  580,  216,  343,  289,  342,  289,  341,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  340,
      581,  289,  339,  582,  338,  583,  289,  337,  289,  332,
      289,  327,  289,  289,  289,  289,  326,  289,  289,  289,

      289,  289,  584,  320,  289,  289,  289,  274,  585,  289,
      268,  289,  246,  289,  266,  587,  289,  249,  289,  246,
      289,  586,  289,  289,  602,  289,  494,  289,  289,  289,
      289,  248,  247,  289,  603,  289,  289,  229,  289,  216,
      289,  215,  588,  589,  603,  603,  289,  289,  762,  289,
      590,  591,  591,  591,  762,  289,  591,  591,  591,  591,
      591,  591,  593,  594,  595,  596,  597,  598,  599,  600,
      492,  492,  492,  605,  605,  605,  607,  607,  607,  609,
      609,  609,  503,  504,  505,  503,  504,  505,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  353,  353,  353,

      611,  611,  611,  612,  612,  612,  613,  613,  613,  514,
      614,  614,  614,  614,  614,  614,  762,  365,  614,  614,
      614,  377,  377,  377,  377,  377,  377,  365,  365,  377,
      377,  377,  377,  377,  377,  616,  616,  616,  617,  617,
      617,  618,  618,  618,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  217,  217,  634,  634,  634,  634,  634,
      634,  633,  762,  762,  217,  634,  634,  634,  217,  217,
      217,  217,  762,  217,  217,  217,  217,  217,  762,  217,
      762,  217,  635,  762,  762,  217,  636,  217,  217,  637,
      217,  217,  217,  762,  217,  762,  217,  217,  217,  217,

      217,  762,  217,  217,  217,  447,  447,  447,  217,  640,
      217,  217,  638,  762,  217,  217,  217,  639,  762,  217,
      762,  641,  762,  217,  762,  762,  217,  762,  217,  217,
      217,  217,  762,  642,  762,  217,  643,  762,  644,  217,
      762,  217,  217,  217,  217,  217,  217,  217,  217,  762,
      217,  762,  762,  217,  645,  217,  762,  217,  447,  447,
      447,  762,  217,  762,  217,  762,  217,  447,  447,  447,
      447,  447,  447,  646,  646,  646,  647,  647,  647,  648,
      648,  648,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  289,  289,  651,  651,  651,  651,  651,  651,  650,

      762,  762,  289,  651,  651,  651,  289,  289,  289,  289,
      762,  289,  289,  289,  289,  289,  762,  289,  762,  289,
      652,  762,  762,  289,  653,  289,  289,  654,  289,  289,
      289,  762,  289,  762,  289,  289,  289,  289,  289,  762,
      289,  289,  289,  592,  592,  592,  289,  657,  289,  289,
      655,  762,  289,  289,  289,  656,  762,  289,  762,  658,
      762,  289,  762,  762,  289,  762,  289,  289,  289,  289,
      762,  659,  762,  289,  660,  762,  661,  289,  762,  289,
      289,  289,  289,  289,  289,  289,  289,  762,  289,  762,
      762,  289,  662,  289,  762,  289,  664,  664,  664,  762,

      289,  762,  289,  762,  289,  593,  594,  595,  596,  597,
      598,  599,  600,  666,  666,  666,  668,  668,  668,  601,
      762,  670,  492,  492,  492,  762,  762,  603,  762,  603,
      492,  492,  492,  492,  492,  492,  762,  603,  603,  603,
      603,  492,  492,  492,  673,  673,  673,  674,  674,  674,
      675,  675,  675,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  762,  217,  762,  217,  762,  217,  762,  217,  762,
      691,  690,  762,  217,  762,  217,  762,  217,  762,  217,

      217,  217,  217,  217,  699,  699,  699,  217,  217,  762,
      762,  217,  762,  217,  762,  693,  692,  762,  217,  762,
      217,  762,  217,  694,  217,  217,  762,  217,  762,  217,
      217,  217,  217,  762,  762,  217,  217,  217,  762,  762,
      217,  762,  217,  762,  217,  696,  695,  217,  698,  217,
      762,  697,  217,  217,  289,  289,  217,  699,  699,  699,
      699,  699,  699,  217,  762,  289,  289,  289,  289,  289,
      289,  289,  217,  762,  700,  762,  762,  289,  762,  289,
      762,  289,  289,  289,  289,  289,  289,  762,  289,  762,
      289,  762,  762,  701,  762,  289,  289,  289,  762,  762,

      702,  762,  289,  762,  289,  762,  762,  289,  762,  703,
      289,  289,  289,  289,  762,  762,  289,  289,  289,  762,
      762,  289,  762,  289,  289,  289,  704,  762,  289,  762,
      289,  762,  289,  706,  705,  289,  762,  289,  289,  289,
      289,  289,  762,  762,  707,  592,  592,  592,  762,  289,
      708,  289,  592,  592,  592,  592,  592,  592,  289,  762,
      289,  592,  592,  592,  709,  709,  709,  710,  710,  710,
      711,  711,  711,  670,  712,  712,  712,  712,  712,  712,
      762,  603,  712,  712,  712,  217,  217,  762,  217,  217,
      762,  603,  603,  217,  217,  762,  217,  762,  722,  217,

      762,  723,  762,  762,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  762,  217,  762,  762,
      217,  762,  217,  724,  725,  217,  217,  217,  217,  217,
      762,  217,  217,  217,  217,  289,  289,  762,  217,  289,
      289,  762,  762,  217,  762,  762,  289,  217,  726,  762,
      289,  762,  217,  289,  289,  289,  762,  289,  289,  289,
      762,  727,  762,  762,  289,  289,  289,  762,  289,  289,
      289,  762,  762,  289,  728,  762,  289,  289,  762,  762,
      289,  762,  729,  289,  289,  289,  289,  289,  762,  289,
      289,  289,  762,  762,  289,  762,  762,  289,  730,  730,

      730,  289,  762,  289,  217,  217,  289,  730,  730,  730,
      289,  730,  730,  730,  762,  217,  217,  217,  217,  217,
      762,  735,  217,  217,  217,  762,  762,  217,  762,  217,
      762,  762,  762,  217,  737,  762,  736,  762,  217,  289,
      289,  738,  217,  289,  289,  762,  289,  289,  762,  762,
      289,  762,  762,  762,  289,  762,  739,  289,  762,  289,
      289,  289,  741,  740,  217,  217,  289,  217,  217,  762,
      762,  289,  762,  762,  762,  217,  762,  748,  217,  742,
      289,  217,  217,  747,  217,  217,  217,  217,  289,  289,
      762,  762,  217,  762,  762,  749,  217,  762,  762,  289,

      762,  217,  289,  289,  750,  217,  289,  289,  289,  289,
      289,  762,  762,  289,  762,  751,  762,  289,  762,  752,
      289,  762,  289,  217,  217,  762,  289,  217,  217,  289,
      217,  217,  762,  762,  217,  289,  289,  762,  217,  762,
      762,  217,  762,  217,  756,  762,  289,  217,  289,  289,
      217,  289,  289,  217,  217,  289,  289,  289,  762,  289,
      762,  762,  289,  762,  217,  757,  762,  289,  289,  759,
      762,  289,  760,  217,  217,  217,  289,  289,  289,  762,
      762,  762,  762,  762,  762,  217,  762,  762,  289,  762,
      762,  762,  762,  762,  217,  762,  762,  289,  102,  102,

      102,  102,  102,  102,  102,  102,  102,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  217,  762,  762,  762,  217,  278,  278,  762,
      278,  278,  289,  762,  762,  289,  762,  762,  762,  289,
      353,  762,  762,  762,  353,  374,  762,  762,  762,  374,
      374,  374,  374,  374,  377,  762,  762,  762,  377,  419,
      419,  419,  419,  419,  419,  419,  419,  424,  424,  424,

      424,  424,  424,  424,  424,  428,  428,  428,  428,  428,
      428,  428,  428,  447,  762,  762,  447,  762,  762,  762,
      447,  463,  463,  463,  463,  463,  463,  762,  463,  463,
      492,  492,  762,  492,  492,  592,  762,  762,  762,  592,
       21,  762,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  762,  762,  762,  762,  762,  762,  762,

      762,  762,  762,  762,  762,  762,  762
    } ;

static yyconst flex_int16_t yy_chk[2808] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    3,    3,    3,    4,    4,    4,  758,    3,
        9,    9,    4,    5,    5,    5,    6,    6,    6,   14,
        5,    7,    7,    6,    8,    8,   27,    5,   10,   10,
        6,    7,   14,   34,    8,  754,    7,   34,   14,    8,
       11,   11,   11,   12,   12,   12,   27,   27,   27,   27,
       27,   27,   27,   27,   43,   43,   11,   71,   71,   12,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   17,   17,   17,   17,   18,   18,   18,   18,
       17,  746,   39,  105,   18,   17,   39,   39,  105,   18,
      744,   17,   68,   68,   68,   18,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   29,   29,   70,   70,   70,   38,   73,   73,
       38,   97,   97,   29,   38,   38,   38,   72,   72,   72,
      743,   40,   29,   40,   74,   74,   74,  106,   38,  734,
       38,   40,  106,   29,   29,   29,   29,   29,   29,   29,
       29,   40,   40,   46,   46,  733,   52,   52,  110,   53,
       53,   54,   54,  110,   46,   53,  111,   52,   99,   99,
       53,  111,   54,   46,   52,  125,   52,  204,   54,   53,
      125,   54,   55,   55,   56,   56,   94,   94,   94,  204,
       79,   79,   79,   55,  732,   56,  731,   55,   55,   57,

       57,   56,   55,   79,   56,   56,   58,   58,  718,   79,
       57,  127,   57,   59,   59,  146,  146,   58,  137,   57,
       60,   60,  137,  127,   59,  127,   58,   61,   61,  127,
       60,   60,  199,   59,   62,   62,  199,   61,   61,  716,
       60,   96,   96,   96,  233,   62,   62,   61,  233,   61,
       63,   63,   62,  715,   62,   80,   80,   80,   81,   81,
      713,   63,   63,  161,  161,   82,   82,  688,   80,   81,
       63,   76,   76,   76,   80,  687,   82,  244,   81,  244,
       83,   83,  244,   82,   76,   82,   83,   84,   84,  686,
       76,   83,  142,  205,   85,   85,  142,  142,   84,  205,

       83,   86,   86,  685,   84,   85,  365,   84,  365,   85,
       85,  365,   86,  684,   85,   98,   98,   98,   86,  163,
      163,   86,   86,  100,  100,  100,   87,   87,   76,   76,
       76,   76,   76,   76,   76,   76,   77,   87,  683,   87,
       88,   88,   89,   89,   90,   90,   87,   91,   91,  180,
      180,   88,  682,   89,   90,   90,  681,   91,   91,  677,
       88,  672,   89,  671,   90,   92,   92,   91,  631,   91,
       93,   93,  629,   77,  182,  182,   92,   92,  158,  158,
      158,   93,   93,   92,  628,   92,  160,  160,  160,  627,
       93,  130,  130,   77,   77,   77,   77,   77,   77,   77,

       77,   78,  130,  143,  626,  143,  162,  162,  162,  141,
      625,  130,  141,  143,  198,  198,  141,  141,  141,  164,
      164,  164,  624,  143,  143,  210,  210,   78,   78,  176,
      141,  176,  141,  167,  167,  167,  212,  212,   78,  176,
      177,  177,  177,  179,  179,  179,  167,   78,  623,  176,
      176,  622,  167,  621,  166,  166,  166,  619,   78,   78,
       78,   78,   78,   78,   78,   78,  166,  166,  166,  168,
      168,  168,  166,  166,  172,  172,  172,  172,  172,  172,
      172,  172,  168,  181,  181,  181,  193,  615,  168,  183,
      183,  183,  194,  194,  194,  194,  194,  194,  194,  194,

      207,  207,  207,  209,  209,  209,  193,  193,  193,  193,
      193,  193,  193,  193,  211,  211,  211,  213,  213,  213,
      217,  217,  218,  218,  219,  219,  219,  221,  221,  221,
      600,  217,  594,  218,  222,  222,  223,  223,  223,  542,
      217,  540,  218,  218,  224,  224,  225,  225,  225,  227,
      227,  228,  228,  283,  283,  236,  539,  242,  285,  285,
      227,  538,  228,  236,  537,  242,  251,  251,  243,  227,
      243,  228,  536,  236,  236,  242,  242,  251,  243,  535,
      250,  250,  252,  252,  534,  251,  251,  532,  243,  243,
      250,  250,  531,  252,  253,  253,  530,  254,  254,  529,

      250,  528,  252,  294,  294,  253,  254,  520,  254,  255,
      255,  296,  296,  253,  253,  256,  256,  254,  357,  357,
      255,  257,  257,  258,  258,  516,  256,  255,  346,  255,
      257,  256,  257,  515,  258,  256,  259,  259,  260,  260,
      346,  257,  346,  258,  261,  261,  346,  259,  259,  260,
      262,  262,  268,  268,  268,  261,  259,  505,  260,  261,
      278,  262,  502,  262,  261,  263,  263,  264,  264,  496,
      262,  265,  265,  359,  359,  263,  263,  493,  264,  269,
      269,  269,  265,  464,  265,  263,  455,  264,  267,  267,
      264,  265,  270,  270,  270,  271,  271,  271,  449,  267,

      272,  272,  272,  273,  273,  273,  382,  382,  267,  274,
      274,  274,  275,  275,  275,  384,  384,  278,  278,  278,
      278,  278,  278,  278,  278,  275,  279,  279,  279,  388,
      388,  275,  280,  280,  280,  282,  282,  282,  427,  279,
      284,  284,  284,  289,  289,  279,  286,  286,  286,  291,
      291,  291,  451,  451,  289,  453,  453,  290,  290,  293,
      293,  293,  426,  289,  295,  295,  295,  402,  290,  275,
      275,  275,  275,  275,  275,  275,  275,  290,  290,  297,
      297,  297,  299,  299,  300,  300,  303,  303,  304,  304,
      305,  305,  401,  299,  400,  300,  303,  303,  603,  304,

      603,  305,  299,  603,  300,  399,  303,  304,  304,  398,
      305,  306,  306,  397,  307,  307,  396,  308,  308,  320,
      320,  320,  306,  307,  394,  307,  498,  498,  308,  393,
      306,  306,  309,  309,  307,  308,  392,  308,  310,  310,
      311,  311,  391,  309,  312,  312,  390,  310,  309,  310,
      387,  311,  309,  500,  500,  312,  312,  386,  310,  380,
      311,  313,  313,  378,  312,  314,  314,  316,  316,  321,
      321,  321,  313,  315,  315,  375,  314,  316,  316,  361,
      314,  313,  596,  596,  315,  314,  315,  316,  317,  317,
      318,  318,  355,  315,  319,  319,  322,  322,  322,  317,

      352,  318,  350,  318,  348,  319,  598,  598,  317,  342,
      318,  317,  337,  302,  319,  323,  323,  323,  324,  324,
      324,  325,  325,  325,  326,  326,  326,  347,  298,  347,
      349,  349,  349,  292,  351,  351,  351,  353,  353,  353,
      353,  353,  353,  353,  353,  349,  351,  351,  351,  354,
      354,  354,  351,  351,  356,  356,  356,  358,  358,  358,
      360,  360,  360,  367,  367,  367,  368,  368,  368,  347,
      347,  347,  347,  347,  347,  347,  347,  362,  288,  363,
      364,  287,  364,  281,  277,  362,  237,  363,  235,  234,
      364,  369,  369,  369,  226,  362,  362,  363,  363,  220,

      364,  364,  370,  370,  370,  371,  371,  371,  372,  372,
      372,  373,  373,  373,  379,  379,  379,  381,  381,  381,
      383,  383,  383,  385,  385,  385,  404,  404,  404,  405,
      405,  405,  406,  406,  406,  407,  407,  407,  408,  408,
      408,  409,  409,  409,  410,  410,  410,  411,  411,  412,
      412,  412,  413,  413,  413,  414,  414,  414,  411,  415,
      415,  415,  215,  411,  416,  416,  416,  411,  417,  417,
      417,  418,  418,  418,  425,  429,  429,  430,  430,  432,
      432,  429,  425,  431,  431,  214,  429,  430,  430,  432,
      432,  431,  425,  425,  431,  429,  208,  430,  206,  432,

      433,  433,  203,  431,  434,  434,  435,  435,  437,  437,
      202,  433,  436,  436,  435,  434,  201,  435,  437,  437,
      433,  436,  200,  436,  434,  447,  435,  197,  437,  438,
      438,  196,  436,  439,  439,  440,  440,  444,  444,  444,
      438,  441,  441,  439,  439,  195,  440,  442,  442,  438,
      438,  188,  441,  439,  186,  440,  184,  441,  442,  443,
      443,  441,  445,  445,  445,  178,  175,  442,  170,  165,
      443,  446,  446,  446,  443,  448,  448,  448,  159,  443,
      157,  155,  447,  447,  447,  447,  447,  447,  447,  447,
      450,  450,  450,  452,  452,  452,  454,  454,  454,  456,

      456,  456,  457,  457,  457,  458,  458,  458,  459,  459,
      459,  460,  460,  460,  461,  461,  461,  462,  462,  462,
      465,  465,  466,  466,  466,  467,  467,  467,  468,  468,
      468,  465,  469,  469,  469,  151,  465,  470,  470,  470,
      465,  471,  471,  471,  472,  472,  472,  473,  473,  474,
      474,  149,  148,  473,  475,  475,  147,  144,  473,  474,
      474,  133,  475,  128,  124,  475,  122,  473,  120,  474,
      476,  476,  477,  477,  475,  478,  478,  479,  479,  117,
      476,  476,  116,  477,  115,  479,  478,  112,  479,  109,
      476,  104,  477,  480,  480,  478,  101,  479,  481,  481,

      482,  482,  480,   95,  480,  483,  483,   75,  481,  481,
       69,  482,   67,  480,   65,  483,  483,   49,  481,   47,
      482,  482,  484,  484,  494,  483,  494,  485,  485,  486,
      486,   45,   44,  484,  494,  487,  487,   30,  485,   25,
      486,   23,  484,  485,  494,  494,  487,  485,   21,  486,
      487,  488,  488,  488,    0,  487,  489,  489,  489,  490,
      490,  490,  492,  492,  492,  492,  492,  492,  492,  492,
      495,  495,  495,  497,  497,  497,  499,  499,  499,  501,
      501,  501,  503,  503,  503,  506,  506,  506,  507,  507,
      507,  508,  508,  508,  509,  509,  509,  510,  510,  510,

      511,  511,  511,  512,  512,  512,  513,  513,  513,  514,
      517,  517,  517,  518,  518,  518,    0,  514,  519,  519,
      519,  521,  521,  521,  522,  522,  522,  514,  514,  523,
      523,  523,  524,  524,  524,  525,  525,  525,  526,  526,
      526,  527,  527,  527,  543,  543,  543,  544,  544,  544,
      545,  545,  545,  546,  546,  547,  547,  547,  548,  548,
      548,  546,    0,    0,  546,  549,  549,  549,  550,  550,
      551,  551,    0,  546,  552,  552,  553,  553,    0,  550,
        0,  551,  550,    0,    0,  552,  552,  553,  550,  553,
      551,  554,  554,    0,  552,    0,  553,  555,  555,  556,

      556,    0,  554,  557,  557,  564,  564,  564,  555,  556,
      556,  554,  554,    0,  557,  558,  558,  555,    0,  556,
        0,  557,    0,  557,    0,    0,  558,    0,  559,  559,
      560,  560,    0,  558,    0,  558,  559,    0,  560,  559,
        0,  560,  561,  561,  562,  562,  563,  563,  559,    0,
      560,    0,    0,  561,  562,  562,    0,  563,  565,  565,
      565,    0,  561,    0,  562,    0,  563,  566,  566,  566,
      567,  567,  567,  568,  568,  568,  569,  569,  569,  570,
      570,  570,  571,  571,  571,  572,  572,  572,  573,  573,
      573,  574,  574,  575,  575,  575,  576,  576,  576,  574,

        0,    0,  574,  577,  577,  577,  578,  578,  579,  579,
        0,  574,  580,  580,  581,  581,    0,  578,    0,  579,
      578,    0,    0,  580,  580,  581,  578,  581,  579,  582,
      582,    0,  580,    0,  581,  583,  583,  584,  584,    0,
      582,  585,  585,  593,  593,  593,  583,  584,  584,  582,
      582,    0,  585,  586,  586,  583,    0,  584,    0,  585,
        0,  585,    0,    0,  586,    0,  587,  587,  588,  588,
        0,  586,    0,  586,  587,    0,  588,  587,    0,  588,
      589,  589,  590,  590,  591,  591,  587,    0,  588,    0,
        0,  589,  590,  590,    0,  591,  595,  595,  595,    0,

      589,    0,  590,    0,  591,  592,  592,  592,  592,  592,
      592,  592,  592,  597,  597,  597,  599,  599,  599,  601,
        0,  602,  604,  604,  604,    0,    0,  601,    0,  602,
      605,  605,  605,  606,  606,  606,    0,  601,  601,  602,
      602,  607,  607,  607,  608,  608,  608,  609,  609,  609,
      610,  610,  610,  611,  611,  611,  612,  612,  612,  613,
      613,  613,  616,  616,  616,  617,  617,  617,  618,  618,
      618,  633,  633,  634,  634,  635,  635,  636,  636,  637,
      637,    0,  633,    0,  634,    0,  635,    0,  636,    0,
      637,  633,    0,  634,    0,  635,    0,  636,    0,  637,

      638,  638,  639,  639,  646,  646,  646,  640,  640,    0,
        0,  638,    0,  639,    0,  639,  638,    0,  640,    0,
      638,    0,  639,  640,  641,  641,    0,  640,    0,  642,
      642,  643,  643,    0,    0,  641,  644,  644,    0,    0,
      642,    0,  643,    0,  641,  642,  641,  644,  644,  642,
        0,  643,  645,  645,  650,  650,  644,  647,  647,  647,
      648,  648,  648,  645,    0,  650,  651,  651,  652,  652,
      653,  653,  645,    0,  650,    0,    0,  651,    0,  652,
        0,  653,  654,  654,  655,  655,  651,    0,  652,    0,
      653,    0,    0,  654,    0,  655,  656,  656,    0,    0,

      655,    0,  654,    0,  655,    0,    0,  656,    0,  656,
      657,  657,  658,  658,    0,    0,  656,  659,  659,    0,
        0,  657,    0,  658,  660,  660,  657,    0,  659,    0,
      657,    0,  658,  659,  658,  660,    0,  659,  661,  661,
      662,  662,    0,    0,  660,  663,  663,  663,    0,  661,
      661,  662,  664,  664,  664,  665,  665,  665,  661,    0,
      662,  666,  666,  666,  667,  667,  667,  668,  668,  668,
      669,  669,  669,  670,  673,  673,  673,  674,  674,  674,
        0,  670,  675,  675,  675,  690,  690,    0,  691,  691,
        0,  670,  670,  692,  692,    0,  690,    0,  690,  691,

        0,  692,    0,    0,  692,  690,  693,  693,  691,  694,
      694,  695,  695,  692,  696,  696,    0,  693,    0,    0,
      694,    0,  695,  693,  695,  696,  693,  697,  697,  694,
        0,  695,  698,  698,  696,  700,  700,    0,  697,  701,
      701,    0,    0,  698,    0,    0,  700,  697,  700,    0,
      701,    0,  698,  702,  702,  700,    0,  703,  703,  701,
        0,  702,    0,    0,  702,  704,  704,    0,  703,  705,
      705,    0,    0,  702,  703,    0,  704,  703,    0,    0,
      705,    0,  705,  706,  706,  704,  707,  707,    0,  705,
      708,  708,    0,    0,  706,    0,    0,  707,  709,  709,

      709,  708,    0,  706,  722,  722,  707,  710,  710,  710,
      708,  711,  711,  711,    0,  722,  723,  723,  724,  724,
        0,  722,  725,  725,  722,    0,    0,  723,    0,  724,
        0,    0,    0,  725,  724,    0,  723,    0,  724,  726,
      726,  725,  725,  727,  727,    0,  728,  728,    0,    0,
      726,    0,    0,    0,  727,    0,  726,  728,    0,  726,
      729,  729,  728,  727,  736,  736,  728,  735,  735,    0,
        0,  729,    0,    0,    0,  736,    0,  736,  735,  729,
      729,  737,  737,  735,  736,  738,  738,  735,  739,  739,
        0,    0,  737,    0,    0,  738,  738,    0,    0,  739,

        0,  737,  740,  740,  739,  738,  741,  741,  739,  742,
      742,    0,    0,  740,    0,  740,    0,  741,    0,  742,
      742,    0,  740,  747,  747,    0,  741,  748,  748,  742,
      749,  749,    0,    0,  747,  750,  750,    0,  748,    0,
        0,  749,    0,  747,  748,    0,  750,  748,  751,  751,
      749,  752,  752,  756,  756,  750,  757,  757,    0,  751,
        0,    0,  752,    0,  756,  751,    0,  757,  751,  756,
        0,  752,  757,  756,  759,  759,  757,  760,  760,    0,
        0,    0,    0,    0,    0,  759,    0,    0,  760,    0,
        0,    0,    0,    0,  759,    0,    0,  760,  763,  763,

      763,  763,  763,  763,  763,  763,  763,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  765,  765,  765,  765,
      765,  765,  765,  765,  765,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  767,  767,  767,  767,  767,  767,
      767,  767,  767,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  769,    0,    0,    0,  769,  770,  770,    0,
      770,  770,  771,    0,    0,  771,    0,    0,    0,  771,
      772,    0,    0,    0,  772,  773,    0,    0,    0,  773,
      773,  773,  773,  773,  774,    0,    0,    0,  774,  775,
      775,  775,  775,  775,  775,  775,  775,  776,  776,  776,

      776,  776,  776,  776,  776,  777,  777,  777,  777,  777,
      777,  777,  777,  778,    0,    0,  778,    0,    0,    0,
      778,  779,  779,  779,  779,  779,  779,    0,  779,  779,
      780,  780,    0,  780,  780,  781,    0,    0,    0,  781,
      762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
      762,  762,  762,  762,  762,  762,  762,  762,  762,  762,

      762,  762,  762,  762,  762,  762,  762
    } ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;

#include "isatty.hxx"
#include "parse.hxx"
#include "parser_private.hxx"

#include "context.hxx"

extern "C"
{
#include "charEncoding.h"
#include "MALLOC.h"
}

static int matrix_level = 0;
static int comment_level = 0;
static int last_token = 0;
static int exit_status = PARSE_ERROR;
static std::string current_file;
static std::string program_name;

static std::string *pstBuffer;

 static bool rejected = false;

#define YY_USER_ACTION                          \
 yylloc.last_column += yyleng;
/* -*- Verbose Special Debug -*- */
//#define DEV
//#define TOKENDEV

//#define DEBUG(x) std::cout << "[DEBUG] " << x << std::endl;
#define DEBUG(x) /* Nothing */

#define INITIAL 0
#define SIMPLESTRING 1
#define DOUBLESTRING 2
#define REGIONCOMMENT 3
#define LINECOMMENT 4
#define LINEBREAK 5
#define MATRIX 6
#define MATRIXMINUSID 7
#define SHELLMODE 8
#define BEGINID 9

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 763 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2741 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinIf);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(IF);
}
	YY_BREAK
case 2:
YY_RULE_SETUP
{
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(THEN);
}
	YY_BREAK
case 3:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        // Pop to step out IF
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinElse);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(ELSE);
}
	YY_BREAK
case 4:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinElseIf);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(ELSEIF);
}
	YY_BREAK
case 5:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(END);
}
	YY_BREAK
case 6:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinSelect);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(SELECT);
}
	YY_BREAK
case 7:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinSwitch);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(SWITCH);
}
	YY_BREAK
case 8:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinOtherwise);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(OTHERWISE);
}
	YY_BREAK
case 9:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinCase);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(CASE);
}
	YY_BREAK
case 10:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinFunction);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(FUNCTION);
}
	YY_BREAK
case 11:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(ENDFUNCTION);
}
	YY_BREAK
case 12:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinFunction);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(HIDDENFUNCTION);
}
	YY_BREAK
case 13:
YY_RULE_SETUP
{
    DEBUG("BEGIN(INITIAL)");
 	BEGIN(INITIAL);
    return scan_throw(HIDDEN);
}
	YY_BREAK
case 14:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinFor);
    }
    BEGIN(INITIAL);
    return scan_throw(FOR);
}
	YY_BREAK
case 15:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinWhile);
    }
	BEGIN(INITIAL);
	return scan_throw(WHILE);
}
	YY_BREAK
case 16:
YY_RULE_SETUP
{
	BEGIN(INITIAL);
    return scan_throw(DO);
}
	YY_BREAK
case 17:
YY_RULE_SETUP
{
    	BEGIN(INITIAL);
        return scan_throw(BREAK);
}
	YY_BREAK
case 18:
YY_RULE_SETUP
{
	ParserSingleInstance::pushControlStatus(Parser::WithinTry);
	BEGIN(INITIAL);
	return scan_throw(TRY);
}
	YY_BREAK
case 19:
YY_RULE_SETUP
{
    // Pop to step out TRY
	ParserSingleInstance::popControlStatus();
	ParserSingleInstance::pushControlStatus(Parser::WithinCatch);
	BEGIN(INITIAL);
	return scan_throw(CATCH);
}
	YY_BREAK
case 20:
YY_RULE_SETUP
{
    BEGIN(INITIAL);
    return scan_throw(RETURN);
}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
{
        BEGIN(BEGINID);
}
	YY_BREAK

case 22:
YY_RULE_SETUP
{
        wchar_t *pwText = to_wide_string(yytext);
        if (yytext != NULL && pwText == NULL)
        {
            std::string str = "can not convert'";
            str += yytext;
            str += "' to UTF-8";
            std::cerr << "[ERROR] " << str << std::endl;
            exit_status = SCAN_ERROR;
            scan_error("can not convert string to UTF-8");
            yyterminate();
        }
        yylval.str = new std::wstring(pwText);
        if (symbol::Context::getInstance()->get(*yylval.str) != NULL
            && symbol::Context::getInstance()->get(*yylval.str)->isCallable())
        {
            scan_throw(ID);
            BEGIN(SHELLMODE);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(ID);
        }
    }
	YY_BREAK

case 23:
YY_RULE_SETUP
{
  return scan_throw(NOT);
}
	YY_BREAK
case 24:
YY_RULE_SETUP
{
  return scan_throw(DOLLAR);
}
	YY_BREAK
case 25:
YY_RULE_SETUP
{
  return scan_throw(BOOLTRUE);
}
	YY_BREAK
case 26:
YY_RULE_SETUP
{
  return scan_throw(BOOLFALSE);
}
	YY_BREAK
case 27:
YY_RULE_SETUP
{
  return scan_throw(AND);
}
	YY_BREAK
case 28:
YY_RULE_SETUP
{
  return scan_throw(ANDAND);
}
	YY_BREAK
case 29:
YY_RULE_SETUP
{
  return scan_throw(OR);
}
	YY_BREAK
case 30:
YY_RULE_SETUP
{
  return scan_throw(OROR);
}
	YY_BREAK
case 31:
YY_RULE_SETUP
{
  return scan_throw(LPAREN);
}
	YY_BREAK
case 32:
YY_RULE_SETUP
{
  return scan_throw(RPAREN);
}
	YY_BREAK
case 33:
YY_RULE_SETUP
{
	scan_step();
  return scan_throw(SEMI);
}
	YY_BREAK
case 34:
YY_RULE_SETUP
{
	scan_step();
  return scan_throw(COMMA);
}
	YY_BREAK
case 35:
YY_RULE_SETUP
{
  return scan_throw(COLON);
}
	YY_BREAK
case 36:
YY_RULE_SETUP
{
  yy_push_state(MATRIX);
  ParserSingleInstance::pushControlStatus(Parser::WithinCell);
  return scan_throw(LBRACE);
}
	YY_BREAK
case 37:
YY_RULE_SETUP
{
  return scan_throw(RBRACE);
}
	YY_BREAK
case 38:
YY_RULE_SETUP
{
  return scan_throw(DOTQUOTE);
}
	YY_BREAK
case 39:
YY_RULE_SETUP
{
  return scan_throw(DOTTIMES);
}
	YY_BREAK
case 40:
YY_RULE_SETUP
{
  return scan_throw(DOTDIVIDE);
}
	YY_BREAK
case 41:
YY_RULE_SETUP
{
  return scan_throw(DOTRDIVIDE);
}
	YY_BREAK
case 42:
YY_RULE_SETUP
{
  return scan_throw(DOTPOWER);
}
	YY_BREAK
case 43:
YY_RULE_SETUP
{
  return scan_throw(MINUS);
}
	YY_BREAK
case 44:
YY_RULE_SETUP
{
  return scan_throw(PLUS);
}
	YY_BREAK
case 45:
YY_RULE_SETUP
{
  return scan_throw(TIMES);
}
	YY_BREAK
case 46:
YY_RULE_SETUP
{
  return scan_throw(DIVIDE);
}
	YY_BREAK
case 47:
YY_RULE_SETUP
{
  return scan_throw(RDIVIDE);
}
	YY_BREAK
case 48:
YY_RULE_SETUP
{
  return scan_throw(POWER);
}
	YY_BREAK
case 49:
YY_RULE_SETUP
{
  return scan_throw(KRONTIMES);
}
	YY_BREAK
case 50:
YY_RULE_SETUP
{
  return scan_throw(KRONDIVIDE);
}
	YY_BREAK
case 51:
YY_RULE_SETUP
{
  return scan_throw(KRONRDIVIDE);
}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
{
    unput(yytext[yyleng - 1]);
    return scan_throw(CONTROLTIMES);
}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
{
    unput(yytext[yyleng - 1]);
    return scan_throw(CONTROLDIVIDE);
}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
{
    unput(yytext[yyleng - 1]);
    return scan_throw(CONTROLRDIVIDE);
}
	YY_BREAK
case 55:
YY_RULE_SETUP
{
  return scan_throw(EQ);
}
	YY_BREAK
case 56:
YY_RULE_SETUP
{
  return scan_throw(NE);
}
	YY_BREAK
case 57:
YY_RULE_SETUP
{
  return scan_throw(LT);
}
	YY_BREAK
case 58:
YY_RULE_SETUP
{
  return scan_throw(GT);
}
	YY_BREAK
case 59:
YY_RULE_SETUP
{
  return scan_throw(LE);
}
	YY_BREAK
case 60:
YY_RULE_SETUP
{
  return scan_throw(GE);
}
	YY_BREAK
case 61:
YY_RULE_SETUP
{
  return scan_throw(ASSIGN);
 }
	YY_BREAK
case 62:
YY_RULE_SETUP
{
  DEBUG("yy_push_state(MATRIX)");
  yy_push_state(MATRIX);
  ParserSingleInstance::pushControlStatus(Parser::WithinMatrix);
  return scan_throw(LBRACK);
}
	YY_BREAK
case 63:
YY_RULE_SETUP
{
  return scan_throw(RBRACK);
}
	YY_BREAK
case 64:
YY_RULE_SETUP
{
  return scan_throw(DOT);
}
	YY_BREAK
case 65:
YY_RULE_SETUP
{
    ParserSingleInstance::pushControlStatus(Parser::WithinDots);
    yy_push_state(LINEBREAK);
}
	YY_BREAK
case 66:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] INTEGER : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(VARINT);
}
	YY_BREAK
case 67:
YY_RULE_SETUP
{
  scan_exponent_convert(yytext);
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
  scan_step();
  return scan_throw(VARFLOAT);
}
	YY_BREAK
case 68:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] NUMBER : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(NUM);
}
	YY_BREAK
case 69:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] LITTLE : " << yytext << std::endl;
#endif
  scan_step();
  return scan_throw(NUM);
}
	YY_BREAK
case 70:
YY_RULE_SETUP
{
    wchar_t *pwText = to_wide_string(yytext);
    if (yytext != NULL && pwText == NULL)
    {
        std::string str = "can not convert'";
        str += yytext;
        str += "' to UTF-8";
        std::cerr << "[ERROR] " << str << std::endl;
        exit_status = SCAN_ERROR;
        scan_error("can not convert string to UTF-8");
        yyterminate();
    }
    yylval.str = new std::wstring(pwText);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] ID : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(ID);
}
	YY_BREAK
case 71:
YY_RULE_SETUP
{
  yylval.comment = new std::wstring();
  comment_level = 1;
  ParserSingleInstance::pushControlStatus(Parser::WithinBlockComment);
  yy_push_state(REGIONCOMMENT);
}
	YY_BREAK
case 72:
YY_RULE_SETUP
{
  pstBuffer = new std::string();
  yy_push_state(LINECOMMENT);
}
	YY_BREAK
case 73:
YY_RULE_SETUP
{
  pstBuffer = new std::string();
  yy_push_state(DOUBLESTRING);
}
	YY_BREAK
case 74:
YY_RULE_SETUP
{
  /*
  ** Matrix Transposition special behaviour
  ** ID' []' toto()' are transposition call
  */
  if (last_token == ID
      || last_token == RBRACK
      || last_token == RPAREN
      || last_token == RBRACE)
    {
      return scan_throw(QUOTE);
    }
  else {
    pstBuffer = new std::string();
    yy_push_state(SIMPLESTRING);
  }
}
	YY_BREAK
case 75:
YY_RULE_SETUP
{
  scan_step();
  scan_throw(SPACES);
}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 1;
  yylloc.last_column = 1;
  scan_step();
  if (last_token != EOL) {
      return scan_throw(EOL);
  }
}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 1;
  yylloc.last_column = 1;
  scan_step();
  scan_throw(EOL);
}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 1;
  yylloc.last_column = 1;
  scan_step();
  scan_throw(EOL);
}
	YY_BREAK
case 79:
YY_RULE_SETUP
{
    std::string str = "unexpected token '";
    str += yytext;
    str += "'";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yyterminate();
}
	YY_BREAK

case 80:
YY_RULE_SETUP
{
      return scan_throw(COLON);
  }
	YY_BREAK
case 81:
YY_RULE_SETUP
{
    DEBUG("yy_pop_state()");
    yy_pop_state();
    ParserSingleInstance::popControlStatus();
    return scan_throw(RBRACK);
  }
	YY_BREAK
case 82:
YY_RULE_SETUP
{
    yy_pop_state();
    ParserSingleInstance::popControlStatus();
    return scan_throw(RBRACE);
  }
	YY_BREAK
case 83:
YY_RULE_SETUP
{
    return scan_throw(PLUS);
  }
	YY_BREAK
case 84:
YY_RULE_SETUP
{
    return scan_throw(MINUS);
  }
	YY_BREAK
case 85:
YY_RULE_SETUP
{
   int i;
    for (i = yyleng - 1 ; i >= 0 ; --i)
      {
	unput(yytext[i]);
      }
    yy_push_state(MATRIXMINUSID);
    if (last_token != LBRACK
	&& last_token != EOL
	&& last_token != SEMI)
      {
	return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 86:
YY_RULE_SETUP
{
      int i;
      for (i = yyleng - 1 ; i >= 0 ; --i)
      {
          unput(yytext[i]);
      }
      yy_push_state(MATRIXMINUSID);
      if (last_token != LBRACK
          && last_token != EOL
          && last_token != SEMI)
      {
          return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 87:
YY_RULE_SETUP
{
      int i;
      for (i = yyleng - 1 ; i >= 0 ; --i)
      {
          unput(yytext[i]);
      }
      yy_push_state(MATRIXMINUSID);
      if (last_token != LBRACK
          && last_token != EOL
          && last_token != SEMI)
      {
          return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 88:
YY_RULE_SETUP
{
      int i;
      for (i = yyleng - 1 ; i >= 0 ; --i)
      {
          unput(yytext[i]);
      }
      yy_push_state(MATRIXMINUSID);
      if (last_token != LBRACK
          && last_token != EOL
          && last_token != SEMI)
      {
          return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 89:
YY_RULE_SETUP
{
      int i;
      for (i = yyleng - 1 ; i >= 0 ; --i)
      {
          unput(yytext[i]);
      }
      yy_push_state(MATRIXMINUSID);
      if (last_token != LBRACK
          && last_token != EOL
          && last_token != SEMI
          )
      {
          return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 90:
YY_RULE_SETUP
{
    std::string str = "unexpected token '";
    str += yytext;
    str += "' within a matrix.";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yyterminate();
  }
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
{
      /* Just do nothing */
      scan_throw(EOL);
  }
	YY_BREAK
case YY_STATE_EOF(MATRIX):
{
      yy_pop_state();
  }
	YY_BREAK

case 92:
YY_RULE_SETUP
{
    return scan_throw(MINUS);
  }
	YY_BREAK
case 93:
YY_RULE_SETUP
{
     /* Do Nothing. */
  }
	YY_BREAK
case 94:
YY_RULE_SETUP
{
    yy_pop_state();
    yylval.number = atof(yytext);
#ifdef TOKENDEV
    std::cout << "--> [DEBUG] INTEGER : " << yytext << std::endl;
#endif
    scan_step();
    return scan_throw(VARINT);
  }
	YY_BREAK
case 95:
YY_RULE_SETUP
{
    yy_pop_state();
    yylval.number = atof(yytext);
#ifdef TOKENDEV
    std::cout << "--> [DEBUG] NUMBER : " << yytext << std::endl;
#endif
    scan_step();
    return scan_throw(NUM);
  }
	YY_BREAK
case 96:
YY_RULE_SETUP
{
    yy_pop_state();
    yylval.number = atof(yytext);
#ifdef TOKENDEV
    std::cout << "--> [DEBUG] LITTLE : " << yytext << std::endl;
#endif
    scan_step();
    return scan_throw(NUM);
  }
	YY_BREAK
case 97:
YY_RULE_SETUP
{
    yy_pop_state();
    scan_exponent_convert(yytext);
    yylval.number = atof(yytext);
#ifdef TOKENDEV
    std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
    scan_step();
    return scan_throw(VARFLOAT);
  }
	YY_BREAK
case 98:
YY_RULE_SETUP
{
    yy_pop_state();
    wchar_t* pwText = to_wide_string(yytext);
    if (yytext != NULL && pwText == NULL)
    {
        std::string str = "can not convert'";
        str += yytext;
        str += "' to UTF-8";
        std::cerr << "[ERROR] " << str << std::endl;
        exit_status = SCAN_ERROR;
        scan_error("can not convert string to UTF-8");
        yyterminate();
    }
    yylval.str = new std::wstring(pwText);
#ifdef TOKENDEV
    std::cout << "--> [DEBUG] ID : " << yytext << std::endl;
#endif
    scan_step();
    return scan_throw(ID);
  }
	YY_BREAK
case 99:
YY_RULE_SETUP
{
    /* Do Nothing. */
  }
	YY_BREAK
case 100:
YY_RULE_SETUP
{
    std::string str = "unexpected token '";
    str += yytext;
    str += "' within a matrix.";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yyterminate();
  }
	YY_BREAK

case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
{
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    scan_step();
    yy_pop_state();
    ParserSingleInstance::popControlStatus();
  }
	YY_BREAK
case 102:
YY_RULE_SETUP
{
    ++comment_level;
    yy_push_state(REGIONCOMMENT);
  }
	YY_BREAK
case 103:
YY_RULE_SETUP
{
    scan_throw(DOTS);
    pstBuffer = new std::string();
    yy_push_state(LINECOMMENT);
  }
	YY_BREAK
case 104:
YY_RULE_SETUP
{
    /* Do nothing... */
  }
	YY_BREAK
case YY_STATE_EOF(LINEBREAK):
{
      yy_pop_state();
  }
	YY_BREAK
case 105:
YY_RULE_SETUP
{
    std::string str = "unexpected token '";
    str += yytext;
    str += "' after line break with .. or ...";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yy_pop_state();
    yyterminate();
  }
	YY_BREAK

case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
{
    //yylloc.last_line += 1;
    //yylloc.last_column = 1;
    //scan_step();
    yy_pop_state();
    unput('\n');
    /*
    ** To forgot comments after lines break
    */
    if (last_token != DOTS)
    {
        //std::cerr << "pstBuffer = {" << *pstBuffer << "}" << std::endl;
        //std::cerr << "pstBuffer->c_str() = {" << pstBuffer->c_str() << "}" << std::endl;
        wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
        //std::wcerr << L"pwstBuffer = W{" << pwstBuffer << L"}" << std::endl;
        if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
        {
            std::string str = "can not convert'";
            str += pstBuffer->c_str();
            str += "' to UTF-8";
            std::cerr << "[ERROR] " << str << std::endl;
            exit_status = SCAN_ERROR;
            scan_error("can not convert string to UTF-8");
            yyterminate();
        }
        yylval.comment = new std::wstring(pwstBuffer);
        delete pstBuffer;
        FREE (pwstBuffer);
        return scan_throw(COMMENT);
    }
  }
	YY_BREAK
case YY_STATE_EOF(LINECOMMENT):
{
    yy_pop_state();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
    if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
    {
        std::string str = "can not convert'";
        str += pstBuffer->c_str();
        str += "' to UTF-8";
        std::cerr << "[ERROR] " << str << std::endl;
        exit_status = SCAN_ERROR;
        scan_error("can not convert string to UTF-8");
        yyterminate();
    }
    yylval.comment = new std::wstring(pwstBuffer);
    delete pstBuffer;
    FREE (pwstBuffer);
    return scan_throw(COMMENT);
  }
	YY_BREAK
case 107:
YY_RULE_SETUP
{
     // Put the char in a temporary CHAR buffer to go through UTF-8 trouble
     // only translate to WCHAR_T when popping state.
     *pstBuffer += yytext;
  }
	YY_BREAK

case 108:
YY_RULE_SETUP
{
    --comment_level;
    if (comment_level == 0) {
      ParserSingleInstance::popControlStatus();
      yy_pop_state();
      //return scan_throw(BLOCKCOMMENT);
    }
  }
	YY_BREAK
case 109:
YY_RULE_SETUP
{
    ++comment_level;
    yy_push_state(REGIONCOMMENT);
  }
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
{
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    scan_step();
    *yylval.comment += L"\n//";
  }
	YY_BREAK
case 111:
YY_RULE_SETUP
{
      *yylval.comment += std::wstring(to_wide_string(yytext));
  }
	YY_BREAK
case YY_STATE_EOF(REGIONCOMMENT):
{
    std::string str = "unexpected end of file in a comment";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yy_pop_state();
    yyterminate();
  }
	YY_BREAK

case 112:
YY_RULE_SETUP
{
    *pstBuffer += "\"";
  }
	YY_BREAK
case 113:
YY_RULE_SETUP
{
    *pstBuffer += "'";
  }
	YY_BREAK
case 114:
YY_RULE_SETUP
{
    *pstBuffer += "\"";
  }
	YY_BREAK
case 115:
YY_RULE_SETUP
{
    *pstBuffer += "'";
  }
	YY_BREAK
case 116:
YY_RULE_SETUP
{
    yy_pop_state();
    scan_step();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
    if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
    {
        std::string str = "can not convert'";
        str += pstBuffer->c_str();
        str += "' to UTF-8";
        std::cerr << "[ERROR] " << str << std::endl;
        exit_status = SCAN_ERROR;
        scan_error("can not convert string to UTF-8");
        yyterminate();
    }
    yylval.str = new std::wstring(pwstBuffer);
    delete pstBuffer;
    FREE(pwstBuffer);
    return scan_throw(STR);
  }
	YY_BREAK
case 117:
YY_RULE_SETUP
{
    std::string str = "Heterogeneous string detected, starting with ' and ending with \".";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yy_pop_state();
    yyterminate();
  }
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
{
    std::string str = "unexpected end of line in a string.";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    yy_pop_state();
    yyterminate();
  }
	YY_BREAK
case YY_STATE_EOF(SIMPLESTRING):
{
    std::string str = "unexpected end of file in a string.";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yy_pop_state();
    yyterminate();
  }
	YY_BREAK
case 119:
YY_RULE_SETUP
{
    scan_step();
    *pstBuffer += yytext;
  }
	YY_BREAK

case 120:
YY_RULE_SETUP
{
    *pstBuffer += "\"";
  }
	YY_BREAK
case 121:
YY_RULE_SETUP
{
    *pstBuffer += "'";
  }
	YY_BREAK
case 122:
YY_RULE_SETUP
{
    *pstBuffer += "\"";
  }
	YY_BREAK
case 123:
YY_RULE_SETUP
{
    *pstBuffer += "'";
  }
	YY_BREAK
case 124:
YY_RULE_SETUP
{
    yy_pop_state();
    scan_step();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
    if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
    {
        std::string str = "can not convert'";
        str += pstBuffer->c_str();
        str += "' to UTF-8";
        std::cerr << "[ERROR] " << str << std::endl;
        exit_status = SCAN_ERROR;
        scan_error("can not convert string to UTF-8");
        yyterminate();
    }
    yylval.str = new std::wstring(pwstBuffer);
    delete pstBuffer;
    FREE(pwstBuffer);
    return scan_throw(STR);
  }
	YY_BREAK
case 125:
YY_RULE_SETUP
{
    std::string str = "Heterogeneous string detected, starting with \" and ending with '.";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yy_pop_state();
    yyterminate();
  }
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
{
    std::string str = "unexpected end of line in a string";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    yyterminate();
  }
	YY_BREAK
case 127:
YY_RULE_SETUP
{
    //yylloc.last_line += 1;
    scan_step();
  }
	YY_BREAK
case YY_STATE_EOF(DOUBLESTRING):
{
    std::string str = "unexpected end of file in a string";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yy_pop_state();
    yyterminate();
  }
	YY_BREAK
case 128:
YY_RULE_SETUP
{
    scan_step();
    *pstBuffer += yytext;
  }
	YY_BREAK

case 129:
YY_RULE_SETUP
{
        if (last_token == ID)
        {
            scan_throw(SPACES);
            return ID;
        }
    }
	YY_BREAK
case 130:
YY_RULE_SETUP
{
        BEGIN(INITIAL);
        return scan_throw(SEMI);
    }
	YY_BREAK
case 131:
YY_RULE_SETUP
{
        BEGIN(INITIAL);
        return scan_throw(COMMA);
    }
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
{
        BEGIN(INITIAL);
        return scan_throw(EOL);
    }
	YY_BREAK
case 133:
YY_RULE_SETUP
{
        yylval.str = new std::wstring(to_wide_string(yytext));
        return scan_throw(STR);
    }
	YY_BREAK
case YY_STATE_EOF(SHELLMODE):
{
        BEGIN(INITIAL);
    }
	YY_BREAK

case 134:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(MATRIXMINUSID):
			case YY_STATE_EOF(BEGINID):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 763 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 763 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 762);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

int scan_throw(int token) {
  last_token = token;
#ifdef DEV
  std::cout << "--> [DEBUG] TOKEN : " << token << std::endl;
#endif
  return token;
}

void scan_step() {
  yylloc.first_line = yylloc.last_line;
  yylloc.first_column = yylloc.last_column;
}

void scan_error(std::string msg)
{
  wchar_t* pstMsg = to_wide_string(msg.c_str());

  //std::wcerr << pstMsg << std::endl;
  ParserSingleInstance::PrintError(pstMsg);
  ParserSingleInstance::setExitStatus(Parser::Failed);
  FREE(pstMsg);
}

/*
** convert floating numbers to C standard
** 1.2d-3 -> 1.2e-3
** 1.2D-3 -> 1.2e-3
*/
void scan_exponent_convert(char *in)
{
  char *pString;
  while((pString=strpbrk(in,"d"))!=NULL)
    {
      *pString='e';
    }
  while((pString=strpbrk(in,"D"))!=NULL)
    {
      *pString='e';
    }
}

#ifdef _MSC_VER
int isatty (int desc)
{
  return 0;
}
#endif

