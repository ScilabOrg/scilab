
#line 3 "src/cpp/scanscilab.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 130
#define YY_END_OF_BUFFER 131
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[884] =
    {   0,
    16405,  131,   78,  130,   75,   78,  130,   76,  130,   76,
       78,  130,   73,   78,  130,   70,   78,  130,   24,   78,
      130,   70,   78,  130,   27,   78,  130,   74,   78,  130,
       31,   78,  130,   32,   78,  130,   45,   78,  130,   44,
       78,  130,   34,   78,  130,   43,   78,  130,   64,   78,
      130,   46,   78,  130,   66,   78,  130,   35,   78,  130,
       33,   78,  130,   57,   78,  130,   61,   78,  130,   58,
       78,  130,   70,   78,  130,   23,   78,  130,   62,   78,
      130,   47,   78,  130,   63,   78,  130,   48,   78,  130,
       70,   78,  130,   70,   78,  130,   70,   78,  130,   70,

       78,  130,   70,   78,  130,   70,   78,  130,   70,   78,
      130,   70,   78,  130,   70,   78,  130,   70,   78,  130,
       70,   78,  130,   70,   78,  130,   36,   78,  130,   29,
       78,  130,   37,   78,  130,   23,   78,  130,   78,  130,
       78,  130,   78,  130,   78,  130,   78,  130,   78,  130,
       78,  130,   78,  130,   75,   78,  130,16405,   70,   78,
      130,   70,   78,  130,   70,   78,  130,   70,   78,  130,
       70,   78,  130,   70,   78,  130,   70,   78,  130,   70,
       78,  130,   70,   78,  130,   70,   78,  130,   70,   78,
      130,   70,   78,  130,   70,   78,  130,   70,   78,  130,

       70,   78,  130,   78,  130,   78,  130,   78,  130,   78,
      130,   78,  130,   78,  130,   78,  130,   78,  130,  116,
      130,  115,  130,  115,  116,  130,  116,  130,  113,  116,
      130,  116,  130,  124,  130,  122,  130,  122,  124,  130,
      121,  124,  130,  124,  130,  124,  130,  108,  130,  107,
      130,  107,  108,  130,  108,  130,  108,  130,  104,  130,
      103,  130,  103,  104,  130,  102,  130,  101,  102,  130,
       98,  130,   98,  102,  130,  102,  130,   88,  130,   75,
       88,  130,   76,   88,  130,   73,   88,  130,   70,   88,
      130,   24,   88,  130,   70,   88,  130,   27,   88,  130,

       74,   88,  130,   31,   88,  130,   32,   88,  130,   45,
       88,  130,   81,   88,  130,   34,   88,  130,   82,   88,
      130,   64,   88,  130,   46,   88,  130,   66,   88,  130,
       35,   88,  130,   33,   88,  130,   57,   88,  130,   61,
       88,  130,   58,   88,  130,   23,   88,  130,   62,   88,
      130,   47,   88,  130,   79,   88,  130,   48,   88,  130,
       36,   88,  130,   29,   88,  130,   80,   88,  130,   23,
       88,  130,   88,  130,   88,  130,   88,  130,   88,  130,
       88,  130,   88,  130,   88,  130,   88,  130,   75,   88,
      130,   97,  130,   96,   97,  130,  130,   95,   97,  130,

       90,   97,  130,   89,   97,  130,   97,  130,   91,   97,
      130,   97,  130,   97,  130,   97,  130,   97,  130,   97,
      130,   97,  130,   97,  130,   97,  130,  129,  130,  125,
      130,  128,  130,  128,  130,   73,  130,   74,  130,  127,
      130,  126,  130,   22,  130,   22,  130,   22,  130,   22,
      130,   22,  130,   22,  130,   22,  130,   22,  130,   22,
      130,   22,  130,   22,  130,   22,  130,   22,  130,   22,
      130,  130,  130,  130,  130,  130,  130,  130,  130,   75,
       76,   70,   70,   26,   70,   25,   70,   28,   48,   38,
       39,   65,   40,   69,   41,   42,   71,   72,   68,   66,

       59,   56,   55,   60,   70,   70,   16,   70,   70,   70,
       70,   70,   70,    1,   70,   70,   70,   70,   70,   70,
       70,   70,   30,   70,   75,16405,   77,   77,   70,   70,
       26,   70,   25,   70,   70,   70,   16,   70,   70,   70,
       70,   70,   70,    1,   70,   70,   70,   70,   70,   70,
       70,   70,   70,  115,  109,  110,  111,  112,  114,  122,
      117,  118,  119,  120,  123,  107,  105,  106,  103,  101,
       98,   99,  100,   75,   75,   96,   95,   93,   92,   91,
       95,  129,  125,  128,   22,   22,   22,   22,   16,   22,
       22,   22,   22,   22,   22,    1,   22,   22,   22,   22,

       22,   22,   22,   22,   22,   70,   52,   49,   65,   50,
       51,   53,   68,   67,   54,   70,   70,   70,   70,    5,
       70,   14,   70,   70,   70,   70,   70,   70,   70,   70,
       18,   70,   70, 8213, 8213,   70,   70,   70,   70,   70,
        5,   70,   14,   70,   70,   70,   70,   70,   70,   70,
       70,   18,   70,   70,  114,  123,   87,   83,   92,   94,
       22,   22,   22,   22,   22,    5,   22,   14,   22,   22,
       22,   22,   22,   22,   22,   22,   18,   22,   22,   70,
       70,    9,   70,   70,    3,   70,   70,   70,   70,   70,
       70,   70,   70,    2,   70,   70,   70,   70,   70,    9,

       70,   70,    3,   70,   70,   70,   70,   70,   70,   70,
       70,    2,   70,   70,   70,   87,   86,   84,   95,   22,
       22,    9,   22,   22,    3,   22,   22,   22,   22,   22,
       22,   22,   22,    2,   22,   22,   22,   70,   70,   17,
       70,   19,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   15,   70,   70,   70,   17,   70,   19,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   15,   70,   84,
       85,   95,   22,   22,   17,   22,   19,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   15,   22,   70,    4,
       70,   70,   70,   13,   70,   70,   20,   70,    6,   70,

        7,   70,   70,    4,   70,   70,   70,   13,   70,   70,
       20,   70,    6,   70,    7,   70,   87,   22,    4,   22,
       22,   22,   13,   22,   22,   20,   22,    6,   22,    7,
       22,   70,   70,   70,   70,   70,   70,   70,   70,   87,
       22,   22,   22,   22,   70,   70,   10,   70,   70,   70,
       70,   10,   70,   70,   22,   22,   10,   22,   22,   12,
       70,   70,    8,   70,   12,   70,   70,    8,   70,   12,
       22,   22,    8,   22,   70,   70,   22,   11,   70,   11,
       70,   11,   22
    } ;

static yyconst flex_int16_t yy_accept[753] =
    {   0,
        1,    1,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    3,    5,    8,   10,   13,   16,   19,   22,   25,
       28,   31,   34,   37,   40,   43,   46,   49,   52,   55,
       58,   61,   64,   67,   70,   73,   76,   79,   82,   85,
       88,   91,   94,   97,  100,  103,  106,  109,  112,  115,
      118,  121,  124,  127,  130,  133,  136,  139,  141,  143,
      145,  147,  149,  151,  153,  155,  159,  162,  165,  168,
      171,  174,  177,  180,  183,  186,  189,  192,  195,  198,
      201,  204,  206,  208,  210,  212,  214,  216,  218,  220,

      222,  224,  227,  229,  232,  234,  236,  238,  241,  244,
      246,  248,  250,  252,  255,  257,  259,  261,  263,  266,
      268,  271,  273,  276,  278,  280,  283,  286,  289,  292,
      295,  298,  301,  304,  307,  310,  313,  316,  319,  322,
      325,  328,  331,  334,  337,  340,  343,  346,  349,  352,
      355,  358,  361,  364,  367,  370,  373,  375,  377,  379,
      381,  383,  385,  387,  389,  392,  394,  397,  398,  401,
      404,  407,  409,  412,  414,  416,  418,  420,  422,  424,
      426,  428,  430,  432,  434,  436,  438,  440,  442,  444,
      446,  448,  450,  452,  454,  456,  458,  460,  462,  464,

      466,  468,  470,  472,  473,  474,  475,  476,  477,  478,
      479,  480,  481,  482,  483,  484,  484,  484,  484,  484,
      484,  484,  484,  484,  486,  488,  489,  490,  490,  491,
      492,  493,  494,  495,  496,  497,  498,  498,  499,  500,
      501,  501,  502,  503,  504,  505,  505,  506,  507,  509,
      510,  511,  512,  513,  514,  516,  517,  518,  519,  520,
      521,  522,  523,  524,  525,  525,  525,  525,  525,  525,
      525,  525,  527,  528,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  530,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  533,  535,  536,  537,  539,

      540,  541,  542,  543,  544,  546,  547,  548,  549,  550,
      551,  552,  553,  554,  554,  554,  554,  554,  554,  554,
      554,  555,  556,  557,  558,  559,  560,  561,  562,  563,
      564,  565,  566,  567,  568,  569,  570,  571,  572,  573,
      574,  575,  575,  576,  577,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  579,  580,  581,  581,  582,  582,
      582,  582,  582,  582,  582,  582,  583,  584,  585,  586,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  588,
      589,  591,  592,  593,  594,  595,  596,  598,  599,  600,
      601,  602,  603,  604,  605,  606,  606,  606,  606,  606,

      606,  606,  606,  607,  607,  607,  607,  607,  607,  607,
      607,  608,  609,  610,  611,  612,  613,  614,  614,  615,
      616,  617,  618,  619,  620,  622,  624,  625,  626,  627,
      628,  629,  630,  631,  633,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  634,  635,  636,  637,  637,  637,
      637,  637,  637,  637,  637,  638,  639,  640,  641,  643,
      645,  646,  647,  648,  649,  650,  651,  652,  654,  655,
      655,  655,  655,  656,  657,  658,  658,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  659,

      659,  659,  659,  660,  660,  661,  661,  661,  661,  662,
      662,  662,  662,  662,  662,  662,  662,  663,  664,  665,
      666,  668,  670,  671,  672,  673,  674,  675,  676,  677,
      679,  680,  680,  680,  680,  681,  681,  681,  681,  682,
      684,  685,  687,  688,  689,  690,  691,  692,  693,  694,
      696,  697,  698,  698,  698,  698,  698,  698,  698,  698,
      698,  698,  698,  699,  699,  699,  699,  700,  702,  703,
      705,  706,  707,  708,  709,  710,  711,  712,  714,  715,
      716,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      718,  719,  719,  719,  719,  719,  719,  719,  719,  719,

      719,  719,  719,  720,  721,  721,  721,  721,  722,  724,
      725,  727,  728,  729,  730,  731,  732,  733,  734,  736,
      737,  738,  739,  740,  742,  744,  745,  746,  747,  748,
      749,  750,  751,  752,  754,  754,  754,  754,  754,  755,
      756,  758,  760,  761,  762,  763,  764,  765,  766,  767,
      768,  770,  770,  770,  770,  770,  770,  770,  770,  771,
      771,  772,  772,  772,  772,  773,  774,  775,  777,  779,
      780,  781,  782,  783,  784,  785,  786,  787,  789,  790,
      792,  793,  794,  796,  797,  799,  801,  803,  803,  804,
      806,  807,  808,  810,  811,  813,  815,  817,  817,  817,

      817,  818,  819,  821,  822,  823,  825,  826,  828,  830,
      832,  833,  834,  835,  836,  837,  838,  839,  840,  841,
      842,  843,  844,  845,  846,  847,  849,  850,  851,  852,
      854,  855,  856,  857,  859,  860,  862,  863,  865,  867,
      868,  870,  872,  873,  875,  876,  877,  878,  880,  882,
      884,  884
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,   25,   26,   25,   25,   25,   27,   27,   28,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   29,   25,   25,   25,   25,   25,   25,
       30,   31,   32,   33,   25,    1,   34,   35,   36,   37,

       38,   39,   25,   40,   41,   25,   42,   43,   25,   44,
       45,   25,   25,   46,   47,   48,   49,   25,   50,   25,
       51,   25,   52,   53,   54,   55,    1,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,    1,    1,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   60,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   62,   63,   63,   64,
       65,   65,   65,   66,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[67] =
    {   0,
        1,    2,    3,    3,    4,    5,    1,    6,    1,    4,
        7,    1,    1,    1,    4,    1,    8,    1,    9,    1,
        4,    1,    7,    1,    5,    1,    5,    5,    5,    1,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    1,    1,    1,    1,    1,    1,    1,    5,    5,
        5,    5,    5,    5,    5,    5
    } ;

static yyconst flex_int16_t yy_base[771] =
    {   0,
        0,   65,   65,   74,  129,  132,  137,  140,   77,   82,
      157,  160,  178, 1558,  244,    0,  309,  313,  334,    0,
     1559, 2662, 1545, 2662, 1542, 2662,  106, 2662,  373, 1533,
     2662, 2662, 2662,   59, 2662, 2662, 2662,  396,   70,  403,
     2662, 2662,   72, 1517, 1515,  414, 1512, 2662, 1514, 2662,
     2662,  417,  420,  422,  443,  445,  460,  467,  474,  481,
      488,  495,  511, 2662, 1471, 2662, 1496,   61, 1459,   64,
       41,  264,   90,  269, 1459,  558,  623,  688,  516,  519,
      540,  542,  554,  547,  587,  524,  601,  603,  605,  608,
      629,  275, 1454,  347,   95,  360,   99,  367, 1454, 2662,

     2662, 1504,  421,  442, 1479, 2662, 2662, 1489,  450,  459,
     1468, 2662, 2662, 1481, 1462, 1466, 2662, 2662, 1460, 2662,
     1407, 2662, 1405,  462, 2662,  498, 1403, 2662,  631, 2662,
        0, 1388, 2662, 2662, 2662,  160, 2662, 2662, 2662,  681,
      515,  572, 2662, 2662,  384, 1373, 1371, 1370, 2662, 1367,
     2662, 2662, 2662, 1329, 2662, 1356,  420, 1315,  547,  354,
      550,  400,  555, 1303,  662, 2662, 1353, 2662,  642, 2662,
     2662, 1331,  692,  615, 1286,  639,  441,  664,  447,  667,
     1282,    0, 1328, 2662, 1323, 2662, 2662, 2662, 2662,  679,
      696, 1278, 1279, 1245,  487,  434, 1192, 1184, 1174, 1182,

      487,  538, 1175,  675, 1144,  707,  500,  710,  543,  713,
     1144, 1190, 2662,  744,  746,  720, 1133,  723,  582,  730,
      588,  733, 1121,  768,  770, 2662, 2662,    0, 2662,  468,
     1158, 1145,  774, 1136, 2662, 2662,    0, 2662,  783,  786,
      803, 2662, 2662, 2662, 2662,    0,  797,  799,  801,  803,
      815,  827,  830,  833,  848,  851,  854,  866,  869,  883,
      887,  891, 2662,  895,  828,  871,  884,  888,  891,  894,
      897,  954, 2662, 1140,  901,  912, 1081,  915,  618,  918,
      623,  921, 1082, 1134,  952,  954,  928, 1073,  931,  636,
      938,  677,  941, 1067,  982,  994,  996,  998, 1000, 1012,

     1024, 1027, 1039, 1042, 1056, 1060, 1063, 1077, 1085, 1089,
     1093, 1101, 1106,  948,  951, 1040, 1090, 1094, 1099, 1102,
     2662, 2662, 2662, 2662, 2662, 1102, 2662, 2662, 2662, 2662,
     2662, 1098, 2662, 2662, 2662, 2662, 1108, 2662, 2662, 2662,
      851, 1144, 1162, 1101, 1108, 1123, 1043, 1126,  758, 1129,
      776, 1132, 1038, 1174, 1194, 1197, 1093,    0, 1138, 1141,
     1161, 1169, 1172, 1180, 1183,    0, 1091, 2662,    0, 1037,
     1186, 1024, 1189,  832, 1192,  843, 1195, 1024, 1036,  859,
        0, 1022, 1025, 1008, 1003, 1006,    0,  998,  988,  969,
      960,  954,  939,  918,    0, 1198, 1201, 1204, 1207, 1210,

     1213, 1216, 1247, 1221, 1224, 1227, 1231, 1236, 1240, 1243,
     2662, 2662, 2662, 2662, 2662, 2662, 1283,  914,  906, 2662,
     1275, 1277, 1283, 1279, 1300, 1304, 1306, 1312, 1308, 1329,
     1333, 1335, 1341, 1347, 1359, 1309, 1334, 1343, 1351, 1347,
      860, 1362,  880, 1365,  974, 1368,  857, 1371, 1374, 1377,
     1380, 1383, 1386, 1389, 2662,  902, 1420, 1394, 1397, 1400,
     1404, 1409, 1413, 1416, 1447, 1449, 1454, 1470, 1472, 1475,
     1477, 1493, 1498, 1500, 1505, 1522, 1527, 1529, 1535, 1523,
     1528, 1531, 2662, 2662, 1531,  873, 1535, 1542,  813, 1545,
      993, 1548, 1000, 1551,  812, 1554, 1557, 1560, 1563, 1566,

     1569, 1572, 1612,  845,  841, 1576, 1579, 1584,  813, 1587,
     1590, 1595, 1598, 1601, 1604, 1607,  814,  803,  803,  799,
      769,    0,  770,  767,  762,  735,  744,  698,  693,    0,
      685, 1610, 1613, 1616, 1647, 1621, 1624, 1631, 1662, 1664,
     1668, 1670, 1685, 1691, 1693, 1697, 1709, 1722, 1724, 1736,
     1738, 1740, 1671, 1724, 1733, 1736, 1739, 1742, 1745, 1748,
     1751, 1754, 1785, 1759, 1762, 1769, 1800, 1802, 1806, 1808,
     1823, 1829, 1831, 1835, 1847, 1860, 1862, 1874, 1876, 1878,
     1868, 1809,  668, 1862, 1008, 1879, 1019, 1882,  659, 1922,
     1924, 1475, 1888, 1896, 1899, 1907, 1910, 1913, 1916, 1919,

     1922, 1925,    0,  677, 1928, 1931, 1934,  668,    0,  627,
      622,  612,  604,  612,  581,  568,  558,  549,    0,  542,
        0, 1965, 1967, 1969, 1971, 1973, 1994, 1996, 2001, 2018,
     2023, 2025, 2030, 2046, 1970, 2023, 2026,    0, 2048, 2060,
     2062, 2064, 2076, 2078, 2090, 2104, 2106, 2111, 2118, 2132,
     2134, 2111, 2118, 2121, 2127, 2130, 2133, 2136, 2176,  558,
      554, 2140, 2143, 2148,    0,  518,    0,    0,    0,  515,
      505,  505,  498,  471,  474,  463,  467,    0, 2179, 2182,
     2187, 2200, 2203, 2205, 2208, 2221, 2226,    0, 2229, 2233,
     2247, 2251, 2259, 2263, 2277, 2280, 2284, 2264, 2273, 2277,

        0,  451,    0,  430,  399,    0,  387,    0,    0,    0,
     2298, 2310, 2312, 2316, 2333, 2337, 2340, 2354,    0,  374,
      281,  132,  127, 2361, 2358, 2375, 2379, 2382, 2396, 2400,
     2403,  110,   97,    0,   85, 2417, 2421, 2424, 2429, 2442,
     2445,    0,   44,    0, 2447, 2450,   30, 2468, 2471,    0,
     2662, 2519, 2528, 2537, 2546, 2555, 2564, 2569, 2577, 2582,
     2587, 2596, 2601, 2610, 2618, 2626, 2633, 2642, 2647, 2652
    } ;

static yyconst flex_int16_t yy_def[771] =
    {   0,
      751,    1,  752,  752,  753,  753,  754,  754,  755,  755,
      756,  756,  751,   13,  751,   15,  757,  757,  751,   19,
      751,  751,  751,  751,  751,  751,  758,  751,  758,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,   29,  751,  751,  751,  751,
      751,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  759,  760,  760,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,  751,  751,  751,  751,  751,  751,  751,  751,  751,

      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,   29,  751,
       29,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  761,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  762,  751,  751,  751,  751,  751,  751,  751,  763,
      763,  191,  191,  191,  191,  191,  191,  191,  191,  191,

      191,  191,  191,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,   29,   29,  751,  751,  751,  751,  751,
      751,  751,  751,   29,   29,  751,  751,  764,  751,  751,
      751,  751,  751,  751,  751,  751,  765,  751,  751,  751,
      751,  751,  751,  751,  751,  766,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,  751,   29,  751,  751,  751,  751,  751,  751,
      751,  759,  751,  751,  767,  751,  751,  751,  751,  751,
      751,  751,  751,  768,   78,   78,  751,  751,  751,  751,
      751,  751,  751,  751,   78,   78,   78,   78,   78,   78,

       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  769,  751,  751,  761,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  345,  751,  751,
      751,  751,  751,  751,  751,  762,  751,  751,  191,  191,
      751,  751,  751,  751,  751,  751,  751,  751,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  751,  751,  751,  751,  751,

      751,  751,   29,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,  751,  751,  751,  767,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  768,   78,  751,  751,  751,
      751,  751,  751,  751,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,  751,
      751,  751,  751,  751,  770,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,

      751,  751,  751,  751,  751,  751,  751,  751,  191,  751,
      751,  751,  751,  751,  751,  751,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  751,  751,  751,   29,  751,  751,  751,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,   78,  751,  751,  751,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
      770,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,

      751,  751,  345,  191,  751,  751,  751,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,  751,  751,  751,  439,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  345,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,   29,   29,
       29,   29,   29,   29,   29,   29,   29,  439,   78,   78,
       78,   78,   78,   78,   78,   78,   78,  751,  751,  751,

      581,  191,  191,  191,  191,  191,  191,  191,  191,  191,
       29,   29,   29,   29,   78,   78,   78,   78,  581,  191,
      191,  191,  191,   29,   29,   29,   29,   78,   78,   78,
       78,  191,  191,  191,  191,   29,   29,   29,   78,   78,
       78,  191,  191,  191,   29,   78,  191,   29,   78,  191,
        0,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751
    } ;

static yyconst flex_int16_t yy_nxt[2729] =
    {   0,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   46,   46,   46,   48,
       49,   50,   51,   46,   52,   53,   54,   55,   56,   57,
       58,   46,   46,   46,   59,   60,   61,   62,   46,   63,
       46,   64,   65,   66,   67,   22,   22,   22,   68,   69,
       70,   71,   72,   73,   74,   75,   76,  101,  102,  103,
       77,  227,   78,  750,  104,  228,  101,  102,  103,  118,
      119,  105,  236,  104,  118,  119,  237,  238,  747,   79,
      105,   79,   79,   79,  242,  243,  267,  267,   79,   80,

       81,   82,   83,   84,   85,   86,   79,   79,   79,   87,
       88,   89,   90,   79,   91,   79,  264,  264,  264,  266,
      266,  266,  744,   92,   93,   94,   95,   96,   97,   98,
       99,  107,  108,  109,  107,  108,  109,  743,  110,  113,
      114,  110,  113,  114,  215,  111,  269,  269,  111,  115,
      316,  316,  115,  742,  116,  318,  318,  116,  121,  122,
      123,  121,  122,  123,  216,  217,  218,  219,  220,  221,
      222,  223,  227,  735,  124,  734,  228,  124,  125,  126,
       24,  127,  128,  129,  130,  131,  132,  133,  134,  135,
      136,  137,  138,  139,  140,  141,  142,  143,  144,  145,

      146,  147,  129,  148,  129,  129,  129,  149,  150,  151,
      152,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  153,
      154,  155,  156,  125,  125,  125,  157,  158,  159,  160,
      161,  162,  163,  164,  166,  167,  168,  166,  166,  169,
      166,  169,  166,  166,  166,  166,  166,  170,  166,  171,
      172,  166,  173,  166,  166,  166,  166,  166,  169,  166,
      169,  169,  169,  166,  166,  166,  166,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  166,  166,  166,  166,  166,

      166,  166,  174,  175,  176,  177,  178,  179,  180,  181,
      183,  184,  185,  186,  183,  184,  185,  186,  187,  268,
      268,  268,  187,  188,  270,  270,  270,  188,  733,  189,
      313,  313,  313,  189,  168,  168,  168,  168,  168,  190,
      168,  191,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  191,  168,
      191,  191,  191,  168,  168,  168,  168,  191,  192,  193,
      194,  195,  196,  197,  198,  191,  191,  191,  199,  200,
      201,  202,  191,  203,  191,  168,  168,  168,  168,  168,
      168,  168,  204,  205,  206,  207,  208,  209,  210,  211,

      224,  225,  315,  315,  315,  229,  242,  243,  230,  267,
      267,  224,  231,  232,  233,  317,  317,  317,  732,  239,
      225,  240,  319,  319,  319,  322,  234,  723,  235,  241,
      323,  216,  217,  218,  219,  220,  221,  222,  223,  241,
      241,  214,  214,  722,  214,  214,  324,  214,  214,  214,
      214,  325,  214,  248,  328,  214,  269,  269,  214,  329,
      214,  214,  247,  330,  214,  721,  249,  214,  331,  214,
      214,  214,  214,  214,  339,  264,  264,  264,  384,  340,
      235,  214,  385,  214,  412,  250,  251,  214,  214,  252,
      214,  720,  214,  253,  214,  214,  361,  361,  214,  341,

      254,  214,  214,  363,  363,  255,  710,  214,  214,  214,
      709,  342,  214,  342,  214,  214,  214,  708,  257,  214,
      707,  256,  214,  214,  390,  258,  214,  236,  214,  382,
      383,  237,  238,  214,  260,  214,  391,  259,  214,  214,
      261,  706,  214,  285,  285,  705,  285,  285,  704,  214,
      262,  285,  285,  703,  285,  398,  398,  285,  214,  272,
      273,  274,  305,  285,  297,  702,  285,  285,  285,  285,
      285,  285,  661,  298,  285,  285,  661,  392,  285,  678,
      285,  285,  285,  393,  677,  285,  299,  285,  239,  285,
      240,  302,  285,  676,  285,  303,  300,  301,  241,  400,

      400,  285,  266,  266,  266,  268,  268,  268,  241,  241,
      270,  270,  270,  675,  285,  285,  276,  277,  278,  279,
      280,  281,  282,  283,  284,  285,  674,  304,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  406,  406,  285,
      307,  285,  308,  285,  408,  408,  285,  310,  306,  673,
      285,  672,  285,  311,  309,  285,  285,  285,  214,  214,
      671,  286,  670,  343,  273,  274,  669,  285,  312,  214,
      358,  358,  358,  450,  450,  342,  285,  342,  214,  452,
      452,  287,  288,  289,  290,  291,  292,  293,  294,  284,
      229,  460,  460,  230,  360,  360,  360,  231,  232,  233,

      346,  347,  348,  349,  350,  351,  352,  353,  355,  668,
      356,  234,  666,  235,  658,  295,  296,  370,  357,  362,
      362,  362,  364,  364,  364,  652,  295,  620,  357,  357,
      395,  395,  395,  462,  462,  296,  619,  371,  372,  373,
      374,  375,  376,  377,  378,  618,  287,  288,  289,  290,
      291,  292,  293,  294,  371,  372,  373,  374,  375,  376,
      377,  378,  397,  397,  397,  399,  399,  399,  401,  401,
      401,  214,  214,  214,  214,  214,  214,  214,  405,  405,
      405,  617,  214,  616,  214,  407,  407,  407,  409,  409,
      409,  214,  233,  214,  403,  214,  214,  214,  214,  615,

      241,  417,  239,  614,  240,  613,  214,  612,  214,  241,
      241,  241,  241,  498,  498,  214,  418,  214,  418,  241,
      241,  419,  241,  241,  214,  214,  214,  214,  214,  214,
      214,  214,  500,  500,  421,  214,  611,  214,  610,  214,
      609,  214,  214,  214,  214,  422,  423,  608,  214,  424,
      214,  425,  341,  214,  214,  214,  604,  214,  214,  505,
      214,  214,  214,  505,  342,  214,  342,  599,  214,  428,
      593,  214,  426,  427,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  264,  264,  264,  214,  512,  512,  214,
      429,  590,  214,  214,  214,  214,  214,  214,  214,  514,

      514,  430,  284,  456,  214,  518,  519,  214,  431,  432,
      214,  214,  559,  214,  214,  214,  214,  553,  214,  214,
      433,  214,  214,  214,  419,  214,  264,  264,  264,  214,
      214,  435,  419,  214,  214,  555,  555,  434,  214,  264,
      264,  264,  214,  264,  264,  264,  436,  436,  436,  437,
      437,  437,  438,  438,  438,  272,  273,  274,  531,  440,
      441,  442,  443,  444,  445,  446,  447,  275,  275,  275,
      449,  449,  449,  451,  451,  451,  453,  453,  453,  285,
      285,  285,  285,  285,  285,  285,  459,  459,  459,  530,
      285,  529,  285,  461,  461,  461,  463,  463,  463,  285,

      528,  285,  457,  313,  313,  313,  313,  313,  313,  285,
      285,  527,  276,  277,  278,  279,  280,  281,  282,  283,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      557,  557,  285,  465,  285,  526,  285,  525,  285,  285,
      285,  285,  524,  285,  466,  467,  523,  285,  595,  595,
      285,  285,  285,  522,  285,  285,  597,  597,  468,  285,
      469,  521,  285,  654,  654,  285,  285,  285,  520,  285,
      285,  285,  470,  517,  285,  656,  656,  285,  472,  516,
      285,  510,  471,  285,  285,  509,  285,  285,  285,  285,
      285,  285,  367,  502,  285,  313,  313,  313,  285,  473,

      496,  285,  344,  285,  285,  285,  504,  285,  504,  337,
      474,  505,  285,  285,  484,  285,  285,  285,  483,  475,
      285,  285,  464,  285,  285,  476,  477,  285,  285,  285,
      458,  285,  285,  285,  285,  456,  285,  454,  448,  285,
      285,  479,  273,  478,  285,  313,  313,  313,  285,  480,
      480,  480,  415,  285,  481,  481,  481,  482,  482,  482,
      486,  414,  487,  343,  273,  274,  346,  347,  348,  349,
      350,  351,  352,  353,  413,  342,  410,  342,  345,  345,
      345,  497,  497,  497,  499,  499,  499,  501,  501,  501,
      404,  212,  354,  358,  358,  358,  358,  358,  358,  402,

      357,  396,  488,  489,  490,  491,  492,  493,  494,  495,
      357,  357,  503,  355,  394,  356,  358,  358,  358,  389,
      357,  388,  387,  357,  358,  358,  358,  506,  506,  506,
      357,  357,  386,  357,  357,  507,  507,  507,  508,  508,
      508,  369,  369,  369,  511,  511,  511,  513,  513,  513,
      515,  515,  515,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  532,  532,  532,  533,  533,
      533,  534,  534,  534,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  381,
      535,  536,  536,  536,  214,  537,  537,  537,  538,  538,

      538,  417,  214,  214,  214,  214,  214,  214,  539,  241,
      214,  214,  380,  214,  540,  214,  542,  214,  541,  241,
      241,  214,  214,  379,  214,  368,  214,  214,  214,  367,
      214,  214,  214,  214,  214,  214,  214,  365,  543,  214,
      214,  544,  214,  359,  214,  546,  214,  214,  545,  354,
      214,  214,  284,  214,  344,  214,  214,  214,  271,  214,
      214,  214,  214,  214,  552,  552,  552,  214,  214,  214,
      548,  214,  265,  214,  214,  214,  214,  547,  243,  214,
      214,  263,  549,  246,  550,  214,  214,  214,  214,  552,
      552,  552,  243,  245,  214,  244,  226,  214,  552,  552,

      552,  551,  439,  439,  439,  213,  214,  338,  337,  440,
      441,  442,  443,  444,  445,  446,  447,  554,  554,  554,
      556,  556,  556,  558,  558,  558,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  560,  560,
      560,  561,  561,  561,  562,  562,  562,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  336,  563,  564,  564,  564,  285,  565,  565,
      565,  566,  566,  566,  285,  285,  285,  285,  335,  334,
      567,  285,  285,  333,  332,  285,  568,  285,  660,  569,
      660,  327,  285,  661,  285,  326,  285,  285,  285,  285,

      285,  285,  285,  285,  285,  285,  321,  570,  285,  320,
      571,  314,  572,  285,  271,  285,  265,  285,  243,  285,
      285,  285,  285,  263,  285,  285,  285,  285,  285,  573,
      246,  285,  285,  285,  243,  574,  285,  245,  285,  244,
      285,  226,  576,  285,  213,  285,  212,  285,  575,  285,
      285,  591,  285,  487,  285,  285,  285,  285,  751,  165,
      285,  592,  285,  285,  751,  285,  751,  285,  751,  577,
      578,  592,  592,  285,  285,  751,  285,  579,  580,  580,
      580,  751,  285,  580,  580,  580,  580,  580,  580,  582,
      583,  584,  585,  586,  587,  588,  589,  485,  485,  485,

      594,  594,  594,  596,  596,  596,  598,  598,  598,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  600,  600,  600,  601,  601,  601,  602,  602,  602,
      503,  603,  603,  603,  603,  603,  603,  751,  357,  603,
      603,  603,  369,  369,  369,  369,  369,  369,  357,  357,
      369,  369,  369,  369,  369,  369,  605,  605,  605,  606,
      606,  606,  607,  607,  607,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  214,  214,  623,  623,  623,  623,
      623,  623,  622,  751,  751,  214,  623,  623,  623,  214,
      214,  214,  214,  751,  214,  214,  214,  214,  214,  751,

      214,  751,  214,  624,  751,  751,  214,  625,  214,  214,
      626,  214,  214,  214,  751,  214,  751,  214,  214,  214,
      214,  214,  751,  214,  214,  214,  439,  439,  439,  214,
      629,  214,  214,  627,  751,  214,  214,  214,  628,  751,
      214,  751,  630,  751,  214,  751,  751,  214,  751,  214,
      214,  214,  214,  751,  631,  751,  214,  632,  751,  633,
      214,  751,  214,  214,  214,  214,  214,  214,  214,  214,
      751,  214,  751,  751,  214,  634,  214,  751,  214,  439,
      439,  439,  751,  214,  751,  214,  751,  214,  439,  439,
      439,  439,  439,  439,  635,  635,  635,  636,  636,  636,

      637,  637,  637,  638,  638,  638,  638,  638,  638,  638,
      638,  638,  285,  285,  640,  640,  640,  640,  640,  640,
      639,  751,  751,  285,  640,  640,  640,  285,  285,  285,
      285,  751,  285,  285,  285,  285,  285,  751,  285,  751,
      285,  641,  751,  751,  285,  642,  285,  285,  643,  285,
      285,  285,  751,  285,  751,  285,  285,  285,  285,  285,
      751,  285,  285,  285,  581,  581,  581,  285,  646,  285,
      285,  644,  751,  285,  285,  285,  645,  751,  285,  751,
      647,  751,  285,  751,  751,  285,  751,  285,  285,  285,
      285,  751,  648,  751,  285,  649,  751,  650,  285,  751,

      285,  285,  285,  285,  285,  285,  285,  285,  751,  285,
      751,  751,  285,  651,  285,  751,  285,  653,  653,  653,
      751,  285,  751,  285,  751,  285,  582,  583,  584,  585,
      586,  587,  588,  589,  655,  655,  655,  657,  657,  657,
      590,  751,  659,  485,  485,  485,  751,  751,  592,  751,
      592,  485,  485,  485,  485,  485,  485,  751,  592,  592,
      592,  592,  485,  485,  485,  662,  662,  662,  663,  663,
      663,  664,  664,  664,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  214,  214,  214,  214,  214,  214,  214,  214,

      214,  214,  751,  214,  751,  214,  751,  214,  751,  214,
      751,  680,  679,  751,  214,  751,  214,  751,  214,  751,
      214,  214,  214,  214,  214,  688,  688,  688,  214,  214,
      751,  751,  214,  751,  214,  751,  682,  681,  751,  214,
      751,  214,  751,  214,  683,  214,  214,  751,  214,  751,
      214,  214,  214,  214,  751,  751,  214,  214,  214,  751,
      751,  214,  751,  214,  751,  214,  685,  684,  214,  687,
      214,  751,  686,  214,  214,  285,  285,  214,  688,  688,
      688,  688,  688,  688,  214,  751,  285,  285,  285,  285,
      285,  285,  285,  214,  751,  689,  751,  751,  285,  751,

      285,  751,  285,  285,  285,  285,  285,  285,  751,  285,
      751,  285,  751,  751,  690,  751,  285,  285,  285,  751,
      751,  691,  751,  285,  751,  285,  751,  751,  285,  751,
      692,  285,  285,  285,  285,  751,  751,  285,  285,  285,
      751,  751,  285,  751,  285,  285,  285,  693,  751,  285,
      751,  285,  751,  285,  695,  694,  285,  751,  285,  285,
      285,  285,  285,  751,  751,  696,  581,  581,  581,  751,
      285,  697,  285,  581,  581,  581,  581,  581,  581,  285,
      751,  285,  581,  581,  581,  698,  698,  698,  699,  699,
      699,  700,  700,  700,  659,  701,  701,  701,  701,  701,

      701,  751,  592,  701,  701,  701,  214,  214,  751,  214,
      214,  751,  592,  592,  214,  214,  751,  214,  751,  711,
      214,  751,  712,  751,  751,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  751,  214,  751,
      751,  214,  751,  214,  713,  714,  214,  214,  214,  214,
      214,  751,  214,  214,  214,  214,  285,  285,  751,  214,
      285,  285,  751,  751,  214,  751,  751,  285,  214,  715,
      751,  285,  751,  214,  285,  285,  285,  751,  285,  285,
      285,  751,  716,  751,  751,  285,  285,  285,  751,  285,
      285,  285,  751,  751,  285,  717,  751,  285,  285,  751,

      751,  285,  751,  718,  285,  285,  285,  285,  285,  751,
      285,  285,  285,  751,  751,  285,  751,  751,  285,  719,
      719,  719,  285,  751,  285,  214,  214,  285,  719,  719,
      719,  285,  719,  719,  719,  751,  214,  214,  214,  214,
      214,  751,  724,  214,  214,  214,  751,  751,  214,  751,
      214,  751,  751,  751,  214,  726,  751,  725,  751,  214,
      285,  285,  727,  214,  285,  285,  751,  285,  285,  751,
      751,  285,  751,  751,  751,  285,  751,  728,  285,  751,
      285,  285,  285,  730,  729,  214,  214,  285,  214,  214,
      751,  751,  285,  751,  751,  751,  214,  751,  737,  214,

      731,  285,  214,  214,  736,  214,  214,  214,  214,  285,
      285,  751,  751,  214,  751,  751,  738,  214,  751,  751,
      285,  751,  214,  285,  285,  739,  214,  285,  285,  285,
      285,  285,  751,  751,  285,  751,  740,  751,  285,  751,
      741,  285,  751,  285,  214,  214,  751,  285,  214,  214,
      285,  214,  214,  751,  751,  214,  285,  285,  751,  214,
      751,  751,  214,  751,  214,  745,  751,  285,  214,  285,
      285,  214,  285,  285,  214,  214,  285,  285,  285,  751,
      285,  751,  751,  285,  751,  214,  746,  751,  285,  285,
      748,  751,  285,  749,  214,  214,  214,  285,  285,  285,

      751,  751,  751,  751,  751,  751,  214,  751,  751,  285,
      751,  751,  751,  751,  751,  214,  751,  751,  285,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  214,  751,  751,  751,  214,  275,  275,
      751,  275,  275,  285,  751,  751,  285,  751,  751,  751,
      285,  345,  751,  751,  751,  345,  366,  751,  751,  751,

      366,  366,  366,  366,  366,  369,  751,  751,  751,  369,
      411,  411,  411,  411,  411,  411,  411,  411,  416,  416,
      416,  416,  416,  416,  416,  416,  420,  420,  420,  420,
      420,  420,  420,  420,  439,  751,  751,  439,  751,  751,
      751,  439,  455,  455,  455,  455,  455,  455,  751,  455,
      455,  485,  485,  751,  485,  485,  581,  751,  751,  751,
      581,   21,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,

      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751
    } ;

static yyconst flex_int16_t yy_chk[2729] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    2,    3,    3,    3,
        2,   34,    2,  747,    3,   34,    4,    4,    4,    9,
        9,    3,   39,    4,   10,   10,   39,   39,  743,    2,
        4,    2,    2,    2,   43,   43,   71,   71,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,   68,   68,   68,   70,
       70,   70,  735,    2,    2,    2,    2,    2,    2,    2,
        2,    5,    5,    5,    6,    6,    6,  733,    5,    7,
        7,    6,    8,    8,   27,    5,   73,   73,    6,    7,
       95,   95,    8,  732,    7,   97,   97,    8,   11,   11,
       11,   12,   12,   12,   27,   27,   27,   27,   27,   27,
       27,   27,  136,  723,   11,  722,  136,   12,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       17,   17,   17,   17,   18,   18,   18,   18,   17,   72,
       72,   72,   18,   17,   74,   74,   74,   18,  721,   17,
       92,   92,   92,   18,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       29,   29,   94,   94,   94,   38,  145,  145,   38,  160,
      160,   29,   38,   38,   38,   96,   96,   96,  720,   40,
       29,   40,   98,   98,   98,  103,   38,  707,   38,   40,
      103,   29,   29,   29,   29,   29,   29,   29,   29,   40,
       40,   46,   46,  705,   52,   52,  104,   53,   53,   54,
       54,  104,   46,   53,  109,   52,  162,  162,   53,  109,
       54,   46,   52,  110,   52,  704,   54,   53,  110,   54,
       55,   55,   56,   56,  124,  157,  157,  157,  196,  124,
      230,   55,  196,   56,  230,   55,   55,   57,   57,   56,
       55,  702,   56,   56,   58,   58,  177,  177,   57,  126,

       57,   59,   59,  179,  179,   58,  677,   57,   60,   60,
      676,  126,   59,  126,   58,   61,   61,  675,   60,   60,
      674,   59,   62,   62,  201,   61,   61,  141,   60,  195,
      195,  141,  141,   62,   62,   61,  201,   61,   63,   63,
       62,  673,   62,   79,   79,  672,   80,   80,  671,   63,
       63,   86,   86,  670,   79,  207,  207,   80,   63,   76,
       76,   76,   86,   79,   80,  666,   80,   81,   81,   82,
       82,   86,  661,   81,   84,   84,  660,  202,   81,  620,
       82,   83,   83,  202,  618,   84,   82,   81,  142,   82,
      142,   84,   83,  617,   84,   84,   83,   83,  142,  209,

      209,   83,  159,  159,  159,  161,  161,  161,  142,  142,
      163,  163,  163,  616,   85,   85,   76,   76,   76,   76,
       76,   76,   76,   76,   77,   85,  615,   85,   87,   87,
       88,   88,   89,   89,   85,   90,   90,  219,  219,   87,
       88,   88,   89,   89,  221,  221,   90,   90,   87,  614,
       88,  613,   89,   90,   89,   90,   91,   91,  129,  129,
      612,   77,  611,  165,  165,  165,  610,   91,   91,  129,
      174,  174,  174,  279,  279,  165,   91,  165,  129,  281,
      281,   77,   77,   77,   77,   77,   77,   77,   77,   78,
      140,  290,  290,  140,  176,  176,  176,  140,  140,  140,

      169,  169,  169,  169,  169,  169,  169,  169,  173,  608,
      173,  140,  604,  140,  589,   78,   78,  190,  173,  178,
      178,  178,  180,  180,  180,  583,   78,  531,  173,  173,
      204,  204,  204,  292,  292,   78,  529,  190,  190,  190,
      190,  190,  190,  190,  190,  528,   78,   78,   78,   78,
       78,   78,   78,   78,  191,  191,  191,  191,  191,  191,
      191,  191,  206,  206,  206,  208,  208,  208,  210,  210,
      210,  214,  214,  215,  215,  216,  216,  216,  218,  218,
      218,  527,  214,  526,  215,  220,  220,  220,  222,  222,
      222,  214,  233,  215,  215,  224,  224,  225,  225,  525,

      233,  239,  240,  524,  240,  523,  224,  521,  225,  239,
      233,  233,  240,  349,  349,  224,  241,  225,  241,  239,
      239,  241,  240,  240,  247,  247,  248,  248,  249,  249,
      250,  250,  351,  351,  247,  247,  520,  248,  519,  249,
      518,  250,  251,  251,  247,  248,  248,  517,  249,  250,
      250,  251,  341,  251,  252,  252,  509,  253,  253,  505,
      254,  254,  251,  504,  341,  252,  341,  495,  253,  254,
      489,  254,  252,  253,  252,  255,  255,  253,  256,  256,
      254,  257,  257,  265,  265,  265,  255,  374,  374,  256,
      256,  486,  257,  258,  258,  255,  259,  259,  256,  376,

      376,  257,  275,  456,  258,  380,  380,  259,  258,  259,
      260,  260,  447,  258,  261,  261,  259,  441,  262,  262,
      260,  260,  264,  264,  419,  261,  266,  266,  266,  262,
      260,  262,  418,  264,  261,  443,  443,  261,  262,  267,
      267,  267,  264,  268,  268,  268,  269,  269,  269,  270,
      270,  270,  271,  271,  271,  272,  272,  272,  394,  275,
      275,  275,  275,  275,  275,  275,  275,  276,  276,  276,
      278,  278,  278,  280,  280,  280,  282,  282,  282,  285,
      285,  286,  286,  287,  287,  287,  289,  289,  289,  393,
      285,  392,  286,  291,  291,  291,  293,  293,  293,  285,

      391,  286,  286,  314,  314,  314,  315,  315,  315,  295,
      295,  390,  272,  272,  272,  272,  272,  272,  272,  272,
      295,  296,  296,  297,  297,  298,  298,  299,  299,  295,
      445,  445,  296,  297,  297,  389,  298,  388,  299,  300,
      300,  296,  386,  297,  298,  298,  385,  299,  491,  491,
      300,  301,  301,  384,  302,  302,  493,  493,  300,  300,
      301,  383,  301,  585,  585,  302,  303,  303,  382,  304,
      304,  301,  302,  379,  302,  587,  587,  303,  304,  378,
      304,  372,  303,  305,  305,  370,  303,  306,  306,  304,
      307,  307,  367,  353,  305,  316,  316,  316,  306,  306,

      347,  307,  344,  305,  308,  308,  357,  306,  357,  337,
      307,  357,  309,  309,  332,  308,  310,  310,  326,  308,
      311,  311,  294,  309,  308,  309,  310,  310,  312,  312,
      288,  311,  309,  313,  313,  284,  310,  283,  277,  312,
      311,  312,  274,  311,  313,  317,  317,  317,  312,  318,
      318,  318,  234,  313,  319,  319,  319,  320,  320,  320,
      342,  232,  342,  343,  343,  343,  345,  345,  345,  345,
      345,  345,  345,  345,  231,  343,  223,  343,  346,  346,
      346,  348,  348,  348,  350,  350,  350,  352,  352,  352,
      217,  212,  354,  359,  359,  359,  360,  360,  360,  211,

      354,  205,  342,  342,  342,  342,  342,  342,  342,  342,
      354,  354,  355,  356,  203,  356,  361,  361,  361,  200,
      355,  199,  198,  356,  362,  362,  362,  363,  363,  363,
      355,  355,  197,  356,  356,  364,  364,  364,  365,  365,
      365,  371,  371,  371,  373,  373,  373,  375,  375,  375,
      377,  377,  377,  396,  396,  396,  397,  397,  397,  398,
      398,  398,  399,  399,  399,  400,  400,  400,  401,  401,
      401,  402,  402,  402,  403,  403,  404,  404,  404,  405,
      405,  405,  406,  406,  406,  403,  407,  407,  407,  194,
      403,  408,  408,  408,  403,  409,  409,  409,  410,  410,

      410,  417,  421,  421,  422,  422,  424,  424,  421,  417,
      423,  423,  193,  421,  422,  422,  424,  424,  423,  417,
      417,  423,  421,  192,  422,  185,  424,  425,  425,  183,
      423,  426,  426,  427,  427,  429,  429,  181,  425,  428,
      428,  427,  426,  175,  427,  429,  429,  425,  428,  172,
      428,  426,  439,  427,  167,  429,  430,  430,  164,  428,
      431,  431,  432,  432,  436,  436,  436,  430,  433,  433,
      431,  431,  158,  432,  434,  434,  430,  430,  156,  433,
      431,  154,  432,  150,  433,  434,  435,  435,  433,  437,
      437,  437,  148,  147,  434,  146,  132,  435,  438,  438,

      438,  435,  440,  440,  440,  127,  435,  123,  121,  439,
      439,  439,  439,  439,  439,  439,  439,  442,  442,  442,
      444,  444,  444,  446,  446,  446,  448,  448,  448,  449,
      449,  449,  450,  450,  450,  451,  451,  451,  452,  452,
      452,  453,  453,  453,  454,  454,  454,  457,  457,  458,
      458,  458,  459,  459,  459,  460,  460,  460,  457,  461,
      461,  461,  119,  457,  462,  462,  462,  457,  463,  463,
      463,  464,  464,  464,  465,  465,  466,  466,  116,  115,
      465,  467,  467,  114,  111,  465,  466,  466,  592,  467,
      592,  108,  467,  592,  465,  105,  466,  468,  468,  469,

      469,  467,  470,  470,  471,  471,  102,  468,  468,   99,
      469,   93,  471,  470,   75,  471,   69,  468,   67,  469,
      472,  472,  470,   65,  471,  473,  473,  474,  474,  472,
       49,  472,  475,  475,   47,  473,  473,   45,  474,   44,
      472,   30,  475,  475,   25,  473,   23,  474,  474,  476,
      476,  487,  475,  487,  477,  477,  478,  478,   21,   14,
      476,  487,  479,  479,    0,  477,    0,  478,    0,  476,
      477,  487,  487,  479,  477,    0,  478,  479,  480,  480,
      480,    0,  479,  481,  481,  481,  482,  482,  482,  485,
      485,  485,  485,  485,  485,  485,  485,  488,  488,  488,

      490,  490,  490,  492,  492,  492,  494,  494,  494,  496,
      496,  496,  497,  497,  497,  498,  498,  498,  499,  499,
      499,  500,  500,  500,  501,  501,  501,  502,  502,  502,
      503,  506,  506,  506,  507,  507,  507,    0,  503,  508,
      508,  508,  510,  510,  510,  511,  511,  511,  503,  503,
      512,  512,  512,  513,  513,  513,  514,  514,  514,  515,
      515,  515,  516,  516,  516,  532,  532,  532,  533,  533,
      533,  534,  534,  534,  535,  535,  536,  536,  536,  537,
      537,  537,  535,    0,    0,  535,  538,  538,  538,  539,
      539,  540,  540,    0,  535,  541,  541,  542,  542,    0,

      539,    0,  540,  539,    0,    0,  541,  541,  542,  539,
      542,  540,  543,  543,    0,  541,    0,  542,  544,  544,
      545,  545,    0,  543,  546,  546,  553,  553,  553,  544,
      545,  545,  543,  543,    0,  546,  547,  547,  544,    0,
      545,    0,  546,    0,  546,    0,    0,  547,    0,  548,
      548,  549,  549,    0,  547,    0,  547,  548,    0,  549,
      548,    0,  549,  550,  550,  551,  551,  552,  552,  548,
        0,  549,    0,    0,  550,  551,  551,    0,  552,  554,
      554,  554,    0,  550,    0,  551,    0,  552,  555,  555,
      555,  556,  556,  556,  557,  557,  557,  558,  558,  558,

      559,  559,  559,  560,  560,  560,  561,  561,  561,  562,
      562,  562,  563,  563,  564,  564,  564,  565,  565,  565,
      563,    0,    0,  563,  566,  566,  566,  567,  567,  568,
      568,    0,  563,  569,  569,  570,  570,    0,  567,    0,
      568,  567,    0,    0,  569,  569,  570,  567,  570,  568,
      571,  571,    0,  569,    0,  570,  572,  572,  573,  573,
        0,  571,  574,  574,  582,  582,  582,  572,  573,  573,
      571,  571,    0,  574,  575,  575,  572,    0,  573,    0,
      574,    0,  574,    0,    0,  575,    0,  576,  576,  577,
      577,    0,  575,    0,  575,  576,    0,  577,  576,    0,

      577,  578,  578,  579,  579,  580,  580,  576,    0,  577,
        0,    0,  578,  579,  579,    0,  580,  584,  584,  584,
        0,  578,    0,  579,    0,  580,  581,  581,  581,  581,
      581,  581,  581,  581,  586,  586,  586,  588,  588,  588,
      590,    0,  591,  593,  593,  593,    0,    0,  590,    0,
      591,  594,  594,  594,  595,  595,  595,    0,  590,  590,
      591,  591,  596,  596,  596,  597,  597,  597,  598,  598,
      598,  599,  599,  599,  600,  600,  600,  601,  601,  601,
      602,  602,  602,  605,  605,  605,  606,  606,  606,  607,
      607,  607,  622,  622,  623,  623,  624,  624,  625,  625,

      626,  626,    0,  622,    0,  623,    0,  624,    0,  625,
        0,  626,  622,    0,  623,    0,  624,    0,  625,    0,
      626,  627,  627,  628,  628,  635,  635,  635,  629,  629,
        0,    0,  627,    0,  628,    0,  628,  627,    0,  629,
        0,  627,    0,  628,  629,  630,  630,    0,  629,    0,
      631,  631,  632,  632,    0,    0,  630,  633,  633,    0,
        0,  631,    0,  632,    0,  630,  631,  630,  633,  633,
      631,    0,  632,  634,  634,  639,  639,  633,  636,  636,
      636,  637,  637,  637,  634,    0,  639,  640,  640,  641,
      641,  642,  642,  634,    0,  639,    0,    0,  640,    0,

      641,    0,  642,  643,  643,  644,  644,  640,    0,  641,
        0,  642,    0,    0,  643,    0,  644,  645,  645,    0,
        0,  644,    0,  643,    0,  644,    0,    0,  645,    0,
      645,  646,  646,  647,  647,    0,    0,  645,  648,  648,
        0,    0,  646,    0,  647,  649,  649,  646,    0,  648,
        0,  646,    0,  647,  648,  647,  649,    0,  648,  650,
      650,  651,  651,    0,    0,  649,  652,  652,  652,    0,
      650,  650,  651,  653,  653,  653,  654,  654,  654,  650,
        0,  651,  655,  655,  655,  656,  656,  656,  657,  657,
      657,  658,  658,  658,  659,  662,  662,  662,  663,  663,

      663,    0,  659,  664,  664,  664,  679,  679,    0,  680,
      680,    0,  659,  659,  681,  681,    0,  679,    0,  679,
      680,    0,  681,    0,    0,  681,  679,  682,  682,  680,
      683,  683,  684,  684,  681,  685,  685,    0,  682,    0,
        0,  683,    0,  684,  682,  684,  685,  682,  686,  686,
      683,    0,  684,  687,  687,  685,  689,  689,    0,  686,
      690,  690,    0,    0,  687,    0,    0,  689,  686,  689,
        0,  690,    0,  687,  691,  691,  689,    0,  692,  692,
      690,    0,  691,    0,    0,  691,  693,  693,    0,  692,
      694,  694,    0,    0,  691,  692,    0,  693,  692,    0,

        0,  694,    0,  694,  695,  695,  693,  696,  696,    0,
      694,  697,  697,    0,    0,  695,    0,    0,  696,  698,
      698,  698,  697,    0,  695,  711,  711,  696,  699,  699,
      699,  697,  700,  700,  700,    0,  711,  712,  712,  713,
      713,    0,  711,  714,  714,  711,    0,    0,  712,    0,
      713,    0,    0,    0,  714,  713,    0,  712,    0,  713,
      715,  715,  714,  714,  716,  716,    0,  717,  717,    0,
        0,  715,    0,    0,    0,  716,    0,  715,  717,    0,
      715,  718,  718,  717,  716,  725,  725,  717,  724,  724,
        0,    0,  718,    0,    0,    0,  725,    0,  725,  724,

      718,  718,  726,  726,  724,  725,  727,  727,  724,  728,
      728,    0,    0,  726,    0,    0,  727,  727,    0,    0,
      728,    0,  726,  729,  729,  728,  727,  730,  730,  728,
      731,  731,    0,    0,  729,    0,  729,    0,  730,    0,
      731,  731,    0,  729,  736,  736,    0,  730,  737,  737,
      731,  738,  738,    0,    0,  736,  739,  739,    0,  737,
        0,    0,  738,    0,  736,  737,    0,  739,  737,  740,
      740,  738,  741,  741,  745,  745,  739,  746,  746,    0,
      740,    0,    0,  741,    0,  745,  740,    0,  746,  740,
      745,    0,  741,  746,  745,  748,  748,  746,  749,  749,

        0,    0,    0,    0,    0,    0,  748,    0,    0,  749,
        0,    0,    0,    0,    0,  748,    0,    0,  749,  752,
      752,  752,  752,  752,  752,  752,  752,  752,  753,  753,
      753,  753,  753,  753,  753,  753,  753,  754,  754,  754,
      754,  754,  754,  754,  754,  754,  755,  755,  755,  755,
      755,  755,  755,  755,  755,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  758,    0,    0,    0,  758,  759,  759,
        0,  759,  759,  760,    0,    0,  760,    0,    0,    0,
      760,  761,    0,    0,    0,  761,  762,    0,    0,    0,

      762,  762,  762,  762,  762,  763,    0,    0,    0,  763,
      764,  764,  764,  764,  764,  764,  764,  764,  765,  765,
      765,  765,  765,  765,  765,  765,  766,  766,  766,  766,
      766,  766,  766,  766,  767,    0,    0,  767,    0,    0,
        0,  767,  768,  768,  768,  768,  768,  768,    0,  768,
      768,  769,  769,    0,  769,  769,  770,    0,    0,    0,
      770,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,

      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751
    } ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;

#include "isatty.hxx"
#include "parse.hxx"
#include "parser_private.hxx"

#include "context.hxx"

extern "C"
{
#include "charEncoding.h"
#include "MALLOC.h"
}

static int comment_level = 0;
static int last_token = 0;
static int exit_status = PARSE_ERROR;
static std::string current_file;
static std::string program_name;

static std::string *pstBuffer;

 static bool rejected = false;

#define YY_USER_ACTION                          \
 yylloc.last_column += yyleng;
/* -*- Verbose Special Debug -*- */
//#define DEV
//#define TOKENDEV

#define INITIAL 0
#define SIMPLESTRING 1
#define DOUBLESTRING 2
#define REGIONCOMMENT 3
#define LINECOMMENT 4
#define LINEBREAK 5
#define MATRIX 6
#define MATRIXMINUSID 7
#define SHELLMODE 8
#define BEGINID 9

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 752 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2662 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinIf);
    }
    BEGIN(INITIAL);
    return scan_throw(IF);
}
	YY_BREAK
case 2:
YY_RULE_SETUP
{
    	BEGIN(INITIAL);
        return scan_throw(THEN);
}
	YY_BREAK
case 3:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        // Pop to step out IF
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinElse);
    }
    BEGIN(INITIAL);
	return scan_throw(ELSE);
}
	YY_BREAK
case 4:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinElseIf);
    }
    BEGIN(INITIAL);
	return scan_throw(ELSEIF);
}
	YY_BREAK
case 5:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
    }
    BEGIN(INITIAL);
    return scan_throw(END);
}
	YY_BREAK
case 6:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinSelect);
    }
    BEGIN(INITIAL);
    return scan_throw(SELECT);
}
	YY_BREAK
case 7:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinSwitch);
    }
    BEGIN(INITIAL);
    return scan_throw(SWITCH);
}
	YY_BREAK
case 8:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinOtherwise);
    }
    BEGIN(INITIAL);
	return scan_throw(OTHERWISE);
}
	YY_BREAK
case 9:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinCase);
    }
    BEGIN(INITIAL);
    return scan_throw(CASE);
}
	YY_BREAK
case 10:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinFunction);
    }
    BEGIN(INITIAL);
    return scan_throw(FUNCTION);
}
	YY_BREAK
case 11:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
    }
    BEGIN(INITIAL);
	return scan_throw(ENDFUNCTION);
}
	YY_BREAK
case 12:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinFunction);
    }
    BEGIN(INITIAL);
	return scan_throw(HIDDENFUNCTION);
}
	YY_BREAK
case 13:
YY_RULE_SETUP
{
 	BEGIN(INITIAL);
    return scan_throw(HIDDEN);
}
	YY_BREAK
case 14:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinFor);
    }
    BEGIN(INITIAL);
    return scan_throw(FOR);
}
	YY_BREAK
case 15:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinWhile);
    }
	BEGIN(INITIAL);
	return scan_throw(WHILE);
}
	YY_BREAK
case 16:
YY_RULE_SETUP
{
	BEGIN(INITIAL);
    return scan_throw(DO);
}
	YY_BREAK
case 17:
YY_RULE_SETUP
{
    	BEGIN(INITIAL);
        return scan_throw(BREAK);
}
	YY_BREAK
case 18:
YY_RULE_SETUP
{
	ParserSingleInstance::pushControlStatus(Parser::WithinTry);
	BEGIN(INITIAL);
	return scan_throw(TRY);
}
	YY_BREAK
case 19:
YY_RULE_SETUP
{
    // Pop to step out TRY
	ParserSingleInstance::popControlStatus();
	ParserSingleInstance::pushControlStatus(Parser::WithinCatch);
	BEGIN(INITIAL);
	return scan_throw(CATCH);
}
	YY_BREAK
case 20:
YY_RULE_SETUP
{
    BEGIN(INITIAL);
    return scan_throw(RETURN);
}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
{
        BEGIN(BEGINID);
}
	YY_BREAK

case 22:
YY_RULE_SETUP
{
        wchar_t *pwText = to_wide_string(yytext);
        if (yytext != NULL && pwText == NULL)
        {
            std::string str = "can not convert'";
            str += yytext;
            str += "' to UTF-8";
            std::cerr << "[ERROR] " << str << std::endl;
            exit_status = SCAN_ERROR;
            scan_error("can not convert string to UTF-8");
            yyterminate();
        }
        yylval.str = new std::wstring(pwText);
        if (symbol::Context::getInstance()->get(*yylval.str) != NULL
            && symbol::Context::getInstance()->get(*yylval.str)->isCallable())
        {
            scan_throw(ID);
            BEGIN(SHELLMODE);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(ID);
        }
    }
	YY_BREAK

case 23:
YY_RULE_SETUP
{
  return scan_throw(NOT);
}
	YY_BREAK
case 24:
YY_RULE_SETUP
{
  return scan_throw(DOLLAR);
}
	YY_BREAK
case 25:
YY_RULE_SETUP
{
  return scan_throw(BOOLTRUE);
}
	YY_BREAK
case 26:
YY_RULE_SETUP
{
  return scan_throw(BOOLFALSE);
}
	YY_BREAK
case 27:
YY_RULE_SETUP
{
  return scan_throw(AND);
}
	YY_BREAK
case 28:
YY_RULE_SETUP
{
  return scan_throw(ANDAND);
}
	YY_BREAK
case 29:
YY_RULE_SETUP
{
  return scan_throw(OR);
}
	YY_BREAK
case 30:
YY_RULE_SETUP
{
  return scan_throw(OROR);
}
	YY_BREAK
case 31:
YY_RULE_SETUP
{
  return scan_throw(LPAREN);
}
	YY_BREAK
case 32:
YY_RULE_SETUP
{
  return scan_throw(RPAREN);
}
	YY_BREAK
case 33:
YY_RULE_SETUP
{
	scan_step();
  return scan_throw(SEMI);
}
	YY_BREAK
case 34:
YY_RULE_SETUP
{
	scan_step();
  return scan_throw(COMMA);
}
	YY_BREAK
case 35:
YY_RULE_SETUP
{
  return scan_throw(COLON);
}
	YY_BREAK
case 36:
YY_RULE_SETUP
{
  yy_push_state(MATRIX);
  ParserSingleInstance::pushControlStatus(Parser::WithinCell);
  return scan_throw(LBRACE);
}
	YY_BREAK
case 37:
YY_RULE_SETUP
{
  return scan_throw(RBRACE);
}
	YY_BREAK
case 38:
YY_RULE_SETUP
{
  return scan_throw(DOTQUOTE);
}
	YY_BREAK
case 39:
YY_RULE_SETUP
{
  return scan_throw(DOTTIMES);
}
	YY_BREAK
case 40:
YY_RULE_SETUP
{
  return scan_throw(DOTDIVIDE);
}
	YY_BREAK
case 41:
YY_RULE_SETUP
{
  return scan_throw(DOTRDIVIDE);
}
	YY_BREAK
case 42:
YY_RULE_SETUP
{
  return scan_throw(DOTPOWER);
}
	YY_BREAK
case 43:
YY_RULE_SETUP
{
  return scan_throw(MINUS);
}
	YY_BREAK
case 44:
YY_RULE_SETUP
{
  return scan_throw(PLUS);
}
	YY_BREAK
case 45:
YY_RULE_SETUP
{
  return scan_throw(TIMES);
}
	YY_BREAK
case 46:
YY_RULE_SETUP
{
  return scan_throw(DIVIDE);
}
	YY_BREAK
case 47:
YY_RULE_SETUP
{
  return scan_throw(RDIVIDE);
}
	YY_BREAK
case 48:
YY_RULE_SETUP
{
  return scan_throw(POWER);
}
	YY_BREAK
case 49:
YY_RULE_SETUP
{
  return scan_throw(KRONTIMES);
}
	YY_BREAK
case 50:
YY_RULE_SETUP
{
  return scan_throw(KRONDIVIDE);
}
	YY_BREAK
case 51:
YY_RULE_SETUP
{
  return scan_throw(KRONRDIVIDE);
}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
{
    unput(yytext[yyleng - 1]);
    return scan_throw(CONTROLTIMES);
}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
{
    unput(yytext[yyleng - 1]);
    return scan_throw(CONTROLDIVIDE);
}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
{
    unput(yytext[yyleng - 1]);
    return scan_throw(CONTROLRDIVIDE);
}
	YY_BREAK
case 55:
YY_RULE_SETUP
{
  return scan_throw(EQ);
}
	YY_BREAK
case 56:
YY_RULE_SETUP
{
  return scan_throw(NE);
}
	YY_BREAK
case 57:
YY_RULE_SETUP
{
  return scan_throw(LT);
}
	YY_BREAK
case 58:
YY_RULE_SETUP
{
  return scan_throw(GT);
}
	YY_BREAK
case 59:
YY_RULE_SETUP
{
  return scan_throw(LE);
}
	YY_BREAK
case 60:
YY_RULE_SETUP
{
  return scan_throw(GE);
}
	YY_BREAK
case 61:
YY_RULE_SETUP
{
  return scan_throw(ASSIGN);
 }
	YY_BREAK
case 62:
YY_RULE_SETUP
{
  yy_push_state(MATRIX);
  ParserSingleInstance::pushControlStatus(Parser::WithinMatrix);
  return scan_throw(LBRACK);
}
	YY_BREAK
case 63:
YY_RULE_SETUP
{
  return scan_throw(RBRACK);
}
	YY_BREAK
case 64:
YY_RULE_SETUP
{
  return scan_throw(DOT);
}
	YY_BREAK
case 65:
YY_RULE_SETUP
{
  yy_push_state(LINEBREAK);
}
	YY_BREAK
case 66:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] INTEGER : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(VARINT);
}
	YY_BREAK
case 67:
YY_RULE_SETUP
{
  scan_exponent_convert(yytext);
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
  scan_step();
  return scan_throw(VARFLOAT);
}
	YY_BREAK
case 68:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] NUMBER : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(NUM);
}
	YY_BREAK
case 69:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] LITTLE : " << yytext << std::endl;
#endif
  scan_step();
  return scan_throw(NUM);
}
	YY_BREAK
case 70:
YY_RULE_SETUP
{
    wchar_t *pwText = to_wide_string(yytext);
    if (yytext != NULL && pwText == NULL)
    {
        std::string str = "can not convert'";
        str += yytext;
        str += "' to UTF-8";
        std::cerr << "[ERROR] " << str << std::endl;
        exit_status = SCAN_ERROR;
        scan_error("can not convert string to UTF-8");
        yyterminate();
    }
    yylval.str = new std::wstring(pwText);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] ID : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(ID);
}
	YY_BREAK
case 71:
YY_RULE_SETUP
{
  yylval.comment = new std::wstring();
  comment_level = 1;
  ParserSingleInstance::pushControlStatus(Parser::WithinBlockComment);
  yy_push_state(REGIONCOMMENT);
}
	YY_BREAK
case 72:
YY_RULE_SETUP
{
  pstBuffer = new std::string();
  yy_push_state(LINECOMMENT);
}
	YY_BREAK
case 73:
YY_RULE_SETUP
{
  pstBuffer = new std::string();
  yy_push_state(DOUBLESTRING);
}
	YY_BREAK
case 74:
YY_RULE_SETUP
{
  /*
  ** Matrix Transposition special behaviour
  ** ID' []' toto()' are transposition call
  */
  if (last_token == ID
      || last_token == RBRACK
      || last_token == RPAREN
      || last_token == RBRACE)
    {
      return scan_throw(QUOTE);
    }
  else {
    pstBuffer = new std::string();
    yy_push_state(SIMPLESTRING);
  }
}
	YY_BREAK
case 75:
YY_RULE_SETUP
{
  scan_step();
  scan_throw(SPACES);
}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 1;
  yylloc.last_column = 1;
  scan_step();
  if (last_token != EOL) {
      return scan_throw(EOL);
  }
}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 1;
  yylloc.last_column = 1;
  scan_step();
  scan_throw(EOL);
}
	YY_BREAK
case 78:
YY_RULE_SETUP
{
    std::string str = "unexpected token '";
    str += yytext;
    str += "'";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yyterminate();
}
	YY_BREAK

case 79:
YY_RULE_SETUP
{
    yy_pop_state();
    ParserSingleInstance::popControlStatus();
    return scan_throw(RBRACK);
  }
	YY_BREAK
case 80:
YY_RULE_SETUP
{
    yy_pop_state();
    ParserSingleInstance::popControlStatus();
    return scan_throw(RBRACE);
  }
	YY_BREAK
case 81:
YY_RULE_SETUP
{
    return scan_throw(PLUS);
  }
	YY_BREAK
case 82:
YY_RULE_SETUP
{
    return scan_throw(MINUS);
  }
	YY_BREAK
case 83:
YY_RULE_SETUP
{
   int i;
    for (i = yyleng - 1 ; i >= 0 ; --i)
      {
	unput(yytext[i]);
      }
    yy_push_state(MATRIXMINUSID);
    if (last_token != LBRACK
	&& last_token != EOL
	&& last_token != SEMI)
      {
	return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 84:
YY_RULE_SETUP
{
   int i;
    for (i = yyleng - 1 ; i >= 0 ; --i)
      {
	unput(yytext[i]);
      }
    yy_push_state(MATRIXMINUSID);
    if (last_token != LBRACK
	&& last_token != EOL
	&& last_token != SEMI)
      {
	return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 85:
YY_RULE_SETUP
{
   int i;
    for (i = yyleng - 1 ; i >= 0 ; --i)
      {
	unput(yytext[i]);
      }
    yy_push_state(MATRIXMINUSID);
    if (last_token != LBRACK
	&& last_token != EOL
	&& last_token != SEMI)
      {
	return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 86:
YY_RULE_SETUP
{
   int i;
    for (i = yyleng - 1 ; i >= 0 ; --i)
      {
	unput(yytext[i]);
      }
    yy_push_state(MATRIXMINUSID);
    if (last_token != LBRACK
	&& last_token != EOL
	&& last_token != SEMI)
      {
	return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 87:
YY_RULE_SETUP
{
    int i;
    for (i = yyleng - 1 ; i >= 0 ; --i)
      {
	unput(yytext[i]);
      }
    yy_push_state(MATRIXMINUSID);
    if (last_token != LBRACK
	&& last_token != EOL
	&& last_token != SEMI)
      {
	return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 88:
YY_RULE_SETUP
{
    std::string str = "unexpected token '";
    str += yytext;
    str += "' within a matrix.";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yyterminate();
  }
	YY_BREAK

case 89:
YY_RULE_SETUP
{
    return scan_throw(MINUS);
  }
	YY_BREAK
case 90:
YY_RULE_SETUP
{
     /* Do Nothing. */
  }
	YY_BREAK
case 91:
YY_RULE_SETUP
{
    yy_pop_state();
    yylval.number = atof(yytext);
#ifdef TOKENDEV
    std::cout << "--> [DEBUG] INTEGER : " << yytext << std::endl;
#endif
    scan_step();
    return scan_throw(VARINT);
  }
	YY_BREAK
case 92:
YY_RULE_SETUP
{
    yy_pop_state();
    yylval.number = atof(yytext);
#ifdef TOKENDEV
    std::cout << "--> [DEBUG] NUMBER : " << yytext << std::endl;
#endif
    scan_step();
    return scan_throw(NUM);
  }
	YY_BREAK
case 93:
YY_RULE_SETUP
{
    yy_pop_state();
    yylval.number = atof(yytext);
#ifdef TOKENDEV
    std::cout << "--> [DEBUG] LITTLE : " << yytext << std::endl;
#endif
    scan_step();
    return scan_throw(NUM);
  }
	YY_BREAK
case 94:
YY_RULE_SETUP
{
    yy_pop_state();
    scan_exponent_convert(yytext);
    yylval.number = atof(yytext);
#ifdef TOKENDEV
    std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
    scan_step();
    return scan_throw(VARFLOAT);
  }
	YY_BREAK
case 95:
YY_RULE_SETUP
{
    yy_pop_state();
    wchar_t* pwText = to_wide_string(yytext);
    if (yytext != NULL && pwText == NULL)
    {
        std::string str = "can not convert'";
        str += yytext;
        str += "' to UTF-8";
        std::cerr << "[ERROR] " << str << std::endl;
        exit_status = SCAN_ERROR;
        scan_error("can not convert string to UTF-8");
        yyterminate();
    }
    yylval.str = new std::wstring(pwText);
#ifdef TOKENDEV
    std::cout << "--> [DEBUG] ID : " << yytext << std::endl;
#endif
    scan_step();
    return scan_throw(ID);
  }
	YY_BREAK
case 96:
YY_RULE_SETUP
{
    /* Do Nothing. */
  }
	YY_BREAK
case 97:
YY_RULE_SETUP
{
    std::string str = "unexpected token '";
    str += yytext;
    str += "' within a matrix.";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yyterminate();
  }
	YY_BREAK

case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
{
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    scan_step();
    yy_pop_state();
  }
	YY_BREAK
case 99:
YY_RULE_SETUP
{
    ++comment_level;
    yy_push_state(REGIONCOMMENT);
  }
	YY_BREAK
case 100:
YY_RULE_SETUP
{
    scan_throw(DOTS);
    pstBuffer = new std::string();
    yy_push_state(LINECOMMENT);
  }
	YY_BREAK
case 101:
YY_RULE_SETUP
{
    /* Do nothing... */
  }
	YY_BREAK
case 102:
YY_RULE_SETUP
{
    std::string str = "unexpected token '";
    str += yytext;
    str += "' after line break with .. or ...";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yyterminate();
  }
	YY_BREAK

case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
{
    //yylloc.last_line += 1;
    //yylloc.last_column = 1;
    //scan_step();
    yy_pop_state();
    unput('\n');
    /*
    ** To forgot comments after lines break
    */
    if (last_token != DOTS)
    {
        //std::cerr << "pstBuffer = {" << *pstBuffer << "}" << std::endl;
        //std::cerr << "pstBuffer->c_str() = {" << pstBuffer->c_str() << "}" << std::endl;
        wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
        //std::wcerr << L"pwstBuffer = W{" << pwstBuffer << L"}" << std::endl;
        if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
        {
            std::string str = "can not convert'";
            str += pstBuffer->c_str();
            str += "' to UTF-8";
            std::cerr << "[ERROR] " << str << std::endl;
            exit_status = SCAN_ERROR;
            scan_error("can not convert string to UTF-8");
            yyterminate();
        }
        yylval.comment = new std::wstring(pwstBuffer);
        delete pstBuffer;
        FREE (pwstBuffer);
        return scan_throw(COMMENT);
    }
  }
	YY_BREAK
case YY_STATE_EOF(LINECOMMENT):
{
    yy_pop_state();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
    if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
    {
        std::string str = "can not convert'";
        str += pstBuffer->c_str();
        str += "' to UTF-8";
        std::cerr << "[ERROR] " << str << std::endl;
        exit_status = SCAN_ERROR;
        scan_error("can not convert string to UTF-8");
        yyterminate();
    }
    yylval.comment = new std::wstring(pwstBuffer);
    delete pstBuffer;
    FREE (pwstBuffer);
    return scan_throw(COMMENT);
  }
	YY_BREAK
case 104:
YY_RULE_SETUP
{
     // Put the char in a temporary CHAR buffer to go through UTF-8 trouble
     // only translate to WCHAR_T when popping state.
     *pstBuffer += yytext;
  }
	YY_BREAK

case 105:
YY_RULE_SETUP
{
    --comment_level;
    if (comment_level == 0) {
      ParserSingleInstance::popControlStatus();
      yy_pop_state();
      //return scan_throw(BLOCKCOMMENT);
    }
  }
	YY_BREAK
case 106:
YY_RULE_SETUP
{
    ++comment_level;
    yy_push_state(REGIONCOMMENT);
  }
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
{
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    scan_step();
    *yylval.comment += L"\n//";
  }
	YY_BREAK
case 108:
YY_RULE_SETUP
{
      *yylval.comment += std::wstring(to_wide_string(yytext));
  }
	YY_BREAK
case YY_STATE_EOF(REGIONCOMMENT):
{
    std::string str = "unexpected end of file in a comment";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yy_pop_state();
    yyterminate();
  }
	YY_BREAK

case 109:
YY_RULE_SETUP
{
    *pstBuffer += "\"";
  }
	YY_BREAK
case 110:
YY_RULE_SETUP
{
    *pstBuffer += "'";
  }
	YY_BREAK
case 111:
YY_RULE_SETUP
{
    *pstBuffer += "\"";
  }
	YY_BREAK
case 112:
YY_RULE_SETUP
{
    *pstBuffer += "'";
  }
	YY_BREAK
case 113:
YY_RULE_SETUP
{
    yy_pop_state();
    scan_step();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
    if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
    {
        std::string str = "can not convert'";
        str += pstBuffer->c_str();
        str += "' to UTF-8";
        std::cerr << "[ERROR] " << str << std::endl;
        exit_status = SCAN_ERROR;
        scan_error("can not convert string to UTF-8");
        yyterminate();
    }
    yylval.str = new std::wstring(pwstBuffer);
    delete pstBuffer;
    FREE(pwstBuffer);
    return scan_throw(STR);
  }
	YY_BREAK
case 114:
YY_RULE_SETUP
{
    //yylloc.last_line += 1;
    scan_step();
  }
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
{
    std::string str = "unexpected end of line in a string.";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    yy_pop_state();
    yyterminate();
  }
	YY_BREAK
case YY_STATE_EOF(SIMPLESTRING):
{
    std::string str = "unexpected end of file in a string.";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yy_pop_state();
    yyterminate();
  }
	YY_BREAK
case 116:
YY_RULE_SETUP
{
    scan_step();
    *pstBuffer += yytext;
  }
	YY_BREAK

case 117:
YY_RULE_SETUP
{
    *pstBuffer += "\"";
  }
	YY_BREAK
case 118:
YY_RULE_SETUP
{
    *pstBuffer += "'";
  }
	YY_BREAK
case 119:
YY_RULE_SETUP
{
    *pstBuffer += "\"";
  }
	YY_BREAK
case 120:
YY_RULE_SETUP
{
    *pstBuffer += "'";
  }
	YY_BREAK
case 121:
YY_RULE_SETUP
{
    yy_pop_state();
    scan_step();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
    if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
    {
        std::string str = "can not convert'";
        str += pstBuffer->c_str();
        str += "' to UTF-8";
        std::cerr << "[ERROR] " << str << std::endl;
        exit_status = SCAN_ERROR;
        scan_error("can not convert string to UTF-8");
        yyterminate();
    }
    yylval.str = new std::wstring(pwstBuffer);
    delete pstBuffer;
    FREE(pwstBuffer);
    return scan_throw(STR);
  }
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
{
    std::string str = "unexpected end of line in a string";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    yyterminate();
  }
	YY_BREAK
case 123:
YY_RULE_SETUP
{
    //yylloc.last_line += 1;
    scan_step();
  }
	YY_BREAK
case YY_STATE_EOF(DOUBLESTRING):
{
    std::string str = "unexpected end of file in a string";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yy_pop_state();
    yyterminate();
  }
	YY_BREAK
case 124:
YY_RULE_SETUP
{
    scan_step();
    *pstBuffer += yytext;
  }
	YY_BREAK

case 125:
YY_RULE_SETUP
{
        if (last_token == ID)
        {
            scan_throw(SPACES);
            return ID;
        }
    }
	YY_BREAK
case 126:
YY_RULE_SETUP
{
        BEGIN(INITIAL);
        return scan_throw(SEMI);
    }
	YY_BREAK
case 127:
YY_RULE_SETUP
{
        BEGIN(INITIAL);
        return scan_throw(COMMA);
    }
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
{
        BEGIN(INITIAL);
        return scan_throw(EOL);
    }
	YY_BREAK
case 129:
YY_RULE_SETUP
{
        yylval.str = new std::wstring(to_wide_string(yytext));
        return scan_throw(STR);
    }
	YY_BREAK
case YY_STATE_EOF(SHELLMODE):
{
        BEGIN(INITIAL);
    }
	YY_BREAK

case 130:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(LINEBREAK):
			case YY_STATE_EOF(MATRIX):
			case YY_STATE_EOF(MATRIXMINUSID):
			case YY_STATE_EOF(BEGINID):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 752 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 752 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 751);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

int scan_throw(int token) {
  last_token = token;
#ifdef DEV
  std::cout << "--> [DEBUG] TOKEN : " << token << std::endl;
#endif
  return token;
}

void scan_step() {
  yylloc.first_line = yylloc.last_line;
  yylloc.first_column = yylloc.last_column;
}

void scan_error(std::string msg)
{
  wchar_t* pstMsg = to_wide_string(msg.c_str());
  std::wcerr << pstMsg << std::endl;
  ParserSingleInstance::PrintError(pstMsg);
  ParserSingleInstance::setExitStatus(Parser::Failed);
  FREE(pstMsg);
}

/*
** convert floating numbers to C standard
** 1.2d-3 -> 1.2e-3
** 1.2D-3 -> 1.2e-3
*/
void scan_exponent_convert(char *in)
{
  char *pString;
  while((pString=strpbrk(in,"d"))!=NULL)
    {
      *pString='e';
    }
  while((pString=strpbrk(in,"D"))!=NULL)
    {
      *pString='e';
    }
}

#ifdef _MSC_VER
int isatty (int desc)
{
  return 0;
}
#endif

