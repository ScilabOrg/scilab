
#line 3 "src/cpp/scanscilab.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 127
#define YY_END_OF_BUFFER 128
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[796] =
    {   0,
    16405,  128,   76,  127,   73,   76,  127,   74,  127,   74,
       76,  127,   71,   76,  127,   68,   76,  127,   24,   76,
      127,   68,   76,  127,   27,   76,  127,   72,   76,  127,
       31,   76,  127,   32,   76,  127,   45,   76,  127,   44,
       76,  127,   34,   76,  127,   43,   76,  127,   62,   76,
      127,   46,   76,  127,   64,   76,  127,   35,   76,  127,
       33,   76,  127,   55,   76,  127,   59,   76,  127,   56,
       76,  127,   68,   76,  127,   23,   76,  127,   60,   76,
      127,   47,   76,  127,   61,   76,  127,   48,   76,  127,
       68,   76,  127,   68,   76,  127,   68,   76,  127,   68,

       76,  127,   68,   76,  127,   68,   76,  127,   68,   76,
      127,   68,   76,  127,   68,   76,  127,   68,   76,  127,
       68,   76,  127,   68,   76,  127,   36,   76,  127,   29,
       76,  127,   37,   76,  127,   23,   76,  127,   73,   76,
      127,16405,   68,   76,  127,   68,   76,  127,   68,   76,
      127,   68,   76,  127,   68,   76,  127,   68,   76,  127,
       68,   76,  127,   68,   76,  127,   68,   76,  127,   68,
       76,  127,   68,   76,  127,   68,   76,  127,   68,   76,
      127,   68,   76,  127,   68,   76,  127,  113,  127,  112,
      127,  112,  113,  127,  113,  127,  110,  113,  127,  113,

      127,  121,  127,  119,  127,  119,  121,  127,  118,  121,
      127,  121,  127,  121,  127,  105,  127,  104,  127,  104,
      105,  127,  105,  127,  105,  127,  101,  127,  100,  127,
      100,  101,  127,   99,  127,   98,   99,  127,   95,  127,
       95,   99,  127,   99,  127,   85,  127,   73,   85,  127,
       74,   85,  127,   71,   85,  127,   68,   85,  127,   24,
       85,  127,   68,   85,  127,   27,   85,  127,   72,   85,
      127,   31,   85,  127,   32,   85,  127,   45,   85,  127,
       78,   85,  127,   34,   85,  127,   79,   85,  127,   62,
       85,  127,   46,   85,  127,   64,   85,  127,   35,   85,

      127,   33,   85,  127,   55,   85,  127,   59,   85,  127,
       56,   85,  127,   23,   85,  127,   60,   85,  127,   47,
       85,  127,   77,   85,  127,   48,   85,  127,   36,   85,
      127,   29,   85,  127,   37,   85,  127,   23,   85,  127,
       73,   85,  127,   94,  127,   93,   94,  127,  127,   92,
       94,  127,   87,   94,  127,   86,   94,  127,   94,  127,
       88,   94,  127,  126,  127,  122,  127,  125,  127,  125,
      127,   71,  127,   72,  127,  124,  127,  123,  127,   22,
      127,   22,  127,   22,  127,   22,  127,   22,  127,   22,
      127,   22,  127,   22,  127,   22,  127,   22,  127,   22,

      127,   22,  127,   22,  127,   22,  127,   73,   74,   68,
       68,   26,   68,   25,   68,   28,   48,   38,   39,   63,
       40,   67,   41,   42,   69,   52,   70,   66,   64,   57,
       54,   53,   58,   68,   68,   16,   68,   68,   68,   68,
       68,   68,    1,   68,   68,   68,   68,   68,   68,   68,
       68,   30,   73,16405,   75,   75,   68,   68,   26,   68,
       25,   68,   68,   68,   16,   68,   68,   68,   68,   68,
       68,    1,   68,   68,   68,   68,   68,   68,   68,   68,
      112,  106,  107,  108,  109,  111,  119,  114,  115,  116,
      117,  120,  104,  102,  103,  100,   98,   95,   96,   97,

       73,   73,   93,   92,   90,   89,   88,  126,  122,  125,
       22,   22,   22,   22,   16,   22,   22,   22,   22,   22,
       22,    1,   22,   22,   22,   22,   22,   22,   22,   22,
       68,   49,   63,   50,   51,   66,   65,   68,   68,   68,
       68,    5,   68,   14,   68,   68,   68,   68,   68,   68,
       68,   68,   18,   68,   68, 8213, 8213,   68,   68,   68,
       68,   68,    5,   68,   14,   68,   68,   68,   68,   68,
       68,   68,   68,   18,   68,   68,  111,  120,   84,   80,
       89,   91,   22,   22,   22,   22,   22,    5,   22,   14,
       22,   22,   22,   22,   22,   22,   22,   22,   18,   22,

       22,   68,   68,    9,   68,   68,    3,   68,   68,   68,
       68,   68,   68,   68,   68,    2,   68,   68,   68,   68,
        9,   68,   68,    3,   68,   68,   68,   68,   68,   68,
       68,   68,    2,   68,   68,   84,   83,   81,   22,   22,
        9,   22,   22,    3,   22,   22,   22,   22,   22,   22,
       22,   22,    2,   22,   22,   68,   17,   68,   19,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   15,   68,
       68,   17,   68,   19,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   15,   68,   81,   82,   22,   17,   22,
       19,   22,   22,   22,   22,   22,   22,   22,   22,   22,

       15,   22,   68,    4,   68,   68,   68,   13,   68,   68,
       20,   68,    6,   68,    7,   68,   68,    4,   68,   68,
       68,   13,   68,   68,   20,   68,    6,   68,    7,   68,
       22,    4,   22,   22,   22,   13,   22,   22,   20,   22,
        6,   22,    7,   22,   68,   68,   68,   68,   68,   68,
       68,   68,   22,   22,   22,   22,   68,   68,   10,   68,
       68,   68,   68,   10,   68,   68,   22,   22,   10,   22,
       22,   12,   68,   68,    8,   68,   12,   68,   68,    8,
       68,   12,   22,   22,    8,   22,   68,   68,   22,   11,
       68,   11,   68,   11,   22

    } ;

static yyconst flex_int16_t yy_accept[508] =
    {   0,
        1,    1,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    3,    5,    8,   10,   13,   16,   19,   22,   25,
       28,   31,   34,   37,   40,   43,   46,   49,   52,   55,
       58,   61,   64,   67,   70,   73,   76,   79,   82,   85,
       88,   91,   94,   97,  100,  103,  106,  109,  112,  115,
      118,  121,  124,  127,  130,  133,  136,  139,  143,  146,
      149,  152,  155,  158,  161,  164,  167,  170,  173,  176,
      179,  182,  185,  188,  190,  192,  195,  197,  200,  202,
      204,  206,  209,  212,  214,  216,  218,  220,  223,  225,

      227,  229,  231,  234,  236,  239,  241,  244,  246,  248,
      251,  254,  257,  260,  263,  266,  269,  272,  275,  278,
      281,  284,  287,  290,  293,  296,  299,  302,  305,  308,
      311,  314,  317,  320,  323,  326,  329,  332,  335,  338,
      341,  344,  346,  349,  350,  353,  356,  359,  361,  364,
      366,  368,  370,  372,  374,  376,  378,  380,  382,  384,
      386,  388,  390,  392,  394,  396,  398,  400,  402,  404,
      406,  408,  409,  410,  411,  412,  414,  416,  417,  418,
      419,  420,  421,  422,  423,  424,  425,  426,  427,  428,
      429,  430,  430,  431,  432,  433,  434,  435,  436,  438,

      439,  440,  441,  442,  443,  445,  446,  447,  448,  449,
      450,  451,  452,  453,  455,  456,  457,  457,  457,  458,
      459,  461,  463,  464,  465,  467,  468,  469,  470,  471,
      472,  474,  475,  476,  477,  478,  479,  480,  481,  482,
      483,  484,  485,  486,  487,  488,  489,  490,  491,  492,
      493,  494,  495,  496,  497,  498,  499,  500,  501,  502,
      502,  503,  504,  505,  506,  507,  508,  508,  509,  510,
      511,  512,  513,  514,  515,  517,  518,  519,  520,  521,
      522,  524,  525,  526,  527,  528,  529,  530,  531,  532,
      533,  534,  535,  536,  537,  537,  538,  539,  540,  541,

      542,  544,  546,  547,  548,  549,  550,  551,  552,  553,
      555,  556,  556,  557,  558,  559,  560,  561,  562,  563,
      565,  567,  568,  569,  570,  571,  572,  573,  574,  576,
      577,  578,  579,  580,  580,  581,  582,  582,  583,  584,
      585,  586,  587,  588,  590,  592,  593,  594,  595,  596,
      597,  598,  599,  601,  602,  603,  604,  606,  607,  609,
      610,  611,  612,  613,  614,  615,  616,  618,  619,  620,
      621,  623,  624,  626,  627,  628,  629,  630,  631,  632,
      633,  635,  636,  637,  638,  639,  639,  640,  641,  643,
      644,  646,  647,  648,  649,  650,  651,  652,  653,  655,

      656,  657,  659,  661,  662,  663,  664,  665,  666,  667,
      668,  669,  671,  672,  674,  676,  677,  678,  679,  680,
      681,  682,  683,  684,  686,  687,  687,  688,  689,  691,
      693,  694,  695,  696,  697,  698,  699,  700,  701,  703,
      704,  706,  707,  708,  710,  711,  713,  715,  717,  718,
      720,  721,  722,  724,  725,  727,  729,  731,  732,  734,
      735,  736,  738,  739,  741,  743,  745,  746,  747,  748,
      749,  750,  751,  752,  753,  754,  755,  756,  757,  758,
      759,  761,  762,  763,  764,  766,  767,  768,  769,  771,
      772,  774,  775,  777,  779,  780,  782,  784,  785,  787,

      788,  789,  790,  792,  794,  796,  796
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,   25,   26,   25,   25,   25,   27,   27,   28,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   29,   25,   25,   25,   25,   25,   25,
       30,   31,   32,   33,   25,    1,   34,   35,   36,   37,

       38,   39,   25,   40,   41,   25,   42,   43,   25,   44,
       45,   25,   25,   46,   47,   48,   49,   25,   50,   25,
       51,   25,   52,   53,   54,   55,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[56] =
    {   0,
        1,    2,    3,    3,    4,    5,    1,    6,    1,    4,
        7,    1,    1,    1,    4,    1,    8,    1,    9,    1,
        4,    1,    7,    1,    5,    1,    5,    5,    5,    1,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[523] =
    {   0,
        0,   54,   54,   63,  103,  106,  111,  114,   66,   71,
      131,  134,  152,  930,  207,    0,  261,  265,  286,    0,
      931,  933,  928,  933,  926,  933,  889,  933,  102,  918,
      933,  933,  933,  913,  933,  933,  933,  332,   59,  329,
      933,  933,   61,  902,  901,    0,  900,  933,  933,  933,
      933,  876,  887,  875,   43,   16,  878,  879,  869,  878,
       90,   79,  875,  933,  861,  933,  890,  140,  341,  342,
      910,   76,  345,  350,  353,  355,  110,  352,  351,  356,
      360,  362,  366,  933,  933,  908,  116,  267,  893,  933,
      933,  906,  268,  269,  891,  933,  933,  904,  888,  892,

      933,  933,  901,  933,  901,  933,  899,  356,  933,  359,
      898,  933,    0,  933,  364,  891,  933,  933,  933,  886,
      933,  933,  933,  401,  359,  388,  933,  933,  122,  875,
      874,  873,  933,  933,  933,  933,  933,  842,  933,  871,
      419,  933,  891,  933,    0,  933,  933,  873,  410,    0,
      889,  933,  887,  933,  933,  933,  933,  850,    0,  842,
      853,  841,  104,  236,  844,  845,  835,  844,  351,  338,
      841,  878,  933,    0,  830,    0,    0,  933,  933,  933,
      369,  861,  860,  412,  859,  933,  933,  933,  933,  417,
      424,  369,  933,  933,  933,  933,  837,  236,    0,  827,

      836,  826,  827,  833,    0,  829,  820,  824,  825,  827,
      813,  822,  933,  454,  933,  859,  859,  858,  857,  411,
      856,  855,  407,  422,  854,  426,  415,  428,  436,  438,
      853,  444,  440,  451,  457,  461,  414,  462,  933,  933,
      933,  933,  933,  837,  933,  933,  933,  933,  933,  836,
      933,  933,  933,  933,  850,  933,  933,  933,  465,  449,
      488,  849,    0,  458,  470,  492,  496,    0,  848,  933,
        0,  800,  810,  312,    0,  800,  809,  799,  800,  806,
        0,  802,  793,  797,  798,  800,  786,  795,  791,  933,
      933,  933,  933,  486,  815,  814,  798,  793,  794,  791,

      789,    0,  791,  789,  787,  775,  785,  774,  777,    0,
      777,  817,  933,  816,  470,  484,  498,  480,  499,  481,
      815,  485,  469,  515,  476,  520,  491,  524,  814,  526,
      933,  933,    0,  796,  514,  508,  795,  794,  768,  777,
      772,  773,  770,  768,    0,  770,  768,  766,  754,  764,
      753,  756,    0,  756,  762,  755,    0,  756,  754,  745,
      745,  754,  745,  744,  753,  752,    0,  749,  530,  532,
      784,  536,  538,  540,  542,  545,  541,  546,  548,  552,
      783,  547,    0,  540,  543,  541,  748,  741,    0,  742,
      740,  731,  731,  740,  731,  730,  739,  738,    0,  735,

      723,    0,    0,  731,  725,  724,  716,  702,  707,  702,
      708,    0,  554,  745,  742,  559,  561,  562,  563,  569,
      570,  573,  571,  741,  572,  723,  716,  686,    0,    0,
      694,  686,  688,  684,  675,  680,  675,  681,    0,  679,
        0,  680,  667,    0,  670,    0,    0,    0,  584,  708,
      580,  591,  651,  592,  650,  649,  648,  607,    0,  610,
      599,    0,  600,    0,    0,    0,  592,  587,  590,  585,
      593,  594,  595,  598,  586,  582,  585,  581,  583,  585,
        0,  586,  599,  606,  621,  602,  578,  579,    0,  580,
        0,  572,    0,  613,  604,  611,    0,  431,    0,  343,

      610,   95,    0,   61,    0,  933,  654,  663,  672,  681,
      690,  699,  704,  712,  717,  722,  731,  736,  744,  753,
      758,  763
    } ;

static yyconst flex_int16_t yy_def[523] =
    {   0,
      506,    1,  507,  507,  508,  508,  509,  509,  510,  510,
      511,  511,  506,   13,  506,   15,  512,  512,  506,   19,
      506,  506,  506,  506,  506,  506,  513,  506,  513,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  513,  506,  506,  506,  506,
      506,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  506,  506,  506,  506,  514,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,

      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  513,  506,  513,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  516,  506,  506,  506,  506,  517,
      506,  506,  506,  506,  506,  506,  506,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  506,  506,  513,  513,  513,  513,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  513,  513,  513,  513,

      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  506,  514,  506,  506,  519,  520,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  521,
      506,  506,  516,  506,  506,  506,  506,  517,  506,  506,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  513,  506,
      506,  506,  506,  506,  506,  506,  513,  513,  513,  513,

      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  519,  506,  520,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      506,  506,  522,  506,  506,  506,  506,  506,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  522,  506,  506,  506,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,

      513,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  506,  506,  506,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  513,  513,  513,  513,
      515,  515,  515,  515,  518,  518,  518,  518,  513,  513,
      513,  513,  515,  515,  515,  515,  518,  518,  518,  518,
      513,  513,  513,  515,  515,  515,  518,  518,  518,  513,

      515,  518,  513,  515,  518,    0,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  506
    } ;

static yyconst flex_int16_t yy_nxt[989] =
    {   0,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   46,   46,   46,   48,
       49,   50,   51,   46,   52,   53,   54,   55,   56,   57,
       58,   46,   46,   46,   59,   60,   61,   62,   46,   63,
       46,   64,   65,   66,   67,   68,   85,   86,   87,   69,
      202,   70,  218,   88,  203,   85,   86,   87,  102,  103,
       89,  187,   88,  102,  103,  188,  189,  218,   71,   89,
       71,   71,   71,  193,  194,  200,  201,   71,   72,   73,
       74,   75,   76,   77,   78,   71,   71,   71,   79,   80,

       81,   82,   71,   83,   71,   91,   92,   93,   91,   92,
       93,  218,   94,   97,   98,   94,   97,   98,  210,   95,
      240,  223,   95,   99,  211,  241,   99,  208,  100,  176,
      177,  100,  105,  106,  107,  105,  106,  107,  505,  209,
      176,  214,  215,  216,  193,  194,  276,  277,  108,  177,
      230,  108,  109,  110,   24,  111,  112,  113,  114,  115,
      116,  117,  118,  119,  120,  121,  122,  123,  124,  125,
      126,  127,  128,  129,  130,  131,  113,  132,  113,  113,
      113,  133,  134,  135,  136,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,

      113,  113,  113,  137,  138,  139,  140,  142,  143,  144,
      142,  142,  145,  142,  145,  142,  142,  142,  142,  142,
      146,  142,  147,  148,  142,  149,  142,  142,  142,  142,
      142,  145,  142,  145,  145,  145,  142,  142,  142,  142,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  142,  142,
      142,  142,  151,  152,  153,  154,  151,  152,  153,  154,
      155,  242,  246,  248,  155,  156,  243,  247,  249,  156,
      278,  157,  298,  299,  279,  157,  144,  144,  144,  144,
      144,  158,  144,  159,  144,  144,  144,  144,  144,  144,

      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      159,  144,  159,  159,  159,  144,  144,  144,  144,  159,
      160,  161,  162,  163,  164,  165,  166,  159,  159,  159,
      167,  168,  169,  170,  159,  171,  159,  144,  144,  144,
      144,  180,  218,  218,  181,  190,  218,  191,  182,  183,
      184,  218,  218,  218,  218,  192,  218,  218,  341,  342,
      259,  218,  185,  218,  186,  192,  192,  218,  257,  221,
      222,  187,  260,  258,  260,  188,  189,  286,  224,  220,
      221,  186,  295,  287,  295,  290,  503,  296,  284,  222,
      231,  176,  177,  233,  225,  226,  227,  234,  232,  228,

      285,  236,  176,  229,  190,  238,  191,  237,  218,  235,
      180,  177,  218,  181,  192,  218,  218,  182,  183,  184,
      261,  215,  216,  218,  192,  192,  265,  218,  266,  218,
      184,  185,  260,  186,  260,  294,  267,  218,  192,  218,
      190,  218,  191,  192,  316,  218,  267,  267,  192,  192,
      192,  320,  218,  192,  192,  214,  215,  216,  218,  315,
      192,  192,  218,  218,  329,  334,  259,  335,  317,  318,
      218,  218,  319,  321,  323,  502,  264,  218,  260,  322,
      260,  218,  218,  324,  267,  218,  218,  325,  336,  261,
      215,  216,  218,  326,  267,  267,  267,  327,  328,  218,

      218,  260,  330,  260,  294,  376,  267,  267,  265,  337,
      266,  337,  192,  369,  338,  372,  218,  370,  267,  374,
      375,  218,  192,  192,  378,  218,  336,  218,  267,  267,
      385,  218,  335,  218,  267,  371,  373,  218,  380,  218,
      386,  218,  218,  218,  267,  267,  218,  218,  218,  218,
      386,  386,  377,  218,  426,  218,  426,  379,  384,  427,
      218,  425,  218,  218,  218,  413,  386,  381,  382,  386,
      218,  218,  218,  414,  218,  415,  386,  386,  416,  386,
      386,  218,  419,  422,  424,  218,  420,  423,  417,  418,
      425,  421,  218,  218,  218,  218,  218,  450,  386,  218,

      218,  449,  452,  218,  451,  218,  453,  218,  386,  386,
      457,  218,  218,  455,  218,  472,  500,  499,  454,  498,
      456,  497,  218,  493,  471,  492,  491,  490,  489,  488,
      487,  482,  474,  481,  480,  473,  479,  483,  485,  496,
      478,  484,  494,  477,  486,  476,  495,  475,  501,  218,
      218,  218,  218,  504,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   96,   96,   96,   96,   96,   96,   96,   96,
       96,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  150,

      150,  150,  150,  150,  150,  150,  150,  150,  174,  218,
      470,  469,  174,  217,  217,  468,  217,  217,  219,  467,
      466,  219,  465,  464,  463,  219,  263,  462,  461,  460,
      263,  268,  459,  458,  427,  268,  268,  268,  268,  268,
      271,  427,  218,  218,  271,  312,  218,  448,  312,  447,
      446,  445,  312,  313,  313,  313,  313,  313,  313,  444,
      313,  313,  333,  333,  443,  333,  333,  383,  442,  441,
      440,  383,  439,  438,  437,  436,  435,  434,  433,  432,
      431,  430,  429,  428,  218,  218,  412,  411,  410,  409,
      408,  407,  406,  405,  404,  403,  402,  401,  400,  399,

      398,  397,  396,  395,  394,  393,  392,  391,  390,  389,
      388,  387,  338,  338,  384,  218,  218,  314,  218,  368,
      367,  366,  365,  364,  363,  362,  361,  360,  359,  358,
      357,  356,  296,  296,  355,  354,  353,  352,  351,  350,
      349,  348,  347,  346,  345,  344,  343,  340,  339,  269,
      262,  255,  332,  331,  218,  218,  218,  218,  218,  314,
      218,  215,  311,  310,  309,  308,  307,  306,  305,  304,
      303,  302,  301,  300,  297,  293,  292,  291,  289,  172,
      288,  283,  282,  281,  280,  275,  274,  273,  272,  270,
      269,  264,  262,  194,  213,  194,  196,  195,  179,  178,

      173,  256,  255,  254,  253,  252,  251,  250,  245,  244,
      239,  218,  194,  213,  212,  207,  206,  205,  204,  199,
      198,  197,  194,  196,  195,  179,  178,  175,  173,  172,
      506,  141,   21,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506
    } ;

static yyconst flex_int16_t yy_chk[989] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    3,    3,    2,
       56,    2,  504,    3,   56,    4,    4,    4,    9,    9,
        3,   39,    4,   10,   10,   39,   39,   72,    2,    4,
        2,    2,    2,   43,   43,   55,   55,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    5,    5,    5,    6,    6,
        6,   77,    5,    7,    7,    6,    8,    8,   62,    5,
       87,   72,    6,    7,   62,   87,    8,   61,    7,   29,
       29,    8,   11,   11,   11,   12,   12,   12,  502,   61,
       29,   68,   68,   68,  129,  129,  163,  163,   11,   29,
       77,   12,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   17,   17,   17,   17,   18,   18,   18,   18,
       17,   88,   93,   94,   18,   17,   88,   93,   94,   18,
      164,   17,  198,  198,  164,   18,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   38,   69,   70,   38,   40,   73,   40,   38,   38,
       38,   74,   79,   78,   75,   40,   76,   80,  274,  274,
      110,   81,   38,   82,   38,   40,   40,   83,  108,   70,
       70,  125,  110,  108,  110,  125,  125,  170,   73,   69,
       70,  181,  192,  170,  192,  181,  500,  192,  169,   70,
       78,  115,  115,   80,   74,   75,   75,   81,   79,   76,

      169,   82,  115,   76,  126,   83,  126,   82,  223,   81,
      124,  115,  220,  124,  126,  237,  227,  124,  124,  124,
      141,  141,  141,  224,  126,  126,  149,  226,  149,  228,
      184,  124,  141,  124,  141,  190,  149,  229,  184,  230,
      191,  233,  191,  190,  223,  232,  149,  149,  184,  184,
      191,  227,  234,  190,  190,  214,  214,  214,  235,  220,
      191,  191,  236,  238,  237,  260,  259,  260,  224,  224,
      323,  315,  226,  228,  230,  498,  264,  325,  259,  229,
      259,  318,  320,  232,  264,  316,  322,  233,  265,  261,
      261,  261,  327,  234,  264,  264,  265,  235,  236,  317,

      319,  261,  238,  261,  294,  323,  265,  265,  266,  267,
      266,  267,  294,  315,  267,  318,  324,  316,  266,  320,
      322,  326,  294,  294,  325,  328,  336,  330,  266,  266,
      335,  369,  335,  370,  336,  317,  319,  372,  327,  373,
      335,  374,  377,  375,  336,  336,  376,  378,  382,  379,
      335,  335,  324,  380,  386,  413,  386,  326,  384,  386,
      416,  385,  417,  418,  419,  369,  384,  328,  330,  385,
      420,  421,  423,  370,  422,  372,  384,  384,  373,  385,
      385,  451,  376,  379,  382,  449,  377,  380,  374,  375,
      425,  378,  452,  454,  471,  472,  473,  416,  425,  474,

      483,  413,  418,  486,  417,  495,  419,  484,  425,  425,
      423,  501,  496,  421,  494,  451,  492,  490,  420,  488,
      422,  487,  485,  482,  449,  480,  479,  478,  477,  476,
      475,  470,  454,  469,  468,  452,  467,  471,  473,  486,
      463,  472,  483,  461,  474,  460,  484,  458,  495,  457,
      456,  455,  453,  501,  507,  507,  507,  507,  507,  507,
      507,  507,  507,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  512,

      512,  512,  512,  512,  512,  512,  512,  512,  513,  450,
      445,  443,  513,  514,  514,  442,  514,  514,  515,  440,
      438,  515,  437,  436,  435,  515,  516,  434,  433,  432,
      516,  517,  431,  428,  427,  517,  517,  517,  517,  517,
      518,  426,  424,  415,  518,  519,  414,  411,  519,  410,
      409,  408,  519,  520,  520,  520,  520,  520,  520,  407,
      520,  520,  521,  521,  406,  521,  521,  522,  405,  404,
      401,  522,  400,  398,  397,  396,  395,  394,  393,  392,
      391,  390,  388,  387,  381,  371,  368,  366,  365,  364,
      363,  362,  361,  360,  359,  358,  356,  355,  354,  352,

      351,  350,  349,  348,  347,  346,  344,  343,  342,  341,
      340,  339,  338,  337,  334,  329,  321,  314,  312,  311,
      309,  308,  307,  306,  305,  304,  303,  301,  300,  299,
      298,  297,  296,  295,  289,  288,  287,  286,  285,  284,
      283,  282,  280,  279,  278,  277,  276,  273,  272,  269,
      262,  255,  250,  244,  231,  225,  222,  221,  219,  218,
      217,  216,  212,  211,  210,  209,  208,  207,  206,  204,
      203,  202,  201,  200,  197,  185,  183,  182,  175,  172,
      171,  168,  167,  166,  165,  162,  161,  160,  158,  153,
      151,  148,  143,  140,  138,  132,  131,  130,  120,  116,

      111,  107,  105,  103,  100,   99,   98,   95,   92,   89,
       86,   71,   67,   65,   63,   60,   59,   58,   57,   54,
       53,   52,   47,   45,   44,   34,   30,   27,   25,   23,
       21,   14,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506
    } ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;

#include "isatty.hxx"
#include "parse.hxx"
#include "parser_private.hxx"

#include "context.hxx"

static int comment_level = 0;
static int last_token = 0;
static int exit_status = PARSE_ERROR;
static std::string current_file;
static std::string program_name;

 static bool rejected = false;

#define YY_USER_ACTION           \
    yylloc.last_column += yyleng;

/* -*- Verbose Special Debug -*- */
//#define DEV
//#define TOKENDEV

#define INITIAL 0
#define SIMPLESTRING 1
#define DOUBLESTRING 2
#define REGIONCOMMENT 3
#define LINECOMMENT 4
#define LINEBREAK 5
#define MATRIX 6
#define MATRIXMINUSID 7
#define SHELLMODE 8
#define BEGINID 9

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 507 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 933 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
{
	ParserSingleInstance::pushControlStatus(Parser::WithinIf);
	BEGIN(INITIAL);
    return scan_throw(IF);
}
	YY_BREAK
case 2:
YY_RULE_SETUP
{
    	BEGIN(INITIAL);
        return scan_throw(THEN);
}
	YY_BREAK
case 3:
YY_RULE_SETUP
{
    // Pop to step out IF
	ParserSingleInstance::popControlStatus();
	ParserSingleInstance::pushControlStatus(Parser::WithinElse);
	BEGIN(INITIAL);
	return scan_throw(ELSE);
}
	YY_BREAK
case 4:
YY_RULE_SETUP
{
	ParserSingleInstance::popControlStatus();
	ParserSingleInstance::pushControlStatus(Parser::WithinElseIf);
	BEGIN(INITIAL);
	return scan_throw(ELSEIF);
}
	YY_BREAK
case 5:
YY_RULE_SETUP
{
  ParserSingleInstance::popControlStatus();
	BEGIN(INITIAL);
  return scan_throw(END);
}
	YY_BREAK
case 6:
YY_RULE_SETUP
{
  ParserSingleInstance::pushControlStatus(Parser::WithinSelect);
	BEGIN(INITIAL);
  return scan_throw(SELECT);
}
	YY_BREAK
case 7:
YY_RULE_SETUP
{
  ParserSingleInstance::pushControlStatus(Parser::WithinSwitch);
	BEGIN(INITIAL);
  return scan_throw(SWITCH);
}
	YY_BREAK
case 8:
YY_RULE_SETUP
{
	ParserSingleInstance::popControlStatus();
	ParserSingleInstance::pushControlStatus(Parser::WithinOtherwise);
	BEGIN(INITIAL);
	return scan_throw(OTHERWISE);
}
	YY_BREAK
case 9:
YY_RULE_SETUP
{
  ParserSingleInstance::popControlStatus();
  ParserSingleInstance::pushControlStatus(Parser::WithinCase);
	BEGIN(INITIAL);
  return scan_throw(CASE);
}
	YY_BREAK
case 10:
YY_RULE_SETUP
{
	ParserSingleInstance::pushControlStatus(Parser::WithinFunction);
	BEGIN(INITIAL);
	return scan_throw(FUNCTION);
}
	YY_BREAK
case 11:
YY_RULE_SETUP
{
	ParserSingleInstance::popControlStatus();
	BEGIN(INITIAL);
	return scan_throw(ENDFUNCTION);
}
	YY_BREAK
case 12:
YY_RULE_SETUP
{
	ParserSingleInstance::pushControlStatus(Parser::WithinFunction);
	BEGIN(INITIAL);
	return scan_throw(HIDDENFUNCTION);
}
	YY_BREAK
case 13:
YY_RULE_SETUP
{
 	BEGIN(INITIAL);
   return scan_throw(HIDDEN);
}
	YY_BREAK
case 14:
YY_RULE_SETUP
{
  ParserSingleInstance::pushControlStatus(Parser::WithinFor);
	BEGIN(INITIAL);
  return scan_throw(FOR);
}
	YY_BREAK
case 15:
YY_RULE_SETUP
{
	ParserSingleInstance::pushControlStatus(Parser::WithinWhile);
	BEGIN(INITIAL);
	return scan_throw(WHILE);
}
	YY_BREAK
case 16:
YY_RULE_SETUP
{
	BEGIN(INITIAL);
    return scan_throw(DO);
}
	YY_BREAK
case 17:
YY_RULE_SETUP
{
    	BEGIN(INITIAL);
        return scan_throw(BREAK);
}
	YY_BREAK
case 18:
YY_RULE_SETUP
{
	ParserSingleInstance::pushControlStatus(Parser::WithinTry);
	BEGIN(INITIAL);
	return scan_throw(TRY);
}
	YY_BREAK
case 19:
YY_RULE_SETUP
{
    // Pop to step out TRY
	ParserSingleInstance::popControlStatus();
	ParserSingleInstance::pushControlStatus(Parser::WithinCatch);
	BEGIN(INITIAL);
	return scan_throw(CATCH);
}
	YY_BREAK
case 20:
YY_RULE_SETUP
{
    BEGIN(INITIAL);
    return scan_throw(RETURN);
}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
{
        BEGIN(BEGINID);
}
	YY_BREAK

case 22:
YY_RULE_SETUP
{
        yylval.str = new std::string(yytext);
        if (symbol::Context::getInstance()->get(yytext) != NULL 
            && symbol::Context::getInstance()->get(yytext)->isCallable())
        {
            //std::cout << "** Start shell mode ..." << std::endl;
            //std::cout << "ID = " << yytext << std::endl;
            scan_throw(ID);
            BEGIN(SHELLMODE);
        }
        else 
        {
            //std::cout << "** NO shell mode ... throwing ID " << yytext << std::endl;
            BEGIN(INITIAL);
            return scan_throw(ID);
        }
    }
	YY_BREAK

case 23:
YY_RULE_SETUP
{
  return scan_throw(NOT);
}
	YY_BREAK
case 24:
YY_RULE_SETUP
{
  return scan_throw(DOLLAR);
}
	YY_BREAK
case 25:
YY_RULE_SETUP
{
  return scan_throw(BOOLTRUE);
}
	YY_BREAK
case 26:
YY_RULE_SETUP
{
  return scan_throw(BOOLFALSE);
}
	YY_BREAK
case 27:
YY_RULE_SETUP
{
  return scan_throw(AND);
}
	YY_BREAK
case 28:
YY_RULE_SETUP
{
  return scan_throw(ANDAND);
}
	YY_BREAK
case 29:
YY_RULE_SETUP
{
  return scan_throw(OR);
}
	YY_BREAK
case 30:
YY_RULE_SETUP
{
  return scan_throw(OROR);
}
	YY_BREAK
case 31:
YY_RULE_SETUP
{
  return scan_throw(LPAREN);
}
	YY_BREAK
case 32:
YY_RULE_SETUP
{
  return scan_throw(RPAREN);
}
	YY_BREAK
case 33:
YY_RULE_SETUP
{
	scan_step();
  return scan_throw(SEMI);
}
	YY_BREAK
case 34:
YY_RULE_SETUP
{
	scan_step();
  return scan_throw(COMMA);
}
	YY_BREAK
case 35:
YY_RULE_SETUP
{
  return scan_throw(COLON);
}
	YY_BREAK
case 36:
YY_RULE_SETUP
{
  return scan_throw(LBRACE);
}
	YY_BREAK
case 37:
YY_RULE_SETUP
{
  return scan_throw(RBRACE);
}
	YY_BREAK
case 38:
YY_RULE_SETUP
{
  return scan_throw(DOTQUOTE);
}
	YY_BREAK
case 39:
YY_RULE_SETUP
{
  return scan_throw(DOTTIMES);
}
	YY_BREAK
case 40:
YY_RULE_SETUP
{
  return scan_throw(DOTDIVIDE);
}
	YY_BREAK
case 41:
YY_RULE_SETUP
{
  return scan_throw(DOTRDIVIDE);
}
	YY_BREAK
case 42:
YY_RULE_SETUP
{
  return scan_throw(DOTPOWER);
}
	YY_BREAK
case 43:
YY_RULE_SETUP
{
  return scan_throw(MINUS);
}
	YY_BREAK
case 44:
YY_RULE_SETUP
{
  return scan_throw(PLUS);
}
	YY_BREAK
case 45:
YY_RULE_SETUP
{
  return scan_throw(TIMES);
}
	YY_BREAK
case 46:
YY_RULE_SETUP
{
  return scan_throw(DIVIDE);
}
	YY_BREAK
case 47:
YY_RULE_SETUP
{
  return scan_throw(RDIVIDE);
}
	YY_BREAK
case 48:
YY_RULE_SETUP
{
  return scan_throw(POWER);
}
	YY_BREAK
case 49:
YY_RULE_SETUP
{
  return scan_throw(KRONTIMES);
}
	YY_BREAK
case 50:
YY_RULE_SETUP
{
  return scan_throw(KRONDIVIDE);
}
	YY_BREAK
case 51:
YY_RULE_SETUP
{
  return scan_throw(KRONRDIVIDE);
}
	YY_BREAK
case 52:
YY_RULE_SETUP
{
  return scan_throw(CONTROLDIVIDE);
}
	YY_BREAK
case 53:
YY_RULE_SETUP
{
  return scan_throw(EQ);
}
	YY_BREAK
case 54:
YY_RULE_SETUP
{
  return scan_throw(NE);
}
	YY_BREAK
case 55:
YY_RULE_SETUP
{
  return scan_throw(LT);
}
	YY_BREAK
case 56:
YY_RULE_SETUP
{
  return scan_throw(GT);
}
	YY_BREAK
case 57:
YY_RULE_SETUP
{
  return scan_throw(LE);
}
	YY_BREAK
case 58:
YY_RULE_SETUP
{
  return scan_throw(GE);
}
	YY_BREAK
case 59:
YY_RULE_SETUP
{
  return scan_throw(ASSIGN);
 }
	YY_BREAK
case 60:
YY_RULE_SETUP
{
  yy_push_state(MATRIX);
  ParserSingleInstance::pushControlStatus(Parser::WithinMatrix);
  return scan_throw(LBRACK);
}
	YY_BREAK
case 61:
YY_RULE_SETUP
{
  return scan_throw(RBRACK);
}
	YY_BREAK
case 62:
YY_RULE_SETUP
{
  return scan_throw(DOT);
}
	YY_BREAK
case 63:
YY_RULE_SETUP
{
  yy_push_state(LINEBREAK);
}
	YY_BREAK
case 64:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] INTEGER : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(VARINT);
}
	YY_BREAK
case 65:
YY_RULE_SETUP
{
  scan_exponent_convert(yytext);
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
  scan_step();
  return scan_throw(VARFLOAT);
}
	YY_BREAK
case 66:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] NUMBER : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(NUM);
}
	YY_BREAK
case 67:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] LITTLE : " << yytext << std::endl;
#endif
  scan_step();
  return scan_throw(NUM);
}
	YY_BREAK
case 68:
YY_RULE_SETUP
{
  yylval.str = new std::string(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] ID : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(ID);
}
	YY_BREAK
case 69:
YY_RULE_SETUP
{
  yylval.comment = new std::string();
  ++comment_level;
  yy_push_state(REGIONCOMMENT);
}
	YY_BREAK
case 70:
YY_RULE_SETUP
{
  yylval.comment = new std::string();
  yy_push_state(LINECOMMENT);
}
	YY_BREAK
case 71:
YY_RULE_SETUP
{
  yylval.str = new std::string();
  yy_push_state(DOUBLESTRING);
}
	YY_BREAK
case 72:
YY_RULE_SETUP
{
  /*
  ** Matrix Transposition special behaviour
  ** ID' []' toto()' are transposition call
  */
  if (last_token == ID
      || last_token == RBRACK
      || last_token == RPAREN
      || last_token == RBRACE)
    {
      return scan_throw(QUOTE);
    }
  else {
    yylval.str = new std::string();
    yy_push_state(SIMPLESTRING);
  }
}
	YY_BREAK
case 73:
YY_RULE_SETUP
{
  scan_step();
  scan_throw(SPACES);
}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 1;
  yylloc.last_column = 1;
  scan_step();
  //std::cout << "<INITIAL,MATRIX>{newline}" << std::endl;
  if (last_token != EOL) {
      return scan_throw(EOL);
  }
}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 1;
  yylloc.last_column = 1;
  scan_step();
  scan_throw(EOL);
}
	YY_BREAK
case 76:
YY_RULE_SETUP
{
  std::string str = "unexpected token '";
  str += yytext;
  str += "'";
  exit_status = SCAN_ERROR;
  scan_error(str);
  yyterminate();
}
	YY_BREAK

case 77:
YY_RULE_SETUP
{
    yy_pop_state();
    ParserSingleInstance::popControlStatus();
    return scan_throw(RBRACK);
  }
	YY_BREAK
case 78:
YY_RULE_SETUP
{
    return scan_throw(PLUS);
  }
	YY_BREAK
case 79:
YY_RULE_SETUP
{
    return scan_throw(MINUS);
  }
	YY_BREAK
case 80:
YY_RULE_SETUP
{
   int i;
    for (i = yyleng - 1 ; i >= 0 ; --i)
      {
	unput(yytext[i]);
      }
    yy_push_state(MATRIXMINUSID);
    if (last_token != LBRACK
	&& last_token != EOL
	&& last_token != SEMI)
      {
	return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 81:
YY_RULE_SETUP
{
   int i;
    for (i = yyleng - 1 ; i >= 0 ; --i)
      {
	unput(yytext[i]);
      }
    yy_push_state(MATRIXMINUSID);
    if (last_token != LBRACK
	&& last_token != EOL
	&& last_token != SEMI)
      {
	return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 82:
YY_RULE_SETUP
{
   int i;
    for (i = yyleng - 1 ; i >= 0 ; --i)
      {
	unput(yytext[i]);
      }
    yy_push_state(MATRIXMINUSID);
    if (last_token != LBRACK
	&& last_token != EOL
	&& last_token != SEMI)
      {
	return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 83:
YY_RULE_SETUP
{
   int i;
    for (i = yyleng - 1 ; i >= 0 ; --i)
      {
	unput(yytext[i]);
      }
    yy_push_state(MATRIXMINUSID);
    if (last_token != LBRACK
	&& last_token != EOL
	&& last_token != SEMI)
      {
	return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 84:
YY_RULE_SETUP
{
    int i;
    for (i = yyleng - 1 ; i >= 0 ; --i)
      {
	unput(yytext[i]);
      }
    yy_push_state(MATRIXMINUSID);
    if (last_token != LBRACK
	&& last_token != EOL
	&& last_token != SEMI)
      {
	return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 85:
YY_RULE_SETUP
{
    std::string str = "unexpected token '";
    str += yytext;
    str += "' within a matrix.";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yyterminate();
  }
	YY_BREAK

case 86:
YY_RULE_SETUP
{
    return scan_throw(MINUS);
  }
	YY_BREAK
case 87:
YY_RULE_SETUP
{
     /* Do Nothing. */
  }
	YY_BREAK
case 88:
YY_RULE_SETUP
{
    yy_pop_state();
    yylval.number = atof(yytext);
#ifdef TOKENDEV
    std::cout << "--> [DEBUG] INTEGER : " << yytext << std::endl;
#endif
    scan_step();
    return scan_throw(VARINT);
  }
	YY_BREAK
case 89:
YY_RULE_SETUP
{
    yy_pop_state();
    yylval.number = atof(yytext);
#ifdef TOKENDEV
    std::cout << "--> [DEBUG] NUMBER : " << yytext << std::endl;
#endif
    scan_step();
    return scan_throw(NUM);
  }
	YY_BREAK
case 90:
YY_RULE_SETUP
{
    yy_pop_state();
    yylval.number = atof(yytext);
#ifdef TOKENDEV
    std::cout << "--> [DEBUG] LITTLE : " << yytext << std::endl;
#endif
    scan_step();
    return scan_throw(NUM);
  }
	YY_BREAK
case 91:
YY_RULE_SETUP
{
    yy_pop_state();
    scan_exponent_convert(yytext);
    yylval.number = atof(yytext);
#ifdef TOKENDEV
    std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
    scan_step();
    return scan_throw(VARFLOAT);
  }
	YY_BREAK
case 92:
YY_RULE_SETUP
{
    yy_pop_state();
    yylval.str = new std::string(yytext);
#ifdef TOKENDEV
    std::cout << "--> [DEBUG] ID : " << yytext << std::endl;
#endif
    scan_step();
    return scan_throw(ID);
  }
	YY_BREAK
case 93:
YY_RULE_SETUP
{
    /* Do Nothing. */
  }
	YY_BREAK
case 94:
YY_RULE_SETUP
{
    std::string str = "unexpected token '";
    str += yytext;
    str += "' within a matrix.";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yyterminate();
  }
	YY_BREAK

case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
{
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    scan_step();
    yy_pop_state();
  }
	YY_BREAK
case 96:
YY_RULE_SETUP
{
    ++comment_level;
    yy_push_state(REGIONCOMMENT);
  }
	YY_BREAK
case 97:
YY_RULE_SETUP
{
    scan_throw(DOTS);
    yylval.comment = new std::string();
    yy_push_state(LINECOMMENT);
  }
	YY_BREAK
case 98:
YY_RULE_SETUP
{
    /* Do nothing... */
  }
	YY_BREAK
case 99:
YY_RULE_SETUP
{
    std::string str = "unexpected token '";
    str += yytext;
    str += "' after line break with .. or ...";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yyterminate();
  }
	YY_BREAK

case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
{
    //yylloc.last_line += 1;
    //yylloc.last_column = 1;
    //scan_step();
    yy_pop_state();
    unput('\n');
    /*
    ** To forgot comments after lines break
    */
    if (last_token != DOTS)
      {
	return scan_throw(COMMENT);
      }

  }
	YY_BREAK
case YY_STATE_EOF(LINECOMMENT):
{
    yy_pop_state();
    return scan_throw(COMMENT);
  }
	YY_BREAK
case 101:
YY_RULE_SETUP
{
    *yylval.comment += yytext;
  }
	YY_BREAK

case 102:
YY_RULE_SETUP
{
    --comment_level;
    if (comment_level == 0) {
      yy_pop_state();
      //return scan_throw(BLOCKCOMMENT);
    }
  }
	YY_BREAK
case 103:
YY_RULE_SETUP
{
    ++comment_level;
    yy_push_state(REGIONCOMMENT);
  }
	YY_BREAK
case YY_STATE_EOF(REGIONCOMMENT):
{
    std::string str = "unexpected end of file in a comment";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yyterminate();
  }
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
{
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    scan_step();
    *yylval.comment += "\n//";
  }
	YY_BREAK
case 105:
YY_RULE_SETUP
{
    *yylval.comment += yytext;
  }
	YY_BREAK

case 106:
YY_RULE_SETUP
{
    *yylval.str += "\"";
  }
	YY_BREAK
case 107:
YY_RULE_SETUP
{
    *yylval.str += "'";
  }
	YY_BREAK
case 108:
YY_RULE_SETUP
{
    *yylval.str += "\"";
  }
	YY_BREAK
case 109:
YY_RULE_SETUP
{
    *yylval.str += "'";
  }
	YY_BREAK
case 110:
YY_RULE_SETUP
{
    yy_pop_state();
    scan_step();
    return scan_throw(STR);
  }
	YY_BREAK
case 111:
YY_RULE_SETUP
{
    //yylloc.last_line += 1;
    scan_step();
  }
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
{
    std::string str = "unexpected end of line in a string.";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    *yylval.str += yytext;
    yy_pop_state();
    yyterminate();
  }
	YY_BREAK
case YY_STATE_EOF(SIMPLESTRING):
{
    std::string str = "unexpected end of file in a string.";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yy_pop_state();
    yyterminate();
  }
	YY_BREAK
case 113:
YY_RULE_SETUP
{
    scan_step();
    *yylval.str += yytext;
  }
	YY_BREAK

case 114:
YY_RULE_SETUP
{
    *yylval.str += "\"";
  }
	YY_BREAK
case 115:
YY_RULE_SETUP
{
    *yylval.str += "'";
  }
	YY_BREAK
case 116:
YY_RULE_SETUP
{
    *yylval.str += "\"";
  }
	YY_BREAK
case 117:
YY_RULE_SETUP
{
    *yylval.str += "'";
  }
	YY_BREAK
case 118:
YY_RULE_SETUP
{
    yy_pop_state();
    scan_step();
    return scan_throw(STR);
  }
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
{
    std::string str = "unexpected end of line in a string";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    *yylval.str += yytext;
    yyterminate();
  }
	YY_BREAK
case 120:
YY_RULE_SETUP
{
    //yylloc.last_line += 1;
    scan_step();
  }
	YY_BREAK
case YY_STATE_EOF(DOUBLESTRING):
{
    std::string str = "unexpected end of file in a string";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yy_pop_state();
    yyterminate();
  }
	YY_BREAK
case 121:
YY_RULE_SETUP
{
    scan_step();
    *yylval.str += yytext;
  }
	YY_BREAK

case 122:
YY_RULE_SETUP
{
        if (last_token == ID)
        {
            scan_throw(SPACES);
            return ID;
        }
    }
	YY_BREAK
case 123:
YY_RULE_SETUP
{
        BEGIN(INITIAL);
        //std::cout << "<SHELLMODE> SEMICOLON" << std::endl;
        return scan_throw(SEMI);
    }
	YY_BREAK
case 124:
YY_RULE_SETUP
{
        BEGIN(INITIAL);
        //std::cout << "<SHELLMODE> COMMA" << std::endl;
        return scan_throw(COMMA);
    }
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
{
        BEGIN(INITIAL);
        //std::cout << "<SHELLMODE> EOL" << std::endl;
        return scan_throw(EOL);
    }
	YY_BREAK
case 126:
YY_RULE_SETUP
{
        yylval.str = new std::string(yytext);
        //std::cout << "STR = " << yytext << std::endl;
        return scan_throw(STR);
    }
	YY_BREAK
case YY_STATE_EOF(SHELLMODE):
{
        BEGIN(INITIAL);
    }
	YY_BREAK

case 127:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(LINEBREAK):
			case YY_STATE_EOF(MATRIX):
			case YY_STATE_EOF(MATRIXMINUSID):
			case YY_STATE_EOF(BEGINID):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 507 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 507 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 506);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

int scan_throw(int token) {
  last_token = token;
#ifdef DEV
  std::cout << "--> [DEBUG] TOKEN : " << token << std::endl;
#endif
  return token;
}

void scan_step() {
  yylloc.first_line = yylloc.last_line;
  yylloc.first_column = yylloc.last_column;
}

void scan_error(std::string msg)
{
  ParserSingleInstance::PrintError(msg);
  ParserSingleInstance::setExitStatus(Parser::Failed);
}

/*
** convert floating numbers to C standard
** 1.2d-3 -> 1.2e-3
** 1.2D-3 -> 1.2e-3
*/
void scan_exponent_convert(char *in)
{
  char *pString;
  while((pString=strpbrk(in,"d"))!=NULL)
    {
      *pString='e';
    }
  while((pString=strpbrk(in,"D"))!=NULL)
    {
      *pString='e';
    }
}

#ifdef _MSC_VER
int isatty (int desc)
{
  return 0;
}
#endif

