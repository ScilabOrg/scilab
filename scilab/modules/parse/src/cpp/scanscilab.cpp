
#line 3 "src/cpp/scanscilab.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 130
#define YY_END_OF_BUFFER 131
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[798] =
    {   0,
    16405,  131,   78,  130,   75,   78,  130,   76,  130,   76,
       78,  130,   73,   78,  130,   70,   78,  130,   24,   78,
      130,   70,   78,  130,   27,   78,  130,   74,   78,  130,
       31,   78,  130,   32,   78,  130,   45,   78,  130,   44,
       78,  130,   34,   78,  130,   43,   78,  130,   64,   78,
      130,   46,   78,  130,   66,   78,  130,   35,   78,  130,
       33,   78,  130,   57,   78,  130,   61,   78,  130,   58,
       78,  130,   70,   78,  130,   23,   78,  130,   62,   78,
      130,   47,   78,  130,   63,   78,  130,   48,   78,  130,
       70,   78,  130,   70,   78,  130,   70,   78,  130,   70,

       78,  130,   70,   78,  130,   70,   78,  130,   70,   78,
      130,   70,   78,  130,   70,   78,  130,   70,   78,  130,
       70,   78,  130,   70,   78,  130,   36,   78,  130,   29,
       78,  130,   37,   78,  130,   23,   78,  130,   75,   78,
      130,16405,   70,   78,  130,   70,   78,  130,   70,   78,
      130,   70,   78,  130,   70,   78,  130,   70,   78,  130,
       70,   78,  130,   70,   78,  130,   70,   78,  130,   70,
       78,  130,   70,   78,  130,   70,   78,  130,   70,   78,
      130,   70,   78,  130,   70,   78,  130,  116,  130,  115,
      130,  115,  116,  130,  116,  130,  113,  116,  130,  116,

      130,  124,  130,  122,  130,  122,  124,  130,  121,  124,
      130,  124,  130,  124,  130,  108,  130,  107,  130,  107,
      108,  130,  108,  130,  108,  130,  104,  130,  103,  130,
      103,  104,  130,  102,  130,  101,  102,  130,   98,  130,
       98,  102,  130,  102,  130,   88,  130,   75,   88,  130,
       76,   88,  130,   73,   88,  130,   70,   88,  130,   24,
       88,  130,   70,   88,  130,   27,   88,  130,   74,   88,
      130,   31,   88,  130,   32,   88,  130,   45,   88,  130,
       81,   88,  130,   34,   88,  130,   82,   88,  130,   64,
       88,  130,   46,   88,  130,   66,   88,  130,   35,   88,

      130,   33,   88,  130,   57,   88,  130,   61,   88,  130,
       58,   88,  130,   23,   88,  130,   62,   88,  130,   47,
       88,  130,   79,   88,  130,   48,   88,  130,   36,   88,
      130,   29,   88,  130,   80,   88,  130,   23,   88,  130,
       75,   88,  130,   97,  130,   96,   97,  130,  130,   95,
       97,  130,   90,   97,  130,   89,   97,  130,   97,  130,
       91,   97,  130,  129,  130,  125,  130,  128,  130,  128,
      130,   73,  130,   74,  130,  127,  130,  126,  130,   22,
      130,   22,  130,   22,  130,   22,  130,   22,  130,   22,
      130,   22,  130,   22,  130,   22,  130,   22,  130,   22,

      130,   22,  130,   22,  130,   22,  130,   75,   76,   70,
       70,   26,   70,   25,   70,   28,   48,   38,   39,   65,
       40,   69,   41,   42,   71,   72,   68,   66,   59,   56,
       55,   60,   70,   70,   16,   70,   70,   70,   70,   70,
       70,    1,   70,   70,   70,   70,   70,   70,   70,   70,
       30,   75,16405,   77,   77,   70,   70,   26,   70,   25,
       70,   70,   70,   16,   70,   70,   70,   70,   70,   70,
        1,   70,   70,   70,   70,   70,   70,   70,   70,  115,
      109,  110,  111,  112,  114,  122,  117,  118,  119,  120,
      123,  107,  105,  106,  103,  101,   98,   99,  100,   75,

       75,   96,   95,   93,   92,   91,  129,  125,  128,   22,
       22,   22,   22,   16,   22,   22,   22,   22,   22,   22,
        1,   22,   22,   22,   22,   22,   22,   22,   22,   70,
       52,   49,   65,   50,   51,   53,   68,   67,   54,   70,
       70,   70,   70,    5,   70,   14,   70,   70,   70,   70,
       70,   70,   70,   70,   18,   70,   70, 8213, 8213,   70,
       70,   70,   70,   70,    5,   70,   14,   70,   70,   70,
       70,   70,   70,   70,   70,   18,   70,   70,  114,  123,
       87,   83,   92,   94,   22,   22,   22,   22,   22,    5,
       22,   14,   22,   22,   22,   22,   22,   22,   22,   22,

       18,   22,   22,   70,   70,    9,   70,   70,    3,   70,
       70,   70,   70,   70,   70,   70,   70,    2,   70,   70,
       70,   70,    9,   70,   70,    3,   70,   70,   70,   70,
       70,   70,   70,   70,    2,   70,   70,   87,   86,   84,
       22,   22,    9,   22,   22,    3,   22,   22,   22,   22,
       22,   22,   22,   22,    2,   22,   22,   70,   17,   70,
       19,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       15,   70,   70,   17,   70,   19,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   15,   70,   84,   85,   22,
       17,   22,   19,   22,   22,   22,   22,   22,   22,   22,

       22,   22,   15,   22,   70,    4,   70,   70,   70,   13,
       70,   70,   20,   70,    6,   70,    7,   70,   70,    4,
       70,   70,   70,   13,   70,   70,   20,   70,    6,   70,
        7,   70,   22,    4,   22,   22,   22,   13,   22,   22,
       20,   22,    6,   22,    7,   22,   70,   70,   70,   70,
       70,   70,   70,   70,   22,   22,   22,   22,   70,   70,
       10,   70,   70,   70,   70,   10,   70,   70,   22,   22,
       10,   22,   22,   12,   70,   70,    8,   70,   12,   70,
       70,    8,   70,   12,   22,   22,    8,   22,   70,   70,
       22,   11,   70,   11,   70,   11,   22

    } ;

static yyconst flex_int16_t yy_accept[513] =
    {   0,
        1,    1,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    3,    5,    8,   10,   13,   16,   19,   22,   25,
       28,   31,   34,   37,   40,   43,   46,   49,   52,   55,
       58,   61,   64,   67,   70,   73,   76,   79,   82,   85,
       88,   91,   94,   97,  100,  103,  106,  109,  112,  115,
      118,  121,  124,  127,  130,  133,  136,  139,  143,  146,
      149,  152,  155,  158,  161,  164,  167,  170,  173,  176,
      179,  182,  185,  188,  190,  192,  195,  197,  200,  202,
      204,  206,  209,  212,  214,  216,  218,  220,  223,  225,

      227,  229,  231,  234,  236,  239,  241,  244,  246,  248,
      251,  254,  257,  260,  263,  266,  269,  272,  275,  278,
      281,  284,  287,  290,  293,  296,  299,  302,  305,  308,
      311,  314,  317,  320,  323,  326,  329,  332,  335,  338,
      341,  344,  346,  349,  350,  353,  356,  359,  361,  364,
      366,  368,  370,  372,  374,  376,  378,  380,  382,  384,
      386,  388,  390,  392,  394,  396,  398,  400,  402,  404,
      406,  408,  409,  410,  411,  412,  414,  416,  417,  418,
      418,  419,  420,  421,  422,  423,  424,  425,  426,  426,
      427,  428,  429,  429,  430,  431,  432,  433,  433,  434,

      435,  437,  438,  439,  440,  441,  442,  444,  445,  446,
      447,  448,  449,  450,  451,  452,  454,  455,  456,  456,
      456,  457,  458,  460,  462,  463,  464,  466,  467,  468,
      469,  470,  471,  473,  474,  475,  476,  477,  478,  479,
      480,  481,  482,  483,  484,  485,  486,  487,  488,  489,
      490,  491,  492,  493,  494,  495,  496,  497,  498,  499,
      500,  501,  501,  502,  503,  504,  505,  506,  507,  507,
      508,  509,  510,  511,  512,  513,  514,  516,  517,  518,
      519,  520,  521,  523,  524,  525,  526,  527,  528,  529,
      530,  531,  532,  533,  534,  535,  536,  537,  538,  538,

      539,  540,  541,  542,  543,  544,  546,  548,  549,  550,
      551,  552,  553,  554,  555,  557,  558,  558,  559,  560,
      561,  562,  563,  564,  565,  567,  569,  570,  571,  572,
      573,  574,  575,  576,  578,  579,  580,  581,  582,  582,
      583,  584,  584,  585,  586,  587,  588,  589,  590,  592,
      594,  595,  596,  597,  598,  599,  600,  601,  603,  604,
      605,  606,  608,  609,  611,  612,  613,  614,  615,  616,
      617,  618,  620,  621,  622,  623,  625,  626,  628,  629,
      630,  631,  632,  633,  634,  635,  637,  638,  639,  640,
      641,  641,  642,  643,  645,  646,  648,  649,  650,  651,

      652,  653,  654,  655,  657,  658,  659,  661,  663,  664,
      665,  666,  667,  668,  669,  670,  671,  673,  674,  676,
      678,  679,  680,  681,  682,  683,  684,  685,  686,  688,
      689,  689,  690,  691,  693,  695,  696,  697,  698,  699,
      700,  701,  702,  703,  705,  706,  708,  709,  710,  712,
      713,  715,  717,  719,  720,  722,  723,  724,  726,  727,
      729,  731,  733,  734,  736,  737,  738,  740,  741,  743,
      745,  747,  748,  749,  750,  751,  752,  753,  754,  755,
      756,  757,  758,  759,  760,  761,  763,  764,  765,  766,
      768,  769,  770,  771,  773,  774,  776,  777,  779,  781,

      782,  784,  786,  787,  789,  790,  791,  792,  794,  796,
      798,  798
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,   25,   26,   25,   25,   25,   27,   27,   28,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   29,   25,   25,   25,   25,   25,   25,
       30,   31,   32,   33,   25,    1,   34,   35,   36,   37,

       38,   39,   25,   40,   41,   25,   42,   43,   25,   44,
       45,   25,   25,   46,   47,   48,   49,   25,   50,   25,
       51,   25,   52,   53,   54,   55,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[56] =
    {   0,
        1,    2,    3,    3,    4,    5,    1,    6,    1,    4,
        7,    1,    1,    1,    4,    1,    8,    1,    9,    1,
        4,    1,    7,    1,    5,    1,    5,    5,    5,    1,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[531] =
    {   0,
        0,   54,   54,   63,  103,  106,  111,  114,   66,   71,
      131,  134,  152,  958,  207,    0,  261,  265,  286,    0,
      959,  961,  956,  961,  954,  961,  917,  961,  102,  946,
      961,  961,  961,   48,  961,  961,  961,  332,   59,  329,
      961,  961,   61,  931,  930,    0,  929,  961,  934,  961,
      961,  904,  915,  903,   43,   76,  906,  907,  897,  906,
       90,   99,  903,  961,  889,  961,  918,  140,  341,  342,
      938,   76,  117,  350,  345,  351,  352,  353,  355,  110,
      356,  358,  357,  961,  961,  936,  267,  268,  921,  961,
      961,  934,  269,  359,  919,  961,  961,  932,  916,  920,

      961,  961,  929,  961,  929,  961,  927,  355,  961,  360,
      926,  961,    0,  961,  373,  919,  961,  961,  961,  268,
      961,  961,  961,  397,  365,  400,  961,  961,  123,  904,
      903,  902,  961,  907,  961,  961,  961,  870,  961,  899,
      420,  961,  919,  961,    0,  961,  961,  901,  412,    0,
      917,  961,  915,  961,  961,  961,  961,  878,    0,  870,
      881,  869,  240,  330,  872,  873,  863,  872,  334,  345,
      869,  906,  961,    0,  858,    0,    0,  961,  961,    0,
      961,  392,  889,  888,  406,  887,  961,  961,    0,  961,
      421,  428,  437,  961,  961,  961,  961,    0,  865,  339,

        0,  855,  864,  854,  855,  861,    0,  857,  848,  852,
      853,  855,  841,  850,  961,  458,  961,  887,  887,  886,
      885,  359,  884,  883,  375,  416,  882,  424,  409,  430,
      397,  433,  881,  440,  450,  452,  455,  465,  418,  466,
      961,  961,  961,  961,  961,  865,  961,  961,  961,  961,
      961,  864,  961,  961,  961,  961,  878,  961,  961,  961,
      470,  456,  475,  877,    0,  455,  475,  482,  469,    0,
      876,  961,    0,  828,  838,  457,    0,  828,  837,  827,
      828,  834,    0,  830,  821,  825,  826,  828,  814,  823,
      819,  961,  961,  961,  961,  961,  961,  487,  843,  842,

      961,  826,  821,  822,  819,  817,    0,  819,  817,  815,
      803,  813,  802,  805,    0,  805,  845,  961,  844,  479,
      488,  495,  485,  498,  506,  843,  508,  509,  513,  514,
      515,  516,  524,  842,  526,  961,  961,    0,  824,  510,
      512,  823,  822,  796,  805,  800,  801,  798,  796,    0,
      798,  796,  794,  782,  792,  781,  784,    0,  784,  790,
      783,    0,  784,  782,  773,  773,  782,  773,  772,  781,
      780,    0,  777,  530,  528,  812,  532,  533,  536,  538,
      539,  541,  550,  540,  552,  811,  553,    0,  546,  552,
      542,  776,  769,    0,  770,  768,  759,  759,  768,  759,

      758,  767,  766,    0,  763,  752,    0,    0,  760,  754,
      755,  751,  744,  746,  737,  737,    0,  555,  774,  773,
      558,  557,  565,  560,  573,  576,  578,  579,  771,  573,
      753,  726,  696,    0,    0,  704,  692,  694,  690,  681,
      686,  681,  686,    0,  684,    0,  688,  677,    0,  680,
        0,    0,    0,  580,  715,  591,  592,  711,  593,  710,
      709,  652,  612,    0,  615,  601,    0,  602,    0,    0,
        0,  597,  592,  595,  591,  596,  597,  600,  603,  591,
      587,  589,  585,  587,  589,    0,  591,  605,  606,  626,
      610,  581,  583,    0,  584,    0,  573,    0,  615,  607,

      614,    0,  570,    0,  570,  611,   82,    0,   61,    0,
      961,  655,  664,  673,  682,  691,  700,  705,  713,  718,
      723,  732,  737,  746,  754,  762,  769,  778,  783,  788
    } ;

static yyconst flex_int16_t yy_def[531] =
    {   0,
      511,    1,  512,  512,  513,  513,  514,  514,  515,  515,
      516,  516,  511,   13,  511,   15,  517,  517,  511,   19,
      511,  511,  511,  511,  511,  511,  518,  511,  518,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  518,  511,  511,  511,  511,
      511,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  511,  511,  511,  511,  519,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,

      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  518,  511,  518,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  521,  511,  511,  511,  511,  522,
      511,  511,  511,  511,  511,  511,  511,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  511,  511,  518,  518,  518,  518,  511,  511,  524,
      511,  511,  511,  511,  511,  511,  511,  511,  525,  511,
      511,  511,  511,  511,  511,  511,  511,  526,  518,  518,

      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  511,  519,  511,  511,  527,  528,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  529,  511,  511,  521,  511,  511,  511,  511,  522,
      511,  511,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      518,  511,  511,  511,  511,  511,  511,  511,  511,  511,

      511,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  527,  511,  528,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  511,  511,  530,  511,  511,
      511,  511,  511,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  530,  511,  511,
      511,  523,  523,  523,  523,  523,  523,  523,  523,  523,

      523,  523,  523,  523,  523,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  520,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  511,
      511,  511,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  518,  518,  518,  518,  520,  520,  520,  520,  523,
      523,  523,  523,  518,  518,  518,  518,  520,  520,  520,
      520,  523,  523,  523,  523,  518,  518,  518,  520,  520,

      520,  523,  523,  523,  518,  520,  523,  518,  520,  523,
        0,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511
    } ;

static yyconst flex_int16_t yy_nxt[1017] =
    {   0,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   46,   46,   46,   48,
       49,   50,   51,   46,   52,   53,   54,   55,   56,   57,
       58,   46,   46,   46,   59,   60,   61,   62,   46,   63,
       46,   64,   65,   66,   67,   68,   85,   86,   87,   69,
      179,   70,  220,   88,  180,   85,   86,   87,  102,  103,
       89,  188,   88,  102,  103,  189,  190,  220,   71,   89,
       71,   71,   71,  194,  195,  202,  203,   71,   72,   73,
       74,   75,   76,   77,   78,   71,   71,   71,   79,   80,

       81,   82,   71,   83,   71,   91,   92,   93,   91,   92,
       93,  220,   94,   97,   98,   94,   97,   98,  220,   95,
      204,  225,   95,   99,  205,  510,   99,  210,  100,  176,
      177,  100,  105,  106,  107,  105,  106,  107,  212,  211,
      176,  216,  217,  218,  213,  194,  195,  235,  108,  177,
      226,  108,  109,  110,   24,  111,  112,  113,  114,  115,
      116,  117,  118,  119,  120,  121,  122,  123,  124,  125,
      126,  127,  128,  129,  130,  131,  113,  132,  113,  113,
      113,  133,  134,  135,  136,  113,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,

      113,  113,  113,  137,  138,  139,  140,  142,  143,  144,
      142,  142,  145,  142,  145,  142,  142,  142,  142,  142,
      146,  142,  147,  148,  142,  149,  142,  142,  142,  142,
      142,  145,  142,  145,  145,  145,  142,  142,  142,  142,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  142,  142,
      142,  142,  151,  152,  153,  154,  151,  152,  153,  154,
      155,  242,  244,  248,  155,  156,  243,  245,  249,  156,
      179,  157,  278,  279,  180,  157,  144,  144,  144,  144,
      144,  158,  144,  159,  144,  144,  144,  144,  144,  144,

      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      159,  144,  159,  159,  159,  144,  144,  144,  144,  159,
      160,  161,  162,  163,  164,  165,  166,  159,  159,  159,
      167,  168,  169,  170,  159,  171,  159,  144,  144,  144,
      144,  181,  220,  220,  182,  191,  220,  192,  183,  184,
      185,  220,  220,  220,  220,  193,  220,  220,  220,  220,
      220,  261,  186,  250,  187,  193,  193,  259,  251,  223,
      224,  286,  260,  262,  280,  262,  220,  188,  281,  222,
      223,  189,  190,  287,  288,  303,  304,  228,  229,  224,
      289,  233,  232,  236,  227,  230,  240,  238,  220,  231,

      176,  177,  234,  239,  187,  237,  181,  320,  293,  182,
      220,  176,  321,  183,  184,  185,  191,  220,  192,  220,
      177,  263,  217,  218,  185,  220,  193,  186,  267,  187,
      268,  220,  193,  262,  220,  262,  193,  193,  269,  298,
      327,  220,  193,  193,  191,  325,  192,  193,  269,  269,
      299,  220,  299,  220,  193,  300,  220,  193,  193,  216,
      217,  218,  322,  323,  193,  193,  220,  220,  334,  328,
      324,  261,  339,  266,  340,  326,  263,  217,  218,  329,
      220,  269,  342,  262,  342,  262,  220,  343,  262,  220,
      262,  269,  269,  341,  331,  332,  220,  330,  267,  220,

      268,  269,  333,  346,  347,  298,  335,  220,  269,  220,
      220,  269,  269,  193,  220,  220,  220,  220,  269,  269,
      377,  375,  374,  193,  193,  220,  390,  220,  340,  220,
      341,  220,  376,  220,  220,  378,  391,  220,  269,  220,
      220,  220,  220,  380,  379,  381,  391,  391,  269,  269,
      382,  220,  384,  220,  220,  431,  220,  431,  220,  220,
      432,  220,  383,  385,  389,  418,  220,  386,  387,  419,
      430,  420,  391,  421,  220,  427,  424,  220,  391,  220,
      220,  220,  391,  391,  422,  423,  425,  428,  391,  391,
      429,  430,  220,  220,  220,  426,  455,  220,  220,  391,

      456,  220,  454,  458,  220,  457,  220,  220,  220,  391,
      391,  220,  220,  508,  507,  220,  220,  505,  462,  460,
      476,  504,  459,  503,  502,  461,  477,  220,  498,  497,
      496,  495,  494,  479,  493,  492,  478,  487,  486,  485,
      488,  484,  483,  490,  489,  482,  500,  501,  499,  491,
      481,  506,  480,  220,  509,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   96,   96,   96,   96,   96,   96,   96,
       96,   96,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  104,  104,  104,  104,  104,  104,  104,  104,  104,

      150,  150,  150,  150,  150,  150,  150,  150,  150,  174,
      220,  220,  220,  174,  219,  219,  220,  219,  219,  221,
      475,  474,  221,  473,  472,  471,  221,  265,  470,  469,
      468,  265,  270,  467,  466,  465,  270,  270,  270,  270,
      270,  273,  464,  463,  432,  273,  292,  292,  292,  292,
      292,  292,  292,  292,  297,  297,  297,  297,  297,  297,
      297,  297,  301,  301,  301,  301,  301,  301,  301,  301,
      317,  432,  220,  317,  220,  220,  453,  317,  318,  318,
      318,  318,  318,  318,  452,  318,  318,  338,  338,  451,
      338,  338,  388,  450,  449,  448,  388,  447,  446,  445,

      444,  443,  442,  441,  440,  439,  438,  437,  436,  435,
      434,  433,  220,  220,  417,  416,  415,  414,  413,  412,
      411,  410,  409,  408,  407,  406,  405,  404,  403,  402,
      401,  400,  399,  398,  397,  396,  395,  394,  393,  392,
      343,  343,  389,  220,  220,  319,  220,  373,  372,  371,
      370,  369,  368,  367,  366,  365,  364,  363,  362,  361,
      300,  300,  360,  359,  358,  357,  356,  355,  354,  353,
      352,  351,  350,  349,  348,  345,  344,  271,  264,  257,
      337,  336,  220,  220,  220,  220,  220,  319,  220,  217,
      316,  315,  314,  313,  312,  311,  310,  309,  308,  307,

      306,  305,  302,  296,  295,  294,  291,  172,  290,  285,
      284,  283,  282,  277,  276,  275,  274,  272,  271,  266,
      264,  195,  215,  198,  195,  197,  196,  178,  173,  258,
      257,  256,  255,  254,  253,  252,  247,  246,  241,  220,
      195,  215,  214,  209,  208,  207,  206,  201,  200,  199,
      198,  195,  197,  196,  178,  175,  173,  172,  511,  141,
       21,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,

      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511
    } ;

static yyconst flex_int16_t yy_chk[1017] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    3,    3,    2,
       34,    2,  509,    3,   34,    4,    4,    4,    9,    9,
        3,   39,    4,   10,   10,   39,   39,   72,    2,    4,
        2,    2,    2,   43,   43,   55,   55,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    5,    5,    5,    6,    6,
        6,   80,    5,    7,    7,    6,    8,    8,   73,    5,
       56,   72,    6,    7,   56,  507,    8,   61,    7,   29,
       29,    8,   11,   11,   11,   12,   12,   12,   62,   61,
       29,   68,   68,   68,   62,  129,  129,   80,   11,   29,
       73,   12,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   17,   17,   17,   17,   18,   18,   18,   18,
       17,   87,   88,   93,   18,   17,   87,   88,   93,   18,
      120,   17,  163,  163,  120,   18,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   38,   69,   70,   38,   40,   75,   40,   38,   38,
       38,   74,   76,   77,   78,   40,   79,   81,   83,   82,
      222,  110,   38,   94,   38,   40,   40,  108,   94,   70,
       70,  169,  108,  110,  164,  110,  225,  125,  164,   69,
       70,  125,  125,  169,  170,  200,  200,   75,   75,   70,
      170,   78,   77,   81,   74,   76,   83,   82,  231,   76,

      115,  115,   79,   82,  182,   81,  124,  222,  182,  124,
      229,  115,  225,  124,  124,  124,  126,  226,  126,  239,
      115,  141,  141,  141,  185,  228,  126,  124,  149,  124,
      149,  230,  185,  141,  232,  141,  126,  126,  149,  191,
      231,  234,  185,  185,  192,  229,  192,  191,  149,  149,
      193,  235,  193,  236,  192,  193,  237,  191,  191,  216,
      216,  216,  226,  226,  192,  192,  238,  240,  239,  232,
      228,  261,  262,  266,  262,  230,  263,  263,  263,  234,
      320,  266,  269,  261,  269,  261,  323,  269,  263,  321,
      263,  266,  266,  267,  236,  237,  322,  235,  268,  324,

      268,  267,  238,  276,  276,  298,  240,  325,  268,  327,
      328,  267,  267,  298,  329,  330,  331,  332,  268,  268,
      323,  321,  320,  298,  298,  333,  340,  335,  340,  375,
      341,  374,  322,  377,  378,  324,  340,  379,  341,  380,
      381,  384,  382,  327,  325,  328,  340,  340,  341,  341,
      329,  383,  331,  385,  387,  391,  418,  391,  422,  421,
      391,  424,  330,  332,  389,  374,  423,  333,  335,  375,
      390,  377,  389,  378,  425,  384,  381,  426,  390,  427,
      428,  454,  389,  389,  379,  380,  382,  385,  390,  390,
      387,  430,  456,  457,  459,  383,  421,  476,  477,  430,

      422,  478,  418,  424,  479,  423,  488,  489,  500,  430,
      430,  491,  506,  505,  503,  501,  499,  497,  428,  426,
      454,  495,  425,  493,  492,  427,  456,  490,  487,  485,
      484,  483,  482,  459,  481,  480,  457,  475,  474,  473,
      476,  472,  468,  478,  477,  466,  489,  491,  488,  479,
      465,  500,  463,  462,  506,  512,  512,  512,  512,  512,
      512,  512,  512,  512,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  514,  514,  514,  514,  514,  514,  514,
      514,  514,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  516,  516,  516,  516,  516,  516,  516,  516,  516,

      517,  517,  517,  517,  517,  517,  517,  517,  517,  518,
      461,  460,  458,  518,  519,  519,  455,  519,  519,  520,
      450,  448,  520,  447,  445,  443,  520,  521,  442,  441,
      440,  521,  522,  439,  438,  437,  522,  522,  522,  522,
      522,  523,  436,  433,  432,  523,  524,  524,  524,  524,
      524,  524,  524,  524,  525,  525,  525,  525,  525,  525,
      525,  525,  526,  526,  526,  526,  526,  526,  526,  526,
      527,  431,  429,  527,  420,  419,  416,  527,  528,  528,
      528,  528,  528,  528,  415,  528,  528,  529,  529,  414,
      529,  529,  530,  413,  412,  411,  530,  410,  409,  406,

      405,  403,  402,  401,  400,  399,  398,  397,  396,  395,
      393,  392,  386,  376,  373,  371,  370,  369,  368,  367,
      366,  365,  364,  363,  361,  360,  359,  357,  356,  355,
      354,  353,  352,  351,  349,  348,  347,  346,  345,  344,
      343,  342,  339,  334,  326,  319,  317,  316,  314,  313,
      312,  311,  310,  309,  308,  306,  305,  304,  303,  302,
      300,  299,  291,  290,  289,  288,  287,  286,  285,  284,
      282,  281,  280,  279,  278,  275,  274,  271,  264,  257,
      252,  246,  233,  227,  224,  223,  221,  220,  219,  218,
      214,  213,  212,  211,  210,  209,  208,  206,  205,  204,

      203,  202,  199,  186,  184,  183,  175,  172,  171,  168,
      167,  166,  165,  162,  161,  160,  158,  153,  151,  148,
      143,  140,  138,  134,  132,  131,  130,  116,  111,  107,
      105,  103,  100,   99,   98,   95,   92,   89,   86,   71,
       67,   65,   63,   60,   59,   58,   57,   54,   53,   52,
       49,   47,   45,   44,   30,   27,   25,   23,   21,   14,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,

      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      511,  511,  511,  511,  511,  511
    } ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;

#include "isatty.hxx"
#include "parse.hxx"
#include "parser_private.hxx"

#include "context.hxx"

extern "C"
{
#include "charEncoding.h"
#include "MALLOC.h"
}

static int comment_level = 0;
static int last_token = 0;
static int exit_status = PARSE_ERROR;
static std::string current_file;
static std::string program_name;

 static bool rejected = false;

#define YY_USER_ACTION                          \
 yylloc.last_column += yyleng;
/* -*- Verbose Special Debug -*- */
//#define DEV
//#define TOKENDEV

#define INITIAL 0
#define SIMPLESTRING 1
#define DOUBLESTRING 2
#define REGIONCOMMENT 3
#define LINECOMMENT 4
#define LINEBREAK 5
#define MATRIX 6
#define MATRIXMINUSID 7
#define SHELLMODE 8
#define BEGINID 9

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 512 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 961 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
{
	ParserSingleInstance::pushControlStatus(Parser::WithinIf);
	BEGIN(INITIAL);
    return scan_throw(IF);
}
	YY_BREAK
case 2:
YY_RULE_SETUP
{
    	BEGIN(INITIAL);
        return scan_throw(THEN);
}
	YY_BREAK
case 3:
YY_RULE_SETUP
{
    // Pop to step out IF
	ParserSingleInstance::popControlStatus();
	ParserSingleInstance::pushControlStatus(Parser::WithinElse);
	BEGIN(INITIAL);
	return scan_throw(ELSE);
}
	YY_BREAK
case 4:
YY_RULE_SETUP
{
	ParserSingleInstance::popControlStatus();
	ParserSingleInstance::pushControlStatus(Parser::WithinElseIf);
	BEGIN(INITIAL);
	return scan_throw(ELSEIF);
}
	YY_BREAK
case 5:
YY_RULE_SETUP
{
  ParserSingleInstance::popControlStatus();
	BEGIN(INITIAL);
  return scan_throw(END);
}
	YY_BREAK
case 6:
YY_RULE_SETUP
{
  ParserSingleInstance::pushControlStatus(Parser::WithinSelect);
	BEGIN(INITIAL);
  return scan_throw(SELECT);
}
	YY_BREAK
case 7:
YY_RULE_SETUP
{
  ParserSingleInstance::pushControlStatus(Parser::WithinSwitch);
	BEGIN(INITIAL);
  return scan_throw(SWITCH);
}
	YY_BREAK
case 8:
YY_RULE_SETUP
{
	ParserSingleInstance::popControlStatus();
	ParserSingleInstance::pushControlStatus(Parser::WithinOtherwise);
	BEGIN(INITIAL);
	return scan_throw(OTHERWISE);
}
	YY_BREAK
case 9:
YY_RULE_SETUP
{
  ParserSingleInstance::popControlStatus();
  ParserSingleInstance::pushControlStatus(Parser::WithinCase);
	BEGIN(INITIAL);
  return scan_throw(CASE);
}
	YY_BREAK
case 10:
YY_RULE_SETUP
{
	ParserSingleInstance::pushControlStatus(Parser::WithinFunction);
	BEGIN(INITIAL);
	return scan_throw(FUNCTION);
}
	YY_BREAK
case 11:
YY_RULE_SETUP
{
	ParserSingleInstance::popControlStatus();
	BEGIN(INITIAL);
	return scan_throw(ENDFUNCTION);
}
	YY_BREAK
case 12:
YY_RULE_SETUP
{
	ParserSingleInstance::pushControlStatus(Parser::WithinFunction);
	BEGIN(INITIAL);
	return scan_throw(HIDDENFUNCTION);
}
	YY_BREAK
case 13:
YY_RULE_SETUP
{
 	BEGIN(INITIAL);
   return scan_throw(HIDDEN);
}
	YY_BREAK
case 14:
YY_RULE_SETUP
{
  ParserSingleInstance::pushControlStatus(Parser::WithinFor);
	BEGIN(INITIAL);
  return scan_throw(FOR);
}
	YY_BREAK
case 15:
YY_RULE_SETUP
{
	ParserSingleInstance::pushControlStatus(Parser::WithinWhile);
	BEGIN(INITIAL);
	return scan_throw(WHILE);
}
	YY_BREAK
case 16:
YY_RULE_SETUP
{
	BEGIN(INITIAL);
    return scan_throw(DO);
}
	YY_BREAK
case 17:
YY_RULE_SETUP
{
    	BEGIN(INITIAL);
        return scan_throw(BREAK);
}
	YY_BREAK
case 18:
YY_RULE_SETUP
{
	ParserSingleInstance::pushControlStatus(Parser::WithinTry);
	BEGIN(INITIAL);
	return scan_throw(TRY);
}
	YY_BREAK
case 19:
YY_RULE_SETUP
{
    // Pop to step out TRY
	ParserSingleInstance::popControlStatus();
	ParserSingleInstance::pushControlStatus(Parser::WithinCatch);
	BEGIN(INITIAL);
	return scan_throw(CATCH);
}
	YY_BREAK
case 20:
YY_RULE_SETUP
{
    BEGIN(INITIAL);
    return scan_throw(RETURN);
}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
{
        BEGIN(BEGINID);
}
	YY_BREAK

case 22:
YY_RULE_SETUP
{
        yylval.str = new std::wstring(to_wide_string(yytext));
        if (symbol::Context::getInstance()->get(*yylval.str) != NULL
            && symbol::Context::getInstance()->get(*yylval.str)->isCallable())
        {
            scan_throw(ID);
            BEGIN(SHELLMODE);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(ID);
        }
    }
	YY_BREAK

case 23:
YY_RULE_SETUP
{
  return scan_throw(NOT);
}
	YY_BREAK
case 24:
YY_RULE_SETUP
{
  return scan_throw(DOLLAR);
}
	YY_BREAK
case 25:
YY_RULE_SETUP
{
  return scan_throw(BOOLTRUE);
}
	YY_BREAK
case 26:
YY_RULE_SETUP
{
  return scan_throw(BOOLFALSE);
}
	YY_BREAK
case 27:
YY_RULE_SETUP
{
  return scan_throw(AND);
}
	YY_BREAK
case 28:
YY_RULE_SETUP
{
  return scan_throw(ANDAND);
}
	YY_BREAK
case 29:
YY_RULE_SETUP
{
  return scan_throw(OR);
}
	YY_BREAK
case 30:
YY_RULE_SETUP
{
  return scan_throw(OROR);
}
	YY_BREAK
case 31:
YY_RULE_SETUP
{
  return scan_throw(LPAREN);
}
	YY_BREAK
case 32:
YY_RULE_SETUP
{
  return scan_throw(RPAREN);
}
	YY_BREAK
case 33:
YY_RULE_SETUP
{
	scan_step();
  return scan_throw(SEMI);
}
	YY_BREAK
case 34:
YY_RULE_SETUP
{
	scan_step();
  return scan_throw(COMMA);
}
	YY_BREAK
case 35:
YY_RULE_SETUP
{
  return scan_throw(COLON);
}
	YY_BREAK
case 36:
YY_RULE_SETUP
{
  yy_push_state(MATRIX);
  ParserSingleInstance::pushControlStatus(Parser::WithinCell);
  return scan_throw(LBRACE);
}
	YY_BREAK
case 37:
YY_RULE_SETUP
{
  return scan_throw(RBRACE);
}
	YY_BREAK
case 38:
YY_RULE_SETUP
{
  return scan_throw(DOTQUOTE);
}
	YY_BREAK
case 39:
YY_RULE_SETUP
{
  return scan_throw(DOTTIMES);
}
	YY_BREAK
case 40:
YY_RULE_SETUP
{
  return scan_throw(DOTDIVIDE);
}
	YY_BREAK
case 41:
YY_RULE_SETUP
{
  return scan_throw(DOTRDIVIDE);
}
	YY_BREAK
case 42:
YY_RULE_SETUP
{
  return scan_throw(DOTPOWER);
}
	YY_BREAK
case 43:
YY_RULE_SETUP
{
  return scan_throw(MINUS);
}
	YY_BREAK
case 44:
YY_RULE_SETUP
{
  return scan_throw(PLUS);
}
	YY_BREAK
case 45:
YY_RULE_SETUP
{
  return scan_throw(TIMES);
}
	YY_BREAK
case 46:
YY_RULE_SETUP
{
  return scan_throw(DIVIDE);
}
	YY_BREAK
case 47:
YY_RULE_SETUP
{
  return scan_throw(RDIVIDE);
}
	YY_BREAK
case 48:
YY_RULE_SETUP
{
  return scan_throw(POWER);
}
	YY_BREAK
case 49:
YY_RULE_SETUP
{
  return scan_throw(KRONTIMES);
}
	YY_BREAK
case 50:
YY_RULE_SETUP
{
  return scan_throw(KRONDIVIDE);
}
	YY_BREAK
case 51:
YY_RULE_SETUP
{
  return scan_throw(KRONRDIVIDE);
}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
{
    unput(yytext[yyleng - 1]);
    return scan_throw(CONTROLTIMES);
}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
{
    unput(yytext[yyleng - 1]);
    return scan_throw(CONTROLDIVIDE);
}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
{
    unput(yytext[yyleng - 1]);
    return scan_throw(CONTROLRDIVIDE);
}
	YY_BREAK
case 55:
YY_RULE_SETUP
{
  return scan_throw(EQ);
}
	YY_BREAK
case 56:
YY_RULE_SETUP
{
  return scan_throw(NE);
}
	YY_BREAK
case 57:
YY_RULE_SETUP
{
  return scan_throw(LT);
}
	YY_BREAK
case 58:
YY_RULE_SETUP
{
  return scan_throw(GT);
}
	YY_BREAK
case 59:
YY_RULE_SETUP
{
  return scan_throw(LE);
}
	YY_BREAK
case 60:
YY_RULE_SETUP
{
  return scan_throw(GE);
}
	YY_BREAK
case 61:
YY_RULE_SETUP
{
  return scan_throw(ASSIGN);
 }
	YY_BREAK
case 62:
YY_RULE_SETUP
{
  yy_push_state(MATRIX);
  ParserSingleInstance::pushControlStatus(Parser::WithinMatrix);
  return scan_throw(LBRACK);
}
	YY_BREAK
case 63:
YY_RULE_SETUP
{
  return scan_throw(RBRACK);
}
	YY_BREAK
case 64:
YY_RULE_SETUP
{
  return scan_throw(DOT);
}
	YY_BREAK
case 65:
YY_RULE_SETUP
{
  yy_push_state(LINEBREAK);
}
	YY_BREAK
case 66:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] INTEGER : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(VARINT);
}
	YY_BREAK
case 67:
YY_RULE_SETUP
{
  scan_exponent_convert(yytext);
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
  scan_step();
  return scan_throw(VARFLOAT);
}
	YY_BREAK
case 68:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] NUMBER : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(NUM);
}
	YY_BREAK
case 69:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] LITTLE : " << yytext << std::endl;
#endif
  scan_step();
  return scan_throw(NUM);
}
	YY_BREAK
case 70:
YY_RULE_SETUP
{
    yylval.str = new std::wstring(to_wide_string(yytext));
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] ID : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(ID);
}
	YY_BREAK
case 71:
YY_RULE_SETUP
{
  yylval.comment = new std::wstring();
  comment_level = 1;
  ParserSingleInstance::pushControlStatus(Parser::WithinBlockComment);
  yy_push_state(REGIONCOMMENT);
}
	YY_BREAK
case 72:
YY_RULE_SETUP
{
  yylval.comment = new std::wstring();
  yy_push_state(LINECOMMENT);
}
	YY_BREAK
case 73:
YY_RULE_SETUP
{
  yylval.str = new std::wstring();
  yy_push_state(DOUBLESTRING);
}
	YY_BREAK
case 74:
YY_RULE_SETUP
{
  /*
  ** Matrix Transposition special behaviour
  ** ID' []' toto()' are transposition call
  */
  if (last_token == ID
      || last_token == RBRACK
      || last_token == RPAREN
      || last_token == RBRACE)
    {
      return scan_throw(QUOTE);
    }
  else {
    yylval.str = new std::wstring();
    yy_push_state(SIMPLESTRING);
  }
}
	YY_BREAK
case 75:
YY_RULE_SETUP
{
  scan_step();
  scan_throw(SPACES);
}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 1;
  yylloc.last_column = 1;
  scan_step();
  if (last_token != EOL) {
      return scan_throw(EOL);
  }
}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 1;
  yylloc.last_column = 1;
  scan_step();
  scan_throw(EOL);
}
	YY_BREAK
case 78:
YY_RULE_SETUP
{
  std::string str = "unexpected token '";
  str += yytext;
  str += "'";
  exit_status = SCAN_ERROR;
  scan_error(str);
  yyterminate();
}
	YY_BREAK

case 79:
YY_RULE_SETUP
{
    yy_pop_state();
    ParserSingleInstance::popControlStatus();
    return scan_throw(RBRACK);
  }
	YY_BREAK
case 80:
YY_RULE_SETUP
{
    yy_pop_state();
    ParserSingleInstance::popControlStatus();
    return scan_throw(RBRACE);
  }
	YY_BREAK
case 81:
YY_RULE_SETUP
{
    return scan_throw(PLUS);
  }
	YY_BREAK
case 82:
YY_RULE_SETUP
{
    return scan_throw(MINUS);
  }
	YY_BREAK
case 83:
YY_RULE_SETUP
{
   int i;
    for (i = yyleng - 1 ; i >= 0 ; --i)
      {
	unput(yytext[i]);
      }
    yy_push_state(MATRIXMINUSID);
    if (last_token != LBRACK
	&& last_token != EOL
	&& last_token != SEMI)
      {
	return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 84:
YY_RULE_SETUP
{
   int i;
    for (i = yyleng - 1 ; i >= 0 ; --i)
      {
	unput(yytext[i]);
      }
    yy_push_state(MATRIXMINUSID);
    if (last_token != LBRACK
	&& last_token != EOL
	&& last_token != SEMI)
      {
	return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 85:
YY_RULE_SETUP
{
   int i;
    for (i = yyleng - 1 ; i >= 0 ; --i)
      {
	unput(yytext[i]);
      }
    yy_push_state(MATRIXMINUSID);
    if (last_token != LBRACK
	&& last_token != EOL
	&& last_token != SEMI)
      {
	return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 86:
YY_RULE_SETUP
{
   int i;
    for (i = yyleng - 1 ; i >= 0 ; --i)
      {
	unput(yytext[i]);
      }
    yy_push_state(MATRIXMINUSID);
    if (last_token != LBRACK
	&& last_token != EOL
	&& last_token != SEMI)
      {
	return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 87:
YY_RULE_SETUP
{
    int i;
    for (i = yyleng - 1 ; i >= 0 ; --i)
      {
	unput(yytext[i]);
      }
    yy_push_state(MATRIXMINUSID);
    if (last_token != LBRACK
	&& last_token != EOL
	&& last_token != SEMI)
      {
	return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 88:
YY_RULE_SETUP
{
    std::string str = "unexpected token '";
    str += yytext;
    str += "' within a matrix.";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yyterminate();
  }
	YY_BREAK

case 89:
YY_RULE_SETUP
{
    return scan_throw(MINUS);
  }
	YY_BREAK
case 90:
YY_RULE_SETUP
{
     /* Do Nothing. */
  }
	YY_BREAK
case 91:
YY_RULE_SETUP
{
    yy_pop_state();
    yylval.number = atof(yytext);
#ifdef TOKENDEV
    std::cout << "--> [DEBUG] INTEGER : " << yytext << std::endl;
#endif
    scan_step();
    return scan_throw(VARINT);
  }
	YY_BREAK
case 92:
YY_RULE_SETUP
{
    yy_pop_state();
    yylval.number = atof(yytext);
#ifdef TOKENDEV
    std::cout << "--> [DEBUG] NUMBER : " << yytext << std::endl;
#endif
    scan_step();
    return scan_throw(NUM);
  }
	YY_BREAK
case 93:
YY_RULE_SETUP
{
    yy_pop_state();
    yylval.number = atof(yytext);
#ifdef TOKENDEV
    std::cout << "--> [DEBUG] LITTLE : " << yytext << std::endl;
#endif
    scan_step();
    return scan_throw(NUM);
  }
	YY_BREAK
case 94:
YY_RULE_SETUP
{
    yy_pop_state();
    scan_exponent_convert(yytext);
    yylval.number = atof(yytext);
#ifdef TOKENDEV
    std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
    scan_step();
    return scan_throw(VARFLOAT);
  }
	YY_BREAK
case 95:
YY_RULE_SETUP
{
    yy_pop_state();
    yylval.str = new std::wstring(to_wide_string(yytext));
#ifdef TOKENDEV
    std::cout << "--> [DEBUG] ID : " << yytext << std::endl;
#endif
    scan_step();
    return scan_throw(ID);
  }
	YY_BREAK
case 96:
YY_RULE_SETUP
{
    /* Do Nothing. */
  }
	YY_BREAK
case 97:
YY_RULE_SETUP
{
    std::string str = "unexpected token '";
    str += yytext;
    str += "' within a matrix.";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yyterminate();
  }
	YY_BREAK

case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
{
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    scan_step();
    yy_pop_state();
  }
	YY_BREAK
case 99:
YY_RULE_SETUP
{
    ++comment_level;
    yy_push_state(REGIONCOMMENT);
  }
	YY_BREAK
case 100:
YY_RULE_SETUP
{
    scan_throw(DOTS);
    yylval.comment = new std::wstring();
    yy_push_state(LINECOMMENT);
  }
	YY_BREAK
case 101:
YY_RULE_SETUP
{
    /* Do nothing... */
  }
	YY_BREAK
case 102:
YY_RULE_SETUP
{
    std::string str = "unexpected token '";
    str += yytext;
    str += "' after line break with .. or ...";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yyterminate();
  }
	YY_BREAK

case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
{
    //yylloc.last_line += 1;
    //yylloc.last_column = 1;
    //scan_step();
    yy_pop_state();
    unput('\n');
    /*
    ** To forgot comments after lines break
    */
    if (last_token != DOTS)
      {
	return scan_throw(COMMENT);
      }

  }
	YY_BREAK
case YY_STATE_EOF(LINECOMMENT):
{
    yy_pop_state();
    return scan_throw(COMMENT);
  }
	YY_BREAK
case 104:
YY_RULE_SETUP
{
      *yylval.comment += to_wide_string(yytext);
  }
	YY_BREAK

case 105:
YY_RULE_SETUP
{
    --comment_level;
    if (comment_level == 0) {
      ParserSingleInstance::popControlStatus();
      yy_pop_state();
      //return scan_throw(BLOCKCOMMENT);
    }
  }
	YY_BREAK
case 106:
YY_RULE_SETUP
{
    ++comment_level;
    yy_push_state(REGIONCOMMENT);
  }
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
{
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    scan_step();
    *yylval.comment += L"\n//";
  }
	YY_BREAK
case 108:
YY_RULE_SETUP
{
      *yylval.comment += to_wide_string(yytext);
  }
	YY_BREAK
case YY_STATE_EOF(REGIONCOMMENT):
{
    std::string str = "unexpected end of file in a comment";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yy_pop_state();
    yyterminate();
  }
	YY_BREAK

case 109:
YY_RULE_SETUP
{
    *yylval.str += L"\"";
  }
	YY_BREAK
case 110:
YY_RULE_SETUP
{
    *yylval.str += L"'";
  }
	YY_BREAK
case 111:
YY_RULE_SETUP
{
    *yylval.str += L"\"";
  }
	YY_BREAK
case 112:
YY_RULE_SETUP
{
    *yylval.str += L"'";
  }
	YY_BREAK
case 113:
YY_RULE_SETUP
{
    yy_pop_state();
    scan_step();
    return scan_throw(STR);
  }
	YY_BREAK
case 114:
YY_RULE_SETUP
{
    //yylloc.last_line += 1;
    scan_step();
  }
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
{
    std::string str = "unexpected end of line in a string.";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    // ???????
    *yylval.str += to_wide_string(yytext);
    yy_pop_state();
    yyterminate();
  }
	YY_BREAK
case YY_STATE_EOF(SIMPLESTRING):
{
    std::string str = "unexpected end of file in a string.";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yy_pop_state();
    yyterminate();
  }
	YY_BREAK
case 116:
YY_RULE_SETUP
{
    scan_step();
    *yylval.str += to_wide_string(yytext);
  }
	YY_BREAK

case 117:
YY_RULE_SETUP
{
    *yylval.str += L"\"";
  }
	YY_BREAK
case 118:
YY_RULE_SETUP
{
    *yylval.str += L"'";
  }
	YY_BREAK
case 119:
YY_RULE_SETUP
{
    *yylval.str += L"\"";
  }
	YY_BREAK
case 120:
YY_RULE_SETUP
{
    *yylval.str += L"'";
  }
	YY_BREAK
case 121:
YY_RULE_SETUP
{
    yy_pop_state();
    scan_step();
    return scan_throw(STR);
  }
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
{
    std::string str = "unexpected end of line in a string";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    // ??????
    *yylval.str += to_wide_string(yytext);
    yyterminate();
  }
	YY_BREAK
case 123:
YY_RULE_SETUP
{
    //yylloc.last_line += 1;
    scan_step();
  }
	YY_BREAK
case YY_STATE_EOF(DOUBLESTRING):
{
    std::string str = "unexpected end of file in a string";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yy_pop_state();
    yyterminate();
  }
	YY_BREAK
case 124:
YY_RULE_SETUP
{
    scan_step();
    *yylval.str += to_wide_string(yytext);
  }
	YY_BREAK

case 125:
YY_RULE_SETUP
{
        if (last_token == ID)
        {
            scan_throw(SPACES);
            return ID;
        }
    }
	YY_BREAK
case 126:
YY_RULE_SETUP
{
        BEGIN(INITIAL);
        return scan_throw(SEMI);
    }
	YY_BREAK
case 127:
YY_RULE_SETUP
{
        BEGIN(INITIAL);
        return scan_throw(COMMA);
    }
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
{
        BEGIN(INITIAL);
        return scan_throw(EOL);
    }
	YY_BREAK
case 129:
YY_RULE_SETUP
{
        yylval.str = new std::wstring(to_wide_string(yytext));
        return scan_throw(STR);
    }
	YY_BREAK
case YY_STATE_EOF(SHELLMODE):
{
        BEGIN(INITIAL);
    }
	YY_BREAK

case 130:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(LINEBREAK):
			case YY_STATE_EOF(MATRIX):
			case YY_STATE_EOF(MATRIXMINUSID):
			case YY_STATE_EOF(BEGINID):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 512 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 512 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 511);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

int scan_throw(int token) {
  last_token = token;
#ifdef DEV
  std::cout << "--> [DEBUG] TOKEN : " << token << std::endl;
#endif
  return token;
}

void scan_step() {
  yylloc.first_line = yylloc.last_line;
  yylloc.first_column = yylloc.last_column;
}

void scan_error(std::string msg)
{
  wchar_t* pstMsg = to_wide_string(msg.c_str());
  ParserSingleInstance::PrintError(pstMsg);
  ParserSingleInstance::setExitStatus(Parser::Failed);
  FREE(pstMsg);
}

/*
** convert floating numbers to C standard
** 1.2d-3 -> 1.2e-3
** 1.2D-3 -> 1.2e-3
*/
void scan_exponent_convert(char *in)
{
  char *pString;
  while((pString=strpbrk(in,"d"))!=NULL)
    {
      *pString='e';
    }
  while((pString=strpbrk(in,"D"))!=NULL)
    {
      *pString='e';
    }
}

#ifdef _MSC_VER
int isatty (int desc)
{
  return 0;
}
#endif

