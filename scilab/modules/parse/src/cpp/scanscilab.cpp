
#line 3 "src/cpp/scanscilab.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 147
#define YY_END_OF_BUFFER 148
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[961] =
    {   0,
    16407,  148,   81,  147,   77,   81,  147,   78,  147,   78,
       81,  147,   75,   81,  147,   72,   81,  147,   26,   72,
       81,  147,   72,   81,  147,   29,   81,  147,   76,   81,
      147,   33,   81,  147,   34,   81,  147,   47,   81,  147,
       46,   81,  147,   36,   81,  147,   45,   81,  147,   66,
       81,  147,   48,   81,  147,   68,   81,  147,   37,   81,
      147,   35,   81,  147,   59,   81,  147,   63,   81,  147,
       60,   81,  147,   72,   81,  147,   25,   81,  147,   64,
       81,  147,   49,   81,  147,   65,   81,  147,   50,   81,
      147,   72,   81,  147,   72,   81,  147,   72,   81,  147,

       72,   81,  147,   72,   81,  147,   72,   81,  147,   72,
       81,  147,   72,   81,  147,   72,   81,  147,   72,   81,
      147,   72,   81,  147,   72,   81,  147,   38,   81,  147,
       31,   81,  147,   39,   81,  147,   25,   81,  147,   81,
      147,   81,  147,   81,  147,   81,  147,   81,  147,   81,
      147,   81,  147,   81,  147,   77,   81,  147,16407,   72,
       81,  147,   26,   72,   81,  147,   72,   81,  147,   72,
       81,  147,   72,   81,  147,   72,   81,  147,   72,   81,
      147,   72,   81,  147,   72,   81,  147,   72,   81,  147,
       72,   81,  147,   72,   81,  147,   72,   81,  147,   72,

       81,  147,   72,   81,  147,   72,   81,  147,   81,  147,
       81,  147,   81,  147,   81,  147,   81,  147,   81,  147,
       81,  147,   81,  147,  127,  147,  126,  147,  126,  127,
      147,  124,  127,  147,  123,  127,  147,  127,  147,  136,
      147,  135,  147,  135,  136,  147,  132,  136,  147,  133,
      136,  147,  136,  147,  118,  147,  117,  147,  117,  118,
      147,  118,  147,  118,  147,  114,  147,  113,  147,  113,
      114,  147,  112,  147,  111,  112,  147,  108,  147,  108,
      112,  147,  112,  147,   94,  147,   77,   94,  147,   84,
      147,   84,   94,  147,   75,   94,  147,   72,   94,  147,

       26,   72,   94,  147,   72,   94,  147,   29,   94,  147,
       76,   94,  147,   33,   82,   94,  147,   34,   94,  147,
       47,   94,  147,   87,   94,  147,   36,   94,  147,   88,
       94,  147,   66,   94,  147,   48,   94,  147,   68,   94,
      147,   37,   83,   94,  147,   35,   94,  147,   59,   94,
      147,   63,   94,  147,   60,   94,  147,   25,   94,  147,
       64,   94,  147,   49,   94,  147,   85,   94,  147,   50,
       94,  147,   38,   94,  147,   31,   94,  147,   86,   94,
      147,   25,   94,  147,   94,  147,   94,  147,   94,  147,
       94,  147,   94,  147,   94,  147,   94,  147,   94,  147,

      107,  147,  104,  107,  147,  147,  103,  107,  147,  105,
      107,  147,  106,  107,  147,   98,  107,  147,   97,  107,
      147,  107,  147,   99,  107,  147,  107,  147,  107,  147,
      107,  147,  107,  147,  107,  147,  107,  147,  107,  147,
      107,  147,  146,  147,  137,  147,  140,  147,  140,  147,
       75,  147,   76,  147,  142,  146,  147,  139,  147,  138,
      147,  143,  146,  147,  141,  146,  147,  144,  146,  147,
      145,  146,  147,   24,  147,   24,  147,   24,  147,   24,
      147,   24,  147,   24,  147,   24,  147,   24,  147,   24,
      147,   24,  147,   24,  147,   24,  147,   24,  147,   24,

      147,  147,  147,  147,  147,  147,  147,  147,  147,   77,
       79,   79,   78,   72,   72,   28,   72,   27,   72,   30,
       50,   40,   41,   67,   42,   71,   43,   44,   73,   74,
       70,   68,   61,   58,   57,   62,   72,   72,   72,   16,
       72,   72,   72,   72,   72,   72,    1,   72,   72,   72,
       72,   72,   72,   72,   72,   32,   72,   77,16407,   72,
       72,   28,   72,   27,   72,   72,   72,   72,   16,   72,
       72,   72,   72,   72,   72,    1,   72,   72,   72,   72,
       72,   72,   72,   72,   72,  126,  119,  120,  121,  122,
      135,  128,  129,  130,  131,  117,  115,  116,  113,  111,

      108,  109,  110,   77,   82,   83,   84,   83,  104,  103,
      101,  100,   99,  103,  146,  137,  140,   24,   24,   24,
       24,   24,   16,   24,   24,   24,   24,   24,   24,    1,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   80,
       80,   72,   54,   51,   67,   52,   53,   55,   70,   69,
       56,   72,   72,   72,   72,   72,    5,   72,   14,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   19,   72,
       72, 8215, 8215,   72,   72,   72,   72,   72,   72,    5,
       72,   14,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   19,   72,   72,  125,  125,  134,  134,   93,   89,

       95,   95,  100,  102,   24,   24,   24,   24,   24,   24,
        5,   24,   14,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   19,   24,   24,   72,   72,    9,   72,   72,
       72,    3,   72,   72,   72,   72,   72,   72,   72,   72,
       72,    2,   72,   72,   72,   72,   72,    9,   72,   72,
       72,    3,   72,   72,   72,   72,   72,   72,   72,   72,
       72,    2,   72,   72,   72,   93,   92,   90,   96,  103,
       24,   24,    9,   24,   24,   24,    3,   24,   24,   24,
       24,   24,   24,   24,   24,   24,    2,   24,   24,   24,
       72,   72,   17,   72,   20,   72,   72,   72,   72,   72,

       72,   72,   72,   72,   72,   72,   15,   72,   72,   72,
       17,   72,   20,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   15,   72,   90,   91,  103,   24,
       24,   17,   24,   20,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   15,   24,   72,   72,    4,
       72,   72,   72,   13,   72,   72,   22,   72,   21,   72,
        6,   72,    7,   72,   72,   72,    4,   72,   72,   72,
       13,   72,   72,   22,   72,   21,   72,    6,   72,    7,
       72,   93,   24,   24,    4,   24,   24,   24,   13,   24,
       24,   22,   24,   21,   24,    6,   24,    7,   24,   72,

       72,   72,   72,   72,   72,   72,   72,   72,   72,   93,
       24,   24,   24,   24,   24,   72,   18,   72,   72,   10,
       72,   72,   72,   18,   72,   72,   10,   72,   72,   24,
       18,   24,   24,   10,   24,   24,   12,   72,   72,    8,
       72,   12,   72,   72,    8,   72,   12,   24,   24,    8,
       24,   72,   72,   24,   11,   72,   11,   72,   11,   24
    } ;

static yyconst flex_int16_t yy_accept[813] =
    {   0,
        1,    1,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    3,    5,    8,   10,   13,   16,   19,   23,   26,
       29,   32,   35,   38,   41,   44,   47,   50,   53,   56,
       59,   62,   65,   68,   71,   74,   77,   80,   83,   86,
       89,   92,   95,   98,  101,  104,  107,  110,  113,  116,
      119,  122,  125,  128,  131,  134,  137,  140,  142,  144,
      146,  148,  150,  152,  154,  156,  160,  163,  167,  170,
      173,  176,  179,  182,  185,  188,  191,  194,  197,  200,
      203,  206,  209,  211,  213,  215,  217,  219,  221,  223,

      225,  227,  229,  232,  235,  238,  240,  242,  244,  247,
      250,  253,  255,  257,  259,  262,  264,  266,  268,  270,
      273,  275,  278,  280,  283,  285,  287,  290,  292,  295,
      298,  301,  305,  308,  311,  314,  318,  321,  324,  327,
      330,  333,  336,  339,  342,  346,  349,  352,  355,  358,
      361,  364,  367,  370,  373,  376,  379,  382,  385,  387,
      389,  391,  393,  395,  397,  399,  401,  403,  406,  407,
      410,  413,  416,  419,  422,  424,  427,  429,  431,  433,
      435,  437,  439,  441,  443,  445,  447,  449,  451,  453,
      455,  458,  460,  462,  465,  468,  471,  474,  476,  478,

      480,  482,  484,  486,  488,  490,  492,  494,  496,  498,
      500,  502,  503,  504,  505,  506,  507,  508,  509,  510,
      511,  512,  513,  513,  513,  514,  515,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  518,  520,  521,  522,
      522,  523,  524,  525,  526,  527,  528,  529,  530,  530,
      531,  532,  533,  533,  534,  535,  536,  537,  537,  538,
      539,  540,  542,  543,  544,  545,  546,  547,  549,  550,
      551,  552,  553,  554,  555,  556,  557,  558,  558,  558,
      558,  558,  558,  558,  558,  560,  560,  560,  560,  560,
      560,  560,  560,  560,  560,  560,  561,  562,  562,  562,

      562,  562,  562,  562,  562,  562,  564,  566,  567,  568,
      569,  571,  572,  573,  574,  575,  576,  578,  579,  580,
      581,  582,  583,  584,  585,  586,  586,  586,  586,  586,
      586,  586,  586,  587,  588,  589,  590,  591,  591,  592,
      593,  594,  595,  596,  596,  597,  598,  599,  600,  601,
      602,  603,  604,  605,  606,  606,  607,  608,  608,  609,
      610,  611,  611,  611,  611,  611,  611,  611,  611,  611,
      612,  613,  614,  614,  615,  615,  615,  615,  615,  615,
      615,  615,  616,  617,  618,  619,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  621,  622,  623,  625,  626,

      627,  628,  629,  630,  632,  633,  634,  635,  636,  637,
      638,  639,  640,  640,  640,  640,  640,  640,  640,  640,
      641,  642,  643,  643,  643,  643,  643,  643,  643,  643,
      644,  645,  646,  647,  648,  649,  650,  650,  651,  652,
      653,  654,  655,  656,  657,  659,  661,  662,  663,  664,
      665,  666,  667,  668,  669,  671,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  673,  674,  675,  675,
      675,  675,  675,  675,  675,  675,  676,  677,  678,  679,
      680,  682,  684,  685,  686,  687,  688,  689,  690,  691,

      692,  694,  695,  695,  695,  695,  696,  697,  697,  698,
      699,  699,  700,  700,  700,  701,  701,  701,  701,  701,
      701,  701,  701,  701,  701,  702,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  704,  704,  705,  705,
      705,  705,  706,  706,  706,  706,  706,  706,  706,  706,
      707,  708,  709,  710,  711,  713,  715,  716,  717,  718,
      719,  720,  721,  722,  723,  725,  726,  726,  726,  726,
      727,  727,  727,  727,  728,  730,  731,  732,  734,  735,
      736,  737,  738,  739,  740,  741,  742,  744,  745,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,

      747,  747,  747,  747,  748,  750,  751,  752,  754,  755,
      756,  757,  758,  759,  760,  761,  762,  764,  765,  766,
      767,  767,  767,  767,  767,  767,  767,  767,  767,  768,
      769,  769,  769,  769,  769,  769,  769,  769,  769,  770,
      770,  770,  770,  771,  772,  772,  772,  772,  773,  775,
      776,  777,  779,  780,  781,  782,  783,  784,  785,  786,
      787,  789,  790,  791,  792,  793,  795,  797,  798,  799,
      800,  801,  802,  803,  804,  805,  806,  807,  809,  809,
      809,  809,  809,  810,  811,  813,  815,  816,  817,  818,
      819,  820,  821,  822,  823,  824,  825,  827,  827,  827,

      827,  827,  827,  827,  827,  828,  828,  829,  829,  829,
      829,  830,  831,  832,  834,  836,  837,  838,  839,  840,
      841,  842,  843,  844,  845,  846,  848,  849,  850,  852,
      853,  854,  856,  857,  859,  861,  863,  865,  865,  866,
      867,  869,  870,  871,  873,  874,  876,  878,  880,  882,
      882,  882,  882,  883,  884,  885,  887,  888,  889,  891,
      892,  894,  896,  898,  900,  901,  902,  903,  904,  905,
      906,  907,  908,  909,  910,  911,  912,  913,  914,  915,
      916,  917,  919,  920,  922,  923,  924,  926,  927,  929,
      930,  931,  933,  934,  936,  937,  939,  940,  942,  944,

      945,  947,  949,  950,  952,  953,  954,  955,  957,  959,
      961,  961
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,   25,   26,   25,   25,   25,   27,   27,   28,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   29,   25,   25,   25,   25,   25,   25,
       30,   31,   32,   33,   25,    1,   34,   35,   36,   37,

       38,   39,   25,   40,   41,   25,   42,   43,   44,   45,
       46,   25,   25,   47,   48,   49,   50,   25,   51,   25,
       52,   25,   53,   54,   55,   56,    1,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,    1,    1,   60,   60,   60,   60,   60,   60,   60,

       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   61,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   63,   64,   64,   65,
       66,   66,   66,   67,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[68] =
    {   0,
        1,    2,    3,    3,    4,    5,    5,    6,    1,    4,
        7,    1,    1,    1,    4,    1,    8,    1,    9,    1,
        4,   10,   10,   10,    5,   10,    5,    5,    5,    1,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    1,    1,    1,   10,    1,    1,    1,    5,
        5,    5,    5,    5,    5,    5,    5
    } ;

static yyconst flex_int16_t yy_base[831] =
    {   0,
        0,   67,  132,  135,  143,  151,  154,  160,  140,  147,
      167,  172,  190,    0,  257,    0,  323,  378,  434,    0,
     1793, 1794,  177,  327,  337, 1794,  302,  310,  356, 1783,
     1794, 1794, 1794,  149, 1794, 1794, 1794,  393,  169,  390,
     1794, 1794,  160, 1768, 1767,    0, 1766, 1794, 1771, 1794,
     1794, 1740,  131, 1740,  287,  285, 1744, 1745, 1734, 1744,
      299,  296, 1741, 1794, 1726, 1794, 1756,  296, 1719,  302,
      131,  333,  298,  339, 1720,  500,  508,  516,  477,    0,
     1729,  374, 1729,  370,  368, 1733, 1734, 1723, 1733,  378,
      347, 1730,  364, 1710,  373,  450,  454,  456,  462, 1711,

     1794, 1794, 1764,  512,  518, 1749, 1794, 1794, 1762,  519,
      520, 1747, 1794, 1794, 1760, 1744, 1748, 1794, 1794, 1757,
     1794, 1757, 1794, 1755,  514, 1794,  532,  529,  536, 1794,
        0,    0,  556, 1748, 1794, 1794, 1794,  520, 1794, 1794,
     1794,  579,  536,  582, 1754, 1794,  517, 1732, 1731, 1730,
     1794, 1735, 1794, 1794, 1794, 1697, 1794, 1727,  529, 1690,
      545,  498,  549,  500,  556, 1691, 1794, 1745, 1794,  561,
     1794, 1794, 1794, 1794, 1727,  612,  559, 1686,  575,  533,
      578,  535,  583, 1687,    0, 1741, 1794, 1739, 1794, 1794,
        0, 1794, 1794,    0,    0,    0,    0,  591,  599, 1694,

      633, 1694,  600,  598, 1698, 1699, 1688, 1698,  630,  629,
     1695,  613, 1675,  616,  589,  625,  619,  628, 1676,  686,
     1794, 1729,  689,  692,  696,    0, 1681,  642, 1671,  657,
      645,  661,  647,  664, 1672,    0,    0, 1794, 1794,    0,
     1794,  695, 1711, 1710,  705, 1709, 1794, 1794,    0, 1794,
      707,  710,  714, 1794, 1794, 1794, 1794,    0, 1687,  687,
     1679,    0, 1675, 1685, 1674, 1675, 1682,    0, 1678,  690,
     1674, 1675, 1677, 1662, 1672, 1794,    0,  692,  695,  698,
      701,  704,  707,  710,  768,  723,  716, 1653,  719,  683,
      722,  733,  736, 1654, 1708,    0, 1659,  739, 1649,  742,

      745,  747,  749,  752, 1650,    0,    0, 1668,  764, 1660,
        0, 1656, 1666, 1655, 1656, 1663,    0, 1659,  766, 1655,
     1656, 1658, 1643, 1653,    0,  759,  762,  765,  768,  779,
      782,  785, 1794, 1794, 1794, 1794, 1794,  842, 1794, 1794,
     1794, 1794, 1794,  844, 1794, 1794, 1794, 1794, 1691, 1794,
     1794, 1794,  849, 1794,  859, 1690,  847,  854, 1689, 1688,
      819,  816, 1630,  830,  797,  833,  808,  836, 1631,  877,
      879,  891,  883,    0,  854,  873,  876,  879,  882,  885,
      888,    0, 1685, 1794,    0, 1636,  891, 1626,  894,  843,
      897,  899,  902, 1627, 1645,  914, 1637,    0, 1633, 1643,

     1632, 1633, 1640,    0, 1636,  916, 1632, 1633, 1635, 1620,
     1630,    0,  909,  912,  915,  918,  921,  924,  927, 1794,
     1667, 1624,  930,  933,  936,  939,  942,  945,  948, 1794,
     1794, 1794, 1794, 1794, 1794,  989, 1649, 1648, 1794, 1632,
     1627, 1628, 1614, 1624, 1622,    0, 1624, 1622, 1620, 1607,
     1606, 1617, 1605, 1608,    0, 1609,  952,  955,  960, 1013,
      963, 1592,  966,  971,  973,  975,  978, 1593,  981,  984,
      987,  990,  993,  996,  999, 1794, 1647, 1603, 1002, 1005,
     1008, 1011, 1024, 1027, 1030, 1613, 1608, 1609, 1595, 1605,
     1603,    0, 1605, 1603, 1601, 1588, 1587, 1598, 1586, 1589,

        0, 1590, 1033, 1036, 1039, 1794, 1629, 1068, 1794, 1628,
     1096, 1041, 1098, 1611, 1093, 1064, 1570, 1067, 1056, 1070,
     1060, 1075, 1571, 1133, 1794, 1624, 1136, 1608, 1084, 1087,
     1090, 1098, 1109, 1112, 1115, 1156, 1606, 1605, 1119, 1122,
     1127, 1578, 1130, 1133, 1138, 1141, 1144, 1147, 1150, 1588,
     1583, 1584, 1570, 1580, 1578,    0, 1580, 1578, 1576, 1563,
     1562, 1573, 1561, 1564,    0, 1565, 1153, 1156, 1159, 1571,
     1162, 1165, 1168, 1564,    0, 1565, 1563, 1562, 1552, 1552,
     1562, 1552, 1554, 1550, 1560, 1559,    0, 1556,    0, 1171,
     1174, 1177, 1180, 1183, 1186, 1189, 1192, 1195, 1198, 1557,

     1201, 1204, 1207, 1550,    0, 1551, 1549, 1548, 1538, 1538,
     1548, 1538, 1540, 1536, 1546, 1545,    0, 1542,    0, 1207,
     1218, 1520, 1221, 1095, 1224, 1226, 1229, 1521, 1270, 1272,
     1276, 1243, 1246, 1254, 1257, 1260, 1263, 1266, 1794, 1269,
     1272, 1275,    0, 1541, 1278, 1281, 1284, 1534,    0, 1535,
     1533, 1532, 1522, 1522, 1532, 1522, 1524, 1520, 1530, 1529,
        0, 1526,    0, 1514,    0,    0,    0, 1517, 1522, 1515,
     1518, 1513, 1506, 1518, 1510, 1505, 1513,    0, 1287, 1290,
     1293,    0, 1503,    0,    0,    0, 1505, 1510, 1503, 1498,
     1486, 1479, 1491, 1482, 1477, 1483,    0, 1296, 1299, 1302,

     1305, 1308, 1311, 1314, 1355, 1494, 1484, 1318, 1321, 1326,
        0, 1444,    0,    0,    0, 1447, 1452, 1438, 1441, 1436,
     1427, 1439, 1431, 1424, 1432,    0, 1430, 1419,    0, 1432,
     1418,    0, 1419,    0,    0,    0,    0,    0, 1418, 1408,
        0, 1345, 1260,    0, 1257,    0,    0,    0,    0, 1329,
     1332, 1337,    0, 1255, 1244,    0, 1257, 1136,    0, 1109,
        0,    0,    0,    0, 1070, 1073,  878,  864,  859,  859,
      865,  828,  819,  802,    0,  736,  708,  682,  664,  649,
      635,    0,  597,    0,  573,  555,    0,  504,    0,  504,
      464,    0,  392,    0,  387,    0,  373,    0,    0,  340,

        0,    0,  332,    0,  306,  114,   96,    0,    0,    0,
     1794, 1396, 1406, 1416, 1426, 1436, 1446, 1452, 1460, 1465,
     1470, 1479, 1485, 1494, 1504, 1514, 1523, 1532, 1537, 1542
    } ;

static yyconst flex_int16_t yy_def[831] =
    {   0,
      811,  811,  812,  812,  813,  813,  814,  814,  815,  815,
      816,  816,  811,   13,  811,   15,  817,  817,  811,   19,
      811,  811,  811,  811,  811,  811,  818,  818,   28,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,   28,  811,  811,  811,  811,
      811,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  819,  820,  820,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,  811,  811,  811,  811,  811,  811,  811,  811,

      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
       28,   28,   28,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  821,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  822,  811,  811,  811,  811,  811,
      822,  811,  811,  822,  822,  822,  822,  823,  823,  199,

      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,   28,   28,  811,  811,  811,
      811,  811,  811,  811,  811,   28,   28,  811,  811,  824,
      811,  811,  811,  811,  811,  811,  811,  811,  825,  811,
      811,  811,  811,  811,  811,  811,  811,  826,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,  811,   28,  811,  811,  811,
      811,  811,  811,  811,  819,  827,  811,  811,  811,  811,
      811,  811,  811,  811,  828,   78,   78,  811,  811,  811,

      811,  811,  811,  811,  811,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  829,  811,  811,  811,  811,  811,
      821,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  361,  811,  811,  811,  811,  811,  811,
      811,  822,  811,  811,  199,  199,  811,  811,  811,  811,
      811,  811,  811,  811,  199,  199,  199,  199,  199,  199,

      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  811,  811,  811,  811,  811,  811,  811,  811,
      811,   28,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,  811,  811,  811,  827,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  828,   78,  811,  811,
      811,  811,  811,  811,  811,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,

       78,   78,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  830,  829,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  199,  811,  811,  811,  811,  811,  811,  811,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  811,  811,  811,   28,
      811,  811,  811,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,   78,

      811,  811,  811,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,  830,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  361,  199,  811,  811,  811,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,  811,  811,
      811,  460,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,  811,  811,  811,

      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      361,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,  460,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,  811,
      811,  811,  620,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,   28,   28,   28,   28,   28,   78,
       78,   78,   78,   78,  620,  199,  199,  199,  199,  199,
       28,   28,   28,   28,   28,   78,   78,   78,   78,   78,
      199,  199,  199,  199,  199,   28,   28,   28,   78,   78,

       78,  199,  199,  199,   28,   78,  199,   28,   78,  199,
        0,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811
    } ;

static yyconst flex_int16_t yy_nxt[1862] =
    {   0,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   46,   46,   46,   48,
       49,   50,   51,   46,   52,   53,   54,   55,   56,   57,
       58,   46,   46,   46,   46,   59,   60,   61,   62,   46,
       63,   46,   64,   65,   66,   67,   22,   22,   22,   68,
       69,   70,   71,   72,   73,   74,   75,   22,   76,   24,
       25,   26,   77,   78,   79,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   80,   47,   80,   80,   80,   48,   49,   50,   51,

       80,   81,   82,   83,   84,   85,   86,   87,   80,   80,
       80,   80,   88,   89,   90,   91,   80,   92,   80,   64,
       65,   66,   67,   22,   22,   22,   93,   94,   95,   96,
       97,   98,   99,  100,  102,  103,  104,  102,  103,  104,
      810,  105,  119,  120,  105,  108,  109,  110,  106,  119,
      120,  106,  111,  108,  109,  110,  114,  115,  809,  112,
      111,  239,  114,  115,  260,  240,  116,  112,  122,  123,
      124,  117,  116,  122,  123,  124,  261,  117,  220,  221,
      222,  248,  254,  255,  125,  249,  250,  280,  280,  125,
      126,  127,  128,  129,  130,  131,  132,  133,  134,  135,

      136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
      146,  147,  148,  149,  131,  150,  131,  131,  131,  151,
      152,  153,  154,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  155,  156,  157,  158,  126,  126,  126,  159,
      160,  161,  162,  163,  164,  165,  166,  167,  168,  169,
      167,  167,  170,  170,  170,  167,  167,  171,  172,  167,
      173,  167,  174,  175,  167,  176,  167,  167,  167,  167,
      167,  170,  167,  170,  170,  170,  167,  167,  167,  167,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,

      170,  170,  170,  170,  170,  170,  170,  170,  170,  167,
      167,  167,  167,  167,  167,  167,  177,  178,  179,  180,
      181,  182,  183,  184,  186,  187,  188,  189,  223,  263,
      265,  264,  190,  191,  266,  273,  271,  192,  223,  225,
      227,  224,  274,  193,  194,  195,  196,  224,  197,  272,
      808,  224,  277,  277,  277,  282,  282,  224,  279,  279,
      279,  228,  229,  230,  231,  232,  233,  234,  235,  228,
      229,  230,  231,  232,  233,  234,  235,  807,  197,  186,
      187,  188,  189,  236,  237,  806,  322,  190,  191,  281,
      281,  281,  192,  323,  236,  283,  283,  283,  193,  194,

      195,  196,  241,  197,  237,  242,  251,  309,  252,  243,
      244,  245,  312,  314,  313,  320,  253,  315,  805,  310,
      325,  325,  325,  246,  804,  247,  253,  253,  321,  327,
      327,  327,  803,  197,  169,  169,  169,  169,  169,  198,
      199,  199,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  199,  169,
      199,  199,  199,  169,  169,  169,  169,  199,  200,  201,
      202,  203,  204,  205,  206,  199,  199,  199,  199,  207,
      208,  209,  210,  199,  211,  199,  169,  169,  169,  169,
      169,  169,  169,  212,  213,  214,  215,  216,  217,  218,

      219,  285,  221,  222,  306,  307,  328,  328,  802,  295,
      329,  329,  329,  330,  330,  306,  334,  295,  331,  331,
      331,  335,  336,  340,  342,  307,  351,  337,  341,  343,
      223,  352,  239,  353,  221,  222,  240,  223,  357,  254,
      255,  801,  354,  224,  800,  355,  297,  355,  248,  224,
      224,  356,  249,  250,  280,  280,  224,  282,  282,  287,
      288,  289,  290,  291,  292,  293,  294,  298,  299,  300,
      301,  302,  303,  304,  305,  298,  299,  300,  301,  302,
      303,  304,  305,  236,  237,  277,  277,  277,  241,  377,
      377,  242,  379,  379,  236,  358,  244,  245,  251,  799,

      252,  279,  279,  279,  237,  281,  281,  281,  253,  246,
      798,  247,  283,  283,  283,  374,  374,  374,  253,  253,
      362,  363,  364,  365,  366,  367,  368,  369,  371,  386,
      372,  376,  376,  376,  378,  378,  378,  797,  373,  380,
      380,  380,  399,  401,  400,  415,  415,  402,  373,  373,
      387,  388,  389,  390,  391,  392,  393,  394,  387,  388,
      389,  390,  391,  392,  393,  394,  396,  407,  409,  412,
      412,  412,  414,  414,  414,  410,  417,  417,  397,  796,
      408,  416,  416,  416,  418,  418,  418,  220,  221,  222,
      223,  420,  421,  223,  420,  421,  795,  223,  226,  226,

      226,  425,  425,  224,  427,  427,  224,  247,  794,  224,
      224,  431,  224,  424,  424,  424,  224,  426,  426,  426,
      428,  428,  428,  245,  295,  436,  251,  437,  252,  437,
      793,  253,  438,  253,  441,  442,  253,  450,  451,  471,
      471,  253,  253,  253,  253,  792,  253,  253,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      457,  457,  457,  458,  458,  458,  459,  459,  459,  285,
      221,  222,  286,  286,  286,  470,  470,  470,  472,  472,
      472,  791,  461,  462,  463,  464,  465,  466,  467,  468,
      473,  473,  474,  474,  474,  296,  296,  296,  480,  480,

      480,  481,  481,  482,  482,  482,  483,  483,  484,  484,
      484,  487,  488,  496,  497,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  287,  288,  289,
      290,  291,  292,  293,  294,  503,  503,  503,  504,  504,
      504,  505,  505,  505,  506,  507,  509,  510,  223,  790,
      353,  221,  222,  531,  531,  524,  525,  526,  508,  354,
      511,  224,  355,  789,  355,  533,  533,  224,  356,  513,
      527,  528,  361,  361,  361,  514,  788,  515,  362,  363,
      364,  365,  366,  367,  368,  369,  530,  530,  530,  532,
      532,  532,  534,  534,  534,  370,  537,  536,  537,  545,

      545,  538,  787,  373,  786,  373,  785,  371,  784,  372,
      374,  374,  374,  373,  373,  373,  373,  373,  516,  517,
      518,  519,  520,  521,  522,  523,  783,  373,  373,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  539,  539,
      539,  540,  540,  540,  541,  541,  541,  385,  385,  385,
      544,  544,  544,  546,  546,  546,  547,  547,  548,  548,
      548,  551,  552,  560,  561,  412,  412,  412,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  567,  567,  567,
      568,  568,  568,  569,  569,  569,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  571,  571,

      571,  572,  572,  572,  573,  573,  573,  436,  589,  589,
      589,  589,  589,  589,  295,  253,  589,  589,  589,  460,
      460,  460,  591,  591,  591,  253,  253,  592,  592,  593,
      593,  593,  594,  594,  595,  595,  595,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  597,
      597,  597,  598,  598,  598,  599,  599,  599,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      506,  507,  461,  462,  463,  464,  465,  466,  467,  468,
      601,  601,  601,  602,  602,  602,  603,  603,  603,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  509,  510,

      621,  622,  623,  624,  625,  626,  627,  628,  513,  630,
      782,  515,  634,  634,  514,  781,  515,  636,  636,  631,
      512,  512,  512,  633,  633,  633,  635,  635,  635,  631,
      631,  637,  637,  637,  524,  525,  526,  524,  525,  526,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  780,
      528,  700,  700,  528,  361,  361,  361,  516,  517,  518,
      519,  520,  521,  522,  523,  640,  640,  640,  641,  641,
      641,  642,  642,  642,  536,  643,  643,  643,  643,  643,
      643,  779,  373,  643,  643,  643,  385,  385,  385,  385,
      385,  385,  373,  373,  385,  385,  385,  385,  385,  385,

      645,  645,  645,  646,  646,  646,  647,  647,  647,  663,
      663,  663,  663,  663,  663,  663,  663,  663,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  679,
      679,  679,  680,  680,  680,  681,  681,  681,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  621,  622,  623,  624,
      625,  626,  627,  628,  620,  620,  620,  699,  699,  699,
      701,  701,  701,  702,  702,  703,  703,  703,  629,  706,
      705,  706,  778,  777,  707,  776,  631,  774,  631,  512,

      512,  512,  512,  512,  512,  773,  631,  631,  631,  631,
      512,  512,  512,  512,  512,  512,  708,  708,  708,  709,
      709,  709,  710,  710,  710,  711,  711,  711,  711,  711,
      711,  711,  711,  711,  713,  713,  713,  713,  713,  713,
      713,  713,  713,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  750,  750,  750,  751,  751,  751,
      752,  752,  752,  705,  753,  753,  753,  753,  753,  753,
      772,  631,  753,  753,  753,  775,  775,  775,  775,  775,
      775,  631,  631,  775,  775,  775,  101,  101,  101,  101,

      101,  101,  101,  101,  101,  101,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  113,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  226,  771,  770,  769,
      226,  286,  286,  768,  286,  286,  296,  767,  766,  296,
      765,  764,  763,  296,  361,  762,  761,  760,  361,  382,
      759,  758,  757,  382,  382,  382,  382,  382,  382,  385,
      756,  755,  754,  385,  430,  430,  430,  430,  430,  430,

      430,  430,  707,  430,  435,  435,  435,  435,  435,  435,
      435,  435,  707,  435,  439,  439,  439,  439,  439,  439,
      439,  439,  749,  439,  460,  748,  747,  460,  746,  745,
      744,  460,  476,  476,  476,  476,  476,  476,  743,  476,
      476,  512,  512,  512,  512,  512,  620,  742,  741,  740,
      620,  739,  737,  736,  735,  734,  733,  732,  731,  730,
      729,  728,  727,  726,  725,  724,  723,  722,  721,  720,
      719,  718,  717,  716,  715,  714,  712,  704,  698,  697,
      696,  695,  694,  693,  692,  691,  690,  689,  688,  687,
      686,  685,  683,  678,  677,  676,  675,  674,  673,  672,

      671,  670,  669,  668,  667,  666,  664,  662,  661,  660,
      659,  658,  657,  656,  655,  654,  653,  652,  651,  650,
      649,  648,  644,  538,  538,  639,  525,  638,  632,  629,
      509,  506,  618,  617,  616,  615,  614,  613,  612,  611,
      610,  609,  608,  607,  606,  605,  604,  600,  477,  596,
      590,  588,  587,  586,  585,  584,  583,  582,  581,  580,
      579,  578,  577,  576,  575,  574,  438,  438,  570,  420,
      566,  565,  564,  563,  562,  559,  558,  557,  556,  555,
      554,  553,  550,  549,  543,  542,  383,  535,  529,  360,
      359,  359,  349,  502,  501,  500,  499,  498,  495,  494,

      493,  492,  491,  490,  489,  486,  485,  479,  478,  477,
      475,  469,  456,  455,  454,  453,  452,  449,  448,  447,
      446,  445,  444,  443,  440,  434,  433,  432,  429,  423,
      422,  221,  419,  413,  411,  406,  405,  404,  403,  398,
      395,  384,  383,  381,  375,  370,  360,  284,  278,  255,
      276,  258,  255,  257,  256,  359,  238,  350,  349,  348,
      347,  346,  345,  344,  339,  338,  333,  332,  326,  324,
      319,  318,  317,  316,  311,  308,  284,  278,  255,  276,
      275,  270,  269,  268,  267,  262,  259,  258,  255,  257,
      256,  238,  811,   21,  811,  811,  811,  811,  811,  811,

      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811
    } ;

static yyconst flex_int16_t yy_chk[1862] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    3,    3,    3,    4,    4,    4,
      807,    3,    9,    9,    4,    5,    5,    5,    3,   10,
       10,    4,    5,    6,    6,    6,    7,    7,  806,    5,
        6,   34,    8,    8,   53,   34,    7,    6,   11,   11,
       11,    7,    8,   12,   12,   12,   53,    8,   23,   23,
       23,   39,   43,   43,   11,   39,   39,   71,   71,   12,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   17,   17,   17,   17,   24,   55,
       56,   55,   17,   17,   56,   62,   61,   17,   25,   25,
       27,   24,   62,   17,   17,   17,   17,   24,   17,   61,
      805,   25,   68,   68,   68,   73,   73,   25,   70,   70,
       70,   27,   27,   27,   27,   27,   27,   27,   27,   28,
       28,   28,   28,   28,   28,   28,   28,  803,   17,   18,
       18,   18,   18,   29,   29,  800,   91,   18,   18,   72,
       72,   72,   18,   91,   29,   74,   74,   74,   18,   18,

       18,   18,   38,   18,   29,   38,   40,   82,   40,   38,
       38,   38,   84,   85,   84,   90,   40,   85,  797,   82,
       93,   93,   93,   38,  795,   38,   40,   40,   90,   95,
       95,   95,  793,   18,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   76,   76,   76,   79,   79,   96,   96,  791,   77,
       97,   97,   97,   98,   98,   79,  104,   78,   99,   99,
       99,  104,  105,  110,  111,   79,  125,  105,  110,  111,
      128,  125,  138,  127,  127,  127,  138,  129,  129,  147,
      147,  790,  127,  128,  788,  127,   77,  127,  143,  128,
      129,  127,  143,  143,  162,  162,  129,  164,  164,   76,
       76,   76,   76,   76,   76,   76,   76,   77,   77,   77,
       77,   77,   77,   77,   77,   78,   78,   78,   78,   78,
       78,   78,   78,  133,  133,  159,  159,  159,  142,  180,
      180,  142,  182,  182,  133,  142,  142,  142,  144,  786,

      144,  161,  161,  161,  133,  163,  163,  163,  144,  142,
      785,  142,  165,  165,  165,  177,  177,  177,  144,  144,
      170,  170,  170,  170,  170,  170,  170,  170,  176,  198,
      176,  179,  179,  179,  181,  181,  181,  783,  176,  183,
      183,  183,  203,  204,  203,  215,  215,  204,  176,  176,
      198,  198,  198,  198,  198,  198,  198,  198,  199,  199,
      199,  199,  199,  199,  199,  199,  201,  209,  210,  212,
      212,  212,  214,  214,  214,  210,  217,  217,  201,  781,
      209,  216,  216,  216,  218,  218,  218,  220,  220,  220,
      223,  223,  223,  224,  224,  224,  780,  225,  228,  228,

      228,  231,  231,  223,  233,  233,  224,  242,  779,  223,
      225,  242,  224,  230,  230,  230,  225,  232,  232,  232,
      234,  234,  234,  245,  286,  251,  252,  253,  252,  253,
      778,  245,  253,  251,  260,  260,  252,  270,  270,  290,
      290,  245,  245,  251,  251,  777,  252,  252,  278,  278,
      278,  279,  279,  279,  280,  280,  280,  281,  281,  281,
      282,  282,  282,  283,  283,  283,  284,  284,  284,  285,
      285,  285,  287,  287,  287,  289,  289,  289,  291,  291,
      291,  776,  286,  286,  286,  286,  286,  286,  286,  286,
      292,  292,  293,  293,  293,  298,  298,  298,  300,  300,

      300,  301,  301,  302,  302,  302,  303,  303,  304,  304,
      304,  309,  309,  319,  319,  326,  326,  326,  327,  327,
      327,  328,  328,  328,  329,  329,  329,  285,  285,  285,
      285,  285,  285,  285,  285,  330,  330,  330,  331,  331,
      331,  332,  332,  332,  338,  338,  344,  344,  357,  774,
      353,  353,  353,  365,  365,  358,  358,  358,  338,  353,
      344,  357,  353,  773,  353,  367,  367,  357,  353,  355,
      358,  358,  362,  362,  362,  355,  772,  355,  361,  361,
      361,  361,  361,  361,  361,  361,  364,  364,  364,  366,
      366,  366,  368,  368,  368,  370,  373,  371,  373,  390,

      390,  373,  771,  370,  770,  371,  769,  372,  768,  372,
      375,  375,  375,  370,  370,  371,  371,  372,  355,  355,
      355,  355,  355,  355,  355,  355,  767,  372,  372,  376,
      376,  376,  377,  377,  377,  378,  378,  378,  379,  379,
      379,  380,  380,  380,  381,  381,  381,  387,  387,  387,
      389,  389,  389,  391,  391,  391,  392,  392,  393,  393,
      393,  396,  396,  406,  406,  413,  413,  413,  414,  414,
      414,  415,  415,  415,  416,  416,  416,  417,  417,  417,
      418,  418,  418,  419,  419,  419,  423,  423,  423,  424,
      424,  424,  425,  425,  425,  426,  426,  426,  427,  427,

      427,  428,  428,  428,  429,  429,  429,  436,  457,  457,
      457,  458,  458,  458,  460,  436,  459,  459,  459,  461,
      461,  461,  463,  463,  463,  436,  436,  464,  464,  465,
      465,  465,  466,  466,  467,  467,  467,  469,  469,  469,
      470,  470,  470,  471,  471,  471,  472,  472,  472,  473,
      473,  473,  474,  474,  474,  475,  475,  475,  479,  479,
      479,  480,  480,  480,  481,  481,  481,  482,  482,  482,
      508,  508,  460,  460,  460,  460,  460,  460,  460,  460,
      483,  483,  483,  484,  484,  484,  485,  485,  485,  503,
      503,  503,  504,  504,  504,  505,  505,  505,  511,  511,

      512,  512,  512,  512,  512,  512,  512,  512,  513,  515,
      766,  515,  519,  519,  513,  765,  513,  521,  521,  515,
      516,  516,  516,  518,  518,  518,  520,  520,  520,  515,
      515,  522,  522,  522,  524,  524,  524,  527,  527,  527,
      529,  529,  529,  530,  530,  530,  531,  531,  531,  760,
      524,  624,  624,  527,  532,  532,  532,  513,  513,  513,
      513,  513,  513,  513,  513,  533,  533,  533,  534,  534,
      534,  535,  535,  535,  536,  539,  539,  539,  540,  540,
      540,  758,  536,  541,  541,  541,  543,  543,  543,  544,
      544,  544,  536,  536,  545,  545,  545,  546,  546,  546,

      547,  547,  547,  548,  548,  548,  549,  549,  549,  567,
      567,  567,  568,  568,  568,  569,  569,  569,  571,  571,
      571,  572,  572,  572,  573,  573,  573,  590,  590,  590,
      591,  591,  591,  592,  592,  592,  593,  593,  593,  594,
      594,  594,  595,  595,  595,  596,  596,  596,  597,  597,
      597,  598,  598,  598,  599,  599,  599,  601,  601,  601,
      602,  602,  602,  603,  603,  603,  620,  620,  620,  620,
      620,  620,  620,  620,  621,  621,  621,  623,  623,  623,
      625,  625,  625,  626,  626,  627,  627,  627,  629,  631,
      630,  631,  757,  755,  631,  754,  629,  745,  630,  632,

      632,  632,  633,  633,  633,  743,  629,  629,  630,  630,
      634,  634,  634,  635,  635,  635,  636,  636,  636,  637,
      637,  637,  638,  638,  638,  640,  640,  640,  641,  641,
      641,  642,  642,  642,  645,  645,  645,  646,  646,  646,
      647,  647,  647,  679,  679,  679,  680,  680,  680,  681,
      681,  681,  698,  698,  698,  699,  699,  699,  700,  700,
      700,  701,  701,  701,  702,  702,  702,  703,  703,  703,
      704,  704,  704,  705,  708,  708,  708,  709,  709,  709,
      742,  705,  710,  710,  710,  750,  750,  750,  751,  751,
      751,  705,  705,  752,  752,  752,  812,  812,  812,  812,

      812,  812,  812,  812,  812,  812,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  813,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  815,  816,  816,  816,  816,
      816,  816,  816,  816,  816,  816,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  818,  740,  739,  733,
      818,  819,  819,  731,  819,  819,  820,  730,  728,  820,
      727,  725,  724,  820,  821,  723,  722,  721,  821,  822,
      720,  719,  718,  822,  822,  822,  822,  822,  822,  823,
      717,  716,  712,  823,  824,  824,  824,  824,  824,  824,

      824,  824,  707,  824,  825,  825,  825,  825,  825,  825,
      825,  825,  706,  825,  826,  826,  826,  826,  826,  826,
      826,  826,  696,  826,  827,  695,  694,  827,  693,  692,
      691,  827,  828,  828,  828,  828,  828,  828,  690,  828,
      828,  829,  829,  829,  829,  829,  830,  689,  688,  687,
      830,  683,  677,  676,  675,  674,  673,  672,  671,  670,
      669,  668,  664,  662,  660,  659,  658,  657,  656,  655,
      654,  653,  652,  651,  650,  648,  644,  628,  622,  618,
      616,  615,  614,  613,  612,  611,  610,  609,  608,  607,
      606,  604,  600,  588,  586,  585,  584,  583,  582,  581,

      580,  579,  578,  577,  576,  574,  570,  566,  564,  563,
      562,  561,  560,  559,  558,  557,  555,  554,  553,  552,
      551,  550,  542,  538,  537,  528,  526,  523,  517,  514,
      510,  507,  502,  500,  499,  498,  497,  496,  495,  494,
      493,  491,  490,  489,  488,  487,  486,  478,  477,  468,
      462,  456,  454,  453,  452,  451,  450,  449,  448,  447,
      445,  444,  443,  442,  441,  440,  438,  437,  422,  421,
      411,  410,  409,  408,  407,  405,  403,  402,  401,  400,
      399,  397,  395,  394,  388,  386,  383,  369,  363,  360,
      359,  356,  349,  324,  323,  322,  321,  320,  318,  316,

      315,  314,  313,  312,  310,  308,  305,  299,  297,  295,
      294,  288,  275,  274,  273,  272,  271,  269,  267,  266,
      265,  264,  263,  261,  259,  246,  244,  243,  235,  229,
      227,  222,  219,  213,  211,  208,  207,  206,  205,  202,
      200,  188,  186,  184,  178,  175,  168,  166,  160,  158,
      156,  152,  150,  149,  148,  145,  134,  124,  122,  120,
      117,  116,  115,  112,  109,  106,  103,  100,   94,   92,
       89,   88,   87,   86,   83,   81,   75,   69,   67,   65,
       63,   60,   59,   58,   57,   54,   52,   49,   47,   45,
       44,   30,   21,  811,  811,  811,  811,  811,  811,  811,

      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811
    } ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
/*
 *  Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 *  Copyright (C) 2008-2012 - Scilab Enterprises - Bruno JOFRET
 *
 *  This file must be used under the terms of the CeCILL.
 *  This source file is licensed as described in the file COPYING, which
 *  you should have received as part of this distribution.  The terms
 *  are also available at
 *  http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
 *
 */
#include "isatty.hxx"
#include "parse.hxx"
#include "parser_private.hxx"

#include "context.hxx"

extern "C"
{
#include "charEncoding.h"
#include "sci_malloc.h"
}

static int matrix_level = 0;
static int comment_level = 0;
static int last_token = 0;
static int exit_status = PARSE_ERROR;
static std::string current_file;
static std::string program_name;

static std::string *pstBuffer;

static bool rejected = false;

#define YY_USER_ACTION                          \
 yylloc.last_column += yyleng;

/* -*- Verbose Special Debug -*- */
//#define DEV
//#define TOKENDEV

#ifdef DEV
#define DEBUG(x) std::cout << "[DEBUG] " << x << std::endl;
#else
#define DEBUG(x) /* Nothing */
#endif

#define INITIAL 0
#define SIMPLESTRING 1
#define DOUBLESTRING 2
#define REGIONCOMMENT 3
#define LINECOMMENT 4
#define LINEBREAK 5
#define MATRIX 6
#define MATRIXMINUSID 7
#define SHELLMODE 8
#define BEGINID 9

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 812 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1794 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinIf);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(IF);
}
	YY_BREAK
case 2:
YY_RULE_SETUP
{
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(THEN);
}
	YY_BREAK
case 3:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        // Pop to step out IF
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinElse);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(ELSE);
}
	YY_BREAK
case 4:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinElseIf);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(ELSEIF);
}
	YY_BREAK
case 5:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(END);
}
	YY_BREAK
case 6:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinSelect);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(SELECT);
}
	YY_BREAK
case 7:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinSwitch);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(SWITCH);
}
	YY_BREAK
case 8:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinOtherwise);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(OTHERWISE);
}
	YY_BREAK
case 9:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinCase);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(CASE);
}
	YY_BREAK
case 10:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinFunction);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(FUNCTION);
}
	YY_BREAK
case 11:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(ENDFUNCTION);
}
	YY_BREAK
case 12:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinFunction);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(HIDDENFUNCTION);
}
	YY_BREAK
case 13:
YY_RULE_SETUP
{
    DEBUG("BEGIN(INITIAL)");
 	BEGIN(INITIAL);
    return scan_throw(HIDDEN);
}
	YY_BREAK
case 14:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinFor);
    }
    BEGIN(INITIAL);
    return scan_throw(FOR);
}
	YY_BREAK
case 15:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinWhile);
    }
	BEGIN(INITIAL);
	return scan_throw(WHILE);
}
	YY_BREAK
case 16:
YY_RULE_SETUP
{
	BEGIN(INITIAL);
    return scan_throw(DO);
}
	YY_BREAK
case 17:
YY_RULE_SETUP
{
    	BEGIN(INITIAL);
        return scan_throw(BREAK);
}
	YY_BREAK
case 18:
YY_RULE_SETUP
{
    	BEGIN(INITIAL);
        return scan_throw(CONTINUE);
}
	YY_BREAK
case 19:
YY_RULE_SETUP
{
	ParserSingleInstance::pushControlStatus(Parser::WithinTry);
	BEGIN(INITIAL);
	return scan_throw(TRY);
}
	YY_BREAK
case 20:
YY_RULE_SETUP
{
    // Pop to step out TRY
	ParserSingleInstance::popControlStatus();
	ParserSingleInstance::pushControlStatus(Parser::WithinCatch);
	BEGIN(INITIAL);
	return scan_throw(CATCH);
}
	YY_BREAK
case 21:
YY_RULE_SETUP
{
    BEGIN(INITIAL);
    return scan_throw(RETURN);
}
	YY_BREAK
case 22:
YY_RULE_SETUP
{
    BEGIN(INITIAL);
    return scan_throw(RETURN);
}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
{
        BEGIN(BEGINID);
}
	YY_BREAK

case 24:
YY_RULE_SETUP
{
        wchar_t *pwText = to_wide_string(yytext);
        if (yytext != NULL && pwText == NULL)
        {
            std::string str = "can not convert'";
            str += yytext;
            str += "' to UTF-8";
            exit_status = SCAN_ERROR;
            scan_error("can not convert string to UTF-8");
        }
        yylval.str = new std::wstring(pwText);
	FREE(pwText);
        if (symbol::Context::getInstance()->get(symbol::Symbol(*yylval.str)) != NULL
            && symbol::Context::getInstance()->get(symbol::Symbol(*yylval.str))->isCallable())
        {
            scan_throw(ID);
            BEGIN(SHELLMODE);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(ID);
        }
    }
	YY_BREAK

case 25:
YY_RULE_SETUP
{
  return scan_throw(NOT);
}
	YY_BREAK
case 26:
YY_RULE_SETUP
{
  return scan_throw(DOLLAR);
}
	YY_BREAK
case 27:
YY_RULE_SETUP
{
  return scan_throw(BOOLTRUE);
}
	YY_BREAK
case 28:
YY_RULE_SETUP
{
  return scan_throw(BOOLFALSE);
}
	YY_BREAK
case 29:
YY_RULE_SETUP
{
  return scan_throw(AND);
}
	YY_BREAK
case 30:
YY_RULE_SETUP
{
  return scan_throw(ANDAND);
}
	YY_BREAK
case 31:
YY_RULE_SETUP
{
  return scan_throw(OR);
}
	YY_BREAK
case 32:
YY_RULE_SETUP
{
  return scan_throw(OROR);
}
	YY_BREAK
case 33:
YY_RULE_SETUP
{
  return scan_throw(LPAREN);
}
	YY_BREAK
case 34:
YY_RULE_SETUP
{
  return scan_throw(RPAREN);
}
	YY_BREAK
case 35:
YY_RULE_SETUP
{
	scan_step();
  return scan_throw(SEMI);
}
	YY_BREAK
case 36:
YY_RULE_SETUP
{
	scan_step();
  return scan_throw(COMMA);
}
	YY_BREAK
case 37:
YY_RULE_SETUP
{
  return scan_throw(COLON);
}
	YY_BREAK
case 38:
YY_RULE_SETUP
{
  yy_push_state(MATRIX);
  ParserSingleInstance::pushControlStatus(Parser::WithinCell);
  return scan_throw(LBRACE);
}
	YY_BREAK
case 39:
YY_RULE_SETUP
{
  return scan_throw(RBRACE);
}
	YY_BREAK
case 40:
YY_RULE_SETUP
{
  return scan_throw(DOTQUOTE);
}
	YY_BREAK
case 41:
YY_RULE_SETUP
{
  return scan_throw(DOTTIMES);
}
	YY_BREAK
case 42:
YY_RULE_SETUP
{
  return scan_throw(DOTRDIVIDE);
}
	YY_BREAK
case 43:
YY_RULE_SETUP
{
  return scan_throw(DOTLDIVIDE);
}
	YY_BREAK
case 44:
YY_RULE_SETUP
{
  return scan_throw(DOTPOWER);
}
	YY_BREAK
case 45:
YY_RULE_SETUP
{
  return scan_throw(MINUS);
}
	YY_BREAK
case 46:
YY_RULE_SETUP
{
  return scan_throw(PLUS);
}
	YY_BREAK
case 47:
YY_RULE_SETUP
{
  return scan_throw(TIMES);
}
	YY_BREAK
case 48:
YY_RULE_SETUP
{
  return scan_throw(RDIVIDE);
}
	YY_BREAK
case 49:
YY_RULE_SETUP
{
  return scan_throw(LDIVIDE);
}
	YY_BREAK
case 50:
YY_RULE_SETUP
{
  return scan_throw(POWER);
}
	YY_BREAK
case 51:
YY_RULE_SETUP
{
  return scan_throw(KRONTIMES);
}
	YY_BREAK
case 52:
YY_RULE_SETUP
{
  return scan_throw(KRONRDIVIDE);
}
	YY_BREAK
case 53:
YY_RULE_SETUP
{
  return scan_throw(KRONLDIVIDE);
}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
{
    unput(yytext[yyleng - 1]);
    return scan_throw(CONTROLTIMES);
}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
{
    unput(yytext[yyleng - 1]);
    return scan_throw(CONTROLRDIVIDE);
}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
{
    unput(yytext[yyleng - 1]);
    return scan_throw(CONTROLLDIVIDE);
}
	YY_BREAK
case 57:
YY_RULE_SETUP
{
  return scan_throw(EQ);
}
	YY_BREAK
case 58:
YY_RULE_SETUP
{
  return scan_throw(NE);
}
	YY_BREAK
case 59:
YY_RULE_SETUP
{
  return scan_throw(LT);
}
	YY_BREAK
case 60:
YY_RULE_SETUP
{
  return scan_throw(GT);
}
	YY_BREAK
case 61:
YY_RULE_SETUP
{
  return scan_throw(LE);
}
	YY_BREAK
case 62:
YY_RULE_SETUP
{
  return scan_throw(GE);
}
	YY_BREAK
case 63:
YY_RULE_SETUP
{
  return scan_throw(ASSIGN);
 }
	YY_BREAK
case 64:
YY_RULE_SETUP
{
  DEBUG("yy_push_state(MATRIX)");
  yy_push_state(MATRIX);
  ParserSingleInstance::pushControlStatus(Parser::WithinMatrix);
  return scan_throw(LBRACK);
}
	YY_BREAK
case 65:
YY_RULE_SETUP
{
  return scan_throw(RBRACK);
}
	YY_BREAK
case 66:
YY_RULE_SETUP
{
  return scan_throw(DOT);
}
	YY_BREAK
case 67:
YY_RULE_SETUP
{
    ParserSingleInstance::pushControlStatus(Parser::WithinDots);
    yy_push_state(LINEBREAK);
}
	YY_BREAK
case 68:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] INTEGER : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(VARINT);
}
	YY_BREAK
case 69:
YY_RULE_SETUP
{
  scan_exponent_convert(yytext);
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
  scan_step();
  return scan_throw(VARFLOAT);
}
	YY_BREAK
case 70:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] NUMBER : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(NUM);
}
	YY_BREAK
case 71:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] LITTLE : " << yytext << std::endl;
#endif
  scan_step();
  return scan_throw(NUM);
}
	YY_BREAK
case 72:
YY_RULE_SETUP
{
    wchar_t *pwText = to_wide_string(yytext);
    if (yytext != NULL && pwText == NULL)
    {
        std::string str = "can not convert'";
        str += yytext;
        str += "' to UTF-8";
        exit_status = SCAN_ERROR;
        scan_error("can not convert string to UTF-8");
    }
    yylval.str = new std::wstring(pwText);
    FREE(pwText);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] ID : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(ID);
}
	YY_BREAK
case 73:
YY_RULE_SETUP
{
  yylval.comment = new std::wstring();
  comment_level = 1;
  ParserSingleInstance::pushControlStatus(Parser::WithinBlockComment);
  yy_push_state(REGIONCOMMENT);
}
	YY_BREAK
case 74:
YY_RULE_SETUP
{
  pstBuffer = new std::string();
  yy_push_state(LINECOMMENT);
}
	YY_BREAK
case 75:
YY_RULE_SETUP
{
  pstBuffer = new std::string();
  yy_push_state(DOUBLESTRING);
}
	YY_BREAK
case 76:
YY_RULE_SETUP
{
  /*
  ** Matrix Transposition special behaviour
  ** ID' []' toto()' are transposition call
  */
  if (last_token == ID
      || last_token == RBRACK
      || last_token == RPAREN
      || last_token == RBRACE
      || last_token == VARINT
      || last_token == VARFLOAT
      || last_token == NUM
      || last_token == BOOLTRUE
      || last_token == BOOLFALSE)
  {
      return scan_throw(QUOTE);
  }
  else
  {
      pstBuffer = new std::string();
      yy_push_state(SIMPLESTRING);
  }
}
	YY_BREAK
case 77:
YY_RULE_SETUP
{
  scan_step();
  scan_throw(SPACES);
}
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 1;
  yylloc.last_column = 1;
  scan_step();
  if (last_token != EOL) {
      return scan_throw(EOL);
  }

}
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 1;
  yylloc.last_column = 1;
  scan_step();
  if (last_token != EOL)
  {
      return scan_throw(EOL);
  }
  scan_throw(EOL);
}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 2;
  yylloc.last_column = 1;
  scan_step();
  if (last_token != EOL)
  {
      return scan_throw(EOL);
  }
  scan_throw(EOL);
}
	YY_BREAK
case 81:
YY_RULE_SETUP
{
    std::string str = "unexpected token '";
    str += yytext;
    str += "'";
    exit_status = SCAN_ERROR;
    scan_error(str);
}
	YY_BREAK

case 82:
YY_RULE_SETUP
{
      unput(yytext[yyleng -1]);
      if (last_token == ID
          || last_token == RPAREN
          || last_token == QUOTE
          || last_token == VARINT
          || last_token == VARFLOAT
          || last_token == NUM)
      {
          return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 83:
YY_RULE_SETUP
{
      return scan_throw(COLON);
  }
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
{
      yylloc.last_line += 1;
      yylloc.last_column = 1;
      if(last_token != DOTS && last_token != EOL)
      {
          return scan_throw(EOL);
      }
      scan_throw(EOL);
  }
	YY_BREAK
case 85:
YY_RULE_SETUP
{
    DEBUG("yy_pop_state()");
    yy_pop_state();
    ParserSingleInstance::popControlStatus();
    return scan_throw(RBRACK);
  }
	YY_BREAK
case 86:
YY_RULE_SETUP
{
    yy_pop_state();
    ParserSingleInstance::popControlStatus();
    return scan_throw(RBRACE);
  }
	YY_BREAK
case 87:
YY_RULE_SETUP
{
    return scan_throw(PLUS);
  }
	YY_BREAK
case 88:
YY_RULE_SETUP
{
    return scan_throw(MINUS);
  }
	YY_BREAK
case 89:
YY_RULE_SETUP
{
   int i;
   for (i = yyleng - 1 ; i >= 0 ; --i)
   {
       unput(yytext[i]);
   }
   yy_push_state(MATRIXMINUSID);
   if (last_token != LBRACK
       && last_token != EOL
       && last_token != SEMI
       && last_token != COMMA)
   {
       return scan_throw(COMMA);
   }
  }
	YY_BREAK
case 90:
YY_RULE_SETUP
{
      int i;
      for (i = yyleng - 1 ; i >= 0 ; --i)
      {
          unput(yytext[i]);
      }
      yy_push_state(MATRIXMINUSID);
      if (last_token != LBRACK
          && last_token != EOL
          && last_token != SEMI
          && last_token != COMMA)
      {
          return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 91:
YY_RULE_SETUP
{
      int i;
      for (i = yyleng - 1 ; i >= 0 ; --i)
      {
          unput(yytext[i]);
      }
      yy_push_state(MATRIXMINUSID);
      if (last_token != LBRACK
          && last_token != EOL
          && last_token != SEMI
          && last_token != COMMA)
      {
          return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 92:
YY_RULE_SETUP
{
      int i;
      for (i = yyleng - 1 ; i >= 0 ; --i)
      {
          unput(yytext[i]);
      }
      yy_push_state(MATRIXMINUSID);
      if (last_token != LBRACK
          && last_token != EOL
          && last_token != SEMI
          && last_token != COMMA)
      {
          return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 93:
YY_RULE_SETUP
{
      int i;
      for (i = yyleng - 1; i >= 0 ; --i)
      {
          unput(yytext[i]);
      }
      yy_push_state(MATRIXMINUSID);
      if (last_token != LBRACK
          && last_token != EOL
          && last_token != SEMI
          && last_token != COMMA)
      {
          return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 94:
YY_RULE_SETUP
{
    std::string str = "unexpected token '";
    str += yytext;
    str += "' within a matrix.";
    exit_status = SCAN_ERROR;
    scan_error(str);
  }
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
{
      /* Just do nothing */
      yylloc.last_line += 1;
      yylloc.last_column = 1;
      scan_step();
      scan_throw(EOL);
  }
	YY_BREAK
case 96:
YY_RULE_SETUP
{
      /* Just do nothing */
      pstBuffer = new std::string();
      yy_push_state(LINECOMMENT);
      scan_throw(DOTS);
  }
	YY_BREAK
case YY_STATE_EOF(MATRIX):
{
      yy_pop_state();
  }
	YY_BREAK

case 97:
YY_RULE_SETUP
{
    return scan_throw(MINUS);
  }
	YY_BREAK
case 98:
YY_RULE_SETUP
{
     /* Do Nothing. */
  }
	YY_BREAK
case 99:
YY_RULE_SETUP
{
    yy_pop_state();
    yylval.number = atof(yytext);
#ifdef TOKENDEV
    std::cout << "--> [DEBUG] INTEGER : " << yytext << std::endl;
#endif
    scan_step();
    return scan_throw(VARINT);
  }
	YY_BREAK
case 100:
YY_RULE_SETUP
{
    yy_pop_state();
    yylval.number = atof(yytext);
#ifdef TOKENDEV
    std::cout << "--> [DEBUG] NUMBER : " << yytext << std::endl;
#endif
    scan_step();
    return scan_throw(NUM);
  }
	YY_BREAK
case 101:
YY_RULE_SETUP
{
    yy_pop_state();
    yylval.number = atof(yytext);
#ifdef TOKENDEV
    std::cout << "--> [DEBUG] LITTLE : " << yytext << std::endl;
#endif
    scan_step();
    return scan_throw(NUM);
  }
	YY_BREAK
case 102:
YY_RULE_SETUP
{
    yy_pop_state();
    scan_exponent_convert(yytext);
    yylval.number = atof(yytext);
#ifdef TOKENDEV
    std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
    scan_step();
    return scan_throw(VARFLOAT);
  }
	YY_BREAK
case 103:
YY_RULE_SETUP
{
    yy_pop_state();
    wchar_t* pwText = to_wide_string(yytext);
    if (yytext != NULL && pwText == NULL)
    {
        std::string str = "can not convert'";
        str += yytext;
        str += "' to UTF-8";
        exit_status = SCAN_ERROR;
        scan_error("can not convert string to UTF-8");
    }
    yylval.str = new std::wstring(pwText);
    FREE(pwText);
#ifdef TOKENDEV
    std::cout << "--> [DEBUG] ID : " << yytext << std::endl;
#endif
    scan_step();
    return scan_throw(ID);
  }
	YY_BREAK
case 104:
YY_RULE_SETUP
{
    /* Do Nothing. */
  }
	YY_BREAK
case 105:
YY_RULE_SETUP
{
      return scan_throw(LPAREN);
  }
	YY_BREAK
case 106:
YY_RULE_SETUP
{
      return scan_throw(RPAREN);
  }
	YY_BREAK
case 107:
YY_RULE_SETUP
{
    std::string str = "unexpected token '";
    str += yytext;
    str += "' within a matrix.";
    exit_status = SCAN_ERROR;
    scan_error(str);
  }
	YY_BREAK

case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
{
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    scan_step();
    yy_pop_state();
    ParserSingleInstance::popControlStatus();
  }
	YY_BREAK
case 109:
YY_RULE_SETUP
{
    ++comment_level;
    yy_push_state(REGIONCOMMENT);
  }
	YY_BREAK
case 110:
YY_RULE_SETUP
{
    scan_throw(DOTS);
    pstBuffer = new std::string();
    yy_push_state(LINECOMMENT);
  }
	YY_BREAK
case 111:
YY_RULE_SETUP
{
      /* Do nothing... */
  }
	YY_BREAK
case YY_STATE_EOF(LINEBREAK):
{
      yy_pop_state();
  }
	YY_BREAK
case 112:
YY_RULE_SETUP
{
    std::string str = "unexpected token '";
    str += yytext;
    str += "' after line break with .. or ...";
    exit_status = SCAN_ERROR;
    scan_error(str);
  }
	YY_BREAK

case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
{
    //yylloc.last_line += 1;
    //yylloc.last_column = 1;
    //scan_step();
    yy_pop_state();
    for (int i = yyleng - 1 ; i >= 0 ; --i)
    {
        //std::cerr << "Unputting i = {" << i << "}" << std::endl;
        //std::cerr << "Unputting {" << yytext[i] << "}" << std::endl;
        unput(yytext[i]);
        yylloc.last_column--;
    }
    /*
    ** To forgot comments after lines break
    */
    if (last_token != DOTS)
    {
        //std::cerr << "pstBuffer = {" << *pstBuffer << "}" << std::endl;
        //std::cerr << "pstBuffer->c_str() = {" << pstBuffer->c_str() << "}" << std::endl;
        wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
        //std::wcerr << L"pwstBuffer = W{" << pwstBuffer << L"}" << std::endl;
        if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
        {
            std::string str = "can not convert'";
            str += pstBuffer->c_str();
            str += "' to UTF-8";
            exit_status = SCAN_ERROR;
            scan_error("can not convert string to UTF-8");
        }
        yylval.comment = new std::wstring(pwstBuffer);
        delete pstBuffer;
        FREE (pwstBuffer);
        return scan_throw(COMMENT);
    }
  }
	YY_BREAK
case YY_STATE_EOF(LINECOMMENT):
{
    yy_pop_state();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
    if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
    {
        std::string str = "can not convert'";
        str += pstBuffer->c_str();
        str += "' to UTF-8";
        exit_status = SCAN_ERROR;
        scan_error("can not convert string to UTF-8");
    }
    yylval.comment = new std::wstring(pwstBuffer);
    delete pstBuffer;
    FREE (pwstBuffer);
    return scan_throw(COMMENT);
  }
	YY_BREAK
case 114:
YY_RULE_SETUP
{
     // Put the char in a temporary CHAR buffer to go through UTF-8 trouble
     // only translate to WCHAR_T when popping state.
     *pstBuffer += yytext;
  }
	YY_BREAK

case 115:
YY_RULE_SETUP
{
    --comment_level;
    if (comment_level == 0) {
      ParserSingleInstance::popControlStatus();
      yy_pop_state();
      //return scan_throw(BLOCKCOMMENT);
    }
  }
	YY_BREAK
case 116:
YY_RULE_SETUP
{
    ++comment_level;
    yy_push_state(REGIONCOMMENT);
  }
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
{
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    scan_step();
    *yylval.comment += L"\n//";
  }
	YY_BREAK
case 118:
YY_RULE_SETUP
{
      wchar_t *pwText = to_wide_string(yytext);
      *yylval.comment += std::wstring(pwText);
      FREE(pwText);
  }
	YY_BREAK
case YY_STATE_EOF(REGIONCOMMENT):
{
      yy_pop_state();
//    std::string str = "unexpected end of file in a comment";
//    exit_status = SCAN_ERROR;
//    scan_error(str);
  }
	YY_BREAK

case 119:
YY_RULE_SETUP
{
    *pstBuffer += "\"";
  }
	YY_BREAK
case 120:
YY_RULE_SETUP
{
    *pstBuffer += "'";
  }
	YY_BREAK
case 121:
YY_RULE_SETUP
{
    *pstBuffer += "\"";
  }
	YY_BREAK
case 122:
YY_RULE_SETUP
{
    *pstBuffer += "'";
  }
	YY_BREAK
case 123:
YY_RULE_SETUP
{
    yy_pop_state();
    scan_step();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
    if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
    {
        std::string str = "can not convert'";
        str += pstBuffer->c_str();
        str += "' to UTF-8";
        exit_status = SCAN_ERROR;
        scan_error("can not convert string to UTF-8");
    }
    yylval.str = new std::wstring(pwstBuffer);
    delete pstBuffer;
    FREE(pwstBuffer);
    return scan_throw(STR);
  }
	YY_BREAK
case 124:
YY_RULE_SETUP
{
    std::string str = "Heterogeneous string detected, starting with ' and ending with \".";
    exit_status = SCAN_ERROR;
    scan_error(str);
  }
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
{
      /* Do nothing... Just skip */
  }
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
{
    std::string str = "unexpected end of line in a string.";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yylloc.last_line += 1;
    yylloc.last_column = 1;
  }
	YY_BREAK
case YY_STATE_EOF(SIMPLESTRING):
{
    std::string str = "unexpected end of file in a string.";
    exit_status = SCAN_ERROR;
    scan_error(str);
  }
	YY_BREAK
case 127:
YY_RULE_SETUP
{
    scan_step();
    *pstBuffer += yytext;
  }
	YY_BREAK

case 128:
YY_RULE_SETUP
{
    *pstBuffer += "\"";
  }
	YY_BREAK
case 129:
YY_RULE_SETUP
{
    *pstBuffer += "'";
  }
	YY_BREAK
case 130:
YY_RULE_SETUP
{
    *pstBuffer += "\"";
  }
	YY_BREAK
case 131:
YY_RULE_SETUP
{
    *pstBuffer += "'";
  }
	YY_BREAK
case 132:
YY_RULE_SETUP
{
    yy_pop_state();
    scan_step();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
    if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
    {
        std::string str = "can not convert'";
        str += pstBuffer->c_str();
        str += "' to UTF-8";
        exit_status = SCAN_ERROR;
        scan_error("can not convert string to UTF-8");
    }
    yylval.str = new std::wstring(pwstBuffer);
    delete pstBuffer;
    FREE(pwstBuffer);
    return scan_throw(STR);
  }
	YY_BREAK
case 133:
YY_RULE_SETUP
{
    std::string str = "Heterogeneous string detected, starting with \" and ending with '.";
    exit_status = SCAN_ERROR;
    scan_error(str);
  }
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
{
      /* Do nothing... Just skip */
  }
	YY_BREAK
case 135:
/* rule 135 can match eol */
YY_RULE_SETUP
{
    std::string str = "unexpected end of line in a string";
    exit_status = SCAN_ERROR;
    scan_error(str);
    yylloc.last_line += 1;
    yylloc.last_column = 1;
  }
	YY_BREAK
case YY_STATE_EOF(DOUBLESTRING):
{
    std::string str = "unexpected end of file in a string";
    exit_status = SCAN_ERROR;
    scan_error(str);
  }
	YY_BREAK
case 136:
YY_RULE_SETUP
{
   scan_step();
   *pstBuffer += yytext;
  }
	YY_BREAK

case 137:
YY_RULE_SETUP
{
        if (last_token == ID)
        {
            scan_throw(SPACES);
            return ID;
        }
    }
	YY_BREAK
case 138:
YY_RULE_SETUP
{
        BEGIN(INITIAL);
        scan_step();
        return scan_throw(SEMI);
    }
	YY_BREAK
case 139:
YY_RULE_SETUP
{
        BEGIN(INITIAL);
        scan_step();
        return scan_throw(COMMA);
    }
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
{
        BEGIN(INITIAL);
        yylloc.last_line += 1;
        yylloc.last_column = 1;
        scan_step();
        return scan_throw(EOL);
    }
	YY_BREAK
case 141:
YY_RULE_SETUP
{
        if (last_token == STR)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(ASSIGN);
        }
    }
	YY_BREAK
case 142:
YY_RULE_SETUP
{
        if (last_token == STR)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(LPAREN);
        }
    }
	YY_BREAK
case 143:
YY_RULE_SETUP
{
        if (last_token == STR)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(LT);
        }
    }
	YY_BREAK
case 144:
YY_RULE_SETUP
{
        if (last_token == STR)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(GT);
        }
    }
	YY_BREAK
case 145:
YY_RULE_SETUP
{
        if (last_token == STR)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(NOT);
        }
    }
	YY_BREAK
case 146:
YY_RULE_SETUP
{
	wchar_t *pwText = to_wide_string(yytext);
        yylval.str = new std::wstring(pwText);
	FREE(pwText);
        return scan_throw(STR);
    }
	YY_BREAK
case YY_STATE_EOF(SHELLMODE):
{
        BEGIN(INITIAL);
    }
	YY_BREAK

case 147:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(MATRIXMINUSID):
			case YY_STATE_EOF(BEGINID):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 812 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 812 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 811);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

int scan_throw(int token) {
  last_token = token;
#ifdef DEV
  std::cout << "--> [DEBUG] TOKEN : " << token << std::endl;
#endif
  return token;
}

int get_last_token() {
    return last_token;
}

void scan_step() {
  yylloc.first_line = yylloc.last_line;
  yylloc.first_column = yylloc.last_column;
}

void scan_error(std::string msg)
{
    wchar_t* pstMsg = to_wide_string(msg.c_str());

    //std::wcerr << pstMsg << std::endl;
    ParserSingleInstance::PrintError(pstMsg);
    ParserSingleInstance::setExitStatus(Parser::Failed);
    ParserSingleInstance::resetControlStatus();
    FREE(pstMsg);
    last_token = YYEOF;
    BEGIN(INITIAL);
}

/*
** convert floating numbers to C standard
** 1.2d-3 -> 1.2e-3
** 1.2D-3 -> 1.2e-3
*/
void scan_exponent_convert(char *in)
{
  char *pString;
  while((pString=strpbrk(in,"d"))!=NULL)
    {
      *pString='e';
    }
  while((pString=strpbrk(in,"D"))!=NULL)
    {
      *pString='e';
    }
}

#ifdef _MSC_VER
int isatty (int desc)
{
  return 0;
}
#endif

