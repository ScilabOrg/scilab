
#line 3 "src/cpp/scanscilab.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types.
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

#define YY_LESS_LINENO(n)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
{
    FILE *yy_input_file;

    char *yy_ch_buf;		/* input buffer */
    char *yy_buf_pos;		/* current position in input buffer */

    /* Size of input buffer in bytes, not including room for EOB
     * characters.
     */
    yy_size_t yy_buf_size;

    /* Number of characters read into yy_ch_buf, not including EOB
     * characters.
     */
    int yy_n_chars;

    /* Whether we "own" the buffer - i.e., we know we created it,
     * and can realloc() it to grow it, and should free() it to
     * delete it.
     */
    int yy_is_our_buffer;

    /* Whether this is an "interactive" input source; if so, and
     * if we're using stdio for input, then we want to use getc()
     * instead of fread(), to make sure we stop fetching input after
     * each newline.
     */
    int yy_is_interactive;

    /* Whether we're considered to be at the beginning of a line.
     * If so, '^' rules will be active on the next match, otherwise
     * not.
     */
    int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

    /* Whether to try to fill the input buffer when we reach the
     * end of it.
     */
    int yy_fill_buffer;

    int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
    /* When an EOF's been seen but there's still some text to process
     * then we mark the buffer as YY_EOF_PENDING, to indicate that we
     * shouldn't try reading from the input source any more.  We might
     * still have a bunch of tokens to match, though, because of
     * possible backing-up.
     *
     * When we actually see the EOF, we change the status to "new"
     * (via yyrestart()), so that the user can continue scanning by
     * just pointing yyin at a new input file.
     */
#define YY_BUFFER_EOF_PENDING 2

};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file, int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b, FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes, int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *, yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 145
#define YY_END_OF_BUFFER 146
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
{
    flex_int32_t yy_verify;
    flex_int32_t yy_nxt;
};
static yyconst flex_int16_t yy_acclist[955] =
{
    0,
    16407,  146,   81,  145,   77,   81,  145,   78,  145,   78,
    81,  145,   75,   81,  145,   72,   81,  145,   26,   72,
    81,  145,   72,   81,  145,   29,   81,  145,   76,   81,
    145,   33,   81,  145,   34,   81,  145,   47,   81,  145,
    46,   81,  145,   36,   81,  145,   45,   81,  145,   66,
    81,  145,   48,   81,  145,   68,   81,  145,   37,   81,
    145,   35,   81,  145,   59,   81,  145,   63,   81,  145,
    60,   81,  145,   72,   81,  145,   25,   81,  145,   64,
    81,  145,   49,   81,  145,   65,   81,  145,   50,   81,
    145,   72,   81,  145,   72,   81,  145,   72,   81,  145,

    72,   81,  145,   72,   81,  145,   72,   81,  145,   72,
    81,  145,   72,   81,  145,   72,   81,  145,   72,   81,
    145,   72,   81,  145,   72,   81,  145,   38,   81,  145,
    31,   81,  145,   39,   81,  145,   25,   81,  145,   81,
    145,   81,  145,   81,  145,   81,  145,   81,  145,   81,
    145,   81,  145,   81,  145,   77,   81,  145, 16407,   72,
    81,  145,   26,   72,   81,  145,   72,   81,  145,   72,
    81,  145,   72,   81,  145,   72,   81,  145,   72,   81,
    145,   72,   81,  145,   72,   81,  145,   72,   81,  145,
    72,   81,  145,   72,   81,  145,   72,   81,  145,   72,

    81,  145,   72,   81,  145,   72,   81,  145,   81,  145,
    81,  145,   81,  145,   81,  145,   81,  145,   81,  145,
    81,  145,   81,  145,  125,  145,  124,  145,  124,  125,
    145,  122,  125,  145,  121,  125,  145,  125,  145,  134,
    145,  133,  145,  133,  134,  145,  130,  134,  145,  131,
    134,  145,  134,  145,  116,  145,  115,  145,  115,  116,
    145,  116,  145,  116,  145,  112,  145,  111,  145,  111,
    112,  145,  110,  145,  109,  110,  145,  106,  145,  106,
    110,  145,  110,  145,   94,  145,   77,   94,  145,   84,
    145,   84,   94,  145,   75,   94,  145,   72,   94,  145,

    26,   72,   94,  145,   72,   94,  145,   29,   94,  145,
    76,   94,  145,   33,   82,   94,  145,   34,   94,  145,
    47,   94,  145,   87,   94,  145,   36,   94,  145,   88,
    94,  145,   66,   94,  145,   48,   94,  145,   68,   94,
    145,   37,   83,   94,  145,   35,   94,  145,   59,   94,
    145,   63,   94,  145,   60,   94,  145,   25,   94,  145,
    64,   94,  145,   49,   94,  145,   85,   94,  145,   50,
    94,  145,   38,   94,  145,   31,   94,  145,   86,   94,
    145,   25,   94,  145,   94,  145,   94,  145,   94,  145,
    94,  145,   94,  145,   94,  145,   94,  145,   94,  145,

    105,  145,  104,  105,  145,  145,  103,  105,  145,   98,
    105,  145,   97,  105,  145,  105,  145,   99,  105,  145,
    105,  145,  105,  145,  105,  145,  105,  145,  105,  145,
    105,  145,  105,  145,  105,  145,  144,  145,  135,  145,
    138,  145,  138,  145,   75,  145,   76,  145,  140,  144,
    145,  137,  145,  136,  145,  141,  144,  145,  139,  144,
    145,  142,  144,  145,  143,  144,  145,   24,  145,   24,
    145,   24,  145,   24,  145,   24,  145,   24,  145,   24,
    145,   24,  145,   24,  145,   24,  145,   24,  145,   24,
    145,   24,  145,   24,  145,  145,  145,  145,  145,  145,

    145,  145,  145,   77,   79,   79,   78,   72,   72,   28,
    72,   27,   72,   30,   50,   40,   41,   67,   42,   71,
    43,   44,   73,   74,   70,   68,   61,   58,   57,   62,
    72,   72,   72,   16,   72,   72,   72,   72,   72,   72,
    1,   72,   72,   72,   72,   72,   72,   72,   72,   32,
    72,   77, 16407,   72,   72,   28,   72,   27,   72,   72,
    72,   72,   16,   72,   72,   72,   72,   72,   72,    1,
    72,   72,   72,   72,   72,   72,   72,   72,   72,  124,
    117,  118,  119,  120,  133,  126,  127,  128,  129,  115,
    113,  114,  111,  109,  106,  107,  108,   77,   82,   83,

    84,   83,  104,  103,  101,  100,   99,  103,  144,  135,
    138,   24,   24,   24,   24,   24,   16,   24,   24,   24,
    24,   24,   24,    1,   24,   24,   24,   24,   24,   24,
    24,   24,   24,   80,   80,   72,   54,   51,   67,   52,
    53,   55,   70,   69,   56,   72,   72,   72,   72,   72,
    5,   72,   14,   72,   72,   72,   72,   72,   72,   72,
    72,   72,   19,   72,   72, 8215, 8215,   72,   72,   72,
    72,   72,   72,    5,   72,   14,   72,   72,   72,   72,
    72,   72,   72,   72,   72,   19,   72,   72,  123,  123,
    132,  132,   93,   89,   95,   95,  100,  102,   24,   24,

    24,   24,   24,   24,    5,   24,   14,   24,   24,   24,
    24,   24,   24,   24,   24,   24,   19,   24,   24,   72,
    72,    9,   72,   72,   72,    3,   72,   72,   72,   72,
    72,   72,   72,   72,   72,    2,   72,   72,   72,   72,
    72,    9,   72,   72,   72,    3,   72,   72,   72,   72,
    72,   72,   72,   72,   72,    2,   72,   72,   72,   93,
    92,   90,   96,  103,   24,   24,    9,   24,   24,   24,
    3,   24,   24,   24,   24,   24,   24,   24,   24,   24,
    2,   24,   24,   24,   72,   72,   17,   72,   20,   72,
    72,   72,   72,   72,   72,   72,   72,   72,   72,   72,

    15,   72,   72,   72,   17,   72,   20,   72,   72,   72,
    72,   72,   72,   72,   72,   72,   72,   72,   15,   72,
    90,   91,  103,   24,   24,   17,   24,   20,   24,   24,
    24,   24,   24,   24,   24,   24,   24,   24,   24,   15,
    24,   72,   72,    4,   72,   72,   72,   13,   72,   72,
    22,   72,   21,   72,    6,   72,    7,   72,   72,   72,
    4,   72,   72,   72,   13,   72,   72,   22,   72,   21,
    72,    6,   72,    7,   72,   93,   24,   24,    4,   24,
    24,   24,   13,   24,   24,   22,   24,   21,   24,    6,
    24,    7,   24,   72,   72,   72,   72,   72,   72,   72,

    72,   72,   72,   93,   24,   24,   24,   24,   24,   72,
    18,   72,   72,   10,   72,   72,   72,   18,   72,   72,
    10,   72,   72,   24,   18,   24,   24,   10,   24,   24,
    12,   72,   72,    8,   72,   12,   72,   72,    8,   72,
    12,   24,   24,    8,   24,   72,   72,   24,   11,   72,
    11,   72,   11,   24
} ;

static yyconst flex_int16_t yy_accept[810] =
{
    0,
    1,    1,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    3,    5,    8,   10,   13,   16,   19,   23,   26,
    29,   32,   35,   38,   41,   44,   47,   50,   53,   56,
    59,   62,   65,   68,   71,   74,   77,   80,   83,   86,
    89,   92,   95,   98,  101,  104,  107,  110,  113,  116,
    119,  122,  125,  128,  131,  134,  137,  140,  142,  144,
    146,  148,  150,  152,  154,  156,  160,  163,  167,  170,
    173,  176,  179,  182,  185,  188,  191,  194,  197,  200,
    203,  206,  209,  211,  213,  215,  217,  219,  221,  223,

    225,  227,  229,  232,  235,  238,  240,  242,  244,  247,
    250,  253,  255,  257,  259,  262,  264,  266,  268,  270,
    273,  275,  278,  280,  283,  285,  287,  290,  292,  295,
    298,  301,  305,  308,  311,  314,  318,  321,  324,  327,
    330,  333,  336,  339,  342,  346,  349,  352,  355,  358,
    361,  364,  367,  370,  373,  376,  379,  382,  385,  387,
    389,  391,  393,  395,  397,  399,  401,  403,  406,  407,
    410,  413,  416,  418,  421,  423,  425,  427,  429,  431,
    433,  435,  437,  439,  441,  443,  445,  447,  449,  452,
    454,  456,  459,  462,  465,  468,  470,  472,  474,  476,

    478,  480,  482,  484,  486,  488,  490,  492,  494,  496,
    497,  498,  499,  500,  501,  502,  503,  504,  505,  506,
    507,  507,  507,  508,  509,  510,  510,  510,  510,  510,
    510,  510,  510,  510,  512,  514,  515,  516,  516,  517,
    518,  519,  520,  521,  522,  523,  524,  524,  525,  526,
    527,  527,  528,  529,  530,  531,  531,  532,  533,  534,
    536,  537,  538,  539,  540,  541,  543,  544,  545,  546,
    547,  548,  549,  550,  551,  552,  552,  552,  552,  552,
    552,  552,  552,  554,  554,  554,  554,  554,  554,  554,
    554,  554,  554,  554,  555,  556,  556,  556,  556,  556,

    556,  556,  556,  556,  558,  560,  561,  562,  563,  565,
    566,  567,  568,  569,  570,  572,  573,  574,  575,  576,
    577,  578,  579,  580,  580,  580,  580,  580,  580,  580,
    580,  581,  582,  583,  584,  585,  585,  586,  587,  588,
    589,  590,  590,  591,  592,  593,  594,  595,  596,  597,
    598,  599,  600,  600,  601,  602,  602,  603,  604,  605,
    605,  605,  605,  605,  605,  605,  605,  605,  606,  607,
    608,  608,  609,  609,  609,  609,  609,  609,  609,  609,
    610,  611,  612,  613,  614,  614,  614,  614,  614,  614,
    614,  614,  614,  615,  616,  617,  619,  620,  621,  622,

    623,  624,  626,  627,  628,  629,  630,  631,  632,  633,
    634,  634,  634,  634,  634,  634,  634,  634,  635,  636,
    637,  637,  637,  637,  637,  637,  637,  637,  638,  639,
    640,  641,  642,  643,  644,  644,  645,  646,  647,  648,
    649,  650,  651,  653,  655,  656,  657,  658,  659,  660,
    661,  662,  663,  665,  666,  666,  666,  666,  666,  666,
    666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
    666,  666,  666,  666,  667,  668,  669,  669,  669,  669,
    669,  669,  669,  669,  670,  671,  672,  673,  674,  676,
    678,  679,  680,  681,  682,  683,  684,  685,  686,  688,

    689,  689,  689,  689,  690,  691,  691,  692,  693,  693,
    694,  694,  695,  695,  695,  695,  695,  695,  695,  695,
    695,  695,  696,  697,  697,  697,  697,  697,  697,  697,
    697,  697,  697,  698,  698,  699,  699,  699,  699,  700,
    700,  700,  700,  700,  700,  700,  700,  701,  702,  703,
    704,  705,  707,  709,  710,  711,  712,  713,  714,  715,
    716,  717,  719,  720,  720,  720,  720,  721,  721,  721,
    721,  722,  724,  725,  726,  728,  729,  730,  731,  732,
    733,  734,  735,  736,  738,  739,  740,  740,  740,  740,
    740,  740,  740,  740,  740,  740,  740,  741,  741,  741,

    741,  742,  744,  745,  746,  748,  749,  750,  751,  752,
    753,  754,  755,  756,  758,  759,  760,  761,  761,  761,
    761,  761,  761,  761,  761,  761,  762,  763,  763,  763,
    763,  763,  763,  763,  763,  763,  764,  764,  764,  764,
    765,  766,  766,  766,  766,  767,  769,  770,  771,  773,
    774,  775,  776,  777,  778,  779,  780,  781,  783,  784,
    785,  786,  787,  789,  791,  792,  793,  794,  795,  796,
    797,  798,  799,  800,  801,  803,  803,  803,  803,  803,
    804,  805,  807,  809,  810,  811,  812,  813,  814,  815,
    816,  817,  818,  819,  821,  821,  821,  821,  821,  821,

    821,  821,  822,  822,  823,  823,  823,  823,  824,  825,
    826,  828,  830,  831,  832,  833,  834,  835,  836,  837,
    838,  839,  840,  842,  843,  844,  846,  847,  848,  850,
    851,  853,  855,  857,  859,  859,  860,  861,  863,  864,
    865,  867,  868,  870,  872,  874,  876,  876,  876,  876,
    877,  878,  879,  881,  882,  883,  885,  886,  888,  890,
    892,  894,  895,  896,  897,  898,  899,  900,  901,  902,
    903,  904,  905,  906,  907,  908,  909,  910,  911,  913,
    914,  916,  917,  918,  920,  921,  923,  924,  925,  927,
    928,  930,  931,  933,  934,  936,  938,  939,  941,  943,

    944,  946,  947,  948,  949,  951,  953,  955,  955
} ;

static yyconst flex_int32_t yy_ec[256] =
{
    0,
    1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
    2,    2,    4,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    2,    1,    5,    6,    7,    8,    9,   10,   11,
    12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
    19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
    23,   24,   25,   26,   25,   25,   25,   27,   27,   28,
    25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
    25,   25,   25,   29,   25,   25,   25,   25,   25,   25,
    30,   31,   32,   33,   25,    1,   34,   35,   36,   37,

    38,   39,   25,   40,   41,   25,   42,   43,   44,   45,
    46,   25,   25,   47,   48,   49,   50,   25,   51,   25,
    52,   25,   53,   54,   55,   56,    1,   57,   57,   57,
    57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
    57,   57,   57,   58,   58,   58,   58,   58,   58,   58,
    58,   58,   58,   58,   58,   58,   58,   58,   58,   59,
    59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
    59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
    59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
    59,    1,    1,   60,   60,   60,   60,   60,   60,   60,

    60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
    60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
    60,   60,   60,   61,   62,   62,   62,   62,   62,   62,
    62,   62,   62,   62,   62,   62,   63,   64,   64,   65,
    66,   66,   66,   67,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1
} ;

static yyconst flex_int32_t yy_meta[68] =
{
    0,
    1,    2,    3,    3,    4,    5,    5,    6,    1,    4,
    7,    1,    1,    1,    4,    1,    8,    1,    9,    1,
    4,    7,    7,    7,    5,    7,    5,    5,    5,    1,
    1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
    5,    5,    1,    1,    1,    7,    1,    1,    1,    5,
    5,    5,    5,    5,    5,    5,    5
} ;

static yyconst flex_int16_t yy_base[828] =
{
    0,
    0,   67,  132,  135,  143,  151,  154,  160,  140,  147,
    167,  172,  190,    0,  257,    0,  323,  378,  434,    0,
    1770, 1771,  177,  327,  337, 1771,  302,  310,  356, 1760,
    1771, 1771, 1771,  149, 1771, 1771, 1771,  393,  169,  390,
    1771, 1771,  160, 1745, 1744,    0, 1743, 1771, 1748, 1771,
    1771, 1717,  131, 1717,  287,  285, 1721, 1722, 1711, 1721,
    299,  296, 1718, 1771, 1703, 1771, 1733,  296, 1696,  302,
    131,  333,  298,  339, 1697,  500,  508,  516,  477,    0,
    1706,  374, 1706,  370,  368, 1710, 1711, 1700, 1710,  378,
    347, 1707,  364, 1687,  373,  450,  454,  456,  462, 1688,

    1771, 1771, 1741,  512,  518, 1726, 1771, 1771, 1739,  519,
    520, 1724, 1771, 1771, 1737, 1721, 1725, 1771, 1771, 1734,
    1771, 1734, 1771, 1732,  514, 1771,  532,  529,  536, 1771,
    0,    0,  556, 1725, 1771, 1771, 1771,  520, 1771, 1771,
    1771,  579,  536,  582, 1731, 1771,  517, 1709, 1708, 1707,
    1771, 1712, 1771, 1771, 1771, 1674, 1771, 1704,  529, 1667,
    545,  498,  549,  500,  556, 1668, 1771, 1722, 1771,  561,
    1771, 1771, 1704,  612,  559, 1663,  575,  533,  578,  535,
    583, 1664,    0, 1718, 1771, 1716, 1771, 1771,    0, 1771,
    1771,    0,    0,    0,    0,  591,  599, 1671,  633, 1671,

    600,  598, 1675, 1676, 1665, 1675,  630,  629, 1672,  613,
    1652,  616,  589,  625,  619,  628, 1653,  686, 1771, 1706,
    689,  692,  696,    0, 1658,  642, 1648,  657,  645,  661,
    647,  664, 1649,    0,    0, 1771, 1771,    0, 1771,  695,
    1688, 1687,  705, 1686, 1771, 1771,    0, 1771,  707,  710,
    714, 1771, 1771, 1771, 1771,    0, 1664,  687, 1656,    0,
    1652, 1662, 1651, 1652, 1659,    0, 1655,  690, 1651, 1652,
    1654, 1639, 1649, 1771,    0,  692,  695,  698,  701,  704,
    707,  710,  768,  723,  716, 1630,  719,  683,  722,  733,
    736, 1631, 1685,    0, 1636,  739, 1626,  742,  745,  747,

    749,  752, 1627,    0,    0, 1645,  764, 1637,    0, 1633,
    1643, 1632, 1633, 1640,    0, 1636,  766, 1632, 1633, 1635,
    1620, 1630,    0,  759,  762,  765,  768,  779,  782,  785,
    1771, 1771, 1771, 1771, 1771,  842, 1771, 1771, 1771, 1771,
    1771,  844, 1771, 1771, 1771, 1771, 1668, 1771, 1771, 1771,
    849, 1771,  837, 1667,  847,  868, 1666, 1665,  813,  824,
    1607,  830,  800,  833,  808,  836, 1608,  886,  888,  891,
    895,    0,  862,  873,  876,  879,  882,  885,  888,    0,
    1662, 1771,    0, 1613,  891, 1603,  894,  859,  897,  899,
    902, 1604, 1622,  914, 1614,    0, 1610, 1620, 1609, 1610,

    1617,    0, 1613,  916, 1609, 1610, 1612, 1597, 1607,    0,
    909,  912,  915,  918,  921,  924,  927, 1771, 1644, 1601,
    930,  933,  936,  939,  942,  945,  948, 1771, 1771, 1771,
    1771, 1771, 1771,  989, 1626, 1625, 1771, 1609, 1604, 1605,
    1591, 1601, 1599,    0, 1601, 1599, 1597, 1584, 1583, 1594,
    1582, 1585,    0, 1586,  952,  955,  960, 1013,  963, 1569,
    966,  971,  973,  975,  978, 1570,  981,  984,  987,  990,
    993,  996,  999, 1771, 1624, 1580, 1002, 1005, 1008, 1011,
    1024, 1027, 1030, 1590, 1585, 1586, 1572, 1582, 1580,    0,
    1582, 1580, 1578, 1565, 1564, 1575, 1563, 1566,    0, 1567,

    1033, 1036, 1039, 1771, 1606, 1068, 1771, 1605, 1096, 1041,
    1588, 1092, 1055, 1547, 1058, 1063, 1065, 1067, 1074, 1548,
    1132, 1771, 1601, 1135, 1585, 1083, 1086, 1089, 1097, 1100,
    1103, 1106, 1147, 1583, 1582, 1110, 1113, 1118, 1555, 1121,
    1124, 1129, 1132, 1135, 1138, 1141, 1565, 1560, 1561, 1547,
    1557, 1555,    0, 1557, 1555, 1553, 1540, 1539, 1550, 1538,
    1541,    0, 1542, 1144, 1147, 1150, 1548, 1153, 1156, 1159,
    1541,    0, 1542, 1540, 1539, 1529, 1529, 1539, 1529, 1531,
    1527, 1537, 1536,    0, 1533,    0, 1162, 1165, 1168, 1171,
    1174, 1177, 1180, 1183, 1186, 1189, 1534, 1192, 1195, 1198,

    1527,    0, 1528, 1526, 1525, 1515, 1515, 1525, 1515, 1517,
    1513, 1523, 1522,    0, 1519,    0, 1198, 1209, 1497, 1212,
    1070, 1215, 1093, 1218, 1498, 1259, 1261, 1265, 1232, 1235,
    1243, 1246, 1249, 1252, 1255, 1771, 1258, 1261, 1264,    0,
    1518, 1267, 1270, 1273, 1511,    0, 1512, 1510, 1509, 1499,
    1499, 1509, 1499, 1501, 1497, 1507, 1506,    0, 1503,    0,
    1491,    0,    0,    0, 1494, 1499, 1492, 1495, 1490, 1483,
    1495, 1487, 1482, 1490,    0, 1276, 1279, 1282,    0, 1480,
    0,    0,    0, 1483, 1487, 1480, 1483, 1475, 1464, 1469,
    1461, 1456, 1463,    0, 1285, 1288, 1291, 1294, 1297, 1300,

    1303, 1344, 1483, 1456, 1307, 1310, 1315,    0, 1425,    0,
    0,    0, 1428, 1427, 1420, 1423, 1416, 1409, 1421, 1411,
    1406, 1414,    0, 1411, 1401,    0, 1411, 1397,    0, 1401,
    0,    0,    0,    0,    0, 1400, 1320,    0, 1259, 1241,
    0, 1244,    0,    0,    0,    0, 1318, 1321, 1326,    0,
    1242, 1232,    0, 1137, 1103,    0, 1077,    0,    0,    0,
    0, 1064,  889,  873,  867,  858,  850,  846,  815,  810,
    802,    0,  736,  708,  682,  664,  649,  635,    0,  597,
    0,  573,  555,    0,  504,    0,  504,  464,    0,  392,
    0,  387,    0,  373,    0,    0,  340,    0,    0,  332,

    0,  306,  114,   96,    0,    0,    0, 1771, 1385, 1394,
    1403, 1412, 1421, 1430, 1435, 1443, 1448, 1453, 1462, 1467,
    1476, 1484, 1492, 1499, 1508, 1513, 1518
} ;

static yyconst flex_int16_t yy_def[828] =
{
    0,
    808,  808,  809,  809,  810,  810,  811,  811,  812,  812,
    813,  813,  808,   13,  808,   15,  814,  814,  808,   19,
    808,  808,  808,  808,  808,  808,  815,  815,   28,  808,
    808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
    808,  808,  808,  808,  808,   28,  808,  808,  808,  808,
    808,   28,   28,   28,   28,   28,   28,   28,   28,   28,
    28,   28,   28,  808,  808,  808,  808,  808,  808,  808,
    808,  808,  808,  808,  808,  816,  817,  817,   78,   78,
    78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
    78,   78,  808,  808,  808,  808,  808,  808,  808,  808,

    808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
    808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
    808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
    28,   28,   28,  808,  808,  808,  808,  808,  808,  808,
    808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
    808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
    808,  808,  808,  808,  808,  808,  808,  808,  808,  818,
    808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
    808,  808,  819,  808,  808,  808,  808,  808,  819,  808,
    808,  819,  819,  819,  819,  820,  820,  197,  197,  197,

    197,  197,  197,  197,  197,  197,  197,  197,  197,  808,
    808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
    808,  808,  808,   28,   28,  808,  808,  808,  808,  808,
    808,  808,  808,   28,   28,  808,  808,  821,  808,  808,
    808,  808,  808,  808,  808,  808,  822,  808,  808,  808,
    808,  808,  808,  808,  808,  823,   28,   28,   28,   28,
    28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
    28,   28,   28,  808,   28,  808,  808,  808,  808,  808,
    808,  808,  816,  824,  808,  808,  808,  808,  808,  808,
    808,  808,  825,   78,   78,  808,  808,  808,  808,  808,

    808,  808,  808,   78,   78,   78,   78,   78,   78,   78,
    78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
    78,   78,   78,  808,  808,  808,  808,  808,  808,  808,
    808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
    808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
    808,  808,  826,  808,  808,  808,  808,  808,  818,  808,
    808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
    808,  359,  808,  808,  808,  808,  808,  808,  808,  819,
    808,  808,  197,  197,  808,  808,  808,  808,  808,  808,
    808,  808,  197,  197,  197,  197,  197,  197,  197,  197,

    197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
    808,  808,  808,  808,  808,  808,  808,  808,  808,   28,
    808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
    808,  808,  808,  808,  808,  808,  808,   28,   28,   28,
    28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
    28,   28,   28,   28,  808,  808,  808,  824,  808,  808,
    808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
    808,  808,  808,  808,  825,   78,  808,  808,  808,  808,
    808,  808,  808,   78,   78,   78,   78,   78,   78,   78,
    78,   78,   78,   78,   78,   78,   78,   78,   78,   78,

    808,  808,  808,  808,  808,  808,  808,  808,  808,  827,
    808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
    808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
    808,  808,  808,  808,  808,  808,  808,  808,  197,  808,
    808,  808,  808,  808,  808,  808,  197,  197,  197,  197,
    197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
    197,  197,  197,  808,  808,  808,   28,  808,  808,  808,
    28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
    28,   28,   28,   28,   28,   28,  808,  808,  808,  808,
    808,  808,  808,  808,  808,  808,   78,  808,  808,  808,

    78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
    78,   78,   78,   78,   78,   78,  827,  808,  808,  808,
    808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
    808,  808,  808,  808,  808,  808,  808,  808,  808,  359,
    197,  808,  808,  808,  197,  197,  197,  197,  197,  197,
    197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
    28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
    28,   28,   28,   28,   28,  808,  808,  808,  458,   78,
    78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
    78,   78,   78,   78,  808,  808,  808,  808,  808,  808,

    808,  808,  808,  808,  808,  808,  808,  359,  197,  197,
    197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
    197,  197,  197,   28,   28,   28,   28,   28,   28,   28,
    28,   28,   28,   28,  458,   78,   78,   78,   78,   78,
    78,   78,   78,   78,   78,   78,  808,  808,  808,  617,
    197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
    197,   28,   28,   28,   28,   28,   78,   78,   78,   78,
    78,  617,  197,  197,  197,  197,  197,   28,   28,   28,
    28,   28,   78,   78,   78,   78,   78,  197,  197,  197,
    197,  197,   28,   28,   28,   78,   78,   78,  197,  197,

    197,   28,   78,  197,   28,   78,  197,    0,  808,  808,
    808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
    808,  808,  808,  808,  808,  808,  808
} ;

static yyconst flex_int16_t yy_nxt[1839] =
{
    0,
    22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
    32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
    42,   43,   44,   45,   46,   47,   46,   46,   46,   48,
    49,   50,   51,   46,   52,   53,   54,   55,   56,   57,
    58,   46,   46,   46,   46,   59,   60,   61,   62,   46,
    63,   46,   64,   65,   66,   67,   22,   22,   22,   68,
    69,   70,   71,   72,   73,   74,   75,   22,   76,   24,
    25,   26,   77,   78,   79,   30,   31,   32,   33,   34,
    35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
    45,   80,   47,   80,   80,   80,   48,   49,   50,   51,

    80,   81,   82,   83,   84,   85,   86,   87,   80,   80,
    80,   80,   88,   89,   90,   91,   80,   92,   80,   64,
    65,   66,   67,   22,   22,   22,   93,   94,   95,   96,
    97,   98,   99,  100,  102,  103,  104,  102,  103,  104,
    807,  105,  119,  120,  105,  108,  109,  110,  106,  119,
    120,  106,  111,  108,  109,  110,  114,  115,  806,  112,
    111,  237,  114,  115,  258,  238,  116,  112,  122,  123,
    124,  117,  116,  122,  123,  124,  259,  117,  218,  219,
    220,  246,  252,  253,  125,  247,  248,  278,  278,  125,
    126,  127,  128,  129,  130,  131,  132,  133,  134,  135,

    136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
    146,  147,  148,  149,  131,  150,  131,  131,  131,  151,
    152,  153,  154,  131,  131,  131,  131,  131,  131,  131,
    131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
    131,  131,  155,  156,  157,  158,  126,  126,  126,  159,
    160,  161,  162,  163,  164,  165,  166,  167,  168,  169,
    167,  167,  170,  170,  170,  167,  167,  167,  167,  167,
    171,  167,  172,  173,  167,  174,  167,  167,  167,  167,
    167,  170,  167,  170,  170,  170,  167,  167,  167,  167,
    170,  170,  170,  170,  170,  170,  170,  170,  170,  170,

    170,  170,  170,  170,  170,  170,  170,  170,  170,  167,
    167,  167,  167,  167,  167,  167,  175,  176,  177,  178,
    179,  180,  181,  182,  184,  185,  186,  187,  221,  261,
    263,  262,  188,  189,  264,  271,  269,  190,  221,  223,
    225,  222,  272,  191,  192,  193,  194,  222,  195,  270,
    805,  222,  275,  275,  275,  280,  280,  222,  277,  277,
    277,  226,  227,  228,  229,  230,  231,  232,  233,  226,
    227,  228,  229,  230,  231,  232,  233,  804,  195,  184,
    185,  186,  187,  234,  235,  803,  320,  188,  189,  279,
    279,  279,  190,  321,  234,  281,  281,  281,  191,  192,

    193,  194,  239,  195,  235,  240,  249,  307,  250,  241,
    242,  243,  310,  312,  311,  318,  251,  313,  802,  308,
    323,  323,  323,  244,  801,  245,  251,  251,  319,  325,
    325,  325,  800,  195,  169,  169,  169,  169,  169,  196,
    197,  197,  169,  169,  169,  169,  169,  169,  169,  169,
    169,  169,  169,  169,  169,  169,  169,  169,  197,  169,
    197,  197,  197,  169,  169,  169,  169,  197,  198,  199,
    200,  201,  202,  203,  204,  197,  197,  197,  197,  205,
    206,  207,  208,  197,  209,  197,  169,  169,  169,  169,
    169,  169,  169,  210,  211,  212,  213,  214,  215,  216,

    217,  283,  219,  220,  304,  305,  326,  326,  799,  293,
    327,  327,  327,  328,  328,  304,  332,  293,  329,  329,
    329,  333,  334,  338,  340,  305,  349,  335,  339,  341,
    221,  350,  237,  351,  219,  220,  238,  221,  355,  252,
    253,  798,  352,  222,  797,  353,  295,  353,  246,  222,
    222,  354,  247,  248,  278,  278,  222,  280,  280,  285,
    286,  287,  288,  289,  290,  291,  292,  296,  297,  298,
    299,  300,  301,  302,  303,  296,  297,  298,  299,  300,
    301,  302,  303,  234,  235,  275,  275,  275,  239,  375,
    375,  240,  377,  377,  234,  356,  242,  243,  249,  796,

    250,  277,  277,  277,  235,  279,  279,  279,  251,  244,
    795,  245,  281,  281,  281,  372,  372,  372,  251,  251,
    360,  361,  362,  363,  364,  365,  366,  367,  369,  384,
    370,  374,  374,  374,  376,  376,  376,  794,  371,  378,
    378,  378,  397,  399,  398,  413,  413,  400,  371,  371,
    385,  386,  387,  388,  389,  390,  391,  392,  385,  386,
    387,  388,  389,  390,  391,  392,  394,  405,  407,  410,
    410,  410,  412,  412,  412,  408,  415,  415,  395,  793,
    406,  414,  414,  414,  416,  416,  416,  218,  219,  220,
    221,  418,  419,  221,  418,  419,  792,  221,  224,  224,

    224,  423,  423,  222,  425,  425,  222,  245,  791,  222,
    222,  429,  222,  422,  422,  422,  222,  424,  424,  424,
    426,  426,  426,  243,  293,  434,  249,  435,  250,  435,
    790,  251,  436,  251,  439,  440,  251,  448,  449,  469,
    469,  251,  251,  251,  251,  789,  251,  251,  275,  275,
    275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
    455,  455,  455,  456,  456,  456,  457,  457,  457,  283,
    219,  220,  284,  284,  284,  468,  468,  468,  470,  470,
    470,  788,  459,  460,  461,  462,  463,  464,  465,  466,
    471,  471,  472,  472,  472,  294,  294,  294,  478,  478,

    478,  479,  479,  480,  480,  480,  481,  481,  482,  482,
    482,  485,  486,  494,  495,  323,  323,  323,  323,  323,
    323,  323,  323,  323,  323,  323,  323,  285,  286,  287,
    288,  289,  290,  291,  292,  501,  501,  501,  502,  502,
    502,  503,  503,  503,  504,  505,  507,  508,  221,  787,
    351,  219,  220,  511,  786,  512,  528,  528,  506,  352,
    509,  222,  353,  785,  353,  530,  530,  222,  354,  521,
    522,  523,  360,  361,  362,  363,  364,  365,  366,  367,
    359,  359,  359,  784,  524,  525,  527,  527,  527,  529,
    529,  529,  531,  531,  531,  783,  513,  514,  515,  516,

    517,  518,  519,  520,  368,  782,  533,  369,  534,  370,
    534,  781,  371,  535,  371,  542,  542,  371,  372,  372,
    372,  780,  371,  371,  371,  371,  779,  371,  371,  372,
    372,  372,  372,  372,  372,  372,  372,  372,  536,  536,
    536,  537,  537,  537,  538,  538,  538,  383,  383,  383,
    541,  541,  541,  543,  543,  543,  544,  544,  545,  545,
    545,  548,  549,  557,  558,  410,  410,  410,  410,  410,
    410,  410,  410,  410,  410,  410,  410,  564,  564,  564,
    565,  565,  565,  566,  566,  566,  224,  224,  224,  224,
    224,  224,  224,  224,  224,  224,  224,  224,  568,  568,

    568,  569,  569,  569,  570,  570,  570,  434,  586,  586,
    586,  586,  586,  586,  293,  251,  586,  586,  586,  458,
    458,  458,  588,  588,  588,  251,  251,  589,  589,  590,
    590,  590,  591,  591,  592,  592,  592,  284,  284,  284,
    284,  284,  284,  284,  284,  284,  284,  284,  284,  594,
    594,  594,  595,  595,  595,  596,  596,  596,  294,  294,
    294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
    504,  505,  459,  460,  461,  462,  463,  464,  465,  466,
    598,  598,  598,  599,  599,  599,  600,  600,  600,  616,
    616,  616,  616,  616,  616,  616,  616,  616,  507,  508,

    618,  619,  620,  621,  622,  623,  624,  625,  627,  778,
    512,  510,  510,  510,  630,  630,  630,  777,  628,  631,
    631,  632,  632,  632,  633,  633,  697,  697,  628,  628,
    634,  634,  634,  521,  522,  523,  521,  522,  523,  359,
    359,  359,  359,  359,  359,  359,  359,  359,  776,  525,
    699,  699,  525,  359,  359,  359,  637,  637,  637,  638,
    638,  638,  639,  639,  639,  533,  640,  640,  640,  640,
    640,  640,  775,  371,  640,  640,  640,  383,  383,  383,
    383,  383,  383,  371,  371,  383,  383,  383,  383,  383,
    383,  642,  642,  642,  643,  643,  643,  644,  644,  644,

    660,  660,  660,  660,  660,  660,  660,  660,  660,  662,
    662,  662,  662,  662,  662,  662,  662,  662,  458,  458,
    458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
    676,  676,  676,  677,  677,  677,  678,  678,  678,  679,
    679,  679,  679,  679,  679,  679,  679,  679,  681,  681,
    681,  681,  681,  681,  681,  681,  681,  618,  619,  620,
    621,  622,  623,  624,  625,  617,  617,  617,  696,  696,
    696,  698,  698,  698,  700,  700,  700,  626,  703,  702,
    703,  774,  773,  704,  771,  628,  770,  628,  510,  510,
    510,  510,  510,  510,  769,  628,  628,  628,  628,  510,

    510,  510,  510,  510,  510,  705,  705,  705,  706,  706,
    706,  707,  707,  707,  708,  708,  708,  708,  708,  708,
    708,  708,  708,  710,  710,  710,  710,  710,  710,  710,
    710,  710,  735,  735,  735,  735,  735,  735,  735,  735,
    735,  617,  617,  617,  617,  617,  617,  617,  617,  617,
    617,  617,  617,  747,  747,  747,  748,  748,  748,  749,
    749,  749,  702,  750,  750,  750,  750,  750,  750,  768,
    628,  750,  750,  750,  772,  772,  772,  772,  772,  772,
    628,  628,  772,  772,  772,  101,  101,  101,  101,  101,
    101,  101,  101,  101,  107,  107,  107,  107,  107,  107,

    107,  107,  107,  113,  113,  113,  113,  113,  113,  113,
    113,  113,  118,  118,  118,  118,  118,  118,  118,  118,
    118,  121,  121,  121,  121,  121,  121,  121,  121,  121,
    183,  183,  183,  183,  183,  183,  183,  183,  183,  224,
    767,  766,  765,  224,  284,  284,  764,  284,  284,  294,
    763,  762,  294,  761,  760,  759,  294,  359,  758,  757,
    756,  359,  380,  755,  754,  753,  380,  380,  380,  380,
    380,  383,  752,  751,  704,  383,  428,  428,  428,  428,
    428,  428,  428,  428,  433,  433,  433,  433,  433,  433,
    433,  433,  437,  437,  437,  437,  437,  437,  437,  437,

    458,  704,  746,  458,  745,  744,  743,  458,  474,  474,
    474,  474,  474,  474,  742,  474,  474,  510,  510,  741,
    510,  510,  617,  740,  739,  738,  617,  737,  736,  734,
    733,  732,  731,  730,  729,  728,  727,  726,  725,  724,
    723,  722,  721,  720,  719,  718,  717,  716,  715,  714,
    713,  712,  711,  709,  701,  695,  694,  693,  692,  691,
    690,  689,  688,  687,  686,  685,  684,  683,  682,  680,
    675,  674,  673,  672,  671,  670,  669,  668,  667,  666,
    665,  664,  663,  661,  659,  658,  657,  656,  655,  654,
    653,  652,  651,  650,  649,  648,  647,  646,  645,  641,

    535,  535,  636,  522,  635,  629,  626,  507,  504,  615,
    614,  613,  612,  611,  610,  609,  608,  607,  606,  605,
    604,  603,  602,  601,  597,  475,  593,  587,  585,  584,
    583,  582,  581,  580,  579,  578,  577,  576,  575,  574,
    573,  572,  571,  436,  436,  567,  418,  563,  562,  561,
    560,  559,  556,  555,  554,  553,  552,  551,  550,  547,
    546,  540,  539,  381,  532,  526,  358,  357,  357,  347,
    500,  499,  498,  497,  496,  493,  492,  491,  490,  489,
    488,  487,  484,  483,  477,  476,  475,  473,  467,  454,
    453,  452,  451,  450,  447,  446,  445,  444,  443,  442,

    441,  438,  432,  431,  430,  427,  421,  420,  219,  417,
    411,  409,  404,  403,  402,  401,  396,  393,  382,  381,
    379,  373,  368,  358,  282,  276,  253,  274,  256,  253,
    255,  254,  357,  236,  348,  347,  346,  345,  344,  343,
    342,  337,  336,  331,  330,  324,  322,  317,  316,  315,
    314,  309,  306,  282,  276,  253,  274,  273,  268,  267,
    266,  265,  260,  257,  256,  253,  255,  254,  236,  808,
    21,  808,  808,  808,  808,  808,  808,  808,  808,  808,
    808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
    808,  808,  808,  808,  808,  808,  808,  808,  808,  808,

    808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
    808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
    808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
    808,  808,  808,  808,  808,  808,  808,  808
} ;

static yyconst flex_int16_t yy_chk[1839] =
{
    0,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    3,    3,    3,    4,    4,    4,
    804,    3,    9,    9,    4,    5,    5,    5,    3,   10,
    10,    4,    5,    6,    6,    6,    7,    7,  803,    5,
    6,   34,    8,    8,   53,   34,    7,    6,   11,   11,
    11,    7,    8,   12,   12,   12,   53,    8,   23,   23,
    23,   39,   43,   43,   11,   39,   39,   71,   71,   12,
    13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

    13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
    13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
    13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
    13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
    13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
    13,   13,   13,   13,   13,   13,   13,   15,   15,   15,
    15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
    15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
    15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
    15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

    15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
    15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
    15,   15,   15,   15,   17,   17,   17,   17,   24,   55,
    56,   55,   17,   17,   56,   62,   61,   17,   25,   25,
    27,   24,   62,   17,   17,   17,   17,   24,   17,   61,
    802,   25,   68,   68,   68,   73,   73,   25,   70,   70,
    70,   27,   27,   27,   27,   27,   27,   27,   27,   28,
    28,   28,   28,   28,   28,   28,   28,  800,   17,   18,
    18,   18,   18,   29,   29,  797,   91,   18,   18,   72,
    72,   72,   18,   91,   29,   74,   74,   74,   18,   18,

    18,   18,   38,   18,   29,   38,   40,   82,   40,   38,
    38,   38,   84,   85,   84,   90,   40,   85,  794,   82,
    93,   93,   93,   38,  792,   38,   40,   40,   90,   95,
    95,   95,  790,   18,   19,   19,   19,   19,   19,   19,
    19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
    19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
    19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
    19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
    19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
    19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

    19,   76,   76,   76,   79,   79,   96,   96,  788,   77,
    97,   97,   97,   98,   98,   79,  104,   78,   99,   99,
    99,  104,  105,  110,  111,   79,  125,  105,  110,  111,
    128,  125,  138,  127,  127,  127,  138,  129,  129,  147,
    147,  787,  127,  128,  785,  127,   77,  127,  143,  128,
    129,  127,  143,  143,  162,  162,  129,  164,  164,   76,
    76,   76,   76,   76,   76,   76,   76,   77,   77,   77,
    77,   77,   77,   77,   77,   78,   78,   78,   78,   78,
    78,   78,   78,  133,  133,  159,  159,  159,  142,  178,
    178,  142,  180,  180,  133,  142,  142,  142,  144,  783,

    144,  161,  161,  161,  133,  163,  163,  163,  144,  142,
    782,  142,  165,  165,  165,  175,  175,  175,  144,  144,
    170,  170,  170,  170,  170,  170,  170,  170,  174,  196,
    174,  177,  177,  177,  179,  179,  179,  780,  174,  181,
    181,  181,  201,  202,  201,  213,  213,  202,  174,  174,
    196,  196,  196,  196,  196,  196,  196,  196,  197,  197,
    197,  197,  197,  197,  197,  197,  199,  207,  208,  210,
    210,  210,  212,  212,  212,  208,  215,  215,  199,  778,
    207,  214,  214,  214,  216,  216,  216,  218,  218,  218,
    221,  221,  221,  222,  222,  222,  777,  223,  226,  226,

    226,  229,  229,  221,  231,  231,  222,  240,  776,  221,
    223,  240,  222,  228,  228,  228,  223,  230,  230,  230,
    232,  232,  232,  243,  284,  249,  250,  251,  250,  251,
    775,  243,  251,  249,  258,  258,  250,  268,  268,  288,
    288,  243,  243,  249,  249,  774,  250,  250,  276,  276,
    276,  277,  277,  277,  278,  278,  278,  279,  279,  279,
    280,  280,  280,  281,  281,  281,  282,  282,  282,  283,
    283,  283,  285,  285,  285,  287,  287,  287,  289,  289,
    289,  773,  284,  284,  284,  284,  284,  284,  284,  284,
    290,  290,  291,  291,  291,  296,  296,  296,  298,  298,

    298,  299,  299,  300,  300,  300,  301,  301,  302,  302,
    302,  307,  307,  317,  317,  324,  324,  324,  325,  325,
    325,  326,  326,  326,  327,  327,  327,  283,  283,  283,
    283,  283,  283,  283,  283,  328,  328,  328,  329,  329,
    329,  330,  330,  330,  336,  336,  342,  342,  355,  771,
    351,  351,  351,  353,  770,  353,  363,  363,  336,  351,
    342,  355,  351,  769,  351,  365,  365,  355,  351,  356,
    356,  356,  359,  359,  359,  359,  359,  359,  359,  359,
    360,  360,  360,  768,  356,  356,  362,  362,  362,  364,
    364,  364,  366,  366,  366,  767,  353,  353,  353,  353,

    353,  353,  353,  353,  368,  766,  369,  370,  371,  370,
    371,  765,  368,  371,  369,  388,  388,  370,  373,  373,
    373,  764,  368,  368,  369,  369,  763,  370,  370,  374,
    374,  374,  375,  375,  375,  376,  376,  376,  377,  377,
    377,  378,  378,  378,  379,  379,  379,  385,  385,  385,
    387,  387,  387,  389,  389,  389,  390,  390,  391,  391,
    391,  394,  394,  404,  404,  411,  411,  411,  412,  412,
    412,  413,  413,  413,  414,  414,  414,  415,  415,  415,
    416,  416,  416,  417,  417,  417,  421,  421,  421,  422,
    422,  422,  423,  423,  423,  424,  424,  424,  425,  425,

    425,  426,  426,  426,  427,  427,  427,  434,  455,  455,
    455,  456,  456,  456,  458,  434,  457,  457,  457,  459,
    459,  459,  461,  461,  461,  434,  434,  462,  462,  463,
    463,  463,  464,  464,  465,  465,  465,  467,  467,  467,
    468,  468,  468,  469,  469,  469,  470,  470,  470,  471,
    471,  471,  472,  472,  472,  473,  473,  473,  477,  477,
    477,  478,  478,  478,  479,  479,  479,  480,  480,  480,
    506,  506,  458,  458,  458,  458,  458,  458,  458,  458,
    481,  481,  481,  482,  482,  482,  483,  483,  483,  501,
    501,  501,  502,  502,  502,  503,  503,  503,  509,  509,

    510,  510,  510,  510,  510,  510,  510,  510,  512,  762,
    512,  513,  513,  513,  515,  515,  515,  757,  512,  516,
    516,  517,  517,  517,  518,  518,  621,  621,  512,  512,
    519,  519,  519,  521,  521,  521,  524,  524,  524,  526,
    526,  526,  527,  527,  527,  528,  528,  528,  755,  521,
    623,  623,  524,  529,  529,  529,  530,  530,  530,  531,
    531,  531,  532,  532,  532,  533,  536,  536,  536,  537,
    537,  537,  754,  533,  538,  538,  538,  540,  540,  540,
    541,  541,  541,  533,  533,  542,  542,  542,  543,  543,
    543,  544,  544,  544,  545,  545,  545,  546,  546,  546,

    564,  564,  564,  565,  565,  565,  566,  566,  566,  568,
    568,  568,  569,  569,  569,  570,  570,  570,  587,  587,
    587,  588,  588,  588,  589,  589,  589,  590,  590,  590,
    591,  591,  591,  592,  592,  592,  593,  593,  593,  594,
    594,  594,  595,  595,  595,  596,  596,  596,  598,  598,
    598,  599,  599,  599,  600,  600,  600,  617,  617,  617,
    617,  617,  617,  617,  617,  618,  618,  618,  620,  620,
    620,  622,  622,  622,  624,  624,  624,  626,  628,  627,
    628,  752,  751,  628,  742,  626,  740,  627,  629,  629,
    629,  630,  630,  630,  739,  626,  626,  627,  627,  631,

    631,  631,  632,  632,  632,  633,  633,  633,  634,  634,
    634,  635,  635,  635,  637,  637,  637,  638,  638,  638,
    639,  639,  639,  642,  642,  642,  643,  643,  643,  644,
    644,  644,  676,  676,  676,  677,  677,  677,  678,  678,
    678,  695,  695,  695,  696,  696,  696,  697,  697,  697,
    698,  698,  698,  699,  699,  699,  700,  700,  700,  701,
    701,  701,  702,  705,  705,  705,  706,  706,  706,  737,
    702,  707,  707,  707,  747,  747,  747,  748,  748,  748,
    702,  702,  749,  749,  749,  809,  809,  809,  809,  809,
    809,  809,  809,  809,  810,  810,  810,  810,  810,  810,

    810,  810,  810,  811,  811,  811,  811,  811,  811,  811,
    811,  811,  812,  812,  812,  812,  812,  812,  812,  812,
    812,  813,  813,  813,  813,  813,  813,  813,  813,  813,
    814,  814,  814,  814,  814,  814,  814,  814,  814,  815,
    736,  730,  728,  815,  816,  816,  727,  816,  816,  817,
    725,  724,  817,  722,  721,  720,  817,  818,  719,  718,
    717,  818,  819,  716,  715,  714,  819,  819,  819,  819,
    819,  820,  713,  709,  704,  820,  821,  821,  821,  821,
    821,  821,  821,  821,  822,  822,  822,  822,  822,  822,
    822,  822,  823,  823,  823,  823,  823,  823,  823,  823,

    824,  703,  693,  824,  692,  691,  690,  824,  825,  825,
    825,  825,  825,  825,  689,  825,  825,  826,  826,  688,
    826,  826,  827,  687,  686,  685,  827,  684,  680,  674,
    673,  672,  671,  670,  669,  668,  667,  666,  665,  661,
    659,  657,  656,  655,  654,  653,  652,  651,  650,  649,
    648,  647,  645,  641,  625,  619,  615,  613,  612,  611,
    610,  609,  608,  607,  606,  605,  604,  603,  601,  597,
    585,  583,  582,  581,  580,  579,  578,  577,  576,  575,
    574,  573,  571,  567,  563,  561,  560,  559,  558,  557,
    556,  555,  554,  552,  551,  550,  549,  548,  547,  539,

    535,  534,  525,  523,  520,  514,  511,  508,  505,  500,
    498,  497,  496,  495,  494,  493,  492,  491,  489,  488,
    487,  486,  485,  484,  476,  475,  466,  460,  454,  452,
    451,  450,  449,  448,  447,  446,  445,  443,  442,  441,
    440,  439,  438,  436,  435,  420,  419,  409,  408,  407,
    406,  405,  403,  401,  400,  399,  398,  397,  395,  393,
    392,  386,  384,  381,  367,  361,  358,  357,  354,  347,
    322,  321,  320,  319,  318,  316,  314,  313,  312,  311,
    310,  308,  306,  303,  297,  295,  293,  292,  286,  273,
    272,  271,  270,  269,  267,  265,  264,  263,  262,  261,

    259,  257,  244,  242,  241,  233,  227,  225,  220,  217,
    211,  209,  206,  205,  204,  203,  200,  198,  186,  184,
    182,  176,  173,  168,  166,  160,  158,  156,  152,  150,
    149,  148,  145,  134,  124,  122,  120,  117,  116,  115,
    112,  109,  106,  103,  100,   94,   92,   89,   88,   87,
    86,   83,   81,   75,   69,   67,   65,   63,   60,   59,
    58,   57,   54,   52,   49,   47,   45,   44,   30,   21,
    808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
    808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
    808,  808,  808,  808,  808,  808,  808,  808,  808,  808,

    808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
    808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
    808,  808,  808,  808,  808,  808,  808,  808,  808,  808,
    808,  808,  808,  808,  808,  808,  808,  808
} ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf = 0, *yy_state_ptr = 0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
/*
 *  Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 *  Copyright (C) 2008-2012 - Scilab Enterprises - Bruno JOFRET
 *
 *  This file must be used under the terms of the CeCILL.
 *  This source file is licensed as described in the file COPYING, which
 *  you should have received as part of this distribution.  The terms
 *  are also available at
 *  http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
 *
 */
#include "isatty.hxx"
#include "parse.hxx"
#include "parser_private.hxx"

#include "context.hxx"

extern "C"
{
#include "charEncoding.h"
#include "MALLOC.h"
}

static int matrix_level = 0;
static int comment_level = 0;
static int last_token = 0;
static int exit_status = PARSE_ERROR;
static std::string current_file;
static std::string program_name;

static std::string *pstBuffer;

static bool rejected = false;

#define YY_USER_ACTION                          \
 yylloc.last_column += yyleng;

/* -*- Verbose Special Debug -*- */
//#define DEV
//#define TOKENDEV

#ifdef DEV
#define DEBUG(x) std::cout << "[DEBUG] " << x << std::endl;
#else
#define DEBUG(x) /* Nothing */
#endif

#define INITIAL 0
#define SIMPLESTRING 1
#define DOUBLESTRING 2
#define REGIONCOMMENT 3
#define LINECOMMENT 4
#define LINEBREAK 5
#define MATRIX 6
#define MATRIXMINUSID 7
#define SHELLMODE 8
#define BEGINID 9

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

static void yyunput (int c, char *buf_ptr  );

#ifndef yytext_ptr
static void yy_flex_strncpy (char *, yyconst char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = NULL;

static void yy_push_state (int new_state );

static void yy_pop_state (void );

static int yy_top_state (void );

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
 
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
    register yy_state_type yy_current_state;
    register char * yy_cp, *yy_bp;
    register int yy_act;

    if ( !(yy_init) )
    {
        (yy_init) = 1;

#ifdef YY_USER_INIT
        YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
        {
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
        }
        if ( ! (yy_state_buf) )
        {
            YY_FATAL_ERROR( "out of dynamic memory in yylex()" );
        }

        if ( ! (yy_start) )
        {
            (yy_start) = 1;    /* first start state */
        }

        if ( ! yyin )
        {
            yyin = stdin;
        }

        if ( ! yyout )
        {
            yyout = stdout;
        }

        if ( ! YY_CURRENT_BUFFER )
        {
            yyensure_buffer_stack ();
            YY_CURRENT_BUFFER_LVALUE =
                yy_create_buffer(yyin, YY_BUF_SIZE );
        }

        yy_load_buffer_state( );
    }

    while ( 1 )		/* loops until end-of-file is reached */
    {
        yy_cp = (yy_c_buf_p);

        /* Support of yytext. */
        *yy_cp = (yy_hold_char);

        /* yy_bp points to the position in yy_ch_buf of the start of
         * the current run.
         */
        yy_bp = yy_cp;

        yy_current_state = (yy_start);
        yy_current_state += YY_AT_BOL();

        (yy_state_ptr) = (yy_state_buf);
        *(yy_state_ptr)++ = yy_current_state;

yy_match:
        do
        {
            register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
            while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
            {
                yy_current_state = (int) yy_def[yy_current_state];
                if ( yy_current_state >= 809 )
                {
                    yy_c = yy_meta[(unsigned int) yy_c];
                }
            }
            yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
            *(yy_state_ptr)++ = yy_current_state;
            ++yy_cp;
        }
        while ( yy_base[yy_current_state] != 1771 );

yy_find_action:
        yy_current_state = *--(yy_state_ptr);
        (yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
        for ( ; ; ) /* until we find what rule we matched */
        {
            if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
            {
                yy_act = yy_acclist[(yy_lp)];
                if ( yy_act & YY_TRAILING_HEAD_MASK ||
                        (yy_looking_for_trail_begin) )
                {
                    if ( yy_act == (yy_looking_for_trail_begin) )
                    {
                        (yy_looking_for_trail_begin) = 0;
                        yy_act &= ~YY_TRAILING_HEAD_MASK;
                        break;
                    }
                }
                else if ( yy_act & YY_TRAILING_MASK )
                {
                    (yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
                    (yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
                }
                else
                {
                    (yy_full_match) = yy_cp;
                    (yy_full_state) = (yy_state_ptr);
                    (yy_full_lp) = (yy_lp);
                    break;
                }
                ++(yy_lp);
                goto find_rule;
            }
            --yy_cp;
            yy_current_state = *--(yy_state_ptr);
            (yy_lp) = yy_accept[yy_current_state];
        }

        YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

        switch ( yy_act )
        {
                /* beginning of action switch */
            case 1:
                YY_RULE_SETUP
                {
                    if (last_token != DOT)
                    {
                        ParserSingleInstance::pushControlStatus(Parser::WithinIf);
                    }
                    DEBUG("BEGIN(INITIAL)");
                    BEGIN(INITIAL);
                    return scan_throw(IF);
                }
                YY_BREAK
            case 2:
                YY_RULE_SETUP
                {
                    DEBUG("BEGIN(INITIAL)");
                    BEGIN(INITIAL);
                    return scan_throw(THEN);
                }
                YY_BREAK
            case 3:
                YY_RULE_SETUP
                {
                    if (last_token != DOT)
                    {
                        // Pop to step out IF
                        ParserSingleInstance::popControlStatus();
                        ParserSingleInstance::pushControlStatus(Parser::WithinElse);
                    }
                    DEBUG("BEGIN(INITIAL)");
                    BEGIN(INITIAL);
                    return scan_throw(ELSE);
                }
                YY_BREAK
            case 4:
                YY_RULE_SETUP
                {
                    if (last_token != DOT)
                    {
                        ParserSingleInstance::popControlStatus();
                        ParserSingleInstance::pushControlStatus(Parser::WithinElseIf);
                    }
                    DEBUG("BEGIN(INITIAL)");
                    BEGIN(INITIAL);
                    return scan_throw(ELSEIF);
                }
                YY_BREAK
            case 5:
                YY_RULE_SETUP
                {
                    if (last_token != DOT)
                    {
                        ParserSingleInstance::popControlStatus();
                    }
                    DEBUG("BEGIN(INITIAL)");
                    BEGIN(INITIAL);
                    return scan_throw(END);
                }
                YY_BREAK
            case 6:
                YY_RULE_SETUP
                {
                    if (last_token != DOT)
                    {
                        ParserSingleInstance::pushControlStatus(Parser::WithinSelect);
                    }
                    DEBUG("BEGIN(INITIAL)");
                    BEGIN(INITIAL);
                    return scan_throw(SELECT);
                }
                YY_BREAK
            case 7:
                YY_RULE_SETUP
                {
                    if (last_token != DOT)
                    {
                        ParserSingleInstance::pushControlStatus(Parser::WithinSwitch);
                    }
                    DEBUG("BEGIN(INITIAL)");
                    BEGIN(INITIAL);
                    return scan_throw(SWITCH);
                }
                YY_BREAK
            case 8:
                YY_RULE_SETUP
                {
                    if (last_token != DOT)
                    {
                        ParserSingleInstance::popControlStatus();
                        ParserSingleInstance::pushControlStatus(Parser::WithinOtherwise);
                    }
                    DEBUG("BEGIN(INITIAL)");
                    BEGIN(INITIAL);
                    return scan_throw(OTHERWISE);
                }
                YY_BREAK
            case 9:
                YY_RULE_SETUP
                {
                    if (last_token != DOT)
                    {
                        ParserSingleInstance::popControlStatus();
                        ParserSingleInstance::pushControlStatus(Parser::WithinCase);
                    }
                    DEBUG("BEGIN(INITIAL)");
                    BEGIN(INITIAL);
                    return scan_throw(CASE);
                }
                YY_BREAK
            case 10:
                YY_RULE_SETUP
                {
                    if (last_token != DOT)
                    {
                        ParserSingleInstance::pushControlStatus(Parser::WithinFunction);
                    }
                    DEBUG("BEGIN(INITIAL)");
                    BEGIN(INITIAL);
                    return scan_throw(FUNCTION);
                }
                YY_BREAK
            case 11:
                YY_RULE_SETUP
                {
                    if (last_token != DOT)
                    {
                        ParserSingleInstance::popControlStatus();
                    }
                    DEBUG("BEGIN(INITIAL)");
                    BEGIN(INITIAL);
                    return scan_throw(ENDFUNCTION);
                }
                YY_BREAK
            case 12:
                YY_RULE_SETUP
                {
                    if (last_token != DOT)
                    {
                        ParserSingleInstance::pushControlStatus(Parser::WithinFunction);
                    }
                    DEBUG("BEGIN(INITIAL)");
                    BEGIN(INITIAL);
                    return scan_throw(HIDDENFUNCTION);
                }
                YY_BREAK
            case 13:
                YY_RULE_SETUP
                {
                    DEBUG("BEGIN(INITIAL)");
                    BEGIN(INITIAL);
                    return scan_throw(HIDDEN);
                }
                YY_BREAK
            case 14:
                YY_RULE_SETUP
                {
                    if (last_token != DOT)
                    {
                        ParserSingleInstance::pushControlStatus(Parser::WithinFor);
                    }
                    BEGIN(INITIAL);
                    return scan_throw(FOR);
                }
                YY_BREAK
            case 15:
                YY_RULE_SETUP
                {
                    if (last_token != DOT)
                    {
                        ParserSingleInstance::pushControlStatus(Parser::WithinWhile);
                    }
                    BEGIN(INITIAL);
                    return scan_throw(WHILE);
                }
                YY_BREAK
            case 16:
                YY_RULE_SETUP
                {
                    BEGIN(INITIAL);
                    return scan_throw(DO);
                }
                YY_BREAK
            case 17:
                YY_RULE_SETUP
                {
                    BEGIN(INITIAL);
                    return scan_throw(BREAK);
                }
                YY_BREAK
            case 18:
                YY_RULE_SETUP
                {
                    BEGIN(INITIAL);
                    return scan_throw(CONTINUE);
                }
                YY_BREAK
            case 19:
                YY_RULE_SETUP
                {
                    ParserSingleInstance::pushControlStatus(Parser::WithinTry);
                    BEGIN(INITIAL);
                    return scan_throw(TRY);
                }
                YY_BREAK
            case 20:
                YY_RULE_SETUP
                {
                    // Pop to step out TRY
                    ParserSingleInstance::popControlStatus();
                    ParserSingleInstance::pushControlStatus(Parser::WithinCatch);
                    BEGIN(INITIAL);
                    return scan_throw(CATCH);
                }
                YY_BREAK
            case 21:
                YY_RULE_SETUP
                {
                    BEGIN(INITIAL);
                    return scan_throw(RETURN);
                }
                YY_BREAK
            case 22:
                YY_RULE_SETUP
                {
                    BEGIN(INITIAL);
                    return scan_throw(RETURN);
                }
                YY_BREAK
            case 23:
                /* rule 23 can match eol */
                YY_RULE_SETUP
                {
                    BEGIN(BEGINID);
                }
                YY_BREAK

            case 24:
                YY_RULE_SETUP
                {
                    wchar_t *pwText = to_wide_string(yytext);
                    if (yytext != NULL && pwText == NULL)
                    {
                        std::string str = "can not convert'";
                        str += yytext;
                        str += "' to UTF-8";
                        exit_status = SCAN_ERROR;
                        scan_error("can not convert string to UTF-8");
                    }
                    yylval.str = new std::wstring(pwText);
                    if (symbol::Context::getInstance()->get(*new symbol::Symbol(*yylval.str)) != NULL
                    && symbol::Context::getInstance()->get(*new symbol::Symbol(*yylval.str))->isCallable())
                    {
                        scan_throw(ID);
                        BEGIN(SHELLMODE);
                    }
                    else
                    {
                        BEGIN(INITIAL);
                        return scan_throw(ID);
                    }
                }
                YY_BREAK

            case 25:
                YY_RULE_SETUP
                {
                    return scan_throw(NOT);
                }
                YY_BREAK
            case 26:
                YY_RULE_SETUP
                {
                    return scan_throw(DOLLAR);
                }
                YY_BREAK
            case 27:
                YY_RULE_SETUP
                {
                    return scan_throw(BOOLTRUE);
                }
                YY_BREAK
            case 28:
                YY_RULE_SETUP
                {
                    return scan_throw(BOOLFALSE);
                }
                YY_BREAK
            case 29:
                YY_RULE_SETUP
                {
                    return scan_throw(AND);
                }
                YY_BREAK
            case 30:
                YY_RULE_SETUP
                {
                    return scan_throw(ANDAND);
                }
                YY_BREAK
            case 31:
                YY_RULE_SETUP
                {
                    return scan_throw(OR);
                }
                YY_BREAK
            case 32:
                YY_RULE_SETUP
                {
                    return scan_throw(OROR);
                }
                YY_BREAK
            case 33:
                YY_RULE_SETUP
                {
                    return scan_throw(LPAREN);
                }
                YY_BREAK
            case 34:
                YY_RULE_SETUP
                {
                    return scan_throw(RPAREN);
                }
                YY_BREAK
            case 35:
                YY_RULE_SETUP
                {
                    scan_step();
                    return scan_throw(SEMI);
                }
                YY_BREAK
            case 36:
                YY_RULE_SETUP
                {
                    scan_step();
                    return scan_throw(COMMA);
                }
                YY_BREAK
            case 37:
                YY_RULE_SETUP
                {
                    return scan_throw(COLON);
                }
                YY_BREAK
            case 38:
                YY_RULE_SETUP
                {
                    yy_push_state(MATRIX);
                    ParserSingleInstance::pushControlStatus(Parser::WithinCell);
                    return scan_throw(LBRACE);
                }
                YY_BREAK
            case 39:
                YY_RULE_SETUP
                {
                    return scan_throw(RBRACE);
                }
                YY_BREAK
            case 40:
                YY_RULE_SETUP
                {
                    return scan_throw(DOTQUOTE);
                }
                YY_BREAK
            case 41:
                YY_RULE_SETUP
                {
                    return scan_throw(DOTTIMES);
                }
                YY_BREAK
            case 42:
                YY_RULE_SETUP
                {
                    return scan_throw(DOTRDIVIDE);
                }
                YY_BREAK
            case 43:
                YY_RULE_SETUP
                {
                    return scan_throw(DOTLDIVIDE);
                }
                YY_BREAK
            case 44:
                YY_RULE_SETUP
                {
                    return scan_throw(DOTPOWER);
                }
                YY_BREAK
            case 45:
                YY_RULE_SETUP
                {
                    return scan_throw(MINUS);
                }
                YY_BREAK
            case 46:
                YY_RULE_SETUP
                {
                    return scan_throw(PLUS);
                }
                YY_BREAK
            case 47:
                YY_RULE_SETUP
                {
                    return scan_throw(TIMES);
                }
                YY_BREAK
            case 48:
                YY_RULE_SETUP
                {
                    return scan_throw(RDIVIDE);
                }
                YY_BREAK
            case 49:
                YY_RULE_SETUP
                {
                    return scan_throw(LDIVIDE);
                }
                YY_BREAK
            case 50:
                YY_RULE_SETUP
                {
                    return scan_throw(POWER);
                }
                YY_BREAK
            case 51:
                YY_RULE_SETUP
                {
                    return scan_throw(KRONTIMES);
                }
                YY_BREAK
            case 52:
                YY_RULE_SETUP
                {
                    return scan_throw(KRONRDIVIDE);
                }
                YY_BREAK
            case 53:
                YY_RULE_SETUP
                {
                    return scan_throw(KRONLDIVIDE);
                }
                YY_BREAK
            case 54:
                /* rule 54 can match eol */
                YY_RULE_SETUP
                {
                    unput(yytext[yyleng - 1]);
                    return scan_throw(CONTROLTIMES);
                }
                YY_BREAK
            case 55:
                /* rule 55 can match eol */
                YY_RULE_SETUP
                {
                    unput(yytext[yyleng - 1]);
                    return scan_throw(CONTROLRDIVIDE);
                }
                YY_BREAK
            case 56:
                /* rule 56 can match eol */
                YY_RULE_SETUP
                {
                    unput(yytext[yyleng - 1]);
                    return scan_throw(CONTROLLDIVIDE);
                }
                YY_BREAK
            case 57:
                YY_RULE_SETUP
                {
                    return scan_throw(EQ);
                }
                YY_BREAK
            case 58:
                YY_RULE_SETUP
                {
                    return scan_throw(NE);
                }
                YY_BREAK
            case 59:
                YY_RULE_SETUP
                {
                    return scan_throw(LT);
                }
                YY_BREAK
            case 60:
                YY_RULE_SETUP
                {
                    return scan_throw(GT);
                }
                YY_BREAK
            case 61:
                YY_RULE_SETUP
                {
                    return scan_throw(LE);
                }
                YY_BREAK
            case 62:
                YY_RULE_SETUP
                {
                    return scan_throw(GE);
                }
                YY_BREAK
            case 63:
                YY_RULE_SETUP
                {
                    return scan_throw(ASSIGN);
                }
                YY_BREAK
            case 64:
                YY_RULE_SETUP
                {
                    DEBUG("yy_push_state(MATRIX)");
                    yy_push_state(MATRIX);
                    ParserSingleInstance::pushControlStatus(Parser::WithinMatrix);
                    return scan_throw(LBRACK);
                }
                YY_BREAK
            case 65:
                YY_RULE_SETUP
                {
                    return scan_throw(RBRACK);
                }
                YY_BREAK
            case 66:
                YY_RULE_SETUP
                {
                    return scan_throw(DOT);
                }
                YY_BREAK
            case 67:
                YY_RULE_SETUP
                {
                    ParserSingleInstance::pushControlStatus(Parser::WithinDots);
                    yy_push_state(LINEBREAK);
                }
                YY_BREAK
            case 68:
                YY_RULE_SETUP
                {
                    yylval.number = atof(yytext);
#ifdef TOKENDEV
                    std::cout << "--> [DEBUG] INTEGER : " << yytext << std::endl;
#endif
                    //  scan_step();
                    return scan_throw(VARINT);
                }
                YY_BREAK
            case 69:
                YY_RULE_SETUP
                {
                    scan_exponent_convert(yytext);
                    yylval.number = atof(yytext);
#ifdef TOKENDEV
                    std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
                    scan_step();
                    return scan_throw(VARFLOAT);
                }
                YY_BREAK
            case 70:
                YY_RULE_SETUP
                {
                    yylval.number = atof(yytext);
#ifdef TOKENDEV
                    std::cout << "--> [DEBUG] NUMBER : " << yytext << std::endl;
#endif
                    //  scan_step();
                    return scan_throw(NUM);
                }
                YY_BREAK
            case 71:
                YY_RULE_SETUP
                {
                    yylval.number = atof(yytext);
#ifdef TOKENDEV
                    std::cout << "--> [DEBUG] LITTLE : " << yytext << std::endl;
#endif
                    scan_step();
                    return scan_throw(NUM);
                }
                YY_BREAK
            case 72:
                YY_RULE_SETUP
                {
                    wchar_t *pwText = to_wide_string(yytext);
                    if (yytext != NULL && pwText == NULL)
                    {
                        std::string str = "can not convert'";
                        str += yytext;
                        str += "' to UTF-8";
                        exit_status = SCAN_ERROR;
                        scan_error("can not convert string to UTF-8");
                    }
                    yylval.str = new std::wstring(pwText);
#ifdef TOKENDEV
                    std::cout << "--> [DEBUG] ID : " << yytext << std::endl;
#endif
                    //  scan_step();
                    return scan_throw(ID);
                }
                YY_BREAK
            case 73:
                YY_RULE_SETUP
                {
                    yylval.comment = new std::wstring();
                    comment_level = 1;
                    ParserSingleInstance::pushControlStatus(Parser::WithinBlockComment);
                    yy_push_state(REGIONCOMMENT);
                }
                YY_BREAK
            case 74:
                YY_RULE_SETUP
                {
                    pstBuffer = new std::string();
                    yy_push_state(LINECOMMENT);
                }
                YY_BREAK
            case 75:
                YY_RULE_SETUP
                {
                    pstBuffer = new std::string();
                    yy_push_state(DOUBLESTRING);
                }
                YY_BREAK
            case 76:
                YY_RULE_SETUP
                {
                    /*
                    ** Matrix Transposition special behaviour
                    ** ID' []' toto()' are transposition call
                    */
                    if (last_token == ID
                    || last_token == RBRACK
                    || last_token == RPAREN
                    || last_token == RBRACE
                    || last_token == VARINT
                    || last_token == VARFLOAT
                    || last_token == NUM
                    || last_token == BOOLTRUE
                    || last_token == BOOLFALSE)
                    {
                        return scan_throw(QUOTE);
                    }
                    else
                    {
                        pstBuffer = new std::string();
                        yy_push_state(SIMPLESTRING);
                    }
                }
                YY_BREAK
            case 77:
                YY_RULE_SETUP
                {
                    scan_step();
                    scan_throw(SPACES);
                }
                YY_BREAK
            case 78:
                /* rule 78 can match eol */
                YY_RULE_SETUP
                {
                    yylloc.last_line += 1;
                    yylloc.last_column = 1;
                    scan_step();
                    if (last_token != EOL)
                    {
                        return scan_throw(EOL);
                    }

                }
                YY_BREAK
            case 79:
                /* rule 79 can match eol */
                YY_RULE_SETUP
                {
                    yylloc.last_line += 1;
                    yylloc.last_column = 1;
                    scan_step();
                    if (last_token != EOL)
                    {
                        return scan_throw(EOL);
                    }
                    scan_throw(EOL);
                }
                YY_BREAK
            case 80:
                /* rule 80 can match eol */
                YY_RULE_SETUP
                {
                    yylloc.last_line += 2;
                    yylloc.last_column = 1;
                    scan_step();
                    if (last_token != EOL)
                    {
                        return scan_throw(EOL);
                    }
                    scan_throw(EOL);
                }
                YY_BREAK
            case 81:
                YY_RULE_SETUP
                {
                    std::string str = "unexpected token '";
                    str += yytext;
                    str += "'";
                    exit_status = SCAN_ERROR;
                    scan_error(str);
                }
                YY_BREAK

            case 82:
                YY_RULE_SETUP
                {
                    unput(yytext[yyleng - 1]);
                    if (last_token == ID
                    || last_token == RPAREN
                    || last_token == QUOTE
                    || last_token == VARINT
                    || last_token == VARFLOAT
                    || last_token == NUM)
                    {
                        return scan_throw(COMMA);
                    }
                }
                YY_BREAK
            case 83:
                YY_RULE_SETUP
                {
                    return scan_throw(COLON);
                }
                YY_BREAK
            case 84:
                /* rule 84 can match eol */
                YY_RULE_SETUP
                {
                    yylloc.last_line += 1;
                    yylloc.last_column = 1;
                    if (last_token != DOTS && last_token != EOL)
                    {
                        return scan_throw(EOL);
                    }
                    scan_throw(EOL);
                }
                YY_BREAK
            case 85:
                YY_RULE_SETUP
                {
                    DEBUG("yy_pop_state()");
                    yy_pop_state();
                    ParserSingleInstance::popControlStatus();
                    return scan_throw(RBRACK);
                }
                YY_BREAK
            case 86:
                YY_RULE_SETUP
                {
                    yy_pop_state();
                    ParserSingleInstance::popControlStatus();
                    return scan_throw(RBRACE);
                }
                YY_BREAK
            case 87:
                YY_RULE_SETUP
                {
                    return scan_throw(PLUS);
                }
                YY_BREAK
            case 88:
                YY_RULE_SETUP
                {
                    return scan_throw(MINUS);
                }
                YY_BREAK
            case 89:
                YY_RULE_SETUP
                {
                    int i;
                    for (i = yyleng - 1 ; i >= 0 ; --i)
                    {
                        unput(yytext[i]);
                    }
                    yy_push_state(MATRIXMINUSID);
                    if (last_token != LBRACK
                    && last_token != EOL
                    && last_token != SEMI)
                    {
                        return scan_throw(COMMA);
                    }
                }
                YY_BREAK
            case 90:
                YY_RULE_SETUP
                {
                    int i;
                    for (i = yyleng - 1 ; i >= 0 ; --i)
                    {
                        unput(yytext[i]);
                    }
                    yy_push_state(MATRIXMINUSID);
                    if (last_token != LBRACK
                    && last_token != EOL
                    && last_token != SEMI)
                    {
                        return scan_throw(COMMA);
                    }
                }
                YY_BREAK
            case 91:
                YY_RULE_SETUP
                {
                    int i;
                    for (i = yyleng - 1 ; i >= 0 ; --i)
                    {
                        unput(yytext[i]);
                    }
                    yy_push_state(MATRIXMINUSID);
                    if (last_token != LBRACK
                    && last_token != EOL
                    && last_token != SEMI)
                    {
                        return scan_throw(COMMA);
                    }
                }
                YY_BREAK
            case 92:
                YY_RULE_SETUP
                {
                    int i;
                    for (i = yyleng - 1 ; i >= 0 ; --i)
                    {
                        unput(yytext[i]);
                    }
                    yy_push_state(MATRIXMINUSID);
                    if (last_token != LBRACK
                    && last_token != EOL
                    && last_token != SEMI)
                    {
                        return scan_throw(COMMA);
                    }
                }
                YY_BREAK
            case 93:
                YY_RULE_SETUP
                {
                    int i;
                    for (i = yyleng - 1 ; i >= 0 ; --i)
                    {
                        unput(yytext[i]);
                    }
                    yy_push_state(MATRIXMINUSID);
                    if (last_token != LBRACK
                    && last_token != EOL
                    && last_token != SEMI
                       )
                    {
                        return scan_throw(COMMA);
                    }
                }
                YY_BREAK
            case 94:
                YY_RULE_SETUP
                {
                    std::string str = "unexpected token '";
                    str += yytext;
                    str += "' within a matrix.";
                    exit_status = SCAN_ERROR;
                    scan_error(str);
                }
                YY_BREAK
            case 95:
                /* rule 95 can match eol */
                YY_RULE_SETUP
                {
                    /* Just do nothing */
                    yylloc.last_line += 1;
                    yylloc.last_column = 1;
                    scan_step();
                    scan_throw(EOL);
                }
                YY_BREAK
            case 96:
                YY_RULE_SETUP
                {
                    /* Just do nothing */
                    pstBuffer = new std::string();
                    yy_push_state(LINECOMMENT);
                    scan_throw(DOTS);
                }
                YY_BREAK
            case YY_STATE_EOF(MATRIX):
            {
                yy_pop_state();
            }
            YY_BREAK

            case 97:
                YY_RULE_SETUP
                {
                    return scan_throw(MINUS);
                }
                YY_BREAK
            case 98:
                YY_RULE_SETUP
                {
                    /* Do Nothing. */
                }
                YY_BREAK
            case 99:
                YY_RULE_SETUP
                {
                    yy_pop_state();
                    yylval.number = atof(yytext);
#ifdef TOKENDEV
                    std::cout << "--> [DEBUG] INTEGER : " << yytext << std::endl;
#endif
                    scan_step();
                    return scan_throw(VARINT);
                }
                YY_BREAK
            case 100:
                YY_RULE_SETUP
                {
                    yy_pop_state();
                    yylval.number = atof(yytext);
#ifdef TOKENDEV
                    std::cout << "--> [DEBUG] NUMBER : " << yytext << std::endl;
#endif
                    scan_step();
                    return scan_throw(NUM);
                }
                YY_BREAK
            case 101:
                YY_RULE_SETUP
                {
                    yy_pop_state();
                    yylval.number = atof(yytext);
#ifdef TOKENDEV
                    std::cout << "--> [DEBUG] LITTLE : " << yytext << std::endl;
#endif
                    scan_step();
                    return scan_throw(NUM);
                }
                YY_BREAK
            case 102:
                YY_RULE_SETUP
                {
                    yy_pop_state();
                    scan_exponent_convert(yytext);
                    yylval.number = atof(yytext);
#ifdef TOKENDEV
                    std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
                    scan_step();
                    return scan_throw(VARFLOAT);
                }
                YY_BREAK
            case 103:
                YY_RULE_SETUP
                {
                    yy_pop_state();
                    wchar_t* pwText = to_wide_string(yytext);
                    if (yytext != NULL && pwText == NULL)
                    {
                        std::string str = "can not convert'";
                        str += yytext;
                        str += "' to UTF-8";
                        exit_status = SCAN_ERROR;
                        scan_error("can not convert string to UTF-8");
                    }
                    yylval.str = new std::wstring(pwText);
#ifdef TOKENDEV
                    std::cout << "--> [DEBUG] ID : " << yytext << std::endl;
#endif
                    scan_step();
                    return scan_throw(ID);
                }
                YY_BREAK
            case 104:
                YY_RULE_SETUP
                {
                    /* Do Nothing. */
                }
                YY_BREAK
            case 105:
                YY_RULE_SETUP
                {
                    std::string str = "unexpected token '";
                    str += yytext;
                    str += "' within a matrix.";
                    exit_status = SCAN_ERROR;
                    scan_error(str);
                }
                YY_BREAK

            case 106:
                /* rule 106 can match eol */
                YY_RULE_SETUP
                {
                    yylloc.last_line += 1;
                    yylloc.last_column = 1;
                    scan_step();
                    yy_pop_state();
                    ParserSingleInstance::popControlStatus();
                }
                YY_BREAK
            case 107:
                YY_RULE_SETUP
                {
                    ++comment_level;
                    yy_push_state(REGIONCOMMENT);
                }
                YY_BREAK
            case 108:
                YY_RULE_SETUP
                {
                    scan_throw(DOTS);
                    pstBuffer = new std::string();
                    yy_push_state(LINECOMMENT);
                }
                YY_BREAK
            case 109:
                YY_RULE_SETUP
                {
                    /* Do nothing... */
                }
                YY_BREAK
            case YY_STATE_EOF(LINEBREAK):
            {
                yy_pop_state();
            }
            YY_BREAK
            case 110:
                YY_RULE_SETUP
                {
                    std::string str = "unexpected token '";
                    str += yytext;
                    str += "' after line break with .. or ...";
                    exit_status = SCAN_ERROR;
                    scan_error(str);
                }
                YY_BREAK

            case 111:
                /* rule 111 can match eol */
                YY_RULE_SETUP
                {
                    //yylloc.last_line += 1;
                    //yylloc.last_column = 1;
                    //scan_step();
                    yy_pop_state();
                    for (int i = yyleng - 1 ; i >= 0 ; --i)
                    {
                        //std::cerr << "Unputting i = {" << i << "}" << std::endl;
                        //std::cerr << "Unputting {" << yytext[i] << "}" << std::endl;
                        unput(yytext[i]);
                        yylloc.last_column--;
                    }
                    /*
                    ** To forgot comments after lines break
                    */
                    if (last_token != DOTS)
                    {
                        //std::cerr << "pstBuffer = {" << *pstBuffer << "}" << std::endl;
                        //std::cerr << "pstBuffer->c_str() = {" << pstBuffer->c_str() << "}" << std::endl;
                        wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
                        //std::wcerr << L"pwstBuffer = W{" << pwstBuffer << L"}" << std::endl;
                        if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
                        {
                            std::string str = "can not convert'";
                            str += pstBuffer->c_str();
                            str += "' to UTF-8";
                            exit_status = SCAN_ERROR;
                            scan_error("can not convert string to UTF-8");
                        }
                        yylval.comment = new std::wstring(pwstBuffer);
                        delete pstBuffer;
                        FREE (pwstBuffer);
                        return scan_throw(COMMENT);
                    }
                }
                YY_BREAK
            case YY_STATE_EOF(LINECOMMENT):
            {
                yy_pop_state();
                wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
                if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
                {
                    std::string str = "can not convert'";
                    str += pstBuffer->c_str();
                    str += "' to UTF-8";
                    exit_status = SCAN_ERROR;
                    scan_error("can not convert string to UTF-8");
                }
                yylval.comment = new std::wstring(pwstBuffer);
                delete pstBuffer;
                FREE (pwstBuffer);
                return scan_throw(COMMENT);
            }
            YY_BREAK
            case 112:
                YY_RULE_SETUP
                {
                    // Put the char in a temporary CHAR buffer to go through UTF-8 trouble
                    // only translate to WCHAR_T when popping state.
                    *pstBuffer += yytext;
                }
                YY_BREAK

            case 113:
                YY_RULE_SETUP
                {
                    --comment_level;
                    if (comment_level == 0)
                    {
                        ParserSingleInstance::popControlStatus();
                        yy_pop_state();
                        //return scan_throw(BLOCKCOMMENT);
                    }
                }
                YY_BREAK
            case 114:
                YY_RULE_SETUP
                {
                    ++comment_level;
                    yy_push_state(REGIONCOMMENT);
                }
                YY_BREAK
            case 115:
                /* rule 115 can match eol */
                YY_RULE_SETUP
                {
                    yylloc.last_line += 1;
                    yylloc.last_column = 1;
                    scan_step();
                    *yylval.comment += L"\n//";
                }
                YY_BREAK
            case 116:
                YY_RULE_SETUP
                {
                    *yylval.comment += std::wstring(to_wide_string(yytext));
                }
                YY_BREAK
            case YY_STATE_EOF(REGIONCOMMENT):
            {
                yy_pop_state();
                //    std::string str = "unexpected end of file in a comment";
                //    exit_status = SCAN_ERROR;
                //    scan_error(str);
            }
            YY_BREAK

            case 117:
                YY_RULE_SETUP
                {
                    *pstBuffer += "\"";
                }
                YY_BREAK
            case 118:
                YY_RULE_SETUP
                {
                    *pstBuffer += "'";
                }
                YY_BREAK
            case 119:
                YY_RULE_SETUP
                {
                    *pstBuffer += "\"";
                }
                YY_BREAK
            case 120:
                YY_RULE_SETUP
                {
                    *pstBuffer += "'";
                }
                YY_BREAK
            case 121:
                YY_RULE_SETUP
                {
                    yy_pop_state();
                    scan_step();
                    wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
                    if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
                    {
                        std::string str = "can not convert'";
                        str += pstBuffer->c_str();
                        str += "' to UTF-8";
                        exit_status = SCAN_ERROR;
                        scan_error("can not convert string to UTF-8");
                    }
                    yylval.str = new std::wstring(pwstBuffer);
                    delete pstBuffer;
                    FREE(pwstBuffer);
                    return scan_throw(STR);
                }
                YY_BREAK
            case 122:
                YY_RULE_SETUP
                {
                    std::string str = "Heterogeneous string detected, starting with ' and ending with \".";
                    exit_status = SCAN_ERROR;
                    scan_error(str);
                }
                YY_BREAK
            case 123:
                /* rule 123 can match eol */
                YY_RULE_SETUP
                {
                    /* Do nothing... Just skip */
                }
                YY_BREAK
            case 124:
                /* rule 124 can match eol */
                YY_RULE_SETUP
                {
                    std::string str = "unexpected end of line in a string.";
                    exit_status = SCAN_ERROR;
                    scan_error(str);
                    yylloc.last_line += 1;
                    yylloc.last_column = 1;
                }
                YY_BREAK
            case YY_STATE_EOF(SIMPLESTRING):
            {
                std::string str = "unexpected end of file in a string.";
                exit_status = SCAN_ERROR;
                scan_error(str);
            }
            YY_BREAK
            case 125:
                YY_RULE_SETUP
                {
                    scan_step();
                    *pstBuffer += yytext;
                }
                YY_BREAK

            case 126:
                YY_RULE_SETUP
                {
                    *pstBuffer += "\"";
                }
                YY_BREAK
            case 127:
                YY_RULE_SETUP
                {
                    *pstBuffer += "'";
                }
                YY_BREAK
            case 128:
                YY_RULE_SETUP
                {
                    *pstBuffer += "\"";
                }
                YY_BREAK
            case 129:
                YY_RULE_SETUP
                {
                    *pstBuffer += "'";
                }
                YY_BREAK
            case 130:
                YY_RULE_SETUP
                {
                    yy_pop_state();
                    scan_step();
                    wchar_t *pwstBuffer = to_wide_string(pstBuffer->c_str());
                    if (pstBuffer->c_str() != NULL && pwstBuffer == NULL)
                    {
                        std::string str = "can not convert'";
                        str += pstBuffer->c_str();
                        str += "' to UTF-8";
                        exit_status = SCAN_ERROR;
                        scan_error("can not convert string to UTF-8");
                    }
                    yylval.str = new std::wstring(pwstBuffer);
                    delete pstBuffer;
                    FREE(pwstBuffer);
                    return scan_throw(STR);
                }
                YY_BREAK
            case 131:
                YY_RULE_SETUP
                {
                    std::string str = "Heterogeneous string detected, starting with \" and ending with '.";
                    exit_status = SCAN_ERROR;
                    scan_error(str);
                }
                YY_BREAK
            case 132:
                /* rule 132 can match eol */
                YY_RULE_SETUP
                {
                    /* Do nothing... Just skip */
                }
                YY_BREAK
            case 133:
                /* rule 133 can match eol */
                YY_RULE_SETUP
                {
                    std::string str = "unexpected end of line in a string";
                    exit_status = SCAN_ERROR;
                    scan_error(str);
                    yylloc.last_line += 1;
                    yylloc.last_column = 1;
                }
                YY_BREAK
            case YY_STATE_EOF(DOUBLESTRING):
            {
                std::string str = "unexpected end of file in a string";
                exit_status = SCAN_ERROR;
                scan_error(str);
            }
            YY_BREAK
            case 134:
                YY_RULE_SETUP
                {
                    scan_step();
                    *pstBuffer += yytext;
                }
                YY_BREAK

            case 135:
                YY_RULE_SETUP
                {
                    if (last_token == ID)
                    {
                        scan_throw(SPACES);
                        return ID;
                    }
                }
                YY_BREAK
            case 136:
                YY_RULE_SETUP
                {
                    BEGIN(INITIAL);
                    scan_step();
                    return scan_throw(SEMI);
                }
                YY_BREAK
            case 137:
                YY_RULE_SETUP
                {
                    BEGIN(INITIAL);
                    scan_step();
                    return scan_throw(COMMA);
                }
                YY_BREAK
            case 138:
                /* rule 138 can match eol */
                YY_RULE_SETUP
                {
                    BEGIN(INITIAL);
                    yylloc.last_line += 1;
                    yylloc.last_column = 1;
                    scan_step();
                    return scan_throw(EOL);
                }
                YY_BREAK
            case 139:
                YY_RULE_SETUP
                {
                    if (last_token == STR)
                    {
                        yylval.str = new std::wstring(to_wide_string(yytext));
                        return scan_throw(STR);
                    }
                    else
                    {
                        BEGIN(INITIAL);
                        return scan_throw(ASSIGN);
                    }
                }
                YY_BREAK
            case 140:
                YY_RULE_SETUP
                {
                    if (last_token == STR)
                    {
                        yylval.str = new std::wstring(to_wide_string(yytext));
                        return scan_throw(STR);
                    }
                    else
                    {
                        BEGIN(INITIAL);
                        return scan_throw(LPAREN);
                    }
                }
                YY_BREAK
            case 141:
                YY_RULE_SETUP
                {
                    if (last_token == STR)
                    {
                        yylval.str = new std::wstring(to_wide_string(yytext));
                        return scan_throw(STR);
                    }
                    else
                    {
                        BEGIN(INITIAL);
                        return scan_throw(LT);
                    }
                }
                YY_BREAK
            case 142:
                YY_RULE_SETUP
                {
                    if (last_token == STR)
                    {
                        yylval.str = new std::wstring(to_wide_string(yytext));
                        return scan_throw(STR);
                    }
                    else
                    {
                        BEGIN(INITIAL);
                        return scan_throw(GT);
                    }
                }
                YY_BREAK
            case 143:
                YY_RULE_SETUP
                {
                    if (last_token == STR)
                    {
                        yylval.str = new std::wstring(to_wide_string(yytext));
                        return scan_throw(STR);
                    }
                    else
                    {
                        BEGIN(INITIAL);
                        return scan_throw(NOT);
                    }
                }
                YY_BREAK
            case 144:
                YY_RULE_SETUP
                {
                    yylval.str = new std::wstring(to_wide_string(yytext));
                    return scan_throw(STR);
                }
                YY_BREAK
            case YY_STATE_EOF(SHELLMODE):
            {
                BEGIN(INITIAL);
            }
            YY_BREAK

            case 145:
                YY_RULE_SETUP
                ECHO;
                YY_BREAK
            case YY_STATE_EOF(INITIAL):
            case YY_STATE_EOF(MATRIXMINUSID):
            case YY_STATE_EOF(BEGINID):
                yyterminate();

            case YY_END_OF_BUFFER:
            {
                /* Amount of text matched not including the EOB char. */
                int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

                /* Undo the effects of YY_DO_BEFORE_ACTION. */
                *yy_cp = (yy_hold_char);
                YY_RESTORE_YY_MORE_OFFSET

                if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
                {
                    /* We're scanning a new file or input source.  It's
                     * possible that this happened because the user
                     * just pointed yyin at a new source and called
                     * yylex().  If so, then we have to assure
                     * consistency between YY_CURRENT_BUFFER and our
                     * globals.  Here is the right place to do so, because
                     * this is the first action (other than possibly a
                     * back-up) that will match for the new input source.
                     */
                    (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
                    YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
                    YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
                }

                /* Note that here we test for yy_c_buf_p "<=" to the position
                 * of the first EOB in the buffer, since yy_c_buf_p will
                 * already have been incremented past the NUL character
                 * (since all states make transitions on EOB to the
                 * end-of-buffer state).  Contrast this with the test
                 * in input().
                 */
                if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
                {
                    /* This was really a NUL. */
                    yy_state_type yy_next_state;

                    (yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

                    yy_current_state = yy_get_previous_state(  );

                    /* Okay, we're now positioned to make the NUL
                     * transition.  We couldn't have
                     * yy_get_previous_state() go ahead and do it
                     * for us because it doesn't know how to deal
                     * with the possibility of jamming (and we don't
                     * want to build jamming into it because then it
                     * will run more slowly).
                     */

                    yy_next_state = yy_try_NUL_trans( yy_current_state );

                    yy_bp = (yytext_ptr) + YY_MORE_ADJ;

                    if ( yy_next_state )
                    {
                        /* Consume the NUL. */
                        yy_cp = ++(yy_c_buf_p);
                        yy_current_state = yy_next_state;
                        goto yy_match;
                    }

                    else
                    {
                        yy_cp = (yy_c_buf_p);
                        goto yy_find_action;
                    }
                }

                else switch ( yy_get_next_buffer(  ) )
                    {
                        case EOB_ACT_END_OF_FILE:
                        {
                            (yy_did_buffer_switch_on_eof) = 0;

                            if ( yywrap( ) )
                            {
                                /* Note: because we've taken care in
                                 * yy_get_next_buffer() to have set up
                                 * yytext, we can now set up
                                 * yy_c_buf_p so that if some total
                                 * hoser (like flex itself) wants to
                                 * call the scanner after we return the
                                 * YY_NULL, it'll still work - another
                                 * YY_NULL will get returned.
                                 */
                                (yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

                                yy_act = YY_STATE_EOF(YY_START);
                                goto do_action;
                            }

                            else
                            {
                                if ( ! (yy_did_buffer_switch_on_eof) )
                                {
                                    YY_NEW_FILE;
                                }
                            }
                            break;
                        }

                        case EOB_ACT_CONTINUE_SCAN:
                            (yy_c_buf_p) =
                                (yytext_ptr) + yy_amount_of_matched_text;

                            yy_current_state = yy_get_previous_state(  );

                            yy_cp = (yy_c_buf_p);
                            yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                            goto yy_match;

                        case EOB_ACT_LAST_MATCH:
                            (yy_c_buf_p) =
                                &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

                            yy_current_state = yy_get_previous_state(  );

                            yy_cp = (yy_c_buf_p);
                            yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                            goto yy_find_action;
                    }
                break;
            }

            default:
                YY_FATAL_ERROR(
                    "fatal flex scanner internal error--no action found" );
        } /* end of action switch */
    } /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
    register char *source = (yytext_ptr);
    register int number_to_move, i;
    int ret_val;

    if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
        YY_FATAL_ERROR(
            "fatal flex scanner internal error--end of buffer missed" );

    if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
    {
        /* Don't try to fill the buffer, so this is an EOF. */
        if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
        {
            /* We matched a single character, the EOB, so
             * treat this as a final EOF.
             */
            return EOB_ACT_END_OF_FILE;
        }

        else
        {
            /* We matched some text prior to the EOB, first
             * process it.
             */
            return EOB_ACT_LAST_MATCH;
        }
    }

    /* Try to read more data. */

    /* First move last chars to start of buffer. */
    number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

    for ( i = 0; i < number_to_move; ++i )
    {
        *(dest++) = *(source++);
    }

    if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
        /* don't do the read, it's not guaranteed to return an EOF,
         * just force an EOF
         */
    {
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;
    }

    else
    {
        int num_to_read =
            YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

        while ( num_to_read <= 0 )
        {
            /* Not enough room in the buffer - grow it. */

            YY_FATAL_ERROR(
                "input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

        }

        if ( num_to_read > YY_READ_BUF_SIZE )
        {
            num_to_read = YY_READ_BUF_SIZE;
        }

        /* Read in more data. */
        YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
                  (yy_n_chars), (size_t) num_to_read );

        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
    }

    if ( (yy_n_chars) == 0 )
    {
        if ( number_to_move == YY_MORE_ADJ )
        {
            ret_val = EOB_ACT_END_OF_FILE;
            yyrestart(yyin  );
        }

        else
        {
            ret_val = EOB_ACT_LAST_MATCH;
            YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
                YY_BUFFER_EOF_PENDING;
        }
    }

    else
    {
        ret_val = EOB_ACT_CONTINUE_SCAN;
    }

    if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size)
    {
        /* Extend the array by 50%, plus the number we really need. */
        yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
        YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, new_size  );
        if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
        {
            YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
        }
    }

    (yy_n_chars) += number_to_move;
    YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
    YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

    (yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

    return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state (void)
{
    register yy_state_type yy_current_state;
    register char *yy_cp;

    yy_current_state = (yy_start);
    yy_current_state += YY_AT_BOL();

    (yy_state_ptr) = (yy_state_buf);
    *(yy_state_ptr)++ = yy_current_state;

    for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
    {
        register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
        while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
        {
            yy_current_state = (int) yy_def[yy_current_state];
            if ( yy_current_state >= 809 )
            {
                yy_c = yy_meta[(unsigned int) yy_c];
            }
        }
        yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
        *(yy_state_ptr)++ = yy_current_state;
    }

    return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
    register int yy_is_jam;

    register YY_CHAR yy_c = 1;
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
    {
        yy_current_state = (int) yy_def[yy_current_state];
        if ( yy_current_state >= 809 )
        {
            yy_c = yy_meta[(unsigned int) yy_c];
        }
    }
    yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
    yy_is_jam = (yy_current_state == 808);
    if ( ! yy_is_jam )
    {
        *(yy_state_ptr)++ = yy_current_state;
    }

    return yy_is_jam ? 0 : yy_current_state;
}

static void yyunput (int c, register char * yy_bp )
{
    register char *yy_cp;

    yy_cp = (yy_c_buf_p);

    /* undo effects of setting up yytext */
    *yy_cp = (yy_hold_char);

    if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
    {
        /* need to shift things up to make room */
        /* +2 for EOB chars. */
        register int number_to_move = (yy_n_chars) + 2;
        register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
                                  YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
        register char *source =
            &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

        while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
        {
            *--dest = *--source;
        }

        yy_cp += (int) (dest - source);
        yy_bp += (int) (dest - source);
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
            (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

        if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
        {
            YY_FATAL_ERROR( "flex scanner push-back overflow" );
        }
    }

    *--yy_cp = (char) c;

    (yytext_ptr) = yy_bp;
    (yy_hold_char) = *yy_cp;
    (yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput (void)
#else
static int input  (void)
#endif

{
    int c;

    *(yy_c_buf_p) = (yy_hold_char);

    if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
    {
        /* yy_c_buf_p now points to the character we want to return.
         * If this occurs *before* the EOB characters, then it's a
         * valid NUL; if not, then we've hit the end of the buffer.
         */
        if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
            /* This was really a NUL. */
        {
            *(yy_c_buf_p) = '\0';
        }

        else
        {
            /* need more input */
            int offset = (yy_c_buf_p) - (yytext_ptr);
            ++(yy_c_buf_p);

            switch ( yy_get_next_buffer(  ) )
            {
                case EOB_ACT_LAST_MATCH:
                    /* This happens because yy_g_n_b()
                     * sees that we've accumulated a
                     * token and flags that we need to
                     * try matching the token before
                     * proceeding.  But for input(),
                     * there's no matching to consider.
                     * So convert the EOB_ACT_LAST_MATCH
                     * to EOB_ACT_END_OF_FILE.
                     */

                    /* Reset buffer status. */
                    yyrestart(yyin );

                    /*FALLTHROUGH*/

                case EOB_ACT_END_OF_FILE:
                {
                    if ( yywrap( ) )
                    {
                        return EOF;
                    }

                    if ( ! (yy_did_buffer_switch_on_eof) )
                    {
                        YY_NEW_FILE;
                    }
#ifdef __cplusplus
                    return yyinput();
#else
                    return input();
#endif
                }

                case EOB_ACT_CONTINUE_SCAN:
                    (yy_c_buf_p) = (yytext_ptr) + offset;
                    break;
            }
        }
    }

    c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
    *(yy_c_buf_p) = '\0';	/* preserve yytext */
    (yy_hold_char) = *++(yy_c_buf_p);

    YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

    return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 *
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyrestart  (FILE * input_file )
{

    if ( ! YY_CURRENT_BUFFER )
    {
        yyensure_buffer_stack ();
        YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin, YY_BUF_SIZE );
    }

    yy_init_buffer(YY_CURRENT_BUFFER, input_file );
    yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 *
 */
void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{

    /* TODO. We should be able to replace this entire function body
     * with
     *		yypop_buffer_state();
     *		yypush_buffer_state(new_buffer);
     */
    yyensure_buffer_stack ();
    if ( YY_CURRENT_BUFFER == new_buffer )
    {
        return;
    }

    if ( YY_CURRENT_BUFFER )
    {
        /* Flush out information for old buffer. */
        *(yy_c_buf_p) = (yy_hold_char);
        YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
    }

    YY_CURRENT_BUFFER_LVALUE = new_buffer;
    yy_load_buffer_state( );

    /* We don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    (yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
    (yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
    yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
    (yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 *
 * @return the allocated buffer state.
 */
YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
    if ( ! b )
    {
        YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
    }

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
    if ( ! b->yy_ch_buf )
    {
        YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
    }

    b->yy_is_our_buffer = 1;

    yy_init_buffer(b, file );

    return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 *
 */
void yy_delete_buffer (YY_BUFFER_STATE  b )
{

    if ( ! b )
    {
        return;
    }

    if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
    {
        YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;
    }

    if ( b->yy_is_our_buffer )
    {
        yyfree((void *) b->yy_ch_buf  );
    }

    yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
    int oerrno = errno;

    yy_flush_buffer(b );

    b->yy_input_file = file;
    b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER)
    {
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

    b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;

    errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 *
 */
void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    if ( ! b )
    {
        return;
    }

    b->yy_n_chars = 0;

    /* We always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[0];

    b->yy_at_bol = 1;
    b->yy_buffer_status = YY_BUFFER_NEW;

    if ( b == YY_CURRENT_BUFFER )
    {
        yy_load_buffer_state( );
    }
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    if (new_buffer == NULL)
    {
        return;
    }

    yyensure_buffer_stack();

    /* This block is copied from yy_switch_to_buffer. */
    if ( YY_CURRENT_BUFFER )
    {
        /* Flush out information for old buffer. */
        *(yy_c_buf_p) = (yy_hold_char);
        YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
    }

    /* Only push if top exists. Otherwise, replace top. */
    if (YY_CURRENT_BUFFER)
    {
        (yy_buffer_stack_top)++;
    }
    YY_CURRENT_BUFFER_LVALUE = new_buffer;

    /* copied from yy_switch_to_buffer. */
    yy_load_buffer_state( );
    (yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *
 */
void yypop_buffer_state (void)
{
    if (!YY_CURRENT_BUFFER)
    {
        return;
    }

    yy_delete_buffer(YY_CURRENT_BUFFER );
    YY_CURRENT_BUFFER_LVALUE = NULL;
    if ((yy_buffer_stack_top) > 0)
    {
        --(yy_buffer_stack_top);
    }

    if (YY_CURRENT_BUFFER)
    {
        yy_load_buffer_state( );
        (yy_did_buffer_switch_on_eof) = 1;
    }
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
    int num_to_alloc;

    if (!(yy_buffer_stack))
    {

        /* First allocation is just for 2 elements, since we don't know if this
         * scanner will even need a stack. We use 2 instead of 1 to avoid an
         * immediate realloc on the next call.
         */
        num_to_alloc = 1;
        (yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
                            (num_to_alloc * sizeof(struct yy_buffer_state*)
                            );
        if ( ! (yy_buffer_stack) )
        {
            YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
        }

        memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

        (yy_buffer_stack_max) = num_to_alloc;
        (yy_buffer_stack_top) = 0;
        return;
    }

    if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1)
    {

        /* Increase the buffer to prepare for a possible push. */
        int grow_size = 8 /* arbitrary grow size */;

        num_to_alloc = (yy_buffer_stack_max) + grow_size;
        (yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
                            ((yy_buffer_stack),
                             num_to_alloc * sizeof(struct yy_buffer_state*)
                            );
        if ( ! (yy_buffer_stack) )
        {
            YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
        }

        /* zero only the new slots.*/
        memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
        (yy_buffer_stack_max) = num_to_alloc;
    }
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
    YY_BUFFER_STATE b;

    if ( size < 2 ||
            base[size - 2] != YY_END_OF_BUFFER_CHAR ||
            base[size - 1] != YY_END_OF_BUFFER_CHAR )
        /* They forgot to leave room for the EOB's. */
    {
        return 0;
    }

    b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
    if ( ! b )
    {
        YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );
    }

    b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
    b->yy_buf_pos = b->yy_ch_buf = base;
    b->yy_is_our_buffer = 0;
    b->yy_input_file = 0;
    b->yy_n_chars = b->yy_buf_size;
    b->yy_is_interactive = 0;
    b->yy_at_bol = 1;
    b->yy_fill_buffer = 0;
    b->yy_buffer_status = YY_BUFFER_NEW;

    yy_switch_to_buffer(b  );

    return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 *
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{

    return yy_scan_bytes(yystr, strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
    YY_BUFFER_STATE b;
    char *buf;
    yy_size_t n;
    int i;

    /* Get memory for full buffer, including space for trailing EOB's. */
    n = _yybytes_len + 2;
    buf = (char *) yyalloc(n  );
    if ( ! buf )
    {
        YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );
    }

    for ( i = 0; i < _yybytes_len; ++i )
    {
        buf[i] = yybytes[i];
    }

    buf[_yybytes_len] = buf[_yybytes_len + 1] = YY_END_OF_BUFFER_CHAR;

    b = yy_scan_buffer(buf, n );
    if ( ! b )
    {
        YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );
    }

    /* It's okay to grow etc. this buffer, and we should throw it
     * away when we're done.
     */
    b->yy_is_our_buffer = 1;

    return b;
}

static void yy_push_state (int  new_state )
{
    if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
    {
        yy_size_t new_size;

        (yy_start_stack_depth) += YY_START_STACK_INCR;
        new_size = (yy_start_stack_depth) * sizeof( int );

        if ( ! (yy_start_stack) )
        {
            (yy_start_stack) = (int *) yyalloc(new_size  );
        }

        else
        {
            (yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack), new_size  );
        }

        if ( ! (yy_start_stack) )
        {
            YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
        }
    }

    (yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

    BEGIN(new_state);
}

static void yy_pop_state  (void)
{
    if ( --(yy_start_stack_ptr) < 0 )
    {
        YY_FATAL_ERROR( "start-condition stack underflow" );
    }

    BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

static int yy_top_state  (void)
{
    return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    (void) fprintf( stderr, "%s\n", msg );
    exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 *
 */
int yyget_lineno  (void)
{

    return yylineno;
}

/** Get the input stream.
 *
 */
FILE *yyget_in  (void)
{
    return yyin;
}

/** Get the output stream.
 *
 */
FILE *yyget_out  (void)
{
    return yyout;
}

/** Get the length of the current token.
 *
 */
int yyget_leng  (void)
{
    return yyleng;
}

/** Get the current token.
 *
 */

char *yyget_text  (void)
{
    return yytext;
}

/** Set the current line number.
 * @param line_number
 *
 */
void yyset_lineno (int  line_number )
{

    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 *
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
    yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
    yyout = out_str ;
}

int yyget_debug  (void)
{
    return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
    yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
    /* Initialization is the same as for the non-reentrant scanner.
    * This function is called from yylex_destroy(), so don't allocate here.
    */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

    /* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{

    /* Pop the buffer stack, destroying each element. */
    while (YY_CURRENT_BUFFER)
    {
        yy_delete_buffer(YY_CURRENT_BUFFER  );
        YY_CURRENT_BUFFER_LVALUE = NULL;
        yypop_buffer_state();
    }

    /* Destroy the stack itself. */
    yyfree((yy_buffer_stack) );
    (yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
    yyfree((yy_start_stack)  );
    (yy_start_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
    register int i;
    for ( i = 0; i < n; ++i )
    {
        s1[i] = s2[i];
    }
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
    register int n;
    for ( n = 0; s[n]; ++n )
        ;

    return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
    return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
    /* The cast to (char *) in the following accommodates both
     * implementations that use char* generic pointers, and those
     * that use void* generic pointers.  It works with the latter
     * because both ANSI C and C++ allow castless assignment from
     * any pointer type to void*, and deal with argument conversions
     * as though doing an assignment.
     */
    return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
    free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

int scan_throw(int token)
{
    last_token = token;
#ifdef DEV
    std::cout << "--> [DEBUG] TOKEN : " << token << std::endl;
#endif
    return token;
}

int get_last_token()
{
    return last_token;
}

void scan_step()
{
    yylloc.first_line = yylloc.last_line;
    yylloc.first_column = yylloc.last_column;
}

void scan_error(std::string msg)
{
    wchar_t* pstMsg = to_wide_string(msg.c_str());

    //std::wcerr << pstMsg << std::endl;
    ParserSingleInstance::PrintError(pstMsg);
    ParserSingleInstance::setExitStatus(Parser::Failed);
    ParserSingleInstance::resetControlStatus();
    FREE(pstMsg);
    last_token = YYEOF;
    BEGIN(INITIAL);
}

/*
** convert floating numbers to C standard
** 1.2d-3 -> 1.2e-3
** 1.2D-3 -> 1.2e-3
*/
void scan_exponent_convert(char *in)
{
    char *pString;
    while ((pString = strpbrk(in, "d")) != NULL)
    {
        *pString = 'e';
    }
    while ((pString = strpbrk(in, "D")) != NULL)
    {
        *pString = 'e';
    }
}

#ifdef _MSC_VER
int isatty (int desc)
{
    return 0;
}
#endif

