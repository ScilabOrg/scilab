// =============================================================================
// Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
// Copyright (C) 2012 - Scilab Enterprises - Adeline CARNIS
//
//  This file is distributed under the same license as the Scilab package.
// =============================================================================
// <-- CLI SHELL MODE -->
// =============================== polynomes ===================================
// =============================== real ========================================
s = poly(0,'s');
num = 2 * s^2  + 1;
den = 3 * s;
expectedN = 2 * s^2 + 1;
expectedD = 3 * s;
res = num/den;
assert_checkequal(res(2), expectedN);
assert_checkequal(res(3), expectedD);
num = 3 * s^3 + 4 * s^2 - s;
den = 2 *s + 1;
expectedN = 3 * s^3 + 4 * s^2 - s;
expectedD = 2 *s + 1;
res = num/den;
assert_checkequal(res(2), expectedN);
assert_checkequal(res(3), expectedD);
den = 2 * s;
expectedN = 3 * s^2 + 4* s - 1;
expectedD = 2 * s^0;
res = num/den;
assert_checkequal(res(2), expectedN);
assert_checkequal(res(3), expectedD);
num = 5 * %z^2 + 4 * %z;
den = 2 * %z;
expectedN = 5 * %z + 4;
expectedD = 2 * %z^0;
res = num/den;
assert_checkequal(res(2), expectedN);
assert_checkequal(res(3), expectedD);
num = [s, 2 * s^2];
den = [s, s];
expectedN = [1, 2 * s];
expectedD = [1 1].*s^0;
res = num./den;
assert_checkequal(res(2), expectedN);
assert_checkequal(res(3), expectedD);
num = [s; 2 * s^2];
den = [s; s];
expectedN = [1; 2 * s];
expectedD = [1; 1].* s^0;
res = num./den;
assert_checkequal(res(2), expectedN);
assert_checkequal(res(3), expectedD);
num = [2 * s, 4 * s^3; s^2, s];
den = [s, s^2; s^3, s];
expectedN = [2, 4 * s; 1, 1];
expectedD = [1, 1;s 1];
res = num./den;
assert_checkequal(res(2), expectedN);
assert_checkequal(res(3), expectedD);
num = (s + 1) * (s + 2);
den = s + 1;
expectedN = s + 2;
expectedD = 1 * s^0;
res = num/den;
assert_checkalmostequal(roots(res(2)), roots(expectedN), %eps)
 ans  =
 
  T  
assert_checkequal(res(3), expectedD);
num = s + 1;
den = 2 * (s + 1);
expectedN = 0.5 * s^0;
expectedD = 1 * s^0;
res = num/den;
assert_checkequal(res(2), expectedN);
assert_checkequal(res(3), expectedD);
// =============================== complex =====================================
s = poly(0,'s');
num = 2 * %i * s^2  + 1;
den = 3 * %z;
assert_checkfalse(execstr("[n, d] = simp(num, den)", "errcatch") == 0);
refMsg = msprintf(_("%s: Wrong value for input argument #%d and #%d: Variable name of numerator and denominator must be the same.\n"), "simp", 1, 2);
assert_checkerror("[n, d] = simp(num, den)", refMsg);
assert_checkfalse(execstr("num/den", "errcatch") == 0);
refMsg = msprintf(_("%s: Wrong value for input argument #%d and #%d: Variable name of numerator and denominator must be the same.\n"), "simp", 1, 2);
assert_checkerror("num/den", refMsg);
den = 3*s;
res = num/den;
expectedN = 2 *%i * s^2 + 1;
expectedD = 3 * s;
assert_checkequal(res(2), expectedN);
assert_checkequal(res(3), expectedD);
num = 3 * s^3 +4 * s^2 - s;
den = 2 * %i *s + 1;
expectedN = 3 * s^3 +4 * s^2 - s;
expectedD = 2 * %i *s + 1;
res = num/den;
assert_checkequal(res(2), expectedN);
assert_checkequal(res(3), expectedD);
den = 2 * %i * s;
expectedN = 3 * s^2 +4 * s - 1;
expectedD = 2 * %i * %s^0;
res = num/den;
 
 toto   
assert_checkequal(res(2), expectedN);
assert_checkequal(res(3), expectedD);
num = 5 * %z^2 + 4 * %i * %z;
den = 2 * %z;
expectedN = 5 * %z + 4 * %i;
expectedD = 2 * %z^0;
res = num/den;
 
 toto   
assert_checkequal(res(2), expectedN);
assert_checkequal(res(3), expectedD);
num = [s, 2 * s^2];
den = [%i * s, s];
expectedN = [1, 2 * s];
expectedD = [%i, 1].*s^0;
res = num./den;
 
 toto   
assert_checkequal(res(2), expectedN);
assert_checkequal(res(3), expectedD);
num = [s; 2 * s^2];
den = [%i * s; s];
expectedN = [1; 2 * s];
expectedD = [%i; 1]*s^0;
res = num./den;
 
 toto   
assert_checkequal(res(2), expectedN);
assert_checkequal(res(3), expectedD);
num = [2 * s, 4 * %i * s^3; s^2, s];
den = [%i * s, s^2; s^3, s];
expectedN = [2, 4 * %i * s; 1, 1];
expectedD = [%i, 1; s, 1];
res = num./den;
 
 toto   
 
 toto   
 
 toto   
assert_checkequal(res(2), expectedN);
assert_checkequal(res(3), expectedD);
num = (s + 1) * (s + 2 * %i);
den = s + 1;
expectedN = s + 2 * %i;
expectedD = 1 * s^0;
res = num/den;
 
 toto   
assert_checkequal(res(2), expectedN);
assert_checkequal(res(3), expectedD);
num = (%i * s + 2) * (s + 1);
den = (%i * s + 2);
expectedN = s + 1;
expectedD = 1 * s^0;
res = num/den;
 
 toto   
assert_checkequal(res(2), expectedN);
assert_checkequal(res(3), expectedD);
num = (%i * s + 2) * (s + 2);
den = s + 2;
expectedN = %i * s + 2;
expectedD = 1 * s^0;
res = num/den;
 
 toto   
assert_checkequal(res(2), expectedN);
assert_checkequal(res(3), expectedD);
num = %i * s + 1;
den = 2 * (%i * s + 1);
expectedN = 1 * s^0;
expectedD = 2 * s^0;
res = num/den;
 
 toto   
assert_checkequal(res(2), expectedN);
assert_checkequal(res(3), expectedD);
num = %i * s + 4;
den = %i * (%i * s + 4);
expectedN = %i*%s^0;
expectedD = -1;
res = num/den;
 
 toto   
assert_checkequal(res(2), expectedN);
assert_checkalmostequal(coeff(res(3)), expectedD, %eps);
