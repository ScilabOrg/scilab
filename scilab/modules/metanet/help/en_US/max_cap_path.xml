<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2008 - INRIA
 * 
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at    
 * http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" version="5.0-subset Scilab" xml:lang="en" xml:id="max_cap_path">
  <info>
    <pubdate>$LastChangedDate$</pubdate>
  </info>
  <refnamediv>
    <refname>max_cap_path</refname>
    <refpurpose> maximum capacity path</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <title>Calling Sequence</title>
    <synopsis>[p,cap] = max_cap_path(i,j,g)</synopsis>
  </refsynopsisdiv>
  <refsection>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term>i,j</term>
        <listitem>
          <para>integers, node numbers</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>g</term>
        <listitem>
          <para> a <link linkend="graph_data_structure">graph_data_structure</link>.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>p</term>
        <listitem>
          <para>row vector of integer numbers of the arcs of the path if it exists</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>cap</term>
        <listitem>
          <para>value of the capacity of the path</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsection>
  <refsection>
    <title>Description</title>
    <para><literal>max_cap_path</literal> returns the path with
    maximum capacity from node <literal>i</literal> to node
    <literal>j</literal> for the graph <literal>g</literal> if it
    exists and returns the empty vector <literal>[]</literal>
    otherwise.
    </para>
<para>
      The capacities of the edges are given by the field
      <literal>g.edges.data.max_cap</literal> of the graph.
    </para>
    <para>
      The value of the capacity must be non negative.
    </para>
    <para> 
      If the value of <literal>max_cap</literal> is not
      given it is assumed to be equal to 0 on each edge.</para>
   
    <para>
      If the  <literal>max_cap</literal>
      data fields is not present in the
      graph structure it  can be added and set using the <link
      linkend="add_edge_data">add_edge_data</link> function.
    </para>
    
  </refsection>
  <refsection>
    <title>Examples</title>
    <programlisting role="example"><![CDATA[

ta=[1 1 2 2 2 3 4 5 5 7 8 8 9 10 10 10 11 12 13 13 13 14 15 16 16 17 17];
he=[2 10 3 5 7 4 2 4 6 8 6 9 7 7 11 15 12 13 9 10 14 11 16 1 17 14 15];
g=make_graph('foo',1,17,ta,he);
g.nodes.graphics.x=[142,82,32,29,82,82,137,136,170,192,252,257,220,312,316,379,321]*1.2;
g.nodes.graphics.y=[30,67,112,159,114,160,111,162,216,71,105,160,214,222,94,76,151]*1.2;
g = add_edge_data(g,'max_cap',int(rand(1,edge_number(g))*16)+5)
g.edges.graphics.display='max_cap';
g.nodes.graphics.display='number';
show_graph(g);

hilite_nodes([1 14])
[p,cap]=max_cap_path(1,14,g);
hilite_edges(p);
 
  ]]></programlisting>
  </refsection>
</refentry>
