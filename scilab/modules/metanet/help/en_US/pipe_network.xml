<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2008 - INRIA
 * 
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at    
 * http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" version="5.0-subset Scilab" xml:lang="en" xml:id="pipe_network">
  <info>
    <pubdate>$LastChangedDate$</pubdate>
  </info>
  <refnamediv>
    <refname>pipe_network</refname>
    <refpurpose> solves the pipe network problem</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <title>Calling Sequence</title>
    <synopsis>[x,pi] = pipe_network(g)</synopsis>
  </refsynopsisdiv>
  <refsection>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term>g</term>
        <listitem>
          <para> a <link linkend="graph_data_structure">graph_data_structure</link>.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>x</term>
        <listitem>
          <para>row vector of the value of the flow on the arcs</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>pi</term>
        <listitem>
          <para>row vector of the value of the potential on the nodes</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsection>
  <refsection>
    <title>Description</title>
    <para>
      <literal>pipe_network</literal> returns the value of the flows
      and of the potentials for the pipe network problem: flow problem
      with two Kirchhoff laws.  The graph must be directed. The
      problem must be feasible (the sum of the node demands must be
      equal to 0). 
    </para>
    <para>
      The resistances on the arcs are given by the field
      <literal>g.edges.data.weight</literal> of the graph data
      structure. If this field is not present it may be added and set
      using the function <link
      linkend="add_edge_data">add_edge_data</link>. The values of the resistances must be strictly positive.
    </para>
    <para>
      THe demands on nodes are given by the field
      <literal>g.nodes.data.demand</literal> of the graph data
      structure. If this field is not present it may be added and set
      using the function <link
      linkend="add_node_data">add_node_data</link>. The sum of the node demands must be
      equal to 0. 
    </para>
    <para>
      The problem is solved by using sparse matrices LU factorization.
    </para>
  </refsection>
  <refsection>
    <title>Examples</title>
    <programlisting role="example"><![CDATA[

ta=[1 1 2 2 3 3 4 4 5 5 5 5 6 6 6 7 7 15 15 15 15 15 15 15 8 9 10 11 12 13 14];
he=[10 13 9 14 8 11 9 11 8 10 12 13 8 9 12 8 11 1 2 3 4 5 6 7 16 16 16 16 16 16 16];
g=make_graph('foo',1,16,ta,he);
g.nodes.graphics.x=[42 615 231 505 145 312 403 233 506 34 400 312 142 614 260 257];
g.nodes.graphics.y=[143 145 154 154 147 152 157 270 273 279 269 273 273 274 50 376];
g.nodes.graphics.diam(15:16)=30;
g=add_node_data(g,'demand',[0 0 0 0 0 0 0 0 0 0 0 0 0 0 -100 100]);
w = [1 3 2 6 4 7 8 1 2 2 2 4 7 8 9 2 3 5 7 3 2 5 8 2 5 8  6 4 3 5 6];
g=add_edge_data(g,'weight',w);
g.nodes.graphics.display='demand';
g.edges.graphics.display='weight';
show_graph(g);

[x,pi] = pipe_network(g)
g=add_edge_data(g,'flow',round(100*x)/100);
g.edges.graphics.display='flow';

show_graph(g);


 
  ]]></programlisting>
  </refsection>
</refentry>
