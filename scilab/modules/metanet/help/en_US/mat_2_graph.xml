<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2008 - INRIA
 * 
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at    
 * http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
 *
 -->
<refentry version="5.0-subset Scilab" xml:id="mat_2_graph" xml:lang="en"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:ns3="http://www.w3.org/1999/xhtml"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:db="http://docbook.org/ns/docbook">
  <info>
    <pubdate>$LastChangedDate$</pubdate>
  </info>

  <refnamediv>
    <refname>mat_2_graph</refname>

    <refpurpose>graph from node-arc or node-node incidence matrix</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <title>Calling Sequence</title>

    <synopsis>g = mat_2_graph(a,directed,[mat])</synopsis>
  </refsynopsisdiv>

  <refsection>
    <title>Parameters</title>

    <variablelist>
      <varlistentry>
        <term>a</term>

        <listitem>
          <para>sparse node-arc or node-node incidence matrix</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>directed</term>

        <listitem>
          <para>integer, 0 (undirected graph) or 1 (directed graph)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>mat</term>

        <listitem>
          <para>optional string, <literal>'node-arc'</literal> or
          <literal>'node-node'</literal> matrix</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>g</term>

        <listitem>
          <para>a <link
          linkend="graph_data_structure">graph_data_structure</link>.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsection>

  <refsection>
    <title>Description</title>

    <para><literal>mat_2_graph</literal> computes the graph
    <literal>g</literal> corresponding to the node-arc or the node-node
    incidence matrix <literal>a</literal>. Note that a checking is made to
    insure that <literal>a</literal> is a sparse node-arc or node-node
    incidence matrix of a directed (<literal>directed = 1</literal>) or
    undirected (<literal>directed = 0</literal>) graph. If the optional
    argument <literal>mat</literal> is omitted or is the string
    <literal>'node-arc'</literal>, a must be a node-arc matrix. If
    <literal>mat</literal> is the string <literal>'node-node'</literal>, a
    must be a node-node matrix.</para>
  </refsection>

  <refsection>
    <title>Examples</title>

    <programlisting role="example">

// creating a directed graph with 13 nodes and 14 arcs.
ta=[1  1 2 7 8 9 10 10 10 11 12 13 13];
he=[2 10 7 8 9 7  7 11 13 12 13  9 10];
g=make_graph('foo',1,13,ta,he);
g.nodes.graphics.x=[40,33,29,63,146,233,75,42,114,156,237,260,159]
g.nodes.graphics.y=[7,61,103,142,145,143,43,120,145,18,36,107,107]
show_graph(g)

a=graph_2_mat(g);
g1=mat_2_graph(a,1);
g1.nodes.graphics.x=g.nodes.graphics.x; g1.nodes.graphics.y=g.nodes.graphics.y;
show_graph(g1,'new');

a=graph_2_mat(g,'node-node');
g1=mat_2_graph(a,1,'node-node');
g1.nodes.graphics.x=g.nodes.graphics.x; g1.nodes.graphics.y=g.nodes.graphics.y;
show_graph(g1,'new');
 
  </programlisting>
  </refsection>

  <refsection>
    <title>See Also</title>

    <simplelist type="inline">
      <member><link linkend="adj_lists">adj_lists</link></member>

      <member><link linkend="chain_struct">chain_struct</link></member>

      <member><link linkend="graph_2_mat">graph_2_mat</link></member>
    </simplelist>
  </refsection>
</refentry>