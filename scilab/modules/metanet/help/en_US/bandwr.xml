<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2008 - INRIA
 * 
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at    
 * http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" version="5.0-subset Scilab" xml:lang="en" xml:id="bandwr">
  <info>
    <pubdate>$LastChangedDate: 2008-03-26 09:50:39 +0100 (mer, 26 mar 2008) $</pubdate>
  </info>
  <refnamediv>
    <refname>bandwr</refname>
    <refpurpose> bandwidth reduction for a sparse matrix</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <title>Calling Sequence</title>
    <synopsis>[iperm,mrepi,prof,ierr] = bandwr(sp,[iopt])
[iperm,mrepi,prof,ierr] = bandwr(lp,ls,n,[iopt])</synopsis>
  </refsynopsisdiv>
  <refsection>
    <title>Parameters</title>
    <variablelist>
      <varlistentry>
        <term>sp</term>
        <listitem>
          <para>sparse matrix</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>lp</term>
        <listitem>
          <para>integer row vector</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>ls</term>
        <listitem>
          <para>integer row vector</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>n</term>
        <listitem>
          <para>integer</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>iopt</term>
        <listitem>
          <para>integer</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>iperm</term>
        <listitem>
          <para>integer row vector</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>mrepi</term>
        <listitem>
          <para>integer row vector</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>prof</term>
        <listitem>
          <para>integer row vector</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>ierr</term>
        <listitem>
          <para>integer</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsection>
  <refsection>
    <title>Description</title>
    <para><literal>bandwr</literal> solves the problem of bandwidth reduction for a sparse
    matrix: the matrix is supposed to be upper triangular with a full
    diagonal (it is easy to complete a non symmetric matrix, and then
    discards the added terms).</para>
    <para>
    In the first calling sequence, <literal>sp</literal> denotes a
    sparse matrix; the optional argument <literal>iopt</literal> is 0 or 1:  1 if
    reducing  the profile of the matrix is more important than reducing 
    the bandwidth and 0 if bandwidth reduction is most important.</para>
    <para>
    The second calling sequence corresponds to the description of a graph:
    <literal>lp</literal>  is a row vector, pointer array of the adjacency lists
    description  of a graph (its size is the number of nodes of the graph + 1);
    <literal>ls</literal> is a  row vector, node array of the adjacency lists
    description (its size is the number of edges of the graph i.e. the
    number of non-zero terms of the corresponding sparse matrix).
    <literal>n</literal> is the number of nodes (dimension of <literal>sp</literal>).</para>
    <para><literal>iperm</literal> is the permutation vector for reordering the rows
    and columns 
    which reduces the bandwidth and/or profile (new numbering of the nodes
    of the graph);
    <literal>mrepi</literal> is the inverse permutation (mrepi(iperm) is the identity).
    <literal>prof</literal> is the array giving the profile of the sparse matrix
    after the bandwidth reduction if <literal>iopt</literal> is 1. If <literal>iopt</literal> is 0 
    this array is zero except for the first term giving the bandwidth.
    The simple command <literal>max(prof(2:$)-prof(1:($-1)))</literal> returns
    the bandwidth of the matrix.
    <literal>ierr</literal> is an integer indicating an error if its value is not zero.</para>
  </refsection>
  <refsection>
    <title>Examples</title>
    <programlisting role="example"><![CDATA[

//Build the initial graph
ta=[2  1 3 2 2 4 4 5 6 7 8 8 9 10 10 10 10 11 12 13 13 14 15 16 16 17 17];
he=[1 10 2 5 7 3 2 4 5 8 6 9 7 7 11 13 15 12 13  9 14 11 16 1 17 14 15];
g=make_graph('foo',0,17,ta,he);
g.nodes.graphics.x=[283 163 63 57 164 164 273 271 339 384 504 513 439 623 631 757 642];
g.nodes.graphics.y=[59 133 223 318 227 319 221 324 432 141 209 319 428 443 187 151 301];
//Initial Display
g.nodes.graphics.name=string(1:17);
g.nodes.graphics.display='name';
show_graph(g);

a=graph_2_mat(g,'node-node');
ww=tril(a)'+eye();
ww1=full(ww);
scf(1);
hist3d((ww1+tril(ww1',-1)+tril(ww1,-1)'),52,85); 
// BANDWIDTH REDUCTION FOR THE MATRIX
[iperm,mrepi,prof,ierr]=bandwr(ww);
disp(max(prof(2:$)-prof(1:($-1))));

// GRAPH WITH THE NEW NUMBERING
g2=g;
g2.nodes.graphics.name=string(iperm);
show_graph(g2,'new')
// NEW MATRIX
n=g.nodes.number;
yy=ww1(mrepi,mrepi);
scf(3)
hist3d((yy+tril(yy',-1)+tril(yy,-1)'),52,85); 
// STARTING WITH THE SAME MATRIX
[ij,v,mn]=spget(ww);
g1=make_graph('foo',0,n,ij(:,1)',ij(:,2)');
g1.nodes.graphics.x=g.nodes.graphics.x;g1.nodes.graphics.y=g.nodes.graphics.y;
// GRAPH
//show_graph(g1,'rep');
[lp,la,ls] = adj_lists(1,n,g1.edges.tail,g1.edges.head);
[iperm,mrepi,prof,ierr]=bandwr(lp,ls,n,0);
g2=g;g2.nodes.graphics.name=string(iperm);
show_graph(g2,'new');
 
  ]]></programlisting>
  </refsection>
</refentry>
