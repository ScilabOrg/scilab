<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2008 - INRIA
 * 
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at    
 * http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" version="5.0-subset Scilab" xml:lang="fr" xml:id="min_lcost_flow2">
  <info>
    <pubdate>$LastChangedDate$</pubdate>
  </info>
  <refnamediv>
    <refname>min_lcost_flow2</refname>
    <refpurpose> flot de coût linéaire minimum  </refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <title>Séquence d'appel</title>
    <synopsis>[c,phi,flag] = min_lcost_flow2(g)</synopsis>
  </refsynopsisdiv>
  <refsection>
    <title>Paramètres</title>
    <variablelist>
      <varlistentry>
        <term>g  </term>
        <listitem>
          <para>graphe (liste)
</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>c  </term>
        <listitem>
          <para>valeur du coût
</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>phi  </term>
        <listitem>
          <para>vecteur ligne des valeurs des flots sur les arcs
</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>flag  </term>
        <listitem>
          <para>problème soluble ou pas (0 ou 1)
</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsection>
  <refsection>
    <title>Description</title>
    <para><literal>min_lcost_flow2</literal> calcule flot de coût linéaire minimum dans un réseau 
    <literal>g</literal>. Elle renvoie le coût total du flot sur les arcs <literal>c</literal> et
    le vecteur ligne des flots sur les arcs <literal>phi</literal>. Si le problème n'est pas soluble (impossible de trouver un flot compatible), <literal>flag</literal> est égal à 0, sinon il est égal à 1.
  </para>
  <para>
      Les bornes sur les flots sont données par les éléments
      <literal>g.edges.data.min_cap</literal> et
      <literal>g.edges.data.max_cap</literal> du graphe.  
   </para>
    <para>
      Les valeurs des capacités maximum et minimum doivent être
      entières et positives.  La valeur de la capacité maximum doit
      être supérieure ou égale à la valeur de la capacité minimum.  Si
      la valeur de <literal>min_cap</literal> ou de
      <literal>max_cap</literal> n'est pas donnée elle est supposé
      nulle sur chaque arête.
    </para>
    <para>
      Les coûts sur les arêtes sont donnés par les éléments
      <literal>g.edges.data.cost</literal> du graphe.  Les coûts
      doivent être non négatifs.  Si la valeur de
      <literal>cost</literal> n'est pas donnée, elle est supposé nulle
      sur chaque arête.
    </para>
   <para>
     La demande sur les sommets est donnée par l'élément
     <literal>g.nodes.data.demand</literal> du graphe.  Les demandes
     doivent être des nombre entiers. La somme des demandes doit être
     nulle pour que le problème soit soluble. Si la valeur de
     <literal>demand</literal> n'est pas donnée, elle est supposée
     nulle sur chaque sommet.
  </para>
   <para>
      Si les champs de donnée <literal>min_cap</literal> ou
      <literal>max_cap</literal> ou <literal>cost</literal> ne sont
      pas présents dans la structure du graphe, ils peuvent être
      ajoutés et affectés en utilisant la fonction  <link
      linkend="add_edge_data">add_edge_data</link>.
      Si le champs de donnée <literal>demand</literal>  n'est 
      pas présent dans la structure du graphe, il peut être
      ajouté et affecté en utilisant la fonction  <link
      linkend="add_node_data">add_node_data</link>.
    </para>
    <para>
    Cette fonction utilise un algorithme de relaxation dû à D. Bertsekas.
  </para>
  </refsection>
  <refsection>
    <title>Exemples</title>
    <programlisting role="example"><![CDATA[

ta=[1 1 2 2 2 3 4 4 5 6 6 6 7 7 7 8 9 10 12 12 13 13 13 14 15 14 9 11 10 1 8];
he=[2 6 3 4 5 1 3 5 1 7 10 11 5 8 9 5 8 11 10 11 9 11 15 13 14 4 6 9 1 12 14];
g=make_graph('foo',1,15,ta,he);
g.nodes.graphics.x=[194 191 106 194 296 305 305 418 422 432 552 550 549 416 548];
g.nodes.graphics.y=[56 221 316 318 316 143 214 321 217 126 215 80 330 437 439];
show_graph(g);

g=add_edge_data(g,'max_cap',[37,24,23,30,25,27,27,24,34,40,21,38,35,23,38,28,26,..
                       22,40,22,28,24,31,25,26,24,23,30,22,24,35]);
g=add_edge_data(g,'cost',[10,6,3,8,10,8,11,1,2,6,5,6,5,3,4,2,4,4,8,2,4,5,4,8,8,3,4,3,7,10,10]);
g=add_node_data(g,'demand',[22,-29,18,-3,-16,20,-9,7,-6,17,21,-6,-8,-37,9]);

[c,phi,flag]=min_lcost_flow2(g);flag

g.edges.graphics.foreground(find(phi<>0))=color('red');
g=add_edge_data(g,'flow',phi)
g.edges.graphics.display='flow';
g.nodes.graphics.display='demand';

show_graph(g);

 
  ]]></programlisting>
  </refsection>
  <refsection>
    <title>Voir Aussi</title>
    <simplelist type="inline">
      <member>
        <link linkend="min_lcost_cflow">min_lcost_cflow</link>
      </member>
      <member>
        <link linkend="min_lcost_flow1">min_lcost_flow1</link>
      </member>
      <member>
        <link linkend="min_qcost_flow">min_qcost_flow</link>
      </member>
    </simplelist>
  </refsection>
</refentry>
