<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2008 - INRIA
 * 
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at    
 * http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" version="5.0-subset Scilab" xml:lang="fr" xml:id="cycle_basis">
  <info>
    <pubdate>$LastChangedDate$</pubdate>
  </info>
  <refnamediv>
    <refname>cycle_basis</refname>
    <refpurpose> base des cycles d'un graphe simple non-orienté  </refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <title>Séquence d'appel</title>
    <synopsis>spc = cycle_basis(g)</synopsis>
  </refsynopsisdiv>
  <refsection>
    <title>Paramètres</title>
    <variablelist>
      <varlistentry>
        <term>g  </term>
        <listitem>
          <para>graphe (liste)
</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>spc  </term>
        <listitem>
          <para>matrice creuse
</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsection>
  <refsection>
    <title>Description</title>
    <para>
    Tout d'abord un arbre couvrant est trouvé avec <literal>min_weight_tree</literal> et est 
    ensuite utilisé pour trouver tous les cycles fondamentaux par rapport à 
    cet arbre. Ils sont renvoyés sous forme d'un 
    ensemble de cycles, chaque cycle étant représenté par un ensemble d'arêtes.
    Ces cycles sont renvoyés dans une matrice creuse<literal>spc</literal> : chaque ligne 
    de cette matrice correspond à un cycle.
  </para>
    <para>
    Le graphe <literal>g</literal> est supposé simple, non-orienté et connecté
    (<literal>cycle_basis</literal> ne vérifie pas que le graphe est simple, utiliser 
    <literal>graph_simp</literal>m avant l'appel si nécessaire).
  </para>
  </refsection>
  <refsection>
    <title>Exemples</title>
    <programlisting role="example"><![CDATA[
    
//create a directed graph
ta=[1 1 2 2 2 3 4 5 5 7 8 8 9 10 10 10 10 10 11 12 13 13 13 14 15 16 16 17 17];
he=[2 10 3 5 7 4 2 4 6 8 6 9 7 7 11 13 13 15 12 13 9 10 14 11 16 1 17 14 15];
gt=make_graph('foo',1,17,ta,he);
gt.nodes.graphics.x=[283 163 63 57 164 164 273 271 339 384 504 513 439 623 631 757 642]/2;
gt.nodes.graphics.y=[59 133 223 318 227 319 221 324 432 141 209 319 428 443 187 151 301]/2;
show_graph(gt);

//Make simple and undirected
g=graph_simp(gt);
show_graph(g,'new');

//Compute the cycle basis
cycles_list=cycle_basis(g,'list');

//Display the cycles
for c=cycles_list,hilite_edges(c);xpause(1d6),unhilite_edges(c);end;
   ]]></programlisting>
  </refsection>
  <refsection>
    <title>Voir Aussi</title>
    <simplelist type="inline">
      <member>
        <link linkend="min_weight_tree">min_weight_tree</link>
      </member>
      <member>
        <link linkend="graph_simp">graph_simp</link>
      </member>
    </simplelist>
  </refsection>
</refentry>
