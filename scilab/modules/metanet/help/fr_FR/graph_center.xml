<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2008 - INRIA
 * 
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at    
 * http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" version="5.0-subset Scilab" xml:lang="fr" xml:id="graph_center">
  <info>
    <pubdate>$LastChangedDate$</pubdate>
  </info>
  <refnamediv>
    <refname>graph_center</refname>
    <refpurpose> centre d'un graphe  </refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <title>Séquence d'appel</title>
    <synopsis>[no,rad] = graph_center(g)</synopsis>
  </refsynopsisdiv>
  <refsection>
    <title>Paramètres</title>
    <variablelist>
      <varlistentry>
        <term>g  </term>
        <listitem>
          <para>graphe (liste) 
</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>no  </term>
        <listitem>
          <para>entier
</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>rad  </term>
        <listitem>
          <para>entier
</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsection>
  <refsection>
    <title>Description</title>
    <para><literal>graph_center</literal> calcule le centre du graphe <literal>g</literal> i.e. le sommet 
    pour lequel le plus grand des plus petits chemins vers tous les autres 
    sommets est minimum. La longueur des arcs est supposée entière (1 par défaut). 
    La sortie est la valeur <literal>rad</literal> de la longueur du rayon et
    <literal>no</literal> qui est le numéro du sommet du centre du graphe.
  </para>
  </refsection>
  <refsection>
    <title>Exemples</title>
    <programlisting role="example"><![CDATA[

ta=[1 1 2 2 2 3 4 5 5 7 8 8 9 10 10 10 10 11 12 13 13 14 15 16 16 17 17];
he=[2 10 3 5 7 4 2 4 6 8 6 9 7 7 11 13 15 12 13  9 14 11 16 1 17 14 15];
g=make_graph('foo',0,17,ta,he);
g.nodes.graphics.x=[283 163 63 57 164 164 273 271 339 384 504 513 439 623 631 757 642]/2;
g.nodes.graphics.y=[59 133 223 318 227 319 221 324 432 141 209 319 428 443 187 151 301]/2;
show_graph(g);
[no,rad] = graph_center(g)
hilite_nodes(no);
r1=0;
for k=1:16
 [p,lp] = shortest_path(no,k,g,'arc');  
  if lp>r1 then r1=lp;path=p;end
end
r1
hilite_edges(path)
 
  ]]></programlisting>
  </refsection>
  <refsection>
    <title>Voir Aussi</title>
    <simplelist type="inline">
      <member>
        <link linkend="graph_diameter">graph_diameter</link>
      </member>
    </simplelist>
  </refsection>
</refentry>
