<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2008 - INRIA
 * ...
 *
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at
 * http://www.cecill.info/licences/Licence_CeCILL_V2.1-en.txt
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:ns5="http://www.w3.org/1999/xhtml" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:id="intg" xml:lang="en">
    <refnamediv>
        <refname>intg</refname>
        <refpurpose>definite integral</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Calling Sequence</title>
        <synopsis>[v, err [,ierr]]=intg(a, b, f [,ea [,er]])</synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>Arguments</title>
        <variablelist>
            <varlistentry>
                <term>a, b</term>
                <listitem>
                    <para>real numbers.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>f</term>
                <listitem>
                    <para>external (function or list or string).</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>ea, er</term>
                <listitem>
                    <para>real numbers.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>ea</term>
                <listitem>
                    <para>absolute error required on the result. Default value:
                        1.d-14.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>er</term>
                <listitem>
                    <para>relative error required on the result. Default value:
                        1.d-8.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>err</term>
                <listitem>
                    <para>estimated absolute error on the result.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>ierr</term>
                <listitem>
                    <para>error flag number (= 0 if no error occured).</para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Description</title>
        <para>
            <literal>intg(a,b,f)</literal> evaluates the definite integral from
            <literal>a</literal> to <literal>b</literal> of <literal>f(t)dt</literal>.
            The function <literal>f(t)</literal> should be continuous.
        </para>
        <para>The evaluation hopefully satisfies following claim for accuracy:
            <literal>abs(I-v)&lt;= max(ea,er*abs(I))</literal> where
            <literal>I</literal> stands for the exact value of the integral.
        </para>
        <para>
            <literal>f</literal> is an external :
        </para>
        <para>
            If <literal>f</literal> is function its definition must be as
            follows <literal> y = f(t) </literal>
        </para>
        <para>
            If <literal>f</literal> is a list the list must be as follows:
            <literal> list(f,x1,x2,...)</literal> where <literal>f</literal> is a
            function with calling sequence <literal>f(t,x1,x2,...)</literal>.
        </para>
        <para>
            If <literal>f</literal> is a string it refers to the name of a
            Fortran function or a C prodedure with a given calling sequence:
        </para>
        <para>
            In the fortran case the calling sequence should be <literal>double
                precision function f(x)
            </literal>
            where <literal>x</literal> is also a
            double precision number.
        </para>
        <para>
            In the C case the calling sequence should be <literal>double
                f(double *x)
            </literal>
            .
        </para>
    </refsection>
    <refsection>
        <title>Known Limitation</title>
        <para>
            Like all the integrators, <literal>intg</literal> is subject to spike missing.
        </para>
        <para>
            A flat function with a spike will be seen as a fully flat function
            if the spike is stiff enough.
        </para>
        <para>
            This cannot be bypassed, it is easy to understand why when we know how the integrator operates.
            Indeed, <literal>intg</literal> uses the 21-point Gauss-Kronrod rule,
            so if there is a spike in-between two consecutive integration points,
            then it will go undetected, the function will be considered smooth.
        </para>
        <para>
            However, a warning message will be issued if the function is considered very smooth.
            The user will then be suggested to reduce the integration interval,
            should he think that spikes were missed.
        </para>
        <para>
            The following graphs illustrate that phenomenon.
        </para>
        <scilab:image localized="true">
            x = 0:.1:22;
            y = zeros(1,221); y(1) = 3; y(96) = 1;
            plot(x, y);
            xtitle("Spike missed");
        </scilab:image>
        <para>
            Being in-between the 9th and 10th integration points,
            that spike is not detected and
            <literal>intg</literal> considers the function flat.
            In the next image, the spike is large enough to be covered by the integration points.
        </para>
        <scilab:image localized="true">
            x = 0:21;
            y = zeros(1,22); y(1) = 3; y(10) = 1;
            plot(x, y);
            xtitle("Spike detected");
        </scilab:image>
        <para>
            If the user wants to display the computed solution even if the solver has encountered an error,
            he should add the third output argument <literal>ierr</literal>, that will transform the
            errors into warnings. This is mostly used in the case of rounding errors.
        </para>
    </refsection>
    <refsection>
        <title>Examples</title>
        <programlisting role="example"><![CDATA[
// Function written in the Scilab language
function y=f(x),y=x*sin(30*x)/sqrt(1-((x/(2*%pi))^2)),endfunction
exact=-2.5432596188;
I=intg(0,2*%pi,f)
abs(exact-I)

// Function with an argument written in the Scilab language
function y=f1(x,w),y=x*sin(w*x)/sqrt(1-((x/(2*%pi))^2)),endfunction
I=intg(0,2*%pi,list(f1,30))
abs(exact-I)


// Function written in Fortran (a Fortran compiler is required)
// define a Fortran function
cd TMPDIR;
F=['      double precision function ffun(x)'
   '      double precision x,pi'
   '      pi=3.14159265358979312d+0'
   '      ffun=x*sin(30.0d+0*x)/sqrt(1.0d+0-(x/(2.0d+0*pi))**2)'
   '      return'
   '      end'];
mputl(F,fullfile(TMPDIR,'ffun.f'))

// compile the function
l=ilib_for_link('ffun',fullfile(TMPDIR,'ffun.f'),[],'f');

// add the function to the working environment
link(l,'ffun','f')

// integrate the function
I=intg(0,2*%pi,'ffun')
abs(exact-I)

// Function written in C (a C compiler is required)
// define a C function
C=['#include <math.h>'
   'double cfun(double *x)'
   '{'
   '  double y,pi=3.14159265358979312;'
   '  y=*x/(2.0e0*pi);'
   '  return *x*sin(30.0e0**x)/sqrt(1.0e0-y*y);'
   '}'];
mputl(C,fullfile(TMPDIR,'cfun.c'))

// compile the function
l=ilib_for_link('cfun',fullfile(TMPDIR,'cfun.c'),[],'c');

// add the function to the working environment
link(l,'cfun','c')

// integrate the function
I=intg(0,2*%pi,'cfun')
abs(exact-I)
 ]]></programlisting>
    </refsection>
    <refsection role="see also">
        <title>See Also</title>
        <simplelist type="inline">
            <member>
                <link linkend="intc">intc</link>
            </member>
            <member>
                <link linkend="intl">intl</link>
            </member>
            <member>
                <link linkend="inttrap">inttrap</link>
            </member>
            <member>
                <link linkend="intsplin">intsplin</link>
            </member>
            <member>
                <link linkend="ode">ode</link>
            </member>
        </simplelist>
    </refsection>
    <refsection>
        <title>Used Functions</title>
        <para>The associated routines can be found in SCI/modules/differential_equations/src/fortran directory
            :
        </para>
        <para>dqags.f and dqagse.f from quadpack</para>
    </refsection>
</refentry>
