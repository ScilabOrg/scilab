<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:ns5="http://www.w3.org/1999/xhtml" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" version="5.0-subset Scilab" xml:id="intg" xml:lang="fr">
  <info>
    <pubdate>$LastChangedDate$</pubdate>
  </info>
  <refnamediv>
    <refname>intg</refname>
    <refpurpose>intégration numérique adaptative</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <title>Séquence d'appel</title>
    <synopsis>[v,err]=intg(a,b,f [,ea [,er])</synopsis>
  </refsynopsisdiv>
  <refsection>
    <title>Paramètres</title>
    <variablelist>
      <varlistentry>
        <term>a, b</term>
        <listitem>
          <para>nombres réels.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>f</term>
        <listitem>
          <para>fonction externe (fonction Scilab ou chaîne de caractères ou
            liste).
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>ea, er</term>
        <listitem>
          <para>nombres réels.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>ea</term>
        <listitem>
          <para>erreur absolue désirée (1.d-14 par défaut).</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>er</term>
        <listitem>
          <para>erreur relative (1.d-8 par défaut).</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>err</term>
        <listitem>
          <para>estimation de l'erreur absolue sur le résultat.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsection>
  <refsection>
    <title>Description</title>
    <para>
      <literal>intg(a,b,f)</literal> approche l'intégrale de
      <literal>a</literal> à <literal>b</literal> de <literal>f(t)dt</literal>.
      La fonction <literal>f</literal> doit être continue.
    </para>
    <para>
      L'évaluation satisfait si possible <literal>abs(I-v)&lt;=
        max(ea,er*abs(I))
      </literal>
      où <literal>I</literal> représente la valeur exacte de
      l'intégrale.
    </para>
    <para>
      <literal>f</literal> est une fonction externe :
    </para>
    <para>
      Si <literal>f</literal> est une fonction Scilab elle doit avoir la
      liste d'appel : <literal>y = f(t)</literal>
    </para>
    <para>
      Si <literal>f</literal> est une liste, cette liste doit avoir la
      structure suivante : <literal> list(f,x1,x2,...)</literal> où
      <literal>f</literal> est une fonction Scilab avec la liste d'appel :
      <literal>f(t,x1,x2,...)</literal>.
    </para>
    <para>
      Si <literal>f</literal> est une chaîne de caractères, ce paramètre
      désigne le nom d'un fonction Fortran ou d'une procédure C ayant une liste
      d'appel fixée:
    </para>
    <para>
      Dans le cas Fortran la liste d'appel doit être: <literal>double
        precision function f(x)</literal>
      où <literal>x</literal> est aussi un
      nombre double precision.
    </para>
    <para>
      Dans la cas C la liste d'appel doit être: <literal>double f(double
        *x)</literal>.
    </para>
  </refsection>
  <refsection>
    <title>Exemples</title>
    <programlisting role="example"><![CDATA[ 
//External écrit en Scilab
function y=f(x),y=x*sin(30*x)/sqrt(1-((x/(2*%pi))^2)),endfunction
exact=-2.5432596188;
I=intg(0,2*%pi,f)
abs(exact-I)

//External écrit en Scilab avec un argument
function y=f1(x,w),y=x*sin(w*x)/sqrt(1-((x/(2*%pi))^2)),endfunction
I=intg(0,2*%pi,list(f1,30))
abs(exact-I)


// External écrit en Fortran (un compilateur Fortran est nécessaire)
// Ecriture du code fortran
cd TMPDIR;
F=['      double precision function ffun(x)'
   '      double precision x,pi'
   '      pi=3.14159265358979312d+0'
   '      ffun=x*sin(30.0d+0*x)/sqrt(1.0d+0-(x/(2.0d+0*pi))**2)'
   '      return'
   '      end'];
mputl(F,fullfile(TMPDIR,'ffun.f'))

// compilation du code Fortran
l=ilib_for_link('ffun',fullfile(TMPDIR,'ffun.f'),[],'f');

// link incrémental
link(l,'ffun','f')

// integration de la fonction
I=intg(0,2*%pi,'ffun')
abs(exact-I)

// External écrit en C (un compilateur C est nécessaire)
// Ecriture du code C
C=['#include <math.h>'
   'double cfun(double *x)'
   '{'
   '  double y,pi=3.14159265358979312;'
   '  y=*x/(2.0e0*pi);'
   '  return *x*sin(30.0e0**x)/sqrt(1.0e0-y*y);'
   '}'];
mputl(C,fullfile(TMPDIR,'cfun.c'))

// compilation du code C
l=ilib_for_link('cfun',fullfile(TMPDIR,'cfun.c'),[],'c');

// incremental linking
link(l,'cfun','c')

// integration de la fonction
I=intg(0,2*%pi,'cfun')
abs(exact-I)
 ]]></programlisting>
  </refsection>
  <refsection role="see also">
    <title>Voir aussi</title>
    <simplelist type="inline">
      <member>
        <link linkend="intc">intc</link>
      </member>
      <member>
        <link linkend="intl">intl</link>
      </member>
      <member>
        <link linkend="inttrap">inttrap</link>
      </member>
      <member>
        <link linkend="intsplin">intsplin</link>
      </member>
      <member>
        <link linkend="ode">ode</link>
      </member>
    </simplelist>
  </refsection>
  <refsection>
    <title>Fonctions Utilisées</title>
    <para>Les programmes correspondants (dqag0.f et dqags.f de quadpack) se
      trouvent dabs le repertoire SCI/modules/differential_equations/src/fortran.
    </para>
  </refsection>
</refentry>
