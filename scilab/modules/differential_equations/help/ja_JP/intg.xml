<?xml version="1.0" encoding="UTF-8"?>

<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2008 - INRIA
 * ...
 * 
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at    
 * http://www.cecill.info/licences/Licence_CeCILL_V2.1-en.txt
 *
 -->

<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:ns5="http://www.w3.org/1999/xhtml" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:id="intg" xml:lang="ja">
    
    <refnamediv>
        
        <refname>intg</refname>
        
        <refpurpose>定積分</refpurpose>
        
    </refnamediv>
    
    <refsynopsisdiv>
        
        <title>呼び出し手順</title>
        
        <synopsis>[v, err [,ierr]]=intg(a, b, f [,ea [,er]])</synopsis>
        
    </refsynopsisdiv>
    
    <refsection>
        
        <title>引数</title>
        
        <variablelist>
            
            <varlistentry>
                
                <term>a, b</term>
                
                <listitem>
                    
                    <para>実数</para>
                    
                </listitem>
                
            </varlistentry>
            
            <varlistentry>
                
                <term>f</term>
                
                <listitem>
                    
                    <para>外部 (関数またはリストまたは文字列)</para>
                    
                </listitem>
                
            </varlistentry>
            
            <varlistentry>
                
                <term>ea, er</term>
                
                <listitem>
                    
                    <para>実数</para>
                    
                </listitem>
                
            </varlistentry>
            
            <varlistentry>
                
                <term>ea</term>
                
                <listitem>
                    
                    <para>結果に指定する絶対誤. デフォルト値:
                        
                        1.d-14.
                        
                    </para>
                    
                </listitem>
                
            </varlistentry>
            
            <varlistentry>
                
                <term>er</term>
                
                <listitem>
                    
                    <para>結果に指定する相対誤差. デフォルト値:
                        
                        1.d-8.
                        
                    </para>
                    
                </listitem>
                
            </varlistentry>
            
            <varlistentry>
                
                <term>err</term>
                
                <listitem>
                    
                    <para>結果に関する絶対誤差の推定値.</para>
                    
                </listitem>
                
            </varlistentry>
            
            <varlistentry>
                
                <term>ierr</term>
                
                <listitem>
                    
                    <para>エラーフラグ番号(エラーが発生しなかった場合は 0).</para>
                    
                </listitem>
                
            </varlistentry>
            
        </variablelist>
        
    </refsection>
    
    <refsection>
        
        <title>説明</title>
        
        <para>
            
            <literal>intg(a,b,f)</literal> は,
            
            <literal>f(t)dt</literal>の
            
            <literal>a</literal> から <literal>b</literal>までの
            
            定積分を計算します.
            
            関数 <literal>f(t)</literal> は連続である必要があります.
            
        </para>
        
        <para>
            
            この計算は以下の精度を満たすことが期待されます:
            
            <literal>abs(I-v)&lt;= max(ea,er*abs(I))</literal> ただし
            
            <literal>I</literal> はこの積分の真値を意味します.
            
        </para>
        
        <para>
            
            <literal>f</literal> は以下のような外部ルーチンです :
            
        </para>
        
        <para>
            
            <literal>f</literal> が関数の場合,
            
            <literal>y = f(t)</literal> のように定義されている必要があります.
            
        </para>
        
        <para>
            
            <literal>f</literal> がリストの場合,
            
            このリストは以下のようである必要があります:
            
            <literal> list(f,x1,x2,...)</literal> ただし <literal>f</literal>
            
            は呼び出し手順が <literal>f(t,x1,x2,...)</literal> の関数です.
            
        </para>
        
        <para>
            
            <literal>f</literal> が文字列の場合,
            
            以下の規定の呼出し手順を有する
            
            Fortran関数またはCプロシージャの名前を指しています:
            
        </para>
        
        <para>
            
            Fortran の場合, 呼出し手順は
            
            <literal>double  precision function f(x)</literal> とします.
            
            ただし, <literal>x</literal> も倍精度実数となります.
            
        </para>
        
        <para>
            
            Cの場合, 呼出し手順は <literal>double
                
                f(double *x)
                
            </literal>
            
            とします.
            
        </para>
        
    </refsection>
    
    <refsection>
        
        <title>既知の制限</title>
        
        <para>
            
            他の積分ルーチンと同様に <literal>intg</literal> は
            
            スパイク欠損の制約を受けます.
            
        </para>
        
        <para>
            
            スパイクを有するフラットな関数は,
            
            スパイクが十分にスティフな場合には完全にフラットな関数に見えます.
            
        </para>
        
        <para>
            
            これは回避できず,積分処理の動作をよく知ることが必要です.
            
            つまり,  <literal>intg</literal>は 21点 Gauss-Kronrod法を
            
            使用します.
            
            このため, 2つの連続する積分点の間にスパイクがある場合,
            
            検出されず, この関数はスムーズであるとみなされます.
            
        </para>
        
        <para>
            
            しかし, 関数が非常にスムースな場合には警告メッセージが発行されます.
            
            この際,ユーザは積分区間を減らすよう提案されており,
            
            スパイクを見失っていないかを検討する必要があります.
            
        </para>
        
        <para>
            
            以下のグラフがこの現象を図示しています.
            
        </para>
        
        <scilab:image localized="true">
            
            x = 0:.1:22;
            
            y = zeros(1,221); y(1) = 3; y(96) = 1;
            
            plot(x, y);
            
            xtitle("Spike missed");
            
        </scilab:image>
        
        <para>
            
            9番目と10番目の積分点の間に,検出されないスパイクがあり,
            
            <literal>intg</literal> はこの関数をフラットであるとみなします.
            
            次の図では, スパイクは十分に大きく,
            
            積分点によりカバーされます.
            
        </para>
        
        <scilab:image localized="true">
            
            x = 0:21;
            
            y = zeros(1,22); y(1) = 3; y(10) = 1;
            
            plot(x, y);
            
            xtitle("Spike detected");
            
        </scilab:image>
        
        <para>
            
            ソルバがエラーを発生した場合でも,
            
            ユーザが計算された回を表示しようとすると,
            
            3番目の出力引数<literal>ierr</literal>を追加する必要があり,
            
            これによりエラーを警告に変換します.
            
            これは主に丸め誤差の場合に使用されます.
            
        </para>
        
    </refsection>
    
    <refsection>
        
        <title>例</title>
        
        <programlisting role="example"><![CDATA[ 
//Scilabで記述された外部関数
function y=f(x),y=x*sin(30*x)/sqrt(1-((x/(2*%pi))^2)),endfunction
exact=-2.5432596188;
I=intg(0,2*%pi,f)
abs(exact-I)
//1つの引数を有するScilabで記述された関数
function y=f1(x,w),y=x*sin(w*x)/sqrt(1-((x/(2*%pi))^2)),endfunction
I=intg(0,2*%pi,list(f1,30))
abs(exact-I)
// Fortranで記述された外部関数 (Fortranコンパイラが必要)
// Fortranコードの記述
cd TMPDIR;
F=['      double precision function ffun(x)'
   '      double precision x,pi'
   '      pi=3.14159265358979312d+0'
   '      ffun=x*sin(30.0d+0*x)/sqrt(1.0d+0-(x/(2.0d+0*pi))**2)'
   '      return'
   '      end'];
mputl(F,fullfile(TMPDIR,'ffun.f'))
// Fortranコードをコンパイル
l=ilib_for_link('ffun',fullfile(TMPDIR,'ffun.f'),[],'f');
// インクリメンタルリンクの実行
link(l,'ffun','f')
// 関数の積分
I=intg(0,2*%pi,'ffun')
abs(exact-I)
// Cで記述された外部関数 (Cコンパイラが必要)
// Cコードの記述
C=['#include <math.h>'
   'double cfun(double *x)'
   '{'
   '  double y,pi=3.14159265358979312;'
   '  y=*x/(2.0e0*pi);'
   '  return *x*sin(30.0e0**x)/sqrt(1.0e0-y*y);'
   '}'];
mputl(C,fullfile(TMPDIR,'cfun.c'))
// Cコードをコンパイル
l=ilib_for_link('cfun',fullfile(TMPDIR,'cfun.c'),[],'c');
// インクリメンタルリンクの実行
link(l,'cfun','c')
// 関数の積分
I=intg(0,2*%pi,'cfun')
abs(exact-I)
 ]]></programlisting>
        
    </refsection>
    
    <refsection role="see also">
        
        <title>参照</title>
        
        <simplelist type="inline">
            
            <member>
                
                <link linkend="intc">intc</link>
                
            </member>
            
            <member>
                
                <link linkend="intl">intl</link>
                
            </member>
            
            <member>
                
                <link linkend="inttrap">inttrap</link>
                
            </member>
            
            <member>
                
                <link linkend="intsplin">intsplin</link>
                
            </member>
            
            <member>
                
                <link linkend="ode">ode</link>
                
            </member>
            
        </simplelist>
        
    </refsection>
    
    <refsection>
        
        <title>使用される関数</title>
        
        <para>関連するルーチンは
            
            SCI/modules/differential_equations/src/fortran ディレクトリにあります
            
            :
            
        </para>
        
        <para>quadpackのdqags.f および dqagse.f</para>
        
    </refsection>
    
</refentry>

