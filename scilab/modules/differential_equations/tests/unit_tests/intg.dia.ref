// =============================================================================
// Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
// Copyright (C) 2007-2008 - INRIA
//
//  This file is distributed under the same license as the Scilab package.
// =============================================================================
// <-- CLI SHELL MODE -->
// <-- ENGLISH IMPOSED -->
// Function written in the Scilab language
function y=f(x),y=x*sin(30*x)/sqrt(1-((x/(2*%pi))^2)),endfunction
exact=-2.5432596188;
I=intg(0,2*%pi,f);
if abs(exact-I) > 1e-9 then bugmes();quit;end
// Function with an argument written in the Scilab language
function y=f1(x,w),y=x*sin(w*x)/sqrt(1-((x/(2*%pi))^2)),endfunction
I=intg(0,2*%pi,list(f1,30))
 I  =
 
  - 2.5432596  
abs(exact-I)
 ans  =
 
    9.337D-11  
if abs(exact-I) > 1e-9 then bugmes();quit;end
// Function written in Fortran (a Fortran compiler is required)
// define a Fortran function
cd TMPDIR;
F=['      double precision function ffun(x)'
   '      double precision x,pi'
   '      pi=3.14159265358979312d+0'
   '      ffun=x*sin(30.0d+0*x)/sqrt(1.0d+0-(x/(2.0d+0*pi))**2)'
   '      return'
   '      end'];
mputl(F,fullfile(TMPDIR,'ffun.f'))
 ans  =
 
  T  
// compile the function
l=ilib_for_link('ffun',fullfile(TMPDIR,'ffun.f'),[],'f');
   Generate a loader file
   Generate a Makefile
   ilib_gen_Make: Copy compilation files (Makefile*, libtool...) to TMPDIR
   ilib_gen_Make: Copy TMPDIR/ffun.f to TMPDIR
   ilib_gen_Make: Modification of the Makefile in TMPDIR.
   Running the Makefile
   Generate a cleaner file
// add the function to the working environment
link(l,'ffun','f')
Shared archive loaded.
Link done.
 ans  =
 
    0.  
// integrate the function
I=intg(0,2*%pi,'ffun')
 I  =
 
  - 2.5432596  
abs(exact-I)
 ans  =
 
    9.337D-11  
if abs(exact-I) > 1e-9 then bugmes();quit;end
// Function written in C (a C compiler is required)
// define a C function
C=['#include <math.h>'
   'double cfun(double *x)'
   '{'
   '  double y,pi=3.14159265358979312;'
   '  y=*x/(2.0e0*pi);'
   '  return *x*sin(30.0e0**x)/sqrt(1.0e0-y*y);'
   '}'];
mputl(C,fullfile(TMPDIR,'cfun.c'))
 ans  =
 
  T  
// compile the function
l=ilib_for_link('cfun',fullfile(TMPDIR,'cfun.c'),[],'c');
   Generate a loader file
   Generate a Makefile
   ilib_gen_Make: Copy compilation files (Makefile*, libtool...) to TMPDIR
   ilib_gen_Make: Copy TMPDIR/cfun.c to TMPDIR
   ilib_gen_Make: Modification of the Makefile in TMPDIR.
   Running the Makefile
   Generate a cleaner file
// add the function to the working environment
link(l,'cfun','c')
Shared archive loaded.
Link done.
 ans  =
 
    1.  
// integrate the function
I=intg(0,2*%pi,'cfun')
 I  =
 
  - 2.5432596  
abs(exact-I)
 ans  =
 
    9.337D-11  
if abs(exact-I) > 1e-9 then bugmes();quit;end
