/* The following code was generated by JFlex 1.4.3 on 11/07/11 22:32 */

//CHECKSTYLE:OFF

package org.scilab.modules.scinotes;

import java.util.Arrays;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.Iterator;
import java.io.IOException;
import javax.swing.text.BadLocationException;
import javax.swing.text.Element;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/07/11 22:32 from the specification file
 * <tt>scilab.jflex</tt>
 */
public final class ScilabLexer extends ScilabLexerConstants {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int BREAKSTRING = 14;
  public static final int COMMANDSWHITE = 12;
  public static final int BLOCKCOMMENT = 6;
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 4;
  public static final int FIELD = 8;
  public static final int COMMANDS = 10;
  public static final int QSTRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\111\1\1\1\0\1\121\1\114\22\0\1\72\1\117\1\10"+
    "\1\115\1\112\1\11\1\51\1\7\1\3\1\4\1\6\1\43\1\120"+
    "\1\44\1\40\1\5\12\116\1\113\1\124\1\47\1\45\1\50\1\115"+
    "\1\53\1\101\1\102\1\26\1\36\1\34\1\15\1\104\1\31\1\27"+
    "\1\105\1\110\1\76\1\33\1\73\1\32\1\35\1\123\1\37\1\25"+
    "\1\13\1\77\1\106\1\30\1\123\1\100\1\74\1\2\1\41\1\4"+
    "\1\42\1\122\1\0\1\24\1\65\1\55\1\57\1\16\1\14\1\103"+
    "\1\60\1\20\1\107\1\66\1\63\1\70\1\21\1\56\1\17\1\67"+
    "\1\61\1\23\1\12\1\54\1\75\1\62\1\71\1\64\1\22\1\2"+
    "\1\52\1\4\1\46\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\4\0\1\1\1\0\1\2\1\3\1\4"+
    "\2\5\1\6\1\7\14\10\1\11\7\5\7\10\1\12"+
    "\1\13\2\14\1\15\1\2\1\1\1\16\1\17\1\1"+
    "\1\20\1\21\12\22\1\23\6\22\1\24\2\22\1\25"+
    "\1\26\1\27\1\25\1\30\1\31\1\32\2\1\1\12"+
    "\1\13\2\16\1\33\1\34\1\5\1\35\1\0\2\36"+
    "\1\10\1\36\12\10\1\37\5\10\2\5\1\14\1\15"+
    "\1\0\2\5\3\10\1\40\3\10\1\0\1\35\2\0"+
    "\1\35\1\15\1\0\1\41\33\0\1\42\1\43\2\0"+
    "\1\1\1\44\3\0\6\10\1\45\6\10\1\36\1\10"+
    "\1\15\2\35\10\10\2\15\1\0\1\41\31\0\1\42"+
    "\1\0\3\10\1\46\1\47\13\10\1\41\13\0\1\50"+
    "\15\0\1\42\11\10\26\0\1\10\1\46\3\10\26\0"+
    "\2\10\26\0\1\51\16\0\1\52\1\0\1\53\271\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[555];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\125\0\252\0\377\0\u0154\0\u01a9\0\u01fe\0\u0253"+
    "\0\u02a8\0\u02a8\0\u02a8\0\u02fd\0\u0352\0\u03a7\0\u03a7\0\u03fc"+
    "\0\u0451\0\u04a6\0\u04fb\0\u0550\0\u05a5\0\u05fa\0\u064f\0\u06a4"+
    "\0\u06f9\0\u074e\0\u07a3\0\u07f8\0\u084d\0\u08a2\0\u08f7\0\u094c"+
    "\0\u09a1\0\u09f6\0\u0a4b\0\u0aa0\0\u0af5\0\u0b4a\0\u0b9f\0\u0bf4"+
    "\0\u0c49\0\u0c9e\0\u0cf3\0\u0d48\0\u0550\0\u084d\0\u0d9d\0\u084d"+
    "\0\u0df2\0\u02a8\0\u0e47\0\u0e9c\0\u02a8\0\u02a8\0\u02a8\0\u0ef1"+
    "\0\u0f46\0\u0f9b\0\u0ff0\0\u1045\0\u109a\0\u10ef\0\u1144\0\u1199"+
    "\0\u02a8\0\u11ee\0\u1243\0\u1298\0\u12ed\0\u1342\0\u1397\0\u02a8"+
    "\0\u13ec\0\u1441\0\u02a8\0\u02a8\0\u1496\0\u1496\0\u02a8\0\u14eb"+
    "\0\u14eb\0\u1540\0\u1595\0\u02a8\0\u02a8\0\u15ea\0\u163f\0\u02a8"+
    "\0\u1694\0\u02a8\0\u02a8\0\u16e9\0\u0550\0\u173e\0\u1793\0\u17e8"+
    "\0\u183d\0\u1892\0\u18e7\0\u193c\0\u1991\0\u19e6\0\u1a3b\0\u1a90"+
    "\0\u1ae5\0\u1b3a\0\u0550\0\u1b8f\0\u1be4\0\u1c39\0\u1c8e\0\u1ce3"+
    "\0\u1d38\0\u1d8d\0\u1de2\0\u1e37\0\u1e8c\0\u1ee1\0\u1f36\0\u1f8b"+
    "\0\u1fe0\0\u2035\0\u0550\0\u208a\0\u20df\0\u2134\0\u2189\0\u21de"+
    "\0\u084d\0\u0d48\0\u2233\0\u2288\0\u0e47\0\u22dd\0\u2332\0\u2387"+
    "\0\u23dc\0\u2431\0\u2486\0\u24db\0\u2530\0\u2585\0\u25da\0\u262f"+
    "\0\u2684\0\u26d9\0\u272e\0\u2783\0\u27d8\0\u1144\0\u282d\0\u2882"+
    "\0\u28d7\0\u292c\0\u2981\0\u29d6\0\u2a2b\0\u2a80\0\u2ad5\0\u13ec"+
    "\0\u2b2a\0\u02a8\0\u02a8\0\u1441\0\u14eb\0\u2b7f\0\u163f\0\u2bd4"+
    "\0\u2c29\0\u2c7e\0\u2cd3\0\u2d28\0\u2d7d\0\u2dd2\0\u2e27\0\u2e7c"+
    "\0\u2ed1\0\u2f26\0\u2f7b\0\u2fd0\0\u3025\0\u307a\0\u30cf\0\u3124"+
    "\0\u3179\0\u31ce\0\u1ee1\0\u1f36\0\u3223\0\u3278\0\u32cd\0\u3322"+
    "\0\u3377\0\u33cc\0\u3421\0\u3476\0\u34cb\0\u3520\0\u3575\0\u35ca"+
    "\0\u361f\0\u3674\0\u36c9\0\u371e\0\u3773\0\u37c8\0\u381d\0\u3872"+
    "\0\u38c7\0\u391c\0\u3971\0\u39c6\0\u3a1b\0\u3a70\0\u3ac5\0\u3b1a"+
    "\0\u3b6f\0\u3bc4\0\u3c19\0\u3c6e\0\u3cc3\0\u3d18\0\u3d6d\0\u3dc2"+
    "\0\u3e17\0\u13ec\0\u3e6c\0\u3ec1\0\u3f16\0\u3f6b\0\u3fc0\0\u0550"+
    "\0\u4015\0\u406a\0\u40bf\0\u4114\0\u4169\0\u41be\0\u4213\0\u4268"+
    "\0\u42bd\0\u4312\0\u4367\0\u02a8\0\u43bc\0\u4411\0\u4466\0\u44bb"+
    "\0\u4510\0\u4565\0\u45ba\0\u460f\0\u4664\0\u46b9\0\u470e\0\u02a8"+
    "\0\u4763\0\u47b8\0\u480d\0\u4862\0\u48b7\0\u490c\0\u4961\0\u49b6"+
    "\0\u4a0b\0\u4a60\0\u4ab5\0\u4b0a\0\u4b5f\0\u2bd4\0\u4bb4\0\u4c09"+
    "\0\u4c5e\0\u4cb3\0\u4d08\0\u4d5d\0\u4db2\0\u4e07\0\u4e5c\0\u4eb1"+
    "\0\u4f06\0\u4f5b\0\u4fb0\0\u5005\0\u505a\0\u50af\0\u5104\0\u5159"+
    "\0\u51ae\0\u5203\0\u5258\0\u52ad\0\u5302\0\u5357\0\u53ac\0\u5401"+
    "\0\u5456\0\u54ab\0\u5500\0\u5555\0\u55aa\0\u55ff\0\u0550\0\u5654"+
    "\0\u56a9\0\u56fe\0\u5753\0\u57a8\0\u57fd\0\u5852\0\u58a7\0\u58fc"+
    "\0\u5951\0\u59a6\0\u59fb\0\u5a50\0\u5aa5\0\u5afa\0\u5b4f\0\u5ba4"+
    "\0\u5bf9\0\u5c4e\0\u5ca3\0\u5cf8\0\u5d4d\0\u5da2\0\u5df7\0\u5e4c"+
    "\0\u5ea1\0\u5ef6\0\u5f4b\0\u5fa0\0\u5ff5\0\u604a\0\u609f\0\u60f4"+
    "\0\u6149\0\u619e\0\u61f3\0\u6248\0\u629d\0\u62f2\0\u6347\0\u639c"+
    "\0\u63f1\0\u6446\0\u649b\0\u64f0\0\u6545\0\u659a\0\u65ef\0\u6644"+
    "\0\u0550\0\u6699\0\u66ee\0\u6743\0\u6798\0\u67ed\0\u6842\0\u6897"+
    "\0\u68ec\0\u6941\0\u6996\0\u69eb\0\u6a40\0\u6a95\0\u6aea\0\u02a8"+
    "\0\u6b3f\0\u62f2\0\u6b94\0\u6be9\0\u6c3e\0\u6c93\0\u6ce8\0\u6d3d"+
    "\0\u6d92\0\u6de7\0\u6e3c\0\u6e91\0\u6ee6\0\u6f3b\0\u6f90\0\u6fe5"+
    "\0\u703a\0\u708f\0\u70e4\0\u7139\0\u718e\0\u71e3\0\u7238\0\u728d"+
    "\0\u72e2\0\u7337\0\u738c\0\u73e1\0\u7436\0\u748b\0\u74e0\0\u7535"+
    "\0\u758a\0\u75df\0\u7634\0\u7689\0\u76de\0\u7733\0\u7788\0\u77dd"+
    "\0\u7832\0\u7887\0\u78dc\0\u7931\0\u7986\0\u79db\0\u7a30\0\u7a85"+
    "\0\u7ada\0\u7b2f\0\u7b84\0\u7bd9\0\u7c2e\0\u7c83\0\u7cd8\0\u7d2d"+
    "\0\u7d82\0\u7dd7\0\u7e2c\0\u7e81\0\u7ed6\0\u7f2b\0\u7f80\0\u7fd5"+
    "\0\u802a\0\u807f\0\u80d4\0\u8129\0\u817e\0\u81d3\0\u8228\0\u827d"+
    "\0\u82d2\0\u8327\0\u837c\0\u83d1\0\u8426\0\u847b\0\u84d0\0\u8525"+
    "\0\u857a\0\u85cf\0\u8624\0\u8679\0\u86ce\0\u8723\0\u8778\0\u87cd"+
    "\0\u8822\0\u8877\0\u88cc\0\u8921\0\u8976\0\u89cb\0\u8a20\0\u8a75"+
    "\0\u8aca\0\u8b1f\0\u8b74\0\u8bc9\0\u8c1e\0\u8c73\0\u8cc8\0\u8d1d"+
    "\0\u8d72\0\u8dc7\0\u8e1c\0\u8e71\0\u8ec6\0\u8f1b\0\u8f70\0\u8fc5"+
    "\0\u901a\0\u906f\0\u90c4\0\u9119\0\u916e\0\u91c3\0\u9218\0\u926d"+
    "\0\u92c2\0\u9317\0\u936c\0\u93c1\0\u9416\0\u946b\0\u94c0\0\u9515"+
    "\0\u956a\0\u95bf\0\u9614\0\u9669\0\u96be\0\u9713\0\u9768\0\u97bd"+
    "\0\u9812\0\u9867\0\u98bc\0\u9911\0\u9966\0\u99bb\0\u9a10\0\u9a65"+
    "\0\u9aba\0\u9b0f\0\u9b64\0\u9bb9\0\u9c0e\0\u9c63\0\u9cb8\0\u9d0d"+
    "\0\u9d62\0\u9db7\0\u9e0c\0\u9e61\0\u9eb6\0\u9f0b\0\u9f60\0\u9fb5"+
    "\0\ua00a\0\ua05f\0\ua0b4\0\ua109\0\ua15e\0\ua1b3\0\ua208\0\ua25d"+
    "\0\ua2b2\0\ua307\0\ua35c\0\ua3b1\0\ua406\0\ua45b\0\ua4b0\0\ua505"+
    "\0\ua55a\0\ua5af\0\ua604\0\ua659\0\ua6ae\0\ua703\0\ua758\0\ua7ad"+
    "\0\ua802\0\ua857\0\ua8ac";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[555];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\11\2\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\2\24"+
    "\1\30\1\31\1\32\2\24\1\33\7\24\1\34\2\35"+
    "\1\36\1\37\2\40\1\41\1\40\1\42\1\43\1\40"+
    "\1\24\1\44\1\45\1\46\1\24\1\47\1\50\2\24"+
    "\1\51\1\24\1\52\2\24\1\53\16\24\1\54\1\55"+
    "\1\56\1\11\1\24\1\57\1\24\1\60\1\11\2\24"+
    "\1\11\1\61\1\62\5\61\2\63\27\61\1\64\31\61"+
    "\1\65\16\61\1\66\2\61\1\62\10\61\25\67\1\70"+
    "\1\71\1\72\3\67\1\73\1\74\1\75\1\76\10\67"+
    "\1\77\10\67\1\100\11\67\1\101\1\67\1\102\3\67"+
    "\1\103\1\104\1\105\2\67\1\106\1\107\2\67\1\110"+
    "\1\111\20\67\1\112\16\67\1\70\1\71\1\72\3\67"+
    "\1\73\1\74\1\75\1\76\10\67\1\77\10\67\1\100"+
    "\11\67\1\101\1\67\1\102\3\67\1\103\1\104\1\105"+
    "\2\67\1\106\1\107\2\67\1\110\1\111\12\67\1\113"+
    "\1\114\7\113\27\115\14\113\16\115\1\113\16\115\1\113"+
    "\1\116\2\113\1\115\1\113\1\115\2\113\2\115\2\113"+
    "\1\114\1\113\1\117\66\113\1\120\16\113\1\121\13\113"+
    "\5\122\1\123\64\122\1\124\16\122\1\125\6\122\1\113"+
    "\3\122\1\113\5\62\1\126\32\62\1\127\31\62\1\124"+
    "\16\62\1\125\13\62\132\0\1\130\1\131\31\0\1\132"+
    "\4\0\1\133\65\0\1\132\36\0\1\133\171\0\1\134"+
    "\24\0\4\135\1\136\1\137\1\140\1\141\2\135\14\24"+
    "\14\0\16\24\1\0\16\24\1\0\1\24\2\0\3\24"+
    "\2\0\2\24\13\0\26\24\14\0\4\24\1\142\1\143"+
    "\10\24\1\0\16\24\1\0\1\24\2\0\3\24\2\0"+
    "\2\24\13\0\21\24\1\144\4\24\14\0\16\24\1\0"+
    "\16\24\1\0\1\24\2\0\3\24\2\0\2\24\13\0"+
    "\26\24\14\0\1\145\1\24\1\146\13\24\1\0\16\24"+
    "\1\0\1\24\2\0\3\24\2\0\2\24\13\0\26\24"+
    "\14\0\16\24\1\0\16\24\1\0\1\24\2\0\3\24"+
    "\2\0\2\24\13\0\7\24\1\147\16\24\14\0\7\24"+
    "\1\150\5\24\1\151\1\0\16\24\1\0\1\24\2\0"+
    "\3\24\2\0\2\24\13\0\12\24\1\152\13\24\14\0"+
    "\16\24\1\0\16\24\1\0\1\24\2\0\3\24\2\0"+
    "\2\24\13\0\2\24\1\153\23\24\14\0\16\24\1\0"+
    "\16\24\1\0\1\24\2\0\3\24\2\0\2\24\13\0"+
    "\4\24\1\154\21\24\14\0\6\24\1\155\7\24\1\0"+
    "\16\24\1\0\1\24\2\0\3\24\2\0\2\24\13\0"+
    "\26\24\14\0\11\24\1\156\4\24\1\0\16\24\1\0"+
    "\1\24\2\0\3\24\2\0\2\24\13\0\14\24\1\157"+
    "\11\24\14\0\16\24\1\0\16\24\1\0\1\24\2\0"+
    "\3\24\2\0\2\24\13\0\13\24\1\160\12\24\14\0"+
    "\16\24\1\0\16\24\1\0\1\24\2\0\3\24\2\0"+
    "\2\24\6\0\1\161\1\162\1\132\30\0\1\163\1\161"+
    "\1\132\2\0\1\133\50\0\1\164\53\0\1\133\64\0"+
    "\2\133\31\0\1\165\2\133\2\0\1\133\64\0\2\133"+
    "\31\0\1\165\2\133\2\0\1\133\2\0\1\133\121\0"+
    "\1\132\124\0\1\132\2\0\1\132\125\0\1\166\125\0"+
    "\1\167\64\0\12\24\1\170\13\24\14\0\2\24\1\171"+
    "\13\24\1\0\16\24\1\0\1\24\2\0\3\24\2\0"+
    "\2\24\13\0\1\172\25\24\14\0\16\24\1\0\16\24"+
    "\1\0\1\24\2\0\3\24\2\0\2\24\13\0\26\24"+
    "\14\0\2\24\1\173\13\24\1\0\16\24\1\0\1\24"+
    "\2\0\3\24\2\0\2\24\13\0\4\24\1\174\21\24"+
    "\14\0\16\24\1\0\16\24\1\0\1\24\2\0\3\24"+
    "\2\0\2\24\13\0\26\24\14\0\4\24\1\175\11\24"+
    "\1\0\16\24\1\0\1\24\2\0\3\24\2\0\2\24"+
    "\13\0\26\24\14\0\5\24\1\176\10\24\1\0\16\24"+
    "\1\0\1\24\2\0\3\24\2\0\2\24\13\0\26\24"+
    "\14\0\1\151\15\24\1\0\16\24\1\0\1\24\2\0"+
    "\3\24\2\0\2\24\73\0\1\177\16\0\1\200\5\0"+
    "\1\201\77\0\1\200\16\0\1\202\25\0\4\203\1\204"+
    "\15\203\1\204\1\203\1\204\1\203\1\164\13\0\3\203"+
    "\1\204\12\203\1\0\16\203\1\0\1\203\2\0\1\203"+
    "\1\57\1\203\2\0\2\203\1\0\1\61\1\0\5\61"+
    "\2\205\27\61\1\0\31\61\1\0\16\61\1\0\2\61"+
    "\1\0\10\61\7\0\2\61\154\0\1\206\102\0\1\207"+
    "\1\0\1\210\43\0\1\211\56\0\1\212\5\0\1\213"+
    "\36\0\1\214\62\0\1\215\51\0\1\216\51\0\1\217"+
    "\3\0\1\220\173\0\1\221\51\0\1\222\124\0\1\223"+
    "\6\0\1\224\107\0\27\225\3\0\1\225\7\0\16\225"+
    "\1\226\16\225\1\226\4\0\1\225\3\0\2\225\13\0"+
    "\1\227\172\0\1\230\70\0\1\231\121\0\1\232\41\0"+
    "\1\233\57\0\1\234\42\0\1\235\61\0\1\236\126\0"+
    "\1\237\104\0\41\240\1\241\50\240\1\242\12\240\5\0"+
    "\1\243\1\244\130\0\26\115\14\0\16\115\1\0\16\115"+
    "\1\0\1\115\2\0\3\115\2\0\2\115\4\0\1\117"+
    "\66\0\1\245\16\0\1\245\13\0\5\122\1\0\64\122"+
    "\1\0\16\122\1\0\6\122\1\0\3\122\1\0\5\246"+
    "\1\130\64\246\1\0\32\246\5\0\1\130\157\0\1\247"+
    "\72\0\1\131\116\0\7\134\2\250\30\134\1\251\50\134"+
    "\1\252\12\134\12\0\5\24\1\253\20\24\14\0\16\24"+
    "\1\0\16\24\1\0\1\24\2\0\3\24\2\0\2\24"+
    "\13\0\6\24\1\135\17\24\14\0\16\24\1\0\16\24"+
    "\1\0\1\24\2\0\3\24\2\0\2\24\13\0\7\24"+
    "\1\254\16\24\14\0\16\24\1\0\16\24\1\0\1\24"+
    "\2\0\3\24\2\0\2\24\13\0\12\24\1\255\13\24"+
    "\14\0\16\24\1\0\16\24\1\0\1\24\2\0\3\24"+
    "\2\0\2\24\13\0\4\24\1\256\21\24\14\0\16\24"+
    "\1\0\16\24\1\0\1\24\2\0\3\24\2\0\2\24"+
    "\13\0\26\24\14\0\10\24\1\153\5\24\1\0\16\24"+
    "\1\0\1\24\2\0\3\24\2\0\2\24\13\0\23\24"+
    "\1\257\2\24\14\0\16\24\1\0\16\24\1\0\1\24"+
    "\2\0\3\24\2\0\2\24\13\0\7\24\1\260\16\24"+
    "\14\0\16\24\1\0\16\24\1\0\1\24\2\0\3\24"+
    "\2\0\2\24\13\0\26\24\14\0\5\24\1\153\10\24"+
    "\1\0\16\24\1\0\1\24\2\0\3\24\2\0\2\24"+
    "\13\0\26\24\14\0\3\24\1\261\12\24\1\0\16\24"+
    "\1\0\1\24\2\0\3\24\2\0\2\24\13\0\11\24"+
    "\1\262\14\24\14\0\16\24\1\0\16\24\1\0\1\24"+
    "\2\0\3\24\2\0\2\24\13\0\6\24\1\263\17\24"+
    "\14\0\16\24\1\0\16\24\1\0\1\24\2\0\3\24"+
    "\2\0\2\24\13\0\26\24\14\0\1\264\15\24\1\0"+
    "\16\24\1\0\1\24\2\0\3\24\2\0\2\24\13\0"+
    "\26\24\14\0\7\24\1\265\6\24\1\0\16\24\1\0"+
    "\1\24\2\0\3\24\2\0\2\24\13\0\6\24\1\266"+
    "\17\24\14\0\16\24\1\0\16\24\1\0\1\24\2\0"+
    "\3\24\2\0\2\24\13\0\26\24\14\0\2\24\1\267"+
    "\13\24\1\0\16\24\1\0\1\24\2\0\3\24\2\0"+
    "\2\24\13\0\15\24\1\270\10\24\14\0\16\24\1\0"+
    "\16\24\1\0\1\24\2\0\3\24\2\0\2\24\13\0"+
    "\14\24\1\271\11\24\14\0\16\24\1\0\16\24\1\0"+
    "\1\24\2\0\3\24\2\0\2\24\41\0\1\132\72\0"+
    "\1\132\31\0\1\132\124\0\1\163\102\0\1\272\15\0"+
    "\1\272\1\0\1\272\20\0\1\272\36\0\1\164\13\0"+
    "\2\133\32\0\4\133\131\0\1\273\125\0\1\274\64\0"+
    "\1\275\10\24\1\276\14\24\14\0\16\24\1\0\16\24"+
    "\1\0\1\24\2\0\3\24\2\0\2\24\13\0\7\24"+
    "\1\277\16\24\14\0\16\24\1\0\16\24\1\0\1\24"+
    "\2\0\3\24\2\0\2\24\13\0\26\24\14\0\4\24"+
    "\1\300\11\24\1\0\16\24\1\0\1\24\2\0\3\24"+
    "\2\0\2\24\13\0\1\301\10\24\1\302\14\24\14\0"+
    "\16\24\1\0\16\24\1\0\1\24\2\0\3\24\2\0"+
    "\2\24\13\0\6\24\1\303\17\24\14\0\16\24\1\0"+
    "\16\24\1\0\1\24\2\0\3\24\2\0\2\24\13\0"+
    "\4\24\1\304\21\24\14\0\16\24\1\0\16\24\1\0"+
    "\1\24\2\0\3\24\2\0\2\24\73\0\1\177\16\0"+
    "\1\200\105\0\1\200\16\0\1\200\25\0\26\203\14\0"+
    "\16\203\1\0\16\203\1\0\1\203\2\0\3\203\2\0"+
    "\2\203\13\0\26\203\3\0\2\305\7\0\16\203\1\0"+
    "\16\203\1\0\1\203\2\0\1\203\1\306\1\203\2\0"+
    "\2\203\6\0\1\307\32\0\1\206\31\0\1\310\16\0"+
    "\1\310\74\0\1\311\133\0\1\312\117\0\1\313\120\0"+
    "\1\314\130\0\1\315\57\0\1\316\5\0\1\317\161\0"+
    "\1\320\102\0\1\321\142\0\1\322\70\0\1\323\140\0"+
    "\1\324\105\0\1\325\211\0\1\326\125\0\1\327\32\0"+
    "\27\225\3\0\1\225\6\0\1\330\16\225\1\0\16\225"+
    "\5\0\1\225\3\0\2\225\13\0\1\331\170\0\1\332"+
    "\67\0\1\333\115\0\1\334\175\0\1\335\122\0\1\336"+
    "\117\0\1\337\131\0\1\340\64\0\1\341\103\0\41\240"+
    "\1\241\50\240\1\342\12\240\5\246\1\0\64\246\1\0"+
    "\32\246\7\0\2\134\114\0\7\134\2\250\30\134\1\251"+
    "\50\134\1\343\12\134\7\0\2\242\126\0\11\24\1\135"+
    "\14\24\14\0\16\24\1\0\16\24\1\0\1\24\2\0"+
    "\3\24\2\0\2\24\13\0\2\24\1\135\23\24\14\0"+
    "\16\24\1\0\16\24\1\0\1\24\2\0\3\24\2\0"+
    "\2\24\13\0\7\24\1\135\16\24\14\0\16\24\1\0"+
    "\16\24\1\0\1\24\2\0\3\24\2\0\2\24\13\0"+
    "\7\24\1\173\16\24\14\0\16\24\1\0\16\24\1\0"+
    "\1\24\2\0\3\24\2\0\2\24\13\0\24\24\1\344"+
    "\1\24\14\0\16\24\1\0\16\24\1\0\1\24\2\0"+
    "\3\24\2\0\2\24\13\0\26\24\14\0\1\24\1\345"+
    "\14\24\1\0\16\24\1\0\1\24\2\0\3\24\2\0"+
    "\2\24\13\0\2\24\1\346\23\24\14\0\16\24\1\0"+
    "\16\24\1\0\1\24\2\0\3\24\2\0\2\24\13\0"+
    "\4\24\1\347\21\24\14\0\16\24\1\0\16\24\1\0"+
    "\1\24\2\0\3\24\2\0\2\24\13\0\1\350\25\24"+
    "\14\0\16\24\1\0\16\24\1\0\1\24\2\0\3\24"+
    "\2\0\2\24\13\0\11\24\1\351\14\24\14\0\16\24"+
    "\1\0\16\24\1\0\1\24\2\0\3\24\2\0\2\24"+
    "\13\0\4\24\1\352\21\24\14\0\16\24\1\0\16\24"+
    "\1\0\1\24\2\0\3\24\2\0\2\24\13\0\1\353"+
    "\25\24\14\0\16\24\1\0\16\24\1\0\1\24\2\0"+
    "\3\24\2\0\2\24\13\0\26\24\14\0\5\24\1\263"+
    "\10\24\1\0\16\24\1\0\1\24\2\0\3\24\2\0"+
    "\2\24\13\0\17\24\1\354\6\24\14\0\16\24\1\0"+
    "\16\24\1\0\1\24\2\0\3\24\2\0\2\24\13\0"+
    "\15\24\1\135\10\24\14\0\16\24\1\0\16\24\1\0"+
    "\1\24\2\0\3\24\2\0\2\24\44\0\2\305\51\0"+
    "\1\305\20\0\26\24\14\0\1\24\1\355\14\24\1\0"+
    "\16\24\1\0\1\24\2\0\3\24\2\0\2\24\13\0"+
    "\4\24\1\173\21\24\14\0\16\24\1\0\16\24\1\0"+
    "\1\24\2\0\3\24\2\0\2\24\13\0\1\356\25\24"+
    "\14\0\16\24\1\0\16\24\1\0\1\24\2\0\3\24"+
    "\2\0\2\24\13\0\4\24\1\357\21\24\14\0\16\24"+
    "\1\0\16\24\1\0\1\24\2\0\3\24\2\0\2\24"+
    "\13\0\26\24\14\0\1\360\15\24\1\0\16\24\1\0"+
    "\1\24\2\0\3\24\2\0\2\24\13\0\26\24\14\0"+
    "\1\361\15\24\1\0\16\24\1\0\1\24\2\0\3\24"+
    "\2\0\2\24\13\0\26\24\14\0\7\24\1\362\6\24"+
    "\1\0\16\24\1\0\1\24\2\0\3\24\2\0\2\24"+
    "\13\0\12\24\1\363\13\24\14\0\16\24\1\0\16\24"+
    "\1\0\1\24\2\0\3\24\2\0\2\24\117\0\1\305"+
    "\20\0\26\203\14\0\16\203\1\0\16\203\1\0\1\203"+
    "\2\0\1\203\1\306\1\203\2\0\2\203\6\0\1\364"+
    "\124\0\1\307\64\0\1\310\16\0\1\310\116\0\1\365"+
    "\77\0\1\366\143\0\1\367\110\0\1\370\63\0\1\371"+
    "\174\0\1\372\110\0\1\373\70\0\1\374\133\0\1\375"+
    "\155\0\1\376\120\0\1\377\76\0\1\u0100\157\0\1\u0101"+
    "\63\0\1\u0102\133\0\1\u0103\107\0\26\u0104\4\0\1\u0104"+
    "\7\0\16\u0104\1\0\16\u0104\5\0\1\u0104\4\0\1\u0104"+
    "\20\0\1\u0105\161\0\1\u0106\71\0\1\u0107\161\0\1\u0108"+
    "\72\0\1\u0109\121\0\1\u010a\124\0\1\u010b\161\0\1\u010c"+
    "\123\0\1\u010d\47\0\7\134\2\u010e\30\134\1\251\50\134"+
    "\1\252\12\134\12\0\15\24\1\u010f\10\24\14\0\16\24"+
    "\1\0\16\24\1\0\1\24\2\0\3\24\2\0\2\24"+
    "\13\0\1\u0110\25\24\14\0\16\24\1\0\16\24\1\0"+
    "\1\24\2\0\3\24\2\0\2\24\13\0\26\24\14\0"+
    "\1\145\15\24\1\0\16\24\1\0\1\24\2\0\3\24"+
    "\2\0\2\24\13\0\6\24\1\u0111\17\24\14\0\16\24"+
    "\1\0\16\24\1\0\1\24\2\0\3\24\2\0\2\24"+
    "\13\0\4\24\1\350\21\24\14\0\16\24\1\0\16\24"+
    "\1\0\1\24\2\0\3\24\2\0\2\24\13\0\26\24"+
    "\14\0\1\24\1\u0112\14\24\1\0\16\24\1\0\1\24"+
    "\2\0\3\24\2\0\2\24\13\0\26\24\14\0\1\24"+
    "\1\u0113\14\24\1\0\16\24\1\0\1\24\2\0\3\24"+
    "\2\0\2\24\13\0\20\24\1\u0114\5\24\14\0\16\24"+
    "\1\0\16\24\1\0\1\24\2\0\3\24\2\0\2\24"+
    "\13\0\26\24\14\0\4\24\1\173\11\24\1\0\16\24"+
    "\1\0\1\24\2\0\3\24\2\0\2\24\13\0\6\24"+
    "\1\u0115\17\24\14\0\16\24\1\0\16\24\1\0\1\24"+
    "\2\0\3\24\2\0\2\24\13\0\26\24\14\0\5\24"+
    "\1\u0116\10\24\1\0\16\24\1\0\1\24\2\0\3\24"+
    "\2\0\2\24\13\0\26\24\14\0\5\24\1\u0117\10\24"+
    "\1\0\16\24\1\0\1\24\2\0\3\24\2\0\2\24"+
    "\13\0\26\24\14\0\14\24\1\351\1\24\1\0\16\24"+
    "\1\0\1\24\2\0\3\24\2\0\2\24\13\0\4\24"+
    "\1\153\21\24\14\0\16\24\1\0\16\24\1\0\1\24"+
    "\2\0\3\24\2\0\2\24\13\0\26\24\14\0\12\24"+
    "\1\350\3\24\1\0\16\24\1\0\1\24\2\0\3\24"+
    "\2\0\2\24\17\0\1\u0118\127\0\1\u0119\121\0\1\u011a"+
    "\126\0\1\u011b\175\0\1\u011c\51\0\1\u011d\165\0\1\u011e"+
    "\71\0\1\u0100\201\0\1\u0100\47\0\1\u011f\116\0\1\u0120"+
    "\167\0\1\u0121\55\0\1\u0122\125\0\1\u0123\123\0\26\u0104"+
    "\1\u0124\3\0\1\u0104\7\0\16\u0104\1\0\16\u0104\5\0"+
    "\1\u0104\4\0\1\u0104\114\0\1\u0125\72\0\1\u0126\135\0"+
    "\1\u0127\52\0\1\u0128\125\0\1\u0129\127\0\1\u012a\156\0"+
    "\1\u012b\136\0\1\u012c\52\0\1\u012d\120\0\25\24\1\135"+
    "\14\0\16\24\1\0\16\24\1\0\1\24\2\0\3\24"+
    "\2\0\2\24\13\0\6\24\1\u012e\17\24\14\0\16\24"+
    "\1\0\16\24\1\0\1\24\2\0\3\24\2\0\2\24"+
    "\13\0\2\24\1\u012f\23\24\14\0\16\24\1\0\16\24"+
    "\1\0\1\24\2\0\3\24\2\0\2\24\13\0\1\153"+
    "\25\24\14\0\16\24\1\0\16\24\1\0\1\24\2\0"+
    "\3\24\2\0\2\24\13\0\26\24\14\0\4\24\1\153"+
    "\11\24\1\0\16\24\1\0\1\24\2\0\3\24\2\0"+
    "\2\24\13\0\21\24\1\u0130\4\24\14\0\16\24\1\0"+
    "\16\24\1\0\1\24\2\0\3\24\2\0\2\24\13\0"+
    "\7\24\1\u0131\16\24\14\0\16\24\1\0\16\24\1\0"+
    "\1\24\2\0\3\24\2\0\2\24\13\0\26\24\14\0"+
    "\6\24\1\u0132\7\24\1\0\16\24\1\0\1\24\2\0"+
    "\3\24\2\0\2\24\13\0\7\24\1\350\16\24\14\0"+
    "\16\24\1\0\16\24\1\0\1\24\2\0\3\24\2\0"+
    "\2\24\73\0\1\u0133\124\0\1\u0134\55\0\1\u0135\156\0"+
    "\1\u0136\61\0\1\u0137\133\0\1\u0138\121\0\1\u0139\124\0"+
    "\1\u013a\171\0\1\u013b\57\0\1\u013c\124\0\1\u013d\142\0"+
    "\1\u013e\102\0\26\u013f\4\0\1\u0104\7\0\16\u013f\1\0"+
    "\16\u013f\5\0\1\u0104\4\0\1\u013f\6\0\1\u0140\211\0"+
    "\1\u0141\60\0\1\u0142\117\0\1\u0143\175\0\1\u0144\113\0"+
    "\1\u0145\135\0\1\u0146\50\0\1\u0147\127\0\1\u0148\115\0"+
    "\26\24\14\0\2\24\1\u0149\13\24\1\0\16\24\1\0"+
    "\1\24\2\0\3\24\2\0\2\24\13\0\22\24\1\135"+
    "\3\24\14\0\16\24\1\0\16\24\1\0\1\24\2\0"+
    "\3\24\2\0\2\24\13\0\26\24\14\0\1\351\15\24"+
    "\1\0\16\24\1\0\1\24\2\0\3\24\2\0\2\24"+
    "\13\0\6\24\1\u014a\17\24\14\0\16\24\1\0\16\24"+
    "\1\0\1\24\2\0\3\24\2\0\2\24\26\0\1\u014b"+
    "\203\0\1\u014c\32\0\1\u014d\204\0\1\u014e\50\0\1\u014f"+
    "\120\0\1\u0150\204\0\1\u0151\115\0\1\u0152\133\0\1\u0153"+
    "\124\0\1\u0154\110\0\1\u0100\100\0\1\u0100\104\0\26\u0155"+
    "\1\u0124\3\0\1\u0104\7\0\16\u0155\1\0\16\u0155\5\0"+
    "\1\u0104\4\0\1\u0155\6\0\1\u0156\152\0\1\u0157\123\0"+
    "\1\u0158\23\0\1\u0159\64\0\1\u015a\133\0\1\u015b\1\u015c"+
    "\155\0\1\u015d\152\0\1\u015e\111\0\1\u015f\44\0\1\u0160"+
    "\124\0\7\24\1\u0161\16\24\14\0\16\24\1\0\16\24"+
    "\1\0\1\24\2\0\3\24\2\0\2\24\13\0\11\24"+
    "\1\276\14\24\14\0\16\24\1\0\16\24\1\0\1\24"+
    "\2\0\3\24\2\0\2\24\13\0\1\u0162\1\u0163\135\0"+
    "\1\u0164\54\0\1\u0165\104\0\1\u0166\101\0\1\u0167\160\0"+
    "\1\u0168\124\0\1\u0169\136\0\1\u016a\112\0\1\u016b\137\0"+
    "\1\u016c\52\0\1\u016d\42\0\1\u016e\40\0\26\u016f\1\u0124"+
    "\3\0\1\u0104\3\0\1\u0170\3\0\16\u016f\1\u0171\16\u016f"+
    "\1\u0171\4\0\1\u0104\4\0\1\u016f\1\0\1\u0172\1\0"+
    "\5\u0172\2\0\61\u0172\1\0\16\u0172\1\0\2\u0172\1\0"+
    "\4\u0172\1\0\3\u0172\24\0\1\u0173\54\0\1\u0174\121\0"+
    "\1\u0175\111\0\1\u0176\133\0\1\u0177\52\0\1\u0178\6\0"+
    "\1\u0179\127\0\1\u017a\23\0\1\u017b\140\0\1\u017c\64\0"+
    "\1\u017d\23\0\1\u017e\103\0\1\u017f\161\0\1\u0180\50\0"+
    "\1\u0181\142\0\1\u0182\151\0\1\u0183\102\0\1\u0184\103\0"+
    "\1\u0185\124\0\1\u0186\15\0\1\u0187\126\0\1\u0188\124\0"+
    "\1\u0189\120\0\1\u018a\23\0\1\u018b\150\0\1\u018c\76\0"+
    "\1\u018d\22\0\1\u018e\51\0\1\u018f\54\0\1\u0190\47\0"+
    "\1\u0191\54\0\1\u0192\35\0\26\u0193\1\u0124\3\0\1\u0104"+
    "\3\0\1\u0170\3\0\16\u0193\1\u0171\16\u0193\1\u0171\4\0"+
    "\1\u0104\4\0\1\u0193\51\0\1\u0170\21\0\1\u0171\16\0"+
    "\1\u0171\72\0\1\u0194\103\0\1\u0195\164\0\1\u0196\111\0"+
    "\1\u0197\75\0\1\u0198\160\0\1\u0199\67\0\1\u019a\130\0"+
    "\1\u019b\146\0\1\u019c\74\0\1\u019d\110\0\1\u019e\123\0"+
    "\1\u019f\130\0\1\u01a0\6\0\1\u01a1\123\0\1\u01a2\47\0"+
    "\1\u01a3\44\0\1\u01a4\142\0\1\u01a5\106\0\1\u01a6\142\0"+
    "\1\u01a7\162\0\1\u01a8\115\0\1\u01a9\137\0\1\u01aa\44\0"+
    "\1\u01ab\15\0\1\u01ac\114\0\1\u01ad\54\0\1\u01ae\56\0"+
    "\1\u01af\161\0\1\u01b0\60\0\1\u01b1\54\0\1\u01b2\106\0"+
    "\1\u01b3\137\0\1\u01b4\107\0\1\u01b5\102\0\1\u01b6\106\0"+
    "\1\u01b7\176\0\1\u01b8\43\0\26\u01b9\1\u0124\3\0\1\u0104"+
    "\3\0\1\u0170\3\0\16\u01b9\1\u0171\16\u01b9\1\u0171\4\0"+
    "\1\u0104\4\0\1\u01b9\21\0\1\u01ba\133\0\1\u01bb\131\0"+
    "\1\u01bc\106\0\1\u01bd\171\0\1\u01be\12\0\1\u01bf\104\0"+
    "\1\u01c0\100\0\1\u01c1\165\0\1\u01c2\52\0\1\u01c3\157\0"+
    "\1\u01c4\22\0\1\u01c5\64\0\1\u01c2\146\0\1\u01c3\120\0"+
    "\1\u01c6\75\0\1\u01c7\130\0\1\u01c8\23\0\1\u01c9\64\0"+
    "\1\u01ca\1\0\1\u01c6\6\0\1\u01c7\4\0\1\u01cb\151\0"+
    "\1\u0100\102\0\1\u0100\110\0\1\u01cc\126\0\1\u01cd\175\0"+
    "\1\u01ce\11\0\1\u01cf\40\0\1\u01d0\201\0\1\u01d1\44\0"+
    "\1\u01d2\176\0\1\u01d3\126\0\1\u01d4\135\0\1\u01d5\52\0"+
    "\1\u01d6\106\0\1\u01d7\162\0\1\u01d8\147\0\1\u01d9\45\0"+
    "\1\u01da\133\0\1\u01db\113\0\1\u01dc\142\0\1\u01dd\147\0"+
    "\1\u013d\103\0\1\u013e\100\0\26\u0104\1\u0124\3\0\1\u0104"+
    "\3\0\1\u0170\3\0\16\u0104\1\u0171\16\u0104\1\u0171\4\0"+
    "\1\u0104\4\0\1\u0104\22\0\1\u01de\176\0\1\u01df\44\0"+
    "\1\u01cd\123\0\1\u01cc\132\0\1\u01e0\133\0\1\u01e1\116\0"+
    "\1\u0100\176\0\1\u0100\65\0\1\u01e2\106\0\1\u01e3\211\0"+
    "\1\u01e4\125\0\1\u01e5\44\0\1\u01e6\201\0\1\u01e7\122\0"+
    "\1\u01e8\101\0\1\u01e9\157\0\1\u01ea\122\0\1\u01eb\31\0"+
    "\1\u01ec\125\0\1\u01ed\127\0\1\u01ee\15\0\1\u01ef\122\0"+
    "\1\u01f0\23\0\1\u01f1\136\0\1\u01f2\67\0\1\u01f3\111\0"+
    "\1\u01f4\133\0\1\u01f5\115\0\1\u01f6\133\0\1\u01f7\171\0"+
    "\1\u0100\52\0\1\u0100\161\0\1\u01f8\103\0\1\u01f9\112\0"+
    "\1\u01fa\201\0\1\u01fb\100\0\1\u01fc\75\0\1\u01fd\116\0"+
    "\1\u01fe\133\0\1\u01ff\121\0\1\u0200\201\0\1\u0201\36\0"+
    "\1\u0100\123\0\1\u0100\166\0\1\u0202\147\0\1\u0203\106\0"+
    "\1\u01f6\102\0\1\u01f7\173\0\1\u0204\113\0\1\u0205\45\0"+
    "\1\u0206\142\0\1\u0207\106\0\1\u0100\142\0\1\u0100\147\0"+
    "\1\u0208\103\0\1\u0209\165\0\1\u020a\101\0\1\u020b\74\0"+
    "\1\u020c\201\0\1\u020d\45\0\1\u01c3\176\0\1\u01c2\107\0"+
    "\1\u0100\103\0\1\u0100\106\0\1\u01c0\133\0\1\u01c1\152\0"+
    "\1\u020e\75\0\1\u020f\156\0\1\u0210\75\0\1\u0211\137\0"+
    "\1\u0212\124\0\1\u0213\103\0\1\u0100\126\0\1\u0100\115\0"+
    "\1\u0214\142\0\1\u0215\124\0\1\u0216\106\0\1\u0217\162\0"+
    "\1\u0218\147\0\1\u0219\106\0\1\u021a\102\0\1\u021b\120\0"+
    "\1\u021c\161\0\1\u021d\115\0\1\u021e\102\0\1\u021f\145\0"+
    "\1\u0200\75\0\1\u0201\117\0\1\u0220\201\0\1\u0221\117\0"+
    "\1\u0222\124\0\1\u0223\51\0\1\u0224\176\0\1\u0225\70\0"+
    "\1\u01e2\146\0\1\u01e3\64\0\1\u01ec\176\0\1\u01ed\105\0"+
    "\1\u0100\147\0\1\u0100\126\0\1\u01a5\47\0\1\u01a4\161\0"+
    "\1\u01ec\102\0\1\u01ed\150\0\1\u0100\137\0\1\u0100\104\0"+
    "\1\u0226\100\0\1\u0227\110\0\1\u0228\142\0\1\u0229\144\0"+
    "\1\u022a\147\0\1\u022b\111\0\1\u0100\140\0\1\u0100\44\0"+
    "\1\u0218\133\0\1\u0219\75\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[43265];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\4\0\1\1\1\0\3\11\46\1\1\11"+
    "\2\1\3\11\11\1\1\11\6\1\1\11\2\1\2\11"+
    "\2\1\1\11\4\1\2\11\2\1\1\11\1\1\2\11"+
    "\1\0\30\1\1\0\11\1\1\0\1\1\2\0\2\1"+
    "\1\0\1\1\33\0\2\11\2\0\2\1\3\0\34\1"+
    "\1\0\1\1\31\0\1\1\1\0\20\1\1\11\13\0"+
    "\1\11\15\0\12\1\26\0\5\1\26\0\2\1\26\0"+
    "\1\1\16\0\1\11\1\0\1\1\271\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[555];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public int start;
    public int end;
    public int beginString;
    public static Set<String> commands = new HashSet();
    public static Set<String> macros = new HashSet();
    public static Set<String> variables = new HashSet();
    public Set<String> infile;

    private ScilabDocument doc;
    private boolean transposable;
    private Element elem;
    private boolean breakstring;
    private boolean breakcomment;

    private MatchingBlockScanner matchBlock;

    public ScilabLexer(ScilabDocument doc) {
	this(doc, new MatchingBlockScanner(doc));
    }

    public ScilabLexer(ScilabDocument doc, MatchingBlockScanner matchBlock) {
        this.doc = doc;
        this.elem = doc.getDefaultRootElement();
        this.infile = doc.getFunctionsInDoc();
	this.matchBlock = matchBlock;
	update();
    }

    public void update() {
        variables.clear();
        commands.clear();
        macros.clear();
        variables.addAll(Arrays.asList(ScilabKeywords.GetVariablesName()));
        commands.addAll(Arrays.asList(ScilabKeywords.GetFunctionsName()));
        macros.addAll(Arrays.asList(ScilabKeywords.GetMacrosName()));
    }

    public void setRange(int p0, int p1) {
        start = p0;
        end = p1;
        transposable = false;
        breakstring = false;
        yyreset(new ScilabDocumentReader(doc, p0, p1));
        int currentLine = elem.getElementIndex(start);
        if (currentLine != 0) {
	   ScilabDocument.ScilabLeafElement e = (ScilabDocument.ScilabLeafElement) elem.getElement(currentLine - 1);
	   if (e.isBrokenString()) {
              yybegin(QSTRING);
	   } else if (e.isBlockComment()) {
	      yybegin(BLOCKCOMMENT);
	   }
        }
    }

    public int yychar() {
        return yychar;
    }

    public int scan() throws IOException {
        int ret = yylex();
	int lastPos = start + yychar + yylength();
        if (lastPos == end - 1) {
           ((ScilabDocument.ScilabLeafElement) elem.getElement(elem.getElementIndex(start))).setBrokenString(breakstring);
           breakstring = false;
        } else if (lastPos == end) {
	   ((ScilabDocument.ScilabLeafElement) elem.getElement(elem.getElementIndex(start))).setBlockComment(yystate() == BLOCKCOMMENT);
        }
	return ret;
    }

    public boolean isLineFinishedByBlockComment(int start, int end) {
        this.start = start;
	this.end = end;
	try {		
           yyreset(new ScilabDocumentReader(doc, start, end));
	   int tok = 0;
	   while (tok != ScilabLexerConstants.EOF) {
	      tok = yylex();
	   }
        } catch (Exception e) { }
	
	return yystate() == BLOCKCOMMENT;
    }

    public int getKeyword(int pos, boolean strict) {
        Element line = elem.getElement(elem.getElementIndex(pos));
        int end = line.getEndOffset();
        int tok = -1;
        start = line.getStartOffset();
        int startL = start;
        int s = -1;

        try {
           yyreset(new ScilabDocumentReader(doc, start, end));
           if (!strict) {
              pos++;
           }

           while (startL < pos && (s != startL || yystate() == BREAKSTRING)) {
               s = startL;
               tok = yylex();
               startL = start + yychar + yylength();
           }

           return tok;
        } catch (IOException e) {
           return ScilabLexerConstants.DEFAULT;
        }
     }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ScilabLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ScilabLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 188) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 32: 
          { transposable = false;
                                   return ScilabLexerConstants.SKEYWORD;
          }
        case 44: break;
        case 1: 
          { return ScilabLexerConstants.STRING;
          }
        case 45: break;
        case 10: 
          { return ScilabLexerConstants.WHITE;
          }
        case 46: break;
        case 29: 
          { return ScilabLexerConstants.ERROR;
          }
        case 47: break;
        case 2: 
          { transposable = false;
                                   return ScilabLexerConstants.DEFAULT;
          }
        case 48: break;
        case 3: 
          { transposable = false;
                                   return ScilabLexerConstants.OPENCLOSE;
          }
        case 49: break;
        case 38: 
          { transposable = false;
                                   return ScilabLexerConstants.ELSEIF;
          }
        case 50: break;
        case 25: 
          { yybegin(COMMANDSWHITE);
                                   return ScilabLexerConstants.WHITE;
          }
        case 51: break;
        case 37: 
          { transposable = false;
				   if (matchBlock != null) {
				      MatchingBlockScanner.MatchingPositions pos = matchBlock.getMatchingBlock(start + yychar + yylength(), false);
				      if (pos != null) {
				         try {
				      	     String match = doc.getText(pos.secondB, pos.secondE - pos.secondB);
				      	     if (match.equals("function")) {
					        return ScilabLexerConstants.FKEYWORD;
					     }
				      	 } catch (BadLocationException e) { }
				      }
				   }
                                   return ScilabLexerConstants.OSKEYWORD;
          }
        case 52: break;
        case 43: 
          { return ScilabLexerConstants.URL;
          }
        case 53: break;
        case 12: 
          { transposable = false;
                                   return ScilabLexerConstants.SPECIAL;
          }
        case 54: break;
        case 39: 
          { transposable = false;
                                   return ScilabLexerConstants.CKEYWORD;
          }
        case 55: break;
        case 20: 
          { return ScilabLexerConstants.TAB_COMMENT;
          }
        case 56: break;
        case 30: 
          { transposable = true;
                                   return ScilabLexerConstants.CONSTANTES;
          }
        case 57: break;
        case 35: 
          { yybegin(YYINITIAL);
				   return ScilabLexerConstants.COMMENT;
          }
        case 58: break;
        case 17: 
          { return ScilabLexerConstants.TAB_STRING;
          }
        case 59: break;
        case 34: 
          { return ScilabLexerConstants.LATEX;
          }
        case 60: break;
        case 23: 
          { transposable = true;
                                   return ScilabLexerConstants.FIELD;
          }
        case 61: break;
        case 14: 
          { return ScilabLexerConstants.DEFAULT;
          }
        case 62: break;
        case 33: 
          { yypushback(yylength());
                                   yybegin(BREAKSTRING);
                                   transposable = false;
                                   return ScilabLexerConstants.STRING;
          }
        case 63: break;
        case 28: 
          { transposable = false;
                                   yypushback(2);
                                   yybegin(BLOCKCOMMENT);
          }
        case 64: break;
        case 41: 
          { transposable = false;
                                   return ScilabLexerConstants.FKEYWORD;
          }
        case 65: break;
        case 7: 
          { transposable = false;
                                   beginString = zzStartRead;
                                   yybegin(QSTRING);
                                   return ScilabLexerConstants.STRING;
          }
        case 66: break;
        case 36: 
          { breakstring = true;
                                   return ScilabLexerConstants.SPECIAL;
          }
        case 67: break;
        case 19: 
          { return ScilabLexerConstants.WHITE_COMMENT;
          }
        case 68: break;
        case 24: 
          { yypushback(yylength());
                                   yybegin(YYINITIAL);
          }
        case 69: break;
        case 9: 
          { transposable = false;
                                   yybegin(FIELD);
                                   return ScilabLexerConstants.OPERATOR;
          }
        case 70: break;
        case 31: 
          { transposable = false;
                                   return ScilabLexerConstants.OSKEYWORD;
          }
        case 71: break;
        case 42: 
          { return ScilabLexerConstants.MAIL;
          }
        case 72: break;
        case 13: 
          { transposable = true;
                                   return ScilabLexerConstants.NUMBER;
          }
        case 73: break;
        case 40: 
          { return ScilabLexerConstants.AUTHORS;
          }
        case 74: break;
        case 16: 
          { return ScilabLexerConstants.WHITE_STRING;
          }
        case 75: break;
        case 21: 
          { yypushback(1);
                                   yybegin(YYINITIAL);
          }
        case 76: break;
        case 8: 
          { transposable = true;
                                   String str = yytext();
                                   if (commands.contains(str)) {
                                       yybegin(COMMANDS);
                                       return ScilabLexerConstants.COMMANDS;
                                   } else if (macros.contains(str)) {
                                       yybegin(COMMANDS);
                                       return ScilabLexerConstants.MACROS;
                                   } else if (infile.contains(str)) {
                                       yybegin(COMMANDS);
                                       return ScilabLexerConstants.MACROINFILE;
                                   } else {
                                       List<String>[] arr = doc.getInOutArgs(start + yychar);
                                       if (arr != null && (arr[0].contains(str) || arr[1].contains(str))) {
                                           return ScilabLexerConstants.INPUTOUTPUTARGS;
                                       } else if (variables.contains(str)) {
                                           return ScilabLexerConstants.VARIABLES;
                                       }
                                   }
                                   return ScilabLexerConstants.ID;
          }
        case 77: break;
        case 6: 
          { if (transposable) {
                                       return ScilabLexerConstants.TRANSP;
                                    } else {
                                       beginString = zzStartRead;
                                       yybegin(QSTRING);
                                       return ScilabLexerConstants.STRING;
                                    }
          }
        case 78: break;
        case 18: 
          { return ScilabLexerConstants.COMMENT;
          }
        case 79: break;
        case 27: 
          { transposable = false;
                                   yypushback(2);
                                   yybegin(COMMENT);
          }
        case 80: break;
        case 26: 
          { yybegin(COMMANDSWHITE);
                                   return ScilabLexerConstants.TAB;
          }
        case 81: break;
        case 4: 
          { transposable = true;
                                   return ScilabLexerConstants.OPENCLOSE;
          }
        case 82: break;
        case 15: 
          { transposable = false;
                                   yybegin(YYINITIAL);
                                   return ScilabLexerConstants.STRING;
          }
        case 83: break;
        case 5: 
          { transposable = false;
                                   return ScilabLexerConstants.OPERATOR;
          }
        case 84: break;
        case 11: 
          { return ScilabLexerConstants.TAB;
          }
        case 85: break;
        case 22: 
          { 
          }
        case 86: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return ScilabLexerConstants.EOF;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
