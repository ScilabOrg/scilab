/* The following code was generated by JFlex 1.4.3 on 04/11/13 15:38 */

//CHECKSTYLE:OFF

package org.scilab.modules.scinotes;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Iterator;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.io.IOException;
import javax.swing.text.BadLocationException;
import javax.swing.text.Element;

import org.scilab.modules.commons.ScilabCommonsUtils;

@javax.annotation.Generated("JFlex")
@SuppressWarnings("fallthrough")


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 04/11/13 15:38 from the specification file
 * <tt>scilab.jflex</tt>
 */
public final class ScilabLexer extends ScilabLexerConstants {

    /** This character denotes the end of file */
    public static final int YYEOF = -1;

    /** initial size of the lookahead buffer */
    private static final int ZZ_BUFFERSIZE = 16384;

    /** lexical states */
    public static final int BREAKSTRING = 12;
    public static final int COMMANDSWHITE = 10;
    public static final int YYINITIAL = 0;
    public static final int COMMENT = 4;
    public static final int FIELD = 6;
    public static final int COMMANDS = 8;
    public static final int QSTRING = 2;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     *                  at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
        0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
        "\11\0\1\111\1\1\1\0\1\120\1\113\22\0\1\72\1\116\1\7" +
        "\1\114\1\112\1\10\1\51\1\6\1\3\1\4\1\40\1\43\1\117" +
        "\1\44\1\37\1\5\12\115\1\110\1\123\1\47\1\45\1\50\1\114" +
        "\1\53\1\100\1\101\1\25\1\35\1\33\1\14\1\103\1\30\1\26" +
        "\1\102\1\107\1\76\1\32\1\73\1\31\1\34\1\106\1\36\1\24" +
        "\1\12\1\77\1\104\1\27\2\122\1\74\1\2\1\41\1\4\1\42" +
        "\1\121\1\0\1\23\1\65\1\55\1\57\1\15\1\13\1\105\1\60" +
        "\1\17\1\122\1\66\1\61\1\70\1\20\1\56\1\16\1\67\1\62" +
        "\1\22\1\11\1\54\1\75\1\63\1\71\1\64\1\21\1\2\1\52" +
        "\1\4\1\46\uff81\0";

    /**
     * Translates characters to character classes
     */
    private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int [] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
        "\1\0\1\1\3\0\1\1\1\0\1\2\1\3\1\4" +
        "\1\5\1\6\1\7\14\10\1\11\10\5\6\10\1\12" +
        "\1\13\1\14\1\13\1\15\1\2\1\1\1\16\1\17" +
        "\1\1\1\20\1\21\1\22\1\23\17\22\1\24\4\22" +
        "\1\25\1\22\1\26\1\27\1\26\1\30\1\31\1\32" +
        "\1\33\2\1\1\34\1\35\2\16\1\36\1\5\1\37" +
        "\1\0\2\40\1\10\1\40\12\10\1\41\4\10\1\5" +
        "\1\13\1\5\1\15\1\0\2\10\1\42\3\10\1\0" +
        "\1\37\2\0\1\37\1\15\46\0\1\1\1\43\3\0" +
        "\6\10\1\41\5\10\1\40\1\10\1\15\7\10\2\15" +
        "\1\44\45\0\1\45\3\10\1\46\1\47\11\10\21\0" +
        "\1\50\15\0\1\51\1\45\7\10\1\52\30\0\1\51" +
        "\1\10\1\46\2\10\30\0\1\10\1\53\26\0\1\54" +
        "\20\0\1\55\212\0\1\55\17\0\2\55\11\0\1\55" +
        "\7\0\1\55\2\0\2\37";

    private static int [] zzUnpackAction() {
        int [] result = new int[563];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
        "\0\0\0\124\0\250\0\374\0\u0150\0\u01a4\0\u01f8\0\u024c" +
        "\0\u024c\0\u024c\0\u02a0\0\u02f4\0\u02f4\0\u0348\0\u039c\0\u03f0" +
        "\0\u0444\0\u0498\0\u04ec\0\u0540\0\u0594\0\u05e8\0\u063c\0\u0690" +
        "\0\u06e4\0\u0738\0\u078c\0\u07e0\0\u0834\0\u0888\0\u08dc\0\u0930" +
        "\0\u0984\0\u09d8\0\u0a2c\0\u0a80\0\u0ad4\0\u0b28\0\u0b7c\0\u0bd0" +
        "\0\u0c24\0\u07e0\0\u0c78\0\u0498\0\u0ccc\0\u07e0\0\u0d20\0\u024c" +
        "\0\u0d74\0\u0dc8\0\u024c\0\u024c\0\u024c\0\u024c\0\u0e1c\0\u0e70" +
        "\0\u0ec4\0\u0f18\0\u0f6c\0\u0fc0\0\u1014\0\u1068\0\u10bc\0\u1110" +
        "\0\u1164\0\u11b8\0\u120c\0\u1260\0\u12b4\0\u024c\0\u1308\0\u135c" +
        "\0\u13b0\0\u1404\0\u024c\0\u1458\0\u024c\0\u14ac\0\u14ac\0\u024c" +
        "\0\u024c\0\u1500\0\u1500\0\u1554\0\u15a8\0\u024c\0\u024c\0\u15fc" +
        "\0\u1650\0\u024c\0\u024c\0\u024c\0\u16a4\0\u0498\0\u16f8\0\u174c" +
        "\0\u17a0\0\u17f4\0\u1848\0\u189c\0\u18f0\0\u1944\0\u1998\0\u19ec" +
        "\0\u1a40\0\u1a94\0\u1ae8\0\u0498\0\u1b3c\0\u1b90\0\u1be4\0\u1c38" +
        "\0\u1c8c\0\u1ce0\0\u1d34\0\u1d88\0\u1ddc\0\u1e30\0\u1e84\0\u0498" +
        "\0\u1ed8\0\u1f2c\0\u1f80\0\u1fd4\0\u2028\0\u07e0\0\u0c78\0\u207c" +
        "\0\u20d0\0\u0d74\0\u2124\0\u2178\0\u21cc\0\u2220\0\u2274\0\u22c8" +
        "\0\u231c\0\u2370\0\u23c4\0\u2418\0\u246c\0\u24c0\0\u2514\0\u2568" +
        "\0\u25bc\0\u2610\0\u2664\0\u26b8\0\u270c\0\u2760\0\u27b4\0\u2808" +
        "\0\u285c\0\u28b0\0\u11b8\0\u2904\0\u2958\0\u29ac\0\u2a00\0\u2a54" +
        "\0\u2aa8\0\u2afc\0\u2b50\0\u2ba4\0\u2bf8\0\u2c4c\0\u1500\0\u2ca0" +
        "\0\u1650\0\u2cf4\0\u2d48\0\u2d9c\0\u2df0\0\u2e44\0\u2e98\0\u2eec" +
        "\0\u2f40\0\u2f94\0\u2fe8\0\u303c\0\u3090\0\u30e4\0\u3138\0\u318c" +
        "\0\u31e0\0\u3234\0\u3288\0\u32dc\0\u3330\0\u3384\0\u33d8\0\u342c" +
        "\0\u3480\0\u34d4\0\u3528\0\u357c\0\u024c\0\u35d0\0\u3624\0\u3678" +
        "\0\u36cc\0\u3720\0\u3774\0\u37c8\0\u381c\0\u3870\0\u38c4\0\u3918" +
        "\0\u396c\0\u39c0\0\u3a14\0\u3a68\0\u3abc\0\u3b10\0\u3b64\0\u3bb8" +
        "\0\u3c0c\0\u3c60\0\u3cb4\0\u3d08\0\u3d5c\0\u3db0\0\u3e04\0\u3e58" +
        "\0\u3eac\0\u3f00\0\u3f54\0\u3fa8\0\u3ffc\0\u4050\0\u40a4\0\u40f8" +
        "\0\u414c\0\u41a0\0\u024c\0\u41f4\0\u4248\0\u429c\0\u42f0\0\u0498" +
        "\0\u4344\0\u4398\0\u43ec\0\u4440\0\u4494\0\u44e8\0\u453c\0\u4590" +
        "\0\u45e4\0\u4638\0\u468c\0\u46e0\0\u4734\0\u4788\0\u47dc\0\u4830" +
        "\0\u4884\0\u48d8\0\u492c\0\u4980\0\u49d4\0\u4a28\0\u4a7c\0\u4ad0" +
        "\0\u4b24\0\u4b78\0\u024c\0\u4bcc\0\u4c20\0\u4c74\0\u4cc8\0\u4d1c" +
        "\0\u4d70\0\u4dc4\0\u4e18\0\u4e6c\0\u4ec0\0\u4f14\0\u4f68\0\u4fbc" +
        "\0\u024c\0\u2cf4\0\u5010\0\u5064\0\u50b8\0\u510c\0\u5160\0\u51b4" +
        "\0\u5208\0\u525c\0\u52b0\0\u5304\0\u5358\0\u53ac\0\u5400\0\u5454" +
        "\0\u54a8\0\u54fc\0\u5550\0\u55a4\0\u55f8\0\u564c\0\u56a0\0\u56f4" +
        "\0\u5748\0\u579c\0\u57f0\0\u5844\0\u5898\0\u58ec\0\u5940\0\u5994" +
        "\0\u59e8\0\u5a3c\0\u414c\0\u5a90\0\u0498\0\u5ae4\0\u5b38\0\u5b8c" +
        "\0\u5be0\0\u5c34\0\u5c88\0\u5cdc\0\u5d30\0\u5d84\0\u5dd8\0\u5e2c" +
        "\0\u5e80\0\u5ed4\0\u5f28\0\u5f7c\0\u5fd0\0\u6024\0\u6078\0\u60cc" +
        "\0\u6120\0\u6174\0\u61c8\0\u621c\0\u6270\0\u62c4\0\u6318\0\u636c" +
        "\0\u5b8c\0\u63c0\0\u6414\0\u6468\0\u64bc\0\u6510\0\u6564\0\u65b8" +
        "\0\u660c\0\u6660\0\u66b4\0\u6708\0\u675c\0\u67b0\0\u6804\0\u6858" +
        "\0\u68ac\0\u6900\0\u6954\0\u69a8\0\u69fc\0\u6a50\0\u6aa4\0\u0498" +
        "\0\u6af8\0\u6b4c\0\u6ba0\0\u6bf4\0\u6c48\0\u6c9c\0\u6cf0\0\u6d44" +
        "\0\u6d98\0\u6dec\0\u6e40\0\u6e94\0\u6ee8\0\u6f3c\0\u6f90\0\u6fe4" +
        "\0\u024c\0\u7038\0\u708c\0\u70e0\0\u7134\0\u7188\0\u71dc\0\u7230" +
        "\0\u7284\0\u72d8\0\u732c\0\u7380\0\u73d4\0\u7428\0\u747c\0\u74d0" +
        "\0\u7524\0\u7578\0\u75cc\0\u7620\0\u7674\0\u76c8\0\u771c\0\u7770" +
        "\0\u77c4\0\u7818\0\u786c\0\u78c0\0\u7914\0\u7968\0\u79bc\0\u7a10" +
        "\0\u7a64\0\u7ab8\0\u7b0c\0\u7b60\0\u7bb4\0\u7c08\0\u7c5c\0\u7cb0" +
        "\0\u7d04\0\u7d58\0\u7dac\0\u7e00\0\u7e54\0\u7ea8\0\u7efc\0\u7f50" +
        "\0\u7fa4\0\u7ff8\0\u804c\0\u80a0\0\u80f4\0\u8148\0\u819c\0\u81f0" +
        "\0\u8244\0\u8298\0\u82ec\0\u8340\0\u8394\0\u83e8\0\u843c\0\u8490" +
        "\0\u84e4\0\u8538\0\u858c\0\u85e0\0\u8634\0\u8688\0\u86dc\0\u8730" +
        "\0\u8784\0\u87d8\0\u882c\0\u8880\0\u88d4\0\u8928\0\u897c\0\u89d0" +
        "\0\u8a24\0\u8a78\0\u8acc\0\u8b20\0\u8b74\0\u8bc8\0\u8c1c\0\u8c70" +
        "\0\u8cc4\0\u8d18\0\u8d6c\0\u8dc0\0\u8e14\0\u8e68\0\u8ebc\0\u8f10" +
        "\0\u8f64\0\u8fb8\0\u900c\0\u9060\0\u90b4\0\u9108\0\u915c\0\u91b0" +
        "\0\u9204\0\u9258\0\u92ac\0\u9300\0\u9354\0\u93a8\0\u93fc\0\u9450" +
        "\0\u94a4\0\u94f8\0\u954c\0\u95a0\0\u95f4\0\u9648\0\u969c\0\u96f0" +
        "\0\u9744\0\u9798\0\u97ec\0\u9840\0\u9894\0\u98e8\0\u993c\0\u9990" +
        "\0\u99e4\0\u9a38\0\u9a8c\0\u9ae0\0\u9b34\0\u9b88\0\u9bdc\0\u9c30" +
        "\0\u9c84\0\u9cd8\0\u9d2c\0\u9d80\0\u9dd4\0\u9e28\0\u9e7c\0\u9ed0" +
        "\0\u9f24\0\u9f78\0\u9fcc\0\ua020\0\ua074\0\ua0c8\0\ua11c\0\ua170" +
        "\0\ua1c4\0\ua218\0\ua26c\0\ua2c0\0\ua314\0\ua368\0\ua3bc\0\ua410" +
        "\0\ua464\0\ua4b8\0\ua50c\0\ua560\0\ua5b4\0\ua608\0\ua65c\0\ua6b0" +
        "\0\ua704\0\ua758\0\ua7ac\0\ua800\0\ua854\0\ua8a8\0\ua8fc\0\ua950" +
        "\0\ua9a4\0\u9648\0\ua9f8";

    private static int [] zzUnpackRowMap() {
        int [] result = new int[563];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int [] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int [] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
        "\2\10\2\11\1\12\1\13\1\14\1\15\1\16\1\17" +
        "\1\20\1\21\1\22\1\23\1\24\1\25\2\22\1\26" +
        "\1\27\1\30\2\22\1\31\7\22\1\32\1\33\2\34" +
        "\1\35\1\36\2\37\1\40\1\37\1\41\1\42\1\37" +
        "\1\22\1\43\1\22\1\44\2\22\1\45\1\46\1\22" +
        "\1\47\1\22\1\50\2\22\1\51\15\22\1\52\1\53" +
        "\1\54\1\10\1\22\1\55\1\22\1\56\1\10\2\22" +
        "\1\10\1\57\1\60\4\57\2\61\27\57\1\62\32\57" +
        "\1\63\16\57\1\64\1\57\1\60\10\57\1\65\1\66" +
        "\7\65\1\67\1\70\1\71\6\65\1\72\1\65\1\73" +
        "\1\74\1\75\3\65\1\76\1\77\1\100\1\101\11\65" +
        "\1\102\7\65\1\103\1\104\7\65\1\105\1\65\1\106" +
        "\3\65\1\107\1\65\1\110\1\111\2\65\1\112\4\65" +
        "\1\113\1\114\11\65\10\115\27\116\15\115\16\116\1\115" +
        "\15\116\2\115\1\117\1\115\1\116\1\115\1\116\2\115" +
        "\2\116\2\115\1\120\1\115\1\121\66\115\1\122\16\115" +
        "\1\123\12\115\5\124\1\125\64\124\1\126\16\124\1\127" +
        "\5\124\1\115\3\124\1\115\5\60\1\130\31\60\1\131" +
        "\32\60\1\126\16\60\1\127\12\60\131\0\1\132\31\0" +
        "\1\133\5\0\1\134\170\0\1\135\22\0\4\136\1\137" +
        "\1\140\1\141\1\142\2\136\14\22\15\0\16\22\1\0" +
        "\15\22\2\0\1\22\1\0\3\22\2\0\2\22\12\0" +
        "\26\22\15\0\4\22\1\143\1\22\1\144\7\22\1\0" +
        "\15\22\2\0\1\22\1\0\3\22\2\0\2\22\12\0" +
        "\21\22\1\145\4\22\15\0\16\22\1\0\15\22\2\0" +
        "\1\22\1\0\3\22\2\0\2\22\12\0\26\22\15\0" +
        "\1\146\1\22\1\147\13\22\1\0\15\22\2\0\1\22" +
        "\1\0\3\22\2\0\2\22\12\0\26\22\15\0\16\22" +
        "\1\0\15\22\2\0\1\22\1\0\3\22\2\0\2\22" +
        "\12\0\7\22\1\150\16\22\15\0\5\22\1\151\7\22" +
        "\1\152\1\0\15\22\2\0\1\22\1\0\3\22\2\0" +
        "\2\22\12\0\12\22\1\153\13\22\15\0\16\22\1\0" +
        "\15\22\2\0\1\22\1\0\3\22\2\0\2\22\12\0" +
        "\2\22\1\154\23\22\15\0\16\22\1\0\15\22\2\0" +
        "\1\22\1\0\3\22\2\0\2\22\12\0\4\22\1\155" +
        "\21\22\15\0\16\22\1\0\15\22\2\0\1\22\1\0" +
        "\3\22\2\0\2\22\12\0\26\22\15\0\11\22\1\156" +
        "\4\22\1\0\15\22\2\0\1\22\1\0\3\22\2\0" +
        "\2\22\12\0\14\22\1\157\11\22\15\0\16\22\1\0" +
        "\15\22\2\0\1\22\1\0\3\22\2\0\2\22\12\0" +
        "\13\22\1\160\12\22\15\0\16\22\1\0\15\22\2\0" +
        "\1\22\1\0\3\22\2\0\2\22\6\0\1\161\1\133" +
        "\30\0\1\162\1\163\1\161\1\133\2\0\1\134\47\0" +
        "\1\164\46\0\1\133\4\0\1\134\123\0\1\134\63\0" +
        "\1\134\31\0\1\165\3\134\2\0\1\134\63\0\1\134" +
        "\31\0\1\165\3\134\2\0\1\134\2\0\1\134\120\0" +
        "\1\133\123\0\1\133\2\0\1\133\124\0\1\134\124\0" +
        "\1\134\62\0\12\22\1\166\13\22\15\0\2\22\1\167" +
        "\13\22\1\0\15\22\2\0\1\22\1\0\3\22\2\0" +
        "\2\22\12\0\26\22\15\0\2\22\1\170\13\22\1\0" +
        "\15\22\2\0\1\22\1\0\3\22\2\0\2\22\12\0" +
        "\4\22\1\171\21\22\15\0\16\22\1\0\15\22\2\0" +
        "\1\22\1\0\3\22\2\0\2\22\12\0\26\22\15\0" +
        "\4\22\1\172\11\22\1\0\15\22\2\0\1\22\1\0" +
        "\3\22\2\0\2\22\12\0\26\22\15\0\6\22\1\173" +
        "\7\22\1\0\15\22\2\0\1\22\1\0\3\22\2\0" +
        "\2\22\12\0\26\22\15\0\1\152\15\22\1\0\15\22" +
        "\2\0\1\22\1\0\3\22\2\0\2\22\73\0\1\174" +
        "\16\0\1\175\4\0\1\176\77\0\1\175\16\0\1\177" +
        "\23\0\4\200\1\201\15\200\1\201\1\200\1\201\1\200" +
        "\1\164\14\0\3\200\1\201\12\200\1\0\15\200\2\0" +
        "\1\200\1\0\1\200\1\55\1\200\2\0\2\200\1\0" +
        "\1\57\1\0\4\57\2\202\27\57\1\0\32\57\1\0" +
        "\16\57\1\0\1\57\1\0\10\57\6\0\2\57\153\0" +
        "\1\203\142\0\1\204\76\0\1\205\24\0\1\204\56\0" +
        "\1\206\5\0\1\207\117\0\1\210\54\0\1\211\50\0" +
        "\1\212\1\0\1\213\35\0\1\214\2\0\1\215\3\0" +
        "\1\216\54\0\1\217\5\0\1\220\34\0\1\221\1\222" +
        "\62\0\1\223\52\0\1\224\53\0\1\225\173\0\1\226" +
        "\53\0\1\227\117\0\1\230\6\0\1\231\106\0\27\232" +
        "\4\0\1\232\7\0\16\232\1\233\15\232\1\0\1\233" +
        "\3\0\1\232\3\0\2\232\24\0\1\234\111\0\1\235" +
        "\135\0\1\236\115\0\1\237\126\0\1\240\36\0\1\241" +
        "\1\0\1\242\124\0\1\243\60\0\1\244\41\0\1\245" +
        "\154\0\1\246\22\0\26\116\15\0\16\116\1\0\15\116" +
        "\2\0\1\116\1\0\3\116\2\0\2\116\4\0\1\121" +
        "\66\0\1\247\16\0\1\247\12\0\5\124\1\0\64\124" +
        "\1\0\16\124\1\0\5\124\1\0\3\124\1\0\5\250" +
        "\1\132\64\250\1\0\31\250\5\0\1\132\155\0\1\251" +
        "\64\0\6\135\2\252\31\135\1\253\50\135\1\254\11\135" +
        "\11\0\5\22\1\255\20\22\15\0\16\22\1\0\15\22" +
        "\2\0\1\22\1\0\3\22\2\0\2\22\12\0\6\22" +
        "\1\136\17\22\15\0\16\22\1\0\15\22\2\0\1\22" +
        "\1\0\3\22\2\0\2\22\12\0\7\22\1\256\16\22" +
        "\15\0\16\22\1\0\15\22\2\0\1\22\1\0\3\22" +
        "\2\0\2\22\12\0\12\22\1\257\13\22\15\0\16\22" +
        "\1\0\15\22\2\0\1\22\1\0\3\22\2\0\2\22" +
        "\12\0\4\22\1\260\21\22\15\0\16\22\1\0\15\22" +
        "\2\0\1\22\1\0\3\22\2\0\2\22\12\0\26\22" +
        "\15\0\10\22\1\154\5\22\1\0\15\22\2\0\1\22" +
        "\1\0\3\22\2\0\2\22\12\0\23\22\1\261\2\22" +
        "\15\0\16\22\1\0\15\22\2\0\1\22\1\0\3\22" +
        "\2\0\2\22\12\0\7\22\1\262\16\22\15\0\16\22" +
        "\1\0\15\22\2\0\1\22\1\0\3\22\2\0\2\22" +
        "\12\0\26\22\15\0\6\22\1\154\7\22\1\0\15\22" +
        "\2\0\1\22\1\0\3\22\2\0\2\22\12\0\26\22" +
        "\15\0\3\22\1\263\12\22\1\0\15\22\2\0\1\22" +
        "\1\0\3\22\2\0\2\22\12\0\11\22\1\264\14\22" +
        "\15\0\16\22\1\0\15\22\2\0\1\22\1\0\3\22" +
        "\2\0\2\22\12\0\6\22\1\265\17\22\15\0\16\22" +
        "\1\0\15\22\2\0\1\22\1\0\3\22\2\0\2\22" +
        "\12\0\26\22\15\0\1\266\15\22\1\0\15\22\2\0" +
        "\1\22\1\0\3\22\2\0\2\22\12\0\26\22\15\0" +
        "\5\22\1\267\10\22\1\0\15\22\2\0\1\22\1\0" +
        "\3\22\2\0\2\22\12\0\26\22\15\0\2\22\1\270" +
        "\13\22\1\0\15\22\2\0\1\22\1\0\3\22\2\0" +
        "\2\22\12\0\15\22\1\271\10\22\15\0\16\22\1\0" +
        "\15\22\2\0\1\22\1\0\3\22\2\0\2\22\12\0" +
        "\14\22\1\272\11\22\15\0\16\22\1\0\15\22\2\0" +
        "\1\22\1\0\3\22\2\0\2\22\40\0\1\133\123\0" +
        "\1\162\123\0\2\133\100\0\1\273\15\0\1\273\1\0" +
        "\1\273\21\0\1\273\35\0\1\164\13\0\1\134\32\0" +
        "\5\134\70\0\1\274\10\22\1\275\14\22\15\0\16\22" +
        "\1\0\15\22\2\0\1\22\1\0\3\22\2\0\2\22" +
        "\12\0\7\22\1\276\16\22\15\0\16\22\1\0\15\22" +
        "\2\0\1\22\1\0\3\22\2\0\2\22\12\0\1\277" +
        "\10\22\1\300\14\22\15\0\16\22\1\0\15\22\2\0" +
        "\1\22\1\0\3\22\2\0\2\22\12\0\6\22\1\301" +
        "\17\22\15\0\16\22\1\0\15\22\2\0\1\22\1\0" +
        "\3\22\2\0\2\22\12\0\4\22\1\302\21\22\15\0" +
        "\16\22\1\0\15\22\2\0\1\22\1\0\3\22\2\0" +
        "\2\22\73\0\1\174\16\0\1\175\104\0\1\175\16\0" +
        "\1\175\23\0\26\200\15\0\16\200\1\0\15\200\2\0" +
        "\1\200\1\0\3\200\2\0\2\200\12\0\26\200\4\0" +
        "\2\303\7\0\16\200\1\0\15\200\2\0\1\200\1\0" +
        "\1\200\1\304\1\200\2\0\2\200\2\0\1\305\3\0" +
        "\1\306\31\0\1\203\32\0\1\307\16\0\1\307\71\0" +
        "\1\310\101\0\1\311\104\0\1\312\166\0\1\313\53\0" +
        "\1\314\177\0\1\315\120\0\1\316\131\0\1\317\52\0" +
        "\1\320\121\0\1\321\167\0\1\322\121\0\1\323\125\0" +
        "\1\324\65\0\1\325\115\0\1\326\5\0\1\327\162\0" +
        "\1\330\77\0\1\331\105\0\1\332\137\0\1\333\143\0" +
        "\1\334\154\0\1\335\121\0\1\336\31\0\27\232\4\0" +
        "\1\232\6\0\1\337\16\232\1\0\15\232\5\0\1\232" +
        "\3\0\2\232\76\0\1\312\37\0\1\206\131\0\1\340" +
        "\162\0\1\341\56\0\1\342\127\0\1\343\123\0\1\344" +
        "\162\0\1\345\67\0\1\346\126\0\1\347\100\0\41\246" +
        "\1\350\50\246\1\351\11\246\5\250\1\0\64\250\1\0" +
        "\31\250\6\0\2\135\114\0\6\135\2\252\31\135\1\253" +
        "\50\135\1\352\11\135\6\0\2\353\125\0\11\22\1\136" +
        "\14\22\15\0\16\22\1\0\15\22\2\0\1\22\1\0" +
        "\3\22\2\0\2\22\12\0\2\22\1\136\23\22\15\0" +
        "\16\22\1\0\15\22\2\0\1\22\1\0\3\22\2\0" +
        "\2\22\12\0\7\22\1\136\16\22\15\0\16\22\1\0" +
        "\15\22\2\0\1\22\1\0\3\22\2\0\2\22\12\0" +
        "\7\22\1\170\16\22\15\0\16\22\1\0\15\22\2\0" +
        "\1\22\1\0\3\22\2\0\2\22\12\0\24\22\1\354" +
        "\1\22\15\0\16\22\1\0\15\22\2\0\1\22\1\0" +
        "\3\22\2\0\2\22\12\0\26\22\15\0\1\22\1\355" +
        "\14\22\1\0\15\22\2\0\1\22\1\0\3\22\2\0" +
        "\2\22\12\0\2\22\1\356\23\22\15\0\16\22\1\0" +
        "\15\22\2\0\1\22\1\0\3\22\2\0\2\22\12\0" +
        "\4\22\1\357\21\22\15\0\16\22\1\0\15\22\2\0" +
        "\1\22\1\0\3\22\2\0\2\22\12\0\1\360\25\22" +
        "\15\0\16\22\1\0\15\22\2\0\1\22\1\0\3\22" +
        "\2\0\2\22\12\0\11\22\1\361\14\22\15\0\16\22" +
        "\1\0\15\22\2\0\1\22\1\0\3\22\2\0\2\22" +
        "\12\0\4\22\1\362\21\22\15\0\16\22\1\0\15\22" +
        "\2\0\1\22\1\0\3\22\2\0\2\22\12\0\26\22" +
        "\15\0\6\22\1\265\7\22\1\0\15\22\2\0\1\22" +
        "\1\0\3\22\2\0\2\22\12\0\17\22\1\363\6\22" +
        "\15\0\16\22\1\0\15\22\2\0\1\22\1\0\3\22" +
        "\2\0\2\22\12\0\15\22\1\136\10\22\15\0\16\22" +
        "\1\0\15\22\2\0\1\22\1\0\3\22\2\0\2\22" +
        "\44\0\2\303\50\0\1\303\17\0\26\22\15\0\1\22" +
        "\1\364\14\22\1\0\15\22\2\0\1\22\1\0\3\22" +
        "\2\0\2\22\12\0\4\22\1\170\21\22\15\0\16\22" +
        "\1\0\15\22\2\0\1\22\1\0\3\22\2\0\2\22" +
        "\12\0\1\365\25\22\15\0\16\22\1\0\15\22\2\0" +
        "\1\22\1\0\3\22\2\0\2\22\12\0\26\22\15\0" +
        "\1\366\15\22\1\0\15\22\2\0\1\22\1\0\3\22" +
        "\2\0\2\22\12\0\26\22\15\0\1\367\15\22\1\0" +
        "\15\22\2\0\1\22\1\0\3\22\2\0\2\22\12\0" +
        "\26\22\15\0\5\22\1\370\10\22\1\0\15\22\2\0" +
        "\1\22\1\0\3\22\2\0\2\22\12\0\12\22\1\371" +
        "\13\22\15\0\16\22\1\0\15\22\2\0\1\22\1\0" +
        "\3\22\2\0\2\22\116\0\1\303\17\0\26\200\15\0" +
        "\16\200\1\0\15\200\2\0\1\200\1\0\1\200\1\304" +
        "\1\200\2\0\2\200\6\0\1\305\117\0\1\305\3\0" +
        "\1\306\64\0\1\307\16\0\1\307\70\0\1\372\76\0" +
        "\1\372\114\0\1\373\65\0\1\374\30\0\1\373\124\0" +
        "\1\373\215\0\1\375\120\0\1\376\74\0\1\377\126\0" +
        "\1\u0100\123\0\1\u0101\137\0\1\u0102\110\0\1\u0103\60\0" +
        "\1\u0104\166\0\1\u0105\131\0\1\u0106\107\0\1\u0107\66\0" +
        "\1\u0108\132\0\1\u0109\151\0\1\u010a\74\0\1\u010b\157\0" +
        "\1\u010c\61\0\1\u010d\132\0\1\u010e\106\0\26\u010f\5\0" +
        "\1\u010f\7\0\16\u010f\1\0\15\u010f\5\0\1\u010f\4\0" +
        "\1\u010f\62\0\1\u0110\62\0\1\u0111\161\0\1\u0112\126\0" +
        "\1\u0113\133\0\1\u0114\52\0\1\u0115\160\0\1\u0116\125\0" +
        "\1\u0117\44\0\41\246\1\350\50\246\1\u0118\11\246\112\0" +
        "\1\u0119\11\0\6\135\2\u011a\31\135\1\253\50\135\1\254" +
        "\11\135\11\0\15\22\1\u011b\10\22\15\0\16\22\1\0" +
        "\15\22\2\0\1\22\1\0\3\22\2\0\2\22\12\0" +
        "\1\u011c\25\22\15\0\16\22\1\0\15\22\2\0\1\22" +
        "\1\0\3\22\2\0\2\22\12\0\26\22\15\0\1\146" +
        "\15\22\1\0\15\22\2\0\1\22\1\0\3\22\2\0" +
        "\2\22\12\0\6\22\1\u011d\17\22\15\0\16\22\1\0" +
        "\15\22\2\0\1\22\1\0\3\22\2\0\2\22\12\0" +
        "\4\22\1\360\21\22\15\0\16\22\1\0\15\22\2\0" +
        "\1\22\1\0\3\22\2\0\2\22\12\0\26\22\15\0" +
        "\1\22\1\u011e\14\22\1\0\15\22\2\0\1\22\1\0" +
        "\3\22\2\0\2\22\12\0\20\22\1\u011f\5\22\15\0" +
        "\16\22\1\0\15\22\2\0\1\22\1\0\3\22\2\0" +
        "\2\22\12\0\26\22\15\0\4\22\1\170\11\22\1\0" +
        "\15\22\2\0\1\22\1\0\3\22\2\0\2\22\12\0" +
        "\6\22\1\u0120\17\22\15\0\16\22\1\0\15\22\2\0" +
        "\1\22\1\0\3\22\2\0\2\22\12\0\26\22\15\0" +
        "\6\22\1\u0121\7\22\1\0\15\22\2\0\1\22\1\0" +
        "\3\22\2\0\2\22\12\0\26\22\15\0\14\22\1\361" +
        "\1\22\1\0\15\22\2\0\1\22\1\0\3\22\2\0" +
        "\2\22\12\0\4\22\1\154\21\22\15\0\16\22\1\0" +
        "\15\22\2\0\1\22\1\0\3\22\2\0\2\22\12\0" +
        "\26\22\15\0\12\22\1\360\3\22\1\0\15\22\2\0" +
        "\1\22\1\0\3\22\2\0\2\22\73\0\1\u0122\15\0" +
        "\2\u0122\122\0\1\374\20\0\1\u0123\123\0\1\374\133\0" +
        "\1\u0124\126\0\1\u0125\126\0\1\u0126\157\0\1\u0127\61\0" +
        "\1\u0128\125\0\1\u0129\175\0\1\u012a\113\0\1\u012b\57\0" +
        "\1\u012c\165\0\1\u012d\67\0\1\u010b\200\0\1\u010b\40\0" +
        "\1\u012e\200\0\1\u012f\42\0\1\u0130\124\0\1\u0131\122\0" +
        "\26\u010f\1\u0132\4\0\1\u010f\7\0\16\u010f\1\0\15\u010f" +
        "\5\0\1\u010f\4\0\1\u010f\12\0\1\u0133\135\0\1\u0134" +
        "\117\0\1\u0135\123\0\1\u0136\127\0\1\u0137\156\0\1\u0138" +
        "\62\0\1\u0139\125\0\1\u013a\104\0\41\246\1\350\50\246" +
        "\1\u013b\11\246\11\0\25\22\1\136\15\0\16\22\1\0" +
        "\15\22\2\0\1\22\1\0\3\22\2\0\2\22\12\0" +
        "\6\22\1\u013c\17\22\15\0\16\22\1\0\15\22\2\0" +
        "\1\22\1\0\3\22\2\0\2\22\12\0\2\22\1\u013d" +
        "\23\22\15\0\16\22\1\0\15\22\2\0\1\22\1\0" +
        "\3\22\2\0\2\22\12\0\1\154\25\22\15\0\16\22" +
        "\1\0\15\22\2\0\1\22\1\0\3\22\2\0\2\22" +
        "\12\0\21\22\1\u013e\4\22\15\0\16\22\1\0\15\22" +
        "\2\0\1\22\1\0\3\22\2\0\2\22\12\0\7\22" +
        "\1\u013f\16\22\15\0\16\22\1\0\15\22\2\0\1\22" +
        "\1\0\3\22\2\0\2\22\12\0\7\22\1\360\16\22" +
        "\15\0\16\22\1\0\15\22\2\0\1\22\1\0\3\22" +
        "\2\0\2\22\1\0\1\u0122\1\0\122\u0122\5\0\1\u0140" +
        "\210\0\1\u0141\123\0\1\u0142\116\0\1\u0143\114\0\1\u0144" +
        "\67\0\1\u0145\156\0\1\u0146\57\0\1\u0147\170\0\1\u0148" +
        "\65\0\1\u0149\120\0\1\u014a\167\0\1\u014b\143\0\1\u014c" +
        "\37\0\1\u014d\141\0\1\u014e\101\0\26\u014f\5\0\1\u010f" +
        "\7\0\16\u014f\1\0\15\u014f\5\0\1\u010f\4\0\1\u014f" +
        "\57\0\1\u0150\127\0\1\u0151\61\0\1\u0152\123\0\1\u0153" +
        "\123\0\1\u0154\175\0\1\u0155\51\0\1\u0156\125\0\1\u0157" +
        "\112\0\26\22\15\0\2\22\1\u0158\13\22\1\0\15\22" +
        "\2\0\1\22\1\0\3\22\2\0\2\22\12\0\22\22" +
        "\1\136\3\22\15\0\16\22\1\0\15\22\2\0\1\22" +
        "\1\0\3\22\2\0\2\22\12\0\26\22\15\0\1\361" +
        "\15\22\1\0\15\22\2\0\1\22\1\0\3\22\2\0" +
        "\2\22\1\0\1\u0159\1\0\4\u0159\2\0\62\u0159\1\0" +
        "\16\u0159\1\0\1\u0159\1\0\4\u0159\1\0\3\u0159\24\0" +
        "\1\u015a\131\0\1\u015b\163\0\1\u015c\51\0\1\u015d\114\0" +
        "\1\u015e\204\0\1\u015f\46\0\1\u0160\117\0\1\u0161\123\0" +
        "\1\u0162\204\0\1\u0163\123\0\1\u0164\50\0\1\u0165\6\0" +
        "\1\u0166\153\0\1\u010b\76\0\1\u010b\103\0\26\u0167\1\u0132" +
        "\4\0\1\u010f\7\0\16\u0167\1\0\15\u0167\5\0\1\u010f" +
        "\4\0\1\u0167\111\0\1\u0168\72\0\1\u0169\61\0\1\u016a" +
        "\123\0\1\u016b\165\0\1\u016c\146\0\1\u016d\32\0\1\u016e" +
        "\173\0\1\u016f\53\0\7\22\1\u0170\16\22\15\0\16\22" +
        "\1\0\15\22\2\0\1\22\1\0\3\22\2\0\2\22" +
        "\12\0\1\u0171\1\u0172\134\0\1\u0173\54\0\1\u0174\56\0" +
        "\1\u0175\162\0\1\u0176\113\0\1\u0177\76\0\1\u0178\160\0" +
        "\1\u0179\42\0\1\u017a\204\0\1\u017b\134\0\1\u017c\122\0" +
        "\1\u017d\126\0\1\u017e\121\0\1\u017f\31\0\26\u0180\1\u0132" +
        "\4\0\1\u010f\3\0\1\u0181\3\0\16\u0180\1\u0182\15\u0180" +
        "\1\0\1\u0182\3\0\1\u010f\4\0\1\u0180\12\0\27\u0183" +
        "\4\0\1\u0183\7\0\16\u0183\1\u0168\15\u0183\1\0\1\u0168" +
        "\3\0\1\u0183\3\0\2\u0183\73\0\1\u0184\123\0\1\u0185" +
        "\123\0\1\u0186\113\0\1\u0187\72\0\1\u0188\24\0\1\u0189" +
        "\137\0\1\u018a\54\0\1\u018b\115\0\1\u018c\141\0\1\u018d" +
        "\152\0\1\u018e\77\0\1\u018f\105\0\1\u0190\130\0\1\u0191" +
        "\113\0\1\u0192\123\0\1\u0193\15\0\1\u0194\125\0\1\u0195" +
        "\103\0\1\u0196\143\0\1\u0197\117\0\1\u0198\24\0\1\u0199" +
        "\121\0\1\u019a\22\0\1\u019b\44\0\1\u019c\176\0\1\u019d" +
        "\41\0\26\u019e\1\u0132\4\0\1\u010f\3\0\1\u0181\3\0" +
        "\16\u019e\1\u0182\15\u019e\1\0\1\u0182\3\0\1\u010f\4\0" +
        "\1\u019e\51\0\1\u0181\21\0\1\u0182\16\0\1\u0182\23\0" +
        "\27\u0183\4\0\1\u0183\6\0\1\u019f\16\u0183\1\0\15\u0183" +
        "\5\0\1\u0183\3\0\2\u0183\31\0\1\u01a0\126\0\1\u01a1" +
        "\115\0\1\u01a2\113\0\1\u01a3\122\0\1\u01a4\122\0\1\u01a5" +
        "\135\0\1\u01a6\173\0\1\u01a7\43\0\1\u01a8\141\0\1\u01a9" +
        "\145\0\1\u01aa\73\0\1\u01ab\107\0\1\u01ac\170\0\1\u01ad" +
        "\137\0\1\u01ae\112\0\1\u01af\140\0\1\u01b0\42\0\1\u01b1" +
        "\15\0\1\u01b2\162\0\1\u01b3\54\0\1\u01b4\54\0\1\u01b5" +
        "\55\0\1\u01b6\161\0\1\u01b7\114\0\1\u01b8\140\0\1\u01b9" +
        "\44\0\1\u018c\132\0\1\u018d\106\0\26\u01ba\1\u0132\4\0" +
        "\1\u010f\3\0\1\u0181\3\0\16\u01ba\1\u0182\15\u01ba\1\0" +
        "\1\u0182\3\0\1\u010f\4\0\1\u01ba\12\0\26\u01bb\5\0" +
        "\1\u01bb\7\0\16\u01bb\1\0\15\u01bb\5\0\1\u01bb\4\0" +
        "\1\u01bb\57\0\1\u01bc\126\0\1\u01bd\14\0\1\u01be\50\0" +
        "\1\u01bf\54\0\1\u01c0\115\0\1\u01c1\67\0\1\u01c2\147\0" +
        "\1\u01c3\72\0\1\u01c4\24\0\1\u01c5\137\0\1\u01c6\113\0" +
        "\1\u010b\77\0\1\u010b\145\0\1\u01c7\73\0\1\u01c8\110\0" +
        "\1\u01c9\44\0\1\u01ca\117\0\1\u01cb\143\0\1\u01cc\50\0" +
        "\1\u01cd\200\0\1\u01ce\43\0\1\u01cf\176\0\1\u01d0\60\0" +
        "\1\u01d1\170\0\1\u01d2\132\0\1\u01d3\52\0\1\u01d4\105\0" +
        "\1\u01d5\125\0\1\u01d6\132\0\1\u01d7\106\0\26\u010f\1\u0132" +
        "\4\0\1\u010f\3\0\1\u0181\3\0\16\u010f\1\u0182\15\u010f" +
        "\1\0\1\u0182\3\0\1\u010f\4\0\1\u010f\12\0\26\u01bb" +
        "\1\u01d8\4\0\1\u01bb\7\0\16\u01bb\1\0\15\u01bb\5\0" +
        "\1\u01bb\4\0\1\u01bb\14\0\1\u01d9\127\0\1\u01da\132\0" +
        "\1\u01db\157\0\1\u01dc\77\0\1\u01dd\115\0\1\u01de\126\0" +
        "\1\u01df\105\0\1\u01e0\205\0\1\u01e1\100\0\1\u01e2\61\0" +
        "\1\u01e3\126\0\1\u01e4\141\0\1\u01e5\152\0\1\u01e6\56\0" +
        "\1\u01e7\124\0\1\u018c\122\0\1\u01e8\15\0\1\u01e9\160\0" +
        "\1\u01ea\65\0\1\u01eb\110\0\1\u01ec\132\0\1\u01ed\112\0" +
        "\1\u01ee\15\0\1\u01ef\107\0\1\u01f0\132\0\1\u01f1\171\0" +
        "\1\u010b\50\0\1\u010b\125\0\1\u01f2\200\0\1\u01f3\34\0" +
        "\26\u01f4\5\0\1\u01bb\7\0\16\u01f4\1\0\15\u01f4\5\0" +
        "\1\u01bb\4\0\1\u01f4\23\0\1\u01f5\124\0\1\u01f6\200\0" +
        "\1\u01f7\43\0\1\u01f8\176\0\1\u01f9\45\0\1\u01fa\15\0" +
        "\1\u01fb\102\0\1\u010b\122\0\1\u010b\216\0\1\u01fc\114\0" +
        "\1\u01fd\64\0\1\u01fe\23\0\1\u01ff\52\0\1\u0200\124\0" +
        "\1\u0201\127\0\1\u0202\123\0\1\u0203\164\0\1\u0204\101\0" +
        "\1\u0205\111\0\1\u0206\200\0\1\u0207\44\0\1\u01c3\176\0" +
        "\1\u01c2\104\0\1\u0208\73\0\1\u0209\155\0\1\u010b\101\0" +
        "\1\u010b\143\0\1\u020a\73\0\1\u020b\107\0\26\u020c\1\u01d8" +
        "\4\0\1\u01bb\7\0\16\u020c\1\0\15\u020c\5\0\1\u01bb" +
        "\4\0\1\u020c\12\0\1\u020d\134\0\1\u010b\125\0\1\u010b" +
        "\116\0\1\u01f6\132\0\1\u01f7\157\0\1\u020e\77\0\1\u020f" +
        "\120\0\1\u0210\105\0\1\u0211\205\0\1\u0212\100\0\1\u0213" +
        "\60\0\1\u014d\124\0\1\u014e\173\0\1\u0214\123\0\1\u0215" +
        "\123\0\1\u0216\77\0\1\u0217\147\0\1\u0218\77\0\1\u0219" +
        "\154\0\1\u021a\142\0\1\u021b\75\0\1\u01f6\73\0\1\u01f7" +
        "\104\0\26\u021c\1\u01d8\4\0\1\u01bb\7\0\16\u021c\1\u021d" +
        "\15\u021c\1\0\1\u021d\3\0\1\u01bb\4\0\1\u021c\24\0" +
        "\1\u021e\117\0\1\u021f\132\0\1\u0220\133\0\1\u01df\147\0" +
        "\1\u01e0\142\0\1\u0221\107\0\1\u0222\55\0\1\u0223\123\0" +
        "\1\u0224\160\0\1\u010b\146\0\1\u010b\106\0\1\u0225\77\0" +
        "\1\u0226\141\0\1\u01c3\146\0\1\u01c2\35\0\26\u0227\1\u01d8" +
        "\4\0\1\u01bb\7\0\16\u0227\1\u021d\15\u0227\1\0\1\u021d" +
        "\3\0\1\u01bb\4\0\1\u0227\73\0\1\u021d\16\0\1\u021d" +
        "\71\0\1\u0228\66\0\1\u0229\125\0\1\u022a\206\0\1\u022b" +
        "\102\0\1\u022c\57\0\1\u022d\123\0\1\u022e\116\0\1\u010b" +
        "\141\0\1\u010b\101\0\26\u022f\1\u01d8\4\0\1\u01bb\7\0" +
        "\16\u022f\1\u021d\15\u022f\1\0\1\u021d\3\0\1\u01bb\4\0" +
        "\1\u022f\12\0\1\u018c\134\0\1\u0225\125\0\1\u0226\125\0" +
        "\1\u0230\114\0\1\u0231\121\0\1\u0232\123\0\1\u0233\117\0" +
        "\26\u01bb\1\u01d8\4\0\1\u01bb\7\0\16\u01bb\1\u021d\15\u01bb" +
        "\1\0\1\u021d\3\0\1\u01bb\4\0\1\u01bb\74\0\1\u010b" +
        "\50\0\1\u010b\125\0\1\134\101\0";

    private static int [] zzUnpackTrans() {
        int [] result = new int[43596];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
        "Unkown internal scanner error",
        "Error: could not match input",
        "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
        "\1\0\1\1\3\0\1\1\1\0\3\11\45\1\1\11" +
        "\2\1\4\11\17\1\1\11\4\1\1\11\1\1\1\11" +
        "\2\1\2\11\4\1\2\11\2\1\3\11\1\0\27\1" +
        "\1\0\6\1\1\0\1\1\2\0\2\1\46\0\2\1" +
        "\3\0\30\1\1\11\45\0\1\11\16\1\21\0\1\11" +
        "\15\0\1\11\11\1\30\0\5\1\30\0\2\1\26\0" +
        "\1\1\20\0\1\11\212\0\1\1\17\0\2\1\11\0" +
        "\1\1\7\0\1\1\2\0\2\1";

    private static int [] zzUnpackAttribute() {
        int [] result = new int[563];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /** the input device */
    private java.io.Reader zzReader;

    /** the current state of the DFA */
    private int zzState;

    /** the current lexical state */
    private int zzLexicalState = YYINITIAL;

    /** this buffer contains the current text to be matched and is
        the source of the yytext() string */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /** the textposition at the last accepting state */
    private int zzMarkedPos;

    /** the current text position in the buffer */
    private int zzCurrentPos;

    /** startRead marks the beginning of the yytext() string in the buffer */
    private int zzStartRead;

    /** endRead marks the last character in the buffer, that has been read
        from input */
    private int zzEndRead;

    /** number of newlines encountered up to the start of the matched text */
    private int yyline;

    /** the number of characters up to the start of the matched text */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /** zzAtEOF == true <=> the scanner is at the EOF */
    private boolean zzAtEOF;

    /** denotes if the user-EOF-code has already been executed */
    private boolean zzEOFDone;

    /* user code: */
    public int start;
    public int end;
    public int beginString;
    public static Set<String> commands = new HashSet<String>();
    public static Set<String> macros = new HashSet<String>();
    public static Set<String> variables = new HashSet<String>();
    public Set<String> infile;

    private ScilabDocument doc;
    private boolean transposable;
    private Element elem;
    private boolean breakstring;

    public ScilabLexer(ScilabDocument doc) {
        this(doc, true);
    }

    public ScilabLexer(ScilabDocument doc, boolean update) {
        this.doc = doc;
        this.elem = doc.getDefaultRootElement();
        this.infile = doc.getFunctionsInDoc();
        if (update) {
            update();
        }
    }

    public static void update() {
        if (ScilabCommonsUtils.isScilabThread()) {
            String[] vars = ScilabKeywords.GetVariablesName();
            String[] funs = ScilabKeywords.GetFunctionsName();
            String[] macs = ScilabKeywords.GetMacrosName();
            variables.clear();
            commands.clear();
            macros.clear();
            if (vars != null) {
                variables.addAll(Arrays.asList(vars));
            }
            if (funs != null) {
                commands.addAll(Arrays.asList(funs));
            }
            if (macs != null) {
                macros.addAll(Arrays.asList(macs));
            }
        }
    }

    public void setRange(int p0, int p1) {
        start = p0;
        end = p1;
        transposable = false;
        breakstring = false;
        yyreset(new ScilabDocumentReader(doc, p0, p1));
        int currentLine = elem.getElementIndex(start);
        if (currentLine != 0 && ((ScilabDocument.ScilabLeafElement) elem.getElement(currentLine - 1)).isBrokenString()) {
            yybegin(QSTRING);
        }
    }

    public int yychar() {
        return yychar;
    }

    public int scan() throws IOException {
        int ret = yylex();
        if (start + yychar + yylength() == end - 1) {
            ((ScilabDocument.ScilabLeafElement) elem.getElement(elem.getElementIndex(start))).setBrokenString(breakstring);
            breakstring = false;
        }
        return ret;
    }

    public int getKeyword(int pos, boolean strict) {
        Element line = elem.getElement(elem.getElementIndex(pos));
        int end = line.getEndOffset();
        int tok = -1;
        start = line.getStartOffset();
        int startL = start;
        int s = -1;

        try {
            yyreset(new ScilabDocumentReader(doc, start, end));
            if (!strict) {
                pos++;
            }

            while (startL < pos && (s != startL || yystate() == BREAKSTRING)) {
                s = startL;
                tok = yylex();
                startL = start + yychar + yylength();
            }

            return tok;
        } catch (IOException e) {
            return ScilabLexerConstants.DEFAULT;
        }
    }

    public static ScilabTokens getScilabTokens(String str) {
        ScilabDocument doc = new ScilabDocument(false);
        try {
            doc.insertString(0, str, null);
        } catch (BadLocationException e) { }
        return getScilabTokens(doc);
    }

    public static ScilabTokens getScilabTokens(ScilabDocument doc) {
        ScilabLexer lexer = new ScilabLexer(doc);
        lexer.yyreset(new ScilabDocumentReader(doc, 0, doc.getLength()));
        ScilabTokens tokens = new ScilabTokens();
        int tok = -1;
        try {
            while (tok != ScilabLexerConstants.EOF) {
                tok = lexer.yylex();
                tokens.add(tok, lexer.yychar + lexer.yylength());
            }
        } catch (IOException e) { }

        return tokens;
    }

    public static class ScilabTokens {
        private List<Integer> tokenType = new ArrayList<Integer>();
        private List<Integer> tokenPos = new ArrayList<Integer>();

        ScilabTokens() { }

        void add(final int type, final int pos) {
            tokenType.add(type);
            tokenPos.add(pos);
        }

        public final List<Integer> getTokenType() {
            return tokenType;
        }

        public final List<Integer> getTokenPos() {
            return tokenPos;
        }
    }


    /**
     * Creates a new scanner
     * There is also a java.io.InputStream version of this constructor.
     *
     * @param   in  the java.io.Reader to read input from.
     */
    public ScilabLexer(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Creates a new scanner.
     * There is also java.io.Reader version of this constructor.
     *
     * @param   in  the java.io.Inputstream to read input from.
     */
    public ScilabLexer(java.io.InputStream in) {
        this(new java.io.InputStreamReader(in));
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed   the packed character translation table
     * @return         the unpacked character translation table
     */
    private static char [] zzUnpackCMap(String packed) {
        char [] map = new char[0x10000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 186) {
            int  count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do {
                map[j++] = value;
            } while (--count > 0);
        }
        return map;
    }


    /**
     * Refills the input buffer.
     *
     * @return      <code>false</code>, iff there was new input.
     *
     * @exception   java.io.IOException  if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

        /* first: make room (if you can) */
        if (zzStartRead > 0) {
            System.arraycopy(zzBuffer, zzStartRead,
                             zzBuffer, 0,
                             zzEndRead - zzStartRead);

            /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

        /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length) {
            /* if not: blow it up */
            char newBuffer[] = new char[zzCurrentPos * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
        }

        /* finally: fill the buffer with new input */
        int numRead = zzReader.read(zzBuffer, zzEndRead,
                                    zzBuffer.length - zzEndRead);

        if (numRead > 0) {
            zzEndRead += numRead;
            return false;
        }
        // unlikely but not impossible: read 0 characters, but not at end of stream
        if (numRead == 0) {
            int c = zzReader.read();
            if (c == -1) {
                return true;
            } else {
                zzBuffer[zzEndRead++] = (char) c;
                return false;
            }
        }

        // numRead < 0
        return true;
    }


    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;            /* indicate end of file */
        zzEndRead = zzStartRead;  /* invalidate buffer    */

        if (zzReader != null) {
            zzReader.close();
        }
    }


    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     *
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>ZZ_INITIAL</tt>.
     *
     * @param reader   the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL  = true;
        zzAtEOF  = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String( zzBuffer, zzStartRead, zzMarkedPos - zzStartRead );
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     *
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     *
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     *
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     *
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param   errorCode  the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number  the number of characters to be read again.
     *                This number must not be greater than yylength()!
     */
    public void yypushback(int number)  {
        if ( number > yylength() ) {
            zzScanError(ZZ_PUSHBACK_2BIG);
        }

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return      the next token
     * @exception   java.io.IOException  if any I/O-Error occurs
     */
    public int yylex() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char [] zzBufferL = zzBuffer;
        char [] zzCMapL = ZZ_CMAP;

        int [] zzTransL = ZZ_TRANS;
        int [] zzRowMapL = ZZ_ROWMAP;
        int [] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            yychar += zzMarkedPosL - zzStartRead;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];


            zzForAction: {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = zzBufferL[zzCurrentPosL++];
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos  = zzCurrentPosL;
                        zzMarkedPos   = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL  = zzCurrentPos;
                        zzMarkedPosL   = zzMarkedPos;
                        zzBufferL      = zzBuffer;
                        zzEndReadL     = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = zzBufferL[zzCurrentPosL++];
                        }
                    }
                    int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
                    if (zzNext == -1) {
                        break zzForAction;
                    }
                    zzState = zzNext;

                    int zzAttributes = zzAttrL[zzState];
                    if ( (zzAttributes & 1) == 1 ) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ( (zzAttributes & 8) == 8 ) {
                            break zzForAction;
                        }
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 34: {
                    transposable = false;
                    return ScilabLexerConstants.SKEYWORD;
                }
                case 46:
                    break;
                case 1: {
                    return ScilabLexerConstants.STRING;
                }
                case 47:
                    break;
                case 28: {
                    return ScilabLexerConstants.WHITE;
                }
                case 48:
                    break;
                case 42: {
                    return ScilabLexerConstants.TODO;
                }
                case 49:
                    break;
                case 31: {
                    return ScilabLexerConstants.ERROR;
                }
                case 50:
                    break;
                case 2: {
                    transposable = false;
                    return ScilabLexerConstants.DEFAULT;
                }
                case 51:
                    break;
                case 3: {
                    transposable = false;
                    return ScilabLexerConstants.OPENCLOSE;
                }
                case 52:
                    break;
                case 38: {
                    transposable = false;
                    return ScilabLexerConstants.ELSEIF;
                }
                case 53:
                    break;
                case 26: {
                    yybegin(COMMANDSWHITE);
                    return ScilabLexerConstants.WHITE;
                }
                case 54:
                    break;
                case 43: {
                    return ScilabLexerConstants.URL;
                }
                case 55:
                    break;
                case 11: {
                    transposable = false;
                    return ScilabLexerConstants.SPECIAL;
                }
                case 56:
                    break;
                case 39: {
                    transposable = false;
                    return ScilabLexerConstants.CKEYWORD;
                }
                case 57:
                    break;
                case 21: {
                    return ScilabLexerConstants.TAB_COMMENT;
                }
                case 58:
                    break;
                case 32: {
                    transposable = true;
                    return ScilabLexerConstants.CONSTANTES;
                }
                case 59:
                    break;
                case 12: {
                    transposable = false;
                    return ScilabLexerConstants.TAB;
                }
                case 60:
                    break;
                case 17: {
                    return ScilabLexerConstants.TAB_STRING;
                }
                case 61:
                    break;
                case 41: {
                    return ScilabLexerConstants.LATEX;
                }
                case 62:
                    break;
                case 23: {
                    transposable = true;
                    return ScilabLexerConstants.FIELD;
                }
                case 63:
                    break;
                case 14: {
                    return ScilabLexerConstants.DEFAULT;
                }
                case 64:
                    break;
                case 36: {
                    yypushback(yylength());
                    yybegin(BREAKSTRING);
                    transposable = false;
                    return ScilabLexerConstants.STRING;
                }
                case 65:
                    break;
                case 44: {
                    transposable = false;
                    return ScilabLexerConstants.FKEYWORD;
                }
                case 66:
                    break;
                case 7: {
                    transposable = false;
                    beginString = zzStartRead;
                    yybegin(QSTRING);
                    return ScilabLexerConstants.STRING;
                }
                case 67:
                    break;
                case 35: {
                    breakstring = true;
                    return ScilabLexerConstants.SPECIAL;
                }
                case 68:
                    break;
                case 20: {
                    return ScilabLexerConstants.WHITE_COMMENT;
                }
                case 69:
                    break;
                case 37: {
                    return ScilabLexerConstants.LATEXINSTRING;
                }
                case 70:
                    break;
                case 25: {
                    yypushback(yylength());
                    yybegin(YYINITIAL);
                }
                case 71:
                    break;
                case 9: {
                    transposable = false;
                    yybegin(FIELD);
                    return ScilabLexerConstants.OPERATOR;
                }
                case 72:
                    break;
                case 33: {
                    transposable = false;
                    return ScilabLexerConstants.OSKEYWORD;
                }
                case 73:
                    break;
                case 45: {
                    return ScilabLexerConstants.MAIL;
                }
                case 74:
                    break;
                case 13: {
                    transposable = true;
                    return ScilabLexerConstants.NUMBER;
                }
                case 75:
                    break;
                case 40: {
                    return ScilabLexerConstants.AUTHORS;
                }
                case 76:
                    break;
                case 16: {
                    return ScilabLexerConstants.WHITE_STRING;
                }
                case 77:
                    break;
                case 22: {
                    yypushback(1);
                    yybegin(YYINITIAL);
                }
                case 78:
                    break;
                case 8: {
                    transposable = true;
                    String str = yytext();
                    if (commands.contains(str)) {
                        yybegin(COMMANDS);
                        return ScilabLexerConstants.COMMANDS;
                    } else if (macros.contains(str)) {
                        yybegin(COMMANDS);
                        return ScilabLexerConstants.MACROS;
                    } else if (infile.contains(str)) {
                        yybegin(COMMANDS);
                        return ScilabLexerConstants.MACROINFILE;
                    } else {
                        List<String>[] arr = doc.getInOutArgs(start + yychar);
                        if (arr != null && (arr[0].contains(str) || arr[1].contains(str))) {
                            return ScilabLexerConstants.INPUTOUTPUTARGS;
                        } else if (variables.contains(str)) {
                            return ScilabLexerConstants.VARIABLES;
                        }
                    }
                    return ScilabLexerConstants.ID;
                }
                case 79:
                    break;
                case 6: {
                    if (transposable) {
                        return ScilabLexerConstants.TRANSP;
                    } else {
                        beginString = zzStartRead;
                        yybegin(QSTRING);
                        return ScilabLexerConstants.STRING;
                    }
                }
                case 80:
                    break;
                case 18: {
                    return ScilabLexerConstants.COMMENT;
                }
                case 81:
                    break;
                case 30: {
                    transposable = false;
                    yypushback(2);
                    yybegin(COMMENT);
                }
                case 82:
                    break;
                case 19: {
                    yybegin(YYINITIAL);
                    return ScilabLexerConstants.DEFAULT;
                }
                case 83:
                    break;
                case 27: {
                    yybegin(COMMANDSWHITE);
                    return ScilabLexerConstants.TAB;
                }
                case 84:
                    break;
                case 4: {
                    transposable = true;
                    return ScilabLexerConstants.OPENCLOSE;
                }
                case 85:
                    break;
                case 15: {
                    transposable = false;
                    yybegin(YYINITIAL);
                    return ScilabLexerConstants.STRING;
                }
                case 86:
                    break;
                case 10: {
                    transposable = false;
                    return ScilabLexerConstants.WHITE;
                }
                case 87:
                    break;
                case 5: {
                    transposable = false;
                    return ScilabLexerConstants.OPERATOR;
                }
                case 88:
                    break;
                case 29: {
                    return ScilabLexerConstants.TAB;
                }
                case 89:
                    break;
                case 24: {
                }
                case 90:
                    break;
                default:
                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                        zzAtEOF = true;
                        {
                            return ScilabLexerConstants.EOF;
                        }
                    } else {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }


}
