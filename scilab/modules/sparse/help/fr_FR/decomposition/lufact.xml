<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) XXXX-2008 - INRIA
 * 
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at    
 * http://www.cecill.info/licences/Licence_CeCILL_V2.1-en.txt
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:lang="fr" xml:id="lufact">
    <refnamediv>
        <refname>lufact</refname>
        <refpurpose>factorisation LU d'une matrice creuse  </refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Séquence d'appel</title>
        <synopsis>[hand,rk]=lufact(A,prec)</synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>Paramètres</title>
        <variablelist>
            <varlistentry>
                <term>A  </term>
                <listitem>
                    <para>matrice réelle carrée creuse
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>hand  </term>
                <listitem>
                    <para>pointeur vers des facteurs L,U creux
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>rk  </term>
                <listitem>
                    <para>entier (rang de A)
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>prec  </term>
                <listitem>
                    <para>
                        vecteur à 2 composantes <literal>prec=[eps,reps]</literal> (tolérances absolue et relative).
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Description</title>
        <para>
            <literal>[hand,rk]=lufact(A)</literal> calcule la factorisation LU d'une matrice creuse <literal>A</literal>.
            <literal>hand</literal> (variable non affichable) est utilisé par <literal>lusolve</literal> (pour la résolution d'un système linéaire Ax=B) et <literal>luget</literal> (pour récupérer L et U à partir du pointeur <literal>hand</literal>).
            <literal>hand</literal> doit être détruit après utilisation (par luget ou lusolve) : <literal>ludel(hand)</literal>;
        </para>
        <para>
            La matrice A n'est pas obligatoirement de rang plein mais doit être carrée
            (puisque A est supposée creuse on peut lui ajouter des lignes ou des colonnes nulles pour la rendre carrée).
        </para>
        <variablelist>
            <varlistentry>
                <term>eps :</term>
                <listitem>
                    <para>
                        La valeur absolue qu'un élément de A doit avoir pour être utilisé comme pivot,  sauf éventuellement en dernier recours. Ce nombre doit être significativement plus petit que le plus petit élément diagonal attendu dans la matrice. La valeur par défaut est <literal>%eps</literal>.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>reps :</term>
                <listitem>
                    <para>
                        Ce nombre donne le seuil relatif pour les pivots. Il doit être compris entre zéro et un. S'il vaut un, la méthode se comporte comme un pivot total, qui est très lent et qui a tendance à remplir la matrice. S'il est proche de zéro,  la méthode de pivotage est de type Markowitz stricte sans utilisation de seuil.  Ce seuil est utilisé pour éliminer les pivots qui causeraient une croissance excessive des termes de la matrice. La croissance des éléments est source d'erreurs d'arrondi, et peut avoir lieu même si la matrice est bien conditionnée. Prendre reps grand réduit cette croissance excessive, et donc les erreurs d'arrondi, mais le prendre trop grand risque d'augmenter le temps d'exécution, ainsi que le remplissage de la matrice. La précision peut donc ainsi être dégradée à cause du nombre élevé d'opérations à effectuer à cause du remplissage. Une valeur correcte semble être 0.001 qui est la valeur par défaut (cette valeur par défaut est aussi utilisée si reps&gt;1 ou reps&lt;0). Cette valeur doit être augmentée et la factorisation doit être recommencée si la croissance s'avère trop importante. Changer le seuil sur les pivots n'améliore pas les performances pour les matrices où la croissance est faible, comme c'est souvent le cas pour les matrices mal conditionnées. La valeur par défaut de reps a été choisie pour un usage de lufact avec des matrices à diagonale à peu près dominante (matrices provenant de problèmes de type éléments finis). Pour ces matrices un pivotage diagonal donne les meilleurs résultats.  Pour les matrices à diagonale non dominante, on obtient de meilleurs résultats en prenant un seuil plus élevé, comme 0.01 ou 0.1.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Exemples</title>
        <programlisting role="example"><![CDATA[ 
a=rand(5,5);b=rand(5,1);A=sparse(a);
[h,rk]=lufact(A);
x=lusolve(h,b);a*x-b
ludel(h)
 ]]></programlisting>
    </refsection>
    <refsection role="see also">
        <title>Voir aussi</title>
        <simplelist type="inline">
            <member>
                <link linkend="sparse">sparse</link>
            </member>
            <member>
                <link linkend="lusolve">lusolve</link>
            </member>
            <member>
                <link linkend="luget">luget</link>
            </member>
        </simplelist>
    </refsection>
</refentry>
