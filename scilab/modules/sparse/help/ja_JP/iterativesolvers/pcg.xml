<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) XXXX-2008 - INRIA
 * 
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at    
 * http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
 *
 -->
<refentry version="5.0-subset Scilab" xml:id="pcg" xml:lang="ja"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:ns4="http://www.w3.org/1999/xhtml"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:db="http://docbook.org/ns/docbook">
  <info>
    <pubdate>$LastChangedDate: 2008-03-26 09:50:39 +0100 (mer, 26 mar 2008)
    $</pubdate>
  </info>

  <refnamediv>
    <refname>pcg</refname>

    <refpurpose>プリコンディショナ付き共役勾配法</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <title>呼び出し手順</title>

    <synopsis>[x, flag, err, iter, res] = pcg(A, b [, tol [, maxIter [, M [, M2 [, x0 [, verbose]]]]]])
[x, flag, err, iter, res] = pcg(A, b [key=value,...])
</synopsis>
  </refsynopsisdiv>

  <refsection>
    <title>パラメータ</title>

    <variablelist>
      <varlistentry>
        <term>A</term>
        
        <term></term>
        
        <listitem>
          <para>行列, または指定した<literal>x</literal>について
            <literal>A*x</literal>を計算する関数またはリスト.
	以下にAの型に応じたA*xの計算に関する説明を示します.
          </para>
          <itemizedlist>
            <listitem>
              <para><literal>行列.</literal>Aが行列の場合, 通常の行列
		または疎行列とすることができます</para>
            </listitem>
            
            <listitem>
              <para><literal>関数.</literal>Aが関数の場合, 
		以下のヘッダーを有する必要があります :</para>
              
              <programlisting role = ""><![CDATA[ 
function y = A ( x )
 ]]></programlisting>
            </listitem>
            
            <listitem>
              <para><literal>list.</literal> Aがリストの場合, 
		リストの最初の要素は関数で,リストのその他の
		要素(インデックス2から末尾まで)は関数の引数となります.
		関数がコールされる時,
		xのカレントの値は関数に最初の引数として渡されます.
		他の引数はリストに指定された値です.
		</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </varlistentry>
      
      <varlistentry>
        <term>b</term>

        <listitem>
          <para>右辺ベクトルr (大きさ: nx1)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>tol</term>

        <listitem>
          <para>相対許容誤差 (デフォルト: 1e-8). 
	終了条件は残差r=b-Axの2次ノルムを
	右辺bの2次ノルムで割った値に基づきます.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>maxIter</term>

        <listitem>
          <para>反復最大回数 (デフォルト: n)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>M</term>

        <listitem>
          <para>プリコンディショナ: 通常の行列または疎行列または
          <literal>M\x</literal>を返す関数 (デフォルト: none)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>M2</term>

        <listitem>
          <para>プリコンディショナ: 通常の行列または疎行列または
          <literal>x</literal>について<literal>M2\x</literal>を返す関数 (デフォルト:
          none)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>x0</term>

        <listitem>
          <para>初期推定ベクトル (デフォルト: zeros(n,1))</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>verbose</term>

        <listitem>
          <para>冗長なログを有効にする場合は1に設定(デフォルト 0)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>x</term>

        <listitem>
          <para>解ベクトル</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>flag</term>

        <listitem>
          <para>
	<literal>maxi</literal>回の反復回数内に
	<literal>pcg</literal>が指定した
	許容誤差に収束する場合に 0, そうでない場合に 1</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>err</term>

        <listitem>
          <para>
		最終残差相対ノルム (右辺bの2次ノルムが使用されます)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>iter</term>

        <listitem>
          <para>実行された反復回数</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>res</term>

        <listitem>
          <para>残差相対ノルムのベクトル</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsection>

  <refsection>
    <title>説明</title>

    <para>
	プリコンディショナ有りまたは無しの
	共役勾配法により線形システム<literal>Ax=b</literal>を解きます.
	プリコンディショナは,
	対称正定行列<literal>M</literal>
	または<literal>M=M1*M2</literal>となるような
	2つの行列<literal>M1</literal> および<literal>M2</literal>
	により定義されます.
	この場合,関数は<literal>inv(M)*A*x = inv(M)*b</literal>を
	<literal>x</literal>について解きます.
	<literal>M</literal>, <literal>M1</literal>および
	<literal>M2</literal> は,対応する左除算
	<literal>y=Mi\x</literal>を計算する
	呼び出し手順<literal>y=Milx(x)</literal>を有する
	Scilab関数とすることができます.</para>

    <para><literal>A</literal>行列は対称正定行列
	(通常の行列または疎行列)または
	<literal>y=A*x</literal>を計算する
	呼び出し手順<literal>y=Ax(x)</literal>を有する関数と
	する必要があります.</para>
  </refsection>

  <refsection>
    <title>良好な条件または悪い条件の問題の例</title>

    <para>
	以下の例では,2つの線形システムを解きます.
	最初の行列の条件数は ~0.02 に等しくなり,
	アルゴリズムはちょうど10回の反復で収束します.
	これが行列の大きさの場合,共役勾配法で指定される動作となります.
	後者は,条件数1.d-6に等しくなり,22回の反復で収束します.
	これは,パラメータ maxIterを30に設定する理由です.
	"key=value" 構文のその他の例については以下を参照ください. </para>

    <programlisting role="example"><![CDATA[ 
//良い条件の例
A=[ 94  0   0   0    0   28  0   0   32  0  
     0   59  13  5    0   0   0   10  0   0  
     0   13  72  34   2   0   0   0   0   65 
     0   5   34  114  0   0   0   0   0   55 
     0   0   2   0    70  0   28  32  12  0  
     28  0   0   0    0   87  20  0   33  0  
     0   0   0   0    28  20  71  39  0   0  
     0   10  0   0    32  0   39  46  8   0  
     32  0   0   0    12  33  0   8   82  11 
     0   0   65  55   0   0   0   0   11  100];

b=ones(10,1);
[x, fail, err, iter, res]=pcg(A,b,1d-12,15);
mprintf("      fail=%d, iter=%d, errrel=%e\n",fail,iter,err)

//悪い条件の例
A=[ 894     0   0     0   0   28  0   0   1000  70000
      0      5   13    5   0   0   0   0   0     0    
      0      13  72    34  0   0   0   0   0     6500 
      0      5   34    1   0   0   0   0   0     55   
      0      0   0     0   70  0   28  32  12    0    
      28     0   0     0   0   87  20  0   33    0    
      0      0   0     0   28  20  71  39  0     0    
      0      0   0     0   32  0   39  46  8     0    
      1000   0   0     0   12  33  0   8   82    11   
      70000  0   6500  55  0   0   0   0   11    100];
 
[x, fail, err, iter, res]=pcg(A,b,maxIter=30,tol=1d-12);
mprintf("      fail=%d, iter=%d, errrel=%e\n",fail,iter,err)
 ]]></programlisting>
  </refsection>

  <refsection>
    <title>Aを疎行列または関数またはリストとして指定する例</title>

    <para>以下の例では,疎行列を同時に処理する方法を示します.
	右辺を計算する関数が "pcg" プリミティブに指定される
	場合も示します.
	この例における最後のケースでは,
	リストがプリミティブに指定される場合です.</para>

    <programlisting role="example"><![CDATA[ 
//良い条件の例
A=[ 94  0   0   0    0   28  0   0   32  0  
     0   59  13  5    0   0   0   10  0   0  
     0   13  72  34   2   0   0   0   0   65 
     0   5   34  114  0   0   0   0   0   55 
     0   0   2   0    70  0   28  32  12  0  
     28  0   0   0    0   87  20  0   33  0  
     0   0   0   0    28  20  71  39  0   0  
     0   10  0   0    32  0   39  46  8   0  
     32  0   0   0    12  33  0   8   82  11 
     0   0   65  55   0   0   0   0   11  100];
b=ones(10,1);

// Aを疎行列に変換
Asparse=sparse(A);
[x, fail, err, iter, res]=pcg(Asparse,b,maxIter=30,tol=1d-12);
mprintf("      fail=%d, iter=%d, errrel=%e\n",fail,iter,err)

// 右辺を計算する関数を定義.
function y=Atimesx(x)
  A=[ 94  0   0   0    0   28  0   0   32  0  
       0   59  13  5    0   0   0   10  0   0  
       0   13  72  34   2   0   0   0   0   65
       0   5   34  114  0   0   0   0   0   55
       0   0   2   0    70  0   28  32  12  0
       28  0   0   0    0   87  20  0   33  0
       0   0   0   0    28  20  71  39  0   0
       0   10  0   0    32  0   39  46  8   0
       32  0   0   0    12  33  0   8   82  11
       0   0   65  55   0   0   0   0   11  100];
  y=A*x
endfunction

// スクリプトAtimesx をプリミティブに指定
[x, fail, err, iter, res]=pcg(Atimesx,b,maxIter=30,tol=1d-12);
mprintf("      fail=%d, iter=%d, errrel=%e\n",fail,iter,err)

// 右辺を計算する関数を定義.
function y=Atimesxbis(x,A)
  y=A*x
endfunction

// リストをプリミティブに指定
Alist = list(Atimesxbis,Asparse);
[x, fail, err, iter, res]=pcg(Alist,b,maxIter=30,tol=1d-12);
mprintf("      fail=%d, iter=%d, errrel=%e\n",fail,iter,err)
 ]]></programlisting>
  </refsection>

  <refsection>
    <title>key=value構文の例</title>

    <para>
	以下の例ではkey=value"構文により引数を指定する方法を示します.
	これにより,位置を固定せずに引数を設定できるようになり,
	引数のリストにおいてその順番に依存せずに引数を設定できます.
	利用可能なキーはオプションの引数の名前で,以下に示します:
	 tol, maxIter, %M, %M2, x0, verbose. 
	以下の例では,
	maxIterオプションの前にverboseオプションを指定します.
	"key=value" 構文ではなく,
	位置を指定する引数の場合は,
	maxIterを最初にverboseを後に指定する必要があります.</para>

    <programlisting role="example"><![CDATA[ 
// 引数をkey=value構文で指定する例
A=[100,1;1,10];
b=[101;11];
[xcomputed, flag, err, iter, res]=pcg(A,b,verbose=1);

// key=value構文では, 順番は関係ありません
[xcomputed, flag, err, iter, res]=pcg(A,b,verbose=1,maxIter=0);
 ]]></programlisting>
  </refsection>

  <refsection role="see also">
    <title>参照</title>

    <simplelist type="inline">
      <member><link linkend="backslash">backslash</link></member>

      <member><link linkend="qmr">qmr</link></member>

      <member><link linkend="gmres">gmres</link></member>
    </simplelist>
  </refsection>

  <refsection>
    <title>作者</title>

    <para>Sage Group, IRISA, 2004</para>
    <para>Serge Steer, INRIA, 2006</para>
    <para>Michael Baudin, INRIA, 2008-2009</para>
  </refsection>

  <refsection>
    <title>参考文献</title>

    <para>"Templates for the Solution of Linear Systems: Building Blocks for
    Iterative Methods", Barrett, Berry, Chan, Demmel, Donato, Dongarra,
    Eijkhout, Pozo, Romine, and Van der Vorst, SIAM Publications, 1993, ftp
    netlib2.cs.utk.edu/linalg/templates.ps</para>

    <para>"Iterative Methods for Sparse Linear Systems, Second Edition", Saad,
    SIAM Publications, 2003, ftp
    ftp.cs.umn.edu/dept/users/saad/PS/all_ps.zip</para>
  </refsection>
</refentry>
