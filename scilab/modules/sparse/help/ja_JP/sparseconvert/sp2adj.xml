<?xml version="1.0" encoding="UTF-8"?>

<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2008 - INRIA
 * 
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at    
 * http://www.cecill.info/licences/Licence_CeCILL_V2.1-en.txt
 *
 -->

<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:ns5="http://www.w3.org/1999/xhtml" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:id="sp2adj" xml:lang="ja">
    
    <refnamediv>
        
        <refname>sp2adj</refname>
        
        <refpurpose>疎行列を隣接形式に変換する</refpurpose>
        
    </refnamediv>
    
    <refsynopsisdiv>
        
        <title>呼び出し手順</title>
        
        <synopsis>
            
            [xadj,iadj,v]=sp2adj(A)
            
        </synopsis>
        
    </refsynopsisdiv>
    
    <refsection>
        
        <title>引数</title>
        
        <variablelist>
            
            <varlistentry>
                
                <term>A</term>
                
                <listitem>
                    
                    <para>
                        
                        m行n列の実数または複素数の疎行列 (nz 個の非ゼロエントリ)
                        
                    </para>
                    
                </listitem>
                
            </varlistentry>
            
            <varlistentry>
                
                <term>xadj</term>
                
                <listitem>
                    
                    <para>
                        
                        (n+1)行1列の浮動小数点整数の行列で,
                        
                        各列のiadjとvの先頭の添字を指します.
                        
                        <literal>j=1:n</literal>の場合, 
                        
                        浮動小数点整数
                        
                        <literal>xadj(j+1)-xadj(j)</literal> は
                        
                        j列の非ゼロエントリの数になります.
                        
                    </para>
                    
                </listitem>
                
            </varlistentry>
            
            <varlistentry>
                
                <term>iadj</term>
                
                <listitem>
                    
                    <para>
                        
                        nz行1列の浮動小数点整数の行列, 非ゼロエントリの行添字.
                        
                        <literal>j=1:n</literal>および, 
                        
                        <literal>k = xadj(j):xadj(j+1)-1</literal>に関して, 
                        
                        浮動小数点整数 <literal>i = iadj(k)</literal> は
                        
                        非ゼロエントリ #k の行添字です.
                        
                    </para>
                    
                </listitem>
                
            </varlistentry>
            
            <varlistentry>
                
                <term>v</term>
                
                <listitem>
                    
                    <para>
                        
                        nz行1列の浮動小数点整数の行列, Aの非ゼロエントリ.
                        
                        <literal>j=1:n</literal>および, 
                        
                        <literal>k = xadj(j):xadj(j+1)-1</literal>に関して, 
                        
                        浮動小数点整数<literal>Aij = v(k)</literal>は
                        
                        非ゼロエントリ #k の値です.
                        
                    </para>
                    
                </listitem>
                
            </varlistentry>
            
        </variablelist>
        
    </refsection>
    
    <refsection>
        
        <title>説明</title>
        
        <para>
            
            sp2adjは,疎行列を隣接形式に変換します.
            
            隣接形式の値は列毎に保存されています.
            
            これは,この形式がしばしば
            
            "Compressed sparse column" または CSCと呼ばれる理由です.
            
        </para>
        
    </refsection>
    
    <refsection>
        
        <title>例</title>
        
        <para>
            
            以下の例では,1から10のエントリを有する通常の行列を作成します.
            
            次に,これを疎行列に変換し,ゼロを除きます.
            
            最後に,この行列の隣接形式を計算します.
            
            行列bはAの非ゼロ要素のみを有します.
            
        </para>
        
        <programlisting role="example"><![CDATA[
A = [
0 0 4 0 9
0 0 5 0 0
1 3 0 7 0
0 0 6 0 10
2 0 0 8 0
];
B=sparse(A);
[xadj,iadj,v]=sp2adj(B)
expected_xadj = [1 3 4 7 9 11]';
expected_adjncy = [3 5 3 1 2 4 3 5 1 4]';
expected_anz = [1 2 3 4 5 6 7 8 9 10]';
and(expected_xadj == xadj) // Should be %t
and(expected_adjncy == iadj) // Should be %t
and(expected_anz == v) // Should be %t
// j is the column index
for j = 1 : size(xadj,"*")-1
  irows = iadj(xadj(j):xadj(j+1)-1);
  vcolj = v(xadj(j):xadj(j+1)-1);
  mprintf("Column #%d:\n",j)
  mprintf("  Rows  = %s:\n",sci2exp(irows))
  mprintf("  Values= %s:\n",sci2exp(vcolj))
end
 ]]></programlisting>
        
        <para>
            
            前のスクリプトは以下の出力を生成します.
            
        </para>
        
        <programlisting role="no-scilab-exec"><![CDATA[
Column #1:
  Rows  = [3;5]:
  Values= [1;2]:
Column #2:
  Rows  = 3:
  Values= 3:
Column #3:
  Rows  = [1;2;4]:
  Values= [4;5;6]:
Column #4:
  Rows  = [3;5]:
  Values= [7;8]:
Column #5:
  Rows  = [1;4]:
  Values= [9;10]:
 ]]></programlisting>
        
        <para>
            
            列 #1について考えてみましょう.
            
            等式 xadj(2)-xadj(1)=2 は列 #1に非ゼロ要素が2個あることを示します.
            
            行添字は iadjに保存され, 列 #1 の非ゼロエントリは
            
            行 #3 および #5であることを示します.
            
            行列 v は実際のエントリが 1および2であることを示します.
            
        </para>
        
        <para>
            
            以下の例では,疎行列の非ゼロエントリを隣接構造でループ処理を
            
            することにより,調べます.
            
        </para>
        
        <programlisting role="example"><![CDATA[
A = [
0 0 0 0 0 6 0 0 0 0
3 0 5 0 0 0 0 5 0 0
0 0 0 3 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 7 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 3
0 0 0 0 0 0 0 0 2 0
];
B=sparse(A);
[xadj,iadj,v]=sp2adj(B)
expected_xadj = [1 2 3 4 5 5 6 6 7 8 9]';
expected_adjncy = [2 5 2 3 1 2 7 6]';
expected_anz = [3 7 5 3 6 5 2 3]';
and(expected_xadj == xadj) // Should be %t
and(expected_adjncy == iadj) // Should be %t
and(expected_anz == v) // Should be %t
 ]]></programlisting>
        
        <para>
            
            以下の例では,sp2adjおよびadj2sp関数が逆関数であることを
            
            確認します.
            
        </para>
        
        <programlisting role="example"><![CDATA[
// Templates for the Solution of Algebraic Eigenvalue Problems: a Practical Guide
// Edited by Zhaojun Bai, James Demmel, Jack Dongarra, Axel Ruhe, and Henk van der Vorst
// "Sparse Matrix Storage Formats", J. Dongarra
// http://web.eecs.utk.edu/~dongarra/etemplates/book.html

A = [
10 0 0 0 -2 0
3 9 0 0 0 3
0 7 8 7 0 0
3 0 8 7 5 0
0 8 0 9 9 13
0 4 0 0 2 -1
];
A = sparse(A)

// To get the Compressed Sparse Column (CSC) :
[col_ptr,row_ind,val]=sp2adj(A)
// To convert back to sparse:
AAsp=adj2sp(col_ptr,row_ind,val)
// Check the conversion
AAsp - A

// To get the Compressed Sparse Row (CSR) :
[row_ptr,col_ind,val]=sp2adj(A')
// To convert back to sparse:
AAsp=adj2sp(row_ptr,col_ind,val)'
// Check the conversion
AAsp - A
 ]]></programlisting>
        
    </refsection>
    
    <refsection role="see also">
        
        <title>参照</title>
        
        <simplelist type="inline">
            
            <member>
                
                <link linkend="adj2sp">adj2sp</link>
                
            </member>
            
            <member>
                
                <link linkend="sparse">sparse</link>
                
            </member>
            
            <member>
                
                <link linkend="spcompack">spcompack</link>
                
            </member>
            
            <member>
                
                <link linkend="spget">spget</link>
                
            </member>
            
        </simplelist>
        
    </refsection>
    
    <refsection>
        
        <title>参考文献</title>
        
        <para>
            
            "Implementation of Lipsol in Scilab", Hector E. Rubio Scola, INRIA, Decembre 1997, Rapport Technique No 0215
            
        </para>
        
        <para>
            
            "Solving Large Linear Optimization Problems with Scilab : Application to Multicommodity Problems", Hector E. Rubio Scola, Janvier 1999, Rapport Technique No 0227
            
        </para>
        
        <para>
            
            "Toolbox Scilab : Detection signal design for failure detection and isolation for linear dynamic systems User's Guide", Hector E. Rubio Scola, 2000, Rapport Technique No 0241
            
        </para>
        
        <para>
            
            "Computer Solution of Large Sparse Positive Definite Systems", A. George, Prentice-Hall, Inc. Englewood Cliffs, New Jersey, 1981.
            
        </para>
        
    </refsection>
    
</refentry>

