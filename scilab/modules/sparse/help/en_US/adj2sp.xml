<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2008 - INRIA
 * Copyright (C) 2010 - DIGITEO - Michael Baudin
 * 
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at    
 * http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
 *
 -->
<refentry version="5.0-subset Scilab"
          xml:id="adj2sp"
          xml:lang="en"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:ns5="http://www.w3.org/1999/xhtml"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:db="http://docbook.org/ns/docbook">
  <info>
    <pubdate>$LastChangedDate$</pubdate>
  </info>

  <refnamediv>
    <refname>adj2sp</refname>

    <refpurpose>converts adjacency form into sparse matrix.</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <title>Calling Sequence</title>
    <synopsis>
      A=adj2sp(xadj,iadj,v)
      A=adj2sp(xadj,iadj,v,mn)
    </synopsis>
  </refsynopsisdiv>



  <refsection>
    <title>Arguments</title>

    <variablelist>
      <varlistentry>
        <term>xadj</term>

        <listitem>
          <para>
            a (n+1)-by-1 matrix of floating point integers.
            For <literal>j=1:n</literal>, the floating point integer 
            <literal>xadj(j+1)-xadj(j)</literal> is the number of non zero entries in
            column j. 
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>iadj</term>

        <listitem>
          <para>
            a nz-by-1 matrix of floating point integers, the row indices for the
            nonzeros. 
            For <literal>j=1:n</literal>, for <literal>k = xadj(j):xadj(j+1)-1</literal>, the floating point integer 
            <literal>i = iadj(k)</literal> is the row index of the nonzero entry #k.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>v</term>

        <listitem>
          <para>
            a nz-by-1 matrix of floating point integers, the non-zero entries of A. 
            For <literal>j=1:n</literal>, for <literal>k = xadj(j):xadj(j+1)-1</literal>, the floating point integer 
            <literal>Aij = v(k)</literal> is the value of the nonzero entry #k.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>mn</term>

        <listitem>
          <para>
            a 1-by-2 or 2-by-1 matrix of floating point integers, optional, 
            <literal>mn(1)</literal> is the number of rows in A, 
            <literal>mn(2)</literal> is the number of columns in A.
            If <literal>mn</literal> is not provided, then <literal>mn=[m,n]</literal> is the default with
            <literal>m=max(iadj)</literal> and <literal>n=size(xadj,"*")-1</literal>.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>A</term>

        <listitem>
          <para>m-by-n real or complex sparse matrix (with nz non-zero entries)</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsection>

  <refsection>
    <title>Description</title>

    <para>
      adj2sp converts a sparse matrix into its adjacency form format. 
      The values in the adjacency format are stored colum-by-column. 
      This is why this format is sometimes called "Compressed sparse column" or CSC. 
    </para>

  </refsection>

  <refsection>
    <title>Examples</title>

    <para>
    In the following example, we create a sparse matrix from its adjacency format. 
    Then we check that it matches the expected sparse matrix.
    </para>

    <programlisting role="example">
      <![CDATA[ 
xadj = [1 3 4 7 9 11]';
iadj = [3 5 3 1 2 4 3 5 1 4]';
v = [1 2 3 4 5 6 7 8 9 10]';
B=adj2sp(xadj,iadj,v)
A = [
0 0 4 0 9
0 0 5 0 0
1 3 0 7 0
0 0 6 0 10
2 0 0 8 0
];
C=sparse(A)
and(B==C)
 ]]>
    </programlisting>

    <para>
    In the following example, we create a sparse matrix from its adjacency format. 
    Then we check that it matches the expected sparse matrix.
    </para>

    <programlisting role="example">
      <![CDATA[ 
xadj = [1 2 3 4 5 5 6 6 7 8 9]';
iadj = [2 5 2 3 1 2 7 6]';
v = [3 7 5 3 6 5 2 3]';
C=adj2sp(xadj,iadj,v)
A = [
0 0 0 0 0 6 0 0 0 0
3 0 5 0 0 0 0 5 0 0
0 0 0 3 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 7 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 3
0 0 0 0 0 0 0 0 2 0
];
B=sparse(A)
and(B==C)
 ]]>
    </programlisting>

    <para>
    In the following example, we check the use of the mn parameter. 
    The consistency between the mn parameter and the actual content of
    xadj and iadj is checked by adj2sp.
    </para>

    <programlisting role="example">
      <![CDATA[ 
xadj = [1 2 3 4 5 5 6 6 7 8 9]';
iadj = [2 5 2 3 1 2 7 6]';
v = [3 7 5 3 6 5 2 3]';
mn=[7 10];
C=adj2sp(xadj,iadj,v,mn)
 ]]>
    </programlisting>

    <para>
    In the following example, create a 3-by-3 sparse matrix. 
    This example is adapted from the documentation of SciPy.
    </para>

    <programlisting role="example">
      <![CDATA[ 
xadj =  [1,3,4,7]
iadj =  [1,3,3,1,2,3]
v = [1,2,3,4,5,6]
full(adj2sp(xadj,iadj,v))
 ]]>
    </programlisting>

    <para>
    The previous script produces the following output.
    </para>

    <programlisting role="example">
      <![CDATA[ 
-->full(adj2sp(xadj,iadj,v))
 ans  =
    1.    0.    4.  
    0.    0.    5.  
    2.    3.    6.  
 ]]>
    </programlisting>

    <para>
    In the following example, we check that the sp2adj and adj2sp functions 
    are inverse.
    </para>

    <programlisting role="example">
      <![CDATA[ 
A = sprand(100,50,.05);
[xadj,adjncy,anz]= sp2adj(A);
[n,m] = size(A);
p = adj2sp(xadj,adjncy,anz,[n,m]);
A-p
 ]]>
    </programlisting>

  </refsection>

  <refsection>
    <title>See Also</title>

    <simplelist type="inline">
      <member>
        <link linkend="sp2adj">sp2adj</link>
      </member>

      <member>
        <link linkend="spcompack">spcompack</link>
      </member>
    </simplelist>
  </refsection>
  <refsection>
    <title>References</title>

    <para>
      "Implementation of Lipsol in Scilab", Hector E. Rubio Scola, INRIA, Decembre 1997, Rapport Technique No 0215
    </para>
    <para>
      "Solving Large Linear Optimization Problems with Scilab : Application to Multicommodity Problems", Hector E. Rubio Scola, Janvier 1999, Rapport Technique No 0227
    </para>
    <para>
      "Toolbox Scilab : Detection signal design for failure detection and isolation for linear dynamic systems User's Guide", Hector E. Rubio Scola, 2000, Rapport Technique No 0241
    </para>
    <para>
      "Computer Solution of Large Sparse Positive Definite Systems", A. George, Prentice-Hall, Inc. Englewood Cliffs, New Jersey, 1981.
    </para>
  </refsection>
</refentry>
