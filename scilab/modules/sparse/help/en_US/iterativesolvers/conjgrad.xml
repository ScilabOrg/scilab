<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2013 - Scilab Enterprises - Paul Bignier
 *
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at
 * http://www.cecill.info/licences/Licence_CeCILL_V2.1-en.txt
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1999/xhtml" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:id="conjgrad" xml:lang="en">
    <refnamediv>
        <refname>conjgrad</refname>
        <refpurpose>conjugate gradient solvers</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Calling Sequence</title>
        <synopsis>
            [x, flag, err, iter, res] = conjgrad(A, b [, method [, tol [, maxIter [, M [, M2 [, x0 [, verbose]]]]]]])
            [x, flag, err, iter, res] = conjgrad(A, b [, method [, key=value,...]])
        </synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>Arguments</title>
        <variablelist>
            <varlistentry>
                <term>A</term>
                <term/>
                <listitem>
                    <para>a matrix, or a function, or a list computing
                        <literal>A*x</literal> for each given <literal>x</literal>. The
                        following is a description of the computation of A*x depending on
                        the type of A.
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                <literal>matrix.</literal>If A is a matrix, it can be
                                dense or sparse
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <literal>function.</literal>If A is a function, it must
                                have the following header :
                            </para>
                            <programlisting role=""><![CDATA[
function y = A ( x )
 ]]></programlisting>
                        </listitem>
                        <listitem>
                            <para>
                                <literal>list.</literal>If A is a list, the first element
                                of the list is expected to be a function and the other elements
                                in the list are the arguments of the function, from index 2 to
                                the end. When the function is called, the current value of x is
                                passed to the function as the first argument. The other
                                arguments passed are the one given in the list.
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>b</term>
                <listitem>
                    <para>right hand side vector (size: nx1)</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>mehtod</term>
                <listitem>
                    <para>scalar string, "pcg", "cgs", "bicg" or "bicgstab" (default "bicgstab")</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>tol</term>
                <listitem>
                    <para>error relative tolerance (default: 1e-8).
                        The termination criteria is based on the 2-norm of the
                        residual r=b-Ax, divided by the 2-norm of the right hand side b.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>maxIter</term>
                <listitem>
                    <para>maximum number of iterations (default: n)</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>M</term>
                <listitem>
                    <para>preconditioner: full or sparse matrix or function returning
                        <literal>M\x</literal> (default: none)
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>M2</term>
                <listitem>
                    <para>preconditioner: full or sparse matrix or function returning
                        <literal>M2\x</literal> for each <literal>x</literal> (default:
                        none)
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>x0</term>
                <listitem>
                    <para>initial guess vector (default: zeros(n,1))</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>verbose</term>
                <listitem>
                    <para>set to 1 to enable verbose logging (default 0)</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>x</term>
                <listitem>
                    <para>solution vector</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>flag</term>
                <listitem>
                    <para>
                        0 if <literal>conjgrad</literal> converged to the desired tolerance
                        within <literal>maxi</literal> iterations, 1 else
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>err</term>
                <listitem>
                    <para>final relative norm of the residual (the 2-norm of the right-hand side b is used)</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>iter</term>
                <listitem>
                    <para>number of iterations performed</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>res</term>
                <listitem>
                    <para>vector of the residual relative norms</para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Description</title>
        <para>
            Solves the linear system <literal>Ax=b</literal> using the conjugate
            gradient method with or without preconditioning. The preconditionning
            should be defined by a symmetric positive definite matrix
            <literal>M</literal>, or two matrices <literal>M1</literal> and
            <literal>M2</literal> such that <literal>M=M1*M2</literal>. in the case
            the function solves <literal>inv(M)*A*x = inv(M)*b</literal> for
            <literal>x</literal>. <literal>M</literal>, <literal>M1</literal> and
            <literal>M2</literal> can be Scilab functions with calling sequence
            <literal>y=Milx(x)</literal> which computes the corresponding left
            division <literal>y=Mi\x</literal>.
        </para>
        <para>
            The <literal>method</literal> input argument selects the solver to be used:
            <simplelist type="inline">
                <member>
                    "pcg" Preconditioned Conjugate Gradient
                </member>
                <member>
                    "cgs" preconditioned Conjugate Gradient Squared
                </member>
                <member>
                    "bicg" preconditioned BiConjugate Gradient
                </member>
                <member>
                    "bicgstab" preconditioned BiConjugate Gradient Stabilized (default)
                </member>
            </simplelist>
        </para>
        <para>
            If <literal>method="pcg"</literal>, then the <literal>A</literal> matrix
            must be a symmetric positive definite matrix (full or sparse)
            or a function with calling sequence <literal>y=Ax(x)</literal> which computes
            <literal>y=A*x</literal>.
            Otherwise (<literal>method="cgs", "bicg" or "bicgstab"</literal>),
            <literal>A</literal> just needs to be square.
        </para>
    </refsection>
    <refsection>
        <title>Example with well-conditionned and ill-conditionned
            problems
        </title>
        <para>In the following example, two linear systems are solved. The first
            maxtrix has a condition number equals to ~0.02, which makes the algorithm
            converge in exactly 10 iterations. Since this is the size of the matrix,
            it is an expected behaviour for a gradient conjugate method. The second
            one has a low condition number equals to 1.d-6, which makes the algorithm
            converge in a larger 22 iterations. This is why the parameter maxIter is
            set to 30. See below for other examples of the "key=value" syntax.
        </para>
        <programlisting role="example"><![CDATA[
// Well-conditionned problem
A = [ 94  0   0   0    0   28  0   0   32  0
     0   59  13  5    0   0   0   10  0   0
     0   13  72  34   2   0   0   0   0   65
     0   5   34  114  0   0   0   0   0   55
     0   0   2   0    70  0   28  32  12  0
     28  0   0   0    0   87  20  0   33  0
     0   0   0   0    28  20  71  39  0   0
     0   10  0   0    32  0   39  46  8   0
     32  0   0   0    12  33  0   8   82  11
     0   0   65  55   0   0   0   0   11  100];

b = ones(10, 1);
[x, fail, err, iter, res] = conjgrad(A, b, "bicg", 1d-12, 15);
mprintf("      fail=%d, iter=%d, errrel=%e\n",fail,iter,err)

// Ill-contionned one
A = [ 894     0   0     0   0   28  0   0   1000  70000
      0      5   13    5   0   0   0   0   0     0
      0      13  72    34  0   0   0   0   0     6500
      0      5   34    1   0   0   0   0   0     55
      0      0   0     0   70  0   28  32  12    0
      28     0   0     0   0   87  20  0   33    0
      0      0   0     0   28  20  71  39  0     0
      0      0   0     0   32  0   39  46  8     0
      1000   0   0     0   12  33  0   8   82    11
      70000  0   6500  55  0   0   0   0   11    100];

[x, fail, err, iter, res] = conjgrad(A, b, method="pcg", maxIter=30, tol=1d-12);
mprintf("      fail=%d, iter=%d, errrel=%e\n",fail,iter,err)
 ]]></programlisting>
    </refsection>
    <refsection>
        <title>Examples with A given as a sparse matrix, or function, or
            list
        </title>
        <para>The following example shows that the method can handle sparse
            matrices as well. It also shows the case where a function, computing the
            right-hand side, is given to the "conjgrad" primitive. The final case shown by
            this example, is when a list is passed to the primitive.
        </para>
        <programlisting role="example"><![CDATA[
// Well-conditionned problem
A = [ 94  0   0   0    0   28  0   0   32  0
     0   59  13  5    0   0   0   10  0   0
     0   13  72  34   2   0   0   0   0   65
     0   5   34  114  0   0   0   0   0   55
     0   0   2   0    70  0   28  32  12  0
     28  0   0   0    0   87  20  0   33  0
     0   0   0   0    28  20  71  39  0   0
     0   10  0   0    32  0   39  46  8   0
     32  0   0   0    12  33  0   8   82  11
     0   0   65  55   0   0   0   0   11  100];
b = ones(10, 1);

// Convert A into a sparse matrix
Asparse=sparse(A);
[x, fail, err, iter, res] = conjgrad(Asparse, b, "cgs", maxIter=30, tol=1d-12);
mprintf("      fail=%d, iter=%d, errrel=%e\n",fail,iter,err)

// Define a function which computes the right-hand side.
function y = Atimesx(x)
  A = [ 94  0   0   0    0   28  0   0   32  0
       0   59  13  5    0   0   0   10  0   0
       0   13  72  34   2   0   0   0   0   65
       0   5   34  114  0   0   0   0   0   55
       0   0   2   0    70  0   28  32  12  0
       28  0   0   0    0   87  20  0   33  0
       0   0   0   0    28  20  71  39  0   0
       0   10  0   0    32  0   39  46  8   0
       32  0   0   0    12  33  0   8   82  11
       0   0   65  55   0   0   0   0   11  100];
  y = A*x
endfunction

// Pass the script Atimesx to the primitive
[x, fail, err, iter, res] = conjgrad(Atimesx, b, maxIter=30, tol=1d-12);
mprintf("      fail=%d, iter=%d, errrel=%e\n",fail,iter,err)

// Define a function which computes the right-hand side.
function y = Atimesxbis(x, A)
  y = A*x
endfunction

// Pass a list to the primitive
Alist = list(Atimesxbis, Asparse);
[x, fail, err, iter, res] = conjgrad(Alist, b, maxIter=30, tol=1d-12);
mprintf("      fail=%d, iter=%d, errrel=%e\n",fail,iter,err)
 ]]></programlisting>
    </refsection>
    <refsection>
        <title>Examples with key=value syntax</title>
        <para>The following example shows how to pass arguments with the
            "key=value" syntax. This allows to set non-positionnal arguments, that is,
            to set arguments which are not depending on their order in the list of
            arguments. The available keys are the names of the optional arguments,
            that is : tol, maxIter, %M, %M2, x0, verbose. Notice that, in the
            following example, the verbose option is given before the maxIter option.
            Without the "key=value" syntax, the positionnal arguments would require
            that maxIter come first and verbose after.
        </para>
        <programlisting role="example"><![CDATA[
// Example of an argument passed with key=value syntax
A = [100 1; 1 10];
b = [101; 11];
[xcomputed, flag, err, iter, res] = conjgrad(A, b, verbose=1);

// With key=value syntax, the order does not matter
[xcomputed, flag, err, iter, res] = conjgrad(A, b, verbose=1, maxIter=0);
 ]]></programlisting>
    </refsection>
    <refsection role="see also">
        <title>See Also</title>
        <simplelist type="inline">
            <member>
                <link linkend="backslash">backslash</link>
            </member>
            <member>
                <link linkend="qmr">qmr</link>
            </member>
            <member>
                <link linkend="gmres">gmres</link>
            </member>
        </simplelist>
    </refsection>
    <refsection>
        <title>References</title>
        <para>
            <emphasis role="bold">PCG</emphasis>
        </para>
        <para>"Templates for the Solution of Linear Systems: Building Blocks for
            Iterative Methods", Barrett, Berry, Chan, Demmel, Donato, Dongarra,
            Eijkhout, Pozo, Romine, and Van der Vorst, SIAM Publications, 1993, ftp
            netlib2.cs.utk.edu/linalg/templates.ps
        </para>
        <para>"Iterative Methods for Sparse Linear Systems, Second Edition", Saad,
            SIAM Publications, 2003, ftp
            ftp.cs.umn.edu/dept/users/saad/PS/all_ps.zip
        </para>
        <para>
            <emphasis role="bold">CGS</emphasis>
        </para>
        <para>
            "CGS, A Fast Lanczos-Type Solver for Nonsymmetric Linear systems" by Peter Sonneveld.
        </para>
        <para>
            <ulink url="http://epubs.siam.org/doi/abs/10.1137/0910004">Original article</ulink>
        </para>
        <para>
            <ulink url="http://dl.acm.org/citation.cfm?id=64888&amp;preflayout=flat">Article on ACM</ulink>
        </para>
        <para>
            <ulink url="http://mathworld.wolfram.com/ConjugateGradientSquaredMethod.html">Some theory around CGS</ulink>
        </para>
        <para>
            <emphasis role="bold">BICG</emphasis>
        </para>
        <para>
            "Numerical Recipes: The Art of Scientific Computing." (third ed.) by William Press, Saul Teukolsky, William Vetterling, Brian Flannery.
        </para>
        <para>
            <ulink url="http://apps.nrbook.com/empanel/index.html?pg=87">http://apps.nrbook.com/empanel/index.html?pg=87</ulink>
        </para>
        <para>
            <ulink url="http://dl.acm.org/citation.cfm?doid=1874391.187410">Article on ACM</ulink>
        </para>
        <para>
            <ulink url="http://mathworld.wolfram.com/BiconjugateGradientMethod.html">Some theory around BICG</ulink>
        </para>
        <para>
            <emphasis role="bold">BICGSTAB</emphasis>
        </para>
        <para>
            "Bi-CGSTAB: A Fast and Smoothly Converging Variant of Bi-CG for the Solution of Nonsymmetric Linear Systems" by Henk van der Vorst.	339
        </para>
        <para>
            <ulink url="http://epubs.siam.org/doi/abs/10.1137/0913035">Original article</ulink>
        </para>
        <para>
            <ulink url="http://dl.acm.org/citation.cfm?id=131916.131930&amp;coll=DL&amp;dl=GUIDE&amp;CFID=372773884&amp;CFTOKEN=56630250">Article on ACM</ulink>
        </para>
        <para>
            <ulink url="http://mathworld.wolfram.com/BiconjugateGradientStabilizedMethod.html">Some theory around BICG</ulink>
        </para>
    </refsection>
    <refsection>
        <title>History</title>
        <revhistory>
            <revision>
                <revnumber>5.5.0</revnumber>
                <revdescription>
                    Introduction
                </revdescription>
            </revision>
        </revhistory>
    </refsection>
</refentry>
