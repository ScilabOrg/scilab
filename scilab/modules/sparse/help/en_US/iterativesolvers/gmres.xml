<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) XXXX-2008 - INRIA
 * Copyright (C) 2012 - Scilab Enterprises - Adeline Carnis
 *
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at
 * http://www.cecill.info/licences/Licence_CeCILL_V2.1-en.txt
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:lang="en" xml:id="gmres">
    <refnamediv>
        <refname>gmres</refname>
        <refpurpose>Generalized Minimum RESidual method</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Calling Sequence</title>
        <synopsis>[x,flag,err,iter,res] = gmres(A,b,[rstr,[tol,[maxi,[M,[x0]]]]])</synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>Arguments</title>
        <variablelist>
            <varlistentry>
                <term>A</term>
                <listitem>
                    <para>
                        n-by-n matrix or function returning <literal>A*x</literal>. If <literal>A</literal> is a function, it must have the following header :
                    </para>
                    <programlisting role=""><![CDATA[
function y = A ( x )
 ]]></programlisting>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>b</term>
                <listitem>
                    <para>right hand side vector</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>x0</term>
                <listitem>
                    <para>initial guess vector (default: zeros(n,1))</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>M</term>
                <listitem>
                    <para>
                        preconditioner: matrix of size n-by-n or function returning <literal>M*x</literal> (In the first case, default: eye(n,n)). If M is a function, it must have the following header :
                    </para>
                    <programlisting role=""><![CDATA[
function y = M ( x )
 ]]></programlisting>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>rstr</term>
                <listitem>
                    <para>number of iterations between restarts (default: 10)</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>maxi</term>
                <listitem>
                    <para>maximum number of iterations (default: n)</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>tol</term>
                <listitem>
                    <para>error tolerance (default: 1e-6)</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>x</term>
                <listitem>
                    <para>solution vector</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>err</term>
                <listitem>
                    <para>final residual norm</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>iter</term>
                <listitem>
                    <para>number of iterations performed</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>flag</term>
                <listitem>
                    <variablelist>
                        <varlistentry>
                            <term>0 =</term>
                            <listitem>
                                <para>
                                    <literal>gmres</literal> converged to the desired tolerance within <literal>maxi</literal> iterations
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>1 =</term>
                            <listitem>
                                <para>
                                    no convergence given <literal>maxi</literal>
                                </para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>res</term>
                <listitem>
                    <para>residual vector</para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Description</title>
        <variablelist>
            <varlistentry>
                <term>GMRES </term>
                <listitem>
                    <para>
                        solves the linear system <literal>Ax=b</literal> using the Generalized Minimal residual  method with restarts.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Details </term>
                <listitem>
                    <para>of this algorithm are described in :</para>
                    <para>"Templates for the Solution of Linear Systems: Building Blocks for
                        Iterative Methods", Barrett, Berry, Chan, Demmel, Donato, Dongarra,
                        Eijkhout, Pozo, Romine, and Van der Vorst, SIAM Publications, 1993 (ftp
                        netlib2.cs.utk.edu; cd linalg; get templates.ps).
                    </para>
                    <para>"Iterative Methods for Sparse Linear Systems, Second Edition" Saad,
                        SIAM Publications, 2003 (ftp ftp.cs.umn.edu; cd dept/users/saad/PS; get
                        all_ps.zip).
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Examples</title>
        <programlisting role="example"><![CDATA[
	// If A and M are matrices
A=[ 94  0   0   0    0   28  0   0   32  0
     0   59  13  5    0   0   0   10  0   0
     0   13  72  34   2   0   0   0   0   65
     0   5   34  114  0   0   0   0   0   55
     0   0   2   0    70  0   28  32  12  0
     28  0   0   0    0   87  20  0   33  0
     0   0   0   0    28  20  71  39  0   0
     0   10  0   0    32  0   39  46  8   0
     32  0   0   0    12  33  0   8   82  11
     0   0   65  55   0   0   0   0   11  100];
b=ones(10,1);
[x,flag,err,iter,res] = gmres(A, b)

M = eye(10, 10);

[x,flag,err,iter,res] = gmres(A, b, 10, 1d-12, 20, M, zeros(10, 1))

	// If A is a matrix and M is a function
	A=[ 94  0   0   0    0   28  0   0   32  0
     0   59  13  5    0   0   0   10  0   0
     0   13  72  34   2   0   0   0   0   65
     0   5   34  114  0   0   0   0   0   55
     0   0   2   0    70  0   28  32  12  0
     28  0   0   0    0   87  20  0   33  0
     0   0   0   0    28  20  71  39  0   0
     0   10  0   0    32  0   39  46  8   0
     32  0   0   0    12  33  0   8   82  11
     0   0   65  55   0   0   0   0   11  100];
b=ones(10,1);

function y = Mtimesx(x)
M = eye(10,10);
y = M*x;
endfunction

[x,flag,err,iter,res] = gmres(A, b, 10, 1d-12, 20, Mtimesx, zeros(10, 1))

	// If A is a function and M is a matrix
	function y = Atimesx(x)
	A=[ 94  0   0   0    0   28  0   0   32  0
     0   59  13  5    0   0   0   10  0   0
     0   13  72  34   2   0   0   0   0   65
     0   5   34  114  0   0   0   0   0   55
     0   0   2   0    70  0   28  32  12  0
     28  0   0   0    0   87  20  0   33  0
     0   0   0   0    28  20  71  39  0   0
     0   10  0   0    32  0   39  46  8   0
     32  0   0   0    12  33  0   8   82  11
     0   0   65  55   0   0   0   0   11  100];
	 y = A * x;
	 endfunction

	 b = ones(10,1);
	 M = eye(10, 10);

	 [x,flag,err,iter,res] = gmres(Atimesx, b)

	 [x,flag,err,iter,res] = gmres(Atimesx, b, 10, 1d-12, 20, M, zeros(10,1))

	 // If A and M are functions
	 function y = Atimesx(x)
	A=[ 94  0   0   0    0   28  0   0   32  0
     0   59  13  5    0   0   0   10  0   0
     0   13  72  34   2   0   0   0   0   65
     0   5   34  114  0   0   0   0   0   55
     0   0   2   0    70  0   28  32  12  0
     28  0   0   0    0   87  20  0   33  0
     0   0   0   0    28  20  71  39  0   0
     0   10  0   0    32  0   39  46  8   0
     32  0   0   0    12  33  0   8   82  11
     0   0   65  55   0   0   0   0   11  100];
	 y = A * x;
	 endfunction

	 function y = Mtimesx(x)
M = eye(10,10);
y = M*x;
endfunction

	 [x,flag,err,iter,res] = gmres(Atimesx, b, 10, 1d-12, 20, Mtimesx, zeros(10,1))
 ]]></programlisting>
    </refsection>
    <refsection role="see also">
        <title>See Also</title>
        <simplelist type="inline">
            <member>
                <link linkend="conjgrad">conjgrad</link>
            </member>
            <member>
                <link linkend="qmr">qmr</link>
            </member>
        </simplelist>
    </refsection>
</refentry>
