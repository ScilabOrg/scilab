<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2011 - DIGITEO - Michael Baudin
 *
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at
 * http://www.cecill.info/licences/Licence_CeCILL_V2.1-en.txt
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:ns5="http://www.w3.org/1999/xhtml" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:id="ordmmd" xml:lang="en">
    <refnamediv>
        <refname>ordmmd</refname>
        <refpurpose>
            Compute multiple minimum degree ordering
        </refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Calling Sequence</title>
        <synopsis>
            [perm,invp,nofsub]=ordmmd(xadj,iadj,n)
        </synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>Arguments</title>
        <variablelist>
            <varlistentry>
                <term>n</term>
                <listitem>
                    <para>a 1-by-1 matrix of doubles, integer value, the number of equations</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>xadj</term>
                <listitem>
                    <para>(n+1)-by-1 matrix of doubles, integer value, pointer to the rows of A</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>iadj</term>
                <listitem>
                    <para>nnz-by-1 matrix of doubles, integer value, the row indices of A</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>perm</term>
                <listitem>
                    <para>n-by-1 matrix of doubles, integer value, the minimum degree ordering</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>invp</term>
                <listitem>
                    <para>n-by-1 matrix of doubles, integer value, the inverse of perm</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>nofsub</term>
                <listitem>
                    <para>
                        1-by-1 matrix of doubles, integer value,
                        an upper bound on the number of nonzero subscripts for the compressed storage scheme
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Description</title>
        <para>
            The minimum degree algorithm is used to permute the rows and
            columns of a symmetric sparse matrix before applying the Cholesky decomposition.
            This algorithm reduces the number of non-zeros in the Cholesky factor.
        </para>
        <para>
            Given a n-by-n real symmetric sparse square matrix <literal>A</literal>,
            the Cholesky factor <literal>U</literal> will typically suffer "fill in", that is have more
            non-zeros than the upper triangle of <literal>A</literal>.
            We seek a permutation matrix <literal>P</literal>, so that the matrix <literal>P'*A*P</literal>,
            which is also symmetric, has the least possible fill in its Cholesky factor.
        </para>
    </refsection>
    <refsection>
        <title>Examples</title>
        <para>
            In the following example, we compute an ordering for a symmetric
            sparse matrix.
            We use the <literal>sp2adj</literal> function to compute the adjacency structure.
        </para>
        <programlisting role="example"><![CDATA[
A = [
4. 1. 2. 0.5 2.
1. 0.5 0. 0. 0.
2. 0. 3. 0. 0.
0.5 0. 0. 5./8. 0.
2. 0. 0. 0. 16.
];
A = sparse(A);
[xadj,iadj,val]=sp2adj(A);
n = size(A,"r");
[perm,invp,nofsub]=ordmmd(xadj,iadj,n)
 ]]></programlisting>
        <para>
            In the following example, we compute an ordering for a symmetric
            sparse matrix.
            We check that <literal>invp</literal> is the inverse of <literal>perm</literal>.
        </para>
        <programlisting role="example"><![CDATA[
    A = [
    0.,  0.,  0.,  2.,  0.,  0.,  2.,  0.,  2.,  0.,  0. ;
    0.,  0.,  4.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0. ;
    0.,  4.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0. ;
    2.,  0.,  0.,  0.,  0.,  0.,  2.,  0.,  2.,  0.,  0. ;
    0.,  0.,  0.,  0. , 0.,  0.,  0.,  0.,  0.,  0.,  4. ;
    0.,  0.,  0.,  0.,  0.,  0.,  0.,  3.,  0.,  3.,  0. ;
    2.,  0.,  0.,  2.,  0.,  0.,  0.,  0.,  2.,  0.,  0. ;
    0.,  0.,  0.,  0.,  0.,  3.,  0.,  0.,  0.,  3.,  0. ;
    2.,  0.,  0.,  2.,  0.,  0.,  2.,  0.,  0.,  0.,  0. ;
    0.,  0.,  0.,  0.,  0.,  3.,  0.,  3.,  0.,  0.,  0. ;
    0.,  0.,  0.,  0.,  4.,  0.,  0.,  0.,  0.,  0.,  0.];
    n=size(A,1);
    A=sparse(A);
    [xadj,adjncy,anz]=sp2adj(A);
    [perm,invp,nofsub]=ordmmd(xadj,adjncy,n);
    perm(invp)
 ]]></programlisting>
        <para>
            In the following example, we compare the sparsity pattern of the Cholesky
            factor of a matrix <literal>A</literal> and the matrix <literal>P'*A*P</literal>.
            See p. 3, "Chapter 1: Introduction" in
            "Computer Solution of Large Sparse Positive Definite Systems".
            We see that the number of nonzeros in the Cholesky decomposition is
            15, while the matrix <literal>P'*A*P</literal> has a Cholesky decomposition with
            9 nonzeros.
        </para>
        <programlisting role="example"><![CDATA[
A = [
4. 1. 2. 0.5 2.
1. 0.5 0. 0. 0.
2. 0. 3. 0. 0.
0.5 0. 0. 5./8. 0.
2. 0. 0. 0. 16.
];
A = sparse(A);
// See the sparsity pattern of the Cholesky factors of A
U = sparse(chol(full(A)));
scf();
subplot(2,1,1);
PlotSparse(U,"x");
xtitle("Sparsity pattern of U, such that A=U''*U");
// Get the adjacency structure
[xadj,iadj,val]=sp2adj(A);
// Compute multiple minimum degree ordering
n = size(A,"r");
[perm,invp,nofsub]=ordmmd(xadj,iadj,n);
// Convert the permutation vector into matrix.
P=spzeros(n,n);
for i=1:n
    P(perm(i),i)=1;
end
// See the sparsity pattern of the Cholesky factors
// of P'*A*P
U = sparse(chol(full(P'*A*P)));
subplot(2,1,2);
PlotSparse(U,"x");
xtitle("Sparsity pattern of U, such that P''*A*P=U''*U");
 ]]></programlisting>
        <scilab:image localized="true">
            A = [
            4. 1. 2. 0.5 2.
            1. 0.5 0. 0. 0.
            2. 0. 3. 0. 0.
            0.5 0. 0. 0.625 0.
            2. 0. 0. 0. 16.
            ];
            A = sparse(A);
            U = sparse(chol(full(A)));
            scf();
            subplot(2,1,1);
            PlotSparse(U,"x");
            xtitle("Sparsity pattern of U, such that A=U''*U");
            [xadj,iadj,val]=sp2adj(A);
            n = size(A,"r");
            [perm,invp,nofsub]=ordmmd(xadj,iadj,n);
            P=spzeros(n,n);
            for i=1:n
            P(perm(i),i)=1;
            end
            U = sparse(chol(full(P'*A*P)));
            subplot(2,1,2);
            PlotSparse(U,"x");
            xtitle("Sparsity pattern of U, such that P''*A*P=U''*U");
        </scilab:image>
    </refsection>
    <refsection>
        <title>Implementation notes</title>
        <para>
            This function is based on "ordmmd.f" a source code (1994) by Esmond G. Ng and Barry W. Peyton
            from Mathematical Sciences Section, Oak Ridge National Laboratory.
            The algorithm is based on the genmmd routine by Joseph W.H. Liu from the
            SPARSPAK library.
        </para>
    </refsection>
    <refsection>
        <title>Bibliography</title>
        <para>
            "Minimum degree algorithm", Wikipedia contributors, Wikipedia, The Free Encyclopedia. http://en.wikipedia.org/wiki/Minimum_degree_algorithm
        </para>
        <para>
            "A new release of SPARSPAK: the Waterloo sparse matrix package", Alan George and Esmond Ng. 1984. SIGNUM Newsl. 19, 4 (October 1984), 9-13.
        </para>
        <para>
            "Computer Solution of Large Sparse Positive Definite Systems" by Alan George and Joseph Liu, Prentice-Hall, Inc. Englewood Cliffs, New Jersey, 1981
        </para>
        <para>
            "Implementation of Lipsol in Scilab", Rubio Scola, 1997, INRIA, No 0215
        </para>
    </refsection>
    <refsection role="see also">
        <title>See Also</title>
        <simplelist type="inline">
            <member>
                <link linkend="sp2adj">sp2adj</link>
            </member>
            <member>
                <link linkend="spchol">spchol</link>
            </member>
        </simplelist>
    </refsection>
</refentry>
