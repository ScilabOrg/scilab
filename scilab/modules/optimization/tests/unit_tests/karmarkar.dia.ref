// =============================================================================
// Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
// Copyright (C) 2010 - DIGITEO - Michael Baudin
//
//  This file is distributed under the same license as the Scilab package.
// =============================================================================
// <-- JVM NOT MANDATORY -->
//
// assert_close --
//   Returns 1 if the two real matrices computed and expected are close,
//   i.e. if the relative distance between computed and expected is lesser than epsilon.
// Arguments
//   computed, expected : the two matrices to compare
//   epsilon : a small number
//
function flag = assert_close ( computed, expected, epsilon )
    if expected==0.0 then
        shift = norm(computed-expected);
    else
        shift = norm(computed-expected)/norm(expected);
    end
    if shift < epsilon then
        flag = 1;
    else
        flag = 0;
    end
    if flag <> 1 then bugmes();quit;end
endfunction
//
// assert_equal --
//   Returns 1 if the two real matrices computed and expected are equal.
// Arguments
//   computed, expected : the two matrices to compare
//   epsilon : a small number
//
function flag = assert_equal ( computed , expected )
    if computed==expected then
        flag = 1;
    else
        flag = 0;
    end
    if flag <> 1 then bugmes();quit;end
endfunction
// With slack variables:
//
// Min { -20.x1 - 24.x2 } such as:
// 3.x1 + 6.x2 + x3 = 60
// 4.x1 + 2.x2 + x4 = 32
// x1, x2, x3, x4 >= 0
c = [-20 -24 0 0]';
Aeq = [
3 6 1 0
4 2 0 1
];
beq = [60 32]';
xexpected = [4 8 0 0]';
fexpected = -272;
// [x0,kerA]=linsolve(Aeq,-beq)
// x0 = lsq(Aeq,beq) also works
x0 = [
4.1128205
7.7333333
1.2615385
0.0820513
];
[xopt,fopt]=karmarkar(Aeq,beq,c,x0);
assert_close ( xopt , xexpected , 1.e-3 );
assert_close ( fopt , fexpected , 1.e-4 );
//
// Configure the relative tolerance
[xopt,fopt]=karmarkar(Aeq,beq,c,x0,1.e-6);
assert_close ( xopt , xexpected , 1.e-4 );
assert_close ( fopt , fexpected , 1.e-5 );
//
// Configure the gamma
[xopt,fopt]=karmarkar(Aeq,beq,c,x0,1.e-6,0.1);
assert_close ( xopt , xexpected , 1.e-3 );
assert_close ( fopt , fexpected , 1.e-4 );
//
// Check new API (from Scilab v5.3.x).
//
// Check number of iterations
[xopt,fopt,count]=karmarkar(Aeq,beq,c,x0);
assert_close ( xopt , xexpected , 1.e-3 );
assert_close ( fopt , fexpected , 1.e-4 );
assert_equal ( count>10 , %t );
//
// Check number of iterations, with default options
[xopt,fopt,count]=karmarkar(Aeq,beq,c,x0,[],[],10);
assert_equal ( count , 10 );
//
// Check output function
function stop = myoutputfunction ( iter , xopt , fopt , d )
    norstep = norm(d)
    localmsg = gettext("Iteration #%3.0f, fopt=%10.3e, ||d||=%10.3e\n")
    mprintf(localmsg,iter,fopt,norstep)
    stop = %f
endfunction
xopt=karmarkar(Aeq,beq,c,x0,[],[],[],myoutputfunction);
Iteration #  0, fopt=-2.679e+002, ||d||=0.000e+000
Iteration #  1, fopt=-2.688e+002, ||d||=3.249e-001
Iteration #  2, fopt=-2.696e+002, ||d||=2.436e-001
Iteration #  3, fopt=-2.701e+002, ||d||=1.827e-001
Iteration #  4, fopt=-2.706e+002, ||d||=1.369e-001
Iteration #  5, fopt=-2.709e+002, ||d||=1.027e-001
Iteration #  6, fopt=-2.711e+002, ||d||=7.695e-002
Iteration #  7, fopt=-2.713e+002, ||d||=5.771e-002
Iteration #  8, fopt=-2.715e+002, ||d||=4.336e-002
Iteration #  9, fopt=-2.716e+002, ||d||=3.271e-002
Iteration # 10, fopt=-2.717e+002, ||d||=2.487e-002
Iteration # 11, fopt=-2.717e+002, ||d||=1.914e-002
Iteration # 12, fopt=-2.718e+002, ||d||=1.493e-002
Iteration # 13, fopt=-2.718e+002, ||d||=1.177e-002
Iteration # 14, fopt=-2.719e+002, ||d||=9.327e-003
Iteration # 15, fopt=-2.719e+002, ||d||=7.373e-003
Iteration # 16, fopt=-2.719e+002, ||d||=5.787e-003
Iteration # 17, fopt=-2.719e+002, ||d||=4.502e-003
Iteration # 18, fopt=-2.720e+002, ||d||=3.471e-003
Iteration # 19, fopt=-2.720e+002, ||d||=2.656e-003
Iteration # 20, fopt=-2.720e+002, ||d||=2.020e-003
Iteration # 21, fopt=-2.720e+002, ||d||=1.530e-003
Iteration # 22, fopt=-2.720e+002, ||d||=1.155e-003
Iteration # 23, fopt=-2.720e+002, ||d||=8.704e-004
Iteration # 24, fopt=-2.720e+002, ||d||=6.548e-004
assert_close ( xopt , xexpected , 1.e-3 );
//
// Check output function with additionnal arguments
function stop = myoutputfunction2 ( iter , xopt , fopt , d , myAeq , mybeq , myc )
    norstep = norm(d)
    localmsg = gettext("Iteration #%3.0f, fopt=%10.3e, ||d||=%10.3e, ||Ax-beq||=%.3e\n")
    mprintf(localmsg,iter,fopt,norstep,norm(myAeq*xopt-mybeq))
    stop = %f
endfunction
xopt=karmarkar(Aeq,beq,c,x0,[],[],[],list(myoutputfunction2,Aeq,beq,c));
Iteration #  0, fopt=-2.679e+002, ||d||=0.000e+000, ||Ax-beq||=2.236e-007
Iteration #  1, fopt=-2.688e+002, ||d||=3.249e-001, ||Ax-beq||=2.236e-007
Iteration #  2, fopt=-2.696e+002, ||d||=2.436e-001, ||Ax-beq||=2.236e-007
Iteration #  3, fopt=-2.701e+002, ||d||=1.827e-001, ||Ax-beq||=2.236e-007
Iteration #  4, fopt=-2.706e+002, ||d||=1.369e-001, ||Ax-beq||=2.236e-007
Iteration #  5, fopt=-2.709e+002, ||d||=1.027e-001, ||Ax-beq||=2.236e-007
Iteration #  6, fopt=-2.711e+002, ||d||=7.695e-002, ||Ax-beq||=2.236e-007
Iteration #  7, fopt=-2.713e+002, ||d||=5.771e-002, ||Ax-beq||=2.236e-007
Iteration #  8, fopt=-2.715e+002, ||d||=4.336e-002, ||Ax-beq||=2.236e-007
Iteration #  9, fopt=-2.716e+002, ||d||=3.271e-002, ||Ax-beq||=2.236e-007
Iteration # 10, fopt=-2.717e+002, ||d||=2.487e-002, ||Ax-beq||=2.236e-007
Iteration # 11, fopt=-2.717e+002, ||d||=1.914e-002, ||Ax-beq||=2.236e-007
Iteration # 12, fopt=-2.718e+002, ||d||=1.493e-002, ||Ax-beq||=2.236e-007
Iteration # 13, fopt=-2.718e+002, ||d||=1.177e-002, ||Ax-beq||=2.236e-007
Iteration # 14, fopt=-2.719e+002, ||d||=9.327e-003, ||Ax-beq||=2.236e-007
Iteration # 15, fopt=-2.719e+002, ||d||=7.373e-003, ||Ax-beq||=2.236e-007
Iteration # 16, fopt=-2.719e+002, ||d||=5.787e-003, ||Ax-beq||=2.236e-007
Iteration # 17, fopt=-2.719e+002, ||d||=4.502e-003, ||Ax-beq||=2.236e-007
Iteration # 18, fopt=-2.720e+002, ||d||=3.471e-003, ||Ax-beq||=2.236e-007
Iteration # 19, fopt=-2.720e+002, ||d||=2.656e-003, ||Ax-beq||=2.236e-007
Iteration # 20, fopt=-2.720e+002, ||d||=2.020e-003, ||Ax-beq||=2.236e-007
Iteration # 21, fopt=-2.720e+002, ||d||=1.530e-003, ||Ax-beq||=2.236e-007
Iteration # 22, fopt=-2.720e+002, ||d||=1.155e-003, ||Ax-beq||=2.236e-007
Iteration # 23, fopt=-2.720e+002, ||d||=8.704e-004, ||Ax-beq||=2.237e-007
Iteration # 24, fopt=-2.720e+002, ||d||=6.548e-004, ||Ax-beq||=2.237e-007
assert_close ( xopt , xexpected , 1.e-3 );
//
// References
// "Practical Optimization", Antoniou, Lu, 2007
// Chapter 11, "Linear Programming Part I: The simplex method",
// Example 11.9, p. 361
// Chapter 12, "Linear Programming Part II: Interior point methods",
// Example 12.2, p.382
Aeq = [
-2 2 1 -1 0
1 4 -1 0 -1
];
beq = [1;1];
c = [2;9;3;0;0];
x0 = [0.2;0.7;1;1;1];
function stop = myoutputfunction ( iter , xopt , fopt , d )
    norstep = norm(d)
    localmsg = gettext("Iteration #%3.0f, fopt=%10.3e, ||d||=%10.3e, x=[%s]\n")
    xstr = strcat(msprintf("%.6f\n",xopt)'," ")
    mprintf(localmsg,iter,fopt,norstep,xstr)
    stop = %f
endfunction
Attention: redéfinition de la fonction: myoutputfunction        . Utilisez funcprot(0) pour éviter ce message

gam = 0.9999;
rtolx = 1.e-4;
[xopt,fopt,iter]=karmarkar(Aeq,beq,c,x0,rtolx,gam,[],myoutputfunction);
Iteration #  0, fopt=9.700e+000, ||d||=0.000e+000, x=[0.200000 0.700000 1.000000 1.000000 1.000000]
Iteration #  1, fopt=5.158e+000, ||d||=1.309e+000, x=[0.099438 0.454077 0.290822 0.000100 0.624922]
Iteration #  2, fopt=4.151e+000, ||d||=3.515e-001, x=[0.000010 0.383410 0.233301 0.000100 0.300347]
Iteration #  3, fopt=4.000e+000, ||d||=3.205e-001, x=[0.000010 0.333357 0.333406 0.000100 0.000030]
Iteration #  4, fopt=4.000e+000, ||d||=1.230e-004, x=[0.000008 0.333339 0.333336 0.000000 0.000029]
xstar = [0 1/3 1/3 0 0]';
fstar = 4;
assert_close ( xopt , xstar , 1.e-3 );
assert_close ( fopt , fstar , 1.e-4 );
assert_equal ( iter , 4 );
