// Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
// Copyright (C) 2008-2009 - INRIA - Michael Baudin
// Copyright (C) 2011 - DIGITEO - Michael Baudin
//
// This file must be used under the terms of the CeCILL.
// This source file is licensed as described in the file COPYING, which
// you should have received as part of this distribution.  The terms
// are also available at
// http://www.cecill.info/licences/Licence_CeCILL_V2.1-en.txt
// <-- CLI SHELL MODE -->
function [ y , index ] = squarefun ( x , index )
y = x(1)^2+x(2)^2;
endfunction
nm = neldermead_new ();
nm = neldermead_configure(nm,"-numberofvariables",2);
nm = neldermead_configure(nm,"-x0",[1.0 1.0]');
nm = neldermead_configure(nm,"-simplex0method","axes");
nm = neldermead_configure(nm,"-simplex0length",0.5);
nm = neldermead_configure(nm,"-method","fixed");
nm = neldermead_configure(nm,"-function",squarefun);
nm = neldermead_search(nm, "off");
xopt = neldermead_get(nm,"-xopt");
assert_checkalmostequal ( xopt , [0.0;0.0], 1e-6 );
fopt = neldermead_get(nm,"-fopt");
assert_checkalmostequal ( fopt , 0.0, 1e-6 );
nm = neldermead_destroy(nm);
//
// Interrupt the algorithm when done.
nm = neldermead_new ();
nm = neldermead_configure(nm,"-numberofvariables",2);
nm = neldermead_configure(nm,"-x0",[1.0 1.0]');
nm = neldermead_configure(nm,"-method","fixed");
nm = neldermead_configure(nm,"-function",squarefun);
// Set the relative size to zero: it should never stop...
nm = neldermead_configure(nm,"-tolsimplexizerelative",0.0);
nm = neldermead_search(nm, "off");
xopt = neldermead_get(nm,"-xopt");
assert_checkalmostequal ( xopt , [0.0;0.0], 1e-6 );
fopt = neldermead_get(nm,"-fopt");
assert_checkalmostequal ( fopt , 0.0, 1e-6 );
nm = neldermead_destroy(nm);
//
// Check verbose mode on a few iterations.
nm = neldermead_new ();
nm = neldermead_configure(nm,"-numberofvariables",2);
nm = neldermead_configure(nm,"-x0",[1.0 1.0]');
nm = neldermead_configure(nm,"-method","fixed");
nm = neldermead_configure(nm,"-function",squarefun);
nm = neldermead_configure(nm,"-maxiter",5);
nm = neldermead_configure(nm,"-verbose",1);
// Set the relative size to zero: it should never stop...
nm = neldermead_configure(nm,"-tolsimplexizerelative",0.0);
nm = neldermead_search(nm, "off");
Function Evaluation #1, index=1, x= [1 1]
Function Evaluation #2, index=2, x= [1 1]
Function Evaluation #3, index=2, x= [1 1]
Function Evaluation #4, index=2, x= [2 1]
Function Evaluation #5, index=2, x= [1 2]
Sort
=================================================================
Iteration #1 (total = 1)
Function Eval #5
Xopt : [1 1]
Fopt : 2
DeltaFv : 3
Center : [1.3333333 1.3333333]
Size : 1
Optim Simplex Object:
=====================
nbve: 3
n: 2
x: 3-by-2 matrix
fv: 3-by-1 matrix
Reflect
xbar=1.5 1
Function Evaluation #6, index=2, x= [2 0]
xr=2 0, f(xr)=4.000000
  > Perform reflect
=================================================================
Iteration #2 (total = 2)
Function Eval #6
Xopt : [1 1]
Fopt : 2
DeltaFv : 3
Center : [1.6666667 0.6666667]
Size : 1.4142136
Optim Simplex Object:
=====================
nbve: 3
n: 2
x: 3-by-2 matrix
fv: 3-by-1 matrix
Reflect
xbar=1.5 0.5
Function Evaluation #7, index=2, x= [1 0]
xr=1 0, f(xr)=1.000000
  > Perform reflect
=================================================================
Iteration #3 (total = 3)
Function Eval #7
Xopt : [1 0]
Fopt : 1
DeltaFv : 3
Center : [1.3333333 0.3333333]
Size : 1
Optim Simplex Object:
=====================
nbve: 3
n: 2
x: 3-by-2 matrix
fv: 3-by-1 matrix
Reflect
xbar=1 0.5
Function Evaluation #8, index=2, x= [0 1]
xr=0 1, f(xr)=1.000000
  > Perform reflect
=================================================================
Iteration #4 (total = 4)
Function Eval #8
Xopt : [1 0]
Fopt : 1
DeltaFv : 1
Center : [0.6666667 0.6666667]
Size : 1.4142136
Optim Simplex Object:
=====================
nbve: 3
n: 2
x: 3-by-2 matrix
fv: 3-by-1 matrix
Reflect
xbar=0.5 0.5
Function Evaluation #9, index=2, x= [0 0]
xr=0 0, f(xr)=0.000000
  > Perform reflect
=================================================================
Iteration #5 (total = 5)
Function Eval #9
Xopt : [0 0]
Fopt : 0
DeltaFv : 1
Center : [0.3333333 0.3333333]
Size : 1
Optim Simplex Object:
=====================
nbve: 3
n: 2
x: 3-by-2 matrix
fv: 3-by-1 matrix
Terminate with status : maxiter
xopt = neldermead_get(nm,"-xopt");
assert_checkalmostequal ( xopt , [0.0;0.0], 1e-6 );
fopt = neldermead_get(nm,"-fopt");
assert_checkalmostequal ( fopt , 0.0, 1e-6 );
nm = neldermead_destroy(nm);
function [ y , index ] = rosenbrock ( x , index )
  y = 100*(x(2)-x(1)^2)^2 + (1-x(1))^2;
endfunction
nm = neldermead_new ();
nm = neldermead_configure(nm,"-numberofvariables",2);
nm = neldermead_configure(nm,"-function",rosenbrock);
nm = neldermead_configure(nm,"-x0",[-1.2 1.0]');
nm = neldermead_configure(nm,"-maxiter",200);
nm = neldermead_configure(nm,"-maxfunevals",200);
nm = neldermead_configure(nm,"-tolfunrelative",10*%eps);
nm = neldermead_configure(nm,"-tolxrelative",10*%eps);
nm = neldermead_configure(nm,"-simplex0method","axes");
nm = neldermead_configure(nm,"-simplex0length",1.0);
nm = neldermead_configure(nm,"-method","fixed");
nm = neldermead_search(nm, "off");
// With fixed-size simplices, one cannot lead the 
// simplex to the optimum.
// Check optimum point
xopt = neldermead_get(nm,"-xopt");
assert_checkalmostequal ( xopt , [1.0;1.0], 1e1 );
// Check optimum point value
fopt = neldermead_get(nm,"-fopt");
assert_checkalmostequal ( fopt , 0.0 , 1e1 );
// Check status
status = neldermead_get(nm,"-status");
assert_checkequal ( status , "maxfuneval" );
// Cleanup
nm = neldermead_destroy(nm);
// Check that the verbose mode is functional
// Few iterations are necessary to check this
// Many iterations costs a lot more in time.
nm = neldermead_new ();
nm = neldermead_configure(nm,"-numberofvariables",2);
nm = neldermead_configure(nm,"-function",rosenbrock);
nm = neldermead_configure(nm,"-x0",[-1.2 1.0]');
nm = neldermead_configure(nm,"-maxiter",5);
nm = neldermead_configure(nm,"-maxfunevals",200);
nm = neldermead_configure(nm,"-tolfunrelative",10*%eps);
nm = neldermead_configure(nm,"-tolxrelative",10*%eps);
nm = neldermead_configure(nm,"-simplex0method","axes");
nm = neldermead_configure(nm,"-simplex0length",1.0);
nm = neldermead_configure(nm,"-method","fixed");
nm = neldermead_configure(nm,"-verbose",1);
nm = neldermead_configure(nm,"-verbosetermination",0);
nm = neldermead_search(nm, "off");
Function Evaluation #1, index=1, x= [-1.2 1]
Function Evaluation #2, index=2, x= [-1.2 1]
Function Evaluation #3, index=2, x= [-1.2 1]
Function Evaluation #4, index=2, x= [-0.2 1]
Function Evaluation #5, index=2, x= [-1.2 2]
Sort
=================================================================
Iteration #1 (total = 1)
Function Eval #5
Xopt : [-1.2 1]
Fopt : 24.2
DeltaFv : 69.4
Center : [-0.8666667 1.3333333]
Size : 1
Optim Simplex Object:
=====================
nbve: 3
n: 2
x: 3-by-2 matrix
fv: 3-by-1 matrix
Reflect
xbar=-1.2 1.5
Function Evaluation #6, index=2, x= [-2.2 2]
xr=-2.2 2, f(xr)=816.800000
xbar2=-0.7 1
Function Evaluation #7, index=2, x= [-0.2 0]
xr2=-0.2 0, f(xr2)=1.600000
  > Perform reflect / next
=================================================================
Iteration #2 (total = 2)
Function Eval #7
Xopt : [-0.2 0]
Fopt : 1.6
DeltaFv : 92
Center : [-0.5333333 0.6666667]
Size : 1.4142136
Optim Simplex Object:
=====================
nbve: 3
n: 2
x: 3-by-2 matrix
fv: 3-by-1 matrix
Reflect
xbar=-0.7 0.5
Function Evaluation #8, index=2, x= [-1.2 0]
xr=-1.2 0, f(xr)=212.200000
xbar2=-0.2 0.5
Function Evaluation #9, index=2, x= [0.8 0]
xr2=0.8 0, f(xr2)=41.000000
  > Perform Shrink
Function Evaluation #10, index=2, x= [-0.7 0.5]
Function Evaluation #11, index=2, x= [-0.2 0.5]
=================================================================
Iteration #3 (total = 3)
Function Eval #11
Xopt : [-0.2 0]
Fopt : 1.6
DeltaFv : 21
Center : [-0.3666667 0.3333333]
Size : 0.7071068
Optim Simplex Object:
=====================
nbve: 3
n: 2
x: 3-by-2 matrix
fv: 3-by-1 matrix
Reflect
xbar=-0.45 0.25
Function Evaluation #12, index=2, x= [-0.7 0]
xr=-0.7 0, f(xr)=26.900000
xbar2=-0.2 0.25
Function Evaluation #13, index=2, x= [0.3 0]
xr2=0.3 0, f(xr2)=1.300000
  > Perform reflect / next
=================================================================
Iteration #4 (total = 4)
Function Eval #13
Xopt : [0.3 0]
Fopt : 1.3
DeltaFv : 21.3
Center : [-0.0333333 0.1666667]
Size : 0.7071068
Optim Simplex Object:
=====================
nbve: 3
n: 2
x: 3-by-2 matrix
fv: 3-by-1 matrix
Reflect
xbar=0.05 0
Function Evaluation #14, index=2, x= [0.3 -0.5]
xr=0.3 -0.5, f(xr)=35.300000
xbar2=0.05 0.25
Function Evaluation #15, index=2, x= [0.3 0.5]
xr2=0.3 0.5, f(xr2)=17.300000
  > Perform Shrink
Function Evaluation #16, index=2, x= [0.05 0]
Function Evaluation #17, index=2, x= [0.05 0.25]
=================================================================
Iteration #5 (total = 5)
Function Eval #17
Xopt : [0.05 0]
Fopt : 0.903125
DeltaFv : 6.125
Center : [0.1333333 0.0833333]
Size : 0.25
Optim Simplex Object:
=====================
nbve: 3
n: 2
x: 3-by-2 matrix
fv: 3-by-1 matrix
Terminate with status : maxiter
status = neldermead_get(nm,"-status");
assert_checkequal ( status , "maxiter" );
nm = neldermead_destroy(nm);
