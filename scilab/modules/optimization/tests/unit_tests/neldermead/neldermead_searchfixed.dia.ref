// Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
// Copyright (C) 2008-2009 - INRIA - Michael Baudin
// Copyright (C) 2011 - DIGITEO - Michael Baudin
//
// This file must be used under the terms of the CeCILL.
// This source file is licensed as described in the file COPYING, which
// you should have received as part of this distribution.  The terms
// are also available at
// http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
// <-- JVM NOT MANDATORY -->
function [ y , index ] = squarefun ( x , index )
y = x(1)^2+x(2)^2;
endfunction
nm = neldermead_new ();
nm = neldermead_configure(nm,"-numberofvariables",2);
nm = neldermead_configure(nm,"-x0",[1.0 1.0]');
nm = neldermead_configure(nm,"-simplex0method","axes");
nm = neldermead_configure(nm,"-simplex0length",0.5);
nm = neldermead_configure(nm,"-method","fixed");
nm = neldermead_configure(nm,"-function",squarefun);
nm = neldermead_search(nm);
xopt = neldermead_get(nm,"-xopt");
assert_checkalmostequal ( xopt , [0.0;0.0], 1e-6 );
fopt = neldermead_get(nm,"-fopt");
assert_checkalmostequal ( fopt , 0.0, 1e-6 );
nm = neldermead_destroy(nm);
//
// Interrupt the algorithm when done.
nm = neldermead_new ();
nm = neldermead_configure(nm,"-numberofvariables",2);
nm = neldermead_configure(nm,"-x0",[1.0 1.0]');
nm = neldermead_configure(nm,"-method","fixed");
nm = neldermead_configure(nm,"-function",squarefun);
// Set the relative size to zero: it should never stop...
nm = neldermead_configure(nm,"-tolsimplexizerelative",0.0);
nm = neldermead_search(nm);
xopt = neldermead_get(nm,"-xopt");
assert_checkalmostequal ( xopt , [0.0;0.0], 1e-6 );
fopt = neldermead_get(nm,"-fopt");
assert_checkalmostequal ( fopt , 0.0, 1e-6 );
nm = neldermead_destroy(nm);
//
// Check verbose mode on a few iterations.
nm = neldermead_new ();
nm = neldermead_configure(nm,"-numberofvariables",2);
nm = neldermead_configure(nm,"-x0",[1.0 1.0]');
nm = neldermead_configure(nm,"-method","fixed");
nm = neldermead_configure(nm,"-function",squarefun);
nm = neldermead_configure(nm,"-maxiter",10);
// Reduce number of displayed digits to increase 
// portability of the test.
format("v",6);
nm = neldermead_configure(nm,"-verbose",1);
// Set the relative size to zero: it should never stop...
nm = neldermead_configure(nm,"-tolsimplexizerelative",0.0);
nm = neldermead_search(nm);
Function Evaluation #1 at [1 1]
Function Evaluation #2 at [1 1]
Function Evaluation #3 at [1 1]
Function Evaluation #4 at [2 1]
Function Evaluation #5 at [1 2]
Sort
=================================================================
Iteration #1 (total = 1)
Function Eval #5
Xopt : [1 1]
Fopt : 2
DeltaFv : 3
Center : [1.333 1.333]
Size : 1
Optim Simplex Object:
=====================
Vertex #1/3 : fv=2, x=1 1
Vertex #2/3 : fv=5, x=2 1
Vertex #3/3 : fv=5, x=1 2
Reflect
xbar=1.5 1
Function Evaluation #6 at [2 0]
xr=2 0, f(xr)=4.000000
  > Perform reflect
=================================================================
Iteration #2 (total = 2)
Function Eval #6
Xopt : [1 1]
Fopt : 2
DeltaFv : 3
Center : [1.667 0.667]
Size : 1.414
Optim Simplex Object:
=====================
Vertex #1/3 : fv=2, x=1 1
Vertex #2/3 : fv=4, x=2 0
Vertex #3/3 : fv=5, x=2 1
Reflect
xbar=1.5 0.5
Function Evaluation #7 at [1 0]
xr=1 0, f(xr)=1.000000
  > Perform reflect
=================================================================
Iteration #3 (total = 3)
Function Eval #7
Xopt : [1 0]
Fopt : 1
DeltaFv : 3
Center : [1.333 0.333]
Size : 1
Optim Simplex Object:
=====================
Vertex #1/3 : fv=1, x=1 0
Vertex #2/3 : fv=2, x=1 1
Vertex #3/3 : fv=4, x=2 0
Reflect
xbar=1 0.5
Function Evaluation #8 at [0 1]
xr=0 1, f(xr)=1.000000
  > Perform reflect
=================================================================
Iteration #4 (total = 4)
Function Eval #8
Xopt : [1 0]
Fopt : 1
DeltaFv : 1
Center : [0.667 0.667]
Size : 1.414
Optim Simplex Object:
=====================
Vertex #1/3 : fv=1, x=1 0
Vertex #2/3 : fv=1, x=0 1
Vertex #3/3 : fv=2, x=1 1
Reflect
xbar=0.5 0.5
Function Evaluation #9 at [0 0]
xr=0 0, f(xr)=0.000000
  > Perform reflect
=================================================================
Iteration #5 (total = 5)
Function Eval #9
Xopt : [0 0]
Fopt : 0
DeltaFv : 1
Center : [0.333 0.333]
Size : 1
Optim Simplex Object:
=====================
Vertex #1/3 : fv=0, x=0 0
Vertex #2/3 : fv=1, x=1 0
Vertex #3/3 : fv=1, x=0 1
Reflect
xbar=0.5 0
Function Evaluation #10 at [1 -1]
xr=1 -1, f(xr)=2.000000
xbar2=0 0.5
Function Evaluation #11 at [-1 1]
xr2=-1 1, f(xr2)=2.000000
  > Perform Shrink
Function Evaluation #12 at [0.5 0]
Function Evaluation #13 at [0 0.5]
=================================================================
Iteration #6 (total = 6)
Function Eval #13
Xopt : [0 0]
Fopt : 0
DeltaFv : 0.25
Center : [0.167 0.167]
Size : 0.5
Optim Simplex Object:
=====================
Vertex #1/3 : fv=0, x=0 0
Vertex #2/3 : fv=0.25, x=0.5 0
Vertex #3/3 : fv=0.25, x=0 0.5
Reflect
xbar=0.25 0
Function Evaluation #14 at [0.5 -0.5]
xr=0.5 -0.5, f(xr)=0.500000
xbar2=0 0.25
Function Evaluation #15 at [-0.5 0.5]
xr2=-0.5 0.5, f(xr2)=0.500000
  > Perform Shrink
Function Evaluation #16 at [0.25 0]
Function Evaluation #17 at [0 0.25]
=================================================================
Iteration #7 (total = 7)
Function Eval #17
Xopt : [0 0]
Fopt : 0
DeltaFv : 0.063
Center : [0.083 0.083]
Size : 0.25
Optim Simplex Object:
=====================
Vertex #1/3 : fv=0, x=0 0
Vertex #2/3 : fv=0.063, x=0.25 0
Vertex #3/3 : fv=0.063, x=0 0.25
Reflect
xbar=0.125 0
Function Evaluation #18 at [0.25 -0.25]
xr=0.25 -0.25, f(xr)=0.125000
xbar2=0 0.125
Function Evaluation #19 at [-0.25 0.25]
xr2=-0.25 0.25, f(xr2)=0.125000
  > Perform Shrink
Function Evaluation #20 at [0.125 0]
Function Evaluation #21 at [0 0.125]
=================================================================
Iteration #8 (total = 8)
Function Eval #21
Xopt : [0 0]
Fopt : 0
DeltaFv : 0.016
Center : [0.042 0.042]
Size : 0.125
Optim Simplex Object:
=====================
Vertex #1/3 : fv=0, x=0 0
Vertex #2/3 : fv=0.016, x=0.125 0
Vertex #3/3 : fv=0.016, x=0 0.125
Reflect
xbar=0.063 0
Function Evaluation #22 at [0.125 -0.125]
xr=0.125 -0.125, f(xr)=0.031250
xbar2=0 0.063
Function Evaluation #23 at [-0.125 0.125]
xr2=-0.125 0.125, f(xr2)=0.031250
  > Perform Shrink
Function Evaluation #24 at [0.063 0]
Function Evaluation #25 at [0 0.063]
=================================================================
Iteration #9 (total = 9)
Function Eval #25
Xopt : [0 0]
Fopt : 0
DeltaFv : 0.004
Center : [0.021 0.021]
Size : 0.063
Optim Simplex Object:
=====================
Vertex #1/3 : fv=0, x=0 0
Vertex #2/3 : fv=0.004, x=0.063 0
Vertex #3/3 : fv=0.004, x=0 0.063
Reflect
xbar=0.031 0
Function Evaluation #26 at [0.063 -0.063]
xr=0.063 -0.063, f(xr)=0.007812
xbar2=0 0.031
Function Evaluation #27 at [-0.063 0.063]
xr2=-0.063 0.063, f(xr2)=0.007812
  > Perform Shrink
Function Evaluation #28 at [0.031 0]
Function Evaluation #29 at [0 0.031]
=================================================================
Iteration #10 (total = 10)
Function Eval #29
Xopt : [0 0]
Fopt : 0
DeltaFv : 0.001
Center : [0.010 0.010]
Size : 0.031
Optim Simplex Object:
=====================
Vertex #1/3 : fv=0, x=0 0
Vertex #2/3 : fv=0.001, x=0.031 0
Vertex #3/3 : fv=0.001, x=0 0.031
Terminate with status : maxiter
xopt = neldermead_get(nm,"-xopt");
assert_checkalmostequal ( xopt , [0.0;0.0], 1e-6 );
fopt = neldermead_get(nm,"-fopt");
assert_checkalmostequal ( fopt , 0.0, 1e-6 );
nm = neldermead_destroy(nm);
