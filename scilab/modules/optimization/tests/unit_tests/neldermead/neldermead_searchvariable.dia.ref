// Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
// Copyright (C) 2008-2009 - INRIA - Michael Baudin
// Copyright (C) 2011 - DIGITEO - Michael Baudin
//
// This file must be used under the terms of the CeCILL.
// This source file is licensed as described in the file COPYING, which
// you should have received as part of this distribution.  The terms
// are also available at
// http://www.cecill.info/licences/Licence_CeCILL_V2.1-en.txt
// <-- CLI SHELL MODE -->
// <-- ENGLISH IMPOSED -->
function [ y , index ] = rosenbrock ( x , index )
  y = 100*(x(2)-x(1)^2)^2 + (1-x(1))^2;
endfunction
//
// Test on Rosenbrock test case
//
nm = neldermead_new ();
nm = neldermead_configure(nm,"-numberofvariables",2);
nm = neldermead_configure(nm,"-function",rosenbrock);
nm = neldermead_configure(nm,"-x0",[-1.2 1.0]');
nm = neldermead_configure(nm,"-maxiter",200);
nm = neldermead_configure(nm,"-maxfunevals",300);
nm = neldermead_configure(nm,"-tolfunrelative",10*%eps);
nm = neldermead_configure(nm,"-tolxrelative",10*%eps);
nm = neldermead_configure(nm,"-tolsimplexizerelative",1.e-6);
nm = neldermead_configure(nm,"-simplex0method","axes");
nm = neldermead_configure(nm,"-simplex0length",1.0);
nm = neldermead_configure(nm,"-method","variable");
nm = neldermead_configure(nm,"-storehistory",%t);
nm = neldermead_search(nm);
// Check optimum point
xopt = neldermead_get(nm,"-xopt");
assert_checkalmostequal ( xopt , [1.0;1.0], 1e-6 );
// Check optimum point value
fopt = neldermead_get(nm,"-fopt");
assert_checkalmostequal ( fopt , 0.0 , [] , 1e-6 );
// Check function value history
historyfopt = neldermead_get(nm,"-historyfopt");
iterations = neldermead_get(nm,"-iterations");
sizefopt = size(historyfopt);
assert_checkequal ( [iterations 1], sizefopt );
// Check number of function evaluations
funevals = neldermead_get(nm,"-funevals");
assert_checkequal ( (funevals < 300) , %T )
 ans  =
 
  T  
// Check optimum history
historyxopt = neldermead_get(nm,"-historyxopt");
sizexopt = size(historyxopt);
assert_checkequal ( iterations, sizexopt );
// Check simplex history
historysimplex = neldermead_get(nm,"-historysimplex");
sizexsimplex = size(historysimplex);
assert_checkequal ( [iterations 3 2], sizexsimplex );
// Check fx0
fx0 = neldermead_get(nm,"-fx0");
assert_checkalmostequal ( fx0 , 24.2 , 10*%eps );
// Check status
status = neldermead_get(nm,"-status");
assert_checkequal ( status , "tolsize" );
// Cleanup
nm = neldermead_destroy(nm);
// Check that the verbose mode is functional
// Few iterations are necessary to check this
// Many iterations costs a lot more in time.
nm = neldermead_new ();
nm = neldermead_configure(nm,"-numberofvariables",2);
nm = neldermead_configure(nm,"-function",rosenbrock);
nm = neldermead_configure(nm,"-x0",[-1.2 1.0]');
nm = neldermead_configure(nm,"-maxiter",5);
nm = neldermead_configure(nm,"-maxfunevals",300);
nm = neldermead_configure(nm,"-tolfunrelative",10*%eps);
nm = neldermead_configure(nm,"-tolxrelative",10*%eps);
nm = neldermead_configure(nm,"-tolsimplexizerelative",1.e-6);
nm = neldermead_configure(nm,"-simplex0method","axes");
nm = neldermead_configure(nm,"-simplex0length",1.0);
nm = neldermead_configure(nm,"-method","variable");
nm = neldermead_configure(nm,"-verbose",1);
nm = neldermead_configure(nm,"-verbosetermination",1);
nm = neldermead_configure(nm,"-storehistory",%t);
nm = neldermead_search(nm, "off");
Function Evaluation #1, index=1, x= [-1.2 1]
Function Evaluation #2, index=2, x= [-1.2 1]
Function Evaluation #3, index=2, x= [-1.2 1]
Function Evaluation #4, index=2, x= [-0.2 1]
Function Evaluation #5, index=2, x= [-1.2 2]
Step #1 : order
=================================================================
Iteration #1 (total = 1)
Function Eval #5
Xopt : [-1.2 1]
Fopt : 24.2
DeltaFv : 69.4
Center : [-0.8666667 1.3333333]
Size : 1
Optim Simplex Object:
=====================
nbve: 3
n: 2
x: 3-by-2 matrix
fv: 3-by-1 matrix
Reflect
xbar=-1.2 1.5
Function Evaluation #6, index=2, x= [-2.2 2]
xr=[-2.2 2], f(xr)=816.800000
Contract - inside
Function Evaluation #7, index=2, x= [-0.7 1.25]
xc=-0.7 1.25, f(xc)=60.650000
  > Perform Inside Contraction
Sort
=================================================================
Iteration #2 (total = 2)
Function Eval #7
Xopt : [-1.2 1]
Fopt : 24.2
DeltaFv : 36.45
Center : [-1.0333333 1.4166667]
Size : 1
Optim Simplex Object:
=====================
nbve: 3
n: 2
x: 3-by-2 matrix
fv: 3-by-1 matrix
  > Termination ?
  > iterations=2 >= maxiter=5
  > funevals=7 >= maxfunevals=300
  > e(x)=0.186339 < 2.220D-15 * 1.7534886 + 0
  > Terminate = F, status = continue
  > simplex size=1 < 0 + 0.000001 * 1
  > Terminate = F, status = continue
Reflect
xbar=-1.2 1.5
Function Evaluation #8, index=2, x= [-1.7 1.75]
xr=[-1.7 1.75], f(xr)=137.250000
Contract - inside
Function Evaluation #9, index=2, x= [-0.95 1.375]
xc=-0.95 1.375, f(xc)=26.128125
  > Perform Inside Contraction
Sort
=================================================================
Iteration #3 (total = 3)
Function Eval #9
Xopt : [-1.2 1]
Fopt : 24.2
DeltaFv : 12
Center : [-1.1166667 1.4583333]
Size : 1
Optim Simplex Object:
=====================
nbve: 3
n: 2
x: 3-by-2 matrix
fv: 3-by-1 matrix
  > Termination ?
  > iterations=3 >= maxiter=5
  > funevals=9 >= maxfunevals=300
  > e(x)=0.0931695 < 2.220D-15 * 1.8367582 + 0
  > Terminate = F, status = continue
  > simplex size=1 < 0 + 0.000001 * 1
  > Terminate = F, status = continue
Reflect
xbar=-1.075 1.1875
Function Evaluation #10, index=2, x= [-0.95 0.375]
xr=[-0.95 0.375], f(xr)=31.628125
Contract - outside
Function Evaluation #11, index=2, x= [-1.0125 0.78125]
xc=-1.0125 0.78125, f(xc)=9.999182
  > Perform Outside Contraction
Sort
=================================================================
Iteration #4 (total = 4)
Function Eval #11
Xopt : [-1.0125 0.78125]
Fopt : 9.9991821
DeltaFv : 16.128943
Center : [-1.0541667 1.0520833]
Size : 0.5970304
Optim Simplex Object:
=====================
nbve: 3
n: 2
x: 3-by-2 matrix
fv: 3-by-1 matrix
  > Termination ?
  > iterations=4 >= maxiter=5
  > funevals=11 >= maxfunevals=300
  > e(x)=0.4110296 < 2.220D-15 * 1.4893444 + 0
  > Terminate = F, status = continue
  > simplex size=0.5970304 < 0 + 0.000001 * 1
  > Terminate = F, status = continue
Reflect
xbar=-1.10625 0.890625
Function Evaluation #12, index=2, x= [-1.2625 0.40625]
xr=[-1.2625 0.40625], f(xr)=146.171643
Contract - inside
Function Evaluation #13, index=2, x= [-1.028125 1.1328125]
xc=-1.028125 1.1328125, f(xc)=4.687423
  > Perform Inside Contraction
Sort
=================================================================
Iteration #5 (total = 5)
Function Eval #13
Xopt : [-1.028125 1.1328125]
Fopt : 4.6874228
DeltaFv : 19.512577
Center : [-1.0802083 0.9713542]
Size : 0.3519096
Optim Simplex Object:
=====================
nbve: 3
n: 2
x: 3-by-2 matrix
fv: 3-by-1 matrix
  > Termination ?
  > iterations=5 >= maxiter=5
  > Terminate = T, status = maxiter
  > Terminate = T, status = maxiter
Terminate with status : maxiter
status = neldermead_get(nm,"-status");
assert_checkequal ( status , "maxiter" );
nm = neldermead_destroy(nm);
