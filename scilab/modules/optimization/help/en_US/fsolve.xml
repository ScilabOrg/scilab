<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2008 - INRIA
 * Copyright (C) 2011 - DIGITEO - Michael Baudin
 *
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at
 * http://www.cecill.info/licences/Licence_CeCILL_V2.1-en.txt
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1999/xhtml" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:id="fsolve" xml:lang="en">
    <refnamediv>
        <refname>fsolve</refname>
        <refpurpose>find a zero of a system of n nonlinear functions</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Calling Sequence</title>
        <synopsis>[x [,v [,info]]]=fsolve(x0,fct [,fjac] [,tol])</synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>Arguments</title>
        <variablelist>
            <varlistentry>
                <term>x0</term>
                <listitem>
                    <para>real vector (initial value of function argument).</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>fct</term>
                <listitem>
                    <para>external (i.e function or list or string).</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>fjac</term>
                <listitem>
                    <para>external (i.e function or list or string).</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>tol</term>
                <listitem>
                    <para>real scalar. precision tolerance: termination occurs when the
                        algorithm estimates that the relative error between x and the
                        solution is at most tol. (<literal>tol=1.d-10</literal> is the
                        default value).
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>x :</term>
                <listitem>
                    <para>real vector (final value of function argument, estimated
                        zero).
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>v :</term>
                <listitem>
                    <para>real vector (value of function at x).</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>info</term>
                <listitem>
                    <para>termination indicator</para>
                    <variablelist>
                        <varlistentry>
                            <term>0</term>
                            <listitem>
                                <para>improper input parameters.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>1</term>
                            <listitem>
                                <para>algorithm estimates that the relative error between x
                                    and the solution is at most tol.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>2</term>
                            <listitem>
                                <para>number of calls to fcn reached</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>3</term>
                            <listitem>
                                <para>tol is too small. No further improvement in the
                                    approximate solution x is possible.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>4</term>
                            <listitem>
                                <para>iteration is not making good progress.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Description</title>
        <para>find a zero of a system of n nonlinear functions in n variables by a
            modification of the powell hybrid method. Jacobian may be provided.
        </para>
        <programlisting role=""><![CDATA[
0 = fct(x) w.r.t x.
 ]]></programlisting>
        <para>
            <literal>fct</literal> is an "external". This external returns
            <literal>v=fct(x)</literal> given <literal>x</literal>.
        </para>
        <para>
            The simplest calling sequence for <literal>fct</literal> is:
        </para>
        <programlisting role=""><![CDATA[
[v]=fct(x).
 ]]></programlisting>
        <para>
            If <literal>fct</literal> is a character string, it refers to a C or
            Fortran routine which must be linked to Scilab. Fortran calling sequence
            must be
        </para>
        <programlisting role=""><![CDATA[
fct(n,x,v,iflag)
integer n,iflag
double precision x(n),v(n)
 ]]></programlisting>
        <para>and C Calling sequence must be</para>
        <programlisting role=""><![CDATA[
fct(int *n, double x[],double v[],int *iflag)
 ]]></programlisting>
        <para>
            Incremental link is possible (help <literal>link</literal>).
        </para>
        <para>
            <literal>jac</literal> is an "external". This external returns
            <literal>v=d(fct)/dx (x)</literal> given <literal>x</literal>.
        </para>
        <para>
            The simplest calling sequence for <literal>jac</literal> is:
        </para>
        <programlisting role=""><![CDATA[
[v]=jac(x).
 ]]></programlisting>
        <para>
            If <literal>jac</literal> is a character string, it refers to a to a
            C or Fortran routine which must be linked to Scilab calling sequences are
            the same as those for fct. Note however that v must be a nxn array.
        </para>
    </refsection>
    <refsection>
        <title>Examples</title>
        <programlisting role="example"><![CDATA[
// A simple example with fsolve
a=[1,7;2,8];
b=[10;11];

function y=fsol1(x)
  y=a*x+b
endfunction
function y=fsolj1(x)
  y=a
endfunction

[xres]=fsolve([100;100],fsol1);
a*xres+b

[xres]=fsolve([100;100],fsol1,fsolj1);
a*xres+b

// See SCI/modules/optimization/sci_gateway/fortran/Ex-fsolve.f
[xres]=fsolve([100;100],'fsol1','fsolj1',1.e-7);
a*xres+b
 ]]></programlisting>
        <para>For some starting points and some equations system, the fsolve method can fail. The fsolve method is a local search method.
            So, to have a good chance to find a solution to your equations system, you must ship, a good starting point to fsolve.
        </para>
        <para> Here is an example on which fsolve can fail:</para>
        <programlisting role="example"><![CDATA[
// Another example with fsolve
function F=feuler(x,r)
  F=x-r-dt*(x.^2-x.^3);
endfunction
function J=dFdx(x)  //Definition of the Jacobian
   J=1-dt*(2*x-3*x^2);
endfunction

r = 0.04257794928862307 ;
dt = 10;

[x,v,info]=fsolve(r,list(feuler,r),dFdx); // fsolve do not find the solution
disp(v); // The residual
disp(info); // The termination indicator

[x,v,info]=fsolve(1,list(feuler,r),dFdx); // fsolve find the solution
disp(v); // The residual
disp(info); // The termination indicator

clf();
x=linspace(0,1,1000);
plot(x,feuler(x))
a=gca();
a.grid=[5 5];
 ]]></programlisting>
        <scilab:image>
            function F=feuler(x,r)
            F=x-r-dt*(x.^2-x.^3);
            endfunction
            function J=dFdx(x)
            J=1-dt*(2*x-3*x^2);
            endfunction
            
            r = 0.04257794928862307 ;
            dt = 10;
            
            [x,v,info]=fsolve(r,list(feuler,r),dFdx);
            [x,v,info]=fsolve(1,list(feuler,r),dFdx);
            x=linspace(0,1,1000);
            plot(x,feuler(x))
            a=gca();
            a.grid=[5 5];
        </scilab:image>
        <para>So, each time you use fsolve, be sure to check the termination indicator and the residual value to see if fsolve has converged.</para>
    </refsection>
    <refsection role="see also">
        <title>See Also</title>
        <simplelist type="inline">
            <member>
                <link linkend="external">external</link>
            </member>
            <member>
                <link linkend="qpsolve">qpsolve</link>
            </member>
            <member>
                <link linkend="optim">optim</link>
            </member>
        </simplelist>
    </refsection>
</refentry>
