<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2011 - DIGITEO - Michael Baudin
 * 
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at    
 * http://www.cecill.info/licences/Licence_CeCILL_V2.1-en.txt
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1999/xhtml" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:id="pack" xml:lang="en">
    <refnamediv>
        <refname>pack</refname>
        <refpurpose>Compress a list of block-diagonal symmetric matrices.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Calling Sequence</title>
        <synopsis>
            CA = pack(A,blocksizes)
            [CA,sel] = pack(A,blocksizes)
        </synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>Arguments</title>
        <variablelist>
            <varlistentry>
                <term>A</term>
                <listitem>
                    <para>
                        m-by-n real matrix of doubles, the entries of a list of block-diagonal symmetric matrices. 
                        n is the number of matrices stored into <literal>A</literal>.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>blocksizes</term>
                <listitem>
                    <para>
                        b-by-1 real matrix of doubles, the sizes of the blocks.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>CA</term>
                <listitem>
                    <para>
                        p-by-n real matrix of doubles, a compressed representation of <literal>A</literal>. 
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>sel</term>
                <listitem>
                    <para>
                        1-by-s real matrix of doubles, the indices of the rows of <literal>A</literal> 
                        which have been selected in <literal>CA</literal>. 
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Description</title>
        <para>
            This function takes as input argument a list of 
            block-diagonal matrices stored in the m-by-n matrix <literal>A</literal>. 
            Only the non-zero entries of the block-diagonal matrices are stored. 
            The integer <literal>n</literal> is the number of block-diagonal matrices, 
            while the integer <literal>m</literal> is the number of nonzero entries of 
            one single block-diagonal matrix. 
            The function removes the symmetric entries, and returns in <literal>CA</literal>
            the compressed representation of <literal>A</literal>.
        </para>
        <para>
            In the <literal>CA</literal> matrix, the symmetric entries stored in <literal>A</literal> 
            have been removed. 
            The rows which have been selected in <literal>CA</literal> are stored in the vector 
            <literal>sel</literal>, so that, on output, we have 
            <literal>CA == A(sel,:)</literal>.
        </para>
        <para>
            For example, the matrix  
        </para>
        <para>
            <latex><![CDATA[ 
        \begin{eqnarray}
        Z = \left(
        \begin{array}{cccccc}
        1 & 2 & 0 & 0 & 0 & 0 \\
        2 & 3 & 0 & 0 & 0 & 0 \\
        0 & 0 & 4 & 5 & 6 & 0 \\
        0 & 0 & 5 & 7 & 8 & 0 \\
        0 & 0 & 6 & 8 & 9 & 0 \\
        0 & 0 & 0 & 0 & 0 & 10 \\
        \end{array}
        \right)
        \end{eqnarray}
 ]]></latex>
        </para>
        <para>
            is stored as
        </para>
        <screen>
            [1; 2; 3; 4; 5; 6; 7; 8; 9; 10]
        </screen>
        <para>
            with <literal>blocksizes=[2,3,1]</literal>.
        </para>
        <para>
            This function is designed to be used when preparing the input arguments of the 
            <literal>semidef</literal> function.
        </para>
    </refsection>
    <refsection>
        <title>Examples</title>
        <para>
            In the following example, we compress a single block-diagonal symmetric matrix <literal>Z</literal>. 
            This is the example presented in "SP: Software for Semidefinite Programming, User's Guide, Beta Version", 
            November 1994, L. Vandenberghe and S. Boyd, 1994, on page 5.
        </para>
        <programlisting role="example"><![CDATA[ 
Z = [
1 2 0 0 0 0
2 3 0 0 0 0
0 0 4 5 6 0
0 0 5 7 8 0
0 0 6 8 9 0
0 0 0 0 0 10
];
blocksizes=[2,3,1];
Z1 = Z(1:2,1:2);
Z2 = Z(3:5,3:5);
Z3 = Z(6,6);
A = list2vec(list(Z1,Z2,Z3));
[CA,sel] = pack(A,blocksizes)
 ]]></programlisting>
        <para>
            In the following example, we compress three block-diagonal symmetric matrices <literal>F0</literal>, 
            <literal>F1</literal> and <literal>F2</literal>. 
        </para>
        <programlisting role="example"><![CDATA[ 
// Define 3 symmetric block-diagonal matrices: F0, F1, F2
F0=[2,1,0,0;
    1,2,0,0;
    0,0,3,1;
    0,0,1,3]
F1=[1,2,0,0;
    2,1,0,0;
    0,0,1,3;
    0,0,3,1]
F2=[2,2,0,0;
    2,2,0,0;
    0,0,3,4;
    0,0,4,4]
// Define the size of the two blocks:
// the first block has size 2, 
// the second block has size 2.
blocksizes=[2,2];
// Extract the two blocks of the matrices.
F01=F0(1:2,1:2);
F02=F0(3:4,3:4);
F11=F1(1:2,1:2);
F12=F1(3:4,3:4);
F21=F2(1:2,1:2);
F22=F2(3:4,3:4);
// Create 3 column vectors, containing nonzero entries 
// in F0, F1, F2.
F0nnz = [F01(:);F02(:)];
F1nnz = [F11(:);F12(:)];
F2nnz = [F21(:);F22(:)];
// Create a 16-by-3 matrix, representing the 
// nonzero entries of the 3 matrices F0, F1, F2.
A=[F0nnz,F1nnz,F2nnz]
// Pack the list of matrices A into CA.
[CA,sel] = pack(A,blocksizes)
// Check that CA == A(sel,:)
A(sel,:)
 ]]></programlisting>
    </refsection>
    <refsection>
        <title>References</title>
        <para>
            L. Vandenberghe and S. Boyd, " Semidefinite Programming,"
            Informations Systems Laboratory, Stanford University, 1994.
        </para>
        <para>
            Ju. E. Nesterov and M. J. Todd, "Self-Scaled Cones and
            Interior-Point Methods in Nonlinear Programming," Working Paper, CORE,
            Catholic University of Louvain, Louvain-la-Neuve, Belgium, April
            1994.
        </para>
        <para>
            SP: Software for Semidefinite Programming, User's Guide, Beta Version, November 1994, 
            L. Vandenberghe and S. Boyd, 1994
            <ulink url="http://www.ee.ucla.edu/~vandenbe/sp.html">http://www.ee.ucla.edu/~vandenbe/sp.html</ulink>
        </para>
    </refsection>
    <refsection role="see also">
        <title>See Also</title>
        <simplelist type="inline">
            <member>
                <link linkend="unpack">unpack</link>
            </member>
        </simplelist>
    </refsection>
</refentry>
