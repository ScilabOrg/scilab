<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2008 - INRIA
 * Copyright (C) 2011 - DIGITEO - Michael Baudin
 * 
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at    
 * http://www.cecill.info/licences/Licence_CeCILL_V2.1-en.txt
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1999/xhtml" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:id="datafit" xml:lang="en">
    <refnamediv>
        <refname>datafit</refname>
        <refpurpose>Parameter identification based on measured data</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Calling Sequence</title>
        <synopsis>[p,err]=datafit([imp,] G [,DG],Z [,W],[contr],p0,[algo],[df0,[mem]],
            [work],[stop],['in'])
        </synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>Arguments</title>
        <variablelist>
            <varlistentry>
                <term>imp</term>
                <listitem>
                    <para>scalar argument used to set the trace mode.
                        <literal>imp=0</literal> nothing (execpt errors) is reported,
                        <literal>imp=1</literal> initial and final reports,
                        <literal>imp=2</literal> adds a report per iteration,
                        <literal>imp&gt;2</literal> add reports on linear search.
                    </para>
                    <para>
                        <warning>
                            Warning: most of these reports are written on the Scilab standard output.
                        </warning>
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>G</term>
                <listitem>
                    <para>function descriptor (e=G(p,z), e: ne x 1, p: np x 1, z: nz x
                        1)
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>DG</term>
                <listitem>
                    <para>partial of G wrt p function descriptor (optional; S=DG(p,z),
                        S: ne x np)
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Z</term>
                <listitem>
                    <para>matrix [z_1,z_2,...z_n] where z_i (nz x 1) is the ith
                        measurement
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>W</term>
                <listitem>
                    <para>weighting matrix of size ne x ne (optional; defaut no
                        ponderation)
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>contr</term>
                <listitem>
                    <para>
                        <literal>'b',binf,bsup</literal> with
                        <literal>binf</literal> and <literal>bsup</literal> real vectors
                        with same dimension as <literal>p0</literal>.
                        <literal>binf</literal> and <literal>bsup</literal> are lower and
                        upper bounds on <literal>p</literal>.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>p0</term>
                <listitem>
                    <para>initial guess (size np x 1)</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>algo</term>
                <listitem>
                    <para>
                        <literal>'qn'</literal> or <literal>'gc'</literal> or
                        <literal>'nd'</literal> . This string stands for quasi-Newton
                        (default), conjugate gradient or non-differentiable respectively.
                        Note that <literal>'nd'</literal> does not accept bounds on
                        <literal>x</literal> ).
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>df0</term>
                <listitem>
                    <para>
                        real scalar. Guessed decreasing of <literal>f</literal> at
                        first iteration. (<literal>df0=1</literal> is the default
                        value).
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>mem :</term>
                <listitem>
                    <para>integer, number of variables used to approximate the Hessian,
                        (<literal>algo='gc' or 'nd'</literal>). Default value is around
                        6.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>stop</term>
                <listitem>
                    <para>sequence of optional parameters controlling the convergence of
                        the algorithm. <literal> stop= 'ar',nap, [iter [,epsg [,epsf
                            [,epsx]]]]
                        </literal>
                    </para>
                    <variablelist>
                        <varlistentry>
                            <term>"ar"</term>
                            <listitem>
                                <para>reserved keyword for stopping rule selection defined as
                                    follows:
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>nap</term>
                            <listitem>
                                <para>
                                    maximum number of calls to <literal>fun</literal>
                                    allowed.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>iter</term>
                            <listitem>
                                <para>maximum number of iterations allowed.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>epsg</term>
                            <listitem>
                                <para>threshold on gradient norm.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>epsf</term>
                            <listitem>
                                <para>threshold controlling decreasing of
                                    <literal>f</literal>
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>epsx</term>
                            <listitem>
                                <para>
                                    threshold controlling variation of <literal>x</literal>.
                                    This vector (possibly matrix) of same size as
                                    <literal>x0</literal> can be used to scale
                                    <literal>x</literal>.
                                </para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>"in"</term>
                <listitem>
                    <para>reserved keyword for initialization of parameters used when
                        <literal>fun</literal> in given as a Fortran routine (see
                        below).
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>p</term>
                <listitem>
                    <para>Column vector, optimal solution found</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>err</term>
                <listitem>
                    <para>scalar, least square error.</para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Description</title>
        <para>
            <literal>datafit</literal> is used for fitting data to a model. For
            a given function <literal>G(p,z)</literal>, this function finds the best
            vector of parameters <literal>p</literal> for approximating
            <literal>G(p,z_i)=0</literal> for a set of measurement vectors
            <literal>z_i</literal>. Vector <literal>p</literal> is found by minimizing
            <literal>G(p,z_1)'WG(p,z_1)+G(p,z_2)'WG(p,z_2)+...+G(p,z_n)'WG(p,z_n)</literal>
        </para>
    </refsection>
    <refsection>
        <title>Examples</title>
        <programlisting role="example"><![CDATA[ 
//generate the data
function y=FF(x,p)
  y=p(1)*(x-p(2))+p(3)*x.*x
endfunction

X=[];
Y=[];
pg=[34;12;14] //parameter used to generate data
for x=0:.1:3
  Y=[Y,FF(x,pg)+100*(rand()-.5)];
  X=[X,x];
end
Z=[Y;X];

//The criterion function
function e=G(p,z),
  y=z(1),x=z(2);
  e=y-FF(x,p),
endfunction

//Solve the problem
p0=[3;5;10]	
[p,err]=datafit(G,Z,p0);

scf(0);clf()
plot2d(X,FF(X,pg),5) //the curve without noise
plot2d(X,Y,-1)  // the noisy data
plot2d(X,FF(X,p),12) //the solution
 ]]></programlisting>
        <scilab:image>
            function y=FF(x,p)
            y=p(1)*(x-p(2))+p(3)*x.*x
            endfunction
            
            X=[];Y=[];
            pg=[34;12;14]
            for x=0:.1:3
            Y=[Y,FF(x,pg)+100*(rand()-.5)];
            X=[X,x];
            end
            Z=[Y;X];
            
            function e=G(p,z),
            y=z(1),x=z(2);
            e=y-FF(x,p),
            endfunction
            
            p0=[3;5;10]	
            [p,err]=datafit(G,Z,p0);
            
            scf(0);clf()
            plot2d(X,FF(X,pg),5)
            plot2d(X,Y,-1)
            plot2d(X,FF(X,p),12)
        </scilab:image>
        <programlisting role="example"><![CDATA[ 
//generate the data
function y=FF(x,p)
  y=p(1)*(x-p(2))+p(3)*x.*x
endfunction

//the gradient of the criterion function
function s=DG(p,z),
  a=p(1),b=p(2),c=p(3),y=z(1),x=z(2),
  s=-[x-b,-a,x*x]
endfunction

function e=G(p,z),
  y=z(1),x=z(2);
  e=y-FF(x,p),
endfunction

X=[];Y=[];
pg=[34;12;14]
for x=0:.1:3
  Y=[Y,FF(x,pg)+100*(rand()-.5)];
  X=[X,x];
end
Z=[Y;X];

p0=[3;5;10]	
[p,err]=datafit(G,DG,Z,p0);
scf(1);
clf()
plot2d(X,FF(X,pg),5) //the curve without noise
plot2d(X,Y,-1)  // the noisy data
plot2d(X,FF(X,p),12) //the solution
 ]]></programlisting>
        <scilab:image>
            function y=FF(x,p)
            y=p(1)*(x-p(2))+p(3)*x.*x
            endfunction
            
            function s=DG(p,z),
            a=p(1),b=p(2),c=p(3),y=z(1),x=z(2),
            s=-[x-b,-a,x*x]
            endfunction
            
            function e=G(p,z),
            y=z(1),x=z(2);
            e=y-FF(x,p),
            endfunction
            
            X=[];Y=[];
            pg=[34;12;14]
            for x=0:.1:3
            Y=[Y,FF(x,pg)+100*(rand()-.5)];
            X=[X,x];
            end
            Z=[Y;X];
            
            p0=[3;5;10]	
            [p,err]=datafit(G,DG,Z,p0);
            scf(1);
            clf()
            plot2d(X,FF(X,pg),5)
            plot2d(X,Y,-1)
            plot2d(X,FF(X,p),12)
        </scilab:image>
        <programlisting role="example"><![CDATA[
//generate the data
function y=FF(x,p)
  y=p(1)*(x-p(2))+p(3)*x.*x
endfunction

//the gradient of the criterion function
function s=DG(p,z),
  a=p(1),b=p(2),c=p(3),y=z(1),x=z(2),
  s=-[x-b,-a,x*x]
endfunction

function e=G(p,z),
  y=z(1),x=z(2);
  e=y-FF(x,p),
endfunction

X=[];Y=[];
pg=[34;12;14]
for x=0:.1:3
  Y=[Y,FF(x,pg)+100*(rand()-.5)];
  X=[X,x];
end
Z=[Y;X];

p0=[3;5;10]	

// Add some bounds on the estimate of the parameters
// We want positive estimation (the result will not change)
[p,err]=datafit(G,DG,Z,'b',[0;0;0],[%inf;%inf;%inf],p0,algo='gc');
scf(1);
clf()
plot2d(X,FF(X,pg),5) //the curve without noise
plot2d(X,Y,-1)  // the noisy data
plot2d(X,FF(X,p),12) //the solution
 ]]></programlisting>
        <scilab:image>
            function y=FF(x,p)
            y=p(1)*(x-p(2))+p(3)*x.*x
            endfunction
            
            function s=DG(p,z),
            a=p(1),b=p(2),c=p(3),y=z(1),x=z(2),
            s=-[x-b,-a,x*x]
            endfunction
            
            function e=G(p,z),
            y=z(1),x=z(2);
            e=y-FF(x,p),
            endfunction
            
            X=[];Y=[];
            pg=[34;12;14]
            for x=0:.1:3
            Y=[Y,FF(x,pg)+100*(rand()-.5)];
            X=[X,x];
            end
            Z=[Y;X];
            
            p0=[3;5;10]	
            
            [p,err]=datafit(G,DG,Z,'b',[0;0;0],[%inf;%inf;%inf],p0,algo='gc');
            scf(1);
            clf()
            plot2d(X,FF(X,pg),5)
            plot2d(X,Y,-1)
            plot2d(X,FF(X,p),12)
        </scilab:image>
    </refsection>
    <refsection role="see also">
        <title>See Also</title>
        <simplelist type="inline">
            <member>
                <link linkend="lsqrsolve">lsqrsolve</link>
            </member>
            <member>
                <link linkend="optim">optim</link>
            </member>
            <member>
                <link linkend="leastsq">leastsq</link>
            </member>
        </simplelist>
    </refsection>
</refentry>
