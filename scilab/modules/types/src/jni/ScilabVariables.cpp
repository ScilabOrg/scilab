#include "ScilabVariables.hxx"
/* Generated by GIWS (version 1.3.0) */
/*

Copyright 2007-2008 INRIA
Copyright 2008-2011 DIGITEO

Author : Sylvestre Ledru & others

This is generated code.

This software is a computer program whose purpose is to hide the complexity
of accessing Java objects/methods from C++ code.

This software is governed by the CeCILL-B license under French law and
abiding by the rules of distribution of free software.  You can  use, 
modify and/ or redistribute the software under the terms of the CeCILL-B
license as circulated by CEA, CNRS and INRIA at the following URL
"http://www.cecill.info". 

As a counterpart to the access to the source code and  rights to copy,
modify and redistribute granted by the license, users are provided only
with a limited warranty  and the software's author,  the holder of the
economic rights,  and the successive licensors  have only  limited
liability. 

In this respect, the user's attention is drawn to the risks associated
with loading,  using,  modifying and/or developing or reproducing the
software by the user in light of its specific status of free software,
that may mean  that it is complicated to manipulate,  and  that  also
therefore means  that it is reserved for developers  and  experienced
professionals having in-depth computer knowledge. Users are therefore
encouraged to load and test the software's suitability as regards their
requirements in conditions enabling the security of their systems and/or 
data to be ensured and,  more generally, to use and operate it in the 
same conditions as regards security. 

The fact that you are presently reading this means that you have had
knowledge of the CeCILL-B license and that you accept its terms.
*/

namespace org_scilab_modules_types {

// Returns the current env

JNIEnv * ScilabVariables::getCurrentEnv() {
JNIEnv * curEnv = NULL;
jint res=this->jvm->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
if (res != JNI_OK) {
throw GiwsException::JniException(getCurrentEnv());
}
return curEnv;
}
// Destructor

ScilabVariables::~ScilabVariables() {
JNIEnv * curEnv = NULL;
this->jvm->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);

curEnv->DeleteGlobalRef(this->instance);
curEnv->DeleteGlobalRef(this->instanceClass);
curEnv->DeleteGlobalRef(this->stringArrayClass);}
// Constructors
ScilabVariables::ScilabVariables(JavaVM * jvm_) {
jmethodID constructObject = NULL ;
jobject localInstance ;
jclass localClass ;
const std::string construct="<init>";
const std::string param="()V";
jvm=jvm_;

JNIEnv * curEnv = getCurrentEnv();

localClass = curEnv->FindClass( this->className().c_str() ) ;
if (localClass == NULL) {
  throw GiwsException::JniClassNotFoundException(curEnv, this->className());
}

this->instanceClass = static_cast<jclass>(curEnv->NewGlobalRef(localClass));

/* localClass is not needed anymore */
curEnv->DeleteLocalRef(localClass);

if (this->instanceClass == NULL) {
throw GiwsException::JniObjectCreationException(curEnv, this->className());
}


constructObject = curEnv->GetMethodID( this->instanceClass, construct.c_str() , param.c_str() ) ;
if(constructObject == NULL){
throw GiwsException::JniObjectCreationException(curEnv, this->className());
}

localInstance = curEnv->NewObject( this->instanceClass, constructObject ) ;
if(localInstance == NULL){
throw GiwsException::JniObjectCreationException(curEnv, this->className());
}
 
this->instance = curEnv->NewGlobalRef(localInstance) ;
if(this->instance == NULL){
throw GiwsException::JniObjectCreationException(curEnv, this->className());
}
/* localInstance not needed anymore */
curEnv->DeleteLocalRef(localInstance);

                /* Methods ID set to NULL */
jobjectArray_getAllListenedVariablesID=NULL;
voidsendDatajstringjava_lang_StringjintArray_intjobjectArray__doublejbooleanbooleanjintintID=NULL;
voidsendDatajstringjava_lang_StringjintArray_intjobjectArray__doublejobjectArray__doublejbooleanbooleanjintintID=NULL;
voidsendDatajstringjava_lang_StringjintArray_intjobjectArray__bytejbooleanbooleanjintintID=NULL;
voidsendUnsignedDatajstringjava_lang_StringjintArray_intjobjectArray__bytejbooleanbooleanjintintID=NULL;
voidsendDatajstringjava_lang_StringjintArray_intjobjectArray__shortjbooleanbooleanjintintID=NULL;
voidsendUnsignedDatajstringjava_lang_StringjintArray_intjobjectArray__shortjbooleanbooleanjintintID=NULL;
voidsendDatajstringjava_lang_StringjintArray_intjobjectArray__intjbooleanbooleanjintintID=NULL;
voidsendUnsignedDatajstringjava_lang_StringjintArray_intjobjectArray__intjbooleanbooleanjintintID=NULL;
voidsendDatajstringjava_lang_StringjintArray_intjobjectArray__longjbooleanbooleanjintintID=NULL;
voidsendDatajstringjava_lang_StringjintArray_intjobjectArray__booleanjbooleanbooleanjintintID=NULL;
voidsendDatajstringjava_lang_StringjintArray_intjobjectArray__java_lang_StringjbooleanbooleanjintintID=NULL;
voidsendDatajstringjava_lang_StringjintArray_intjcharcharjintintID=NULL;
voidcloseListjintArray_intjintintID=NULL;
voidsendDatajstringjava_lang_StringjintArray_intjintintjintintjintintjintArray_intjintArray_intjdoubleArray_doublejintintID=NULL;
voidsendDatajstringjava_lang_StringjintArray_intjintintjintintjintintjintArray_intjintArray_intjdoubleArray_doublejdoubleArray_doublejintintID=NULL;
voidsendDatajstringjava_lang_StringjintArray_intjintintjintintjintintjintArray_intjintArray_intjintintID=NULL;


}

ScilabVariables::ScilabVariables(JavaVM * jvm_, jobject JObj) {
        jvm=jvm_;

        JNIEnv * curEnv = getCurrentEnv();

jclass localClass = curEnv->GetObjectClass(JObj);
        this->instanceClass = static_cast<jclass>(curEnv->NewGlobalRef(localClass));
        curEnv->DeleteLocalRef(localClass);

        if (this->instanceClass == NULL) {
throw GiwsException::JniObjectCreationException(curEnv, this->className());
        }

        this->instance = curEnv->NewGlobalRef(JObj) ;
        if(this->instance == NULL){
throw GiwsException::JniObjectCreationException(curEnv, this->className());
        }
        /* Methods ID set to NULL */
        jobjectArray_getAllListenedVariablesID=NULL;
voidsendDatajstringjava_lang_StringjintArray_intjobjectArray__doublejbooleanbooleanjintintID=NULL;
voidsendDatajstringjava_lang_StringjintArray_intjobjectArray__doublejobjectArray__doublejbooleanbooleanjintintID=NULL;
voidsendDatajstringjava_lang_StringjintArray_intjobjectArray__bytejbooleanbooleanjintintID=NULL;
voidsendUnsignedDatajstringjava_lang_StringjintArray_intjobjectArray__bytejbooleanbooleanjintintID=NULL;
voidsendDatajstringjava_lang_StringjintArray_intjobjectArray__shortjbooleanbooleanjintintID=NULL;
voidsendUnsignedDatajstringjava_lang_StringjintArray_intjobjectArray__shortjbooleanbooleanjintintID=NULL;
voidsendDatajstringjava_lang_StringjintArray_intjobjectArray__intjbooleanbooleanjintintID=NULL;
voidsendUnsignedDatajstringjava_lang_StringjintArray_intjobjectArray__intjbooleanbooleanjintintID=NULL;
voidsendDatajstringjava_lang_StringjintArray_intjobjectArray__longjbooleanbooleanjintintID=NULL;
voidsendDatajstringjava_lang_StringjintArray_intjobjectArray__booleanjbooleanbooleanjintintID=NULL;
voidsendDatajstringjava_lang_StringjintArray_intjobjectArray__java_lang_StringjbooleanbooleanjintintID=NULL;
voidsendDatajstringjava_lang_StringjintArray_intjcharcharjintintID=NULL;
voidcloseListjintArray_intjintintID=NULL;
voidsendDatajstringjava_lang_StringjintArray_intjintintjintintjintintjintArray_intjintArray_intjdoubleArray_doublejintintID=NULL;
voidsendDatajstringjava_lang_StringjintArray_intjintintjintintjintintjintArray_intjintArray_intjdoubleArray_doublejdoubleArray_doublejintintID=NULL;
voidsendDatajstringjava_lang_StringjintArray_intjintintjintintjintintjintArray_intjintArray_intjintintID=NULL;


}

// Generic methods

void ScilabVariables::synchronize() {
if (getCurrentEnv()->MonitorEnter(instance) != JNI_OK) {
throw GiwsException::JniMonitorException(getCurrentEnv(), "ScilabVariables");
}
}

void ScilabVariables::endSynchronize() {
if ( getCurrentEnv()->MonitorExit(instance) != JNI_OK) {
throw GiwsException::JniMonitorException(getCurrentEnv(), "ScilabVariables");
}
}
// Method(s)

char ** ScilabVariables::getAllListenedVariables (JavaVM * jvm_){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jobjectArray_getAllListenedVariablesID = curEnv->GetStaticMethodID(cls, "getAllListenedVariables", "()[Ljava/lang/String;" ) ;
if (jobjectArray_getAllListenedVariablesID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "getAllListenedVariables");
}

                        jobjectArray res =  static_cast<jobjectArray>( curEnv->CallStaticObjectMethod(cls, jobjectArray_getAllListenedVariablesID ));
                        if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}int lenRow;
 lenRow = curEnv->GetArrayLength(res);

char **arrayOfString;
arrayOfString = new char *[lenRow];
for (jsize i = 0; i < lenRow; i++){
jstring resString = reinterpret_cast<jstring>(curEnv->GetObjectArrayElement(res, i));
const char *tempString = curEnv->GetStringUTFChars(resString, 0);
arrayOfString[i] = new char[strlen(tempString) + 1];

strcpy(arrayOfString[i], tempString);
curEnv->ReleaseStringUTFChars(resString, tempString);
curEnv->DeleteLocalRef(resString);
}
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
delete[] arrayOfString;
                                throw GiwsException::JniCallMethodException(curEnv);
}
curEnv->DeleteLocalRef(res);
return arrayOfString;

}

void ScilabVariables::sendData (JavaVM * jvm_, char * varName, int* indexes, int indexesSize, double** data, int dataSize, int dataSizeCol, bool swaped, int handlerId){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsendDatajstringjava_lang_StringjintArray_intjobjectArray__doublejbooleanbooleanjintintID = curEnv->GetStaticMethodID(cls, "sendData", "(Ljava/lang/String;[I[[DZI)V" ) ;
if (voidsendDatajstringjava_lang_StringjintArray_intjobjectArray__doublejbooleanbooleanjintintID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "sendData");
}

jstring varName_ = curEnv->NewStringUTF( varName );
if (varName != NULL && varName_ == NULL)
{
throw GiwsException::JniBadAllocException(curEnv);
}


jintArray indexes_ = curEnv->NewIntArray( indexesSize ) ;

if (indexes_ == NULL)
{
// check that allocation succeed
throw GiwsException::JniBadAllocException(curEnv);
}

curEnv->SetIntArrayRegion( indexes_, 0, indexesSize, (jint*)(indexes) ) ;


 jobjectArray data_ = curEnv->NewObjectArray(dataSize, curEnv->FindClass("[D"),NULL);

if (data_ == NULL)
{
// check that allocation succeed
throw GiwsException::JniBadAllocException(curEnv);
}

 for (int i=0; i<dataSize; i++){

jdoubleArray dataLocal = curEnv->NewDoubleArray( dataSizeCol ) ;

if (dataLocal == NULL)
{
// check that allocation succeed
curEnv->DeleteLocalRef(data_);
throw GiwsException::JniBadAllocException(curEnv);
}

curEnv->SetDoubleArrayRegion( dataLocal, 0, dataSizeCol, (jdouble*)(data[i]) ) ;
curEnv->SetObjectArrayElement(data_, i, dataLocal);
curEnv->DeleteLocalRef(dataLocal);
}

jboolean swaped_ = (static_cast<bool>(swaped) ? JNI_TRUE : JNI_FALSE);

                         curEnv->CallStaticVoidMethod(cls, voidsendDatajstringjava_lang_StringjintArray_intjobjectArray__doublejbooleanbooleanjintintID ,varName_, indexes_, data_, swaped_, handlerId);
                        curEnv->DeleteLocalRef(varName_);
curEnv->DeleteLocalRef(indexes_);
curEnv->DeleteLocalRef(data_);
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
}

void ScilabVariables::sendData (JavaVM * jvm_, char * varName, int* indexes, int indexesSize, double** real, int realSize, int realSizeCol, double** img, int imgSize, int imgSizeCol, bool swaped, int handlerId){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsendDatajstringjava_lang_StringjintArray_intjobjectArray__doublejobjectArray__doublejbooleanbooleanjintintID = curEnv->GetStaticMethodID(cls, "sendData", "(Ljava/lang/String;[I[[D[[DZI)V" ) ;
if (voidsendDatajstringjava_lang_StringjintArray_intjobjectArray__doublejobjectArray__doublejbooleanbooleanjintintID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "sendData");
}

jstring varName_ = curEnv->NewStringUTF( varName );
if (varName != NULL && varName_ == NULL)
{
throw GiwsException::JniBadAllocException(curEnv);
}


jintArray indexes_ = curEnv->NewIntArray( indexesSize ) ;

if (indexes_ == NULL)
{
// check that allocation succeed
throw GiwsException::JniBadAllocException(curEnv);
}

curEnv->SetIntArrayRegion( indexes_, 0, indexesSize, (jint*)(indexes) ) ;


 jobjectArray real_ = curEnv->NewObjectArray(realSize, curEnv->FindClass("[D"),NULL);

if (real_ == NULL)
{
// check that allocation succeed
throw GiwsException::JniBadAllocException(curEnv);
}

 for (int i=0; i<realSize; i++){

jdoubleArray realLocal = curEnv->NewDoubleArray( realSizeCol ) ;

if (realLocal == NULL)
{
// check that allocation succeed
curEnv->DeleteLocalRef(real_);
throw GiwsException::JniBadAllocException(curEnv);
}

curEnv->SetDoubleArrayRegion( realLocal, 0, realSizeCol, (jdouble*)(real[i]) ) ;
curEnv->SetObjectArrayElement(real_, i, realLocal);
curEnv->DeleteLocalRef(realLocal);
}

 jobjectArray img_ = curEnv->NewObjectArray(imgSize, curEnv->FindClass("[D"),NULL);

if (img_ == NULL)
{
// check that allocation succeed
throw GiwsException::JniBadAllocException(curEnv);
}

 for (int i=0; i<imgSize; i++){

jdoubleArray imgLocal = curEnv->NewDoubleArray( imgSizeCol ) ;

if (imgLocal == NULL)
{
// check that allocation succeed
curEnv->DeleteLocalRef(img_);
throw GiwsException::JniBadAllocException(curEnv);
}

curEnv->SetDoubleArrayRegion( imgLocal, 0, imgSizeCol, (jdouble*)(img[i]) ) ;
curEnv->SetObjectArrayElement(img_, i, imgLocal);
curEnv->DeleteLocalRef(imgLocal);
}

jboolean swaped_ = (static_cast<bool>(swaped) ? JNI_TRUE : JNI_FALSE);

                         curEnv->CallStaticVoidMethod(cls, voidsendDatajstringjava_lang_StringjintArray_intjobjectArray__doublejobjectArray__doublejbooleanbooleanjintintID ,varName_, indexes_, real_, img_, swaped_, handlerId);
                        curEnv->DeleteLocalRef(varName_);
curEnv->DeleteLocalRef(indexes_);
curEnv->DeleteLocalRef(real_);
curEnv->DeleteLocalRef(img_);
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
}

void ScilabVariables::sendData (JavaVM * jvm_, char * varName, int* indexes, int indexesSize, byte** data, int dataSize, int dataSizeCol, bool swaped, int handlerId){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsendDatajstringjava_lang_StringjintArray_intjobjectArray__bytejbooleanbooleanjintintID = curEnv->GetStaticMethodID(cls, "sendData", "(Ljava/lang/String;[I[[BZI)V" ) ;
if (voidsendDatajstringjava_lang_StringjintArray_intjobjectArray__bytejbooleanbooleanjintintID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "sendData");
}

jstring varName_ = curEnv->NewStringUTF( varName );
if (varName != NULL && varName_ == NULL)
{
throw GiwsException::JniBadAllocException(curEnv);
}


jintArray indexes_ = curEnv->NewIntArray( indexesSize ) ;

if (indexes_ == NULL)
{
// check that allocation succeed
throw GiwsException::JniBadAllocException(curEnv);
}

curEnv->SetIntArrayRegion( indexes_, 0, indexesSize, (jint*)(indexes) ) ;


 jobjectArray data_ = curEnv->NewObjectArray(dataSize, curEnv->FindClass("[B"),NULL);

if (data_ == NULL)
{
// check that allocation succeed
throw GiwsException::JniBadAllocException(curEnv);
}

 for (int i=0; i<dataSize; i++){

jbyteArray dataLocal = curEnv->NewByteArray( dataSizeCol ) ;

if (dataLocal == NULL)
{
// check that allocation succeed
curEnv->DeleteLocalRef(data_);
throw GiwsException::JniBadAllocException(curEnv);
}

curEnv->SetByteArrayRegion( dataLocal, 0, dataSizeCol, (jbyte*)(data[i]) ) ;
curEnv->SetObjectArrayElement(data_, i, dataLocal);
curEnv->DeleteLocalRef(dataLocal);
}

jboolean swaped_ = (static_cast<bool>(swaped) ? JNI_TRUE : JNI_FALSE);

                         curEnv->CallStaticVoidMethod(cls, voidsendDatajstringjava_lang_StringjintArray_intjobjectArray__bytejbooleanbooleanjintintID ,varName_, indexes_, data_, swaped_, handlerId);
                        curEnv->DeleteLocalRef(varName_);
curEnv->DeleteLocalRef(indexes_);
curEnv->DeleteLocalRef(data_);
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
}

void ScilabVariables::sendUnsignedData (JavaVM * jvm_, char * varName, int* indexes, int indexesSize, byte** data, int dataSize, int dataSizeCol, bool swaped, int handlerId){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsendUnsignedDatajstringjava_lang_StringjintArray_intjobjectArray__bytejbooleanbooleanjintintID = curEnv->GetStaticMethodID(cls, "sendUnsignedData", "(Ljava/lang/String;[I[[BZI)V" ) ;
if (voidsendUnsignedDatajstringjava_lang_StringjintArray_intjobjectArray__bytejbooleanbooleanjintintID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "sendUnsignedData");
}

jstring varName_ = curEnv->NewStringUTF( varName );
if (varName != NULL && varName_ == NULL)
{
throw GiwsException::JniBadAllocException(curEnv);
}


jintArray indexes_ = curEnv->NewIntArray( indexesSize ) ;

if (indexes_ == NULL)
{
// check that allocation succeed
throw GiwsException::JniBadAllocException(curEnv);
}

curEnv->SetIntArrayRegion( indexes_, 0, indexesSize, (jint*)(indexes) ) ;


 jobjectArray data_ = curEnv->NewObjectArray(dataSize, curEnv->FindClass("[B"),NULL);

if (data_ == NULL)
{
// check that allocation succeed
throw GiwsException::JniBadAllocException(curEnv);
}

 for (int i=0; i<dataSize; i++){

jbyteArray dataLocal = curEnv->NewByteArray( dataSizeCol ) ;

if (dataLocal == NULL)
{
// check that allocation succeed
curEnv->DeleteLocalRef(data_);
throw GiwsException::JniBadAllocException(curEnv);
}

curEnv->SetByteArrayRegion( dataLocal, 0, dataSizeCol, (jbyte*)(data[i]) ) ;
curEnv->SetObjectArrayElement(data_, i, dataLocal);
curEnv->DeleteLocalRef(dataLocal);
}

jboolean swaped_ = (static_cast<bool>(swaped) ? JNI_TRUE : JNI_FALSE);

                         curEnv->CallStaticVoidMethod(cls, voidsendUnsignedDatajstringjava_lang_StringjintArray_intjobjectArray__bytejbooleanbooleanjintintID ,varName_, indexes_, data_, swaped_, handlerId);
                        curEnv->DeleteLocalRef(varName_);
curEnv->DeleteLocalRef(indexes_);
curEnv->DeleteLocalRef(data_);
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
}

void ScilabVariables::sendData (JavaVM * jvm_, char * varName, int* indexes, int indexesSize, short** data, int dataSize, int dataSizeCol, bool swaped, int handlerId){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsendDatajstringjava_lang_StringjintArray_intjobjectArray__shortjbooleanbooleanjintintID = curEnv->GetStaticMethodID(cls, "sendData", "(Ljava/lang/String;[I[[SZI)V" ) ;
if (voidsendDatajstringjava_lang_StringjintArray_intjobjectArray__shortjbooleanbooleanjintintID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "sendData");
}

jstring varName_ = curEnv->NewStringUTF( varName );
if (varName != NULL && varName_ == NULL)
{
throw GiwsException::JniBadAllocException(curEnv);
}


jintArray indexes_ = curEnv->NewIntArray( indexesSize ) ;

if (indexes_ == NULL)
{
// check that allocation succeed
throw GiwsException::JniBadAllocException(curEnv);
}

curEnv->SetIntArrayRegion( indexes_, 0, indexesSize, (jint*)(indexes) ) ;


 jobjectArray data_ = curEnv->NewObjectArray(dataSize, curEnv->FindClass("[S"),NULL);

if (data_ == NULL)
{
// check that allocation succeed
throw GiwsException::JniBadAllocException(curEnv);
}

 for (int i=0; i<dataSize; i++){

jshortArray dataLocal = curEnv->NewShortArray( dataSizeCol ) ;

if (dataLocal == NULL)
{
// check that allocation succeed
curEnv->DeleteLocalRef(data_);
throw GiwsException::JniBadAllocException(curEnv);
}

curEnv->SetShortArrayRegion( dataLocal, 0, dataSizeCol, (jshort*)(data[i]) ) ;
curEnv->SetObjectArrayElement(data_, i, dataLocal);
curEnv->DeleteLocalRef(dataLocal);
}

jboolean swaped_ = (static_cast<bool>(swaped) ? JNI_TRUE : JNI_FALSE);

                         curEnv->CallStaticVoidMethod(cls, voidsendDatajstringjava_lang_StringjintArray_intjobjectArray__shortjbooleanbooleanjintintID ,varName_, indexes_, data_, swaped_, handlerId);
                        curEnv->DeleteLocalRef(varName_);
curEnv->DeleteLocalRef(indexes_);
curEnv->DeleteLocalRef(data_);
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
}

void ScilabVariables::sendUnsignedData (JavaVM * jvm_, char * varName, int* indexes, int indexesSize, short** data, int dataSize, int dataSizeCol, bool swaped, int handlerId){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsendUnsignedDatajstringjava_lang_StringjintArray_intjobjectArray__shortjbooleanbooleanjintintID = curEnv->GetStaticMethodID(cls, "sendUnsignedData", "(Ljava/lang/String;[I[[SZI)V" ) ;
if (voidsendUnsignedDatajstringjava_lang_StringjintArray_intjobjectArray__shortjbooleanbooleanjintintID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "sendUnsignedData");
}

jstring varName_ = curEnv->NewStringUTF( varName );
if (varName != NULL && varName_ == NULL)
{
throw GiwsException::JniBadAllocException(curEnv);
}


jintArray indexes_ = curEnv->NewIntArray( indexesSize ) ;

if (indexes_ == NULL)
{
// check that allocation succeed
throw GiwsException::JniBadAllocException(curEnv);
}

curEnv->SetIntArrayRegion( indexes_, 0, indexesSize, (jint*)(indexes) ) ;


 jobjectArray data_ = curEnv->NewObjectArray(dataSize, curEnv->FindClass("[S"),NULL);

if (data_ == NULL)
{
// check that allocation succeed
throw GiwsException::JniBadAllocException(curEnv);
}

 for (int i=0; i<dataSize; i++){

jshortArray dataLocal = curEnv->NewShortArray( dataSizeCol ) ;

if (dataLocal == NULL)
{
// check that allocation succeed
curEnv->DeleteLocalRef(data_);
throw GiwsException::JniBadAllocException(curEnv);
}

curEnv->SetShortArrayRegion( dataLocal, 0, dataSizeCol, (jshort*)(data[i]) ) ;
curEnv->SetObjectArrayElement(data_, i, dataLocal);
curEnv->DeleteLocalRef(dataLocal);
}

jboolean swaped_ = (static_cast<bool>(swaped) ? JNI_TRUE : JNI_FALSE);

                         curEnv->CallStaticVoidMethod(cls, voidsendUnsignedDatajstringjava_lang_StringjintArray_intjobjectArray__shortjbooleanbooleanjintintID ,varName_, indexes_, data_, swaped_, handlerId);
                        curEnv->DeleteLocalRef(varName_);
curEnv->DeleteLocalRef(indexes_);
curEnv->DeleteLocalRef(data_);
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
}

void ScilabVariables::sendData (JavaVM * jvm_, char * varName, int* indexes, int indexesSize, int** data, int dataSize, int dataSizeCol, bool swaped, int handlerId){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsendDatajstringjava_lang_StringjintArray_intjobjectArray__intjbooleanbooleanjintintID = curEnv->GetStaticMethodID(cls, "sendData", "(Ljava/lang/String;[I[[IZI)V" ) ;
if (voidsendDatajstringjava_lang_StringjintArray_intjobjectArray__intjbooleanbooleanjintintID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "sendData");
}

jstring varName_ = curEnv->NewStringUTF( varName );
if (varName != NULL && varName_ == NULL)
{
throw GiwsException::JniBadAllocException(curEnv);
}


jintArray indexes_ = curEnv->NewIntArray( indexesSize ) ;

if (indexes_ == NULL)
{
// check that allocation succeed
throw GiwsException::JniBadAllocException(curEnv);
}

curEnv->SetIntArrayRegion( indexes_, 0, indexesSize, (jint*)(indexes) ) ;


 jobjectArray data_ = curEnv->NewObjectArray(dataSize, curEnv->FindClass("[I"),NULL);

if (data_ == NULL)
{
// check that allocation succeed
throw GiwsException::JniBadAllocException(curEnv);
}

 for (int i=0; i<dataSize; i++){

jintArray dataLocal = curEnv->NewIntArray( dataSizeCol ) ;

if (dataLocal == NULL)
{
// check that allocation succeed
curEnv->DeleteLocalRef(data_);
throw GiwsException::JniBadAllocException(curEnv);
}

curEnv->SetIntArrayRegion( dataLocal, 0, dataSizeCol, (jint*)(data[i]) ) ;
curEnv->SetObjectArrayElement(data_, i, dataLocal);
curEnv->DeleteLocalRef(dataLocal);
}

jboolean swaped_ = (static_cast<bool>(swaped) ? JNI_TRUE : JNI_FALSE);

                         curEnv->CallStaticVoidMethod(cls, voidsendDatajstringjava_lang_StringjintArray_intjobjectArray__intjbooleanbooleanjintintID ,varName_, indexes_, data_, swaped_, handlerId);
                        curEnv->DeleteLocalRef(varName_);
curEnv->DeleteLocalRef(indexes_);
curEnv->DeleteLocalRef(data_);
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
}

void ScilabVariables::sendUnsignedData (JavaVM * jvm_, char * varName, int* indexes, int indexesSize, int** data, int dataSize, int dataSizeCol, bool swaped, int handlerId){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsendUnsignedDatajstringjava_lang_StringjintArray_intjobjectArray__intjbooleanbooleanjintintID = curEnv->GetStaticMethodID(cls, "sendUnsignedData", "(Ljava/lang/String;[I[[IZI)V" ) ;
if (voidsendUnsignedDatajstringjava_lang_StringjintArray_intjobjectArray__intjbooleanbooleanjintintID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "sendUnsignedData");
}

jstring varName_ = curEnv->NewStringUTF( varName );
if (varName != NULL && varName_ == NULL)
{
throw GiwsException::JniBadAllocException(curEnv);
}


jintArray indexes_ = curEnv->NewIntArray( indexesSize ) ;

if (indexes_ == NULL)
{
// check that allocation succeed
throw GiwsException::JniBadAllocException(curEnv);
}

curEnv->SetIntArrayRegion( indexes_, 0, indexesSize, (jint*)(indexes) ) ;


 jobjectArray data_ = curEnv->NewObjectArray(dataSize, curEnv->FindClass("[I"),NULL);

if (data_ == NULL)
{
// check that allocation succeed
throw GiwsException::JniBadAllocException(curEnv);
}

 for (int i=0; i<dataSize; i++){

jintArray dataLocal = curEnv->NewIntArray( dataSizeCol ) ;

if (dataLocal == NULL)
{
// check that allocation succeed
curEnv->DeleteLocalRef(data_);
throw GiwsException::JniBadAllocException(curEnv);
}

curEnv->SetIntArrayRegion( dataLocal, 0, dataSizeCol, (jint*)(data[i]) ) ;
curEnv->SetObjectArrayElement(data_, i, dataLocal);
curEnv->DeleteLocalRef(dataLocal);
}

jboolean swaped_ = (static_cast<bool>(swaped) ? JNI_TRUE : JNI_FALSE);

                         curEnv->CallStaticVoidMethod(cls, voidsendUnsignedDatajstringjava_lang_StringjintArray_intjobjectArray__intjbooleanbooleanjintintID ,varName_, indexes_, data_, swaped_, handlerId);
                        curEnv->DeleteLocalRef(varName_);
curEnv->DeleteLocalRef(indexes_);
curEnv->DeleteLocalRef(data_);
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
}

void ScilabVariables::sendData (JavaVM * jvm_, char * varName, int* indexes, int indexesSize, long long** data, int dataSize, int dataSizeCol, bool swaped, int handlerId){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsendDatajstringjava_lang_StringjintArray_intjobjectArray__longjbooleanbooleanjintintID = curEnv->GetStaticMethodID(cls, "sendData", "(Ljava/lang/String;[I[[JZI)V" ) ;
if (voidsendDatajstringjava_lang_StringjintArray_intjobjectArray__longjbooleanbooleanjintintID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "sendData");
}

jstring varName_ = curEnv->NewStringUTF( varName );
if (varName != NULL && varName_ == NULL)
{
throw GiwsException::JniBadAllocException(curEnv);
}


jintArray indexes_ = curEnv->NewIntArray( indexesSize ) ;

if (indexes_ == NULL)
{
// check that allocation succeed
throw GiwsException::JniBadAllocException(curEnv);
}

curEnv->SetIntArrayRegion( indexes_, 0, indexesSize, (jint*)(indexes) ) ;


 jobjectArray data_ = curEnv->NewObjectArray(dataSize, curEnv->FindClass("[J"),NULL);

if (data_ == NULL)
{
// check that allocation succeed
throw GiwsException::JniBadAllocException(curEnv);
}

 for (int i=0; i<dataSize; i++){

jlongArray dataLocal = curEnv->NewLongArray( dataSizeCol ) ;

if (dataLocal == NULL)
{
// check that allocation succeed
curEnv->DeleteLocalRef(data_);
throw GiwsException::JniBadAllocException(curEnv);
}

curEnv->SetLongArrayRegion( dataLocal, 0, dataSizeCol, (jlong*)(data[i]) ) ;
curEnv->SetObjectArrayElement(data_, i, dataLocal);
curEnv->DeleteLocalRef(dataLocal);
}

jboolean swaped_ = (static_cast<bool>(swaped) ? JNI_TRUE : JNI_FALSE);

                         curEnv->CallStaticVoidMethod(cls, voidsendDatajstringjava_lang_StringjintArray_intjobjectArray__longjbooleanbooleanjintintID ,varName_, indexes_, data_, swaped_, handlerId);
                        curEnv->DeleteLocalRef(varName_);
curEnv->DeleteLocalRef(indexes_);
curEnv->DeleteLocalRef(data_);
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
}

void ScilabVariables::sendData (JavaVM * jvm_, char * varName, int* indexes, int indexesSize, bool** data, int dataSize, int dataSizeCol, bool swaped, int handlerId){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsendDatajstringjava_lang_StringjintArray_intjobjectArray__booleanjbooleanbooleanjintintID = curEnv->GetStaticMethodID(cls, "sendData", "(Ljava/lang/String;[I[[ZZI)V" ) ;
if (voidsendDatajstringjava_lang_StringjintArray_intjobjectArray__booleanjbooleanbooleanjintintID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "sendData");
}

jstring varName_ = curEnv->NewStringUTF( varName );
if (varName != NULL && varName_ == NULL)
{
throw GiwsException::JniBadAllocException(curEnv);
}


jintArray indexes_ = curEnv->NewIntArray( indexesSize ) ;

if (indexes_ == NULL)
{
// check that allocation succeed
throw GiwsException::JniBadAllocException(curEnv);
}

curEnv->SetIntArrayRegion( indexes_, 0, indexesSize, (jint*)(indexes) ) ;


jobjectArray data_ = curEnv->NewObjectArray(dataSize, curEnv->FindClass("[Z"),NULL);
for (int i=0; i<dataSize; i++){
                        jbooleanArray dataLocal = curEnv->NewBooleanArray( dataSizeCol ) ;
                        curEnv->SetBooleanArrayRegion( dataLocal, 0, dataSizeCol, (jboolean*)(data[i]) ) ;
                        curEnv->SetObjectArrayElement(data_, i, dataLocal);
                        curEnv->DeleteLocalRef(dataLocal);
                        }

jboolean swaped_ = (static_cast<bool>(swaped) ? JNI_TRUE : JNI_FALSE);

                         curEnv->CallStaticVoidMethod(cls, voidsendDatajstringjava_lang_StringjintArray_intjobjectArray__booleanjbooleanbooleanjintintID ,varName_, indexes_, data_, swaped_, handlerId);
                        curEnv->DeleteLocalRef(varName_);
curEnv->DeleteLocalRef(indexes_);
curEnv->DeleteLocalRef(data_);
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
}

void ScilabVariables::sendData (JavaVM * jvm_, char * varName, int* indexes, int indexesSize, char *** data, int dataSize, int dataSizeCol, bool swaped, int handlerId){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsendDatajstringjava_lang_StringjintArray_intjobjectArray__java_lang_StringjbooleanbooleanjintintID = curEnv->GetStaticMethodID(cls, "sendData", "(Ljava/lang/String;[I[[Ljava/lang/String;ZI)V" ) ;
if (voidsendDatajstringjava_lang_StringjintArray_intjobjectArray__java_lang_StringjbooleanbooleanjintintID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "sendData");
}

jstring varName_ = curEnv->NewStringUTF( varName );
if (varName != NULL && varName_ == NULL)
{
throw GiwsException::JniBadAllocException(curEnv);
}


jintArray indexes_ = curEnv->NewIntArray( indexesSize ) ;

if (indexes_ == NULL)
{
// check that allocation succeed
throw GiwsException::JniBadAllocException(curEnv);
}

curEnv->SetIntArrayRegion( indexes_, 0, indexesSize, (jint*)(indexes) ) ;

jclass stringArrayClass = curEnv->FindClass("java/lang/String");
// create java array of array of strings.
jobjectArray data_ = curEnv->NewObjectArray( dataSize, curEnv->FindClass("[Ljava/lang/String;"), NULL);
if (data_ == NULL)
{
throw GiwsException::JniBadAllocException(curEnv);
}

for ( int i = 0; i < dataSize; i++)
{
jobjectArray dataLocal = curEnv->NewObjectArray( dataSizeCol, stringArrayClass, NULL);
// convert each char * to java strings and fill the java array.
for ( int j = 0; j < dataSizeCol; j++) {
jstring TempString = curEnv->NewStringUTF( data[i][j] );

if (TempString == NULL)
{
throw GiwsException::JniBadAllocException(curEnv);
}

curEnv->SetObjectArrayElement( dataLocal, j, TempString);

// avoid keeping reference on to many strings
curEnv->DeleteLocalRef(TempString);
}
curEnv->SetObjectArrayElement(data_, i, dataLocal);
curEnv->DeleteLocalRef(dataLocal);

}
jboolean swaped_ = (static_cast<bool>(swaped) ? JNI_TRUE : JNI_FALSE);

                         curEnv->CallStaticVoidMethod(cls, voidsendDatajstringjava_lang_StringjintArray_intjobjectArray__java_lang_StringjbooleanbooleanjintintID ,varName_, indexes_, data_, swaped_, handlerId);
                        curEnv->DeleteLocalRef(stringArrayClass);
curEnv->DeleteLocalRef(varName_);
curEnv->DeleteLocalRef(indexes_);
curEnv->DeleteLocalRef(data_);
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
}

void ScilabVariables::sendData (JavaVM * jvm_, char * varName, int* indexes, int indexesSize, unsigned short type, int handlerId){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsendDatajstringjava_lang_StringjintArray_intjcharcharjintintID = curEnv->GetStaticMethodID(cls, "sendData", "(Ljava/lang/String;[ICI)V" ) ;
if (voidsendDatajstringjava_lang_StringjintArray_intjcharcharjintintID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "sendData");
}

jstring varName_ = curEnv->NewStringUTF( varName );
if (varName != NULL && varName_ == NULL)
{
throw GiwsException::JniBadAllocException(curEnv);
}


jintArray indexes_ = curEnv->NewIntArray( indexesSize ) ;

if (indexes_ == NULL)
{
// check that allocation succeed
throw GiwsException::JniBadAllocException(curEnv);
}

curEnv->SetIntArrayRegion( indexes_, 0, indexesSize, (jint*)(indexes) ) ;


                         curEnv->CallStaticVoidMethod(cls, voidsendDatajstringjava_lang_StringjintArray_intjcharcharjintintID ,varName_, indexes_, type, handlerId);
                        curEnv->DeleteLocalRef(varName_);
curEnv->DeleteLocalRef(indexes_);
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
}

void ScilabVariables::closeList (JavaVM * jvm_, int* indexes, int indexesSize, int handlerId){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidcloseListjintArray_intjintintID = curEnv->GetStaticMethodID(cls, "closeList", "([II)V" ) ;
if (voidcloseListjintArray_intjintintID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "closeList");
}

jintArray indexes_ = curEnv->NewIntArray( indexesSize ) ;

if (indexes_ == NULL)
{
// check that allocation succeed
throw GiwsException::JniBadAllocException(curEnv);
}

curEnv->SetIntArrayRegion( indexes_, 0, indexesSize, (jint*)(indexes) ) ;


                         curEnv->CallStaticVoidMethod(cls, voidcloseListjintArray_intjintintID ,indexes_, handlerId);
                        curEnv->DeleteLocalRef(indexes_);
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
}

void ScilabVariables::sendData (JavaVM * jvm_, char * varName, int* indexes, int indexesSize, int row, int col, int nbItem, int* nbItemRow, int nbItemRowSize, int* colPos, int colPosSize, double* data, int dataSize, int handlerId){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsendDatajstringjava_lang_StringjintArray_intjintintjintintjintintjintArray_intjintArray_intjdoubleArray_doublejintintID = curEnv->GetStaticMethodID(cls, "sendData", "(Ljava/lang/String;[IIII[I[I[DI)V" ) ;
if (voidsendDatajstringjava_lang_StringjintArray_intjintintjintintjintintjintArray_intjintArray_intjdoubleArray_doublejintintID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "sendData");
}

jstring varName_ = curEnv->NewStringUTF( varName );
if (varName != NULL && varName_ == NULL)
{
throw GiwsException::JniBadAllocException(curEnv);
}


jintArray indexes_ = curEnv->NewIntArray( indexesSize ) ;

if (indexes_ == NULL)
{
// check that allocation succeed
throw GiwsException::JniBadAllocException(curEnv);
}

curEnv->SetIntArrayRegion( indexes_, 0, indexesSize, (jint*)(indexes) ) ;


jintArray nbItemRow_ = curEnv->NewIntArray( nbItemRowSize ) ;

if (nbItemRow_ == NULL)
{
// check that allocation succeed
throw GiwsException::JniBadAllocException(curEnv);
}

curEnv->SetIntArrayRegion( nbItemRow_, 0, nbItemRowSize, (jint*)(nbItemRow) ) ;


jintArray colPos_ = curEnv->NewIntArray( colPosSize ) ;

if (colPos_ == NULL)
{
// check that allocation succeed
throw GiwsException::JniBadAllocException(curEnv);
}

curEnv->SetIntArrayRegion( colPos_, 0, colPosSize, (jint*)(colPos) ) ;


jdoubleArray data_ = curEnv->NewDoubleArray( dataSize ) ;

if (data_ == NULL)
{
// check that allocation succeed
throw GiwsException::JniBadAllocException(curEnv);
}

curEnv->SetDoubleArrayRegion( data_, 0, dataSize, (jdouble*)(data) ) ;


                         curEnv->CallStaticVoidMethod(cls, voidsendDatajstringjava_lang_StringjintArray_intjintintjintintjintintjintArray_intjintArray_intjdoubleArray_doublejintintID ,varName_, indexes_, row, col, nbItem, nbItemRow_, colPos_, data_, handlerId);
                        curEnv->DeleteLocalRef(varName_);
curEnv->DeleteLocalRef(indexes_);
curEnv->DeleteLocalRef(nbItemRow_);
curEnv->DeleteLocalRef(colPos_);
curEnv->DeleteLocalRef(data_);
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
}

void ScilabVariables::sendData (JavaVM * jvm_, char * varName, int* indexes, int indexesSize, int row, int col, int nbItem, int* nbItemRow, int nbItemRowSize, int* colPos, int colPosSize, double* real, int realSize, double* imag, int imagSize, int handlerId){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsendDatajstringjava_lang_StringjintArray_intjintintjintintjintintjintArray_intjintArray_intjdoubleArray_doublejdoubleArray_doublejintintID = curEnv->GetStaticMethodID(cls, "sendData", "(Ljava/lang/String;[IIII[I[I[D[DI)V" ) ;
if (voidsendDatajstringjava_lang_StringjintArray_intjintintjintintjintintjintArray_intjintArray_intjdoubleArray_doublejdoubleArray_doublejintintID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "sendData");
}

jstring varName_ = curEnv->NewStringUTF( varName );
if (varName != NULL && varName_ == NULL)
{
throw GiwsException::JniBadAllocException(curEnv);
}


jintArray indexes_ = curEnv->NewIntArray( indexesSize ) ;

if (indexes_ == NULL)
{
// check that allocation succeed
throw GiwsException::JniBadAllocException(curEnv);
}

curEnv->SetIntArrayRegion( indexes_, 0, indexesSize, (jint*)(indexes) ) ;


jintArray nbItemRow_ = curEnv->NewIntArray( nbItemRowSize ) ;

if (nbItemRow_ == NULL)
{
// check that allocation succeed
throw GiwsException::JniBadAllocException(curEnv);
}

curEnv->SetIntArrayRegion( nbItemRow_, 0, nbItemRowSize, (jint*)(nbItemRow) ) ;


jintArray colPos_ = curEnv->NewIntArray( colPosSize ) ;

if (colPos_ == NULL)
{
// check that allocation succeed
throw GiwsException::JniBadAllocException(curEnv);
}

curEnv->SetIntArrayRegion( colPos_, 0, colPosSize, (jint*)(colPos) ) ;


jdoubleArray real_ = curEnv->NewDoubleArray( realSize ) ;

if (real_ == NULL)
{
// check that allocation succeed
throw GiwsException::JniBadAllocException(curEnv);
}

curEnv->SetDoubleArrayRegion( real_, 0, realSize, (jdouble*)(real) ) ;


jdoubleArray imag_ = curEnv->NewDoubleArray( imagSize ) ;

if (imag_ == NULL)
{
// check that allocation succeed
throw GiwsException::JniBadAllocException(curEnv);
}

curEnv->SetDoubleArrayRegion( imag_, 0, imagSize, (jdouble*)(imag) ) ;


                         curEnv->CallStaticVoidMethod(cls, voidsendDatajstringjava_lang_StringjintArray_intjintintjintintjintintjintArray_intjintArray_intjdoubleArray_doublejdoubleArray_doublejintintID ,varName_, indexes_, row, col, nbItem, nbItemRow_, colPos_, real_, imag_, handlerId);
                        curEnv->DeleteLocalRef(varName_);
curEnv->DeleteLocalRef(indexes_);
curEnv->DeleteLocalRef(nbItemRow_);
curEnv->DeleteLocalRef(colPos_);
curEnv->DeleteLocalRef(real_);
curEnv->DeleteLocalRef(imag_);
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
}

void ScilabVariables::sendData (JavaVM * jvm_, char * varName, int* indexes, int indexesSize, int row, int col, int nbItem, int* nbItemRow, int nbItemRowSize, int* colPos, int colPosSize, int handlerId){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsendDatajstringjava_lang_StringjintArray_intjintintjintintjintintjintArray_intjintArray_intjintintID = curEnv->GetStaticMethodID(cls, "sendData", "(Ljava/lang/String;[IIII[I[II)V" ) ;
if (voidsendDatajstringjava_lang_StringjintArray_intjintintjintintjintintjintArray_intjintArray_intjintintID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "sendData");
}

jstring varName_ = curEnv->NewStringUTF( varName );
if (varName != NULL && varName_ == NULL)
{
throw GiwsException::JniBadAllocException(curEnv);
}


jintArray indexes_ = curEnv->NewIntArray( indexesSize ) ;

if (indexes_ == NULL)
{
// check that allocation succeed
throw GiwsException::JniBadAllocException(curEnv);
}

curEnv->SetIntArrayRegion( indexes_, 0, indexesSize, (jint*)(indexes) ) ;


jintArray nbItemRow_ = curEnv->NewIntArray( nbItemRowSize ) ;

if (nbItemRow_ == NULL)
{
// check that allocation succeed
throw GiwsException::JniBadAllocException(curEnv);
}

curEnv->SetIntArrayRegion( nbItemRow_, 0, nbItemRowSize, (jint*)(nbItemRow) ) ;


jintArray colPos_ = curEnv->NewIntArray( colPosSize ) ;

if (colPos_ == NULL)
{
// check that allocation succeed
throw GiwsException::JniBadAllocException(curEnv);
}

curEnv->SetIntArrayRegion( colPos_, 0, colPosSize, (jint*)(colPos) ) ;


                         curEnv->CallStaticVoidMethod(cls, voidsendDatajstringjava_lang_StringjintArray_intjintintjintintjintintjintArray_intjintArray_intjintintID ,varName_, indexes_, row, col, nbItem, nbItemRow_, colPos_, handlerId);
                        curEnv->DeleteLocalRef(varName_);
curEnv->DeleteLocalRef(indexes_);
curEnv->DeleteLocalRef(nbItemRow_);
curEnv->DeleteLocalRef(colPos_);
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
}

}
