<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2009 - DIGITEO - Vincent COUVERT
 *
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at
 * http://www.cecill.info/licences/Licence_CeCILL_V2.1-en.txt
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:id="m2sci_all">
    <refnamediv>
        <refname>all (Matlab function)</refname>
        <refpurpose>Test to determine if all elements are nonzero</refpurpose>
    </refnamediv>
    <refsection>
        <title>Matlab/Scilab equivalent</title>
        <informaltable border="1" width="100%">
            <tr>
                <td align="center">
                    <emphasis role="bold">Matlab</emphasis>
                </td>
                <td align="center">
                    <emphasis role="bold">Scilab</emphasis>
                </td>
            </tr>
            <tr>
                <td>
                    <programlisting role="example"><![CDATA[
all
]]></programlisting>
                </td>
                <td>
                    <programlisting role="example"><![CDATA[
and
]]></programlisting>
                </td>
            </tr>
        </informaltable>
    </refsection>
    <refsection>
        <title>Particular cases</title>
        <para>
            Matlab <emphasis role="bold">all</emphasis> function can work with complexes, what Scilab <emphasis role="bold">and</emphasis> can not, so a call to <emphasis role="bold">abs</emphasis> function can be necessary when translating from Matlab to Scilab.
        </para>
        <variablelist>
            <varlistentry>
                <term>
                    The Matlab expression <emphasis role="bold">B=all(A)</emphasis> is translated into Scilab by <emphasis role="bold">B=and(A)</emphasis>:
                </term>
                <listitem>
                    <para>
                        If <emphasis role="bold">A</emphasis> is a matrix, <emphasis role="bold">all(A)</emphasis> is equivalent to <emphasis role="bold">all(A,1)</emphasis> in Matlab whereas in Scilab <emphasis role="bold">and(A)</emphasis> is a logical AND of all elements of <emphasis role="bold">A</emphasis>. If <emphasis role="bold">A</emphasis> is a multidimensional array then Matlab treats the values along the first non-singleton dimension, but Scilab returns logical AND of all elements of <emphasis role="bold">A</emphasis>.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>
                    The Matlab expression <emphasis role="strong">B=all(A,dim)</emphasis> is translated into Scilab by <emphasis role="strong">B=and(A,dim)</emphasis>:
                </term>
                <listitem>
                    <para>
                        In Scilab <emphasis role="bold">dim=1</emphasis> is equivalent to <emphasis role="bold">dim="r"</emphasis> and <emphasis role="bold">dim=2</emphasis> is equivalent to <emphasis role="bold">dim="c"</emphasis>. In Matlab, <emphasis role="bold">dim</emphasis> can be greater then the number of dimension of <emphasis role="bold">A</emphasis> (in this case, <emphasis role="bold">B=A</emphasis>), in Scilab you will get an error message.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Examples</title>
        <informaltable border="1" width="100%">
            <tr>
                <td align="center">
                    <emphasis role="bold">Matlab</emphasis>
                </td>
                <td align="center">
                    <emphasis role="bold">Scilab</emphasis>
                </td>
            </tr>
            <tr>
                <td>
                    <programlisting role="example"><![CDATA[
y = all([1,1,0;1,0,1])
y = [1,0,0]
y = all([1,1,0;1,0,1],1)
y = [1,0,0]
  ]]></programlisting>
                </td>
                <td>
                    <programlisting role="example"><![CDATA[
y = and([1,1,0;1,0,1])
y = %F
y = and([1,1,0;1,0,1],1)
y = [%T,%F,%F]
  ]]></programlisting>
                </td>
            </tr>
        </informaltable>
    </refsection>
</refentry>
