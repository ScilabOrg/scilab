<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2008 - INRIA
 * 
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at    
 * http://www.cecill.info/licences/Licence_CeCILL_V2.1-en.txt
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:lang="en" xml:id="nlev">
    <refnamediv>
        <refname>nlev</refname>
        <refpurpose>Leverrier's algorithm</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Calling Sequence</title>
        <synopsis>[num,den]=nlev(A,z [,rmax])</synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>Arguments</title>
        <variablelist>
            <varlistentry>
                <term>A</term>
                <listitem>
                    <para>real square matrix</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>z</term>
                <listitem>
                    <para>character string</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>rmax</term>
                <listitem>
                    <para>
                        optional parameter (see <literal>bdiag</literal>)
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Description</title>
        <para>
            <literal>[num,den]=nlev(A,z [,rmax])</literal> computes
            <literal>(z*eye()-A)^(-1)</literal>
        </para>
        <para>
            by block diagonalization of A followed by Leverrier's algorithm
            on each block.
        </para>
        <para>
            This algorithm is better than the usual leverrier algorithm but
            still not perfect!
        </para>
    </refsection>
    <refsection>
        <title>Examples</title>
        <programlisting role="example"><![CDATA[ 
A=rand(3,3);x=poly(0,'x');
[NUM,den]=nlev(A,'x')
clean(den-poly(A,'x'))
clean(NUM/den-inv(x*eye()-A))
 ]]></programlisting>
    </refsection>
    <refsection role="see also">
        <title>See Also</title>
        <simplelist type="inline">
            <member>
                <link linkend="coff">coff</link>
            </member>
            <member>
                <link linkend="coffg">coffg</link>
            </member>
            <member>
                <link linkend="glever">glever</link>
            </member>
            <member>
                <link linkend="ss2tf">ss2tf</link>
            </member>
        </simplelist>
    </refsection>
</refentry>
