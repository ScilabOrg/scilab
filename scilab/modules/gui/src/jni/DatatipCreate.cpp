#include "DatatipCreate.hxx"
/* Generated by GIWS (version 2.0.2) with command:
giws --disable-return-size-array --output-dir src/jni/ --throws-exception-on-error --description-file src/jni/Datatip.giws.xml
*/
/*

This is generated code.

This software is a computer program whose purpose is to hide the complexity
of accessing Java objects/methods from C++ code.

Copyright (C) 2012 - 2016 - Scilab Enterprises

This file is hereby licensed under the terms of the GNU GPL v2.0,
pursuant to article 5.3.4 of the CeCILL v.2.1.
This file was originally licensed under the terms of the CeCILL v2.1,
and continues to be available under such terms.
For more information, see the COPYING file which you should have received
along with this program.
*/

namespace org_scilab_modules_gui_datatip {

                // Static declarations (if any)
                
// Returns the current env

JNIEnv * DatatipCreate::getCurrentEnv() {
JNIEnv * curEnv = NULL;
jint res=this->jvm->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
if (res != JNI_OK) {
throw GiwsException::JniException(getCurrentEnv());
}
return curEnv;
}
// Destructor

DatatipCreate::~DatatipCreate() {
JNIEnv * curEnv = NULL;
this->jvm->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
curEnv->DeleteGlobalRef(this->instance);
curEnv->DeleteGlobalRef(this->instanceClass);
}
// Constructors
DatatipCreate::DatatipCreate(JavaVM * jvm_) {
jmethodID constructObject = NULL ;
jobject localInstance ;
jclass localClass ;

const std::string construct="<init>";
const std::string param="()V";
jvm=jvm_;

JNIEnv * curEnv = getCurrentEnv();

localClass = curEnv->FindClass( this->className().c_str() ) ;
if (localClass == NULL) {
  throw GiwsException::JniClassNotFoundException(curEnv, this->className());
}

this->instanceClass = static_cast<jclass>(curEnv->NewGlobalRef(localClass));

/* localClass is not needed anymore */
curEnv->DeleteLocalRef(localClass);

if (this->instanceClass == NULL) {
throw GiwsException::JniObjectCreationException(curEnv, this->className());
}


constructObject = curEnv->GetMethodID( this->instanceClass, construct.c_str() , param.c_str() ) ;
if(constructObject == NULL){
throw GiwsException::JniObjectCreationException(curEnv, this->className());
}

localInstance = curEnv->NewObject( this->instanceClass, constructObject ) ;
if(localInstance == NULL){
throw GiwsException::JniObjectCreationException(curEnv, this->className());
}
 
this->instance = curEnv->NewGlobalRef(localInstance) ;
if(this->instance == NULL){
throw GiwsException::JniObjectCreationException(curEnv, this->className());
}
/* localInstance not needed anymore */
curEnv->DeleteLocalRef(localInstance);

                /* Methods ID set to NULL */
jintcreateDatatipProgramCoordjintintjdoubleArray_doubledoubleID=NULL;
jintcreateDatatipProgramIndexjintintjintintID=NULL;
voiddatatipSetInterpjintintjbooleanbooleanID=NULL;


}

DatatipCreate::DatatipCreate(JavaVM * jvm_, jobject JObj) {
        jvm=jvm_;

        JNIEnv * curEnv = getCurrentEnv();

jclass localClass = curEnv->GetObjectClass(JObj);
        this->instanceClass = static_cast<jclass>(curEnv->NewGlobalRef(localClass));
        curEnv->DeleteLocalRef(localClass);

        if (this->instanceClass == NULL) {
throw GiwsException::JniObjectCreationException(curEnv, this->className());
        }

        this->instance = curEnv->NewGlobalRef(JObj) ;
        if(this->instance == NULL){
throw GiwsException::JniObjectCreationException(curEnv, this->className());
        }
        /* Methods ID set to NULL */
        jintcreateDatatipProgramCoordjintintjdoubleArray_doubledoubleID=NULL;
jintcreateDatatipProgramIndexjintintjintintID=NULL;
voiddatatipSetInterpjintintjbooleanbooleanID=NULL;


}

// Generic methods

void DatatipCreate::synchronize() {
if (getCurrentEnv()->MonitorEnter(instance) != JNI_OK) {
throw GiwsException::JniMonitorException(getCurrentEnv(), "DatatipCreate");
}
}

void DatatipCreate::endSynchronize() {
if ( getCurrentEnv()->MonitorExit(instance) != JNI_OK) {
throw GiwsException::JniMonitorException(getCurrentEnv(), "DatatipCreate");
}
}
// Method(s)

int DatatipCreate::createDatatipProgramCoord (JavaVM * jvm_, int polylineUid, double const* coordDoubleXY, int coordDoubleXYSize){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = initClass(curEnv);
if ( cls == NULL) {
throw GiwsException::JniCallMethodException(curEnv);
}

static jmethodID jintcreateDatatipProgramCoordjintintjdoubleArray_doubledoubleID = curEnv->GetStaticMethodID(cls, "createDatatipProgramCoord", "(I[D)I" ) ;
if (jintcreateDatatipProgramCoordjintintjdoubleArray_doubledoubleID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "createDatatipProgramCoord");
}

jdoubleArray coordDoubleXY_ = curEnv->NewDoubleArray( coordDoubleXYSize ) ;

if (coordDoubleXY_ == NULL)
{
// check that allocation succeed
throw GiwsException::JniBadAllocException(curEnv);
}

curEnv->SetDoubleArrayRegion( coordDoubleXY_, 0, coordDoubleXYSize, (jdouble*)(coordDoubleXY) ) ;


                        jint res =  static_cast<jint>( curEnv->CallStaticIntMethod(cls, jintcreateDatatipProgramCoordjintintjdoubleArray_doubledoubleID ,polylineUid, coordDoubleXY_));
                        curEnv->DeleteLocalRef(coordDoubleXY_);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
return res;

}

int DatatipCreate::createDatatipProgramIndex (JavaVM * jvm_, int polylineUid, int indexPoint){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = initClass(curEnv);
if ( cls == NULL) {
throw GiwsException::JniCallMethodException(curEnv);
}

static jmethodID jintcreateDatatipProgramIndexjintintjintintID = curEnv->GetStaticMethodID(cls, "createDatatipProgramIndex", "(II)I" ) ;
if (jintcreateDatatipProgramIndexjintintjintintID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "createDatatipProgramIndex");
}

                        jint res =  static_cast<jint>( curEnv->CallStaticIntMethod(cls, jintcreateDatatipProgramIndexjintintjintintID ,polylineUid, indexPoint));
                        if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
return res;

}

void DatatipCreate::datatipSetInterp (JavaVM * jvm_, int datatipUid, bool interpMode){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = initClass(curEnv);
if ( cls == NULL) {
throw GiwsException::JniCallMethodException(curEnv);
}

static jmethodID voiddatatipSetInterpjintintjbooleanbooleanID = curEnv->GetStaticMethodID(cls, "datatipSetInterp", "(IZ)V" ) ;
if (voiddatatipSetInterpjintintjbooleanbooleanID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "datatipSetInterp");
}

jboolean interpMode_ = (static_cast<bool>(interpMode) ? JNI_TRUE : JNI_FALSE);

                         curEnv->CallStaticVoidMethod(cls, voiddatatipSetInterpjintintjbooleanbooleanID ,datatipUid, interpMode_);
                        if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
}

}
