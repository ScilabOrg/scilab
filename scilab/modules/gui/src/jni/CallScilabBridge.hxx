/* Generated by GIWS (version 1.0) */
/*

Copyright 2007 INRIA

Author : Sylvestre Ledru

This software is a computer program whose purpose is to hide the complexity
of accessing Java objects/methods from C++ code.

This software is governed by the CeCILL-B license under French law and
abiding by the rules of distribution of free software.  You can  use, 
modify and/ or redistribute the software under the terms of the CeCILL-B
license as circulated by CEA, CNRS and INRIA at the following URL
"http://www.cecill.info". 

As a counterpart to the access to the source code and  rights to copy,
modify and redistribute granted by the license, users are provided only
with a limited warranty  and the software's author,  the holder of the
economic rights,  and the successive licensors  have only  limited
liability. 

In this respect, the user's attention is drawn to the risks associated
with loading,  using,  modifying and/or developing or reproducing the
software by the user in light of its specific status of free software,
that may mean  that it is complicated to manipulate,  and  that  also
therefore means  that it is reserved for developers  and  experienced
professionals having in-depth computer knowledge. Users are therefore
encouraged to load and test the software's suitability as regards their
requirements in conditions enabling the security of their systems and/or 
data to be ensured and,  more generally, to use and operate it in the 
same conditions as regards security. 

The fact that you are presently reading this means that you have had
knowledge of the CeCILL-B license and that you accept its terms.
*/


#ifndef __ORG_SCILAB_MODULES_GUI_BRIDGE_CALLSCILABBRIDGE__
#define __ORG_SCILAB_MODULES_GUI_BRIDGE_CALLSCILABBRIDGE__
#include <iostream>
#include <string>
#include <string.h>
#include <stdlib.h>
#include <jni.h>

namespace org_scilab_modules_gui_bridge {

class CallScilabBridge {
private:
JavaVM * jvm;
jobject instance;

jclass instanceClass; // cache class
jmethodID jintnewWindowID; // cache method id
jmethodID jintnewMenuBarID; // cache method id
jmethodID jintnewMenuID; // cache method id
jmethodID jintnewPushButtonID; // cache method id
jmethodID jintnewEditBoxID; // cache method id
jmethodID jintnewLabelID; // cache method id
jmethodID jintnewCheckBoxID; // cache method id
jmethodID jintnewRadioButtonID; // cache method id
jmethodID jintnewSliderID; // cache method id
jmethodID jintnewPopupMenuID; // cache method id
jmethodID jintnewListBoxID; // cache method id
jmethodID jintnewFrameID; // cache method id
jmethodID jstringnewContextMenujobjectArrayID; // cache method id
jclass stringArrayClass;
jmethodID jintnewContextMenuID; // cache method id
jmethodID voiddestroyWidgetjintID; // cache method id
jmethodID voiddestroyFramejintID; // cache method id
jmethodID voidsetFigureAsParentjintjintID; // cache method id
jmethodID voidsetMenuAsParentjintjintID; // cache method id
jmethodID voidsetRootAsParentjintID; // cache method id
jmethodID voidsetParentjintjintID; // cache method id
jmethodID voidsetPushButtonParentjintjintID; // cache method id
jmethodID voidremovePushButtonFromParentjintjintID; // cache method id
jmethodID voidsetEditBoxParentjintjintID; // cache method id
jmethodID voidremoveEditBoxFromParentjintjintID; // cache method id
jmethodID voidsetLabelParentjintjintID; // cache method id
jmethodID voidremoveLabelFromParentjintjintID; // cache method id
jmethodID voidsetCheckBoxParentjintjintID; // cache method id
jmethodID voidremoveCheckBoxFromParentjintjintID; // cache method id
jmethodID voidsetRadioButtonParentjintjintID; // cache method id
jmethodID voidremoveRadioButtonFromParentjintjintID; // cache method id
jmethodID voidsetSliderParentjintjintID; // cache method id
jmethodID voidremoveSliderFromParentjintjintID; // cache method id
jmethodID voidsetPopupMenuParentjintjintID; // cache method id
jmethodID voidremovePopupMenuFromParentjintjintID; // cache method id
jmethodID voidsetListBoxParentjintjintID; // cache method id
jmethodID voidremoveListBoxFromParentjintjintID; // cache method id
jmethodID voidsetFrameParentjintjintID; // cache method id
jmethodID voidremoveFrameFromParentjintjintID; // cache method id
jmethodID voidsetWidgetTextjintjstringID; // cache method id
jmethodID jstringgetWidgetTextjintID; // cache method id
jmethodID voidsetFrameTextjintjstringID; // cache method id
jmethodID jstringgetFrameTextjintID; // cache method id
jmethodID voidsetWidgetBackgroundColorjintjintjintjintID; // cache method id
jmethodID jintArraygetWidgetBackgroundColorjintID; // cache method id
jmethodID voidsetWidgetForegroundColorjintjintjintjintID; // cache method id
jmethodID jintArraygetWidgetForegroundColorjintID; // cache method id
jmethodID voidsetFrameBackgroundColorjintjintjintjintID; // cache method id
jmethodID jintArraygetFrameBackgroundColorjintID; // cache method id
jmethodID voidsetFrameForegroundColorjintjintjintjintID; // cache method id
jmethodID jintArraygetFrameForegroundColorjintID; // cache method id
jmethodID voidsetWidgetFontNamejintjstringID; // cache method id
jmethodID jstringgetWidgetFontNamejintID; // cache method id
jmethodID voidsetWidgetFontWeightjintjstringID; // cache method id
jmethodID voidsetWidgetFontSizejintjintID; // cache method id
jmethodID jintgetWidgetFontSizejintID; // cache method id
jmethodID voidsetWidgetFontAnglejintjstringID; // cache method id
jmethodID voidsetFrameFontNamejintjstringID; // cache method id
jmethodID jstringgetFrameFontNamejintID; // cache method id
jmethodID voidsetFrameFontWeightjintjstringID; // cache method id
jmethodID voidsetFrameFontSizejintjintID; // cache method id
jmethodID jintgetFrameFontSizejintID; // cache method id
jmethodID voidsetFrameFontAnglejintjstringID; // cache method id
jmethodID voidsetWidgetPositionjintjintjintjintjintID; // cache method id
jmethodID jintArraygetWidgetPositionjintID; // cache method id
jmethodID voidsetFramePositionjintjintjintjintjintID; // cache method id
jmethodID jintArraygetFramePositionjintID; // cache method id
jmethodID voidsetWidgetCallbackjintjstringjintID; // cache method id
jmethodID voidsetFrameCallbackjintjstringjintID; // cache method id
jmethodID voidsetWidgetHorizontalAlignmentjintjstringID; // cache method id
jmethodID voidsetWidgetVerticalAlignmentjintjstringID; // cache method id
jmethodID voidsetSliderMinorTickSpacingjintjintID; // cache method id
jmethodID voidsetSliderMajorTickSpacingjintjintID; // cache method id
jmethodID voidsetListBoxSelectedIndicesjintjintArrayID; // cache method id
jmethodID jintArraygetListBoxSelectedIndicesjintID; // cache method id
jmethodID jintgetListBoxSelectionSizejintID; // cache method id
jmethodID voidsetPopupMenuSelectedIndexjintjintID; // cache method id
jmethodID jintgetPopupMenuSelectedIndexjintID; // cache method id
jmethodID voidsetSliderValuejintjintID; // cache method id
jmethodID jintgetSliderValuejintID; // cache method id
jmethodID voidsetRadioButtonCheckedjintjbooleanID; // cache method id
jmethodID jbooleanisRadioButtonCheckedjintID; // cache method id
jmethodID voidsetCheckBoxCheckedjintjbooleanID; // cache method id
jmethodID jbooleanisCheckBoxCheckedjintID; // cache method id
jmethodID voidsetSliderMinValuejintjintID; // cache method id
jmethodID voidsetSliderMaxValuejintjintID; // cache method id
jmethodID voidsetSliderVerticaljintID; // cache method id
jmethodID voidsetSliderHorizontaljintID; // cache method id
jmethodID voidsetListBoxMultipleSelectionEnabledjintjbooleanID; // cache method id
jmethodID jobjectArraygetListBoxAllItemsTextjintID; // cache method id
jmethodID jintgetListBoxNumberOfItemsjintID; // cache method id
jmethodID voidsetListBoxTextjintjobjectArrayID; // cache method id
jmethodID jobjectArraygetPopupMenuAllItemsTextjintID; // cache method id
jmethodID jintgetPopupMenuNumberOfItemsjintID; // cache method id
jmethodID voidsetPopupMenuTextjintjobjectArrayID; // cache method id
jmethodID voidsetWidgetReliefjintjstringID; // cache method id
jmethodID voidsetFrameReliefjintjstringID; // cache method id
jmethodID voidsetRootMenuEnabledjstringjbooleanID; // cache method id
jmethodID voidsetRootSubMenuEnabledjstringjintjbooleanID; // cache method id
jmethodID voidsetFigureMenuEnabledjintjstringjbooleanID; // cache method id
jmethodID voidsetFigureSubMenuEnabledjintjstringjintjbooleanID; // cache method id
jmethodID voidsetWidgetEnablejintjbooleanID; // cache method id
jmethodID voidsetFrameEnablejintjbooleanID; // cache method id
jmethodID jbooleanisWidgetEnablejintID; // cache method id
jmethodID jbooleanisFrameEnablejintID; // cache method id
jmethodID voidremoveRootMenujstringID; // cache method id
jmethodID voidremoveFigureMenujintjstringID; // cache method id
jmethodID jstringdisplayAndWaitContextMenujintID; // cache method id
jmethodID jintnewFileChooserID; // cache method id
jmethodID voidsetFileChooserTitlejintjstringID; // cache method id
jmethodID voidsetFileChooserInitialDirectoryjintjstringID; // cache method id
jmethodID voidsetFileChooserMaskjintjstringID; // cache method id
jmethodID voidfileChooserDisplayAndWaitjintID; // cache method id
jmethodID jintgetFileChooserSelectionSizejintID; // cache method id
jmethodID jobjectArraygetFileChooserSelectionjintID; // cache method id
jmethodID voidsetFileChooserDirectorySelectionOnlyjintID; // cache method id
jmethodID voidsetFileChooserFileSelectionOnlyjintID; // cache method id
jmethodID jintnewMessageBoxID; // cache method id
jmethodID voidsetMessageBoxTitlejintjstringID; // cache method id
jmethodID voidsetMessageBoxMessagejintjstringID; // cache method id
jmethodID voidsetMessageBoxMessagejintjobjectArrayID; // cache method id
jmethodID voidmessageBoxDisplayAndWaitjintID; // cache method id
jmethodID jintgetMessageBoxSelectedButtonjintID; // cache method id
jmethodID voidsetMessageBoxDefaultSelectedButtonsjintjintArrayID; // cache method id
jmethodID jintArraygetMessageBoxUserSelectedButtonsjintID; // cache method id
jmethodID voidsetMessageBoxButtonsLabelsjintjobjectArrayID; // cache method id
jmethodID voidsetMessageBoxInitialValuejintjobjectArrayID; // cache method id
jmethodID jobjectArraygetMessageBoxValuejintID; // cache method id
jmethodID jintgetMessageBoxValueSizejintID; // cache method id
jmethodID voidsetMessageBoxListBoxItemsjintjobjectArrayID; // cache method id
jmethodID jintgetMessageBoxSelectedItemjintID; // cache method id
jmethodID voidsetMessageBoxLineLabelsjintjobjectArrayID; // cache method id
jmethodID voidsetMessageBoxColumnLabelsjintjobjectArrayID; // cache method id
jmethodID voidsetMessageBoxDefaultInputjintjobjectArrayID; // cache method id
jmethodID voidsetMessageBoxModaljintjbooleanID; // cache method id
jmethodID voidsetMessageBoxIconjintjstringID; // cache method id
jmethodID jbooleanisToolbarVisiblejintID; // cache method id
jmethodID voidsetToolbarVisiblejintjbooleanID; // cache method id
jmethodID voidsetEventHandlerjintjstringID; // cache method id
jmethodID voidsetEventHandlerEnabledjintjbooleanID; // cache method id
jmethodID jintnewWaitBarID; // cache method id
jmethodID voidsetWaitBarMessagejintjobjectArrayID; // cache method id
jmethodID voidsetWaitBarValuejintjintID; // cache method id
jmethodID voiddestroyWaitBarjintID; // cache method id
jmethodID voidsetWaitBarIndeterminateModejintjbooleanID; // cache method id
jmethodID voidlaunchHelpBrowserjobjectArrayjstringID; // cache method id
jmethodID voidsearchKeywordjobjectArrayjstringjstringjbooleanID; // cache method id
jmethodID voidsaveMainWindowSettingsID; // cache method id
jmethodID jintnewExportFileChooserjintID; // cache method id
jmethodID jintnewFontChooserID; // cache method id
jmethodID voidfontChooserDisplayAndWaitjintID; // cache method id
jmethodID voidsetFontChooserFontNamejintjstringID; // cache method id
jmethodID voidsetFontChooserFontSizejintjintID; // cache method id
jmethodID voidsetFontChooserBoldjintjbooleanID; // cache method id
jmethodID voidsetFontChooserItalicjintjbooleanID; // cache method id
jmethodID jstringgetFontChooserFontNamejintID; // cache method id
jmethodID jintgetFontChooserFontSizejintID; // cache method id
jmethodID jbooleangetFontChooserBoldjintID; // cache method id
jmethodID jbooleangetFontChooserItalicjintID; // cache method id
jmethodID jintnewColorChooserID; // cache method id
jmethodID voidcolorChooserDisplayAndWaitjintID; // cache method id
jmethodID voidsetColorChooserDefaultColorjintjintArrayID; // cache method id
jmethodID jintArraygetColorChooserSelectedColorjintID; // cache method id
jmethodID voidsetWidgetVisiblejintjbooleanID; // cache method id
jmethodID voidsetFrameVisiblejintjbooleanID; // cache method id
jmethodID jbooleanisWidgetVisiblejintID; // cache method id
jmethodID jbooleanisFrameVisiblejintID; // cache method id
jmethodID jstringgetClipboardContentsID; // cache method id
jmethodID voidpasteClipboardIntoConsoleID; // cache method id
jmethodID voidcopyConsoleSelectionID; // cache method id
jmethodID voidemptyClipboardID; // cache method id
jmethodID voidsetClipboardContentsjstringID; // cache method id
jmethodID voidcopyFigureToClipBoardjintID; // cache method id
jmethodID jintgetScreenResolutionID; // cache method id
jmethodID jdoublegetScreenWidthID; // cache method id
jmethodID jdoublegetScreenHeightID; // cache method id
jmethodID jintgetScreenDepthID; // cache method id
jmethodID voidprintFigurejintID; // cache method id
jmethodID voidrequestWidgetFocusjintID; // cache method id
jmethodID voidrequestFrameFocusjintID; // cache method id


/**
* Get the environment matching to the current thread.
*/
JNIEnv * getCurrentEnv();

public:
// Constructor
/**
* Create a wrapping of the object from a JNIEnv.
* It will call the default constructor
* @param JEnv_ the Java Env
*/
CallScilabBridge(JavaVM * jvm_);
/**
* Create a wrapping of an already existing object from a JNIEnv.
* The object must have already been instantiated
* @param JEnv_ the Java Env
* @param JObj the object
*/
CallScilabBridge(JavaVM * jvm_, jobject JObj);

// Destructor
~CallScilabBridge();

// Generic method
// Synchronization methods
/**
* Enter monitor associated with the object.
* Equivalent of creating a "synchronized(obj)" scope in Java.
*/
void synchronize();

/**
* Exit monitor associated with the object.
* Equivalent of ending a "synchronized(obj)" scope.
*/
void endSynchronize();

// Methods
static long newWindow(JavaVM * jvm_);

static long newMenuBar(JavaVM * jvm_);

static long newMenu(JavaVM * jvm_);

static long newPushButton(JavaVM * jvm_);

static long newEditBox(JavaVM * jvm_);

static long newLabel(JavaVM * jvm_);

static long newCheckBox(JavaVM * jvm_);

static long newRadioButton(JavaVM * jvm_);

static long newSlider(JavaVM * jvm_);

static long newPopupMenu(JavaVM * jvm_);

static long newListBox(JavaVM * jvm_);

static long newFrame(JavaVM * jvm_);

static char * newContextMenu(JavaVM * jvm_, char ** menuLabels, int menuLabelsSize);

static long newContextMenu(JavaVM * jvm_);

static void destroyWidget(JavaVM * jvm_, long objID);

static void destroyFrame(JavaVM * jvm_, long objID);

static void setFigureAsParent(JavaVM * jvm_, long figureID, long objID);

static void setMenuAsParent(JavaVM * jvm_, long menuID, long objID);

static void setRootAsParent(JavaVM * jvm_, long objID);

static void setParent(JavaVM * jvm_, long parentID, long objID);

static void setPushButtonParent(JavaVM * jvm_, long parentID, long objID);

static void removePushButtonFromParent(JavaVM * jvm_, long parentID, long objID);

static void setEditBoxParent(JavaVM * jvm_, long parentID, long objID);

static void removeEditBoxFromParent(JavaVM * jvm_, long parentID, long objID);

static void setLabelParent(JavaVM * jvm_, long parentID, long objID);

static void removeLabelFromParent(JavaVM * jvm_, long parentID, long objID);

static void setCheckBoxParent(JavaVM * jvm_, long parentID, long objID);

static void removeCheckBoxFromParent(JavaVM * jvm_, long parentID, long objID);

static void setRadioButtonParent(JavaVM * jvm_, long parentID, long objID);

static void removeRadioButtonFromParent(JavaVM * jvm_, long parentID, long objID);

static void setSliderParent(JavaVM * jvm_, long parentID, long objID);

static void removeSliderFromParent(JavaVM * jvm_, long parentID, long objID);

static void setPopupMenuParent(JavaVM * jvm_, long parentID, long objID);

static void removePopupMenuFromParent(JavaVM * jvm_, long parentID, long objID);

static void setListBoxParent(JavaVM * jvm_, long parentID, long objID);

static void removeListBoxFromParent(JavaVM * jvm_, long parentID, long objID);

static void setFrameParent(JavaVM * jvm_, long parentID, long objID);

static void removeFrameFromParent(JavaVM * jvm_, long parentID, long objID);

static void setWidgetText(JavaVM * jvm_, long objID, char * text);

static char * getWidgetText(JavaVM * jvm_, long objID);

static void setFrameText(JavaVM * jvm_, long objID, char * text);

static char * getFrameText(JavaVM * jvm_, long objID);

static void setWidgetBackgroundColor(JavaVM * jvm_, long objID, long red, long green, long blue);

static long * getWidgetBackgroundColor(JavaVM * jvm_, long objID);

static void setWidgetForegroundColor(JavaVM * jvm_, long objID, long red, long green, long blue);

static long * getWidgetForegroundColor(JavaVM * jvm_, long objID);

static void setFrameBackgroundColor(JavaVM * jvm_, long objID, long red, long green, long blue);

static long * getFrameBackgroundColor(JavaVM * jvm_, long objID);

static void setFrameForegroundColor(JavaVM * jvm_, long objID, long red, long green, long blue);

static long * getFrameForegroundColor(JavaVM * jvm_, long objID);

static void setWidgetFontName(JavaVM * jvm_, long objID, char * name);

static char * getWidgetFontName(JavaVM * jvm_, long objID);

static void setWidgetFontWeight(JavaVM * jvm_, long objID, char * weight);

static void setWidgetFontSize(JavaVM * jvm_, long objID, long size);

static long getWidgetFontSize(JavaVM * jvm_, long objID);

static void setWidgetFontAngle(JavaVM * jvm_, long objID, char * angle);

static void setFrameFontName(JavaVM * jvm_, long objID, char * name);

static char * getFrameFontName(JavaVM * jvm_, long objID);

static void setFrameFontWeight(JavaVM * jvm_, long objID, char * weight);

static void setFrameFontSize(JavaVM * jvm_, long objID, long size);

static long getFrameFontSize(JavaVM * jvm_, long objID);

static void setFrameFontAngle(JavaVM * jvm_, long objID, char * angle);

static void setWidgetPosition(JavaVM * jvm_, long objID, long x, long y, long width, long height);

static long * getWidgetPosition(JavaVM * jvm_, long objID);

static void setFramePosition(JavaVM * jvm_, long objID, long x, long y, long width, long height);

static long * getFramePosition(JavaVM * jvm_, long objID);

static void setWidgetCallback(JavaVM * jvm_, long objID, char * text, long type);

static void setFrameCallback(JavaVM * jvm_, long objID, char * text, long type);

static void setWidgetHorizontalAlignment(JavaVM * jvm_, long objID, char * alignment);

static void setWidgetVerticalAlignment(JavaVM * jvm_, long objID, char * alignment);

static void setSliderMinorTickSpacing(JavaVM * jvm_, long objID, long space);

static void setSliderMajorTickSpacing(JavaVM * jvm_, long objID, long space);

static void setListBoxSelectedIndices(JavaVM * jvm_, long objID, long * indices, int indicesSize);

static long * getListBoxSelectedIndices(JavaVM * jvm_, long objID);

static long getListBoxSelectionSize(JavaVM * jvm_, long objID);

static void setPopupMenuSelectedIndex(JavaVM * jvm_, long objID, long index);

static long getPopupMenuSelectedIndex(JavaVM * jvm_, long objID);

static void setSliderValue(JavaVM * jvm_, long objID, long index);

static long getSliderValue(JavaVM * jvm_, long objID);

static void setRadioButtonChecked(JavaVM * jvm_, long objID, bool status);

static bool isRadioButtonChecked(JavaVM * jvm_, long objID);

static void setCheckBoxChecked(JavaVM * jvm_, long objID, bool status);

static bool isCheckBoxChecked(JavaVM * jvm_, long objID);

static void setSliderMinValue(JavaVM * jvm_, long objID, long value);

static void setSliderMaxValue(JavaVM * jvm_, long objID, long value);

static void setSliderVertical(JavaVM * jvm_, long objID);

static void setSliderHorizontal(JavaVM * jvm_, long objID);

static void setListBoxMultipleSelectionEnabled(JavaVM * jvm_, long objID, bool status);

static char ** getListBoxAllItemsText(JavaVM * jvm_, long objID);

static long getListBoxNumberOfItems(JavaVM * jvm_, long objID);

static void setListBoxText(JavaVM * jvm_, long objID, char ** text, int textSize);

static char ** getPopupMenuAllItemsText(JavaVM * jvm_, long objID);

static long getPopupMenuNumberOfItems(JavaVM * jvm_, long objID);

static void setPopupMenuText(JavaVM * jvm_, long objID, char ** text, int textSize);

static void setWidgetRelief(JavaVM * jvm_, long objID, char * reliefType);

static void setFrameRelief(JavaVM * jvm_, long objID, char * reliefType);

static void setRootMenuEnabled(JavaVM * jvm_, char * menuName, bool status);

static void setRootSubMenuEnabled(JavaVM * jvm_, char * menuName, long position, bool status);

static void setFigureMenuEnabled(JavaVM * jvm_, long figureID, char * menuName, bool status);

static void setFigureSubMenuEnabled(JavaVM * jvm_, long figureID, char * menuName, long position, bool status);

static void setWidgetEnable(JavaVM * jvm_, long objID, bool status);

static void setFrameEnable(JavaVM * jvm_, long objID, bool status);

static bool isWidgetEnable(JavaVM * jvm_, long objID);

static bool isFrameEnable(JavaVM * jvm_, long objID);

static void removeRootMenu(JavaVM * jvm_, char * menuName);

static void removeFigureMenu(JavaVM * jvm_, long figureID, char * menuName);

static char * displayAndWaitContextMenu(JavaVM * jvm_, long ID);

static long newFileChooser(JavaVM * jvm_);

static void setFileChooserTitle(JavaVM * jvm_, long id, char * title);

static void setFileChooserInitialDirectory(JavaVM * jvm_, long id, char * path);

static void setFileChooserMask(JavaVM * jvm_, long id, char * mask);

static void fileChooserDisplayAndWait(JavaVM * jvm_, long id);

static long getFileChooserSelectionSize(JavaVM * jvm_, long id);

static char ** getFileChooserSelection(JavaVM * jvm_, long id);

static void setFileChooserDirectorySelectionOnly(JavaVM * jvm_, long id);

static void setFileChooserFileSelectionOnly(JavaVM * jvm_, long id);

static long newMessageBox(JavaVM * jvm_);

static void setMessageBoxTitle(JavaVM * jvm_, long id, char * title);

static void setMessageBoxMessage(JavaVM * jvm_, long id, char * message);

static void setMessageBoxMessage(JavaVM * jvm_, long id, char ** message, int messageSize);

static void messageBoxDisplayAndWait(JavaVM * jvm_, long id);

static long getMessageBoxSelectedButton(JavaVM * jvm_, long id);

static void setMessageBoxDefaultSelectedButtons(JavaVM * jvm_, long id, long * index, int indexSize);

static long * getMessageBoxUserSelectedButtons(JavaVM * jvm_, long id);

static void setMessageBoxButtonsLabels(JavaVM * jvm_, long id, char ** labels, int labelsSize);

static void setMessageBoxInitialValue(JavaVM * jvm_, long id, char ** value, int valueSize);

static char ** getMessageBoxValue(JavaVM * jvm_, long id);

static long getMessageBoxValueSize(JavaVM * jvm_, long id);

static void setMessageBoxListBoxItems(JavaVM * jvm_, long id, char ** items, int itemsSize);

static long getMessageBoxSelectedItem(JavaVM * jvm_, long id);

static void setMessageBoxLineLabels(JavaVM * jvm_, long id, char ** labels, int labelsSize);

static void setMessageBoxColumnLabels(JavaVM * jvm_, long id, char ** labels, int labelsSize);

static void setMessageBoxDefaultInput(JavaVM * jvm_, long id, char ** values, int valuesSize);

static void setMessageBoxModal(JavaVM * jvm_, long id, bool status);

static void setMessageBoxIcon(JavaVM * jvm_, long id, char * name);

static bool isToolbarVisible(JavaVM * jvm_, long figNum);

static void setToolbarVisible(JavaVM * jvm_, long figNum, bool status);

static void setEventHandler(JavaVM * jvm_, long figNum, char * command);

static void setEventHandlerEnabled(JavaVM * jvm_, long figNum, bool status);

static long newWaitBar(JavaVM * jvm_);

static void setWaitBarMessage(JavaVM * jvm_, long id, char ** message, int messageSize);

static void setWaitBarValue(JavaVM * jvm_, long id, long value);

static void destroyWaitBar(JavaVM * jvm_, long objID);

static void setWaitBarIndeterminateMode(JavaVM * jvm_, long objID, bool status);

static void launchHelpBrowser(JavaVM * jvm_, char ** helps, int helpsSize, char * language);

static void searchKeyword(JavaVM * jvm_, char ** helps, int helpsSize, char * keyword, char * language, bool fullText);

static void saveMainWindowSettings(JavaVM * jvm_);

static long newExportFileChooser(JavaVM * jvm_, long figureId);

static long newFontChooser(JavaVM * jvm_);

static void fontChooserDisplayAndWait(JavaVM * jvm_, long objID);

static void setFontChooserFontName(JavaVM * jvm_, long objID, char * fontName);

static void setFontChooserFontSize(JavaVM * jvm_, long objID, long fontSize);

static void setFontChooserBold(JavaVM * jvm_, long objID, bool bold);

static void setFontChooserItalic(JavaVM * jvm_, long objID, bool italic);

static char * getFontChooserFontName(JavaVM * jvm_, long objID);

static long getFontChooserFontSize(JavaVM * jvm_, long objID);

static bool getFontChooserBold(JavaVM * jvm_, long objID);

static bool getFontChooserItalic(JavaVM * jvm_, long objID);

static long newColorChooser(JavaVM * jvm_);

static void colorChooserDisplayAndWait(JavaVM * jvm_, long objID);

static void setColorChooserDefaultColor(JavaVM * jvm_, long objID, long * rgb, int rgbSize);

static long * getColorChooserSelectedColor(JavaVM * jvm_, long objID);

static void setWidgetVisible(JavaVM * jvm_, long objID, bool status);

static void setFrameVisible(JavaVM * jvm_, long objID, bool status);

static bool isWidgetVisible(JavaVM * jvm_, long objID);

static bool isFrameVisible(JavaVM * jvm_, long objID);

static char * getClipboardContents(JavaVM * jvm_);

static void pasteClipboardIntoConsole(JavaVM * jvm_);

static void copyConsoleSelection(JavaVM * jvm_);

static void emptyClipboard(JavaVM * jvm_);

static void setClipboardContents(JavaVM * jvm_, char * text);

static void copyFigureToClipBoard(JavaVM * jvm_, long figID);

static long getScreenResolution(JavaVM * jvm_);

static double getScreenWidth(JavaVM * jvm_);

static double getScreenHeight(JavaVM * jvm_);

static long getScreenDepth(JavaVM * jvm_);

static void printFigure(JavaVM * jvm_, long figID);

static void requestWidgetFocus(JavaVM * jvm_, long objID);

static void requestFrameFocus(JavaVM * jvm_, long objID);


                        /**
                        * Get class name to use for static methods
                        * @return class name to use for static methods
                        */
                        
                static const std::string className()
                {
                return "org/scilab/modules/gui/bridge/CallScilabBridge";
                }
                
};


}
#endif
