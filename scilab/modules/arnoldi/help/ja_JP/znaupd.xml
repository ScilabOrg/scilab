<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:ns5="http://www.w3.org/1999/xhtml" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:id="znaupd" xml:lang="ja">
    <refnamediv>
        <refname>znaupd</refname>
        <refpurpose>
            暗黙のうちに再開されるArnoldi反復へのインターフェイスで,
            エルミート準正定実行列Bにより定義される準内積に関する
            複素線形演算子 OP の小数の固有値/ベクトルの組を近似的に計算します.
            <emphasis role="bold">
                この関数は廃止されました. <link linkend="eigs">eigs</link>を使用してください
            </emphasis>
        </refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Calling Sequence</title>
        <synopsis>[IDO, RESID, V, IPARAM, IPNTR, WORKD, WORKL, RWORK, INFO] = znaupd(ID0, BMAT, N, WHICH, NEV, TOL, RESID, NCV, V, IPARAM, IPNTR, WORKD, WORKL, RWORK, INFO)</synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>Arguments</title>
        <variablelist>
            <varlistentry>
                <term>IDO</term>
                <listitem>
                    <para>Integer. (INPUT/OUTPUT) </para>
                    <para>
                        Reverse communication flag. IDO must be zero on the first call
                        to znaupd. IDO will be set internally to indicate the type of
                        operation to be performed. Control is then given back to the calling
                        routine which has the responsibility to carry out the requested
                        operation and call znaupd with the result.
                    </para>
                    <para>
                        The operand is given in WORKD(IPNTR(1)), the result must be
                        put in WORKD(IPNTR(2)).
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                IDO = 0: first call to the reverse communication interface
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                IDO = -1: compute Y = OP * X where IPNTR(1) is the pointer
                                into WORKD for X, IPNTR(2) is the pointer into WORKD for Y.
                            </para>
                            <para>
                                This is for the initialization phase to force the starting
                                vector into the range of OP.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                IDO = 1: compute Y = OP * X where IPNTR(1) is the pointer
                                into WORKD for X, IPNTR(2) is the pointer into WORKD for Y.
                            </para>
                            <para>
                                In mode 3, the vector B * X is already available in
                                WORKD(ipntr(3)). It does not need to be recomputed in forming OP
                                * X.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                IDO = 2: compute Y = M * X where IPNTR(1) is the pointer
                                into WORKD for X, IPNTR(2) is the pointer into WORKD for
                                Y.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                IDO = 3: compute and return the shifts in the first NP
                                locations of WORKL.
                            </para>
                        </listitem>
                        <listitem>
                            <para>IDO = 99: done </para>
                        </listitem>
                    </itemizedlist>
                    <para>
                        After the initialization phase, when the routine is used in
                        the "shift-and-invert" mode, the vector M * X is already available
                        and does not need to be recomputed in forming OP*X.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>BMAT</term>
                <listitem>
                    <para>Character. (INPUT) </para>
                    <para>
                        specifies the type of the matrix B that defines the
                        semi-inner product for the operator OP.
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para>'I': standard eigenvalue problem A * x = lambda * x</para>
                        </listitem>
                        <listitem>
                            <para>
                                'G': generalized eigenvalue problem A * x =
                                lambda * M * x
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>N</term>
                <listitem>
                    <para>Integer. (INPUT) </para>
                    <para>Dimension of the eigenproblem.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>WHICH</term>
                <listitem>
                    <para>string of length 2. (INPUT) </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                'LM': want the NEV eigenvalues of largest
                                magnitude.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                'SM': want the NEV eigenvalues of smallest
                                magnitude.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                'LR': want the NEV eigenvalues of largest real
                                part.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                'SR': want the NEV eigenvalues of smallest real part.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                'LI': want the NEV eigenvalues of largest imaginary
                                part.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                'SI': want the NEV eigenvalues of smallest imaginary
                                part.
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>NEV</term>
                <listitem>
                    <para>Integer. (INPUT) </para>
                    <para>
                        Number of eigenvalues of OP to be computed. 0 &lt; NEV &lt;
                        N - 1.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>TOL</term>
                <listitem>
                    <para>Double precision scalar. (INPUT) </para>
                    <para>
                        Stopping criteria: the relative accuracy of the Ritz value is
                        considered acceptable if BOUNDS(I) .LE. TOL * ABS(RITZ(I)) where
                        ABS(RITZ(I)) is the magnitude when RITZ(I) is complex. DEFAULT =
                        dlamch('EPS') (machine precision as computed by the LAPACK auxiliary
                        subroutine dlamch).
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>RESID</term>
                <listitem>
                    <para>Complex*16 array of length N. (INPUT/OUTPUT) </para>
                    <para>
                        On INPUT: If INFO .EQ. 0, a random initial residual vector is
                        used. If INFO .NE. 0, RESID contains the initial residual vector,
                        possibly from a previous run.
                    </para>
                    <para>On OUTPUT: RESID contains the final residual vector.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>NCV</term>
                <listitem>
                    <para>Integer. (INPUT) </para>
                    <para>
                        Number of columns of the matrix V. NCV must satisfy the two
                        inequalities 2 &lt;= NCV - NEV and NCV &lt;= N.
                    </para>
                    <para>
                        This will indicate how many Arnoldi vectors are generated at
                        each iteration. After the startup phase in which NEV Arnoldi vectors
                        are generated, the algorithm generates approximately NCV - NEV Arnoldi
                        vectors at each subsequent update iteration. Most of the cost in
                        generating each Arnoldi vector is in the matrix-vector operation
                        OP * x. (See remark 4 below.)
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>V</term>
                <listitem>
                    <para>Complex*16 array N by NCV. (OUTPUT) </para>
                    <para>Contains the final set of Arnoldi basis vectors.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>IPARAM</term>
                <listitem>
                    <para>Integer array of length 11. (INPUT/OUTPUT) </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                IPARAM(1) = ISHIFT: method for selecting the implicit
                                shifts. The shifts selected at each iteration are used to filter
                                out the components of the unwanted eigenvector.
                            </para>
                            <itemizedlist>
                                <listitem>
                                    <para>
                                        ISHIFT = 0: the shifts are to be provided by the user
                                        via reverse communication. The NCV eigenvalues of the
                                        Hessenberg matrix H are returned in the part of WORKL array
                                        corresponding to RITZ.
                                    </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        ISHIFT = 1: exact shifts with respect to the current
                                        Hessenberg matrix H. This is equivalent to restarting the
                                        iteration from the beginning after updating the starting
                                        vector with a linear combination of Ritz vectors associated
                                        with the "wanted" eigenvalues.
                                    </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        ISHIFT = 2: other choice of internal shift to be
                                        defined.
                                    </para>
                                </listitem>
                            </itemizedlist>
                        </listitem>
                        <listitem>
                            <para>IPARAM(2) = No longer referenced</para>
                        </listitem>
                        <listitem>
                            <para>IPARAM(3) = MXITER </para>
                            <para>
                                On INPUT: maximum number of Arnoldi update iterations
                                allowed.
                            </para>
                            <para>
                                On OUTPUT: actual number of Arnoldi update iterations
                                taken.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                IPARAM(4) = NB: blocksize to be used in the recurrence.
                                The code currently works only for NB = 1.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                IPARAM(5) = NCONV: number of "converged" Ritz values. This
                                represents the number of Ritz values that satisfy the
                                convergence criterion.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                IPARAM(6) = IUPD No longer referenced. Implicit restarting
                                is ALWAYS used.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                IPARAM(7) = MODE On INPUT determines what type of
                                eigenproblem is being solved. Must be 1,2,3; See under
                                Description of znaupd for the four modes available.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                IPARAM(8) = NP When ido = 3 and the user provides shifts
                                through reverse communication (IPARAM(1)=0), _naupd returns NP,
                                the number of shifts the user is to provide. 0 &lt; NP &lt;
                                NCV-NEV.
                            </para>
                        </listitem>
                        <listitem>
                            <para>IPARAM(9) = NUMOP, </para>
                            <para>IPARAM(10) = NUMOPB, </para>
                            <para>
                                IPARAM(11) = NUMREO, OUTPUT: NUMOP = total number of OP*x
                                operations, NUMOPB = total number of B*x operations if BMAT='G',
                                NUMREO = total number of steps of re-orthogonalization.
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>IPNTR</term>
                <listitem>
                    <para>Integer array of length 14. (OUTPUT) </para>
                    <para>
                        Pointer to mark the starting locations in the WORKD and WORKL
                        arrays for matrices/vectors used by the Arnoldi iteration.
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                IPNTR(1): pointer to the current operand vector X in
                                WORKD.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                IPNTR(2): pointer to the current result vector Y in
                                WORKD.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                IPNTR(3): pointer to the vector B * X in WORKD when used
                                in the shift-and-invert mode.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                IPNTR(4): pointer to the next available location in WORKL
                                that is untouched by the program.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                IPNTR(5): pointer to the NCV by NCV upper Hessenberg
                                matrix H in WORKL.
                            </para>
                        </listitem>
                        <listitem>
                            <para>IPNTR(6): pointer to the ritz value array RITZ </para>
                        </listitem>
                        <listitem>
                            <para>
                                IPNTR(7): pointer to the (projected) ritz vector array Q
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                IPNTR(8): pointer to the error BOUNDS array in WORKL.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                IPNTR(14): pointer to the NP shifts in WORKL. See Remark 5
                                below.
                            </para>
                        </listitem>
                    </itemizedlist>
                    <para>
                        Note: IPNTR(9:13) is only referenced by zneupd. See Remark 2
                        below.
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                IPNTR(9): pointer to the NCV RITZ values of the original
                                system.
                            </para>
                        </listitem>
                        <listitem>
                            <para>IPNTR(10): Not Used </para>
                        </listitem>
                        <listitem>
                            <para>
                                IPNTR(11): pointer to the NCV corresponding error
                                bounds.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                IPNTR(12): pointer to the NCV by NCV upper triangular
                                Schur matrix for H.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                IPNTR(13): pointer to the NCV by NCV matrix of
                                eigenvectors of the upper Hessenberg matrix H. Only referenced
                                by zneupd if RVEC = 1 See Remark 2 below.
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>WORKD</term>
                <listitem>
                    <para>
                        Complex*16 work array of length 3 * N. (REVERSE COMMUNICATION)
                    </para>
                    <para>
                        Distributed array to be used in the basic Arnoldi iteration
                        for reverse communication.
                    </para>
                    <para>
                        The user should not use WORKD as temporary workspace during
                        the iteration !!!!!!!!!!
                    </para>
                    <para>See Data Distribution Note below.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>WORKL</term>
                <listitem>
                    <para>
                        Complex*16 work array of length 3 * NCV ** 2 + 5 * NCV. (OUTPUT/WORKSPACE)
                    </para>
                    <para>
                        Private (replicated) array on each PE or array allocated on
                        the front end. See Data Distribution Note below.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>RWORK</term>
                <listitem>
                    <para>
                        Double precision work array of length NCV (WORKSPACE) Private
                        (replicated) array on each PE or array allocated on the front
                        end.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>INFO</term>
                <listitem>
                    <para>Integer. (INPUT/OUTPUT) </para>
                    <para>
                        If INFO == 0, a randomly initial residual vector is used.
                    </para>
                    <para>
                        If INFO ~= 0, RESID contains the initial residual vector,
                        possibly from a previous run.
                    </para>
                    <para>Error flag on output.</para>
                    <itemizedlist>
                        <listitem>
                            <para>0: Normal exit.</para>
                        </listitem>
                        <listitem>
                            <para>
                                1: Maximum number of iterations taken. All possible
                                eigenvalues of OP has been found. IPARAM(5) returns the number
                                of wanted converged Ritz values.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                2: No longer an informational error. Deprecated starting
                                with release 2 of ARPACK.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                3: No shifts could be applied during a cycle of the
                                Implicitly restarted Arnoldi iteration. One possibility is to
                                increase the size of NCV relative to NEV. See remark 4
                                below.
                            </para>
                        </listitem>
                        <listitem>
                            <para>-1: N must be positive.</para>
                        </listitem>
                        <listitem>
                            <para>-2: NEV must be positive.</para>
                        </listitem>
                        <listitem>
                            <para>-3: NCV-NEV &gt;= 1 and less than or equal to N.</para>
                        </listitem>
                        <listitem>
                            <para>
                                -4: The maximum number of Arnoldi update iteration must be
                                greater than zero.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                -5: WHICH must be one of 'LM', 'SM', 'LR', 'SR', 'LI',
                                'SI'.
                            </para>
                        </listitem>
                        <listitem>
                            <para>-6: BMAT must be one of 'I' or 'G'.</para>
                        </listitem>
                        <listitem>
                            <para>-7: Length of private work array is not sufficient.</para>
                        </listitem>
                        <listitem>
                            <para>
                                -8: Error return from LAPACK eigenvalue
                                calculation.
                            </para>
                        </listitem>
                        <listitem>
                            <para>-9: Starting vector is zero.</para>
                        </listitem>
                        <listitem>
                            <para>-10: IPARAM(7) must be 1, 2, 3.</para>
                        </listitem>
                        <listitem>
                            <para>-11: IPARAM(7) = 1 and BMAT = 'G' are incompatible.</para>
                        </listitem>
                        <listitem>
                            <para>-12: IPARAM(1) must be equal to 0 or 1.</para>
                        </listitem>
                        <listitem>
                            <para>
                                -9999: Could not build an Arnoldi factorization. User
                                input error highly likely. Please check actual array dimensions
                                and layout. IPARAM(5) returns the size of the current Arnoldi
                                factorization.
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Description</title>
        <para>
            Reverse communication interface for the Implicitly Restarted Arnoldi
            iteration. This is intended to be used to find a few eigenpairs of a
            complex linear operator OP with respect to a semi-inner product defined by
            a hermitian positive semi-definite real matrix B. B may be the identity
            matrix.
        </para>
        <para>
            NOTE: if both OP and B are real, then dsaupd or dnaupd should be
            used.
        </para>
        <para>
            The computed approximate eigenvalues are called Ritz values and the
            corresponding approximate eigenvectors are called Ritz vectors. znaupd is
            usually called iteratively to solve one of the following problems:
        </para>
        <itemizedlist>
            <listitem>
                <para>Mode 1: A * x = lambda * x. </para>
                <para>===&gt; OP = A and B = I.</para>
            </listitem>
            <listitem>
                <para>Mode 2: A * x = lambda * M * x, M hermitian positive definite </para>
                <para>===&gt; OP = inv[M] * A and B = M. </para>
                <para>===&gt; (If M can be factored see remark 3 below) </para>
            </listitem>
            <listitem>
                <para>Mode 3: A * x = lambda * M * x, M hermitian semi-definite </para>
                <para>===&gt; OP = inv[A - sigma * M] * M and B = M. </para>
                <para>
                    ===&gt; shift-and-invert mode If OP * x = amu * x, then lambda =
                    sigma + 1/amu.
                </para>
            </listitem>
        </itemizedlist>
        <para>
            NOTE: The action of w &lt;- inv[A - sigma * M] * v or w &lt;- inv[M] * v
            should be accomplished either by a direct method using a sparse matrix
            factorization and solving
        </para>
        <para>[A - sigma * M] * w = v or M * w = v, </para>
        <para>
            or through an iterative method for solving these systems. If an
            iterative method is used, the convergence test must be more stringent than
            the accuracy requirements for the eigenvalue approximations.
        </para>
    </refsection>
    <refsection>
        <title>Remarks</title>
        <orderedlist>
            <listitem>
                <para>
                    The computed Ritz values are approximate eigenvalues of OP. The
                    selection of WHICH should be made with this in mind when using Mode =
                    3. When operating in Mode = 3 setting WHICH = 'LM' will compute the
                    NEV eigenvalues of the original problem that are closest to the shift
                    SIGMA . After convergence, approximate eigenvalues of the original
                    problem may be obtained with the ARPACK subroutine zneupd.
                </para>
            </listitem>
            <listitem>
                <para>
                    If a basis for the invariant subspace corresponding to the
                    converged Ritz values is needed, the user must call zneupd immediately
                    following completion of znaupd. This is new starting with release 2 of
                    ARPACK.
                </para>
            </listitem>
            <listitem>
                <para>
                    If M can be factored into a Cholesky factorization M = LL` then
                    Mode = 2 should not be selected. Instead one should use Mode = 1 with
                    OP = inv(L) * A * inv(L`). Appropriate triangular linear systems should be
                    solved with L and L` rather than computing inverses. After
                    convergence, an approximate eigenvector z of the original problem is
                    recovered by solving L`z = x where x is a Ritz vector of OP.
                </para>
            </listitem>
            <listitem>
                <para>
                    At present there is no a-priori analysis to guide the selection
                    of NCV relative to NEV. The only formal requirement is that NCV &gt;
                    NEV + 1. However, it is recommended that NCV .ge. 2 * NEV. If many
                    problems of the same type are to be solved, one should experiment with
                    increasing NCV while keeping NEV fixed for a given test problem. This
                    will usually decrease the required number of OP*x operations but it
                    also increases the work and storage required to maintain the
                    orthogonal basis vectors. The optimal "cross-over" with respect to CPU
                    time is problem dependent and must be determined empirically. See
                    Chapter 8 of Reference 2 for further information.
                </para>
            </listitem>
            <listitem>
                <para>
                    When IPARAM(1) = 0, and IDO = 3, the user needs to provide the
                    NP = IPARAM(8) complex shifts in locations
                </para>
                <para>
                    WORKL(IPNTR(14)), WORKL(IPNTR(14)+1), ... , WORKL(IPNTR(14)+NP).
                </para>
                <para>
                    Eigenvalues of the current upper Hessenberg matrix are located
                    in WORKL(IPNTR(6)) through WORKL(IPNTR(6)+NCV-1). They are ordered
                    according to the order defined by WHICH. The associated Ritz estimates
                    are located in
                </para>
                <para>
                    WORKL(IPNTR(8)), WORKL(IPNTR(8)+1), ... ,
                    WORKL(IPNTR(8)+NCV-1).
                </para>
            </listitem>
        </orderedlist>
    </refsection>
    <refsection>
        <title>Example</title>
        <programlisting role="example">
            <![CDATA[
// The following sets dimensions for this problem.
nx    = 10;
nev   = 3;
ncv   = 6;
bmat  = 'I';
which = 'LM';
// Local Arrays
iparam  = zeros(11, 1);
ipntr   = zeros(14, 1);
_select = zeros(ncv, 1);
d       = zeros(nev + 1, 1) + 0 * %i;
z       = zeros(nx, nev) + 0* %i;
resid   = zeros(nx, 1) + 0 * %i;
v       = zeros(nx, ncv) + 0 * %i;
workd   = zeros(3 * nx, 1) + 0 * %i;
workev  = zeros(2 * ncv, 1) + 0 * %i;
rwork   = zeros(ncv, 1);
workl   = zeros(3 * ncv * ncv + 5 *ncv, 1) + 0 * %i;
// Build the complex test matrix
A            = diag(10 * ones(nx,1) + %i * ones(nx,1));
A(1:$-1,2:$) = A(1:$-1,2:$) + diag(6 * ones(nx - 1,1));
A(2:$,1:$-1) = A(2:$,1:$-1) + diag(-6 * ones(nx - 1,1));
tol    = 0;
ido    = 0;
ishfts = 1;
maxitr = 300;
mode1  = 1;
iparam(1) = ishfts;
iparam(3) = maxitr;
iparam(7) = mode1;
sigma = complex(0);
info_znaupd = 0;
// M A I N   L O O P (Reverse communication)
while(ido <> 99)
  // Repeatedly call the routine ZNAUPD and take actions indicated by parameter IDO until
  // either convergence is indicated or maxitr has been exceeded.
  [ido, resid, v, iparam, ipntr, workd, workl, rwork, info_znaupd] = znaupd(ido, bmat, nx, which, nev, tol, resid, ncv, v, iparam, ipntr, workd, workl, rwork, info_znaupd);
  if(info_znaupd < 0)
    printf('\nError with znaupd, info = %d\n', info_znaupd);
    printf('Check the documentation of znaupd\n\n');
  end
  if(ido == -1 | ido == 1)
    // Perform matrix vector multiplication
    workd(ipntr(2):ipntr(2) + nx - 1) = A * workd(ipntr(1):ipntr(1) + nx - 1);
  end
end
// Post-Process using ZNEUPD.
rvec    = 1;
howmany = 'A';
info_zneupd = 0;
[d, z, resid, iparam, ipntr, workd, workl, rwork, info_zneupd] = zneupd(rvec, howmany, _select, d, z, sigma, workev, bmat, nx, which, nev, tol, resid, ncv, v, ...
                                                                    iparam, ipntr, workd, workl, rwork, info_zneupd);
if(info_zneupd < 0)
  printf('\nError with zneupd, info = %d\n', info_zneupd);
  printf('Check the documentation of zneupd.\n\n');
end
// Done with program znsimp.
printf('\nZNSIMP\n');
printf('======\n');
printf('\n');
printf('Size of the matrix is %d\n', nx);
printf('The number of Ritz values requested is %d\n', nev);
printf('The number of Arnoldi vectors generated (NCV) is %d\n', ncv);
printf('What portion of the spectrum: %s\n', which);
printf('The number of Implicit Arnoldi update iterations taken is %d\n', iparam(3));
printf('The number of OP*x is %d\n', iparam(9));
printf('The convergence criterion is %d\n', tol);
]]>
        </programlisting>
    </refsection>
    <refsection role="see also">
        <title>See Also</title>
        <simplelist type="inline">
            <member>
                <link linkend="dnaupd">dnaupd</link>
            </member>
            <member>
                <link linkend="dnaupd">dneupd</link>
            </member>
            <member>
                <link linkend="dnaupd">zneupd</link>
            </member>
        </simplelist>
    </refsection>
    <refsection>
        <title>Bibliography</title>
        <para>
            1. D.C. Sorensen, "Implicit Application of Polynomial Filters in a
            k-Step Arnoldi Method", SIAM J. Matr. Anal. Apps., 13 (1992), pp
            357-385.
        </para>
        <para>
            2. R.B. Lehoucq, "Analysis and Implementation of an Implicitly
            Restarted Arnoldi Iteration", Rice University Technical Report TR95-13,
            Department of Computational and Applied Mathematics.
        </para>
        <para>
            3. B.N. Parlett and Y. Saad, "Complex Shift and Invert Strategies
            for Real Matrices", Linear Algebra and its Applications, vol 88/89, pp
            575-595, (1987).
        </para>
    </refsection>
    <refsection>
        <title>Used Functions</title>
        <para>Based on ARPACK routine znaupd</para>
    </refsection>
    <refsection>
        <title>履歴</title>
        <revhistory>
            <revision>
                <revnumber>5.4.0</revnumber>
                <revremark>
                    関数は廃止され,<link linkend="eigs">eigs</link>に代替されました.
                </revremark>
            </revision>
        </revhistory>
    </refsection>
</refentry>
