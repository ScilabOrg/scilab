<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:ns5="http://www.w3.org/1999/xhtml" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:id="dsaupd" xml:lang="ja">
    <refnamediv>
        <refname>dsaupd</refname>
        <refpurpose>
            暗黙のうちに再開されるArnoldi反復へのインターフェイスで,
            実対称線形演算子の小数の固有値/ベクトルの組を近似的に計算します.
            <emphasis role="bold">
                この関数は廃止されました. <link linkend="eigs">eigs</link>を使用してください
            </emphasis>
        </refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Calling Sequence</title>
        <synopsis>[IDO, RESID, V, IPARAM, IPNTR, WORKD, WORKL, INFO] = dsaupd(ID0, BMAT, N, WHICH, NEV, TOL, RESID, NCV, V, IPARAM, IPNTR, WORKD, WORKL, INFO)</synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>Arguments</title>
        <variablelist>
            <varlistentry>
                <term>ID0</term>
                <listitem>
                    <para>Integer. (INPUT/OUTPUT) </para>
                    <para>
                        Reverse communication flag. IDO must be zero on the first call
                        to dsaupd . IDO will be set internally to indicate the type of
                        operation to be performed. Control is then given back to the calling
                        routine which has the responsibility to carry out the requested
                        operation and call dsaupd with the result.
                    </para>
                    <para>
                        The operand is given in WORKD(IPNTR(1)), the result must be put
                        in WORKD(IPNTR(2)). (If Mode = 2 see remark 5 below)
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                IDO = 0: first call to the reverse communication
                                interface.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                IDO = -1: compute Y = OP * X where IPNTR(1) is the pointer
                                into WORKD for X, IPNTR(2) is the pointer into WORKD for Y. This
                                is for the initialization phase to force the starting vector
                                into the range of OP.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                IDO = 1: compute Y = OP * X where IPNTR(1) is the pointer
                                into WORKD for X, IPNTR(2) is the pointer into WORKD for Y. In
                                mode 3, 4 and 5, the vector B * X is already available in
                                WORKD(ipntr(3)). It does not need to be recomputed in forming OP
                                * X.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                IDO = 2: compute Y = B * X where IPNTR(1) is the pointer
                                into WORKD for X, IPNTR(2) is the pointer into WORKD for
                                Y.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                IDO = 3: compute the IPARAM(8) shifts where IPNTR(11) is
                                the pointer into WORKL for placing the shifts. See remark 6
                                below.
                            </para>
                        </listitem>
                        <listitem>
                            <para>IDO = 99: done</para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>BMAT</term>
                <listitem>
                    <para>Character. (INPUT)</para>
                    <para>
                        Specifies the type of the matrix B that defines the semi-inner
                        product for the operator OP.
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para>'I': standard eigenvalue problem A * x = lambda * x</para>
                        </listitem>
                        <listitem>
                            <para>
                                'G': generalized eigenvalue problem A * x =
                                lambda * B * x
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>N</term>
                <listitem>
                    <para>Integer. (INPUT)</para>
                    <para>Dimension of the eigenproblem.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>WHICH</term>
                <listitem>
                    <para>String of length 2. (INPUT)</para>
                    <para>Specifies which of the Ritz values of OP to compute.</para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                'LA' - compute the NEV largest (algebraic)
                                eigenvalues.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                'SA' - compute the NEV smallest (algebraic)
                                eigenvalues.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                'LM' - compute the NEV largest (in magnitude)
                                eigenvalues.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                'SM' - compute the NEV smallest (in magnitude)
                                eigenvalues.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                'BE' - compute NEV eigenvalues, half from each end of the
                                spectrum. When NEV is odd, compute one more from the high end
                                than from the low end. (see remark 1 below)
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>NEV</term>
                <listitem>
                    <para>Integer. (INPUT)</para>
                    <para>
                        Number of eigenvalues of OP to be computed. 0 &lt; NEV &lt;
                        N.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>TOL</term>
                <listitem>
                    <para>scalar. (INPUT)</para>
                    <para>
                        Stopping criterion: the relative accuracy of the Ritz value is
                        considered acceptable if BOUNDS(I) &lt;= TOL * ABS(RITZ(I)). If TOL
                        &lt;= 0. is passed the machine precision is set.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>RESID</term>
                <listitem>
                    <para>Array of length N. (INPUT/OUTPUT)</para>
                    <para>
                        On INPUT: If INFO = 0, a random initial residual vector is
                        used, else RESID contains the initial residual vector, possibly from
                        a previous run.
                    </para>
                    <para>On OUTPUT: RESID contains the final residual vector.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>NCV</term>
                <listitem>
                    <para>Integer. (INPUT)</para>
                    <para>
                        Number of columns of the matrix V (less than or equal to N).
                    </para>
                    <para>
                        This will indicate how many Lanczos vectors are generated at
                        each iteration. After the startup phase in which NEV Lanczos vectors
                        are generated, the algorithm generates NCV - NEV Lanczos vectors at
                        each subsequent update iteration. Most of the cost in generating
                        each Lanczos vector is in the matrix-vector product OP * x. (See
                        remark 4 below).
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>V</term>
                <listitem>
                    <para>N by NCV array. (OUTPUT) </para>
                    <para>The NCV columns of V contain the Lanczos basis vectors.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>IPARAM</term>
                <listitem>
                    <para>array of length 11. (INPUT/OUTPUT)</para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                IPARAM(1) = ISHIFT: method for selecting the implicit
                                shifts. The shifts selected at each iteration are used to
                                restart the Arnoldi iteration in an implicit fashion.
                            </para>
                            <itemizedlist>
                                <listitem>
                                    <para>
                                        ISHIFT = 0: the shifts are provided by the user via
                                        reverse communication. The NCV eigenvalues of the current
                                        tridiagonal matrix T are returned in the part of WORKL array
                                        corresponding to RITZ. See remark 6 below.
                                    </para>
                                </listitem>
                                <listitem>
                                    <para>
                                        ISHIFT = 1: exact shifts with respect to the reduced
                                        tridiagonal matrix T. This is equivalent to restarting the
                                        iteration with a starting vector that is a linear
                                        combination of Ritz vectors associated with the "wanted"
                                        Ritz values.
                                    </para>
                                </listitem>
                            </itemizedlist>
                        </listitem>
                        <listitem>
                            <para>
                                IPARAM(2) = LEVEC. No longer referenced. See remark 2
                                below.
                            </para>
                        </listitem>
                        <listitem>
                            <para>IPARAM(3) = MXITER </para>
                            <para>
                                On INPUT: maximum number of Arnoldi update iterations
                                allowed.
                            </para>
                            <para>
                                On OUTPUT: actual number of Arnoldi update iterations
                                taken.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                IPARAM(4) = NB: blocksize to be used in the recurrence.
                                The code currently works only for NB = 1.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                IPARAM(5) = NCONV: number of "converged" Ritz values. This
                                represents the number of Ritz values that satisfy the
                                convergence criterion.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                IPARAM(6) = IUPD No longer referenced. Implicit restarting
                                is ALWAYS used.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                IPARAM(7) = MODE On INPUT determines what type of
                                eigenproblem is being solved. Must be 1,2,3,4,5; See under
                                Description of dsaupd for the five modes available.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                IPARAM(8) = NP When ido = 3 and the user provides shifts
                                through reverse communication (IPARAM(1)=0), dsaupd returns NP,
                                the number of shifts the user is to provide. 0 &lt; NP &lt;=
                                NCV-NEV. See Remark 6 below.
                            </para>
                        </listitem>
                        <listitem>
                            <para>IPARAM(9) = NUMOP, </para>
                            <para>IPARAM(10) = NUMOPB, </para>
                            <para>
                                IPARAM(11) = NUMREO, OUTPUT: NUMOP = total number of OP*x
                                operations, NUMOPB = total number of B*x operations if BMAT='G',
                                NUMREO = total number of steps of re-orthogonalization.
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>IPNTR</term>
                <listitem>
                    <para>
                        array of length 11. (OUTPUT)
                    </para>
                    <para>
                        Pointer to mark the starting locations in
                        the WORKD and WORKL arrays for matrices/vectors used by the Lanczos
                        iteration.
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                IPNTR(1): pointer to the current operand vector X in
                                WORKD.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                IPNTR(2): pointer to the current result vector Y in
                                WORKD.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                IPNTR(3): pointer to the vector B * X in WORKD when used
                                in the shift-and-invert mode.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                IPNTR(4): pointer to the next available location in WORKL
                                that is untouched by the program.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                IPNTR(5): pointer to the NCV by 2 tridiagonal matrix T in
                                WORKL.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                IPNTR(6): pointer to the NCV RITZ values array in
                                WORKL.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                IPNTR(7): pointer to the Ritz estimates in array WORKL
                                associated with the Ritz values located in RITZ in WORKL.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                IPNTR(11): pointer to the NP shifts in WORKL. See Remark 6
                                below.
                            </para>
                        </listitem>
                    </itemizedlist>
                    <para>
                        Note: IPNTR(8:10) is only referenced by dseupd . See Remark
                        2.
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                IPNTR(8): pointer to the NCV RITZ values of the original
                                system.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                IPNTR(9): pointer to the NCV corresponding error
                                bounds.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                IPNTR(10): pointer to the NCV by NCV matrix of
                                eigenvectors of the tridiagonal matrix T. Only referenced by
                                dseupd if RVEC = 1. See Remarks
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>WORKD</term>
                <listitem>
                    <para>work array of length 3 * N. (REVERSE COMMUNICATION) </para>
                    <para>
                        Distributed array to be used in the basic Arnoldi iteration
                        for reverse communication. The user should not use WORKD as
                        temporary workspace during the iteration. Upon termination
                        WORKD(1:N) contains B*RESID(1:N). If the Ritz vectors are desired
                        subroutine dseupd uses this output. See Data Distribution Note
                        below.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>WORKL</term>
                <listitem>
                    <para>
                        work array of length at least NCV ** 2 + 8 * NCV.
                        (OUTPUT/WORKSPACE)
                    </para>
                    <para>
                        Private (replicated) array on each PE or array allocated on
                        the front end. See Data Distribution Note below. add here the
                        parameter description.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>INFO</term>
                <listitem>
                    <para>Integer. (INPUT/OUTPUT)</para>
                    <para>
                        If INFO = 0, a randomly initial residual vector is used, else
                        RESID contains the initial residual vector, possibly from a previous
                        run.
                    </para>
                    <para>Error flag on output.</para>
                    <itemizedlist>
                        <listitem>
                            <para>0: Normal exit.</para>
                        </listitem>
                        <listitem>
                            <para>
                                1: Maximum number of iterations taken. All possible
                                eigenvalues of OP has been found. IPARAM(5) returns the number
                                of wanted converged Ritz values.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                2: No longer an informational error. Deprecated starting
                                with release 2 of ARPACK.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                3: No shifts could be applied during a cycle of the
                                Implicitly restarted Arnoldi iteration. One possibility is to
                                increase the size of NCV relative to NEV. See remark 4
                                below.
                            </para>
                        </listitem>
                        <listitem>
                            <para>-1: N must be positive.</para>
                        </listitem>
                        <listitem>
                            <para>-2: NEV must be positive.</para>
                        </listitem>
                        <listitem>
                            <para>
                                -3: NCV must be greater than NEV and less than or equal to
                                N.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                -4: The maximum number of Arnoldi update iterations
                                allowed must be greater than zero.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                -5: WHICH must be one of 'LM', 'SM', 'LA', 'SA' or
                                'BE'.
                            </para>
                        </listitem>
                        <listitem>
                            <para>-6: BMAT must be one of 'I' or 'G'.</para>
                        </listitem>
                        <listitem>
                            <para>
                                -7: Length of private work array WORKL is not
                                sufficient.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                -8: Error return from trid. eigenvalue calculation;
                                Informatinal error from LAPACK routine dsteqr.
                            </para>
                        </listitem>
                        <listitem>
                            <para>-9: Starting vector is zero.</para>
                        </listitem>
                        <listitem>
                            <para>-10: IPARAM(7) must be 1, 2, 3, 4, 5.</para>
                        </listitem>
                        <listitem>
                            <para>-11: IPARAM(7) = 1 and BMAT = 'G' are incompatable.</para>
                        </listitem>
                        <listitem>
                            <para>-12: IPARAM(1) must be equal to 0 or 1.</para>
                        </listitem>
                        <listitem>
                            <para>-13: NEV and WHICH = 'BE' are incompatable.</para>
                        </listitem>
                        <listitem>
                            <para>
                                -9999: Could not build an Arnoldi factorization. IPARAM(5)
                                returns the size of the current Arnoldi factorization. The user
                                is advised to check that enough workspace and array storage has
                                been allocated.
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Description</title>
        <para>
            Reverse communication interface for the Implicitly Restarted Arnoldi
            Iteration. For symmetric problems this reduces to a variant of the Lanczos
            method. This method has been designed to compute approximations to a few
            eigenpairs of a linear operator OP that is real and symmetric with respect
            to a real positive semi-definite symmetric matrix B, i.e.<literal>
                B * OP =
                (OP`) * B
            </literal>
            .
        </para>
        <para>
            Another way to express this condition is <literal>
                &lt; x,OPy &gt; =
                &lt; OPx,y &gt; where &lt;z,w &gt; = z`Bw
            </literal>
            .
        </para>
        <para>
            In the standard eigenproblem B is the identity matrix. ( A` denotes
            transpose of A)
        </para>
        <para>
            The computed approximate eigenvalues are called Ritz values and the
            corresponding approximate eigenvectors are called Ritz vectors.
        </para>
        <para>
            dsaupd is usually called iteratively to solve one of the following
            problems:
        </para>
        <itemizedlist>
            <listitem>
                <para>
                    Mode 1: A * x = lambda * x, A symmetric ===&gt; OP = A and B =
                    I.
                </para>
            </listitem>
            <listitem>
                <para>
                    Mode 2: A * x = lambda * M * x, A symmetric, M symmetric positive
                    definite ===&gt; OP = inv[M] * A and B = M. ===&gt; (If M can be
                    factored see remark 3 below)
                </para>
            </listitem>
            <listitem>
                <para>
                    Mode 3: K * x = lambda * M * x, K symmetric, M symmetric positive
                    semi-definite ===&gt; OP = (inv[K - sigma * M]) * M and B = M. ===&gt;
                    Shift-and-Invert mode
                </para>
            </listitem>
            <listitem>
                <para>
                    Mode 4: K * x = lambda * KG * x, K symmetric positive semi-definite,
                    KG symmetric indefinite ===&gt; OP = (inv[K - sigma * KG]) * K and B = K.
                    ===&gt; Buckling mode
                </para>
            </listitem>
            <listitem>
                <para>
                    Mode 5: A * x = lambda * M * x, A symmetric, M symmetric positive
                    semi-definite ===&gt; OP = inv[A - sigma * M] * [A + sigma * M] and B = M.
                    ===&gt; Cayley transformed mode
                </para>
            </listitem>
        </itemizedlist>
        <para>
            NOTE: The action of w &lt;- inv[A - sigma * M] * v or w &lt;- inv[M] * v
            should be accomplished either by a direct method using a sparse matrix
            factorization and solving <literal>
                [A - sigma * M] * w = v or M * w =
                v
            </literal>
            ,
        </para>
        <para>
            or through an iterative method for solving these systems. If an
            iterative method is used, the convergence test must be more stringent than
            the accuracy requirements for the eigenvalue approximations.
        </para>
    </refsection>
    <refsection>
        <title>Remarks</title>
        <para>
            1. The converged Ritz values are always returned in ascending
            algebraic order. The computed Ritz values are approximate eigenvalues of
            OP. The selection of WHICH should be made with this in mind when Mode =
            3, 4, 5. After convergence, approximate eigenvalues of the original problem
            may be obtained with the ARPACK subroutine dseupd .
        </para>
        <para>
            2. If the Ritz vectors corresponding to the converged Ritz values
            are needed, the user must call dseupd immediately following completion of
            dsaupd . This is new starting with version 2.1 of ARPACK.
        </para>
        <para>
            3. If M can be factored into a Cholesky factorization M = LL` then
            Mode = 2 should not be selected. Instead one should use Mode = 1 with OP =
            inv(L) * A * inv(L`). Appropriate triangular linear systems should be solved
            with L and L` rather than computing inverses. After convergence, an
            approximate eigenvector z of the original problem is recovered by solving
            L`z = x where x is a Ritz vector of OP.
        </para>
        <para>
            4. At present there is no a-priori analysis to guide the selection
            of NCV relative to NEV. The only formal requirement is that NCV &gt; NEV.
            However, it is recommended that NCV &gt;= 2 * NEV. If many problems of the
            same type are to be solved, one should experiment with increasing NCV
            while keeping NEV fixed for a given test problem. This will usually
            decrease the required number of OP * x operations but it also increases the
            work and storage required to maintain the orthogonal basis vectors. The
            optimal "cross-over" with respect to CPU time is problem dependent and
            must be determined empirically.
        </para>
        <para>
            5. If IPARAM(7) = 2 then in the Reverse communication interface the
            user must do the following. When IDO = 1, Y = OP * X is to be computed.
            When IPARAM(7) = 2 OP = inv(B) * A. After computing A * X the user must
            overwrite X with A * X. Y is then the solution to the linear set of
            equations B * Y = A * X.
        </para>
        <para>
            6. When IPARAM(1) = 0, and IDO = 3, the user needs to provide the NP
            = IPARAM(8) shifts in locations: 1 WORKL(IPNTR(11)) 2 WORKL(IPNTR(11) + 1) .
            . . NP WORKL(IPNTR(11) + NP - 1). The eigenvalues of the current tridiagonal
            matrix are located in WORKL(IPNTR(6)) through WORKL(IPNTR(6) + NCV - 1). They
            are in the order defined by WHICH. The associated Ritz estimates are
            located in WORKL(IPNTR(8)), WORKL(IPNTR(8) + 1), ... ,
            WORKL(IPNTR(8) + NCV - 1).
        </para>
    </refsection>
    <refsection>
        <title>Example</title>
        <programlisting role="example">
            <![CDATA[
// The following sets dimensions for this problem.
nx    = 10;
nev   = 3;
ncv   = 6;
bmat  = 'I';
which = 'LM';
// Local Arrays
iparam  = zeros(11, 1);
ipntr   = zeros(14, 1);
_select = zeros(ncv, 1);
d       = zeros(nev, 1);
z       = zeros(nx, nev);
resid   = zeros(nx, 1);
v       = zeros(nx, ncv);
workd   = zeros(3 * nx, 1);
workl   = zeros(ncv * ncv + 8 * ncv, 1);
// Build the symmetric test matrix
A            = diag(10 * ones(nx,1));
A(1:$-1,2:$) = A(1:$-1,2:$) + diag(6 * ones(nx-1,1));
A(2:$,1:$-1) = A(2:$,1:$-1) + diag(6 * ones(nx-1,1));
tol    = 0;
ido    = 0;
ishfts = 1;
maxitr = 300;
mode1  = 1;
iparam(1) = ishfts;
iparam(3) = maxitr;
iparam(7) = mode1;
sigma = 0; // the real part of the shift
info_dsaupd = 0;
// M A I N   L O O P (Reverse communication)
while(ido <> 99)
  // Repeatedly call the routine DSAUPD and take actions indicated by parameter IDO until
  // either convergence is indicated or maxitr has been exceeded.
  [ido, resid, v, iparam, ipntr, workd, workl, info_dsaupd] = dsaupd(ido, bmat, nx, which, nev, tol, resid, ncv, v, iparam, ipntr, workd, workl, info_dsaupd);
  if(info_dsaupd < 0)
    printf('\nError with dsaupd, info = %d\n',info_dsaupd);
    printf('Check the documentation of dsaupd\n\n');
  end
  if(ido == -1 | ido == 1)
    // Perform matrix vector multiplication
    workd(ipntr(2):ipntr(2) + nx - 1) = A * workd(ipntr(1):ipntr(1) + nx - 1);
  end
end
// Post-Process using DSEUPD.
rvec    = 1;
howmany = 'A';
info_dseupd = 0;
[d, z, resid, v, iparam, ipntr, workd, workl, info_dseupd] = dseupd(rvec, howmany, _select, d, z, sigma, bmat, nx, which, nev, tol, resid, ncv, v, ...
                                                                    iparam, ipntr, workd, workl, info_dseupd);
if(info_dseupd < 0)
  printf('\nError with dseupd, info = %d\n', info_dseupd);
  printf('Check the documentation of dseupd.\n\n');
end
// Done with program dssimp.
printf('\nDSSIMP\n');
printf('======\n');
printf('\n');
printf('Size of the matrix is %d\n', nx);
printf('The number of Ritz values requested is %d\n', nev);
printf('The number of Arnoldi vectors generated (NCV) is %d\n', ncv);
printf('What portion of the spectrum: %s\n', which);
printf('The number of Implicit Arnoldi update iterations taken is %d\n', iparam(3));
printf('The number of OP*x is %d\n', iparam(9));
printf('The convergence criterion is %d\n', tol);
]]>
        </programlisting>
    </refsection>
    <refsection role="see also">
        <title>See Also</title>
        <simplelist type="inline">
            <member>
                <link linkend="dnaupd">dnaupd</link>
            </member>
            <member>
                <link linkend="dseupd">dseupd</link>
            </member>
        </simplelist>
    </refsection>
    <refsection>
        <title>Bibliography</title>
        <para>
            1. D.C. Sorensen, "Implicit Application of Polynomial Filters in a
            k-Step Arnoldi Method", SIAM J. Matr. Anal. Apps., 13 (1992), pp
            357-385.
        </para>
        <para>
            2. R.B. Lehoucq, "Analysis and Implementation of an Implicitly
            Restarted Arnoldi Iteration", Rice University Technical Report TR95-13,
            Department of Computational and Applied Mathematics.
        </para>
        <para>
            3. B.N. Parlett and Y. Saad, "Complex Shift and Invert Strategies
            for Real Matrices", Linear Algebra and its Applications, vol 88/89, pp
            575-595, (1987).
        </para>
    </refsection>
    <refsection>
        <title>Used Functions</title>
        <para>Based on ARPACK routine dsaupd</para>
    </refsection>
    <refsection>
        <title>履歴</title>
        <revhistory>
            <revision>
                <revnumber>5.4.0</revnumber>
                <revremark>
                    関数は廃止され,<link linkend="eigs">eigs</link>に代替されました.
                </revremark>
            </revision>
        </revhistory>
    </refsection>
</refentry>
