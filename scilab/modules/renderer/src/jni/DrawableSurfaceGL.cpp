#include "DrawableSurfaceGL.hxx"
/* Generated by GIWS (version 1.3.0) */
/*

Copyright 2007-2008 INRIA
Copyright 2008-2011 DIGITEO

Author : Sylvestre Ledru & others

This is generated code.

This software is a computer program whose purpose is to hide the complexity
of accessing Java objects/methods from C++ code.

This software is governed by the CeCILL-B license under French law and
abiding by the rules of distribution of free software.  You can  use, 
modify and/ or redistribute the software under the terms of the CeCILL-B
license as circulated by CEA, CNRS and INRIA at the following URL
"http://www.cecill.info". 

As a counterpart to the access to the source code and  rights to copy,
modify and redistribute granted by the license, users are provided only
with a limited warranty  and the software's author,  the holder of the
economic rights,  and the successive licensors  have only  limited
liability. 

In this respect, the user's attention is drawn to the risks associated
with loading,  using,  modifying and/or developing or reproducing the
software by the user in light of its specific status of free software,
that may mean  that it is complicated to manipulate,  and  that  also
therefore means  that it is reserved for developers  and  experienced
professionals having in-depth computer knowledge. Users are therefore
encouraged to load and test the software's suitability as regards their
requirements in conditions enabling the security of their systems and/or 
data to be ensured and,  more generally, to use and operate it in the 
same conditions as regards security. 

The fact that you are presently reading this means that you have had
knowledge of the CeCILL-B license and that you accept its terms.
*/

namespace org_scilab_modules_renderer_surfaceDrawing {

// Returns the current env

JNIEnv * DrawableSurfaceGL::getCurrentEnv() {
JNIEnv * curEnv = NULL;
jint res=this->jvm->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
if (res != JNI_OK) {
throw GiwsException::JniException(getCurrentEnv());
}
return curEnv;
}
// Destructor

DrawableSurfaceGL::~DrawableSurfaceGL() {
JNIEnv * curEnv = NULL;
this->jvm->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);

curEnv->DeleteGlobalRef(this->instance);
curEnv->DeleteGlobalRef(this->instanceClass);
}
// Constructors
DrawableSurfaceGL::DrawableSurfaceGL(JavaVM * jvm_) {
jmethodID constructObject = NULL ;
jobject localInstance ;
jclass localClass ;
const std::string construct="<init>";
const std::string param="()V";
jvm=jvm_;

JNIEnv * curEnv = getCurrentEnv();

localClass = curEnv->FindClass( this->className().c_str() ) ;
if (localClass == NULL) {
  throw GiwsException::JniClassNotFoundException(curEnv, this->className());
}

this->instanceClass = static_cast<jclass>(curEnv->NewGlobalRef(localClass));

/* localClass is not needed anymore */
curEnv->DeleteLocalRef(localClass);

if (this->instanceClass == NULL) {
throw GiwsException::JniObjectCreationException(curEnv, this->className());
}


constructObject = curEnv->GetMethodID( this->instanceClass, construct.c_str() , param.c_str() ) ;
if(constructObject == NULL){
throw GiwsException::JniObjectCreationException(curEnv, this->className());
}

localInstance = curEnv->NewObject( this->instanceClass, constructObject ) ;
if(localInstance == NULL){
throw GiwsException::JniObjectCreationException(curEnv, this->className());
}
 
this->instance = curEnv->NewGlobalRef(localInstance) ;
if(this->instance == NULL){
throw GiwsException::JniObjectCreationException(curEnv, this->className());
}
/* localInstance not needed anymore */
curEnv->DeleteLocalRef(localInstance);

                /* Methods ID set to NULL */
voiddisplayID=NULL;
voidinitializeDrawingjintintID=NULL;
voidendDrawingID=NULL;
voidshowjintintID=NULL;
voiddestroyjintintID=NULL;
voidtranslatejdoubledoublejdoubledoublejdoubledoubleID=NULL;
voidendTranslateID=NULL;
voidclipXjdoubledoublejdoubledoubleID=NULL;
voidclipYjdoubledoublejdoubledoubleID=NULL;
voidclipZjdoubledoublejdoubledoubleID=NULL;
voidunClipID=NULL;


}

DrawableSurfaceGL::DrawableSurfaceGL(JavaVM * jvm_, jobject JObj) {
        jvm=jvm_;

        JNIEnv * curEnv = getCurrentEnv();

jclass localClass = curEnv->GetObjectClass(JObj);
        this->instanceClass = static_cast<jclass>(curEnv->NewGlobalRef(localClass));
        curEnv->DeleteLocalRef(localClass);

        if (this->instanceClass == NULL) {
throw GiwsException::JniObjectCreationException(curEnv, this->className());
        }

        this->instance = curEnv->NewGlobalRef(JObj) ;
        if(this->instance == NULL){
throw GiwsException::JniObjectCreationException(curEnv, this->className());
        }
        /* Methods ID set to NULL */
        voiddisplayID=NULL;
voidinitializeDrawingjintintID=NULL;
voidendDrawingID=NULL;
voidshowjintintID=NULL;
voiddestroyjintintID=NULL;
voidtranslatejdoubledoublejdoubledoublejdoubledoubleID=NULL;
voidendTranslateID=NULL;
voidclipXjdoubledoublejdoubledoubleID=NULL;
voidclipYjdoubledoublejdoubledoubleID=NULL;
voidclipZjdoubledoublejdoubledoubleID=NULL;
voidunClipID=NULL;


}

// Generic methods

void DrawableSurfaceGL::synchronize() {
if (getCurrentEnv()->MonitorEnter(instance) != JNI_OK) {
throw GiwsException::JniMonitorException(getCurrentEnv(), "DrawableSurfaceGL");
}
}

void DrawableSurfaceGL::endSynchronize() {
if ( getCurrentEnv()->MonitorExit(instance) != JNI_OK) {
throw GiwsException::JniMonitorException(getCurrentEnv(), "DrawableSurfaceGL");
}
}
// Method(s)

void DrawableSurfaceGL::display (){

JNIEnv * curEnv = getCurrentEnv();

if (voiddisplayID==NULL) { /* Use the cache */
 voiddisplayID = curEnv->GetMethodID(this->instanceClass, "display", "()V" ) ;
if (voiddisplayID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "display");
}
}
                         curEnv->CallVoidMethod( this->instance, voiddisplayID );
                        if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
}

void DrawableSurfaceGL::initializeDrawing (int figureIndex){

JNIEnv * curEnv = getCurrentEnv();

if (voidinitializeDrawingjintintID==NULL) { /* Use the cache */
 voidinitializeDrawingjintintID = curEnv->GetMethodID(this->instanceClass, "initializeDrawing", "(I)V" ) ;
if (voidinitializeDrawingjintintID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "initializeDrawing");
}
}
                         curEnv->CallVoidMethod( this->instance, voidinitializeDrawingjintintID ,figureIndex);
                        if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
}

void DrawableSurfaceGL::endDrawing (){

JNIEnv * curEnv = getCurrentEnv();

if (voidendDrawingID==NULL) { /* Use the cache */
 voidendDrawingID = curEnv->GetMethodID(this->instanceClass, "endDrawing", "()V" ) ;
if (voidendDrawingID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "endDrawing");
}
}
                         curEnv->CallVoidMethod( this->instance, voidendDrawingID );
                        if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
}

void DrawableSurfaceGL::show (int figureIndex){

JNIEnv * curEnv = getCurrentEnv();

if (voidshowjintintID==NULL) { /* Use the cache */
 voidshowjintintID = curEnv->GetMethodID(this->instanceClass, "show", "(I)V" ) ;
if (voidshowjintintID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "show");
}
}
                         curEnv->CallVoidMethod( this->instance, voidshowjintintID ,figureIndex);
                        if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
}

void DrawableSurfaceGL::destroy (int parentFigureIndex){

JNIEnv * curEnv = getCurrentEnv();

if (voiddestroyjintintID==NULL) { /* Use the cache */
 voiddestroyjintintID = curEnv->GetMethodID(this->instanceClass, "destroy", "(I)V" ) ;
if (voiddestroyjintintID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "destroy");
}
}
                         curEnv->CallVoidMethod( this->instance, voiddestroyjintintID ,parentFigureIndex);
                        if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
}

void DrawableSurfaceGL::translate (double tx, double ty, double tz){

JNIEnv * curEnv = getCurrentEnv();

if (voidtranslatejdoubledoublejdoubledoublejdoubledoubleID==NULL) { /* Use the cache */
 voidtranslatejdoubledoublejdoubledoublejdoubledoubleID = curEnv->GetMethodID(this->instanceClass, "translate", "(DDD)V" ) ;
if (voidtranslatejdoubledoublejdoubledoublejdoubledoubleID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "translate");
}
}
                         curEnv->CallVoidMethod( this->instance, voidtranslatejdoubledoublejdoubledoublejdoubledoubleID ,tx, ty, tz);
                        if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
}

void DrawableSurfaceGL::endTranslate (){

JNIEnv * curEnv = getCurrentEnv();

if (voidendTranslateID==NULL) { /* Use the cache */
 voidendTranslateID = curEnv->GetMethodID(this->instanceClass, "endTranslate", "()V" ) ;
if (voidendTranslateID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "endTranslate");
}
}
                         curEnv->CallVoidMethod( this->instance, voidendTranslateID );
                        if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
}

void DrawableSurfaceGL::clipX (double xMin, double xMax){

JNIEnv * curEnv = getCurrentEnv();

if (voidclipXjdoubledoublejdoubledoubleID==NULL) { /* Use the cache */
 voidclipXjdoubledoublejdoubledoubleID = curEnv->GetMethodID(this->instanceClass, "clipX", "(DD)V" ) ;
if (voidclipXjdoubledoublejdoubledoubleID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "clipX");
}
}
                         curEnv->CallVoidMethod( this->instance, voidclipXjdoubledoublejdoubledoubleID ,xMin, xMax);
                        if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
}

void DrawableSurfaceGL::clipY (double yMin, double yMax){

JNIEnv * curEnv = getCurrentEnv();

if (voidclipYjdoubledoublejdoubledoubleID==NULL) { /* Use the cache */
 voidclipYjdoubledoublejdoubledoubleID = curEnv->GetMethodID(this->instanceClass, "clipY", "(DD)V" ) ;
if (voidclipYjdoubledoublejdoubledoubleID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "clipY");
}
}
                         curEnv->CallVoidMethod( this->instance, voidclipYjdoubledoublejdoubledoubleID ,yMin, yMax);
                        if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
}

void DrawableSurfaceGL::clipZ (double zMin, double zMax){

JNIEnv * curEnv = getCurrentEnv();

if (voidclipZjdoubledoublejdoubledoubleID==NULL) { /* Use the cache */
 voidclipZjdoubledoublejdoubledoubleID = curEnv->GetMethodID(this->instanceClass, "clipZ", "(DD)V" ) ;
if (voidclipZjdoubledoublejdoubledoubleID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "clipZ");
}
}
                         curEnv->CallVoidMethod( this->instance, voidclipZjdoubledoublejdoubledoubleID ,zMin, zMax);
                        if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
}

void DrawableSurfaceGL::unClip (){

JNIEnv * curEnv = getCurrentEnv();

if (voidunClipID==NULL) { /* Use the cache */
 voidunClipID = curEnv->GetMethodID(this->instanceClass, "unClip", "()V" ) ;
if (voidunClipID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "unClip");
}
}
                         curEnv->CallVoidMethod( this->instance, voidunClipID );
                        if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
}

}
