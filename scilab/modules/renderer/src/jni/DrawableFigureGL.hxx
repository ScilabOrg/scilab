/* Generated by GIWS (version 2.0.0) with command:
giws --disable-return-size-array --output-dir src/jni/ --throws-exception-on-error --description-file src/jni/DrawableFigureGL.giws.xml
*/
/*

Copyright 2007-2008 INRIA
Copyright 2008-2011 DIGITEO
Copyright 2011-2012 Scilab Enterprises

Author : Sylvestre Ledru & others

This is generated code.

This software is a computer program whose purpose is to hide the complexity
of accessing Java objects/methods from C++ code.

This software is governed by the CeCILL-B license under French law and
abiding by the rules of distribution of free software.  You can  use,
modify and/ or redistribute the software under the terms of the CeCILL-B
license as circulated by CEA, CNRS and INRIA at the following URL
"http://www.cecill.info".

As a counterpart to the access to the source code and  rights to copy,
modify and redistribute granted by the license, users are provided only
with a limited warranty  and the software's author,  the holder of the
economic rights,  and the successive licensors  have only  limited
liability.

In this respect, the user's attention is drawn to the risks associated
with loading,  using,  modifying and/or developing or reproducing the
software by the user in light of its specific status of free software,
that may mean  that it is complicated to manipulate,  and  that  also
therefore means  that it is reserved for developers  and  experienced
professionals having in-depth computer knowledge. Users are therefore
encouraged to load and test the software's suitability as regards their
requirements in conditions enabling the security of their systems and/or
data to be ensured and,  more generally, to use and operate it in the
same conditions as regards security.

The fact that you are presently reading this means that you have had
knowledge of the CeCILL-B license and that you accept its terms.
*/


#ifndef __ORG_SCILAB_MODULES_RENDERER_FIGUREDRAWING_DRAWABLEFIGUREGL__
#define __ORG_SCILAB_MODULES_RENDERER_FIGUREDRAWING_DRAWABLEFIGUREGL__
#include <iostream>
#include <string>
#include <string.h>
#include <stdlib.h>
#include <jni.h>

#include "GiwsException.hxx"

#if !defined(byte) | !defined(_MSC_VER) /* Defined anyway with Visual */
typedef signed char byte;
#else
#pragma message("Byte has been redefined elsewhere. Some problems can happen")
#endif


#ifndef GIWSEXPORT
# if defined(_MSC_VER) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define GIWSEXPORT
#   else
#     define GIWSEXPORT __declspec(dllexport)
#   endif
# else
#   if __GNUC__ >= 4
#     define GIWSEXPORT __attribute__ ((visibility ("default")))
#   else
#     define GIWSEXPORT
#   endif
# endif
#endif

namespace org_scilab_modules_renderer_figureDrawing
{
class GIWSEXPORT DrawableFigureGL
{

private:
    JavaVM * jvm;

protected:
    jmethodID voiddisplayID; // cache method id
    jmethodID voidinitializeDrawingjintintID; // cache method id
    jmethodID voidendDrawingID; // cache method id
    jmethodID voidshowjintintID; // cache method id
    jmethodID voiddestroyjintintID; // cache method id
    jmethodID voidsetFigureIndexjintintID; // cache method id
    jmethodID voiddrawCanvasID; // cache method id
    jmethodID voiddrawBackgroundID; // cache method id
    jmethodID voidsetBackgroundColorjintintID; // cache method id
    jmethodID voidsetLogicalOpjintintID; // cache method id
    jmethodID voidsetColorMapDatajdoubleArray_doubledoubleID; // cache method id
    jmethodID jdoubleArray_getColorMapDataID; // cache method id
    jmethodID jintgetColorMapSizeID; // cache method id
    jmethodID jintgetCanvasWidthID; // cache method id
    jmethodID jintgetCanvasHeightID; // cache method id
    jmethodID jintsetCanvasSizejintintjintintID; // cache method id
    jmethodID jintgetWindowPosXID; // cache method id
    jmethodID jintgetWindowPosYID; // cache method id
    jmethodID voidsetWindowPositionjintintjintintID; // cache method id
    jmethodID jintgetWindowWidthID; // cache method id
    jmethodID jintgetWindowHeightID; // cache method id
    jmethodID voidsetWindowSizejintintjintintID; // cache method id
    jmethodID voidsetInfoMessagejstringjava_lang_StringID; // cache method id
    jmethodID jstringgetInfoMessageID; // cache method id
    jmethodID voidsetAutoResizeModejbooleanbooleanID; // cache method id
    jmethodID jbooleangetAutoResizeModeID; // cache method id
    jmethodID jintArray_getViewportID; // cache method id
    jmethodID voidsetViewportjintintjintintjintintjintintID; // cache method id
    jmethodID jintArray_rubberBoxjbooleanbooleanjintArray_intintID; // cache method id
    jmethodID voidinteractiveZoomjlonglongID; // cache method id
    jmethodID voidsetTitlejstringjava_lang_StringID; // cache method id
    jmethodID voidinteractiveRotationID; // cache method id
    jmethodID voidshowWindowID; // cache method id
    jmethodID voidsetNbSubwinsjintintID; // cache method id
    jmethodID voidopenGraphicCanvasID; // cache method id
    jmethodID voidcloseGraphicCanvasID; // cache method id
    jmethodID voidsetUseSingleBufferjbooleanbooleanID; // cache method id
    jmethodID jintgetAntialiasingQualityID; // cache method id
    jmethodID voidsetAntialiasingQualityjintintID; // cache method id



    jobject instance;
    jclass instanceClass; // cache class


    // Caching (if any)


    /**
    * Get the environment matching to the current thread.
    */
    virtual JNIEnv * getCurrentEnv();

public:
    // Constructor
    /**
    * Create a wrapping of the object from a JNIEnv.
    * It will call the default constructor
    * @param JEnv_ the Java Env
    */
    DrawableFigureGL(JavaVM * jvm_);

    /**
    * Create a wrapping of an already existing object from a JNIEnv.
    * The object must have already been instantiated
    * @param JEnv_ the Java Env
    * @param JObj the object
    */
    DrawableFigureGL(JavaVM * jvm_, jobject JObj);


    /**
    * This is a fake constructor to avoid the constructor
    * chaining when dealing with extended giws classes
    */
#ifdef FAKEGIWSDATATYPE
    DrawableFigureGL(fakeGiwsDataType::fakeGiwsDataType /* unused */) {}
#endif

    // Destructor
    ~DrawableFigureGL();

    // Generic method
    // Synchronization methods
    /**
    * Enter monitor associated with the object.
    * Equivalent of creating a "synchronized(obj)" scope in Java.
    */
    void synchronize();

    /**
    * Exit monitor associated with the object.
    * Equivalent of ending a "synchronized(obj)" scope.
    */
    void endSynchronize();

    // Methods
    void display();

    void initializeDrawing(int figureIndex);

    void endDrawing();

    void show(int figureIndex);

    void destroy(int parentFigureIndex);

    void setFigureIndex(int figureIndex);

    void drawCanvas();

    void drawBackground();

    void setBackgroundColor(int colorIndex);

    void setLogicalOp(int logicOpIndex);

    void setColorMapData(double const* rgbmat, int rgbmatSize);

    double* getColorMapData();

    int getColorMapSize();

    int getCanvasWidth();

    int getCanvasHeight();

    int setCanvasSize(int width, int height);

    int getWindowPosX();

    int getWindowPosY();

    void setWindowPosition(int posX, int posY);

    int getWindowWidth();

    int getWindowHeight();

    void setWindowSize(int width, int height);

    void setInfoMessage(char  const* infoMessage);

    char * getInfoMessage();

    void setAutoResizeMode(bool onOrOff);

    bool getAutoResizeMode();

    int* getViewport();

    void setViewport(int posX, int posY, int width, int height);

    int* rubberBox(bool isClick, int const* initialRect, int initialRectSize);

    void interactiveZoom(long long objectHandle);

    void setTitle(char  const* title);

    void interactiveRotation();

    void showWindow();

    void setNbSubwins(int nbSubwins);

    void openGraphicCanvas();

    void closeGraphicCanvas();

    void setUseSingleBuffer(bool useSingleBuffer);

    int getAntialiasingQuality();

    void setAntialiasingQuality(int quality);


    /**
    * Get class name to use for static methods
    * @return class name to use for static methods
    */

    static const std::string className()
    {
        return "org/scilab/modules/renderer/figureDrawing/DrawableFigureGL";
    }

};


}
#endif
