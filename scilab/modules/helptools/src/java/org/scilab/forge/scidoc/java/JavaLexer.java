/* The following code was generated by JFlex 1.4.3 on 30/11/10 18:30 */

//CHECKSTYLE:OFF

package org.scilab.forge.scidoc.java;

import java.io.Reader;
import java.io.StringReader;
import java.io.IOException;

import org.scilab.forge.scidoc.c.AbstractCCodeHandler;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 30/11/10 18:30 from the specification file
 * <tt>java.jflex</tt>
 */
public final class JavaLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int CLEANFIRST = 6;
  public static final int CLEAN = 4;
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\25\1\2\1\0\1\3\1\1\22\0\1\3\1\74\1\22"+
    "\2\0\2\74\1\24\2\73\1\5\1\16\1\74\1\16\1\21\1\4"+
    "\1\17\11\11\2\74\1\76\1\74\1\75\1\74\1\0\1\10\1\54"+
    "\1\55\1\56\1\15\1\14\2\6\1\57\2\6\1\13\1\67\1\65"+
    "\1\60\1\70\1\6\1\71\1\62\1\63\1\72\1\64\1\6\1\20"+
    "\2\6\1\73\1\23\1\73\1\74\1\7\1\0\1\31\1\26\1\33"+
    "\1\43\1\30\1\44\1\50\1\36\1\41\1\61\1\32\1\12\1\45"+
    "\1\40\1\37\1\51\1\6\1\27\1\34\1\35\1\42\1\52\1\53"+
    "\1\46\1\47\1\66\1\73\1\74\1\73\1\74\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\0\2\2\1\3\1\4\2\5\1\6"+
    "\3\5\1\6\1\4\2\2\32\5\1\7\3\4\1\1"+
    "\2\10\1\0\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\1\1\17\1\5\2\6\3\5\2\0\1\20\3\0"+
    "\25\5\1\21\2\5\1\21\30\5\1\4\1\0\1\22"+
    "\1\1\2\5\1\0\3\5\1\6\1\20\25\5\1\23"+
    "\35\5\1\0\2\5\1\6\1\0\1\23\65\5\1\21"+
    "\3\5\1\24\4\5\1\23\26\5\1\24\20\5\1\23"+
    "\156\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[403];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\374\0\u017a"+
    "\0\u01b9\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372"+
    "\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a"+
    "\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723\0\u0762"+
    "\0\u07a1\0\u07e0\0\u081f\0\u085e\0\u089d\0\u08dc\0\u091b\0\u095a"+
    "\0\u0999\0\u09d8\0\u0a17\0\u0a56\0\374\0\374\0\u0a95\0\u0ad4"+
    "\0\u0b13\0\u0b52\0\374\0\u0b91\0\374\0\u0bd0\0\u0c0f\0\374"+
    "\0\u0c4e\0\u0c8d\0\u0ccc\0\374\0\u0d0b\0\374\0\u0d4a\0\u0d89"+
    "\0\u0dc8\0\u0e07\0\u0e46\0\u03b1\0\374\0\u0e85\0\u0ec4\0\u0f03"+
    "\0\u0f42\0\u0f81\0\u0fc0\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb"+
    "\0\u113a\0\u1179\0\u11b8\0\u11f7\0\u1236\0\u1275\0\u12b4\0\u12f3"+
    "\0\u1332\0\u1371\0\u13b0\0\u13ef\0\u142e\0\u01b9\0\u146d\0\u14ac"+
    "\0\u14eb\0\u152a\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665\0\u16a4"+
    "\0\u16e3\0\u1722\0\u1761\0\u17a0\0\u14eb\0\u17df\0\u181e\0\u185d"+
    "\0\u189c\0\u18db\0\u191a\0\u1959\0\u1998\0\u19d7\0\u1a16\0\u1a55"+
    "\0\u1a94\0\u1ad3\0\u1b12\0\u1b51\0\u1b90\0\u1bcf\0\u1c0e\0\u1c4d"+
    "\0\u1c8c\0\u1ccb\0\u1d0a\0\u1d49\0\u0ec4\0\u1d88\0\u1dc7\0\u1e06"+
    "\0\u1e45\0\u1e84\0\u1ec3\0\u1f02\0\u1f41\0\u1f80\0\u1fbf\0\u1ffe"+
    "\0\u203d\0\u207c\0\u20bb\0\u20fa\0\u2139\0\u2178\0\u21b7\0\u21f6"+
    "\0\u2235\0\u2274\0\u22b3\0\u22f2\0\u2331\0\u2370\0\u23af\0\u23ee"+
    "\0\u242d\0\u246c\0\u24ab\0\u24ea\0\u2529\0\u2568\0\u25a7\0\u25e6"+
    "\0\u2625\0\u2664\0\u26a3\0\u26e2\0\u2721\0\u2760\0\u279f\0\u27de"+
    "\0\u281d\0\u285c\0\u289b\0\u28da\0\u2919\0\u2958\0\u2997\0\u29d6"+
    "\0\u1b51\0\u2a15\0\u2a54\0\u2a93\0\u2ad2\0\u01b9\0\u2b11\0\u2b50"+
    "\0\u2b8f\0\u2bce\0\u2c0d\0\u2c4c\0\u2c8b\0\u2cca\0\u2d09\0\u2d48"+
    "\0\u2d87\0\u2dc6\0\u2e05\0\u2e44\0\u2e83\0\u2ec2\0\u2f01\0\u2f40"+
    "\0\u2f7f\0\u2fbe\0\u2ffd\0\u303c\0\u307b\0\u30ba\0\u30f9\0\u3138"+
    "\0\u3177\0\u31b6\0\u31f5\0\u3234\0\u3273\0\u32b2\0\u32f1\0\u3330"+
    "\0\u336f\0\u33ae\0\u33ed\0\u342c\0\u346b\0\u34aa\0\u34e9\0\u3528"+
    "\0\u3567\0\u35a6\0\u35e5\0\u3624\0\u3663\0\u36a2\0\u36e1\0\u3720"+
    "\0\u375f\0\u379e\0\u37dd\0\u2235\0\u381c\0\u385b\0\u389a\0\u38d9"+
    "\0\u3918\0\u3957\0\u3996\0\u39d5\0\u3a14\0\u3a53\0\u3a92\0\u3ad1"+
    "\0\u3b10\0\u3b4f\0\u3b8e\0\u3bcd\0\u3c0c\0\u3c4b\0\u3c8a\0\u3cc9"+
    "\0\u3d08\0\u3d47\0\u3d86\0\u3dc5\0\u3e04\0\u3e43\0\u3e82\0\u3ec1"+
    "\0\u3f00\0\u3f3f\0\u3f7e\0\u01b9\0\u3fbd\0\u3ffc\0\u403b\0\u407a"+
    "\0\u40b9\0\u40f8\0\u4137\0\u4176\0\u41b5\0\u41f4\0\u4233\0\u4272"+
    "\0\u42b1\0\u42f0\0\u432f\0\u436e\0\u43ad\0\u43ec\0\u442b\0\u446a"+
    "\0\u44a9\0\u44e8\0\u4527\0\u4566\0\u45a5\0\u45e4\0\u4623\0\u4662"+
    "\0\u46a1\0\u46e0\0\u471f\0\u475e\0\u479d\0\u47dc\0\u481b\0\u485a"+
    "\0\u4899\0\u48d8\0\u4917\0\u4956\0\u4995\0\u49d4\0\u4a13\0\u4a52"+
    "\0\u4a91\0\u4ad0\0\u4b0f\0\u4b4e\0\u4b8d\0\u4bcc\0\u4c0b\0\u4c4a"+
    "\0\u4c89\0\u4cc8\0\u4d07\0\u4d46\0\u4d85\0\u4dc4\0\u4e03\0\u4e42"+
    "\0\u4e81\0\u4ec0\0\u4eff\0\u4f3e\0\u4f7d\0\u4fbc\0\u4ffb\0\u503a"+
    "\0\u5079\0\u50b8\0\u50f7\0\u5136\0\u5175\0\u51b4\0\u51f3\0\u5232"+
    "\0\u5271\0\u52b0\0\u52ef\0\u532e\0\u536d\0\u53ac\0\u53eb\0\u542a"+
    "\0\u5469\0\u54a8\0\u54e7\0\u5526\0\u5565\0\u55a4\0\u55e3\0\u5622"+
    "\0\u5661\0\u56a0\0\u56df\0\u571e\0\u575d\0\u579c\0\u57db\0\u581a"+
    "\0\u5859\0\u5898\0\u58d7\0\u5916\0\u5955\0\u5994\0\u59d3\0\u5a12"+
    "\0\u5a51\0\u5a90\0\u5acf\0\u5b0e\0\u5b4d\0\u5b8c\0\u5bcb\0\u5c0a"+
    "\0\u5c49\0\u5c88\0\u5cc7\0\u5d06\0\u5d45\0\u5d84\0\u5dc3\0\u5e02"+
    "\0\u5e41\0\u5e80\0\u5ebf";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[403];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\5\1\10\1\5\1\11\1\5"+
    "\1\12\1\13\2\14\1\15\1\16\1\5\1\17\1\11"+
    "\1\20\1\21\1\5\1\22\1\5\1\23\1\24\1\25"+
    "\1\26\1\11\1\27\1\30\1\31\2\11\1\32\1\33"+
    "\1\11\1\34\1\35\3\11\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\11\1\47\1\50"+
    "\1\51\1\52\3\11\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\2\61\1\64\71\61\1\65"+
    "\2\66\1\67\21\65\1\67\51\65\1\70\2\71\1\72"+
    "\21\70\1\72\51\70\101\0\1\7\100\0\1\73\1\74"+
    "\77\0\10\11\1\0\2\11\5\0\45\11\12\0\10\11"+
    "\1\0\2\11\5\0\1\11\1\75\43\11\15\0\1\13"+
    "\2\76\3\0\1\13\1\0\1\77\63\0\10\11\1\0"+
    "\2\11\5\0\11\11\1\100\33\11\12\0\4\11\1\101"+
    "\3\11\1\0\2\11\5\0\45\11\12\0\10\11\1\0"+
    "\2\11\5\0\20\11\1\102\24\11\15\0\1\13\2\76"+
    "\3\0\1\13\1\103\1\77\24\0\1\103\41\0\1\77"+
    "\5\0\1\77\57\0\1\104\2\0\17\104\1\105\1\106"+
    "\53\104\1\107\2\0\20\107\1\110\1\107\1\0\51\107"+
    "\6\0\10\11\1\0\2\11\5\0\1\11\1\111\7\11"+
    "\1\112\7\11\1\113\23\11\12\0\10\11\1\0\2\11"+
    "\5\0\2\11\1\114\42\11\12\0\4\11\1\115\3\11"+
    "\1\0\2\11\5\0\12\11\1\116\5\11\1\117\24\11"+
    "\12\0\10\11\1\0\2\11\5\0\1\120\44\11\12\0"+
    "\4\11\1\121\3\11\1\0\2\11\5\0\3\11\1\122"+
    "\4\11\1\123\1\124\33\11\12\0\10\11\1\0\2\11"+
    "\5\0\7\11\1\125\1\126\3\11\1\127\10\11\1\130"+
    "\17\11\12\0\10\11\1\0\2\11\5\0\1\11\1\131"+
    "\6\11\1\132\34\11\12\0\10\11\1\0\2\11\5\0"+
    "\2\11\1\133\1\134\41\11\12\0\10\11\1\0\2\11"+
    "\5\0\12\11\1\135\3\11\1\136\1\137\25\11\12\0"+
    "\10\11\1\0\2\11\5\0\2\11\1\140\6\11\1\141"+
    "\33\11\12\0\4\11\1\101\3\11\1\0\2\11\5\0"+
    "\3\11\1\142\5\11\1\143\1\11\1\144\31\11\12\0"+
    "\10\11\1\0\2\11\5\0\11\11\1\145\33\11\12\0"+
    "\10\11\1\0\2\11\5\0\1\11\1\146\1\11\1\147"+
    "\10\11\1\150\30\11\12\0\10\11\1\0\2\11\5\0"+
    "\11\11\1\151\33\11\12\0\10\11\1\0\2\11\5\0"+
    "\10\11\1\152\34\11\12\0\10\11\1\0\2\11\5\0"+
    "\11\11\1\112\7\11\1\113\23\11\12\0\4\11\1\153"+
    "\3\11\1\0\2\11\5\0\10\11\1\154\34\11\12\0"+
    "\10\11\1\0\2\11\5\0\11\11\1\155\33\11\12\0"+
    "\4\11\1\156\3\11\1\0\2\11\5\0\12\11\1\157"+
    "\32\11\12\0\10\11\1\0\2\11\5\0\1\160\44\11"+
    "\12\0\10\11\1\0\2\11\5\0\2\11\1\161\4\11"+
    "\1\162\1\126\34\11\12\0\10\11\1\0\2\11\5\0"+
    "\10\11\1\163\34\11\12\0\10\11\1\0\2\11\5\0"+
    "\11\11\1\164\33\11\12\0\10\11\1\0\2\11\5\0"+
    "\2\11\1\165\6\11\1\166\2\11\1\167\30\11\12\0"+
    "\10\11\1\0\2\11\5\0\14\11\1\170\30\11\12\0"+
    "\10\11\1\0\2\11\5\0\12\11\1\171\32\11\101\0"+
    "\1\172\77\0\1\56\1\61\2\0\2\61\1\173\71\61"+
    "\2\0\1\63\74\0\1\61\2\0\1\61\1\174\1\175"+
    "\71\61\1\0\2\66\77\0\1\67\21\0\1\67\52\0"+
    "\2\71\75\0\2\71\1\72\21\0\1\72\51\0\1\73"+
    "\2\0\74\73\6\0\10\11\1\0\2\11\5\0\1\11"+
    "\1\176\11\11\1\177\31\11\15\0\1\77\2\0\1\76"+
    "\1\200\1\0\1\77\10\0\1\200\12\0\2\76\11\0"+
    "\1\76\26\0\10\11\1\0\2\11\5\0\12\11\1\201"+
    "\32\11\12\0\10\11\1\0\2\11\5\0\11\11\1\202"+
    "\33\11\12\0\10\11\1\0\2\11\5\0\5\11\1\203"+
    "\37\11\14\0\2\204\2\0\2\204\1\0\1\204\6\0"+
    "\1\204\1\0\2\204\1\0\1\204\7\0\2\204\7\0"+
    "\3\204\20\0\1\104\2\0\74\104\24\0\1\105\52\0"+
    "\1\107\2\0\21\107\1\205\1\0\51\107\6\0\10\11"+
    "\1\0\2\11\5\0\2\11\1\206\42\11\12\0\10\11"+
    "\1\0\2\11\5\0\11\11\1\207\33\11\12\0\10\11"+
    "\1\0\2\11\5\0\7\11\1\210\35\11\12\0\10\11"+
    "\1\0\2\11\5\0\7\11\1\211\35\11\12\0\10\11"+
    "\1\0\2\11\5\0\6\11\1\212\36\11\12\0\10\11"+
    "\1\0\2\11\5\0\14\11\1\213\30\11\12\0\10\11"+
    "\1\0\2\11\5\0\7\11\1\214\35\11\12\0\10\11"+
    "\1\0\2\11\5\0\6\11\1\215\36\11\12\0\10\11"+
    "\1\0\2\11\5\0\3\11\1\216\41\11\12\0\10\11"+
    "\1\0\2\11\5\0\6\11\1\212\1\217\35\11\12\0"+
    "\10\11\1\0\2\11\5\0\3\11\1\220\41\11\12\0"+
    "\10\11\1\0\2\11\5\0\12\11\1\221\32\11\12\0"+
    "\10\11\1\0\2\11\5\0\1\11\1\222\1\11\1\223"+
    "\41\11\12\0\10\11\1\0\2\11\5\0\11\11\1\224"+
    "\33\11\12\0\10\11\1\0\2\11\5\0\23\11\1\225"+
    "\21\11\12\0\10\11\1\0\2\11\5\0\13\11\1\226"+
    "\31\11\12\0\10\11\1\0\2\11\5\0\3\11\1\227"+
    "\10\11\1\212\4\11\1\136\23\11\12\0\10\11\1\0"+
    "\2\11\5\0\1\11\1\230\11\11\1\231\31\11\12\0"+
    "\10\11\1\0\2\11\5\0\25\11\1\136\17\11\12\0"+
    "\10\11\1\0\2\11\5\0\7\11\1\232\35\11\12\0"+
    "\10\11\1\0\2\11\5\0\7\11\1\233\35\11\12\0"+
    "\10\11\1\0\2\11\5\0\23\11\1\234\21\11\12\0"+
    "\10\11\1\0\2\11\5\0\16\11\1\235\26\11\12\0"+
    "\10\11\1\0\2\11\5\0\14\11\1\236\30\11\12\0"+
    "\4\11\1\115\3\11\1\0\2\11\5\0\45\11\12\0"+
    "\10\11\1\0\2\11\5\0\1\11\1\136\43\11\12\0"+
    "\10\11\1\0\2\11\5\0\12\11\1\237\32\11\12\0"+
    "\10\11\1\0\2\11\5\0\7\11\1\240\35\11\12\0"+
    "\10\11\1\0\2\11\5\0\11\11\1\241\1\11\1\242"+
    "\31\11\12\0\10\11\1\0\2\11\5\0\5\11\1\243"+
    "\37\11\12\0\10\11\1\0\2\11\5\0\1\244\44\11"+
    "\12\0\4\11\1\245\3\11\1\0\2\11\5\0\13\11"+
    "\1\246\31\11\12\0\10\11\1\0\2\11\5\0\13\11"+
    "\1\247\31\11\12\0\10\11\1\0\2\11\5\0\3\11"+
    "\1\250\5\11\1\251\33\11\12\0\10\11\1\0\2\11"+
    "\5\0\3\11\1\252\41\11\12\0\4\11\1\253\3\11"+
    "\1\0\2\11\5\0\45\11\12\0\10\11\1\0\2\11"+
    "\5\0\6\11\1\254\1\255\5\11\1\256\27\11\12\0"+
    "\10\11\1\0\2\11\5\0\33\11\1\257\11\11\12\0"+
    "\10\11\1\0\2\11\5\0\5\11\1\260\37\11\12\0"+
    "\10\11\1\0\2\11\5\0\1\11\1\261\43\11\12\0"+
    "\10\11\1\0\2\11\5\0\1\11\1\262\43\11\12\0"+
    "\10\11\1\0\2\11\5\0\13\11\1\246\31\11\12\0"+
    "\10\11\1\0\2\11\5\0\22\11\1\263\22\11\12\0"+
    "\10\11\1\0\2\11\5\0\34\11\1\264\10\11\12\0"+
    "\4\11\1\265\3\11\1\0\2\11\5\0\17\11\1\266"+
    "\25\11\12\0\10\11\1\0\2\11\5\0\12\11\1\267"+
    "\32\11\12\0\10\11\1\0\2\11\5\0\6\11\1\270"+
    "\36\11\101\0\1\56\1\0\1\61\2\0\1\61\1\271"+
    "\1\175\71\61\1\271\2\0\2\271\1\173\71\271\1\61"+
    "\2\0\2\61\1\175\71\61\6\0\10\11\1\0\2\11"+
    "\5\0\3\11\1\272\41\11\12\0\10\11\1\0\2\11"+
    "\5\0\7\11\1\273\35\11\15\0\1\274\4\0\1\275"+
    "\1\274\65\0\10\11\1\0\2\11\5\0\22\11\1\276"+
    "\22\11\12\0\10\11\1\0\2\11\5\0\3\11\1\277"+
    "\41\11\12\0\10\11\1\0\2\11\5\0\2\11\1\300"+
    "\42\11\14\0\2\204\2\76\2\204\1\0\1\204\6\0"+
    "\1\204\1\0\2\204\1\0\1\204\7\0\2\204\7\0"+
    "\3\204\26\0\10\11\1\0\2\11\5\0\3\11\1\301"+
    "\41\11\12\0\4\11\1\302\3\11\1\0\2\11\5\0"+
    "\45\11\12\0\10\11\1\0\2\11\5\0\2\11\1\276"+
    "\42\11\12\0\10\11\1\0\2\11\5\0\14\11\1\303"+
    "\30\11\12\0\10\11\1\0\2\11\5\0\2\11\1\136"+
    "\42\11\12\0\10\11\1\0\2\11\5\0\17\11\1\136"+
    "\25\11\12\0\10\11\1\0\2\11\5\0\2\11\1\304"+
    "\42\11\12\0\10\11\1\0\2\11\5\0\7\11\1\305"+
    "\35\11\12\0\10\11\1\0\2\11\5\0\6\11\1\231"+
    "\36\11\12\0\10\11\1\0\2\11\5\0\5\11\1\306"+
    "\37\11\12\0\10\11\1\0\2\11\5\0\1\11\1\276"+
    "\43\11\12\0\10\11\1\0\2\11\5\0\6\11\1\307"+
    "\1\310\35\11\12\0\10\11\1\0\2\11\5\0\13\11"+
    "\1\311\31\11\12\0\10\11\1\0\2\11\5\0\7\11"+
    "\1\312\35\11\12\0\10\11\1\0\2\11\5\0\1\11"+
    "\1\277\43\11\12\0\10\11\1\0\2\11\5\0\2\11"+
    "\1\143\42\11\12\0\10\11\1\0\2\11\5\0\7\11"+
    "\1\217\35\11\12\0\10\11\1\0\2\11\5\0\12\11"+
    "\1\313\32\11\12\0\10\11\1\0\2\11\5\0\11\11"+
    "\1\314\33\11\12\0\10\11\1\0\2\11\5\0\6\11"+
    "\1\136\36\11\12\0\10\11\1\0\2\11\5\0\13\11"+
    "\1\315\31\11\12\0\10\11\1\0\2\11\5\0\2\11"+
    "\1\316\42\11\12\0\4\11\1\317\3\11\1\0\2\11"+
    "\5\0\11\11\1\320\33\11\12\0\10\11\1\0\2\11"+
    "\5\0\3\11\1\321\41\11\12\0\10\11\1\0\2\11"+
    "\5\0\1\322\44\11\12\0\10\11\1\0\2\11\5\0"+
    "\3\11\1\323\41\11\12\0\10\11\1\0\2\11\5\0"+
    "\11\11\1\136\33\11\12\0\10\11\1\0\2\11\5\0"+
    "\7\11\1\324\35\11\12\0\10\11\1\0\2\11\5\0"+
    "\24\11\1\325\20\11\12\0\10\11\1\0\2\11\5\0"+
    "\4\11\1\326\40\11\12\0\4\11\1\312\3\11\1\0"+
    "\2\11\5\0\45\11\12\0\10\11\1\0\2\11\5\0"+
    "\3\11\1\327\41\11\12\0\10\11\1\0\2\11\5\0"+
    "\15\11\1\276\27\11\12\0\4\11\1\212\3\11\1\0"+
    "\2\11\5\0\45\11\12\0\10\11\1\0\2\11\5\0"+
    "\6\11\1\330\36\11\12\0\10\11\1\0\2\11\5\0"+
    "\12\11\1\331\32\11\12\0\10\11\1\0\2\11\5\0"+
    "\1\11\1\332\43\11\12\0\10\11\1\0\2\11\5\0"+
    "\2\11\1\333\42\11\12\0\10\11\1\0\2\11\5\0"+
    "\7\11\1\334\35\11\12\0\10\11\1\0\2\11\5\0"+
    "\2\11\1\335\42\11\12\0\10\11\1\0\2\11\5\0"+
    "\2\11\1\336\42\11\12\0\10\11\1\0\2\11\5\0"+
    "\2\11\1\337\42\11\12\0\10\11\1\0\2\11\5\0"+
    "\14\11\1\340\30\11\12\0\10\11\1\0\2\11\5\0"+
    "\13\11\1\341\31\11\12\0\10\11\1\0\2\11\5\0"+
    "\2\11\1\342\42\11\12\0\10\11\1\0\2\11\5\0"+
    "\3\11\1\343\41\11\12\0\10\11\1\0\2\11\5\0"+
    "\14\11\1\344\30\11\12\0\4\11\1\345\3\11\1\0"+
    "\2\11\5\0\45\11\12\0\10\11\1\0\2\11\5\0"+
    "\1\346\44\11\12\0\10\11\1\0\2\11\5\0\7\11"+
    "\1\347\35\11\12\0\10\11\1\0\2\11\5\0\14\11"+
    "\1\350\30\11\12\0\10\11\1\0\2\11\5\0\21\11"+
    "\1\351\23\11\12\0\10\11\1\0\2\11\5\0\10\11"+
    "\1\352\34\11\15\0\1\274\2\0\1\76\2\0\1\274"+
    "\23\0\2\76\11\0\1\76\31\0\1\274\5\0\1\274"+
    "\65\0\10\11\1\0\2\11\5\0\7\11\1\276\35\11"+
    "\12\0\10\11\1\0\2\11\5\0\23\11\1\353\21\11"+
    "\12\0\10\11\1\0\2\11\5\0\4\11\1\136\40\11"+
    "\12\0\10\11\1\0\2\11\5\0\2\11\1\354\42\11"+
    "\12\0\10\11\1\0\2\11\5\0\1\11\1\355\43\11"+
    "\12\0\10\11\1\0\2\11\5\0\12\11\1\356\32\11"+
    "\12\0\10\11\1\0\2\11\5\0\1\11\1\357\43\11"+
    "\12\0\10\11\1\0\2\11\5\0\10\11\1\136\34\11"+
    "\12\0\10\11\1\0\2\11\5\0\7\11\1\136\35\11"+
    "\12\0\10\11\1\0\2\11\5\0\13\11\1\360\31\11"+
    "\12\0\10\11\1\0\2\11\5\0\5\11\1\361\37\11"+
    "\12\0\10\11\1\0\2\11\5\0\13\11\1\362\31\11"+
    "\12\0\10\11\1\0\2\11\5\0\6\11\1\363\36\11"+
    "\12\0\10\11\1\0\2\11\5\0\25\11\1\364\17\11"+
    "\12\0\10\11\1\0\2\11\5\0\24\11\1\212\20\11"+
    "\12\0\10\11\1\0\2\11\5\0\1\11\1\365\43\11"+
    "\12\0\10\11\1\0\2\11\5\0\2\11\1\366\42\11"+
    "\12\0\10\11\1\0\2\11\5\0\1\11\1\307\43\11"+
    "\12\0\10\11\1\0\2\11\5\0\14\11\1\367\30\11"+
    "\12\0\4\11\1\210\3\11\1\0\2\11\5\0\45\11"+
    "\12\0\4\11\1\370\3\11\1\0\2\11\5\0\45\11"+
    "\12\0\10\11\1\0\2\11\5\0\2\11\1\371\42\11"+
    "\12\0\10\11\1\0\2\11\5\0\3\11\1\372\41\11"+
    "\12\0\10\11\1\0\2\11\5\0\3\11\1\373\41\11"+
    "\12\0\10\11\1\0\2\11\5\0\7\11\1\374\35\11"+
    "\12\0\10\11\1\0\2\11\5\0\6\11\1\375\36\11"+
    "\12\0\10\11\1\0\2\11\5\0\2\11\1\376\42\11"+
    "\12\0\10\11\1\0\2\11\5\0\3\11\1\377\41\11"+
    "\12\0\10\11\1\0\2\11\5\0\22\11\1\u0100\22\11"+
    "\12\0\10\11\1\0\2\11\5\0\3\11\1\u0101\41\11"+
    "\12\0\10\11\1\0\2\11\5\0\1\11\1\u0102\20\11"+
    "\1\u0103\22\11\12\0\10\11\1\0\2\11\5\0\20\11"+
    "\1\u0104\24\11\12\0\10\11\1\0\2\11\5\0\5\11"+
    "\1\277\37\11\12\0\10\11\1\0\2\11\5\0\1\11"+
    "\1\u0105\43\11\12\0\10\11\1\0\2\11\5\0\12\11"+
    "\1\u0106\32\11\12\0\10\11\1\0\2\11\5\0\3\11"+
    "\1\246\41\11\12\0\10\11\1\0\2\11\5\0\7\11"+
    "\1\u0107\35\11\12\0\10\11\1\0\2\11\5\0\5\11"+
    "\1\u0108\37\11\12\0\10\11\1\0\2\11\5\0\42\11"+
    "\1\u0109\2\11\12\0\10\11\1\0\2\11\5\0\2\11"+
    "\1\u010a\42\11\12\0\10\11\1\0\2\11\5\0\13\11"+
    "\1\u010b\31\11\12\0\10\11\1\0\2\11\5\0\23\11"+
    "\1\u010c\21\11\12\0\10\11\1\0\2\11\5\0\31\11"+
    "\1\u010d\13\11\12\0\10\11\1\0\2\11\5\0\17\11"+
    "\1\u010e\25\11\12\0\10\11\1\0\2\11\5\0\7\11"+
    "\1\u010f\35\11\12\0\10\11\1\0\2\11\5\0\3\11"+
    "\1\u0110\41\11\12\0\10\11\1\0\2\11\5\0\12\11"+
    "\1\136\32\11\12\0\10\11\1\0\2\11\5\0\15\11"+
    "\1\231\27\11\12\0\10\11\1\0\2\11\5\0\3\11"+
    "\1\u0111\41\11\12\0\10\11\1\0\2\11\5\0\12\11"+
    "\1\u0112\32\11\12\0\10\11\1\0\2\11\5\0\7\11"+
    "\1\u0113\35\11\12\0\10\11\1\0\2\11\5\0\5\11"+
    "\1\u0114\37\11\12\0\10\11\1\0\2\11\5\0\13\11"+
    "\1\u0115\31\11\12\0\10\11\1\0\2\11\5\0\16\11"+
    "\1\u0116\26\11\12\0\10\11\1\0\2\11\5\0\17\11"+
    "\1\u0117\25\11\12\0\4\11\1\307\3\11\1\0\2\11"+
    "\5\0\45\11\12\0\4\11\1\u0118\3\11\1\0\2\11"+
    "\5\0\45\11\12\0\10\11\1\0\2\11\5\0\5\11"+
    "\1\u0119\37\11\12\0\10\11\1\0\2\11\5\0\7\11"+
    "\1\u011a\35\11\12\0\10\11\1\0\2\11\5\0\22\11"+
    "\1\212\22\11\12\0\10\11\1\0\2\11\5\0\13\11"+
    "\1\u011b\31\11\12\0\10\11\1\0\2\11\5\0\27\11"+
    "\1\u011c\7\11\1\u011d\5\11\12\0\10\11\1\0\2\11"+
    "\5\0\37\11\1\u011e\5\11\12\0\10\11\1\0\2\11"+
    "\5\0\5\11\1\u011f\37\11\12\0\10\11\1\0\2\11"+
    "\5\0\3\11\1\u0120\41\11\12\0\10\11\1\0\2\11"+
    "\5\0\12\11\1\u0121\32\11\12\0\10\11\1\0\2\11"+
    "\5\0\1\11\1\u0122\43\11\12\0\10\11\1\0\2\11"+
    "\5\0\2\11\1\220\42\11\12\0\10\11\1\0\2\11"+
    "\5\0\32\11\1\u0123\12\11\12\0\10\11\1\0\2\11"+
    "\5\0\13\11\1\u0124\31\11\12\0\10\11\1\0\2\11"+
    "\5\0\22\11\1\u0125\22\11\12\0\10\11\1\0\2\11"+
    "\5\0\13\11\1\u0126\31\11\12\0\10\11\1\0\2\11"+
    "\5\0\10\11\1\u0127\34\11\12\0\10\11\1\0\2\11"+
    "\5\0\11\11\1\u0128\33\11\12\0\10\11\1\0\2\11"+
    "\5\0\1\11\1\u0129\43\11\12\0\10\11\1\0\2\11"+
    "\5\0\17\11\1\u012a\25\11\12\0\10\11\1\0\2\11"+
    "\5\0\23\11\1\u012b\21\11\12\0\10\11\1\0\2\11"+
    "\5\0\12\11\1\u012c\32\11\12\0\10\11\1\0\2\11"+
    "\5\0\2\11\1\u012d\42\11\12\0\10\11\1\0\2\11"+
    "\5\0\13\11\1\u012e\31\11\12\0\10\11\1\0\2\11"+
    "\5\0\12\11\1\276\32\11\12\0\10\11\1\0\2\11"+
    "\5\0\5\11\1\u012f\37\11\12\0\10\11\1\0\2\11"+
    "\5\0\14\11\1\212\30\11\12\0\10\11\1\0\2\11"+
    "\5\0\16\11\1\u0130\26\11\12\0\10\11\1\0\2\11"+
    "\5\0\2\11\1\u0131\42\11\12\0\10\11\1\0\2\11"+
    "\5\0\3\11\1\u0132\41\11\12\0\10\11\1\0\2\11"+
    "\5\0\2\11\1\u0133\42\11\12\0\10\11\1\0\2\11"+
    "\5\0\21\11\1\136\23\11\12\0\10\11\1\0\2\11"+
    "\5\0\7\11\1\u0134\35\11\12\0\10\11\1\0\2\11"+
    "\5\0\2\11\1\u0114\42\11\12\0\4\11\1\u011a\3\11"+
    "\1\0\2\11\5\0\45\11\12\0\10\11\1\0\2\11"+
    "\5\0\3\11\1\u0135\41\11\12\0\10\11\1\0\2\11"+
    "\5\0\11\11\1\u0136\33\11\12\0\10\11\1\0\2\11"+
    "\5\0\11\11\1\u0137\33\11\12\0\10\11\1\0\2\11"+
    "\5\0\7\11\1\u0103\35\11\12\0\4\11\1\u0138\3\11"+
    "\1\0\2\11\5\0\45\11\12\0\10\11\1\0\2\11"+
    "\5\0\7\11\1\u0139\35\11\12\0\10\11\1\0\2\11"+
    "\5\0\14\11\1\u013a\30\11\12\0\10\11\1\0\2\11"+
    "\5\0\14\11\1\u013b\30\11\12\0\10\11\1\0\2\11"+
    "\5\0\7\11\1\u013c\35\11\12\0\10\11\1\0\2\11"+
    "\5\0\26\11\1\u013d\2\11\1\u010d\13\11\12\0\10\11"+
    "\1\0\2\11\5\0\24\11\1\u013e\20\11\12\0\6\11"+
    "\1\u013f\1\11\1\0\2\11\5\0\41\11\1\u0140\3\11"+
    "\12\0\10\11\1\0\2\11\5\0\13\11\1\u0141\31\11"+
    "\12\0\6\11\1\u0142\1\11\1\0\2\11\5\0\45\11"+
    "\12\0\10\11\1\0\2\11\5\0\2\11\1\u0143\42\11"+
    "\12\0\10\11\1\0\2\11\5\0\11\11\1\u0144\33\11"+
    "\12\0\10\11\1\0\2\11\5\0\15\11\1\256\27\11"+
    "\12\0\10\11\1\0\2\11\5\0\7\11\1\u0145\35\11"+
    "\12\0\10\11\1\0\2\11\5\0\11\11\1\u0110\33\11"+
    "\12\0\10\11\1\0\2\11\5\0\7\11\1\u0114\35\11"+
    "\12\0\10\11\1\0\2\11\5\0\23\11\1\136\21\11"+
    "\12\0\10\11\1\0\2\11\5\0\12\11\1\u012f\32\11"+
    "\12\0\10\11\1\0\2\11\5\0\5\11\1\212\37\11"+
    "\12\0\10\11\1\0\2\11\5\0\12\11\1\u0146\32\11"+
    "\12\0\10\11\1\0\2\11\5\0\2\11\1\u0147\42\11"+
    "\12\0\10\11\1\0\2\11\5\0\6\11\1\u0148\36\11"+
    "\12\0\10\11\1\0\2\11\5\0\7\11\1\u0149\35\11"+
    "\12\0\10\11\1\0\2\11\5\0\7\11\1\u014a\35\11"+
    "\12\0\2\11\1\u014b\5\11\1\0\2\11\5\0\34\11"+
    "\1\u014c\1\u014d\7\11\12\0\10\11\1\0\2\11\5\0"+
    "\13\11\1\u014e\31\11\12\0\10\11\1\0\2\11\5\0"+
    "\23\11\1\u014f\21\11\12\0\10\11\1\0\2\11\5\0"+
    "\7\11\1\u0150\35\11\12\0\10\11\1\0\2\11\5\0"+
    "\21\11\1\u0143\23\11\12\0\10\11\1\0\2\11\5\0"+
    "\14\11\1\u0151\30\11\12\0\10\11\1\0\2\11\5\0"+
    "\2\11\1\u0152\42\11\12\0\10\11\1\0\2\11\5\0"+
    "\13\11\1\u0153\31\11\12\0\10\11\1\0\2\11\5\0"+
    "\2\11\1\u0154\42\11\12\0\10\11\1\0\2\11\5\0"+
    "\12\11\1\u0155\32\11\12\0\10\11\1\0\2\11\5\0"+
    "\11\11\1\u0156\33\11\12\0\7\11\1\16\1\0\2\11"+
    "\5\0\45\11\12\0\10\11\1\0\2\11\5\0\1\11"+
    "\1\u0157\43\11\12\0\10\11\1\0\2\11\5\0\13\11"+
    "\1\u0158\31\11\12\0\10\11\1\0\2\11\5\0\7\11"+
    "\1\231\35\11\12\0\10\11\1\0\2\11\5\0\15\11"+
    "\1\u0114\27\11\12\0\10\11\1\0\2\11\5\0\7\11"+
    "\1\u0143\35\11\12\0\6\11\1\u0159\1\11\1\0\2\11"+
    "\5\0\45\11\12\0\10\11\1\0\2\11\5\0\34\11"+
    "\1\u015a\10\11\12\0\10\11\1\0\2\11\5\0\1\11"+
    "\1\u015b\3\11\1\u015c\37\11\12\0\10\11\1\0\2\11"+
    "\5\0\7\11\1\u015d\35\11\12\0\10\11\1\0\2\11"+
    "\5\0\10\11\1\u015e\34\11\12\0\10\11\1\0\2\11"+
    "\5\0\3\11\1\u015f\41\11\12\0\10\11\1\0\2\11"+
    "\5\0\7\11\1\u0160\35\11\12\0\10\11\1\0\2\11"+
    "\5\0\32\11\1\u0161\12\11\12\0\10\11\1\0\2\11"+
    "\5\0\13\11\1\u0162\2\11\1\u0163\26\11\12\0\2\11"+
    "\1\u0164\5\11\1\0\2\11\5\0\45\11\12\0\10\11"+
    "\1\0\2\11\5\0\2\11\1\u0165\42\11\12\0\10\11"+
    "\1\0\2\11\5\0\7\11\1\u0166\35\11\12\0\10\11"+
    "\1\0\2\11\5\0\7\11\1\u0167\35\11\12\0\10\11"+
    "\1\0\2\11\5\0\1\11\1\u0168\43\11\12\0\10\11"+
    "\1\0\2\11\5\0\7\11\1\u0169\35\11\12\0\10\11"+
    "\1\0\2\11\5\0\5\11\1\u0143\37\11\12\0\10\11"+
    "\1\0\2\11\5\0\11\11\1\u016a\33\11\12\0\10\11"+
    "\1\0\2\11\5\0\14\11\1\u016b\30\11\12\0\10\11"+
    "\1\0\2\11\5\0\22\11\1\u016c\22\11\12\0\10\11"+
    "\1\0\2\11\5\0\5\11\1\u016d\37\11\12\0\10\11"+
    "\1\0\2\11\5\0\3\11\1\u016e\41\11\12\0\10\11"+
    "\1\0\2\11\5\0\1\11\1\u016f\43\11\12\0\10\11"+
    "\1\0\2\11\5\0\7\11\1\u0170\35\11\12\0\10\11"+
    "\1\0\2\11\5\0\2\11\1\u0171\42\11\12\0\10\11"+
    "\1\0\2\11\5\0\16\11\1\u0172\26\11\12\0\4\11"+
    "\1\u0173\3\11\1\0\2\11\5\0\45\11\12\0\10\11"+
    "\1\0\2\11\5\0\16\11\1\u0103\26\11\12\0\10\11"+
    "\1\0\2\11\5\0\1\11\1\u0174\43\11\12\0\4\11"+
    "\1\u0171\3\11\1\0\2\11\5\0\45\11\12\0\10\11"+
    "\1\0\2\11\5\0\10\11\1\u0175\34\11\12\0\10\11"+
    "\1\0\2\11\5\0\2\11\1\u0176\42\11\12\0\10\11"+
    "\1\0\2\11\5\0\17\11\1\u0177\25\11\12\0\10\11"+
    "\1\0\2\11\5\0\2\11\1\u0178\42\11\12\0\10\11"+
    "\1\0\2\11\5\0\14\11\1\u0179\30\11\12\0\10\11"+
    "\1\0\2\11\5\0\23\11\1\u017a\21\11\12\0\10\11"+
    "\1\0\2\11\5\0\14\11\1\u017b\30\11\12\0\10\11"+
    "\1\0\2\11\5\0\2\11\1\u017c\42\11\12\0\10\11"+
    "\1\0\2\11\5\0\7\11\1\u012a\35\11\12\0\10\11"+
    "\1\0\2\11\5\0\2\11\1\u017d\42\11\12\0\10\11"+
    "\1\0\2\11\5\0\13\11\1\u017e\31\11\12\0\10\11"+
    "\1\0\2\11\5\0\15\11\1\u0143\27\11\12\0\10\11"+
    "\1\0\2\11\5\0\26\11\1\u017f\16\11\12\0\10\11"+
    "\1\0\2\11\5\0\15\11\1\u0103\27\11\12\0\10\11"+
    "\1\0\2\11\5\0\1\11\1\u0180\43\11\12\0\10\11"+
    "\1\0\2\11\5\0\11\11\1\u0171\33\11\12\0\10\11"+
    "\1\0\2\11\5\0\1\11\1\u0143\43\11\12\0\10\11"+
    "\1\0\2\11\5\0\3\11\1\u0148\41\11\12\0\10\11"+
    "\1\0\2\11\5\0\15\11\1\u0181\27\11\12\0\10\11"+
    "\1\0\2\11\5\0\12\11\1\u0171\32\11\12\0\10\11"+
    "\1\0\2\11\5\0\23\11\1\u0182\21\11\12\0\10\11"+
    "\1\0\2\11\5\0\17\11\1\u0183\25\11\12\0\10\11"+
    "\1\0\2\11\5\0\6\11\1\u0184\36\11\12\0\10\11"+
    "\1\0\2\11\5\0\3\11\1\u0185\41\11\12\0\10\11"+
    "\1\0\2\11\5\0\11\11\1\u0186\33\11\12\0\10\11"+
    "\1\0\2\11\5\0\11\11\1\u0187\33\11\12\0\10\11"+
    "\1\0\2\11\5\0\3\11\1\u0188\41\11\12\0\10\11"+
    "\1\0\2\11\5\0\32\11\1\u0189\12\11\12\0\10\11"+
    "\1\0\2\11\5\0\11\11\1\u018a\33\11\12\0\10\11"+
    "\1\0\2\11\5\0\2\11\1\u018b\42\11\12\0\10\11"+
    "\1\0\2\11\5\0\6\11\1\u0143\36\11\12\0\10\11"+
    "\1\0\2\11\5\0\15\11\1\u018c\27\11\12\0\10\11"+
    "\1\0\2\11\5\0\12\11\1\u0143\32\11\12\0\10\11"+
    "\1\0\2\11\5\0\14\11\1\u018d\30\11\12\0\10\11"+
    "\1\0\2\11\5\0\21\11\1\u018e\23\11\12\0\10\11"+
    "\1\0\2\11\5\0\23\11\1\u018f\21\11\12\0\10\11"+
    "\1\0\2\11\5\0\1\11\1\u014f\43\11\12\0\10\11"+
    "\1\0\2\11\5\0\12\11\1\u0148\32\11\12\0\10\11"+
    "\1\0\2\11\5\0\34\11\1\u014c\10\11\12\0\10\11"+
    "\1\0\2\11\5\0\12\11\1\u0190\32\11\12\0\10\11"+
    "\1\0\2\11\5\0\34\11\1\u0191\10\11\12\0\10\11"+
    "\1\0\2\11\5\0\2\11\1\u0192\42\11\12\0\10\11"+
    "\1\0\2\11\5\0\15\11\1\u0184\27\11\12\0\10\11"+
    "\1\0\2\11\5\0\13\11\1\u0193\31\11\12\0\10\11"+
    "\1\0\2\11\5\0\1\11\1\u014e\43\11\12\0\10\11"+
    "\1\0\2\11\5\0\40\11\1\u012a\4\11\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24318];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\2\0\1\11\1\1\1\11\45\1\2\11"+
    "\4\1\1\11\1\0\1\11\2\1\1\11\3\1\1\11"+
    "\1\1\1\11\4\1\2\0\1\11\3\0\62\1\1\0"+
    "\4\1\1\0\70\1\1\0\3\1\1\0\326\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[403];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

    private int whitesOnFirstLine;
    private int saveLexState;
    private AbstractCCodeHandler handler;

    public JavaLexer() { }

    private String trimEnd(String str) {
        int end = str.length() - 1;
        int i = end;
        for (; i >= 0; i--) {
           char c = str.charAt(i);
           if (c != ' ' && c != '\t' && c != '\r' && c != '\n') {
              break;
           }
        }
        if (i != end) {
           return str.substring(0, i + 1);
        }

        return str;
    }

    public String convert(AbstractCCodeHandler h, String code) {
        Reader reader = new StringReader(trimEnd(code));
        String str = convert(h, reader, true);
        try {
          reader.close();
        } catch (IOException e) { }

        return str;
    }

    public String convert(AbstractCCodeHandler h, Reader code, boolean ret) {
        if (code == null) {
           return null;
        } else {
           handler = h;
           whitesOnFirstLine = 0;
           yyreset(code);
           yybegin(CLEANFIRST);
           try {
               yylex();
           } catch (IOException e) {
               return null;
           }
           if (ret) {
               return h.toString();
           }
           return "";
        }
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JavaLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JavaLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public void yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 16: 
          { handler.handleString(yytext());
          }
        case 21: break;
        case 17: 
          { handler.handleKeyword(yytext());
          }
        case 22: break;
        case 9: 
          { yypushback(1);
                                   yybegin(saveLexState);
          }
        case 23: break;
        case 10: 
          { handler.handleNothing("\n");
          }
        case 24: break;
        case 6: 
          { handler.handleNumber(yytext());
          }
        case 25: break;
        case 1: 
          { handler.handleComment(yytext());
          }
        case 26: break;
        case 11: 
          { int len = yylength() - whitesOnFirstLine;
                                   if (len > 0) {
                                      yypushback(len);
                                   }
                                   yybegin(saveLexState);
          }
        case 27: break;
        case 14: 
          { whitesOnFirstLine = yylength();
                                   yybegin(YYINITIAL);
          }
        case 28: break;
        case 20: 
          { handler.handleModifier(yytext());
          }
        case 29: break;
        case 7: 
          { handler.handleOpenClose(yytext());
          }
        case 30: break;
        case 18: 
          { yybegin(YYINITIAL);
                                   handler.handleComment(yytext());
          }
        case 31: break;
        case 15: 
          { yybegin(COMMENT);
                                   handler.handleComment(yytext());
          }
        case 32: break;
        case 8: 
          { handler.handleNothing("\n");
                                   saveLexState = COMMENT;
                                   yybegin(CLEAN);
          }
        case 33: break;
        case 3: 
          { handler.handleNothing("\n");
                                   saveLexState = YYINITIAL;
                                   yybegin(CLEAN);
          }
        case 34: break;
        case 5: 
          { handler.handleId(yytext());
          }
        case 35: break;
        case 12: 
          { yypushback(1);
                                   yybegin(YYINITIAL);
          }
        case 36: break;
        case 2: 
          { handler.handleDefault(yytext());
          }
        case 37: break;
        case 19: 
          { handler.handleType(yytext());
          }
        case 38: break;
        case 4: 
          { handler.handleOperator(yytext());
          }
        case 39: break;
        case 13: 
          { 
          }
        case 40: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
