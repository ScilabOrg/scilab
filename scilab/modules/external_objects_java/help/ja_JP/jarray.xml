<?xml version="1.0" encoding="UTF-8"?>

<!--
*
* Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
* Copyright (C) 2010 - 2011 - Calixte DENIZET <calixte@contrib.scilab.org>
*
* This file must be used under the terms of the CeCILL.
* This source file is licensed as described in the file COPYING, which
* you should have received as part of this distribution.  The terms
* are also available at
* http://www.cecill.info/licences/Licence_CeCILL_V2.1-en.txt
*
*
-->

<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" version="5.0-subset Scilab" xml:lang="en" xml:id="jarray">
    
    <refnamediv>
        
        <refname>jarray</refname>
        
        <refpurpose>Java配列を作成</refpurpose>
        
    </refnamediv>
    
    <refsynopsisdiv>
        
        <title>呼び出し手順</title>
        
        <synopsis>
            
            jarray(className, n_1 [, n_2 [, ...]])
            
        </synopsis>
        
    </refsynopsisdiv>
    
    <refsection>
        
        <title>パラメータ</title>
        
        <variablelist>
            
            <varlistentry>
                
                <term>className</term>
                
                <listitem>
                    
                    <para>クラス名を指定する文字列</para>
                    
                </listitem>
                
            </varlistentry>
            
            <varlistentry>
                
                <term>n_i</term>
                
                <listitem>
                    
                    <para>配列の次元を指定する整数</para>
                    
                </listitem>
                
            </varlistentry>
            
        </variablelist>
        
    </refsection>
    
    <refsection>
        
        <title>説明</title>
        
        <para>
            
            className 型の多次元配列 n_1x...xn_pを作成します.
            
            配列の要素は従来のScilab表記によりアクセスでき,
            
            添字は1から始まるScilab表記に従います.
            
        </para>
        
        <para>
            
            className は以下の基本データ型のどれかを指定します:
            
            double, int, boolean, short, long, float, char および byte.
            
        </para>
        
    </refsection>
    
    <refsection>
        
        <title>例</title>
        
        <programlisting role="example"><![CDATA[
               a = jarray("java.lang.String", 2, 2, 3);
               // 配列への挿入
               a(1, 1, 3) = "Hi Jims !";
               a(2, 1, 3) = "Hi Jims again !!"

               // 配列の抽出
               length(a(2, 1, 3));
               a(2, 1, 3)
      ]]></programlisting>
        
    </refsection>
    
    <refsection>
        
        <title>履歴</title>
        
        <revhistory>
            
            <revision>
                
                <revnumber>5.5.0</revnumber>
                
                <revremark>
                    
                    関数が導入されました. 'JIMS'モジュールに基づきます.
                    
                    JIMSモジュールとの動作上の主な違いは,
                    
                    <link linkend="jautoUnwrap">jautoUnwrap</link>がデフォルトで
                    
                    有効になっていることです.
                    
                </revremark>
                
            </revision>
            
        </revhistory>
        
    </refsection>
    
</refentry>



