<?xml version="1.0" encoding="utf-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2015  - Scilab Enterprises - Antoine ELIAS
 *
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at
 * http://www.cecill.info/licences/Licence_CeCILL_V2.1-en.txt
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:ns5="http://www.w3.org/1999/xhtml" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:id="api_integer" xml:lang="en">
    <refnamediv>
        <refname>API integer functions</refname>
        <para>This page lists all the functions to manipulate Scilab native objects containing integers</para>
        <para></para>
    </refnamediv>
    <refsynopsisdiv>
        <literal>scilabVar scilab_getIntegerPrecision(scilabEnv env, scilabVar)</literal>
        <para>Return precision of an integer variable <literal>var</literal>.</para>
        <literallayout>
<link linkend="scilabVar"><command>scilabVar</command></link> <varname>scilab_isInt8</varname>(<link linkend="scilabEnv"><command>scilabEnv</command></link> env, <link linkend="scilabVar"><command>scilabVar</command></link> var)
<link linkend="scilabVar"><command>scilabVar</command></link> <varname>scilab_isInt16</varname>(<link linkend="scilabEnv"><command>scilabEnv</command></link> env, <link linkend="scilabVar"><command>scilabVar</command></link> var)
<link linkend="scilabVar"><command>scilabVar</command></link> <varname>scilab_isInt32</varname>(<link linkend="scilabEnv"><command>scilabEnv</command></link> env, <link linkend="scilabVar"><command>scilabVar</command></link> var)
<link linkend="scilabVar"><command>scilabVar</command></link> <varname>scilab_isInt64</varname>(<link linkend="scilabEnv"><command>scilabEnv</command></link> env, <link linkend="scilabVar"><command>scilabVar</command></link> var)
<link linkend="scilabVar"><command>scilabVar</command></link> <varname>scilab_isUnsignedInt8</varname>(<link linkend="scilabEnv"><command>scilabEnv</command></link> env, <link linkend="scilabVar"><command>scilabVar</command></link> var)
<link linkend="scilabVar"><command>scilabVar</command></link> <varname>scilab_isUnsignedInt16</varname>(<link linkend="scilabEnv"><command>scilabEnv</command></link> env, <link linkend="scilabVar"><command>scilabVar</command></link> var)
<link linkend="scilabVar"><command>scilabVar</command></link> <varname>scilab_isUnsignedInt32</varname>(<link linkend="scilabEnv"><command>scilabEnv</command></link> env, <link linkend="scilabVar"><command>scilabVar</command></link> var)
<link linkend="scilabVar"><command>scilabVar</command></link> <varname>scilab_isUnsignedInt64</varname>(<link linkend="scilabEnv"><command>scilabEnv</command></link> env, <link linkend="scilabVar"><command>scilabVar</command></link> var)
        </literallayout>
        <para>Check if variable is an integer with asked precision.</para>
        <para></para>
        <literal>scilabVar scilab_createIntegerMatrix(scilabEnv env, int prec, int dim, const int* dims)</literal>
        <para>Create a matrix of integer with <literal>dim</literal> dimensions of size <literal>M(dims[0], dims[1], ..., dims[dim-1])</literal>.</para>
        <para><literal>prec</literal> parameter give precision of integer: </para>
        <variablelist>
            <varlistentry>
                <term>SCI_INT8</term>
                <listitem><para>integer 8-bits</para></listitem>
            </varlistentry>
            <varlistentry>
                <term>SCI_INT16</term>
                <listitem><para>Integer 16-bits</para></listitem>
            </varlistentry>
            <varlistentry>
                <term>SCI_INT32</term>
                 <listitem><para>Integer 32-bits</para></listitem>
            </varlistentry>
            <varlistentry>
                <term>SCI_INT64</term>
                 <listitem><para>Integer 64-bits</para></listitem>
            </varlistentry>
            <varlistentry>
                <term>SCI_UINT8</term>
                <listitem><para>Unsigned integer 8-bits</para></listitem>
            </varlistentry>
            <varlistentry>
                <term>SCI_UINT16</term>
                <listitem><para>Unsigned integer 16-bits</para></listitem>
            </varlistentry>
            <varlistentry>
                <term>SCI_UINT32</term>
                <listitem><para>Unsigned integer 32-bits</para></listitem>
            </varlistentry>
            <varlistentry>
                <term>SCI_UINT64</term>
                <listitem><para>Unsigned integer 64-bits</para></listitem>
            </varlistentry>
        </variablelist>
        <para></para>
        <literal>scilabVar scilab_createIntegerMatrix8(scilabEnv env, int prec, int dim, const int* dims)</literal>
        <literal>scilabVar scilab_createIntegerMatrix16(scilabEnv env, int prec, int dim, const int* dims)</literal>
        <literal>scilabVar scilab_createIntegerMatrix32(scilabEnv env, int prec, int dim, const int* dims)</literal>
        <literal>scilabVar scilab_createIntegerMatrix64(scilabEnv env, int prec, int dim, const int* dims)</literal>
        <literal>scilabVar scilab_createUnsignedIntegerMatrix8(scilabEnv env, int prec, int dim, const int* dims)</literal>
        <literal>scilabVar scilab_createUnsignedIntegerMatrix16(scilabEnv env, int prec, int dim, const int* dims)</literal>
        <literal>scilabVar scilab_createUnsignedIntegerMatrix32(scilabEnv env, int prec, int dim, const int* dims)</literal>
        <literal>scilabVar scilab_createUnsignedIntegerMatrix64(scilabEnv env, int prec, int dim, const int* dims)</literal>
        <para>Create a matrix of integer <literal>dim</literal> dimensions of size <literal>M(dims[0], dims[1], ..., dims[dim-1])</literal>.</para>
        <para>precision is specified in function name.</para>
        <para></para>
        <literal>scilabVar scilab_createHandleMatrix2d(scilabEnv env, int row, int col)</literal>
        <para>Create a matrix of handle with <literal>2</literal> dimensions <literal>M(row, col)</literal>.</para>
        <para></para>
        <literal>scilabVar scilab_createHandle(scilabEnv env, int val)</literal>
        <para>Create a scalar handle.</para>
        <para></para>
        <literal>api_return scilab_getHandleArray(scilabEnv env, scilabVar var, const int** vals)</literal>
        <para>Get pointer on array of handle variable <literal>var</literal>.</para>
        <para></para>
        <literal>api_return scilab_getHandle(scilabEnv env, scilabVar var, int* val)</literal>
        <para>Get value of handle variable <literal>var</literal>.</para>
        <para></para>
        <literal>api_return scilab_setHandleArray(scilabEnv env, scilabVar var, const int* vals)</literal>
        <para>Set values of handle variable <literal>var</literal>.</para>
        <para></para>
        <literal>api_return scilab_setHandle(scilabEnv env, scilabVar var, int val)</literal>
        <para>Set value of a scalar handle variable <literal>var</literal>.</para>
        <para></para>
    </refsynopsisdiv>
    <!--refsection>
        <title>Examples</title>
        <programlisting role="code_gateway">
            <![CDATA[
            ]]>
        </programlisting>
    </refsection>
    <refsection>
        <title>Scilab test script</title>
        <programlisting role="code_scilab">
            <![CDATA[
            ]]>
        </programlisting>
    </refsection-->
</refentry>
