<?xml version="1.0" encoding="utf-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2009  - DIGITEO - Antoine ELIAS
 * 
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at    
 * http://www.cecill.info/licences/Licence_CeCILL_V2.1-en.txt
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:ns5="http://www.w3.org/1999/xhtml" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:id="isListType" xml:lang="en">
    <refnamediv>
        <refname>isListType, isTListType, isMListType</refname>
        <refpurpose>
            Check if it is a list, mlist, tlist variable.
        </refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Calling Sequence</title>
        <synopsis>int isListType(void* _pvCtx, int* _piAddress)</synopsis>
        <synopsis>int isNamedListType(void* _pvCtx, const char* _pstName)</synopsis>
        <synopsis>int isTListType(void* _pvCtx, int* _piAddress)</synopsis>
        <synopsis>int isNamedTListType(void* _pvCtx, const char* _pstName)</synopsis>
        <synopsis>int isMListType(void* _pvCtx, int* _piAddress)</synopsis>
        <synopsis>int isNamedMListType(void* _pvCtx, const char* _pstName)</synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>Arguments</title>
        <variablelist>
            <varlistentry>
                <term>_pvCtx</term>
                <listitem>
                    <para>
                        Scilab environment pointer, pass in "pvApiCtx" provided by api_scilab.h.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>_piAddress</term>
                <listitem>
                    <para>
                        Position in the Scilab memory where you want to put the variable.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>_pstName</term>
                <listitem>
                    <para>
                        Name of the variable for "named" functions.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Return value</title>
        <para>1 if variable is a list type, otherwise 0</para>
    </refsection>
    <refsection>
        <title>Scilab test script</title>
        <programlisting role="code_scilab"><![CDATA[ 
fileData = [
'#include <api_scilab.h>'
'#include <Scierror.h>'
'#include <MALLOC.h>'
'/* ========================================================================== */'
'int sci_getListType(char *fname)'
'{'
'    int* piAddr = NULL;'
'    char pstRet[64];'
''
'    getVarAddressFromPosition(pvApiCtx, 1, &piAddr);'
''
'    if(isStringType(pvApiCtx, piAddr))'
'    {//named check'
'        char* pstVar = NULL;'
'        getAllocatedSingleString(pvApiCtx, piAddr, &pstVar);'
''
'        if(isNamedListType(pvApiCtx, pstVar))'
'        {'
'            sprintf(pstRet, ""%s"", ""isNamedList"");'
'        }'
'        else if(isNamedTListType(pvApiCtx, pstVar))'
'        {'
'            sprintf(pstRet, ""%s"", ""isNamedTList"");'
'        }'
'        else if(isNamedMListType(pvApiCtx, pstVar))'
'        {'
'            sprintf(pstRet, ""%s"", ""isNamedMList"");'
'        }'
'        else'
'        {'
'            sprintf(pstRet, ""%s"", ""unmanaged named type"");'
'        }'
'        FREE(pstVar);'
'    }'
'    else'
'    {'
'        if(isListType(pvApiCtx, piAddr))'
'        {'
'            sprintf(pstRet, ""%s"", ""isList"");'
'        }'
'        else if(isTListType(pvApiCtx, piAddr))'
'        {'
'            sprintf(pstRet, ""%s"", ""isTList"");'
'        }'
'        else if(isMListType(pvApiCtx, piAddr))'
'        {'
'            sprintf(pstRet, ""%s"", ""isMList"");'
'        }'
'        else'
'        {'
'            sprintf(pstRet, ""%s"", ""unmanaged type"");'
'        }'
'    }'
'    createSingleString(pvApiCtx, nbInputArgument(pvApiCtx) + 1, pstRet);'
'    AssignOutputVariable(pvApiCtx, 1) = nbInputArgument(pvApiCtx) + 1;'
'    return 0;'
'}'
]

currentPath = pwd();
mkdir(TMPDIR + "/getListType");
cd(TMPDIR + "/getListType");
mputl(fileData, "getListType.c");

ilib_verbose(0);
files = ['getListType.c'];
ilib_build('libgetListType', ['getListType', 'sci_getListType'], files, []);
exec loader.sce;

a = list();
b = tlist("test");
c = mlist("test");
d = 1;

assert_checkequal(getListType(a), "isList");
assert_checkequal(getListType(b), "isTList");
assert_checkequal(getListType(c), "isMList");
assert_checkequal(getListType(d), "unmanaged type");

assert_checkequal(getListType("a"), "isNamedList");
assert_checkequal(getListType("b"), "isNamedTList");
assert_checkequal(getListType("c"), "isNamedMList");
assert_checkequal(getListType("d"), "unmanaged named type");

//unload lib
[bOK, ilib] = c_link('libgetListType');
if bOK then
  ulink(ilib);
end

cd(currentPath);
]]></programlisting>
    </refsection>
</refentry>
