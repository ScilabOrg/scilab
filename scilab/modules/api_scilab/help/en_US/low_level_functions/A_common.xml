<?xml version="1.0" encoding="utf-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2015  - Scilab Enterprises - Antoine ELIAS
 *
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at
 * http://www.cecill.info/licences/Licence_CeCILL_V2.1-en.txt
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:ns5="http://www.w3.org/1999/xhtml" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:id="api_common" xml:lang="en">
    <refnamediv>
        <refname>API common functions</refname>
        <para>This page lists all the functions to get information about Scilab native objects.</para>
        <para></para>
    </refnamediv>
    <refsynopsisdiv>
        <literal><link linkend="scilabVar"><command>scilabVar</command></link> <varname>scilab_getVar</varname>(const wchar_t* name)</literal>
        <para>Return variable called <varname>name</varname>, NULL if variable does not exist.</para>
        <para></para>
        <literal><link linkend="scilabVar"><command>scilabVar</command></link> <varname>scilab_getClone</varname>(<link linkend="scilabEnv"><command>scilabEnv</command></link> env, <link linkend="scilabVar"><command>scilabVar</command></link> var)</literal>
        <para>Return a copie of <varname>var</varname>.</para>
        <para></para>
        <literal>int <varname>scilab_getType</varname>(<link linkend="scilabEnv"><command>scilabEnv</command></link> env, <link linkend="scilabVar"><command>scilabVar</command></link> var)</literal>
        <para>Get type of <varname>var</varname>. see <link linkend="sci_types"><command>types</command></link> help page.</para>
        <para></para>
        <literallayout>
int <varname>scilab_isDouble</varname>(<link linkend="scilabEnv"><command>scilabEnv</command></link> env, <link linkend="scilabVar"><command>scilabVar</command></link> var)
int <varname>scilab_isBoolean</varname>(<link linkend="scilabEnv"><command>scilabEnv</command></link> env, <link linkend="scilabVar"><command>scilabVar</command></link> var)
int <varname>scilab_isString</varname>(<link linkend="scilabEnv"><command>scilabEnv</command></link> env, <link linkend="scilabVar"><command>scilabVar</command></link> var)
int <varname>scilab_isCell</varname>(<link linkend="scilabEnv"><command>scilabEnv</command></link> env, <link linkend="scilabVar"><command>scilabVar</command></link> var)
int <varname>scilab_isInt</varname>(<link linkend="scilabEnv"><command>scilabEnv</command></link> env, <link linkend="scilabVar"><command>scilabVar</command></link> var)
int <varname>scilab_isPoly</varname>(<link linkend="scilabEnv"><command>scilabEnv</command></link> env, <link linkend="scilabVar"><command>scilabVar</command></link> var)
int <varname>scilab_isList</varname>(<link linkend="scilabEnv"><command>scilabEnv</command></link> env, <link linkend="scilabVar"><command>scilabVar</command></link> var)
int <varname>scilab_isTList</varname>(<link linkend="scilabEnv"><command>scilabEnv</command></link> env, <link linkend="scilabVar"><command>scilabVar</command></link> var)
int <varname>scilab_isMList</varname>(<link linkend="scilabEnv"><command>scilabEnv</command></link> env, <link linkend="scilabVar"><command>scilabVar</command></link> var)
int <varname>scilab_isHandle</varname>(<link linkend="scilabEnv"><command>scilabEnv</command></link> env, <link linkend="scilabVar"><command>scilabVar</command></link> var)
int <varname>scilab_isStruct</varname>(<link linkend="scilabEnv"><command>scilabEnv</command></link> env, <link linkend="scilabVar"><command>scilabVar</command></link> var)
int <varname>scilab_isCell</varname>(<link linkend="scilabEnv"><command>scilabEnv</command></link> env, <link linkend="scilabVar"><command>scilabVar</command></link> var)
        </literallayout>
        <para>Return 1 if variable <varname>var</varname> has the right type.</para>
        <para></para>
        <literal>int <varname>scilab_isComplex</varname>(<link linkend="scilabEnv"><command>scilabEnv</command></link> env, <link linkend="scilabVar"><command>scilabVar</command></link> var)</literal>
        <para>Return 1 if variable <varname>var</varname> is complex.</para>
        <para></para>
        <literal>int <varname>scilab_getDim</varname>(<link linkend="scilabEnv"><command>scilabEnv</command></link> env, <link linkend="scilabVar"><command>scilabVar</command></link> var)</literal>
        <para>Return the number of dimension of <varname>var</varname>. Note that scalar variables are 2d matrix of dimension (1, 1)</para>
        <para></para>
        <literal>int <varname>scilab_getDim2d</varname>(<link linkend="scilabEnv"><command>scilabEnv</command></link> env, <link linkend="scilabVar"><command>scilabVar</command></link> var, int* row, int* col)</literal>
        <para>Return dimensions of a 2d variable <varname>var</varname> in <varname>row</varname> and <varname>col</varname>.</para>
        <para></para>
        <literal>int <varname>scilab_getDimArray</varname>(<link linkend="scilabEnv"><command>scilabEnv</command></link> env, <link linkend="scilabVar"><command>scilabVar</command></link> var, const int** dims)</literal>
        <para>Return pointer on array of dimensions of a variable <varname>var</varname> in <varname>dims</varname>.</para>
        <para></para>
        <literal>int <varname>scilab_getSize</varname>(<link linkend="scilabEnv"><command>scilabEnv</command></link> env, <link linkend="scilabVar"><command>scilabVar</command></link> var)</literal>
        <para>Return size of variable <varname>var</varname>.</para>
        <para>For matrix type is the result of product of dimension and for others like list is the item count.</para>
        <para></para>
        <literal>int <varname>scilab_isEmpty</varname>(<link linkend="scilabEnv"><command>scilabEnv</command></link> env, <link linkend="scilabVar"><command>scilabVar</command></link> var)</literal>
        <para>Return 1 for empty matrix and empty list.</para>
        <para></para>
        <literal>int <varname>scilab_isMatrix2d</varname>(<link linkend="scilabEnv"><command>scilabEnv</command></link> env, <link linkend="scilabVar"><command>scilabVar</command></link> var)</literal>
        <para>Return 1 for matrix with 2 dimensions and scalar.</para>
        <para></para>
        <literallayout>
int <varname>scilab_isVector</varname>(<link linkend="scilabEnv"><command>scilabEnv</command></link> env, <link linkend="scilabVar"><command>scilabVar</command></link> var)
int <varname>scilab_isNVector</varname>(<link linkend="scilabEnv"><command>scilabEnv</command></link> env, <link linkend="scilabVar"><command>scilabVar</command></link> var, int n)
int <varname>scilab_isRowVector</varname>(<link linkend="scilabEnv"><command>scilabEnv</command></link> env, <link linkend="scilabVar"><command>scilabVar</command></link> var)
int <varname>scilab_isColVector</varname>(<link linkend="scilabEnv"><command>scilabEnv</command></link> env, <link linkend="scilabVar"><command>scilabVar</command></link> var)
        </literallayout>
        <para>Use to check if variable <varname>var</varname> is a vector. <varname>n</varname> is the dimension to check, <code>scilab_isRowVector</code> is equivalente to <code>scilab_isNVector(env, var, 1)</code></para>
        <para></para>
        <literal>int <varname>scilab_isHypermat</varname>(<link linkend="scilabEnv"><command>scilabEnv</command></link> env, <link linkend="scilabVar"><command>scilabVar</command></link> var)</literal>
        <para>Return 1 for matrix with dimensions count is up to 2.</para>
        <para></para>
    </refsynopsisdiv>
    <refsection role="see also">
        <title>See Also</title>
        <simplelist type="inline">
            <member>
                <link linkend="api_double">API double</link>
            </member>
            <member>
                <link linkend="api_string">API string</link>
            </member>
            <member>
                <link linkend="api_string">API boolean</link>
            </member>
            <member>
                <link linkend="api_string">API int</link>
            </member>
            <member>
                <link linkend="api_string">API poly</link>
            </member>
            <member>
                <link linkend="api_string">API handle</link>
            </member>
            <member>
                <link linkend="api_string">API list</link>
            </member>
            <member>
                <link linkend="api_string">API struct</link>
            </member>
            <member>
                <link linkend="api_string">API cell</link>
            </member>
        </simplelist>
    </refsection>
</refentry>
