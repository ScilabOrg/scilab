<?xml version="1.0" encoding="utf-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2009  - DIGITEO - Antoine ELIAS
 * 
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at    
 * http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
 *
 -->
<refentry version="5.0-subset Scilab" xml:id="Pointer_writing_API"
          xml:lang="en" xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:ns5="http://www.w3.org/1999/xhtml"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:db="http://docbook.org/ns/docbook">

    <refnamediv>
        <refname>Pointer writing (Scilab gateway)</refname>
        <refpurpose>
            How to write pointer in a gateway.
        </refpurpose>
    </refnamediv>
    <refsection>
        <title>Description</title>
        <para>This help describes how pointer can be handled through the Scilab API.</para>
        <para>Two types of functions can be used to write in the memory of Scilab.</para>
    </refsection>
    <refsection>
        <title>Create from existing data</title>
        <programlisting role=""><![CDATA[
int createPointer(int* _piAddress, void* _pvPtr)
]]></programlisting>
    </refsection>
    <refsection>
        <title>Parameters</title>
        <variablelist>
            <varlistentry>
                <term>_piAddress</term>
                <listitem>
                    <para>
                        Address of the Scilab variable.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>_pvPtr</term>
                <listitem>
                    <para>
                        Address of pointer.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Write directly in Scilab memory</title>
        <programlisting role=""><![CDATA[
int allocPointer(int* _piAddress, void** _pvPtr)
]]></programlisting>
    </refsection>
    <refsection>
        <title>Parameters</title>
        <variablelist>
            <varlistentry>
                <term>_piAddress</term>
                <listitem>
                    <para>
                        Address of the Scilab variable.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>_pvPtr</term>
                <listitem>
                    <para>
                        Return address of pointer.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <!--File_gateway: SCI/modules/core/tests/unit_tests/pointer_reading_api.c-->
        <!--File_scilab: SCI/modules/core/tests/unit_tests/pointer_reading_api.tst-->
        <!--Lib_name: pointer_reading-->
        <!--Func_list: read_pointer-->
        <title>Gateway Source</title>
        <programlisting role="code_gateway">
            <![CDATA[
int read_pointer(char *fname,unsigned long fname_len)
{
    int iRet    = 0;

    CheckRhs(0,1);
    CheckLhs(1,1);

    if(Rhs == 0)
    {//create mode
        double* pdblData    = (double*)malloc(sizeof(double) * 2 * 2);
        pdblData[0]         = 1;
        pdblData[1]         = 3;
        pdblData[2]         = 2;
        pdblData[3]         = 4;

        iRet = createPointer(Rhs + 1, (void*)pdblData);
    }
    else
    {//read mode
        int* piAddr         = NULL;
        void* pvPtr         = NULL;
        double* pdblData    = NULL;

        iRet = getVarAddressFromPosition(1, &piAddr);
        if(iRet)
        {
            return 1;
        }

        if(getVarType(piAddr) != sci_lufact_pointer)
        {
            return 1;
        }

        iRet = getPointer(piAddr, &pvPtr);
        if(iRet)
        {
            return 1;
        }

        pdblData = (double *) ((unsigned long int)((double*)pvPtr)[0]);

        iRet = createMatrixOfDouble(Rhs + 1, 2, 2, pdblData);
    }

    if(iRet)
    {
        return 1;
    }

    LhsVar(1) = Rhs + 1;
    return 0;
}
            ]]>
        </programlisting>
    </refsection>

    <refsection>
        <title>Scilab test script</title>
        <programlisting role="code_scilab">
            <![CDATA[
b_ref = [1,2;3,4];
a = read_pointer();
b = read_pointer(a);
if or(b <> b_ref) then error("failed"), end
            ]]>
        </programlisting>
    </refsection>
</refentry>
