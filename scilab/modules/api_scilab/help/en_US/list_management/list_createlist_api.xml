<?xml version="1.0" encoding="utf-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2009  - DIGITEO - Antoine ELIAS
 * 
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at    
 * http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
 *
 -->
<refentry version="5.0-subset Scilab" xml:id="list_createlist_API"
          xml:lang="en" xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:ns5="http://www.w3.org/1999/xhtml"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:db="http://docbook.org/ns/docbook">

    <refnamediv>
        <refname>Create List (Scilab gateway)</refname>

        <refpurpose>
            How to get create a list in Scilab memory.
        </refpurpose>
    </refnamediv>
     <refsynopsisdiv>
      <title>Calling Sequence</title>
        <synopsis>
int createList(int _iVar, int _iNbItem, int** _piAddress)
int createTList(int _iVar, int _iNbItem, int** _piAddress)
int createMList(int _iVar, int _iNbItem, int** _piAddress)
        </synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>Parameters</title>
        <variablelist>
            <varlistentry>
                <term>_iVar</term>
                <listitem>
                    <para>
                        Position in the Scilab memory where you want to put the variable.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>_iNbItem</term>
                <listitem>
                    <para>
                        Number of items in the list.
                    </para>
                </listitem>
            </varlistentry>
             <varlistentry>
                <term>_piAddress</term>
                <listitem>
                    <para>
                        Return address of the list.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Description</title>
        <para>This help describes how to get the address of a list in a list.</para>
    </refsection>
    <refsection>
        <!--File_gateway: SCI/modules/core/tests/unit_tests/list_createlist_api.c-->
        <!--File_scilab: SCI/modules/core/tests/unit_tests/list_createlist_api.tst-->
        <!--Lib_name: list_createlist-->
        <!--Func_list: list_createlist-->
        <title>Gateway Source</title>
        <programlisting role="code_gateway">
            <![CDATA[
int list_createlist(char *fname,unsigned long fname_len)
{
    int iRet                = 0;

    int *piAddr             = NULL;

    double pdblData1[]      = {1,3,5,2,4,6};
    double pdblData2[]      = {6,4,2,5,3,1};
    char *pstData[]         = {"may","be","the","with","puffin","you"};
    short psData[]          = {1,4,2,5,3,6};
    double pdblPoly1[]      = {1};
    double pdblPoly2[]      = {-2,-1};
    double pdblPoly3[]      = {1,2,3};
    double pdblPoly4[]      = {-4,-3,-2,-1};
    double pdblPoly5[]      = {1,2,3,4,5};
    double pdblPoly6[]      = {-6,-5,-4,-3,-2,-1};
    double *pdblPoly[]      = {pdblPoly1, pdblPoly3, pdblPoly5, pdblPoly2, pdblPoly4, pdblPoly6};
    int piCoef[]            = {1,3,5,2,4,6};
    int piNbItemRow[]       = {1,2,1};
    int piColPos[]          = {8,4,7,2};
    double pdblSReal[]      = {1,2,3,4};
    double pdblSImg[]       = {4,3,2,1};
    int piBool[]            = {1,0,1,0,1,0,1,0,1};

    iRet = createList(1, 8, &piAddr);
    if(iRet)
    {
        return 1;
    }

    iRet = createComplexMatrixOfDoubleInList(Rhs + 1, piAddr, 1, 3, 2, pdblData1, pdblData2);
    if(iRet)
    {
        return 1;
    }

    iRet = createMatrixOfStringInList(Rhs + 1, piAddr, 2, 2, 3, pstData);
    if(iRet)
    {
        return 1;
    }

    iRet = createMatrixOfInteger16InList(Rhs + 1, piAddr, 3, 2, 3, psData);
    if(iRet)
    {
        return 1;
    }

    iRet = createMatrixOfPolyInList(Rhs + 1, piAddr, 4, "x", 3, 2, piCoef, pdblPoly);
    if(iRet)
    {
        return 1;
    }

    iRet = createComplexSparseMatrixInList(Rhs + 1, piAddr, 5, 3, 10, 4, piNbItemRow, piColPos, pdblSReal, pdblSImg);
    if(iRet)
    {
        return 1;
    }

    iRet = createMatrixOfBooleanInList(Rhs + 1, piAddr, 6, 3, 3, piBool);
    if(iRet)
    {
        return 1;
    }

    iRet = createBooleanSparseMatrixInList(Rhs + 1, piAddr, 7, 3, 10, 4, piNbItemRow, piColPos);
    if(iRet)
    {
        return 1;
    }

    //add list in list
    iRet = createListInList(Rhs + 1, piAddr, 8, 2, &piChild);
    if(iRet)
    {
        return 1;
    }

    iRet = createMatrixOfDoubleInList(Rhs + 1, piChild, 1, 3, 2, pdblData1);
    if(iRet)
    {
        return 1;
    }

    iRet = createSparseMatrixInList(Rhs + 1, piChild, 2, 3, 10, 4, piNbItemRow, piColPos, pdblSReal);
    if(iRet)
    {
        return 1;
    }

    LhsVar(1) = 1;
    return 0;
}
        ]]>
        </programlisting>
    </refsection>

    <refsection>
        <title>Scilab test script</title>
        <programlisting role="code_scilab">
            <![CDATA[
size_ref    = 8;
type_ref    = ["constant","string","int16","polynomial", "sparse", "boolean", "boolean sparse", "list"];
dim_ref     = list([3,2],[2,3],[2,3],[3,2],[3,10],[3,3],[3,10],2);

l = tonio();
if size(l) <> size_ref then error("failed"), end
for i = 1 : size_ref
    if typeof(l(i)) <> type_ref(i) then error("failed"), end
    if size(l(i)) <> dim_ref(i) then error("failed"), end
end

            ]]>
        </programlisting>
    </refsection>
</refentry>
