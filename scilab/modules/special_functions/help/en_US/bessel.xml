<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2008 - INRIA
 * Copyright (C) 2012 - Scilab Enterprises - Adeline CARNIS
 * 
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at    
 * http://www.cecill.info/licences/Licence_CeCILL_V2.1-en.txt
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1999/xhtml" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org"  xml:id="bessel" xml:lang="en">
    <refnamediv xml:id="besseli">
        <refname>besseli</refname>
        <refpurpose>Modified Bessel functions of the first kind (I sub
            alpha).
        </refpurpose>
    </refnamediv>
    <refnamediv xml:id="besselj">
        <refname>besselj</refname>
        <refpurpose>Bessel functions of the first kind (J sub alpha).</refpurpose>
    </refnamediv>
    <refnamediv xml:id="besselk">
        <refname>besselk</refname>
        <refpurpose>Modified Bessel functions of the second kind (K sub
            alpha).
        </refpurpose>
    </refnamediv>
    <refnamediv xml:id="bessely">
        <refname>bessely</refname>
        <refpurpose>Bessel functions of the second kind (Y sub
            alpha).
        </refpurpose>
    </refnamediv>
    <refnamediv xml:id="besselh">
        <refname>besselh</refname>
        <refpurpose>Bessel functions of the third kind (aka Hankel
            functions)
        </refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Calling Sequence</title>
        <synopsis>y = besseli(alpha,x [,ice])
            y = besselj(alpha,x [,ice])
            y = besselk(alpha,x [,ice])
            y = bessely(alpha,x [,ice])
            y = besselh(alpha,x)
            y = besselh(alpha,K,x [,ice])
        </synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>Arguments</title>
        <variablelist>
            <varlistentry>
                <term>x</term>
                <listitem>
                    <para>real or complex vector.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>alpha</term>
                <listitem>
                    <para>real vector</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>ice</term>
                <listitem>
                    <para>integer flag, with default value 0</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>K</term>
                <listitem>
                    <para>integer, with possible values 1 or 2, the Hankel function
                        type.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Description</title>
        <itemizedlist>
            <listitem>
                <para>
                    <literal>besseli(alpha,x)</literal> computes modified Bessel
                    functions of the first kind (I sub alpha), for real order
                    <literal>alpha</literal> and argument <literal>x</literal>.
                    <literal>besseli(alpha,x,1)</literal> computes
                    <literal>besseli(alpha,x).*exp(-abs(real(x)))</literal>.
                </para>
            </listitem>
            <listitem>
                <para>
                    <literal>besselj(alpha,x)</literal> computes Bessel functions of
                    the first kind (J sub alpha), for real order <literal>alpha</literal>
                    and argument <literal>x</literal>.
                    <literal>besselj(alpha,x,1)</literal> computes
                    <literal>besselj(alpha,x).*exp(-abs(imag(x)))</literal>.
                </para>
            </listitem>
            <listitem>
                <para>
                    <literal>besselk(alpha,x)</literal> computes modified Bessel
                    functions of the second kind (K sub alpha), for real order
                    <literal>alpha</literal> and argument <literal>x</literal>.
                    <literal>besselk(alpha,x,1)</literal> computes
                    <literal>besselk(alpha,x).*exp(x)</literal>.
                </para>
            </listitem>
            <listitem>
                <para>
                    <literal>bessely(alpha,x)</literal> computes Bessel functions of
                    the second kind (Y sub alpha), for real order <literal>alpha</literal>
                    and argument <literal>x</literal>.
                    <literal>bessely(alpha,x,1)</literal> computes
                    <literal>bessely(alpha,x).*exp(-abs(imag(x)))</literal>.
                </para>
            </listitem>
            <listitem>
                <para>
                    <literal>besselh(alpha [,K] ,x)</literal> computes Bessel
                    functions of the third kind (Hankel function H1 or H2 depending on
                    <literal>K</literal>), for real order <literal>alpha</literal> and
                    argument <literal>x</literal>. If omitted <literal>K</literal> is
                    supposed to be equal to 1. <literal>besselh(alpha,1,x,1)</literal>
                    computes <literal>besselh(alpha,1,x).*exp(-%i*x)</literal> and
                    <literal>besselh(alpha,2,x,1)</literal> computes
                    <literal>besselh(alpha,2,x).*exp(%i*x)</literal>
                </para>
            </listitem>
        </itemizedlist>
    </refsection>
    <refsection>
        <title>Remarks</title>
        <para>
            If <literal>alpha</literal> and <literal>x</literal> are arrays of
            the same size, the result <literal>y</literal> is also that size. If
            either input is a scalar, it is expanded to the other input's size. If one
            input is a row vector and the other is a column vector, the
            result<literal>y</literal> is a two-dimensional table of function
            values.
        </para>
        <para>Y_alpha and J_alpha Bessel functions are 2 independent solutions of
            the Bessel 's differential equation :
        </para>
        <informalequation>
            <mediaobject>
                <imageobject>
                    <imagedata align="center" fileref="../mml/bessel_equation1.mml"/>
                </imageobject>
            </mediaobject>
        </informalequation>
        <para>K_alpha and I_alpha modified Bessel functions are 2 independant
            solutions of the modified Bessel 's differential equation :
        </para>
        <informalequation>
            <mediaobject>
                <imageobject>
                    <imagedata align="center" fileref="../mml/bessel_equation2.mml"/>
                </imageobject>
            </mediaobject>
        </informalequation>
        <para>H^1_alpha and H^2_alpha, the Hankel functions of first and second
            kind, are linear linear combinations of Bessel functions of the first and
            second kinds:
        </para>
        <informalequation>
            <mediaobject>
                <imageobject>
                    <imagedata align="center" fileref="../mml/bessel_equation3.mml"/>
                </imageobject>
            </mediaobject>
        </informalequation>
    </refsection>
    <refsection>
        <title>Examples</title>
        <programlisting role="example"><![CDATA[ 
//  besselI functions
// ==================
   x = linspace(0.01,10,5000)';
   clf()
   subplot(2,1,1)
   plot2d(x,besseli(0:4,x), style=2:6)
   legend('I'+string(0:4),2);
   xtitle("Some modified Bessel functions of the first kind")
   subplot(2,1,2)
   plot2d(x,besseli(0:4,x,1), style=2:6)
   legend('I'+string(0:4),1);
   xtitle("Some modified scaled Bessel functions of the first kind")
 ]]></programlisting>
        
        <scilab:image>
            x = linspace(0.01,10,5000)';
            clf()
            subplot(2,1,1)
            plot2d(x,besseli(0:4,x), style=2:6)
            legend('I'+string(0:4),2);
            xtitle("Some modified Bessel functions of the first kind")
            subplot(2,1,2)
            plot2d(x,besseli(0:4,x,1), style=2:6)
            legend('I'+string(0:4),1);
            xtitle("Some modified scaled Bessel functions of the first kind")
            
        </scilab:image>
        
        
        <programlisting role="example"><![CDATA[ 
// besselJ functions
// =================
   clf()
   x = linspace(0,40,5000)';
   plot2d(x,besselj(0:4,x), style=2:6, leg="J0@J1@J2@J3@J4")
   legend('I'+string(0:4),1);
   xtitle("Some Bessel functions of the first kind")
 ]]></programlisting>
        
        <scilab:image>
            x = linspace(0,40,5000)';
            plot2d(x,besselj(0:4,x), style=2:6, leg="J0@J1@J2@J3@J4")
            legend('I'+string(0:4),1);
            xtitle("Some Bessel functions of the first kind")
        </scilab:image>
        
        <programlisting role="example"><![CDATA[ 
// use the fact that J_(1/2)(x) = sqrt(2/(x pi)) sin(x)
// to compare the algorithm of besselj(0.5,x) with a more direct formula 
   x = linspace(0.1,40,5000)';
   y1 = besselj(0.5, x);
   y2 = sqrt(2 ./(%pi*x)).*sin(x);
   er = abs((y1-y2)./y2);
   ind = find(er > 0 & y2 ~= 0);
   clf()
   subplot(2,1,1)
   plot2d(x,y1,style=2)
   xtitle("besselj(0.5,x)")
   subplot(2,1,2)
   plot2d(x(ind), er(ind), style=2, logflag="nl")
   xtitle("relative error between 2 formulae for besselj(0.5,x)") 
 ]]></programlisting>
        
        <scilab:image><![CDATA[ 
   x = linspace(0.1,40,5000)';
   y1 = besselj(0.5, x);
   y2 = sqrt(2 ./(%pi*x)).*sin(x);
   er = abs((y1-y2)./y2);
   ind = find(er > 0 & y2 ~= 0);
   clf()
   subplot(2,1,1)
   plot2d(x,y1,style=2)
   xtitle("besselj(0.5,x)")
   subplot(2,1,2)
   plot2d(x(ind), er(ind), style=2, logflag="nl")
   xtitle("relative error between 2 formulae for besselj(0.5,x)") 
 ]]></scilab:image>
        
        <programlisting role="example"><![CDATA[ 
// besselK functions
// =================
   x = linspace(0.01,10,5000)';
   clf()
   subplot(2,1,1)
   plot2d(x,besselk(0:4,x), style=0:4, rect=[0,0,6,10])
   legend('K'+string(0:4),1);
   xtitle("Some modified Bessel functions of the second kind")
   subplot(2,1,2)
   plot2d(x,besselk(0:4,x,1), style=0:4, rect=[0,0,6,10])
   legend('K'+string(0:4),1);
   xtitle("Some modified scaled Bessel functions of the second kind")
 ]]></programlisting>
        
        <scilab:image>
            x = linspace(0.01,10,5000)';
            clf()
            subplot(2,1,1)
            plot2d(x,besselk(0:4,x), style=0:4, rect=[0,0,6,10])
            legend('K'+string(0:4),1);
            xtitle("Some modified Bessel functions of the second kind")
            subplot(2,1,2)
            plot2d(x,besselk(0:4,x,1), style=0:4, rect=[0,0,6,10])
            legend('K'+string(0:4),1);
            xtitle("Some modified scaled Bessel functions of the second kind")
        </scilab:image>
        
        <programlisting role="example"><![CDATA[ 
// besselY functions
// =================
   x = linspace(0.1,40,5000)'; // Y Bessel functions are unbounded  for x -> 0+
   clf()
   plot2d(x,bessely(0:4,x), style=0:4, rect=[0,-1.5,40,0.6])
   legend('Y'+string(0:4),4);
   xtitle("Some Bessel functions of the second kind")
 ]]></programlisting>
        
        <scilab:image>
            x = linspace(0.1,40,5000)'; // Y Bessel functions are unbounded  for x -> 0+
            clf()
            plot2d(x,bessely(0:4,x), style=0:4, rect=[0,-1.5,40,0.6])
            legend('Y'+string(0:4),4);
            xtitle("Some Bessel functions of the second kind")
        </scilab:image>
        
        <programlisting role="example"><![CDATA[ 
// besselH functions
// =================
   x=-4:0.025:2; y=-1.5:0.025:1.5;
   [X,Y] = ndgrid(x,y);
   H = besselh(0,1,X+%i*Y); 
   clf();f=gcf();
   xset("fpf"," ")
   f.color_map=jetcolormap(16);
   contour2d(x,y,abs(H),0.2:0.2:3.2,strf="034",rect=[-4,-1.5,3,1.5])
   legends(string(0.2:0.2:3.2),1:16,"ur")
   xtitle("Level curves of |H1(0,z)|")
 ]]></programlisting>
        
        <scilab:image>
            x=-4:0.025:2; y=-1.5:0.025:1.5;
            [X,Y] = ndgrid(x,y);
            H = besselh(0,1,X+%i*Y); 
            clf();f=gcf();
            xset("fpf"," ")
            f.color_map=jetcolormap(16);
            contour2d(x,y,abs(H),0.2:0.2:3.2,strf="034",rect=[-4,-1.5,3,1.5])
            legends(string(0.2:0.2:3.2),1:16,"ur")
            xtitle("Level curves of |H1(0,z)|")
        </scilab:image>
        
    </refsection>
    <refsection>
        <title>Used Functions</title>
        <para>The source codes can be found in SCI/modules/special_functions/src/fortran/slatec and
            SCI/modules/special_functions/src/fortran
        </para>
        <para>Slatec : dbesi.f, zbesi.f, dbesj.f, zbesj.f, dbesk.f, zbesk.f,
            dbesy.f, zbesy.f, zbesh.f
        </para>
        <para>Drivers to extend definition area (Serge Steer INRIA): dbesig.f,
            zbesig.f, dbesjg.f, zbesjg.f, dbeskg.f, zbeskg.f, dbesyg.f, zbesyg.f,
            zbeshg.f
        </para>
    </refsection>
</refentry>
