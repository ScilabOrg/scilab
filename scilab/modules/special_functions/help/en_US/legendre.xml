<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2008 - INRIA
 * 
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at    
 * http://www.cecill.info/licences/Licence_CeCILL_V2.1-en.txt
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1999/xhtml" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org"  xml:id="legendre" xml:lang="en">
    <refnamediv>
        <refname>legendre</refname>
        <refpurpose>associated Legendre functions</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Calling Sequence</title>
        <synopsis>y = legendre(n,m,x [,normflag])</synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>Arguments</title>
        <variablelist>
            <varlistentry>
                <term>n</term>
                <listitem>
                    <para>non negative integer or vector of non negative integers
                        regularly spaced with increment equal to 1
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>m</term>
                <listitem>
                    <para>non negative integer or vector of non negative integers
                        regularly spaced with increment equal to 1
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>x</term>
                <listitem>
                    <para>
                        real matrix(elements of <literal>x</literal> must be in
                        the <literal>[-1,1]</literal> interval)
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>normflag</term>
                <listitem>
                    <para>(optional) scalar string</para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Description</title>
        <para>
            When <literal>n</literal> and <literal>m</literal> are scalars,
            <literal>legendre(n,m,x)</literal> evaluates the associated Legendre
            function Pnm(x) at all the elements of <literal>x</literal>. The
            definition used is :
        </para>
        <informalequation>
            <mediaobject>
                <imageobject>
                    <imagedata align="center" fileref="../mml/legendre_equation1.mml"/>
                </imageobject>
            </mediaobject>
        </informalequation>
        <para>
            where <literal>Pn</literal> is the Legendre polynomial of degree
            <literal>n</literal>. So <literal>legendre(n,0,x)</literal> evaluates the
            Legendre polynomial Pn(x) at all the elements of
            <literal>x</literal>.
        </para>
        <para>When the normflag is equal to "norm" you get a normalized version
            (without the <literal>(-1)^m</literal> factor), precisely :
        </para>
        <informalequation>
            <mediaobject>
                <imageobject>
                    <imagedata align="center" fileref="../mml/legendre_equation2.mml"/>
                </imageobject>
            </mediaobject>
        </informalequation>
        <para>which is useful to compute spherical harmonic functions (see Example
            3):
        </para>
        <para>For efficiency, one of the two first arguments may be a vector, for
            instance <literal>legendre(n1:n2,0,x)</literal> evaluates all the Legendre
            polynomials of degree <emphasis>n1, n1+1, ..., n2</emphasis> at the
            elements of <literal>x</literal> and
            <literal>legendre(n,m1:m2,x)</literal> evaluates all the Legendre
            associated functions Pnm for <emphasis>m=m1, m1+1, ..., m2</emphasis> at
            <literal>x</literal>.
        </para>
    </refsection>
    <refsection>
        <title>Output format</title>
        <para>
            In any case, the format of <literal>y</literal> is :
        </para>
        <programlisting role="no-scilab-exec"><![CDATA[ 
max(length(n),length(m)) x length(x)
 ]]></programlisting>
        <para>and :</para>
        <programlisting role="no-scilab-exec"><![CDATA[ 
y(i,j) = P(n(i),m;x(j))   if n is a vector
y(i,j) = P(n,m(i);x(j))   if m is a vector
y(1,j) = P(n,m;x(j))      if both n and m are scalars
 ]]></programlisting>
        <para>
            so that <literal>x</literal> is preferably a row vector but any
            <literal>mx x nx</literal> matrix is expected and considered as an
            <literal>1 x (mx * nx)</literal> matrix, reshaped following the column
            order.
        </para>
    </refsection>
    <refsection>
        <title>Examples</title>
        <programlisting role="example"><![CDATA[
// example 1 : plot of the 6 first Legendre polynomials on (-1,1)
l = nearfloat("pred",1);
x = linspace(-l,l,200)';
y = legendre(0:5, 0,  x);
clf()
plot2d(x,y', leg="p0@p1@p2@p3@p4@p5@p6")
xtitle("the 6 th first Legendre polynomials")
 ]]></programlisting>
        <scilab:image>
            l = nearfloat("pred",1);
            x = linspace(-l,l,200)';
            y = legendre(0:5, 0,  x);
            plot2d(x,y', leg="p0@p1@p2@p3@p4@p5@p6")
            xtitle("the 6 th first Legendre polynomials")
        </scilab:image>
        <programlisting role="example"><![CDATA[
// example 2 : plot of the associated Legendre functions of degree 5 
l = nearfloat("pred",1);
x = linspace(-l,l,200)';
y = legendre(5, 0:5, x, "norm");
clf()
plot2d(x,y', leg="p5,0@p5,1@p5,2@p5,3@p5,4@p5,5")
xtitle("the (normalized) associated Legendre functions of degree 5")
 ]]></programlisting>
        <scilab:image>
            l = nearfloat("pred",1);
            x = linspace(-l,l,200)';
            y = legendre(5, 0:5, x, "norm");
            plot2d(x,y', leg="p5,0@p5,1@p5,2@p5,3@p5,4@p5,5")
            xtitle("the (normalized) associated Legendre functions of degree 5")
        </scilab:image>
        <programlisting role="example"><![CDATA[
// example 3 : define then plot a spherical harmonic
// 3-1 : define the function Ylm
function [y] = Y(l,m,theta,phi)
  // theta may be a scalar or a row vector
  // phi may be a scalar or a column vector
  if m >= 0 then
     y = (-1)^m/(sqrt(2*%pi))*exp(%i*m*phi)*legendre(l, m, cos(theta), "norm")
  else
     y = 1/(sqrt(2*%pi))*exp(%i*m*phi)*legendre(l, -m, cos(theta), "norm")
  end
endfunction

// 3.2 : define another useful function
function [x,y,z] = sph2cart(theta,phi,r)
  // theta row vector      1 x nt
  // phi   column vector  np x 1
  // r     scalar or np x nt matrix (r(i,j) the length at phi(i) theta(j))
  x = r.*(cos(phi)*sin(theta));
  y = r.*(sin(phi)*sin(theta));
  z = r.*(ones(phi)*cos(theta));
endfunction

// 3-3 plot Y31(theta,phi)
l = 3; m = 1;
theta = linspace(0.1,%pi-0.1,60);
phi = linspace(0,2*%pi,120)';
f = Y(l,m,theta,phi);
[x1,y1,z1] = sph2cart(theta,phi,abs(f));       [xf1,yf1,zf1] = nf3d(x1,y1,z1);
[x2,y2,z2] = sph2cart(theta,phi,abs(real(f))); [xf2,yf2,zf2] = nf3d(x2,y2,z2);
[x3,y3,z3] = sph2cart(theta,phi,abs(imag(f))); [xf3,yf3,zf3] = nf3d(x3,y3,z3);

clf()
subplot(1,3,1)
plot3d(xf1,yf1,zf1,flag=[2 4 4]); xtitle("|Y31(theta,phi)|")
subplot(1,3,2)
plot3d(xf2,yf2,zf2,flag=[2 4 4]); xtitle("|Real(Y31(theta,phi))|")
subplot(1,3,3)
plot3d(xf3,yf3,zf3,flag=[2 4 4]); xtitle("|Imag(Y31(theta,phi))|")
 ]]></programlisting>
        <!-- Commented. Too slow
        <scilab:image>
function [y] = Y(l,m,theta,phi)
  if m >= 0 then
     y = (-1)^m/(sqrt(2*%pi))*exp(%i*m*phi)*legendre(l, m, cos(theta), "norm")
  else
     y = 1/(sqrt(2*%pi))*exp(%i*m*phi)*legendre(l, -m, cos(theta), "norm")
  end
endfunction

function [x,y,z] = sph2cart(theta,phi,r)
  x = r.*(cos(phi)*sin(theta));
  y = r.*(sin(phi)*sin(theta));
  z = r.*(ones(phi)*cos(theta));
endfunction

l = 3; m = 1;
theta = linspace(0.1,%pi-0.1,60);
phi = linspace(0,2*%pi,120)';
f = Y(l,m,theta,phi);
[x1,y1,z1] = sph2cart(theta,phi,abs(f));       [xf1,yf1,zf1] = nf3d(x1,y1,z1);
[x2,y2,z2] = sph2cart(theta,phi,abs(real(f))); [xf2,yf2,zf2] = nf3d(x2,y2,z2);
[x3,y3,z3] = sph2cart(theta,phi,abs(imag(f))); [xf3,yf3,zf3] = nf3d(x3,y3,z3);

clf()
subplot(1,3,1)
plot3d(xf1,yf1,zf1,flag=[2 4 4]); xtitle("|Y31(theta,phi)|")
subplot(1,3,2)
plot3d(xf2,yf2,zf2,flag=[2 4 4]); xtitle("|Real(Y31(theta,phi))|")
subplot(1,3,3)
plot3d(xf3,yf3,zf3,flag=[2 4 4]); xtitle("|Imag(Y31(theta,phi))|")
        </scilab:image>
-->
    </refsection>
</refentry>
