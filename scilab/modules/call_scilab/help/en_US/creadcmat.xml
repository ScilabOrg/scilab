<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2009  - DIGITEO - Sylvestre LEDRU
 * 
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at    
 * http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
 *
 -->
<refentry version="5.0-subset Scilab" xml:id="creadcmat" xml:lang="en"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:ns5="http://www.w3.org/1999/xhtml"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:db="http://docbook.org/ns/docbook">
  <info>
    <pubdate>$LastChangedDate$</pubdate>
  </info>

  <refnamediv>
    <refname>creadcmat (obsolete)</refname>

    <refpurpose>Read a single complex or a matrix of complex from Scilab
    memory using call_scilab. Starting with Scilab 5.2, this function is obsolete. See <link linkend="Double_management_reading_API">API_Scilab: Complex double reading</link> for remplacement.</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>int C2F(creadcmat)(char *name, int *m, int *n, double *scimat, unsigned long name_len);</synopsis>
  </refsynopsisdiv>

  <refsection>
    <title>Arguments</title>

    <variablelist>
      <varlistentry>
        <term>name</term>

        <listitem>
          <para>The name of the future Scilab variable</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>m</term>

        <listitem>
          <para>Number of rows</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>n</term>

        <listitem>
          <para>Number of columns</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>scimat</term>

        <listitem>
          <para>The actual matrix of complex (array of double). Note that it
          is going to be stored in Scilab columnwise and the second half of
          the array is used for complex values.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>name_len</term>

        <listitem>
          <para>The length of the variable <emphasis>name </emphasis>(fortran
          compatibility)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>C2F</term>

        <listitem>
          <para>C2F is just a macro which provides to this function the
          ability to be called from fortran</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsection>

  <refsection>
    <title>Description</title>

    <para>This help describes how to use the function creadcmat.</para>

    <para>Using this function will retrieve a variable called
    <emphasis>name</emphasis> from Scilab memory into a standard C
    <emphasis>double *</emphasis>.</para>
  </refsection>

  <refsection>
    <title>Examples</title>

    <programlisting role="example"><![CDATA[ 
/* Load the previously set variable B */
// See: modules/call_scilab/examples/basicExamples/readwritecomplexmatrix.c
int rowB_ = 0, colB_ = 0, lp_ = 0;
int i = 0,j = 0;

double *matrixOfComplexB = NULL;
char variableToBeRetrievedB[] = "B";

/* First, retrieve the size of the matrix */
C2F(cmatcptr)(variableToBeRetrievedB, &rowB_, &colB_, &lp_, strlen(variableToBeRetrievedB));

/* Alloc the memory */
matrixOfComplexB = (double*)malloc((rowB_*colB_*2)*sizeof(double));

/* Load the matrix */
C2F(creadcmat)(variableToBeRetrievedB,&rowB_,&colB_,matrixOfComplexB,strlen(variableToBeRetrievedB) );

printf("\n");
printf("Display from B formated (size: %d, %d):\n",rowB_, colB_);
for(j = 0 ; j < rowB_ ; j++)
 {
  for(i = 0 ; i < colB_ ; i++)
   {
    /* Display the formated matrix ... the way the user
     * expect */
    printf("%5.2f + %5.2f.i  ",matrixOfComplexB[i * rowB_ + j],matrixOfComplexB[(rowB_*colB_)+(i * rowB_ + j)]);
   }
  printf("\n"); /* New row of the matrix */
 }
 ]]></programlisting>
  </refsection>

  <refsection>
    <title>See Also</title>

    <simplelist type="inline">
      <member><link linkend="call_scilab">Call_Scilab</link>,<link linkend="api_scilab">api Scilab</link>,<link linkend="Double_management_reading_API">API_Scilab: Complex double reading</link>, <link linkend="Double_management_writing_API">API_Scilab: Double writing</link>, <link linkend="SendScilabJob">SendScilabJob</link>, <link
      linkend="StartScilab">StartScilab</link>, <link
      linkend="cwritecmat">cwritecmat</link>, <link
      linkend="ComplexManagement_callscilab">Complex
      Management</link></member>
    </simplelist>
  </refsection>

  <refsection>
    <title>Authors</title>

    <para>Sylvestre Ledru</para>
  </refsection>
</refentry>
