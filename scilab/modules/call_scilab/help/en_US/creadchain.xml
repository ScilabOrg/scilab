<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2009  - DIGITEO - Sylvestre LEDRU
 * 
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at    
 * http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
 *
 -->
<refentry version="5.0-subset Scilab" xml:id="creadchain" xml:lang="en"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:ns5="http://www.w3.org/1999/xhtml"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:db="http://docbook.org/ns/docbook">
  <info>
    <pubdate>$LastChangedDate$</pubdate>
  </info>

  <refnamediv>
    <refname>creadchain (obsolete)</refname>

    <refpurpose>Read a single string from Scilab memory using
    call_scilab. Starting with Scilab 5.2, this function is obsolete. See <link linkend="String_management_reading_API">API_Scilab: String reading</link> for remplacement.</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>int C2F(creadchain)(char *name, int *itslen, char *myString, unsigned long name_len, unsigned long myString_len);</synopsis>
  </refsynopsisdiv>

  <refsection>
    <title>Parameters</title>

    <variablelist>
      <varlistentry>
        <term>name</term>

        <listitem>
          <para>The name of the future Scilab variable</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>itslen</term>

        <listitem>
          <para>The length of the future buffer (usually, use
          <emphasis>bsiz</emphasis>, it skips the need to detect the size of a
          char). This variable will be altered to contain the actual size of
          <emphasis>myString</emphasis></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>myString</term>

        <listitem>
          <para>The actual String (char *) which is going to content the
          content of the Scilab variable <emphasis>name</emphasis></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>name_len</term>

        <listitem>
          <para>The length of the variable <emphasis>name </emphasis>(fortran
          compatibility)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>myString_len</term>

        <listitem>
          <para>The length of the string (fortran compatibility)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>C2F</term>

        <listitem>
          <para>C2F is just a macro which provides to this function the
          ability to be called from fortran</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsection>

  <refsection>
    <title>Description</title>

    <para>This help describes how to use the function creadchain.</para>

    <para>Using this function will retrieve a variable called
    <emphasis>name</emphasis> from Scilab memory into a standard C
    <emphasis>char *</emphasis>.</para>
  </refsection>

  <refsection>
    <title>Examples</title>

    <programlisting role="example"><![CDATA[ 
/* Load the previously set variable A */
// See: modules/call_scilab/examples/basicExamples/readwritestring.c
int sizeA = 0;
char myStringFromScilab[bsiz]; /* Static char */
int length_myStringFromScilab = bsiz; /* Max size (it is going to be changed by creadchain */
char variableToBeRetrieved[]="A";

/* We are loading a single string from Scilab */
C2F(creadchain)(variableToBeRetrieved,&length_myStringFromScilab,myStringFromScilab,strlen(variableToBeRetrieved),strlen(myStringFromScilab));

printf("\n");
printf("Display of A (size %d): %s\n", length_myStringFromScilab, myStringFromScilab);
 ]]></programlisting>
  </refsection>

  <refsection>
    <title>See Also</title>

    <simplelist type="inline">
      <member>
	<link linkend="call_scilab">Call_Scilab</link>
      </member>
      <member>
	<link linkend="api_scilab">api Scilab</link>
      </member>
      <member>
	<link linkend="String_management_reading_API">API_Scilab: String reading</link>
      </member>
      <member>
	<link linkend="String_management_writing_API">API_Scilab: String writing</link>
      </member>
      <member>
	<link linkend="SendScilabJob">SendScilabJob</link>
      </member>
      <member>
	<link linkend="StartScilab">StartScilab</link>
      </member>
      <member>
	<link linkend="cwritechain">cwritechain</link>
      </member>
      <member>
	<link linkend="StringManagement_callscilab">String Management</link>
      </member>
    </simplelist>
  </refsection>

  <refsection>
    <title>Authors</title>

    <para>Sylvestre Ledru</para>
  </refsection>
</refentry>
