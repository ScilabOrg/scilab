<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2009  - DIGITEO - Sylvestre LEDRU
 * 
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at    
 * http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
 *
 -->
<refentry version="5.0-subset Scilab" xml:id="creadbmat" xml:lang="en"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:ns5="http://www.w3.org/1999/xhtml"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:db="http://docbook.org/ns/docbook">
  <info>
    <pubdate>$LastChangedDate$</pubdate>
  </info>

  <refnamediv>
    <refname>creadbmat (obsolete)</refname>

    <refpurpose>Read a single boolean or a matrix of boolean from Scilab
    memory using call_scilab. Starting with Scilab 5.2, this function is obsolete. See <link linkend="boolean_reading_API">API_Scilab: Boolean reading</link> for remplacement.</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis>int C2F(creadbmat)(char *name, int *m, int *n, int *scimat, unsigned long name_len);</synopsis>
  </refsynopsisdiv>

  <refsection>
    <title>Arguments</title>

    <variablelist>
      <varlistentry>
        <term>name</term>

        <listitem>
          <para>The name of the future Scilab variable</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>m</term>

        <listitem>
          <para>Number of rows</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>n</term>

        <listitem>
          <para>Number of columns</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>scimat</term>

        <listitem>
          <para>The actual matrix of boolean (array of int). Note that it is
          going to be stored in Scilab columnwise.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>name_len</term>

        <listitem>
          <para>The length of the variable <emphasis>name </emphasis>(fortran
          compatibility)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>C2F</term>

        <listitem>
          <para>C2F is just a macro which provides to this function the
          ability to be called from fortran</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsection>

  <refsection>
    <title>Description</title>

    <para>This help describes how to use the function creadbmat.</para>

    <para>Using this function will retrieve a variable called
    <emphasis>name</emphasis> from Scilab memory into a standard C
    <emphasis>int *</emphasis>.</para>
  </refsection>

  <refsection>
    <title>Examples</title>

    <programlisting role="example"><![CDATA[ 
/* Load the previously set variable B */
// See: modules/call_scilab/examples/basicExamples/readwriteboolean.c
int rowB_ = 0, colB_ = 0, lp_ = 0;
int i = 0, j = 0;
int *matrixOfBooleanB = NULL; /* Int instead of double */

char variableToBeRetrievedB[] = "B";

/* First, retrieve the size of the matrix */
C2F(cmatbptr)(variableToBeRetrievedB, &rowB_, &colB_, &lp_, strlen(variableToBeRetrievedB));

/* Alloc the memory */
matrixOfBooleanB=(int*)malloc((rowB_*colB_)*sizeof(int));

/* Load the matrix */
C2F(creadbmat)(variableToBeRetrievedB,&rowB_,&colB_,matrixOfBooleanB,strlen(variableToBeRetrievedB) );

printf("\n");
printf("Display from B formated (size: %d, %d):\n",rowB_, colB_);
for(j = 0 ; j < rowB_ ; j++)
{
 for(i = 0 ; i < colB_ ; i++)
 {
  /* Display the formated matrix ... the way the user
   * expect */
  printf("%d ",matrixOfBooleanB[i * rowB_ + j]);
 }
 printf("\n"); /* New row of the matrix */
}
 ]]></programlisting>
  </refsection>

  <refsection>
    <title>See Also</title>

    <simplelist type="inline">
      <member>
	<link linkend="call_scilab">Call_Scilab</link>
      </member>
      <member>
	<link linkend="api_scilab">api Scilab</link>
      </member>
      <member>
	<link linkend="boolean_reading_API">API_Scilab: Boolean reading</link>
      </member>
      <member>
	<link linkend="boolean_writing_API">API_Scilab: Boolean writing</link>
      </member>
      <member>
	<link linkend="SendScilabJob">SendScilabJob</link>
      </member>
      <member>
	<link linkend="StartScilab">StartScilab</link>
      </member>
      <member>
	<link linkend="cwritebmat">cwritebmat</link>
      </member>
      <member>
	<link linkend="BooleanManagement_callscilab">Boolean Management</link>
      </member>
    </simplelist>
  </refsection>

  <refsection>
    <title>Authors</title>

    <para>Sylvestre Ledru</para>
  </refsection>
</refentry>
