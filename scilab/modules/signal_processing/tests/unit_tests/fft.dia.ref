// -*- scilab -*-
// Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
// Copyright (C) 2008 - Digiteo - unknown author
// Copyright (C) 2009 - Digiteo - Vincent LIARD
//
// This file must be used under the terms of the CeCILL.
// This source file is licensed as described in the file COPYING, which
// you should have received as part of this distribution.  The terms
// are also available at    
// http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
// 'corr' unit tests
test_path = pathconvert(SCI + '/modules/signal_processing/tests/unit_tests');
// requires test_utilities.sci
// ****************************************************************
// * Part I: defining the tests                                   *
// * Part II: performing the tests                                *
// ****************************************************************
// **** Part I: defining the tests ****
// old tests wrapped
function test_fft_old()
a = [1;2;3];
n=size(a,'*');
r1 = norm(1/n*exp(2*%i*%pi*(0:n-1)'.*.(0:n-1)/n)*a -fft(a,1));
if r1 > 10 *%eps then bugmes();quit;end
r2 = norm(exp(-2*%i*%pi*(0:n-1)'.*.(0:n-1)/n)*a -fft(a,-1));
if r2 > 100 *%eps then bugmes();quit;end
sample_rate = 1000;
t = 0:1/sample_rate:0.6;
N = size(t,'*');
s = sin(2*%pi*50*t)+sin(2*%pi*70*t+%pi/4)+grand(1,N,'nor',0,1);
y = fft(s);
if or(size(y) <> [1 601]) then bugmes();quit;end
endfunction
function test_fft_1d()
// TODO: add checks for reverse fft
load(test_path + 'fft_1dim.dat', 'y_ref');
a = [1 2 3 4 5 6 7 8 9 10 11 12];
check(fft(a), y_ref);
endfunction
function test_fft_2d()
// TODO: add checks for reverse fft
load(test_path + 'fft_2dim.dat', 'y1_ref', 'y2_ref', 'y3_ref', 'y4_ref');
// rows number and cols number power of 2
a1 = [1 2 3 4;5 6 7 8;9 10 11 12;13 14 15 16];
check(y1_ref, fft(a1));
// rows number power of 2
a2 = [1 2 3;4 5 6;7 8 9;10 11 12];
check(y2_ref, fft(a2));
// cols number power of 2
a3 = [1 2 3 4;5 6 7 8;9 10 11 12];
check(y3_ref, fft(a3));
// neither rows nor cols power of 2
a4 = [1 2 3;4 5 6;7 8 9];
check(y4_ref, fft(a4));
endfunction
function test_fft_ndim()
// these tests may be improperly tailored...
// TODO: add tests for forward fft
load(test_path + 'fft_ndim.dat', 'y1_ref', 'y2_ref', 'y3_ref');
a1 = [1 2 3 4 5 6 7 8 9 10 11 12];
check(y1_ref, fft(a1, -1, 3, 2));
a2 = [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30];
check(y2_ref, fft(a2, -1, [2 3 5], [1 2 6]));
a3 = [1 2 3 4 5 6 7 8 9];
check(y3_ref, fft(a3,-1,[3 3],[1 3]));
endfunction
// **** Part II: performing the tests ****
// wrap all tests together
function test_fft()
test_fft_old();
test_fft_1d();
test_fft_2d();
test_fft_ndim();
endfunction
test_fft();
