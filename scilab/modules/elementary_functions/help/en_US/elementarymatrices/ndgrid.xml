<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:ns5="http://www.w3.org/1999/xhtml" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org"  xml:id="ndgrid" xml:lang="en">
    <refnamediv>
        <refname>ndgrid</refname>
        <refpurpose>arrays for multidimensional function evaluation on
            grid
        </refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Calling Sequence</title>
        <synopsis>[X, Y] = ndgrid(x,y)
            [X, Y, Z] = ndgrid(x,y,z)
            [X, Y, Z, T] = ndgrid(x,y,z,t)
            [X1, X2, ..., Xm] = ndgrid(x1,x2,...,xm)
        </synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>Arguments</title>
        <variablelist>
            <varlistentry>
                <term>x, y, z, ...</term>
                <listitem>
                    <para>vectors</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>X, Y, Z, ...</term>
                <listitem>
                    <para>matrices in case of 2 input arguments, or else
                        hypermatrices
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Description</title>
        <para>This is an utility routine useful to create arrays for function
            evaluation on 2, 3, ..., n dimensional grids. For instance in 2d, a grid
            is defined by two vectors, <literal>x</literal> and <literal> y</literal>
            of length nx and ny, and you want to evaluate a function (says
            <emphasis>f</emphasis>) on all the grid points, that is on all the points
            of coordinates <emphasis>(x(i),y(j))</emphasis> with
            <emphasis>i=1,..,nx</emphasis> and <emphasis>j=1,..,ny</emphasis>. In this
            case, this function can compute the two matrices <literal>X,Y</literal> of
            size <emphasis>nx x ny</emphasis> such that :
        </para>
        <programlisting role="no-scilab-exec"><![CDATA[ 
X(i,j) = x(i)   for all i in [1,nx]
Y(i,j) = y(j)       and j in [1,ny]
 ]]></programlisting>
        <para>
            and the evaluation may be done with <literal>Z=f(X,Y)</literal> (at
            the condition that you have coded <literal>f</literal> for evaluation on
            vector arguments, which is done (in general) by using the element-wise
            operators <literal>.*</literal>, <literal>./</literal> and
            <literal>.^</literal> in place of <literal>*</literal>,
            <literal>/</literal> and <literal>^</literal>).
        </para>
        <para>
            In the 3d case, considering 3 vectors <literal>x,y,z</literal> of
            length nx, ny and nz, <literal>X,Y,Z</literal> are 3 hypermatrices of size
            <emphasis>nx x ny x nz</emphasis> such that :
        </para>
        <programlisting role="no-scilab-exec"><![CDATA[ 
X(i,j,k) = x(i)  
Y(i,j,k) = y(j)   for all (i,j,k) in [1,nx]x[1,ny]x[1,nz]
Z(i,j,k) = z(k)
 ]]></programlisting>
        <para>
            In the general case of m input arguments <literal>x1, x2, ..,
                xm
            </literal>
            ,then the m output arguments <literal>X1, X2, ..,
                Xm
            </literal>
            are hypermatrices of size <emphasis>nx1 x nx2 x ... x
                nxm
            </emphasis>
            and :
        </para>
        <programlisting role="no-scilab-exec"><![CDATA[ 
Xj(i1,i2,...,ij,...,im) = xj(ij)   
for all (i1,i2,...,im) in [1,nx1]x[1,nx2]x...x[1,nxm]  
 ]]></programlisting>
    </refsection>
    <refsection>
        <title>Examples</title>
        <programlisting role="example"><![CDATA[  
// create a simple 2d grid
nx = 40; ny = 40;
x = linspace(-1,1,nx);
y = linspace(-1,1,ny);
[X,Y] = ndgrid(x,y);

// compute a function on the grid and plot it
//deff("z=f(x,y)","z=128*x.^2 .*(1-x).^2 .*y.^2 .*(1-y).^2");
deff("z=f(x,y)","z=x.^2 + y.^3")
Z = f(X,Y);
clf()
plot3d(x,y,Z, flag=[2 6 4]); show_window()
 ]]></programlisting>
        <scilab:image>
            nx = 40; ny = 40;
            x = linspace(-1,1,nx);
            y = linspace(-1,1,ny);
            [X,Y] = ndgrid(x,y);
            deff("z=f(x,y)","z=x.^2 + y.^3")
            Z = f(X,Y);
            plot3d(x,y,Z, flag=[2 6 4]);
        </scilab:image>
        <programlisting role="example"><![CDATA[  
// create a simple 3d grid
nx = 10; ny = 6; nz = 4;
x = linspace(0,2,nx);
y = linspace(0,1,ny);
z = linspace(0,0.5,nz);
[X,Y,Z] = ndgrid(x,y,z);

// try to display this 3d grid ...
XF=[]; YF=[]; ZF=[];

for k=1:nz
   [xf,yf,zf] = nf3d(X(:,:,k),Y(:,:,k),Z(:,:,k));
   XF = [XF xf]; YF = [YF yf]; ZF = [ZF zf];
end

for j=1:ny
   [xf,yf,zf] = nf3d(matrix(X(:,j,:),[nx,nz]),...
                     matrix(Y(:,j,:),[nx,nz]),...
                     matrix(Z(:,j,:),[nx,nz]));
   XF = [XF xf]; YF = [YF yf]; ZF = [ZF zf];
end

clf()
plot3d(XF,YF,ZF, flag=[0 6 3], leg="X@Y@Z")
xtitle("A 3d grid !"); show_window()
 ]]></programlisting>
        <scilab:image>
            nx = 10; ny = 6; nz = 4;
            x = linspace(0,2,nx);
            y = linspace(0,1,ny);
            z = linspace(0,0.5,nz);
            [X,Y,Z] = ndgrid(x,y,z);
            
            XF=[]; YF=[]; ZF=[];
            
            for k=1:nz
            [xf,yf,zf] = nf3d(X(:,:,k),Y(:,:,k),Z(:,:,k));
            XF = [XF xf]; YF = [YF yf]; ZF = [ZF zf];
            end
            
            for j=1:ny
            [xf,yf,zf] = nf3d(matrix(X(:,j,:),[nx,nz]),...
            matrix(Y(:,j,:),[nx,nz]),...
            matrix(Z(:,j,:),[nx,nz]));
            XF = [XF xf]; YF = [YF yf]; ZF = [ZF zf];
            end
            plot3d(XF,YF,ZF, flag=[0 6 3], leg="X@Y@Z")
            xtitle("A 3d grid !"); 
        </scilab:image>
    </refsection>
    <refsection role="see also">
        <title>See Also</title>
        <simplelist type="inline">
            <member>
                <link linkend="kron">kron</link>
            </member>
        </simplelist>
    </refsection>
</refentry>
