<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2008 - INRIA
 * 
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at    
 * http://www.cecill.info/licences/Licence_CeCILL_V2.1-en.txt
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:ns5="http://www.w3.org/1999/xhtml" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:id="gsort" xml:lang="en">
    <refnamediv>
        <refname>gsort</refname>
        <refpurpose>sorting by quick sort algorithm</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Calling Sequence</title>
        <synopsis>[B [,k]]=gsort(A)
            [B [,k]]=gsort(A,option)
            [B [,k]]=gsort(A,option,direction)
        </synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>Arguments</title>
        <variablelist>
            <varlistentry>
                <term>A</term>
                <listitem>
                    <para>a real,an integer or a character string vector/matrix or a
                        sparse vector.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>option</term>
                <listitem>
                    <para>a character string. It gives the type of sort to
                        perform:
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                'r' : each column of <literal>A</literal> is sorted
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                'c': each row of <literal>A</literal> is sorted
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                'g': all elements of <literal>A</literal> are sorted. It
                                is the default value.
                            </para>
                        </listitem>
                        <listitem>
                            <para>'lr': lexicographic sort of the rows of
                                <literal>A</literal>
                            </para>
                        </listitem>
                        <listitem>
                            <para>'lc': lexicographic sort of the columns of
                                <literal>A</literal>
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>direction</term>
                <listitem>
                    <para>a character string. It gives the ordering direction:
                        <literal>'i'</literal> stand for increasing and
                        <literal>'d'</literal> for decreasing order (default).
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>B</term>
                <listitem>
                    <para>an array with same type and dimensions as
                        <literal>A</literal>.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>k</term>
                <listitem>
                    <para>a real array with integer values and same dimensions as
                        <literal>A</literal>. Contains the origin indices.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Description</title>
        <para>
            <literal>gsort</literal> implements a "quick sort" algorithm for
            various data types.
        </para>
        <itemizedlist>
            <listitem>
                <para>
                    <literal>B=gsort(A,'g')</literal>,
                    <literal>B=gsort(A,'g','d')</literal> and
                    <literal>B=gsort(A)</literal> sort the elements of the array
                    <literal>A</literal>, seen as <literal>A(:)</literal> in a decreasing
                    order.
                </para>
                <para>
                    <literal>B=gsort(A,'g','i')</literal> sort the elements of the
                    array <literal>A</literal> in the increasing order.
                </para>
            </listitem>
            <listitem>
                <para>
                    <literal>B=gsort(A,'lr')</literal> sorts the rows of
                    <literal>A</literal> in lexical decreasing order. <literal>B</literal>
                    is obtained by a permutation of the rows of matrix
                    <literal>A</literal> in such a way that the rows of
                    <literal>B</literal> verify <literal>B(i,:)&gt;=B(j,:)</literal> if
                    <literal>i&lt;j</literal>.
                </para>
                <para>
                    <literal>B=gsort(A,'lr','i')</literal> works similarly for
                    increasing lexical order.
                </para>
            </listitem>
            <listitem>
                <para>
                    <literal>B=gsort(A,'lc')</literal> sorts the columns of
                    <literal>A</literal> in lexical decreasing order. <literal>B</literal>
                    is obtained by a permutation of the columns of matrix
                    <literal>A</literal> in such a way that the columns of
                    <literal>B</literal> verify <literal>B(:,i)&gt;=B(:,j)</literal> if
                    <literal>i&lt;j</literal>.
                </para>
                <para>
                    <literal>B=gsort(A,'lc','i')</literal> works similarly for
                    increasing lexical order.
                </para>
            </listitem>
        </itemizedlist>
        <para>
            If required the second return argument <literal>k</literal> contains
            the indices of the sorted values in <literal>A</literal>. If
            <literal>[B,k]=gsort(A,'g')</literal> one has <literal>B==A(k)</literal>.
            <emphasis role="bold">The algorithm preserve the relative order of
                records with equal values. 
            </emphasis>
        </para>
        <para>
            When <literal>v</literal> is complex, the elements are sorted by
            magnitude, i.e., abs(<literal>v</literal>) . Only <literal>'g'</literal>
            as second argument is managed with complex.
        </para>
        <para>
            With complex numbers, <literal>gsort</literal> can be overloaded
        </para>
        <para>see macro:
            SCI/modules/elementary_functions/macros/%_gsort.sci
        </para>
        <para>Overloading for not managed type (others than a real, an integer or a character
            string vector/matrix or a sparse vector.) is allowed.
        </para>
        <para>
            if <literal>v</literal> have <literal>%nan</literal> or
            <literal>%inf</literal> as elements. gsort places these at the beginning
            with <literal>'d'</literal> or at the end with <literal>'i'</literal>
            argument.
        </para>
    </refsection>
    <refsection>
        <title>Examples</title>
        <programlisting role="example"> 
            alr=[1,2,2;
            1,2,1;
            1,1,2;
            1,1,1];
            [alr1,k]=gsort(alr,'lr','i')
            [alr1,k]=gsort(alr,'lc','i')
            
            v=int32(alr)
            
            gsort(v)
            gsort(v,'lr','i')
            gsort(v,'lc','i')
            
            v=['Scilab' '2.6'
            'Scilab' '2.7'
            'xcos' '2.7'
            'Scilab' '3.1'
            'xcos' '3.1'
            'xcos' '4.0'
            'Scilab' '4.0']
            
            gsort(v,'lr','i')
            gsort(v,'lc','i')
        </programlisting>
    </refsection>
    <refsection role="see also">
        <title>See Also</title>
        <simplelist type="inline">
            <member>
                <link linkend="find">find</link>
            </member>
        </simplelist>
        <simplelist type="inline">
            <member>
                <link linkend="overloading">overloading</link>
            </member>
        </simplelist>
    </refsection>
    <refsection>
        <title>Bibliography</title>
        <para>Quick sort algorithm from Bentley &amp; McIlroy's "Engineering a
            Sort Function". Software---Practice and Experience,
            23(11):1249-1265
        </para>
    </refsection>
    <refsection>
        <title>History</title>
        <revhistory>
            <revision>
                <revnumber>5.4.0</revnumber>
                <revremark>This function allows overloading for unmanaged type (others than a real, an integer or a character string vector/matrix or a sparse vector).</revremark>
            </revision>
        </revhistory>
    </refsection>
</refentry>
