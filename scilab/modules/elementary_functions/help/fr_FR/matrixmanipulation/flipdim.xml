<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2008 - INRIA - Farid BELAHCENE
 * Copyright (C) 2013 - Samuel GOUGEON: restriction to decimal numbers removed. Examples added for booleans, integer-encoded numbers, text, polynomials, rationals
 *
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at
 * http://www.cecill.info/licences/Licence_CeCILL_V2.1-en.txt
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:ns5="http://www.w3.org/1999/xhtml" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:id="flipdim" xml:lang="fr">
    <refnamediv>
        <refname>flipdim</refname>
        <refpurpose>
            retourne par blocs les éléments de <literal>x</literal> selon une dimension
        </refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Séquence d'appel</title>
        <synopsis>y = flipdim(x, dim [,sb])</synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>Paramètres</title>
        <variablelist>
            <varlistentry>
                <term>x, y</term>
                <listitem>
                    <para>scalaires, vecteurs, matrices, ou hypermatrices de n'importe quel type, de même taille</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>dim</term>
                <listitem>
                    <para>
                        entier positif, la dimension de <literal>x</literal> selon laquelle les éléments seront retournés
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>sb</term>
                <listitem>
                    <para>entier positif, la taille des blocs à permuter</para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Description</title>
        <para>
            A partir de <literal>x</literal>, un scalaire/vecteur/matrice/hypermatrice de n'importe quel type et
            deux entiers positifs <literal>dim</literal> et <literal>sb</literal>, cette fonction retourne les éléments de
            <literal>x</literal> par blocs de taille <literal>sb</literal> selon le nombre dimension <literal>dim</literal> de
            <literal>x</literal> (<literal>x</literal> et <literal>y</literal> ont la même taille)
        </para>
        <para>
            Le paramètre optionnel <literal>sb</literal> (pour Size Block) permet de retounerles éléments de <literal>x</literal>
            par blocs de taille <literal>sb*size(x,2)</literal> (<literal>dim=1</literal>)
            ou <literal>size(x,1)*sb</literal> (<literal>dim=2</literal>).
        </para>
    </refsection>
    <refsection>
        <title>Exemples</title>
        <programlisting role="example"><![CDATA[
// Exemple 1 : selon la première dimension
x = [1 2 3 4; 5 6 7 8]
dim = 1
y = flipdim(x, dim)

// Exemple 2 : selon la deuxième dimension
dim = 2
y = flipdim(x, dim)

// Exemple 3 : selon la troisième dimension
x = matrix(1:24, [3 2 4])
dim = 3
y = flipdim(x, dim)

// Exemple 4 : premier exemple, mais avec des complexes
x = [1+%i 2*%i 3 4; 5 6-%i 7 8*%pi*%i]
dim = 1
y = flipdim(x, dim)

// Entiers :
x = int16(grand(4, 3, 2, "uin", -9, 9))
y = flipdim(x, 1)

// Booléens :
x = (grand(3, 4, "uin", -9, 9) > 0)
y = flipdim(x, 2)

// Textes :
x = matrix(strsplit("a":"x", 1:23), 4, 6);
x = x+x
flipdim(x, 2)

// Polynômes :
x = inv_coeff(grand(3, 9, "uin", 0, 3), 2)
flipdim(x, 1)

// Rationals :
n = inv_coeff(grand(3, 9, "uin", 0 ,3), 2);
d = inv_coeff(grand(3, 9, "uin", 0, 3), 2);
r = n./d
flipdim(r, 2)
 ]]></programlisting>
        <para>
            Exemples utilisant <literal>sb</literal> :
        </para>
        <programlisting role="example"><![CDATA[
X = [0 1 2 3 4 5 6 7 8 9 10 11];
flipdim(X, 2, 2) // => [10 11   8 9   6 7   4 5   2 3   0 1] // Taille du bloc = 2.
flipdim(X, 2, 3) // => [9 10 11   6 7 8   3 4 5   0 1 2]
flipdim(X, 2, 4) // => [8 9 10 11   4 5 6 7   0 1 2 3]
flipdim(X, 2, 6) // => [6 7 8 9 10 11   0 1 2 3 4 5]

// Erreur si sb ne divise pas la dimension ciblée de x.
y = flipdim(x, 2, 5); // size(X) = [1 12] et sb=5 ne divise pas 12.
 ]]></programlisting>
    </refsection>
    <refsection>
        <title>History</title>
        <revhistory>
            <revision>
                <revnumber>5.5.0</revnumber>
                <revremark>
                    Extension de décimaux à tout type : booléens, entiers, chaines de caractères, polynômes et fractions rationnelles.
                    Nouveau paramètre optionnel <literal>sb</literal> pour retourner <literal>x</literal> par blocs.
                </revremark>
            </revision>
        </revhistory>
    </refsection>
</refentry>
