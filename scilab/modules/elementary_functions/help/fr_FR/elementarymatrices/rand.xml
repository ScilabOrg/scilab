<?xml version="1.0" encoding="UTF-8"?>
<refentry version="5.0-subset Scilab" xml:id="rand" xml:lang="fr"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:ns5="http://www.w3.org/1999/xhtml"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:db="http://docbook.org/ns/docbook">
  <info>
    <pubdate>$LastChangedDate$</pubdate>
  </info>

  <refnamediv>
    <refname>rand</refname>

    <refpurpose>générateur de nombres aléatoires</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <title>Séquence d'appel</title>

    <synopsis>
      r = rand()
      r = rand(m1,m2,...)
      r = rand(m1,m2,...,key)
      r = rand(x)
      r = rand(x,key)

      s = rand("seed")
      rand("seed",s)

      rand(key)
      key = rand("info")
</synopsis>
  </refsynopsisdiv>

  <refsection>
    <title>Paramètres</title>

    <variablelist>
      <varlistentry>
        <term>mi</term>

        <listitem>
          <para>entiers</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>key</term>

        <listitem>
          <para>chaîne de caractères, <literal>"uniform"</literal> ou
          <literal>"normal"</literal> (par défaut: <literal>key="uniform"</literal>)</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>x</term>

        <listitem>
          <para>une matrice, dont uniquement les dimensions sont prises en
          compte.</para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term>r</term>
        <listitem>
          <para>
            une matrice de doubles de taille m1-par-m2-par-... avec des valeurs aléatoires.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>s</term>
        <listitem>
          <para>
            un entier positive, la graine (par défaut: <literal>s=0</literal>).
          </para>
        </listitem>
      </varlistentry>

    </variablelist>
  </refsection>

  <refsection>
    <title>Description</title>

    <para>
      Le but de cette fonction est de retourner une matrix 
	  de doubles dont les valeurs sont des nombres aléatoires 
	  réels ou complexes.
	  En fonction des arguments d'entrée, la fonction peut renvoyer une 
	  matrice de doubles aléatoires or peut configurer ou récupérer la distribution des nombres 
	  aléatoires ou peut configurer ou récupérer la graine du générateur 
	  aléatoire.
	</para>

  </refsection>

  <refsection>
    <title>Générer des nombres aléatoires</title>

    <para>Sans l'argument <literal>key</literal> la syntaxe ci-dessous produit
    une matrice aléatoire dont chaque élément est la réalisation d'une
    variable aléatoire suivant une loi donnée (par défaut uniforme sur
    [0,1]).</para>

    <variablelist>

      <varlistentry>
        <term>r=rand()</term>

        <listitem>
          <para>renvoit un scalaire aléatoire.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>r=rand(m1,m2)</term>

        <listitem>
          <para>est une matrice aléatoire de dimensions <literal>m1</literal>
          x <literal>m2</literal>.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>r=rand(m1,m2,..,mn)</term>

        <listitem>
          <para>est une matrice aléatoire de dimensions <literal>m1</literal>
          x <literal>m2</literal>,.. x <literal>mn</literal>.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>r=rand(a)</term>

        <listitem>
          <para>est une matrice aléatoire de mêmes dimensions que a.
          <literal>rand(a)</literal> est complexe si <literal>a</literal> est
          une matrice complexe.</para>
        </listitem>
      </varlistentry>
    </variablelist>

  </refsection>

  <refsection>
    <title>Changer la distribution des nombres aléatoires</title>
	
    <para>
	S'il est présent, l'argument <literal>key</literal> permet de
    spécifier la loi suivie par défaut par la variable aléatoire.
	</para>

    <variablelist>
      <varlistentry>
        <term>rand("uniform")</term>

        <listitem>
          <para>La loi par défaut est uniforme sur l'intervalle [0,1].</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>rand("normal")</term>

        <listitem>
          <para>La loi par défaut est une loi normale centrée réduite (moyenne
          0, variance 1).</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>key=rand("info")</term>

        <listitem>
          <para>renvoie la distribution courante, c'est à dire "uniform" ou "normal".</para>
        </listitem>
      </varlistentry>
    </variablelist>

  </refsection>

  <refsection>
    <title>Récupérer ou changer la graine</title>
	
    <para>Il est possible de réinitialiser l'état interne du générateur
    aléatoire (spécifié par un entier de l'intervalle [0,2^31-1]) ):</para>

    <variablelist>
      <varlistentry>
        <term>s=rand("seed")</term>

        <listitem>
          <para>Renvoie la valeur courante de la graine.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>rand("seed",s)</term>

        <listitem>
          <para>Configure la valeur <literal>s</literal> de la graine (par
          défaut la graine est initialisée à <literal>s=0</literal> au premier
          appel).</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsection>

  <refsection>
    <title>Exemples</title>

    <programlisting role="example"><![CDATA[ 
x=rand(10,10,"uniform")
rand("normal")
rand("info")
y=rand(x,"normal");
x=rand(2,2,2)
 ]]></programlisting>
  </refsection>

  <refsection>
    <title>Obtenir des nombres aléatoires prévisibles ou moins prévisibles</title>

    <para>
      Le générateur pseudo-aléatoire "uniform" est une séquence déterministe 
      dont le but est de reproduire une séquence de nombres aléatoire, indépendents 
      et identiquement distribués dans l'intervalle (0,1).
    </para>
    <para>
      Dans le but de pouvoir obtenir des simulations reproductibles, 
	  la graine initiale du générateur est zéro, de telle sorte que la séquence est 
	  la même d'une session à l'autre. 
	  En d'autres terms, les premiers nombres produits 
	  par <literal>rand</literal> sont toujours : 0.2113249,  0.7560439, ...
    </para>
    <para>
      Dans certains cas, nous pourrions vouloir initialiser la 
	  graine du générateur dans le but de produire des séquences moins prévisibles. 
	  Dans ce cas, nous pouvons initialiser la graine avec la sortie de la 
	  fonction <literal>getdate</literal>, comme dans l'exemple suivant:
    </para>
    <programlisting role="example">
      <![CDATA[  
n=getdate("s");
rand("seed",s);
 ]]>
    </programlisting>
  </refsection>


  <refsection>
    <title>Remarque</title>

    <para>
	La fonction <link linkend="grand">grand</link> dispose de générateurs aléatoire produisant 
	des séquences de nombres qui possèdent de meilleures qualités statistiques. 
	Par conséquent, dans les situations où la qualité statistique des séquences de 
	nombres aléatoires est importante, nous devrions plutôt utiliser la fonction <literal>grand</literal>.
	De plus, la fonction <literal>grand</literal> fournit davantage de fonctionnalités. 
	</para>
  </refsection>


  <refsection role="see also">
<title>Voir aussi</title>

    <simplelist type="inline">
      <member><link linkend="grand">grand</link></member>

      <member><link linkend="ssrand">ssrand</link></member>
    </simplelist>
  </refsection>
</refentry>
