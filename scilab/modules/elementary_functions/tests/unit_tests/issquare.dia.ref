// =============================================================================
// Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
// Copyright (C) 2013 - Scilab Enterprises - Charlotte HECQUET
//
//  This file is distributed under the same license as the Scilab package.
// =============================================================================
//
// <-- CLI SHELL MODE -->
//
// unit tests for issquare function
// =============================================================================
// Constants
assert_checkequal(issquare([1 2 3]), %f);
assert_checkequal(issquare([1 2 3]'), %f);
assert_checkequal(issquare([1 2; 1 2]), %t);
assert_checkequal(issquare(1), %t);
assert_checkequal(issquare(rand(2,1,2)), %t);
assert_checkequal(issquare(rand(2,2,3)), %f);
assert_checkequal(issquare([]), %f);
// Strings
assert_checkequal(issquare(["s" "t" "u"]), %f);
assert_checkequal(issquare(["s" "t" "u"]'), %f);
assert_checkequal(issquare(["s" "t";"s" "t"]), %t);
assert_checkequal(issquare("s"), %t);
assert_checkequal(issquare(hypermat([2,1,2],["s";"s";"s";"s"])), %t);
assert_checkequal(issquare(hypermat([2,2,3],["t";"t";"t";"t";"t";"t";"t";"t";"t";"t";"t";"t"])), %f);
// Polynomials
s=poly(0,"s");
assert_checkequal(issquare([1+s 2+s]), %f);
assert_checkequal(issquare([1+s 2+s]'), %f);
assert_checkequal(issquare([1+s 2+s; 3+s 4+s]), %t);
assert_checkequal(issquare(1+s), %t);
assert_checkequal(issquare(hypermat([2,1,2],[s;s;s;s])), %t);
assert_checkequal(issquare(hypermat([2,2,3],[s;s;s;s;s;s;s;s;s;s;s;s])), %f);
// Booleans
assert_checkequal(issquare([%t %f]), %f);
assert_checkequal(issquare([%t %f]'), %f);
assert_checkequal(issquare([%t %f; %f %t]), %t);
assert_checkequal(issquare(%t), %t);
assert_checkequal(issquare(hypermat([2,1,2],[%t;%t;%t;%t])), %t);
assert_checkequal(issquare(hypermat([2,2,3],[%t;%t;%t;%t;%t;%t;%t;%t;%t;%t;%t;%t])), %f)
 ans  =
 
  T  
// Sparses
assert_checkequal(issquare(sparse([1 0 2])), %f);
assert_checkequal(issquare(sparse([1 0 2])'), %f);
assert_checkequal(issquare(sparse([1 0; 0 1])), %t);
assert_checkequal(issquare(sparse(0)), %t);
// Error messages
errmsg1 = msprintf(_("%s: Wrong number of input argument(s): %d expected.\n"),"issquare", 1);
assert_checkerror("issquare()", errmsg1);
errmsg2 = msprintf(_("Wrong number of input arguments."));
assert_checkerror("issquare(1,2)", errmsg2);
errmsg3 = msprintf(_("Wrong number of output arguments.\n"));
assert_checkerror("[r,b]=issquare([1 2 3]);", errmsg3);
