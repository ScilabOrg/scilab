/* Generated by GIWS (version 1.2.4) */
/*

Copyright 2007-2008 INRIA
Copyright 2008-2011 DIGITEO

Author : Sylvestre Ledru & others

This is generated code.

This software is a computer program whose purpose is to hide the complexity
of accessing Java objects/methods from C++ code.

This software is governed by the CeCILL-B license under French law and
abiding by the rules of distribution of free software.  You can  use, 
modify and/ or redistribute the software under the terms of the CeCILL-B
license as circulated by CEA, CNRS and INRIA at the following URL
"http://www.cecill.info". 

As a counterpart to the access to the source code and  rights to copy,
modify and redistribute granted by the license, users are provided only
with a limited warranty  and the software's author,  the holder of the
economic rights,  and the successive licensors  have only  limited
liability. 

In this respect, the user's attention is drawn to the risks associated
with loading,  using,  modifying and/or developing or reproducing the
software by the user in light of its specific status of free software,
that may mean  that it is complicated to manipulate,  and  that  also
therefore means  that it is reserved for developers  and  experienced
professionals having in-depth computer knowledge. Users are therefore
encouraged to load and test the software's suitability as regards their
requirements in conditions enabling the security of their systems and/or 
data to be ensured and,  more generally, to use and operate it in the 
same conditions as regards security. 

The fact that you are presently reading this means that you have had
knowledge of the CeCILL-B license and that you accept its terms.
*/


#ifndef __ORG_SCILAB_MODULES_GRAPHIC_EXPORT_GL2PSTOJOGL__
#define __ORG_SCILAB_MODULES_GRAPHIC_EXPORT_GL2PSTOJOGL__
#include <iostream>
#include <string>
#include <string.h>
#include <stdlib.h>
#include <jni.h>

#include "GiwsException.hxx"

#ifndef _MSC_VER /* Defined anyway with Visual */
#if !defined(byte)
typedef signed char byte;
#else
#pragma message("Byte has been redefined elsewhere. Some problems can happen")
#endif
#endif

namespace org_scilab_modules_graphic_export {
class GL2PSToJOGL {

private:
JavaVM * jvm;

protected:
jmethodID voidglFeedbackBufferjintjintID; // cache method id
jmethodID jfloatArray_readFeedbackBufferjintID; // cache method id
jmethodID jbooleanglIsEnabledjintID; // cache method id
jmethodID voidglBeginjintID; // cache method id
jmethodID voidglVertex3fjfloatjfloatjfloatID; // cache method id
jmethodID voidglEndID; // cache method id
jmethodID jbooleanglGetCurrentRasterPositionValidID; // cache method id
jmethodID jintglRenderModejintID; // cache method id
jmethodID jintglGetLineStipplePatternID; // cache method id
jmethodID jintglGetLineStippleRepeatID; // cache method id
jmethodID jintglGetIndexClearValueID; // cache method id
jmethodID jintArray_glGetViewportID; // cache method id
jmethodID jintglGetBlendSrcID; // cache method id
jmethodID jintglGetBlendDstID; // cache method id
jmethodID jfloatArray_glGetColorClearValueID; // cache method id
jmethodID jfloatglGetPolygonOffsetFactorID; // cache method id
jmethodID jfloatglGetPolygonOffsetUnitsID; // cache method id
jmethodID jfloatArray_glGetCurrentRasterPositionID; // cache method id
jmethodID jfloatArray_glGetCurrentRasterColorID; // cache method id
jmethodID voidglPassThroughjfloatID; // cache method id



jobject instance;
jclass instanceClass; // cache class


/**
* Get the environment matching to the current thread.
*/
virtual JNIEnv * getCurrentEnv();

public:
// Constructor
/**
* Create a wrapping of the object from a JNIEnv.
* It will call the default constructor
* @param JEnv_ the Java Env
*/
GL2PSToJOGL(JavaVM * jvm_);

/**
* Create a wrapping of an already existing object from a JNIEnv.
* The object must have already been instantiated
* @param JEnv_ the Java Env
* @param JObj the object
*/
GL2PSToJOGL(JavaVM * jvm_, jobject JObj);


/** 
* This is a fake constructor to avoid the constructor
* chaining when dealing with extended giws classes 
*/
#ifdef FAKEGIWSDATATYPE
GL2PSToJOGL(fakeGiwsDataType::fakeGiwsDataType /* unused */) {}
#endif

// Destructor
~GL2PSToJOGL();

// Generic method
// Synchronization methods
/**
* Enter monitor associated with the object.
* Equivalent of creating a "synchronized(obj)" scope in Java.
*/
void synchronize();

/**
* Exit monitor associated with the object.
* Equivalent of ending a "synchronized(obj)" scope.
*/
void endSynchronize();

// Methods
static void glFeedbackBuffer(JavaVM * jvm_, int arg0, int arg1);

static float* readFeedbackBuffer(JavaVM * jvm_, int size);

static bool glIsEnabled(JavaVM * jvm_, int arg0);

static void glBegin(JavaVM * jvm_, int arg0);

static void glVertex3f(JavaVM * jvm_, float arg0, float arg1, float arg2);

static void glEnd(JavaVM * jvm_);

static bool glGetCurrentRasterPositionValid(JavaVM * jvm_);

static int glRenderMode(JavaVM * jvm_, int arg0);

static int glGetLineStipplePattern(JavaVM * jvm_);

static int glGetLineStippleRepeat(JavaVM * jvm_);

static int glGetIndexClearValue(JavaVM * jvm_);

static int* glGetViewport(JavaVM * jvm_);

static int glGetBlendSrc(JavaVM * jvm_);

static int glGetBlendDst(JavaVM * jvm_);

static float* glGetColorClearValue(JavaVM * jvm_);

static float glGetPolygonOffsetFactor(JavaVM * jvm_);

static float glGetPolygonOffsetUnits(JavaVM * jvm_);

static float* glGetCurrentRasterPosition(JavaVM * jvm_);

static float* glGetCurrentRasterColor(JavaVM * jvm_);

static void glPassThrough(JavaVM * jvm_, float arg0);


                        /**
                        * Get class name to use for static methods
                        * @return class name to use for static methods
                        */
                        
                static const std::string className()
                {
                return "org/scilab/modules/graphic_export/GL2PSToJOGL";
                }
                
};


}
#endif
