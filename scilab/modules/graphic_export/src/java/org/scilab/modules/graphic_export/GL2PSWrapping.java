/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.scilab.modules.graphic_export;


 /** 
  * Call from the JoGL dislay thread to figure drawing code using JNI 
  * @author Jean-Baptiste Silvy
  * @copyright INRIA 2007 
  */
public class GL2PSWrapping {

 /**
  * Constructor. Should not be called.
  */
 protected GL2PSWrapping() {
    throw new UnsupportedOperationException();
 }
  
 /**
  * Begin page
  * @param title of the page
  * @param producer of the page
  * @param viewport of the page
  * @param format of the page
  * @param sort index of the figure to redraw
  * @param options index of the figure to redraw
  * @param colormode index of the figure to redraw
  * @param colorsize index of the figure to redraw
  * @param colormap_r index of the figure to redraw
  * @param colormap_g index of the figure to redraw
  * @param colormap_b index of the figure to redraw
  * @param colormap_a index of the figure to redraw
  * @param nr index of the figure to redraw
  * @param ng index of the figure to redraw
  * @param nb index of the figure to redraw
  * @param buffersize index of the figure to redraw
  * @param filename index of the figure to redraw
  * @return GL2PSWrappingJNI.sci_gl2psBeginPage
  */
public static int sci_gl2psBeginPage(String title, String producer, int[] viewport, int format, int sort, int options, int colormode, int colorsize, float[] colormap_r, float[] colormap_g, float[] colormap_b, float[] colormap_a, int nr, int ng, int nb, int buffersize, String filename) {
    return GL2PSWrappingJNI.sci_gl2psBeginPage(title, producer, viewport, format, sort, options, colormode, colorsize, colormap_r, colormap_g, colormap_b, colormap_a, nr, ng, nb, buffersize, filename);
  }

  
 /**
  * End of the page
  * @return GL2PSWrappingJNI.sci_gl2psEndPage
  */
public static int sci_gl2psEndPage() {
    return GL2PSWrappingJNI.sci_gl2psEndPage();
  }

  
 /**
  * Option of the page
  * @param options of the page
  * @return GL2PSWrappingJNI.sci_gl2psSetOptions
  */
public static int sci_gl2psSetOptions(int options) {
    return GL2PSWrappingJNI.sci_gl2psSetOptions(options);
  }

  
 /**
  * Beginning of the viewport
  * @param viewport of the figure
  * @return GL2PSWrappingJNI.sci_gl2psBeginViewport
  */
public static int sci_gl2psBeginViewport(int[] viewport) {
    return GL2PSWrappingJNI.sci_gl2psBeginViewport(viewport);
  }

  
 /**
  * End of the viewport
  * @return GL2PSWrappingJNI.sci_gl2psEndViewport
  */
public static int sci_gl2psEndViewport() {
    return GL2PSWrappingJNI.sci_gl2psEndViewport();
  }

  
 /**
  * Text
  * @param str text to display
  * @param fontname of the text
  * @param fontsize of the text
  * @return GL2PSWrappingJNI.sci_gl2psText
  */
public static int sci_gl2psText(String str, String fontname, short fontsize) {
    return GL2PSWrappingJNI.sci_gl2psText(str, fontname, fontsize);
  }

  
 /**
  * TextOPT
  * @param str text to display
  * @param fontname of the text
  * @param fontsize of the text
  * @param align of the text
  * @param angle of the text
  * @return GL2PSWrappingJNI.sci_gl2psTextOpt
  */
public static int sci_gl2psTextOpt(String str, String fontname, short fontsize, int align, float angle) {
    return GL2PSWrappingJNI.sci_gl2psTextOpt(str, fontname, fontsize, align, angle);
  }

  
 /**
  * Special
  * @param format of special
  * @param str of special
  * @return GL2PSWrappingJNI.sci_gl2psSpecial
  */
public static int sci_gl2psSpecial(int format, String str) {
    return GL2PSWrappingJNI.sci_gl2psSpecial(format, str);
  }

  
 /**
  * Enable
  * @param mode enable mode
  * @return GL2PSWrappingJNI.sci_gl2psEnable
  */
public static int sci_gl2psEnable(int mode) {
    return GL2PSWrappingJNI.sci_gl2psEnable(mode);
  }

  
 /**
  * Disable
  * @param mode disable mode
  * @return GL2PSWrappingJNI.sci_gl2psDisable
  */
public static int sci_gl2psDisable(int mode) {
    return GL2PSWrappingJNI.sci_gl2psDisable(mode);
  }

  
 /**
  * Size of the point
  * @param value value given for the size
  * @return GL2PSWrappingJNI.sci_gl2psPointSize
  */
public static int sci_gl2psPointSize(float value) {
    return GL2PSWrappingJNI.sci_gl2psPointSize(value);
  }

  public static int sci_gl2psLineStipple(int arg0, int arg1) {
    return GL2PSWrappingJNI.sci_gl2psLineStipple(arg0, arg1);
  }

  
 /**
  * Width of the line
  * @param value value value given for the width
  * @return GL2PSWrappingJNI.sci_gl2psLineWidth
  */
public static int sci_gl2psLineWidth(float value) {
    return GL2PSWrappingJNI.sci_gl2psLineWidth(value);
  }

  
 /**
  * Blend Function
  * @param sfactor sfactor
  * @param dfactor dfactor
  * @return GL2PSWrappingJNI.sci_gl2psBlendFunc
  */
public static int sci_gl2psBlendFunc(int sfactor, int dfactor) {
    return GL2PSWrappingJNI.sci_gl2psBlendFunc(sfactor, dfactor);
  }

  
 /**
  * Draw an image map (undocumented function)
  * @param width of the image map
  * @param height of the image map
  * @param position of the image map
  * @param imagemap imagemap
  * @return GL2PSWrappingJNI.sci_gl2psDrawImageMap
  */
public static int sci_gl2psDrawImageMap(int width, int height, float[] position, String imagemap) {
    return GL2PSWrappingJNI.sci_gl2psDrawImageMap(width, height, position, imagemap);
  }

  
 /**
  * Get the extension of the file (undocumented function)
  * @param format file format
  * @return GL2PSWrappingJNI.sci_gl2psGetFileExtension
  */
public static String sci_gl2psGetFileExtension(int format) {
    return GL2PSWrappingJNI.sci_gl2psGetFileExtension(format);
  }

  
 /**
  * Get format description (undocumented function)
  * @param format file format description
  * @return GL2PSWrappingJNI.sci_gl2psGetFormatDescription
  */
public static String sci_gl2psGetFormatDescription(int format) {
    return GL2PSWrappingJNI.sci_gl2psGetFormatDescription(format);
  }

  
 /**
  *Draw a pixel buffer
  * @param w width of image
  * @param h height of image
  * @param format specifies the format of the pixel data. GL_RGB and GL_RGBA are the only values accepted at the moment.
  * @param type specifies the data type for pixels
  * @param buffer is a direct java.nio.Buffer containing pixmap
  * @return GL2PSWrappingJNI.sci_gl2psGetFormatDescription
  */
public static int sci_gl2psDrawPixels(int w, int h, int format, int type, java.nio.Buffer buffer) {
    return GL2PSWrappingJNI.sci_gl2psDrawPixels(w, h, format, type, buffer);
  }

}
