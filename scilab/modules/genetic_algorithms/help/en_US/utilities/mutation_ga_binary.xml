<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2008 - Yann COLLETTE <yann.collette@renault.com>
 * Copyright (C) 2010 - DIGITEO - Michael Baudin
 *
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at
 * http://www.cecill.info/licences/Licence_CeCILL_V2.1-en.txt
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:ns3="http://www.w3.org/1999/xhtml" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:id="mutation_ga_binary" xml:lang="en">
    <refnamediv>
        <refname>mutation_ga_binary</refname>
        <refpurpose>A function which performs binary mutation</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Calling Sequence</title>
        <synopsis>[Mut_Indiv, pos] = mutation_ga_binary(Indiv,param)</synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>Arguments</title>
        <variablelist>
            <varlistentry>
                <term>Indiv</term>
                <listitem>
                    <para>A string.</para>
                    <para>The individual on which we will perform the mutation.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>param</term>
                <listitem>
                    <para>a list of parameters.</para>
                    <itemizedlist>
                        <listitem>
                            <para> "binary_length": an integer scalar, the size of the binary code. </para>
                        </listitem>
                        <listitem>
                            <para> "multi_mut": a boolean. If %T, several random bits will
                                be flipped. 
                            </para>
                        </listitem>
                        <listitem>
                            <para> "multi_mut_nb": an integer scalar, the number of bits to be flipped.
                                Only used when multi_mut is set to %T (default 2).
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Mut_Indiv</term>
                <listitem>
                    <para>
                        A string.
                    </para>
                    <para>
                        The mutated individual.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>pos</term>
                <listitem>
                    <para>
                        A vector of integers.
                    </para>
                    <para>
                        The positions of the mutated bits.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Description</title>
        <para>
            This function performs a classical multi-bits binary
            mutation.
        </para>
        <para>
            This generates the individual <varname>Mut_Indiv</varname> by inverting bits on random positions.
        </para>
        <para>
            By default <literal>mutation_ga_binary(Indiv)</literal> selects randomly
            an index <literal>i</literal> between 1 and <literal>length(Indiv)</literal>.
            It then modifies the i-th character of Indiv to 1 if it was 0, or 0 if it was 1.
        </para>
        <para>
            If <literal>"multi_mut"</literal> is set to <literal>%T</literal> multiple mutations may occur.
            The maximal number of mutation is given by <literal>"multi_mut_nb"</literal>.
        </para>
    </refsection>
    <refsection>
        <title> Random number generator </title>
        <para>
            <literal>mutation_ga_binary</literal> is based
            on <link linkend="grand">grand</link>
            for generating the random samples.
            Use <literal>grand("setsd", seed)</literal> to change the seed
            for <literal>crossover_ga_binary</literal>.
        </para>
        <programlisting role="example"><![CDATA[
            seed = getdate("s");
            grand("setsd", seed); //sets the seed to current date

            seed = 0;
            grand("setsd", seed); //sets the seed to default value
            ]]>
        </programlisting>
    </refsection>
    <refsection>
        <title>Examples</title>
        <programlisting role="example"><![CDATA[
            Indiv="00010000"
            [Mut_Indiv, pos] = mutation_ga_binary(Indiv)
            
            // With multiple mutation
            param=init_param("multi_mut",%t,"multi_mut_nb",3);
            Indiv="00010000"
            [Mut_Indiv, pos] = mutation_ga_binary(Indiv,param)
 ]]></programlisting>
    </refsection>
    <refsection role="see also">
        <title>See Also</title>
        <simplelist type="inline">
            <member>
                <link linkend="mutation_ga_default"> mutation_ga_default
                </link>
            </member>
            <member>
                <link linkend="crossover_ga_binary"> crossover_ga_binary
                </link>
            </member>
            <member>
                <link linkend="init_ga_default"> init_ga_default
                </link>
            </member>
            <member>
                <link linkend="optim_ga"> optim_ga </link>
            </member>
        </simplelist>
    </refsection>
</refentry>
