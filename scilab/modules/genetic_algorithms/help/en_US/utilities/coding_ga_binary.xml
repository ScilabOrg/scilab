<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2008 - Yann COLLETTE <yann.collette@renault.com>
 *
 * Copyright (C) 2012 - 2016 - Scilab Enterprises
 *
 * This file is hereby licensed under the terms of the GNU GPL v2.0,
 * pursuant to article 5.3.4 of the CeCILL v.2.1.
 * This file was originally licensed under the terms of the CeCILL v2.1,
 * and continues to be available under such terms.
 * For more information, see the COPYING file which you should have received
 * along with this program.
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:ns3="http://www.w3.org/1999/xhtml" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:id="coding_ga_binary" xml:lang="en">
    <refnamediv>
        <refname>coding_ga_binary</refname>
        <refpurpose>A function which performs conversion between binary and
            continuous representation
        </refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Calling Sequence</title>
        <synopsis>pop_out = coding_ga_binary(pop_in,direction,param)</synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>Arguments</title>
        <variablelist>
            <varlistentry>
                <term>pop_in</term>
                <listitem>
                    <para>a list which contains all the individuals in the current
                        population.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>direction</term>
                <listitem>
                    <para>'code' or 'decode'. If direction == 'code' then we perform a
                        continuous to binary encoding. Else, we convert from binary to
                        continuous.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>param</term>
                <listitem>
                    <para>a parameter list.</para>
                    <itemizedlist>
                        <listitem>
                            <para>'binary_length': the number of bits by variables. If
                                binary_length = 8 and the variable X is of dimension 2 then the
                                binary code will be 16 bits length.
                            </para>
                        </listitem>
                        <listitem>
                            <para>'minboun': a vector of minimum bounds for the variable
                                X.
                            </para>
                        </listitem>
                        <listitem>
                            <para>'maxbound': a vector of maximum bounds for the variable
                                X.
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>pop_out</term>
                <listitem>
                    <para>the population coded to binary or decoded to continuous
                        values.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Description</title>
        <itemizedlist>
            <listitem>
                <para>This function allows to code or decode a population of
                    individuals from (resp. to) continuous variables to (resp. from)
                    binary.
                </para>
            </listitem>
        </itemizedlist>
    </refsection>
    <refsection>
        <title>Examples</title>
        <programlisting role="example"><![CDATA[

pop_in = list();
pop_in(1) = 2;

pop_out = coding_ga_binary(pop_in,'code',[])
// Will return 11111111

pop_in_2 = coding_ga_binary(pop_out,'decode',[])
// Should be 2

]]></programlisting>
    </refsection>
    <refsection role="see also">
        <title>See Also</title>
        <simplelist type="inline">
            <member>
                <link linkend="optim_ga"> optim_ga </link>
            </member>
            <member>
                <link linkend="mutation_ga_binary"> mutation_ga_binary
                </link>
            </member>
            <member>
                <link linkend="crossover_ga_binary"> crossover_ga_binary
                </link>
            </member>
        </simplelist>
    </refsection>
</refentry>
