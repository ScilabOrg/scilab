<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2008 - Yann COLLETTE <yann.collette@renault.com>
 * Copyright (C) 2010 - 2011 - DIGITEO - Michael Baudin
 *
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at
 * http://www.cecill.info/licences/Licence_CeCILL_V2.1-en.txt
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:ns3="http://www.w3.org/1999/xhtml" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:id="optim_ga" xml:lang="en">
    <refnamediv>
        <refname>optim_ga</refname>
        <refpurpose>A flexible genetic algorithm</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Calling Sequence</title>
        <synopsis>[pop_opt,fobj_pop_opt,pop_init,fobj_pop_init] = optim_ga(ga_f,pop_size,nb_generation,p_mut,p_cross,Log,param)</synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>Arguments</title>
        <variablelist>
            <varlistentry>
                <term>ga_f</term>
                <listitem>
                    <para>
                        the function to be optimized. The prototype if y = f(x) or y =
                        list(f,p1,p2,...).
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>pop_size</term>
                <listitem>
                    <para>
                        the size of the population of individuals (default value:
                        100).
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>nb_generation</term>
                <listitem>
                    <para>
                        the number of generations (equivalent to the number of
                        iterations in classical optimization) to be computed (default value:
                        10).
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>p_mut</term>
                <listitem>
                    <para>the mutation probability (default value: 0.1).</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>p_cross</term>
                <listitem>
                    <para>the crossover probability (default value: 0.7).</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Log</term>
                <listitem>
                    <para>
                        if %T, will call the output function at the end of each
                        iteration, see <literal>"output_func"</literal> under
                        <varname>param</varname> variable below.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>param</term>
                <listitem>
                    <para>a list of parameters.</para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                "codage_func": the function which will perform the coding
                                and decoding of individuals (default function:
                                <link linkend="coding_ga_identity">coding_ga_identity</link>).
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                "init_func": the function which will perform the
                                initialization of the population (default function:
                                <link linkend="init_ga_default">init_ga_default</link>).
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                "dimension", "minbounds" and "maxbounds":
                                parameters used by the initialization function to define the initial population.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                "crossover_func": the function which will perform the
                                crossover between two individuals (default function:
                                <link linkend="crossover_ga_default">crossover_ga_default</link>).
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                "mutation_func": the function which will perform the
                                mutation of one individual (default function:
                                <link linkend="mutation_ga_default">mutation_ga_default</link>).
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                "selection_func": the function which will perform the
                                selection of individuals at the end of a generation (default
                                function: <link linkend="selection_ga_elitist">selection_ga_elitist</link>).
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                "nb_couples": the number of couples which will be selected
                                so as to perform the crossover and mutation (default value:
                                100).
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                "pressure": the value of the efficiency of the worst
                                individual (default value: 0.05).
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                "output_func": a callback function called after each
                                generation if <varname>Log</varname> is %T (default
                                function <link linkend="output_ga_default">output_ga_default</link>).
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>pop_opt</term>
                <listitem>
                    <para>the population of optimal individuals.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>fobj_pop_opt</term>
                <listitem>
                    <para>
                        the set of objective function values associated to pop_opt
                        (optional).
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>pop_init</term>
                <listitem>
                    <para>the initial population of individuals (optional).</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>fobj_pop_init</term>
                <listitem>
                    <para>
                        the set of objective function values associated to pop_init
                        (optional).
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Description</title>
        <para>
            This function implements the classical genetic algorithm.
        </para>
        <para>
            A great flexibility is authorized in customizing the behaviour of the
            <literal>optim_ga</literal> function.
            This flexibility is provided by the various functions which
            can be set in the <literal>param</literal> variable.
            The header of these functions (i.e.
            the input and output arguments), can be checked through the help page
            corresponding to the default function.
            For example, in order to understand what are the input and output arguments of the
            <literal>"codage_func"</literal> function, please refer to the help page of the <link linkend="coding_ga_identity">coding_identity</link> function.
        </para>
        <para>
            See the Demonstrations for more examples for this function.
        </para>
    </refsection>
    <refsection>
        <title>Examples</title>
        <para>
            The following session presents the simplest possible example.
            We minimize a quadratic function in dimension 3.
            By default, all the parameters are taken in the interval
            [0,1]^3.
            The "dimension" field is passed to the function which computes the
            initial population, which is <literal>init_ga_default</literal>
            function by default.
            In the case where the "dimension" field is not customized,
            the default value is used, which is equal to 2.
        </para>
        <programlisting role="example"><![CDATA[
function y=f(x)
  y = sum(x.^2)
endfunction

PopSize     = 100;
Proba_cross = 0.7;
Proba_mut   = 0.1;
NbGen       = 10;
Log         = %T;

ga_params = init_param();
// Parameters to control the initial population.
ga_params = add_param(ga_params,"dimension",3);

[pop_opt, fobj_pop_opt] = ..
  optim_ga(f, PopSize, NbGen, Proba_mut, Proba_cross, Log, ga_params);
 ]]></programlisting>
        <para>
            Once the algorithm done, we can analyze the results.
            In the following script, we compute some basic statistics about the
            optimum population and get the best and the worst points.
        </para>
        <programlisting role="example"><![CDATA[
// Display basic statistics
// min, mean and max function values of the population.
disp([min(fobj_pop_opt) mean(fobj_pop_opt) max(fobj_pop_opt)])
// Get the best x (i.e. the one which achieves the minimum function value)
[fmin ,k] = min(fobj_pop_opt)
xmin = pop_opt(k)
// Get the worst x
[fmax ,k] = max(fobj_pop_opt)
xmax = pop_opt(k)
 ]]></programlisting>
        <para>
            In the following example, we customize all the options
            in order to show all the features of the algorithm.
        </para>
        <programlisting role="example"><![CDATA[
// Objective function
function y=f(x)
  y = sum(x.^2)
endfunction

// Output function with a stop criterion
function stop = output_ga_custom(gen_index, nb_generation, Pop, FObj_Pop, param)
    [threshold, err] = get_param(param, "threshold", 1E-10); // default value for the threshold
    printf(_("%s: iteration %d / %d \n"), "optim_ga", gen_index, nb_generation);
    printf(_("    min / max value found = %.4E / %.4E\n"), min(FObj_Pop), max(FObj_Pop));
    stop = %f
    if abs(max(FObj_Pop) - min(FObj_Pop)) < threshold then
        printf(_("    Stop criterion reached: Delta Max to Min under threshold"));
        stop = %t
    end
endfunction

PopSize     = 100;
Proba_cross = 0.7;
Proba_mut   = 0.1;
NbGen       = 20;
NbCouples   = 110;
Log         = %T;
pressure    = 0.05;

ga_params = init_param();
// Parameters to adapt to the shape of the optimization problem
ga_params = add_param(ga_params,"minbound",[-2; -2]);
ga_params = add_param(ga_params,"maxbound",[2; 2]);
ga_params = add_param(ga_params,"dimension",2);
ga_params = add_param(ga_params,"beta",0);
ga_params = add_param(ga_params,"delta",0.1);
// Parameters to fine tune the Genetic algorithm.
// All these parameters are optional for continuous optimization
// If you need to adapt the GA to a special problem, you
ga_params = add_param(ga_params,"init_func",init_ga_default);
ga_params = add_param(ga_params,"crossover_func",crossover_ga_default);
ga_params = add_param(ga_params,"mutation_func",mutation_ga_default);
ga_params = add_param(ga_params,"codage_func",coding_ga_identity);
ga_params = add_param(ga_params,"selection_func",selection_ga_elitist);

//ga_params = add_param(ga_params,"selection_func",selection_ga_random);
ga_params = add_param(ga_params,"nb_couples",NbCouples);
ga_params = add_param(ga_params,"pressure",pressure);

// Customized output function with a stop criterion added
ga_params = add_param(ga_params, "threshold", 1E-6); // User defined parameter for the output function
ga_params = add_param(ga_params, "output_func", output_ga_custom);

[pop_opt, fobj_pop_opt, pop_init, fobj_pop_init] = ..
  optim_ga(f, PopSize, NbGen, Proba_mut, Proba_cross, Log, ga_params);
 ]]></programlisting>
    </refsection>
    <refsection>
        <title>Customizing the initial population</title>
        <para>
            In the following example, we customize the init function,
            which computes the initial population.
            In the <literal>myinitga</literal> function, we use the grand function
            (instead of the default rand used in
            init_ga_default).
            We could use any other type of population generator, including,
            for example, a low discrepancy sequence such as the Halton or Sobol
            sequence.
        </para>
        <programlisting role="example"><![CDATA[
function y=f(x)
  y = sum(x.^2)
endfunction

function Pop_init = myinitga ( popsize , param )
  // This message is to be displayed in the console
  // for demonstration purpose only :
  // remove it in a real application!
  disp("Initializing the Population with grand")
  // We deal with some parameters to take into account
  // the boundary of the domain and the neighborhood size
  [Dim,err]       = get_param(param,"dimension",2)
  [MinBounds,err] = get_param(param,"minbound",-2*ones(1,Dim))
  [MaxBounds,err] = get_param(param,"maxbound",2*ones(1,Dim))

  // Pop_init must be a list()
  Pop_init = list()
  nr = size(MaxBounds,1)
  nc = size(MaxBounds,2)
  for i=1:popsize
    u = grand(nr,nc,"def")
    Pop_init(i) = (MaxBounds - MinBounds).*u + MinBounds
  end
endfunction

PopSize     = 100;
Proba_cross = 0.7;
Proba_mut   = 0.1;
NbGen       = 10;
NbCouples   = 110;
Log         = %T;

ga_params = init_param();
// Parameters to adapt to the shape of the optimization problem
ga_params = add_param(ga_params,"minbound",[-2; -2]);
ga_params = add_param(ga_params,"maxbound",[2; 2]);
ga_params = add_param(ga_params,"dimension",2);
ga_params = add_param(ga_params,"init_func",myinitga);

[pop_opt, fobj_pop_opt, pop_init, fobj_pop_init] = ..
  optim_ga(f, PopSize, NbGen, Proba_mut, Proba_cross, Log, ga_params);
 ]]></programlisting>
    </refsection>
    <refsection>
        <title>Extra parameters for the function</title>
        <para>
            In some cases, the objective function needs additional parameters
            in order to be evaluated.
            In this case, we can pass a list to the <literal>optim_ga</literal>
            function, where the first element of the list is the function and the
            remaining elements are the extra parameters.
        </para>
        <para>
            This is done in the following script, where the function <literal>f</literal>
            needs the two extra parameters <literal>a1</literal> and <literal>a2</literal>.
            This is why we define the list <literal>myobjfun</literal> and
            pass it to the <literal>optim_ga</literal> solver.
        </para>
        <programlisting role="example"><![CDATA[
function y = f ( x , a1 , a2 )
  y = a1*sum(x.^2) + a2
endfunction

PopSize     = 100;
Proba_cross = 0.7;
Proba_mut   = 0.1;
NbGen       = 10;
NbCouples   = 110;
Log         = %T;

ga_params = init_param();
// Parameters to control the initial population.
ga_params = add_param(ga_params,"dimension",3);

// Pass the extra parameters to the objective function
a1 = 12;
a2 = 7;
myobjfun = list(f,a1,a2);

// Optimize !
[pop_opt, fobj_pop_opt] = ..
  optim_ga(myobjfun, PopSize, NbGen, Proba_mut, Proba_cross, Log, ga_params);
 ]]></programlisting>
    </refsection>
    <refsection role="see also">
        <title>See Also</title>
        <simplelist type="inline">
            <member>
                <link linkend="optim_moga"> optim_moga </link>
            </member>
            <member>
                <link linkend="optim_nsga"> optim_nsga </link>
            </member>
            <member>
                <link linkend="optim_nsga2"> optim_nsga2 </link>
            </member>
        </simplelist>
    </refsection>
    <refsection>
        <title>References</title>
        <itemizedlist>
            <listitem>
                <para>
                    Michalewicz Zbigniew "Genetic Algorithms + Data Structures = Evolution Programs"
                </para>
            </listitem>
        </itemizedlist>
    </refsection>
</refentry>
