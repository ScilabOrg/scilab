<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2008 - Yann COLLETTE <yann.collette@renault.com>
 *
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at
 * http://www.cecill.info/licences/Licence_CeCILL_V2.1-en.txt
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:ns3="http://www.w3.org/1999/xhtml" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:id="optim_nsga2" xml:lang="en">
    <refnamediv>
        <refname>optim_nsga2</refname>
        <refpurpose>A multi-objective Niched Sharing Genetic Algorithm version
            2
        </refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Calling Sequence</title>
        <synopsis>[pop_opt,fobj_pop_opt,pop_init,fobj_pop_init] = optim_nsga2(ga_f,pop_size,nb_generation,p_mut,p_cross,Log,param)</synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>Arguments</title>
        <variablelist>
            <varlistentry>
                <term>ga_f</term>
                <listitem>
                    <para>the function to be optimized. The prototype if y = f(x) or y =
                        list(f,p1,p2,...).
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>pop_size</term>
                <listitem>
                    <para>the size of the population of individuals (default value:
                        100).
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>nb_generation</term>
                <listitem>
                    <para>the number of generations (equivalent to the number of
                        iterations in classical optimization) to be computed (default value:
                        10).
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>p_mut</term>
                <listitem>
                    <para>the mutation probability (default value: 0.1).</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>p_cross</term>
                <listitem>
                    <para>the crossover probability (default value: 0.7).</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Log</term>
                <listitem>
                    <para>
                        if %T, will call the output function at the end of each
                        iteration, see <literal>"output_func"</literal> under
                        <varname>param</varname> variable below.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>param</term>
                <listitem>
                    <para>a list of parameters. </para>
                    <itemizedlist>
                        <listitem>
                            <para> 'codage_func': the function which will perform the coding
                                and decoding of individuals (default function: <link linkend="coding_ga_identity">coding_ga_identity</link>).
                            </para>
                        </listitem>
                        <listitem>
                            <para> 'init_func': the function which will perform the
                                initialization of the population (default function:
                                <link linkend="init_ga_default">init_ga_default</link>).
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                'dimension', 'minbounds' and 'maxbounds':
                                parameters used by the initialization function to define the initial population.
                            </para>
                        </listitem>
                        <listitem>
                            <para> 'crossover_func': the function which will perform the
                                crossover between two individuals (default function:
                                <link linkend="crossover_ga_default">crossover_ga_default</link>).
                            </para>
                        </listitem>
                        <listitem>
                            <para> 'mutation_func': the function which will perform the
                                mutation of one individual (default function:
                                <link linkend="mutation_ga_default">mutation_ga_default</link>).
                            </para>
                        </listitem>
                        <listitem>
                            <para> 'selection_func': the function whcih will perform the
                                selection of individuals at the end of a generation (default
                                function: <link linkend="selection_ga_elitist">selection_ga_elitist</link>).
                            </para>
                        </listitem>
                        <listitem>
                            <para> 'nb_couples': the number of couples which will be
                                selected so as to perform the crossover and mutation (default
                                value: 100).
                            </para>
                        </listitem>
                        <listitem>
                            <para> 'pressure': the value the efficiency of the worst
                                individual (default value: 0.05).
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                "output_func": a callback function called after each
                                generation if <varname>Log</varname> is %T (default
                                function <literal>output_nsga2_default</literal>).
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>pop_opt</term>
                <listitem>
                    <para>the population of optimal individuals.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>fobj_pop_opt</term>
                <listitem>
                    <para>the set of objective function values associated to pop_opt
                        (optional).
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>pop_init</term>
                <listitem>
                    <para>the initial population of individuals (optional).</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>fobj_pop_init</term>
                <listitem>
                    <para>the set of objective function values associated to pop_init
                        (optional).
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Description</title>
        <itemizedlist>
            <listitem>
                <para>This function implements the classical "Niched Sharing Genetic
                    Algorithm". For a demonstration, see
                    SCI/modules/genetic_algorithms/examples/NSGA2demo.sce.
                </para>
            </listitem>
        </itemizedlist>
    </refsection>
    <refsection>
        <title>Examples</title>
        <programlisting role="example"><![CDATA[
function f = deb_1(x)
   f1_x1 = x(1);
   g_x2  = 1 + 9 * sum((x(2:$)-x(1)).^2) / (length(x) - 1);
   h     = 1 - sqrt(f1_x1 / g_x2);

   f(1,1) = f1_x1;
   f(1,2) = g_x2 * h;
endfunction

PopSize     = 100;
Proba_cross = 0.5;
Proba_mut   = 0.3;
NbGen       = 4;
NbCouples   = 110;
Log         = %T;
nb_disp     = 10; // Nb point to display from the optimal population
pressure    = 0.1;

ga_params = init_param();
ga_params = add_param(ga_params,'dimension',2);
ga_params = add_param(ga_params,'minbound',zeros(2,1));
ga_params = add_param(ga_params,'maxbound',ones(2,1));

[pop_opt, fobj_pop_opt, pop_init, fobj_pop_init] = optim_nsga2(deb_1, PopSize,NbGen, Proba_mut, Proba_cross, Log, ga_params)

 ]]></programlisting>
    </refsection>
    
    <refsection role="see also">
        <title>See Also</title>
        <simplelist type="inline">
            <member>
                <link linkend="optim_moga"> optim_moga </link>
            </member>
            <member>
                <link linkend="optim_ga"> optim_ga </link>
            </member>
            <member>
                <link linkend="optim_nsga"> optim_nsga </link>
            </member>
        </simplelist>
    </refsection>
</refentry>
