// =============================================================================
// Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
// Copyright (C) 2013 - Scilab Enterprises - Paul Bignier
//
//  This file is distributed under the same license as the Scilab package.
// =============================================================================
//
// <-- CLI SHELL MODE -->
//
// <-- ENGLISH IMPOSED -->
//
// <-- Non-regression test for bug 8415 -->
//
// <-- Bugzilla URL -->
// http://bugzilla.scilab.org/show_bug.cgi?id=8415
//
// <-- Short Description -->
// optim_moga(), optim_nsga() and optim_nsga2() can now take list as arguments, as announced in the doc.
// With a list for cost function
function f = deb_2(x, p1, p2)
    f1_x1 = x(1);
    g_x2  = p1 + p2 * sum((x(2:$)-x(1)).^2) / (length(x) - 1);
    h     = 1 - sqrt(f1_x1 / g_x2);
    f(1,1) = f1_x1;
    f(1,2) = g_x2 * h;
endfunction
PopSize     = 100;
Proba_cross = 0.5;
Proba_mut   = 0.3;
NbGen       = 4;
NbCouples   = 110;
Log         = %T;
nb_disp     = 10; // Nb point to display from the optimal population
pressure    = 0.1;
ga_params = init_param();
ga_params = add_param(ga_params, "dimension", 2);
ga_params = add_param(ga_params, "minbound", zeros(2, 1));
ga_params = add_param(ga_params, "maxbound", ones(2, 1));
[pop_opt, fobj_pop_opt, pop_init, fobj_pop_init] = ..
optim_moga(list(deb_2, 1, 9), PopSize, NbGen, Proba_mut, Proba_cross, Log, ga_params);
optim_moga: Initialization of the population
optim_moga: iteration 1 / 4 
    min / max value found = 0.029324 / 1.259517
optim_moga: iteration 2 / 4 
    min / max value found = 0.098841 / 0.732534
optim_moga: iteration 3 / 4 
    min / max value found = 0.124679 / 0.656770
optim_moga: iteration 4 / 4 
    min / max value found = 0.225319 / 0.525795
assert_checkequal(length(pop_opt), length(pop_init));
assert_checkequal(size(fobj_pop_opt), size(fobj_pop_init));
[pop_opt, fobj_pop_opt, pop_init, fobj_pop_init] = ..
optim_nsga(list(deb_2, 1, 9), PopSize, NbGen, Proba_mut, Proba_cross, Log, ga_params);
optim_nsga: Initialization of the population
optim_nsga: iteration 1 / 4 
    min / max value found = 0.001301 / 2.440339
optim_nsga: iteration 2 / 4 
    min / max value found = 0.015645 / 0.948523
optim_nsga: iteration 3 / 4 
    min / max value found = 0.093593 / 0.695988
optim_nsga: iteration 4 / 4 
    min / max value found = 0.112577 / 0.665168
assert_checkequal(length(pop_opt), length(pop_init));
assert_checkequal(size(fobj_pop_opt), size(fobj_pop_init));
[pop_opt, fobj_pop_opt, pop_init, fobj_pop_init] = ..
optim_nsga2(list(deb_2, 1, 9), PopSize, NbGen, Proba_mut, Proba_cross, Log, ga_params);
optim_nsga2: Initialization of the population
optim_nsga2: iteration 1 / 4
    min / max value found = 0.002139 / 7.982432
optim_nsga2: iteration 2 / 4
    min / max value found = 0.000000 / 1.777920
optim_nsga2: iteration 3 / 4
    min / max value found = 0.000000 / 4.417277
optim_nsga2: iteration 4 / 4
    min / max value found = 0.000000 / 1.323218
assert_checkequal(length(pop_opt), length(pop_init));
assert_checkequal(size(fobj_pop_opt), size(fobj_pop_init));
