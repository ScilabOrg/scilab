<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2011-2011 - GSoC 2011 - Iuri SILVIO
 * 
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at    
 * http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
 *
 -->
<refentry version="5.0-subset Scilab" xml:id="mexlib" xml:lang="en"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:ns5="http://www.w3.org/1999/xhtml"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:db="http://docbook.org/ns/docbook">
  <info>
    <pubdate>$LastChangedDate$</pubdate>
  </info>

  <refnamediv>
    <refname>mexlib</refname>

    <refpurpose>Mexlib is a module in Scilab YaSp. You can find build instructions in YaSp page. This module is based in <ulink url="http://www.mathworks.com/help/techdoc/apiref/bqoqnz0.html">MATLAB mexlib specification.</ulink></refpurpose>
  </refnamediv>

  <refsection>
    <title>How to</title>

    <para>First of all, to use a mex function you need a mex file. Here is a small example (call it example.c):</para>

    <programlisting><![CDATA[ 
#include "mex.h"

void mexFunction(int nlhs, mxArray *plhs[], int nrhs, mxArray *prhs[])
{
    double *output;
    double data[] = {1.0, 2.1, 3.0};

    plhs[0] = mxCreateDoubleMatrix(1, 3, mxREAL);
    output = mxGetPr(plhs[0]);

    memcpy(output, data, 3*sizeof(double));
}
]]></programlisting>

    <para>This function is really simple, it just return a double array with 3 values. The important part is the mex.h included and mexFunction defined with these arguments.</para>

    <para>To compile this file, you should use Scilab <link linkend="ilib_mex_build">ilib_mex_build</link> function.</para>

    <programlisting><![CDATA[ 
--> ilib_mex_build('libmexexample',['mexgetdouble','example', 'cmex'], 'example.c',[],'Makelib','','','');
]]></programlisting>

    <para>This creates a loader file you should run:</para>

    <programlisting><![CDATA[
--> exec('loader.sce');
]]></programlisting>
  </refsection>

  <refsection>
    <title>Examples</title>

    <programlisting role="example"><![CDATA[ 
#include "mex.h"

void mexFunction(int nlhs, mxArray *plhs[], int nrhs, mxArray *prhs[])
{
    double *output;
    double data[] = {1.0, 2.1, 3.0};

    plhs[0] = mxCreateDoubleMatrix(1, 3, mxREAL);
    output = mxGetPr(plhs[0]);

    memcpy(output, data, 3*sizeof(double));
}
 ]]></programlisting>

    <para>After that, just call your function, created with name mexgetdouble:</para>
    <programlisting><![CDATA[
--> r = mexgetdouble()
r  = 

  1    2.1    3
]]></programlisting>
  </refsection>

  <refsection role="see also">
<title>See Also</title>

    <simplelist type="inline">
      <member>
    <link linkend="ilib_mex_build">ilib_mex_build</link>
      </member>
      <member>
    <ulink url="http://www.mathworks.com/help/techdoc/apiref/bqoqnz0.html">mexlib specification</ulink>
      </member>
      <member>
    <ulink url="http://wiki.scilab.org/YaSp">Build YaSp</ulink>
      </member>
    </simplelist>
  </refsection>

  <refsection>
    <title>Authors</title>

    <para>Iuri de Silvio</para>
  </refsection>
</refentry>
