<?xml version="1.0" encoding="UTF-8"?>
<!--
* Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
* Copyright (C) 2012 - Scilab Enterprises - Calixte DENIZET
*
* This file must be used under the terms of the CeCILL.
* This source file is licensed as described in the file COPYING, which
* you should have received as part of this distribution.  The terms
* are also available at
* http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
*
-->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:ns5="http://www.w3.org/1999/xhtml" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" version="5.0-subset Scilab" xml:id="pyUnwrap" xml:lang="en">
  <info>
    <pubdate>$LastChangedDate$</pubdate>
  </info>
  <refnamediv>
    <refname>pyUnwrap</refname>
    <refpurpose>Unwrap a Python object into Scilab data</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <title>Calling Sequence</title>
    <synopsis>
      x = pyUnwrap(X)
    </synopsis>
  </refsynopsisdiv>
  <refsection>
    <title>Arguments</title>
    <variablelist>
      <varlistentry>
        <term>X</term>
        <listitem>
          <para>A Python object</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>x</term>
        <listitem>
          <para>A double or boolean or integer or string matrix.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsection>
  <refsection>
    <title>Description</title>
    <para>Unwrap a Python object into a Scilab data. Floats, complexes, integers, booleans and strings can be unwrapped. A one-dimension list is converted a row, a two-dimensional one into a matrix. The Numpy matrices can be unwrapped too.</para>
    <para>
      It is possible to unwrap the returned objects in using the function <link linkend="pyAutounwrap">pyAutounwrap</link>.
    </para>
  </refsection>
  <refsection>
    <title>Examples</title>
    <programlisting role="example"><![CDATA[
    a = 1:10;
    sa = sqrt(a);
    // We wrap a
    A = pyWrap(a);
    // We import the math module
    pyImport math;

    // py is a wrapper for __builtin__ module
    py = pyBuiltin()

    py_sqrt = pyGetAttr(math,"sqrt");
    SA = py.map(py_sqrt, A)

    // SA and sa should contain the same values
    and(pyUnwrap(SA) == sa)

    pyRemove A math py py_sqrt SA
    ]]></programlisting>
  </refsection>
  <refsection role="see also">
    <title>See Also</title>
    <simplelist type="inline">
      <member>
        <link linkend="pyWrap">pyWrap</link>
      </member>
      <member>
        <link linkend="pyUnwraprem">pyUnwraprem</link>
      </member>
      <member>
        <link linkend="pyWrapAsRef">pyWrapAsRef</link>
      </member>
    </simplelist>
  </refsection>
  <refsection>
    <title>History</title>
    <revhistory>
      <revision>
        <revnumber>5.4.0</revnumber>
        <revremark>Python module.</revremark>
      </revision>
    </revhistory>
  </refsection>
</refentry>
