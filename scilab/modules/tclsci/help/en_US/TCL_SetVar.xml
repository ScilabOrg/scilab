<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2006 - INRIA - Allan CORNET
 * 
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at    
 * http://www.cecill.info/licences/Licence_CeCILL_V2.1-en.txt
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:lang="en" xml:id="TCL_SetVar">
    <refnamediv>
        <refname>TCL_SetVar</refname>
        <refpurpose>Set a tcl/tk variable
            value
        </refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Calling Sequence</title>
        <synopsis>TCL_SetVar(varname, value [,interp])</synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>Arguments</title>
        <variablelist>
            <varlistentry>
                <term>varname</term>
                <listitem>
                    <para>character string. Contains the name of the tcl/tk variable to
                        set.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>value</term>
                <listitem>
                    <para>may be a character string, a scalar, a real or string matrix
                        (m x n). Contains the value to give to the tcl/tk variable.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>interp</term>
                <listitem>
                    <para>optional character string parameter. Name of the slave tcl
                        interpreter in which the operation has to be performed. If not
                        provided, it defaults to the main tcl interpreter created by
                        Scilab.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Description</title>
        <para>This routine allows to set a variable within a tcl/tk interpreter. When
            tcl/tk support is enabled in scilab, this routine can be used to set up
            the value of a tcl/tk variable. This can be useful to change some value in
            the tcl/tk interpreter without having to build a tcl/tk instruction (and
            use <literal>TCL_EvalStr</literal>).
        </para>
        <para>
            More information about Tcl/Tk: <ulink url="http://www.tcl.tk/doc/">http://www.tcl.tk/doc/</ulink>
        </para>
    </refsection>
    <refsection>
        <title>Examples</title>
        <programlisting role="example"><![CDATA[ 
TCL_EvalStr("toplevel .tst1");

// creates a toplevel TK window. 
TCL_EvalStr("entry .tst1.e -textvariable tvar");

// create an editable entry
TCL_EvalStr("set tvar foobar");

// set the entry value
TCL_EvalStr("pack .tst1.e");

// pack the entry widget. It appears on the screen.
text=TCL_GetVar("tvar")

// retrieve the variable value
// change the entry text and repeat the last command ...
//delete the toplevel TK window.
TCL_EvalStr("destroy .tst1")

//----------------------------------------------------
a=["A","B","C";"D","E","F"];
TCL_SetVar("A",a)
AfromTCL=TCL_GetVar("A")

//----------------------------------------------------
b=[6,4,1;2,3,5];
TCL_SetVar("B",b)
BfromTCL=TCL_GetVar("B")

//----------------------------------------------------
TCL_SetVar("StringTCL","string")
StringFromTCL=TCL_GetVar("StringTCL")

//----------------------------------------------------
TCL_SetVar("ScalarTCL",1.22)
ScalarFromTCL=TCL_GetVar("ScalarTCL")

//----------------------------------------------------
// Examples with a slave interpreter
//----------------------------------------------------
TCL_CreateSlave('TCLSlave')
a=['AA','BB','CC';'DD','EE','FF'];
TCL_SetVar("A_slave",a,'TCLSlave')
AfromTCL_slave=TCL_GetVar('A_slave','TCLSlave')
TCL_DeleteInterp('TCLSlave')

//----------------------------------------------------
TCL_CreateSlave('TCLSlave')
b=[66,44,11;22,33,55];
TCL_SetVar("B_slave",b,'TCLSlave')
BfromTCL_slave=TCL_GetVar('B_slave','TCLSlave')
TCL_DeleteInterp('TCLSlave')

//----------------------------------------------------
TCL_CreateSlave('TCLSlave')
TCL_SetVar("StringTCL_slave","string in slave interpreter",'TCLSlave')
StringFromTCL_slave=TCL_GetVar("StringTCL_slave",'TCLSlave')
TCL_DeleteInterp('TCLSlave')

//----------------------------------------------------
TCL_CreateSlave('TCLSlave')
TCL_SetVar("ScalarTCL_slave",1.22,'TCLSlave')
ScalarFromTCL_slave=TCL_GetVar("ScalarTCL_slave",'TCLSlave')
TCL_DeleteInterp('TCLSlave')
 ]]></programlisting>
    </refsection>
    <refsection role="see also">
        <title>See Also</title>
        <simplelist type="inline">
            <member>
                <link linkend="ScilabEval">ScilabEval</link>
            </member>
            <member>
                <link linkend="TCL_EvalFile">TCL_EvalFile</link>
            </member>
            <member>
                <link linkend="TCL_EvalStr">TCL_EvalStr</link>
            </member>
            <member>
                <link linkend="TCL_GetVar">TCL_GetVar</link>
            </member>
            <member>
                <link linkend="TCL_ExistVar">TCL_ExistVar</link>
            </member>
            <member>
                <link linkend="TCL_UnsetVar">TCL_UnsetVar</link>
            </member>
            <member>
                <link linkend="TCL_UpVar">TCL_UpVar</link>
            </member>
            <member>
                <link linkend="TCL_CreateSlave">TCL_CreateSlave</link>
            </member>
            <member>
                <link linkend="TCL_DeleteInterp">TCL_DeleteInterp</link>
            </member>
        </simplelist>
    </refsection>
</refentry>
