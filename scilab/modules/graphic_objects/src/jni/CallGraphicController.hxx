/* Generated by GIWS (version 2.0.2) with command:
giws --disable-return-size-array --output-dir src/jni/ --throws-exception-on-error --description-file src/jni/graphic_objects.giws.xml
*/
/*

This is generated code.

This software is a computer program whose purpose is to hide the complexity
of accessing Java objects/methods from C++ code.

Copyright (C) 2012 - 2016 - Scilab Enterprises

This file is hereby licensed under the terms of the GNU GPL v2.0,
pursuant to article 5.3.4 of the CeCILL v.2.1.
This file was originally licensed under the terms of the CeCILL v2.1,
and continues to be available under such terms.
For more information, see the COPYING file which you should have received
along with this program.
*/


#ifndef __ORG_SCILAB_MODULES_GRAPHIC_OBJECTS_CALLGRAPHICCONTROLLER__
#define __ORG_SCILAB_MODULES_GRAPHIC_OBJECTS_CALLGRAPHICCONTROLLER__
#include <iostream>
#include <string>
#include <string.h>
#include <stdlib.h>
#include <jni.h>

#include "GiwsException.hxx"

        #if defined(_MSC_VER) /* Defined anyway with Visual */
            #include <Windows.h>
        #else
            typedef signed char byte;
        #endif


#ifndef GIWSEXPORT
# if defined(_MSC_VER) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define GIWSEXPORT
#   else
#     define GIWSEXPORT __declspec(dllexport)
#   endif
# else
#   if __GNUC__ >= 4
#     define GIWSEXPORT __attribute__ ((visibility ("default")))
#   else
#     define GIWSEXPORT
#   endif
# endif
#endif

namespace org_scilab_modules_graphic_objects {
class GIWSEXPORT CallGraphicController {

private:
JavaVM * jvm;

protected:
jmethodID voiddeleteGraphicObjectjintintID; // cache method id
jmethodID jintcloneGraphicObjectjintintID; // cache method id
jmethodID jintaskGraphicObjectjintintID; // cache method id
jmethodID voidsetGraphicObjectRelationshipjintintjintintID; // cache method id
jmethodID voidremoveRelationShipAndDeletejintintID; // cache method id
jmethodID jstringgetGraphicObjectPropertyAsStringjintintjintintID; // cache method id
jmethodID jbooleansetGraphicObjectPropertyjintintjintintjstringjava_lang_StringID; // cache method id
jmethodID jobjectArray_getGraphicObjectPropertyAsStringVectorjintintjintintID; // cache method id
jmethodID jbooleansetGraphicObjectPropertyjintintjintintjobjectArray_java_lang_Stringjava_lang_StringID; // cache method id
jclass stringArrayClass;
jmethodID jbooleansetGraphicObjectPropertyjintintjintintjdoubledoubleID; // cache method id
jmethodID jdoubleArray_getGraphicObjectPropertyAsDoubleVectorjintintjintintID; // cache method id
jmethodID jbooleansetGraphicObjectPropertyjintintjintintjdoubleArray_doubledoubleID; // cache method id
jmethodID jbooleansetGraphicObjectPropertyjintintjintintjintintID; // cache method id
jmethodID jintArray_getGraphicObjectPropertyAsIntegerVectorjintintjintintID; // cache method id
jmethodID jbooleansetGraphicObjectPropertyjintintjintintjintArray_intintID; // cache method id
jmethodID jbooleansetGraphicObjectPropertyjintintjintintjbooleanbooleanID; // cache method id
jmethodID jintArray_getGraphicObjectPropertyAsBooleanVectorjintintjintintID; // cache method id
jmethodID jbooleansetGraphicObjectPropertyjintintjintintjbooleanArray_booleanbooleanID; // cache method id
jmethodID voidregisterScilabViewID; // cache method id
jmethodID voidunregisterScilabViewID; // cache method id
jmethodID jintgetConsoleIdentifierID; // cache method id
jmethodID voidbuildFigureMenuBarjintintID; // cache method id



jobject instance;
jclass instanceClass; // cache class

                       
// Caching (if any)


/**
* Get the environment matching to the current thread.
*/
virtual JNIEnv * getCurrentEnv();

public:
// Constructor
/**
* Create a wrapping of the object from a JNIEnv.
* It will call the default constructor
* @param JEnv_ the Java Env
*/
CallGraphicController(JavaVM * jvm_);

/**
* Create a wrapping of an already existing object from a JNIEnv.
* The object must have already been instantiated
* @param JEnv_ the Java Env
* @param JObj the object
*/
CallGraphicController(JavaVM * jvm_, jobject JObj);


/** 
* This is a fake constructor to avoid the constructor
* chaining when dealing with extended giws classes 
*/
#ifdef FAKEGIWSDATATYPE
CallGraphicController(fakeGiwsDataType::fakeGiwsDataType /* unused */) {}
#endif

// Destructor
~CallGraphicController();

// Generic method
// Synchronization methods
/**
* Enter monitor associated with the object.
* Equivalent of creating a "synchronized(obj)" scope in Java.
*/
void synchronize();

/**
* Exit monitor associated with the object.
* Equivalent of ending a "synchronized(obj)" scope.
*/
void endSynchronize();

// Methods
static void deleteGraphicObject(JavaVM * jvm_, int id);

static int cloneGraphicObject(JavaVM * jvm_, int id);

static int askGraphicObject(JavaVM * jvm_, int typeName);

static void setGraphicObjectRelationship(JavaVM * jvm_, int parentId, int childId);

static void removeRelationShipAndDelete(JavaVM * jvm_, int id);

static char* getGraphicObjectPropertyAsString(JavaVM * jvm_, int id, int propertyName);

static bool setGraphicObjectProperty(JavaVM * jvm_, int id, int propertyName, char const* value);

static char** getGraphicObjectPropertyAsStringVector(JavaVM * jvm_, int id, int propertyName);

static bool setGraphicObjectProperty(JavaVM * jvm_, int id, int propertyName, char const* const* value, int valueSize);

static bool setGraphicObjectProperty(JavaVM * jvm_, int id, int propertyName, double value);

static double* getGraphicObjectPropertyAsDoubleVector(JavaVM * jvm_, int id, int propertyName);

static bool setGraphicObjectProperty(JavaVM * jvm_, int id, int propertyName, double const* value, int valueSize);

static bool setGraphicObjectProperty(JavaVM * jvm_, int id, int propertyName, int value);

static int* getGraphicObjectPropertyAsIntegerVector(JavaVM * jvm_, int id, int propertyName);

static bool setGraphicObjectProperty(JavaVM * jvm_, int id, int propertyName, int const* value, int valueSize);

static bool setGraphicObjectProperty(JavaVM * jvm_, int id, int propertyName, bool value);

static int* getGraphicObjectPropertyAsBooleanVector(JavaVM * jvm_, int id, int propertyName);

static bool setGraphicObjectProperty(JavaVM * jvm_, int id, int propertyName, bool const* value, int valueSize);

static void registerScilabView(JavaVM * jvm_);

static void unregisterScilabView(JavaVM * jvm_);

static int getConsoleIdentifier(JavaVM * jvm_);

static void buildFigureMenuBar(JavaVM * jvm_, int figureId);


                        /**
                        * Get class name to use for static methods
                        * @return class name to use for static methods
                        */
                        
                static const std::string className()
                {
                return "org/scilab/modules/graphic_objects/CallGraphicController";
                }
                

                        /**
                        * Get class to use for static methods
                        * @return class to use for static methods
                        */
                        
                static jclass initClass(JNIEnv * curEnv)
                {
                    static jclass cls = 0;

                    if (cls == 0)
                    {
                        jclass _cls = curEnv->FindClass(className().c_str());
                        if (_cls)
                        {
                            cls = static_cast<jclass>(curEnv->NewGlobalRef(_cls));
                        }
                    }

                    return cls;
                 }
                
};


}
#endif
