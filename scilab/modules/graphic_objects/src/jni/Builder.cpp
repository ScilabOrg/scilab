#include "Builder.hxx"
/* Generated by GIWS (version 2.0.1) with command:
giws --disable-return-size-array --output-dir . --throws-exception-on-error --description-file builder.giws.xml 
*/
/*

This is generated code.

This software is a computer program whose purpose is to hide the complexity
of accessing Java objects/methods from C++ code.

This software is governed by the CeCILL-B license under French law and
abiding by the rules of distribution of free software.  You can  use, 
modify and/ or redistribute the software under the terms of the CeCILL-B
license as circulated by CEA, CNRS and INRIA at the following URL
"http://www.cecill.info". 

As a counterpart to the access to the source code and  rights to copy,
modify and redistribute granted by the license, users are provided only
with a limited warranty  and the software's author,  the holder of the
economic rights,  and the successive licensors  have only  limited
liability. 

In this respect, the user's attention is drawn to the risks associated
with loading,  using,  modifying and/or developing or reproducing the
software by the user in light of its specific status of free software,
that may mean  that it is complicated to manipulate,  and  that  also
therefore means  that it is reserved for developers  and  experienced
professionals having in-depth computer knowledge. Users are therefore
encouraged to load and test the software's suitability as regards their
requirements in conditions enabling the security of their systems and/or 
data to be ensured and,  more generally, to use and operate it in the 
same conditions as regards security. 

The fact that you are presently reading this means that you have had
knowledge of the CeCILL-B license and that you accept its terms.
*/

namespace org_scilab_modules_graphic_objects_builder {

                // Static declarations (if any)
                
// Returns the current env

JNIEnv * Builder::getCurrentEnv() {
JNIEnv * curEnv = NULL;
jint res=this->jvm->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
if (res != JNI_OK) {
throw GiwsException::JniException(getCurrentEnv());
}
return curEnv;
}
// Destructor

Builder::~Builder() {
JNIEnv * curEnv = NULL;
this->jvm->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);

curEnv->DeleteGlobalRef(this->instance);
curEnv->DeleteGlobalRef(this->instanceClass);
}
// Constructors
Builder::Builder(JavaVM * jvm_) {
jmethodID constructObject = NULL ;
jobject localInstance ;
jclass localClass ;

const std::string construct="<init>";
const std::string param="()V";
jvm=jvm_;

JNIEnv * curEnv = getCurrentEnv();

localClass = curEnv->FindClass( this->className().c_str() ) ;
if (localClass == NULL) {
  throw GiwsException::JniClassNotFoundException(curEnv, this->className());
}

this->instanceClass = static_cast<jclass>(curEnv->NewGlobalRef(localClass));

/* localClass is not needed anymore */
curEnv->DeleteLocalRef(localClass);

if (this->instanceClass == NULL) {
throw GiwsException::JniObjectCreationException(curEnv, this->className());
}


constructObject = curEnv->GetMethodID( this->instanceClass, construct.c_str() , param.c_str() ) ;
if(constructObject == NULL){
throw GiwsException::JniObjectCreationException(curEnv, this->className());
}

localInstance = curEnv->NewObject( this->instanceClass, constructObject ) ;
if(localInstance == NULL){
throw GiwsException::JniObjectCreationException(curEnv, this->className());
}
 
this->instance = curEnv->NewGlobalRef(localInstance) ;
if(this->instance == NULL){
throw GiwsException::JniObjectCreationException(curEnv, this->className());
}
/* localInstance not needed anymore */
curEnv->DeleteLocalRef(localInstance);

                /* Methods ID set to NULL */
jstringbuildRectjstringjava_lang_StringjdoubledoublejdoubledoublejdoubledoublejdoubledoublejintintjintintjintintjintintID=NULL;
jintcloneGraphicContextjstringjava_lang_Stringjstringjava_lang_StringID=NULL;
jintcloneFontContextjstringjava_lang_Stringjstringjava_lang_StringID=NULL;
jstringcreateHiddenLabeljstringjava_lang_StringID=NULL;
jbooleanisAxesRedrawingjstringjava_lang_StringID=NULL;
jintcreateLabeljstringjava_lang_StringjintintID=NULL;
jstringcreateNewFigureWithAxesID=NULL;
voidcloneMenusjstringjava_lang_Stringjstringjava_lang_StringID=NULL;
voidcloneAxesModeljstringjava_lang_StringID=NULL;


}

Builder::Builder(JavaVM * jvm_, jobject JObj) {
        jvm=jvm_;

        JNIEnv * curEnv = getCurrentEnv();

jclass localClass = curEnv->GetObjectClass(JObj);
        this->instanceClass = static_cast<jclass>(curEnv->NewGlobalRef(localClass));
        curEnv->DeleteLocalRef(localClass);

        if (this->instanceClass == NULL) {
throw GiwsException::JniObjectCreationException(curEnv, this->className());
        }

        this->instance = curEnv->NewGlobalRef(JObj) ;
        if(this->instance == NULL){
throw GiwsException::JniObjectCreationException(curEnv, this->className());
        }
        /* Methods ID set to NULL */
        jstringbuildRectjstringjava_lang_StringjdoubledoublejdoubledoublejdoubledoublejdoubledoublejintintjintintjintintjintintID=NULL;
jintcloneGraphicContextjstringjava_lang_Stringjstringjava_lang_StringID=NULL;
jintcloneFontContextjstringjava_lang_Stringjstringjava_lang_StringID=NULL;
jstringcreateHiddenLabeljstringjava_lang_StringID=NULL;
jbooleanisAxesRedrawingjstringjava_lang_StringID=NULL;
jintcreateLabeljstringjava_lang_StringjintintID=NULL;
jstringcreateNewFigureWithAxesID=NULL;
voidcloneMenusjstringjava_lang_Stringjstringjava_lang_StringID=NULL;
voidcloneAxesModeljstringjava_lang_StringID=NULL;


}

// Generic methods

void Builder::synchronize() {
if (getCurrentEnv()->MonitorEnter(instance) != JNI_OK) {
throw GiwsException::JniMonitorException(getCurrentEnv(), "Builder");
}
}

void Builder::endSynchronize() {
if ( getCurrentEnv()->MonitorExit(instance) != JNI_OK) {
throw GiwsException::JniMonitorException(getCurrentEnv(), "Builder");
}
}
// Method(s)

char* Builder::buildRect (JavaVM * jvm_, char const* pparentsubwinUID, double x, double y, double height, double width, int foreground, int background, int isfilled, int isline){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jstringbuildRectjstringjava_lang_StringjdoubledoublejdoubledoublejdoubledoublejdoubledoublejintintjintintjintintjintintID = curEnv->GetStaticMethodID(cls, "buildRect", "(Ljava/lang/String;DDDDIIII)Ljava/lang/String;" ) ;
if (jstringbuildRectjstringjava_lang_StringjdoubledoublejdoubledoublejdoubledoublejdoubledoublejintintjintintjintintjintintID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "buildRect");
}

jstring pparentsubwinUID_ = curEnv->NewStringUTF( pparentsubwinUID );
if (pparentsubwinUID != NULL && pparentsubwinUID_ == NULL)
{
throw GiwsException::JniBadAllocException(curEnv);
}


                        jstring res =  static_cast<jstring>( curEnv->CallStaticObjectMethod(cls, jstringbuildRectjstringjava_lang_StringjdoubledoublejdoubledoublejdoubledoublejdoubledoublejintintjintintjintintjintintID ,pparentsubwinUID_, x, y, height, width, foreground, background, isfilled, isline));
                        if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}if (res != NULL) { 

const char *tempString = curEnv->GetStringUTFChars(res, 0);
char * myStringBuffer = new char[strlen(tempString) + 1];
strcpy(myStringBuffer, tempString);
curEnv->ReleaseStringUTFChars(res, tempString);
curEnv->DeleteLocalRef(res);
curEnv->DeleteLocalRef(pparentsubwinUID_);
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
delete[] myStringBuffer;
                                throw GiwsException::JniCallMethodException(curEnv);
}
return myStringBuffer;
 } else { 
curEnv->DeleteLocalRef(res);
return NULL;
}
}

int Builder::cloneGraphicContext (JavaVM * jvm_, char const* sourceIdentifier, char const* destIdentifier){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jintcloneGraphicContextjstringjava_lang_Stringjstringjava_lang_StringID = curEnv->GetStaticMethodID(cls, "cloneGraphicContext", "(Ljava/lang/String;Ljava/lang/String;)I" ) ;
if (jintcloneGraphicContextjstringjava_lang_Stringjstringjava_lang_StringID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "cloneGraphicContext");
}

jstring sourceIdentifier_ = curEnv->NewStringUTF( sourceIdentifier );
if (sourceIdentifier != NULL && sourceIdentifier_ == NULL)
{
throw GiwsException::JniBadAllocException(curEnv);
}


jstring destIdentifier_ = curEnv->NewStringUTF( destIdentifier );
if (destIdentifier != NULL && destIdentifier_ == NULL)
{
throw GiwsException::JniBadAllocException(curEnv);
}


                        jint res =  static_cast<jint>( curEnv->CallStaticIntMethod(cls, jintcloneGraphicContextjstringjava_lang_Stringjstringjava_lang_StringID ,sourceIdentifier_, destIdentifier_));
                        curEnv->DeleteLocalRef(sourceIdentifier_);
curEnv->DeleteLocalRef(destIdentifier_);
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
return res;

}

int Builder::cloneFontContext (JavaVM * jvm_, char const* sourceIdentifier, char const* destIdentifier){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jintcloneFontContextjstringjava_lang_Stringjstringjava_lang_StringID = curEnv->GetStaticMethodID(cls, "cloneFontContext", "(Ljava/lang/String;Ljava/lang/String;)I" ) ;
if (jintcloneFontContextjstringjava_lang_Stringjstringjava_lang_StringID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "cloneFontContext");
}

jstring sourceIdentifier_ = curEnv->NewStringUTF( sourceIdentifier );
if (sourceIdentifier != NULL && sourceIdentifier_ == NULL)
{
throw GiwsException::JniBadAllocException(curEnv);
}


jstring destIdentifier_ = curEnv->NewStringUTF( destIdentifier );
if (destIdentifier != NULL && destIdentifier_ == NULL)
{
throw GiwsException::JniBadAllocException(curEnv);
}


                        jint res =  static_cast<jint>( curEnv->CallStaticIntMethod(cls, jintcloneFontContextjstringjava_lang_Stringjstringjava_lang_StringID ,sourceIdentifier_, destIdentifier_));
                        curEnv->DeleteLocalRef(sourceIdentifier_);
curEnv->DeleteLocalRef(destIdentifier_);
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
return res;

}

char* Builder::createHiddenLabel (JavaVM * jvm_, char const* parent){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jstringcreateHiddenLabeljstringjava_lang_StringID = curEnv->GetStaticMethodID(cls, "createHiddenLabel", "(Ljava/lang/String;)Ljava/lang/String;" ) ;
if (jstringcreateHiddenLabeljstringjava_lang_StringID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "createHiddenLabel");
}

jstring parent_ = curEnv->NewStringUTF( parent );
if (parent != NULL && parent_ == NULL)
{
throw GiwsException::JniBadAllocException(curEnv);
}


                        jstring res =  static_cast<jstring>( curEnv->CallStaticObjectMethod(cls, jstringcreateHiddenLabeljstringjava_lang_StringID ,parent_));
                        if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}if (res != NULL) { 

const char *tempString = curEnv->GetStringUTFChars(res, 0);
char * myStringBuffer = new char[strlen(tempString) + 1];
strcpy(myStringBuffer, tempString);
curEnv->ReleaseStringUTFChars(res, tempString);
curEnv->DeleteLocalRef(res);
curEnv->DeleteLocalRef(parent_);
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
delete[] myStringBuffer;
                                throw GiwsException::JniCallMethodException(curEnv);
}
return myStringBuffer;
 } else { 
curEnv->DeleteLocalRef(res);
return NULL;
}
}

bool Builder::isAxesRedrawing (JavaVM * jvm_, char const* subWin){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jbooleanisAxesRedrawingjstringjava_lang_StringID = curEnv->GetStaticMethodID(cls, "isAxesRedrawing", "(Ljava/lang/String;)Z" ) ;
if (jbooleanisAxesRedrawingjstringjava_lang_StringID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "isAxesRedrawing");
}

jstring subWin_ = curEnv->NewStringUTF( subWin );
if (subWin != NULL && subWin_ == NULL)
{
throw GiwsException::JniBadAllocException(curEnv);
}


                        jboolean res =  static_cast<jboolean>( curEnv->CallStaticBooleanMethod(cls, jbooleanisAxesRedrawingjstringjava_lang_StringID ,subWin_));
                        curEnv->DeleteLocalRef(subWin_);
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
return (res == JNI_TRUE);

}

int Builder::createLabel (JavaVM * jvm_, char const* parent, int type){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jintcreateLabeljstringjava_lang_StringjintintID = curEnv->GetStaticMethodID(cls, "createLabel", "(Ljava/lang/String;I)I" ) ;
if (jintcreateLabeljstringjava_lang_StringjintintID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "createLabel");
}

jstring parent_ = curEnv->NewStringUTF( parent );
if (parent != NULL && parent_ == NULL)
{
throw GiwsException::JniBadAllocException(curEnv);
}


                        jint res =  static_cast<jint>( curEnv->CallStaticIntMethod(cls, jintcreateLabeljstringjava_lang_StringjintintID ,parent_, type));
                        curEnv->DeleteLocalRef(parent_);
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
return res;

}

char* Builder::createNewFigureWithAxes (JavaVM * jvm_){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jstringcreateNewFigureWithAxesID = curEnv->GetStaticMethodID(cls, "createNewFigureWithAxes", "()Ljava/lang/String;" ) ;
if (jstringcreateNewFigureWithAxesID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "createNewFigureWithAxes");
}

                        jstring res =  static_cast<jstring>( curEnv->CallStaticObjectMethod(cls, jstringcreateNewFigureWithAxesID ));
                        if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}if (res != NULL) { 

const char *tempString = curEnv->GetStringUTFChars(res, 0);
char * myStringBuffer = new char[strlen(tempString) + 1];
strcpy(myStringBuffer, tempString);
curEnv->ReleaseStringUTFChars(res, tempString);
curEnv->DeleteLocalRef(res);
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
delete[] myStringBuffer;
                                throw GiwsException::JniCallMethodException(curEnv);
}
return myStringBuffer;
 } else { 
curEnv->DeleteLocalRef(res);
return NULL;
}
}

void Builder::cloneMenus (JavaVM * jvm_, char const* model, char const* newParent){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidcloneMenusjstringjava_lang_Stringjstringjava_lang_StringID = curEnv->GetStaticMethodID(cls, "cloneMenus", "(Ljava/lang/String;Ljava/lang/String;)V" ) ;
if (voidcloneMenusjstringjava_lang_Stringjstringjava_lang_StringID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "cloneMenus");
}

jstring model_ = curEnv->NewStringUTF( model );
if (model != NULL && model_ == NULL)
{
throw GiwsException::JniBadAllocException(curEnv);
}


jstring newParent_ = curEnv->NewStringUTF( newParent );
if (newParent != NULL && newParent_ == NULL)
{
throw GiwsException::JniBadAllocException(curEnv);
}


                         curEnv->CallStaticVoidMethod(cls, voidcloneMenusjstringjava_lang_Stringjstringjava_lang_StringID ,model_, newParent_);
                        curEnv->DeleteLocalRef(model_);
curEnv->DeleteLocalRef(newParent_);
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
}

void Builder::cloneAxesModel (JavaVM * jvm_, char const* parent){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread(reinterpret_cast<void **>(&curEnv), NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidcloneAxesModeljstringjava_lang_StringID = curEnv->GetStaticMethodID(cls, "cloneAxesModel", "(Ljava/lang/String;)V" ) ;
if (voidcloneAxesModeljstringjava_lang_StringID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "cloneAxesModel");
}

jstring parent_ = curEnv->NewStringUTF( parent );
if (parent != NULL && parent_ == NULL)
{
throw GiwsException::JniBadAllocException(curEnv);
}


                         curEnv->CallStaticVoidMethod(cls, voidcloneAxesModeljstringjava_lang_StringID ,parent_);
                        curEnv->DeleteLocalRef(parent_);
curEnv->DeleteLocalRef(cls);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
}

}
