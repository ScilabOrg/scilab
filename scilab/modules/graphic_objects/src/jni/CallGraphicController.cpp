#include "CallGraphicController.hxx"
/* Generated by GIWS (version 1.0.1) */
/*

Copyright 2007-2008 INRIA

Author : Sylvestre Ledru & others

This software is a computer program whose purpose is to hide the complexity
of accessing Java objects/methods from C++ code.

This software is governed by the CeCILL-B license under French law and
abiding by the rules of distribution of free software.  You can  use, 
modify and/ or redistribute the software under the terms of the CeCILL-B
license as circulated by CEA, CNRS and INRIA at the following URL
"http://www.cecill.info". 

As a counterpart to the access to the source code and  rights to copy,
modify and redistribute granted by the license, users are provided only
with a limited warranty  and the software's author,  the holder of the
economic rights,  and the successive licensors  have only  limited
liability. 

In this respect, the user's attention is drawn to the risks associated
with loading,  using,  modifying and/or developing or reproducing the
software by the user in light of its specific status of free software,
that may mean  that it is complicated to manipulate,  and  that  also
therefore means  that it is reserved for developers  and  experienced
professionals having in-depth computer knowledge. Users are therefore
encouraged to load and test the software's suitability as regards their
requirements in conditions enabling the security of their systems and/or 
data to be ensured and,  more generally, to use and operate it in the 
same conditions as regards security. 

The fact that you are presently reading this means that you have had
knowledge of the CeCILL-B license and that you accept its terms.
*/

namespace org_scilab_modules_graphic_objects {

// Returns the current env

JNIEnv * CallGraphicController::getCurrentEnv() {
JNIEnv * curEnv = NULL;
this->jvm->AttachCurrentThread((void **) &curEnv, NULL);
return curEnv;
}
// Destructor

CallGraphicController::~CallGraphicController() {
JNIEnv * curEnv = NULL;
this->jvm->AttachCurrentThread((void **) &curEnv, NULL);

curEnv->DeleteGlobalRef(this->instance);
curEnv->DeleteGlobalRef(this->instanceClass);
curEnv->DeleteGlobalRef(this->stringArrayClass);}
// Constructors

CallGraphicController::CallGraphicController(JavaVM * jvm_) {
jmethodID constructObject = NULL ;
jobject localInstance ;
jclass localClass ;
const std::string construct="<init>";
const std::string param="()V";
jvm=jvm_;

JNIEnv * curEnv = getCurrentEnv();

localClass = curEnv->FindClass( this->className().c_str() ) ;
if (localClass == NULL) {
  throw GiwsException::JniClassNotFoundException(curEnv, this->className());
}

this->instanceClass = (jclass) curEnv->NewGlobalRef(localClass) ;

/* localClass is not needed anymore */
curEnv->DeleteLocalRef(localClass);

if (this->instanceClass == NULL) {
throw GiwsException::JniObjectCreationException(curEnv, this->className());
}


constructObject = curEnv->GetMethodID( this->instanceClass, construct.c_str() , param.c_str() ) ;
if(constructObject == NULL){
throw GiwsException::JniObjectCreationException(curEnv, this->className());
}

localInstance = curEnv->NewObject( this->instanceClass, constructObject ) ;
if(localInstance == NULL){
throw GiwsException::JniObjectCreationException(curEnv, this->className());
}
 
this->instance = curEnv->NewGlobalRef(localInstance) ;
if(this->instance == NULL){
throw GiwsException::JniObjectCreationException(curEnv, this->className());
}
/* localInstance not needed anymore */
curEnv->DeleteLocalRef(localInstance);

                /* Methods ID set to NULL */
voiddeleteGraphicObjectjstringID=NULL; 
jstringcloneGraphicObjectjstringID=NULL; 
jstringaskGraphicObjectjstringID=NULL; 
jstringgetGraphicObjectPropertyAsStringjstringjstringID=NULL; 
jbooleansetGraphicObjectPropertyjstringjstringjstringID=NULL; 
voidsetRelationShipjstringjstringID=NULL; 
jobjectArraygetGraphicObjectPropertyAsStringVectorjstringjstringID=NULL; 
jbooleansetGraphicObjectPropertyjstringjstringjobjectArrayID=NULL; 
jdoublegetGraphicObjectPropertyAsDoublejstringjstringID=NULL; 
jbooleansetGraphicObjectPropertyjstringjstringjdoubleID=NULL; 
jdoubleArraygetGraphicObjectPropertyAsDoubleVectorjstringjstringID=NULL; 
jbooleansetGraphicObjectPropertyjstringjstringjdoubleArrayID=NULL; 
jintgetGraphicObjectPropertyAsIntegerjstringjstringID=NULL; 
jbooleansetGraphicObjectPropertyjstringjstringjintID=NULL; 
jintArraygetGraphicObjectPropertyAsIntegerVectorjstringjstringID=NULL; 
jbooleansetGraphicObjectPropertyjstringjstringjintArrayID=NULL; 
jintgetGraphicObjectPropertyAsBooleanjstringjstringID=NULL; 
jbooleansetGraphicObjectPropertyjstringjstringjbooleanID=NULL; 
jintArraygetGraphicObjectPropertyAsBooleanVectorjstringjstringID=NULL; 
jbooleansetGraphicObjectPropertyjstringjstringjbooleanArrayID=NULL; 


}

CallGraphicController::CallGraphicController(JavaVM * jvm_, jobject JObj) {
        jvm=jvm_;

        JNIEnv * curEnv = getCurrentEnv();

jclass localClass = curEnv->GetObjectClass(JObj);
        this->instanceClass = (jclass) curEnv->NewGlobalRef(localClass);
        curEnv->DeleteLocalRef(localClass);

        if (this->instanceClass == NULL) {
throw GiwsException::JniObjectCreationException(curEnv, this->className());
        }

        this->instance = curEnv->NewGlobalRef(JObj) ;
        if(this->instance == NULL){
throw GiwsException::JniObjectCreationException(curEnv, this->className());
        }
        /* Methods ID set to NULL */
        voiddeleteGraphicObjectjstringID=NULL; 
jstringcloneGraphicObjectjstringID=NULL; 
jstringaskGraphicObjectjstringID=NULL; 
jstringgetGraphicObjectPropertyAsStringjstringjstringID=NULL; 
jbooleansetGraphicObjectPropertyjstringjstringjstringID=NULL; 
voidsetRelationShipjstringjstringID=NULL; 
jobjectArraygetGraphicObjectPropertyAsStringVectorjstringjstringID=NULL; 
jbooleansetGraphicObjectPropertyjstringjstringjobjectArrayID=NULL; 
jdoublegetGraphicObjectPropertyAsDoublejstringjstringID=NULL; 
jbooleansetGraphicObjectPropertyjstringjstringjdoubleID=NULL; 
jdoubleArraygetGraphicObjectPropertyAsDoubleVectorjstringjstringID=NULL; 
jbooleansetGraphicObjectPropertyjstringjstringjdoubleArrayID=NULL; 
jintgetGraphicObjectPropertyAsIntegerjstringjstringID=NULL; 
jbooleansetGraphicObjectPropertyjstringjstringjintID=NULL; 
jintArraygetGraphicObjectPropertyAsIntegerVectorjstringjstringID=NULL; 
jbooleansetGraphicObjectPropertyjstringjstringjintArrayID=NULL; 
jintgetGraphicObjectPropertyAsBooleanjstringjstringID=NULL; 
jbooleansetGraphicObjectPropertyjstringjstringjbooleanID=NULL; 
jintArraygetGraphicObjectPropertyAsBooleanVectorjstringjstringID=NULL; 
jbooleansetGraphicObjectPropertyjstringjstringjbooleanArrayID=NULL; 


}

// Generic methods


void CallGraphicController::synchronize() {
if (getCurrentEnv()->MonitorEnter(instance) != JNI_OK) {
std::cerr << "Fail to enter monitor." << std::endl;
exit(EXIT_FAILURE);
}
}


void CallGraphicController::endSynchronize() {
if ( getCurrentEnv()->MonitorExit(instance) != JNI_OK) {
std::cerr << "Fail to exit monitor." << std::endl;
exit(EXIT_FAILURE);
}
}

// Method(s)

void CallGraphicController::deleteGraphicObject (JavaVM * jvm_, char * id){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voiddeleteGraphicObjectjstringID = curEnv->GetStaticMethodID(cls, "deleteGraphicObject", "(Ljava/lang/String;)V" ) ;
if (voiddeleteGraphicObjectjstringID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "deleteGraphicObject");
}

jstring id_ = curEnv->NewStringUTF( id );

                         curEnv->CallStaticVoidMethod(cls, voiddeleteGraphicObjectjstringID ,id_);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
}

char * CallGraphicController::cloneGraphicObject (JavaVM * jvm_, char * id){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jstringcloneGraphicObjectjstringID = curEnv->GetStaticMethodID(cls, "cloneGraphicObject", "(Ljava/lang/String;)Ljava/lang/String;" ) ;
if (jstringcloneGraphicObjectjstringID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "cloneGraphicObject");
}

jstring id_ = curEnv->NewStringUTF( id );

                        jstring res =  (jstring) curEnv->CallStaticObjectMethod(cls, jstringcloneGraphicObjectjstringID ,id_);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}

const char *tempString = curEnv->GetStringUTFChars(res, 0);
char * myStringBuffer = new char[strlen(tempString) + 1];
strcpy(myStringBuffer, tempString);
curEnv->ReleaseStringUTFChars(res, tempString);
curEnv->DeleteLocalRef(res);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
return myStringBuffer;

}

char * CallGraphicController::askGraphicObject (JavaVM * jvm_, char * typeName){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jstringaskGraphicObjectjstringID = curEnv->GetStaticMethodID(cls, "askGraphicObject", "(Ljava/lang/String;)Ljava/lang/String;" ) ;
if (jstringaskGraphicObjectjstringID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "askGraphicObject");
}

jstring typeName_ = curEnv->NewStringUTF( typeName );

                        jstring res =  (jstring) curEnv->CallStaticObjectMethod(cls, jstringaskGraphicObjectjstringID ,typeName_);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}

const char *tempString = curEnv->GetStringUTFChars(res, 0);
char * myStringBuffer = new char[strlen(tempString) + 1];
strcpy(myStringBuffer, tempString);
curEnv->ReleaseStringUTFChars(res, tempString);
curEnv->DeleteLocalRef(res);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
return myStringBuffer;

}

char * CallGraphicController::getGraphicObjectPropertyAsString (JavaVM * jvm_, char * id, char * propertyName){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jstringgetGraphicObjectPropertyAsStringjstringjstringID = curEnv->GetStaticMethodID(cls, "getGraphicObjectPropertyAsString", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;" ) ;
if (jstringgetGraphicObjectPropertyAsStringjstringjstringID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "getGraphicObjectPropertyAsString");
}

jstring id_ = curEnv->NewStringUTF( id );

jstring propertyName_ = curEnv->NewStringUTF( propertyName );

                        jstring res =  (jstring) curEnv->CallStaticObjectMethod(cls, jstringgetGraphicObjectPropertyAsStringjstringjstringID ,id_, propertyName_);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}

const char *tempString = curEnv->GetStringUTFChars(res, 0);
char * myStringBuffer = new char[strlen(tempString) + 1];
strcpy(myStringBuffer, tempString);
curEnv->ReleaseStringUTFChars(res, tempString);
curEnv->DeleteLocalRef(res);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
return myStringBuffer;

}

bool CallGraphicController::setGraphicObjectProperty (JavaVM * jvm_, char * id, char * propertyName, char * value){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jbooleansetGraphicObjectPropertyjstringjstringjstringID = curEnv->GetStaticMethodID(cls, "setGraphicObjectProperty", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z" ) ;
if (jbooleansetGraphicObjectPropertyjstringjstringjstringID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "setGraphicObjectProperty");
}

jstring id_ = curEnv->NewStringUTF( id );

jstring propertyName_ = curEnv->NewStringUTF( propertyName );

jstring value_ = curEnv->NewStringUTF( value );

                        jboolean res =  (jboolean) curEnv->CallStaticBooleanMethod(cls, jbooleansetGraphicObjectPropertyjstringjstringjstringID ,id_, propertyName_, value_);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
return (res == JNI_TRUE);

}

void CallGraphicController::setRelationShip (JavaVM * jvm_, char * parentId, char * childId){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID voidsetRelationShipjstringjstringID = curEnv->GetStaticMethodID(cls, "setRelationShip", "(Ljava/lang/String;Ljava/lang/String;)V" ) ;
if (voidsetRelationShipjstringjstringID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "setRelationShip");
}

jstring parentId_ = curEnv->NewStringUTF( parentId );

jstring childId_ = curEnv->NewStringUTF( childId );

                         curEnv->CallStaticVoidMethod(cls, voidsetRelationShipjstringjstringID ,parentId_, childId_);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
}

char ** CallGraphicController::getGraphicObjectPropertyAsStringVector (JavaVM * jvm_, char * id, char * propertyName){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jobjectArraygetGraphicObjectPropertyAsStringVectorjstringjstringID = curEnv->GetStaticMethodID(cls, "getGraphicObjectPropertyAsStringVector", "(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;" ) ;
if (jobjectArraygetGraphicObjectPropertyAsStringVectorjstringjstringID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "getGraphicObjectPropertyAsStringVector");
}

jstring id_ = curEnv->NewStringUTF( id );

jstring propertyName_ = curEnv->NewStringUTF( propertyName );

                        jobjectArray res =  (jobjectArray) curEnv->CallObjectMethod(cls, jobjectArraygetGraphicObjectPropertyAsStringVectorjstringjstringID ,id_, propertyName_);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
jsize len = curEnv->GetArrayLength(res);
char **arrayOfString;
                        arrayOfString= arrayOfString= new char *[len + 1];
for (jsize i = 0; i < len; i++){
jstring resString = (jstring)curEnv->GetObjectArrayElement(res, i);
const char *tempString = curEnv->GetStringUTFChars(resString, 0);
arrayOfString[i] = new char[strlen(tempString) + 1];

strcpy(arrayOfString[i], tempString);
curEnv->ReleaseStringUTFChars(resString, tempString);
curEnv->DeleteLocalRef(resString);
}
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
curEnv->DeleteLocalRef(res);
return arrayOfString;

}

bool CallGraphicController::setGraphicObjectProperty (JavaVM * jvm_, char * id, char * propertyName, char ** value, int valueSize){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jbooleansetGraphicObjectPropertyjstringjstringjobjectArrayID = curEnv->GetStaticMethodID(cls, "setGraphicObjectProperty", "(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)Z" ) ;
if (jbooleansetGraphicObjectPropertyjstringjstringjobjectArrayID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "setGraphicObjectProperty");
}

jstring id_ = curEnv->NewStringUTF( id );

jstring propertyName_ = curEnv->NewStringUTF( propertyName );
jclass stringArrayClass = curEnv->FindClass("java/lang/String");

// create java array of strings.
jobjectArray value_ = curEnv->NewObjectArray( valueSize, stringArrayClass, NULL);
if (value_ == NULL)
{
throw GiwsException::JniBadAllocException(curEnv);
}

// convert each char * to java strings and fill the java array.
for ( int i = 0; i < valueSize; i++)
{
jstring TempString = curEnv->NewStringUTF( value[i] );
if (TempString == NULL)
{
throw GiwsException::JniBadAllocException(curEnv);
}

curEnv->SetObjectArrayElement( value_, i, TempString);

// avoid keeping reference on to many strings
curEnv->DeleteLocalRef(TempString);
}
                        jboolean res =  (jboolean) curEnv->CallStaticBooleanMethod(cls, jbooleansetGraphicObjectPropertyjstringjstringjobjectArrayID ,id_, propertyName_, value_);
curEnv->DeleteLocalRef(stringArrayClass);
curEnv->DeleteLocalRef(value_);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
return (res == JNI_TRUE);

}

double CallGraphicController::getGraphicObjectPropertyAsDouble (JavaVM * jvm_, char * id, char * propertyName){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jdoublegetGraphicObjectPropertyAsDoublejstringjstringID = curEnv->GetStaticMethodID(cls, "getGraphicObjectPropertyAsDouble", "(Ljava/lang/String;Ljava/lang/String;)D" ) ;
if (jdoublegetGraphicObjectPropertyAsDoublejstringjstringID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "getGraphicObjectPropertyAsDouble");
}

jstring id_ = curEnv->NewStringUTF( id );

jstring propertyName_ = curEnv->NewStringUTF( propertyName );

                        jdouble res =  (jdouble) curEnv->CallStaticDoubleMethod(cls, jdoublegetGraphicObjectPropertyAsDoublejstringjstringID ,id_, propertyName_);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
return res;

}

bool CallGraphicController::setGraphicObjectProperty (JavaVM * jvm_, char * id, char * propertyName, double value){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jbooleansetGraphicObjectPropertyjstringjstringjdoubleID = curEnv->GetStaticMethodID(cls, "setGraphicObjectProperty", "(Ljava/lang/String;Ljava/lang/String;D)Z" ) ;
if (jbooleansetGraphicObjectPropertyjstringjstringjdoubleID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "setGraphicObjectProperty");
}

jstring id_ = curEnv->NewStringUTF( id );

jstring propertyName_ = curEnv->NewStringUTF( propertyName );

                        jboolean res =  (jboolean) curEnv->CallStaticBooleanMethod(cls, jbooleansetGraphicObjectPropertyjstringjstringjdoubleID ,id_, propertyName_, value);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
return (res == JNI_TRUE);

}

double * CallGraphicController::getGraphicObjectPropertyAsDoubleVector (JavaVM * jvm_, char * id, char * propertyName){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jdoubleArraygetGraphicObjectPropertyAsDoubleVectorjstringjstringID = curEnv->GetStaticMethodID(cls, "getGraphicObjectPropertyAsDoubleVector", "(Ljava/lang/String;Ljava/lang/String;)[D" ) ;
if (jdoubleArraygetGraphicObjectPropertyAsDoubleVectorjstringjstringID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "getGraphicObjectPropertyAsDoubleVector");
}

jstring id_ = curEnv->NewStringUTF( id );

jstring propertyName_ = curEnv->NewStringUTF( propertyName );

                        jdoubleArray res =  (jdoubleArray) curEnv->CallObjectMethod(cls, jdoubleArraygetGraphicObjectPropertyAsDoubleVectorjstringjstringID ,id_, propertyName_);

jsize len = curEnv->GetArrayLength(res);
jboolean isCopy = JNI_FALSE;

/* faster than getXXXArrayElements */
jdouble *resultsArray = (jdouble *) curEnv->GetPrimitiveArrayCritical(res, &isCopy);
double * myArray= new double[len];

for (jsize i = 0; i < len; i++){
myArray[i]=resultsArray[i];
}
curEnv->ReleasePrimitiveArrayCritical(res, resultsArray, JNI_ABORT);

                        curEnv->DeleteLocalRef(res);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
return myArray;

}

bool CallGraphicController::setGraphicObjectProperty (JavaVM * jvm_, char * id, char * propertyName, double * value, int valueSize){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jbooleansetGraphicObjectPropertyjstringjstringjdoubleArrayID = curEnv->GetStaticMethodID(cls, "setGraphicObjectProperty", "(Ljava/lang/String;Ljava/lang/String;[D)Z" ) ;
if (jbooleansetGraphicObjectPropertyjstringjstringjdoubleArrayID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "setGraphicObjectProperty");
}

jstring id_ = curEnv->NewStringUTF( id );

jstring propertyName_ = curEnv->NewStringUTF( propertyName );

jdoubleArray value_ = curEnv->NewDoubleArray( valueSize ) ;

if (value_ == NULL)
{
// check that allocation succeed
throw GiwsException::JniBadAllocException(curEnv);
}

curEnv->SetDoubleArrayRegion( value_, 0, valueSize, (jdouble*) value ) ;


                        jboolean res =  (jboolean) curEnv->CallStaticBooleanMethod(cls, jbooleansetGraphicObjectPropertyjstringjstringjdoubleArrayID ,id_, propertyName_, value_);
curEnv->DeleteLocalRef(value_);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
return (res == JNI_TRUE);

}

int CallGraphicController::getGraphicObjectPropertyAsInteger (JavaVM * jvm_, char * id, char * propertyName){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jintgetGraphicObjectPropertyAsIntegerjstringjstringID = curEnv->GetStaticMethodID(cls, "getGraphicObjectPropertyAsInteger", "(Ljava/lang/String;Ljava/lang/String;)I" ) ;
if (jintgetGraphicObjectPropertyAsIntegerjstringjstringID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "getGraphicObjectPropertyAsInteger");
}

jstring id_ = curEnv->NewStringUTF( id );

jstring propertyName_ = curEnv->NewStringUTF( propertyName );

                        jint res =  (jint) curEnv->CallIntMethod(cls, jintgetGraphicObjectPropertyAsIntegerjstringjstringID ,id_, propertyName_);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
return res;

}

bool CallGraphicController::setGraphicObjectProperty (JavaVM * jvm_, char * id, char * propertyName, int value){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jbooleansetGraphicObjectPropertyjstringjstringjintID = curEnv->GetStaticMethodID(cls, "setGraphicObjectProperty", "(Ljava/lang/String;Ljava/lang/String;I)Z" ) ;
if (jbooleansetGraphicObjectPropertyjstringjstringjintID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "setGraphicObjectProperty");
}

jstring id_ = curEnv->NewStringUTF( id );

jstring propertyName_ = curEnv->NewStringUTF( propertyName );

                        jboolean res =  (jboolean) curEnv->CallStaticBooleanMethod(cls, jbooleansetGraphicObjectPropertyjstringjstringjintID ,id_, propertyName_, value);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
return (res == JNI_TRUE);

}

int * CallGraphicController::getGraphicObjectPropertyAsIntegerVector (JavaVM * jvm_, char * id, char * propertyName){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jintArraygetGraphicObjectPropertyAsIntegerVectorjstringjstringID = curEnv->GetStaticMethodID(cls, "getGraphicObjectPropertyAsIntegerVector", "(Ljava/lang/String;Ljava/lang/String;)[I" ) ;
if (jintArraygetGraphicObjectPropertyAsIntegerVectorjstringjstringID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "getGraphicObjectPropertyAsIntegerVector");
}

jstring id_ = curEnv->NewStringUTF( id );

jstring propertyName_ = curEnv->NewStringUTF( propertyName );

                        jintArray res =  (jintArray) curEnv->CallObjectMethod(cls, jintArraygetGraphicObjectPropertyAsIntegerVectorjstringjstringID ,id_, propertyName_);

jsize len = curEnv->GetArrayLength(res);
jboolean isCopy = JNI_FALSE;

/* faster than getXXXArrayElements */
jint *resultsArray = (jint *) curEnv->GetPrimitiveArrayCritical(res, &isCopy);
int * myArray= new int[len];

for (jsize i = 0; i < len; i++){
myArray[i]=resultsArray[i];
}
curEnv->ReleasePrimitiveArrayCritical(res, resultsArray, JNI_ABORT);

                        curEnv->DeleteLocalRef(res);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
return myArray;

}

bool CallGraphicController::setGraphicObjectProperty (JavaVM * jvm_, char * id, char * propertyName, int * value, int valueSize){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jbooleansetGraphicObjectPropertyjstringjstringjintArrayID = curEnv->GetStaticMethodID(cls, "setGraphicObjectProperty", "(Ljava/lang/String;Ljava/lang/String;[I)Z" ) ;
if (jbooleansetGraphicObjectPropertyjstringjstringjintArrayID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "setGraphicObjectProperty");
}

jstring id_ = curEnv->NewStringUTF( id );

jstring propertyName_ = curEnv->NewStringUTF( propertyName );

jintArray value_ = curEnv->NewIntArray( valueSize ) ;

if (value_ == NULL)
{
// check that allocation succeed
throw GiwsException::JniBadAllocException(curEnv);
}

curEnv->SetIntArrayRegion( value_, 0, valueSize, (jint*) value ) ;


                        jboolean res =  (jboolean) curEnv->CallStaticBooleanMethod(cls, jbooleansetGraphicObjectPropertyjstringjstringjintArrayID ,id_, propertyName_, value_);
curEnv->DeleteLocalRef(value_);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
return (res == JNI_TRUE);

}

int CallGraphicController::getGraphicObjectPropertyAsBoolean (JavaVM * jvm_, char * id, char * propertyName){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jintgetGraphicObjectPropertyAsBooleanjstringjstringID = curEnv->GetStaticMethodID(cls, "getGraphicObjectPropertyAsBoolean", "(Ljava/lang/String;Ljava/lang/String;)I" ) ;
if (jintgetGraphicObjectPropertyAsBooleanjstringjstringID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "getGraphicObjectPropertyAsBoolean");
}

jstring id_ = curEnv->NewStringUTF( id );

jstring propertyName_ = curEnv->NewStringUTF( propertyName );

                        jint res =  (jint) curEnv->CallIntMethod(cls, jintgetGraphicObjectPropertyAsBooleanjstringjstringID ,id_, propertyName_);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
return res;

}

bool CallGraphicController::setGraphicObjectProperty (JavaVM * jvm_, char * id, char * propertyName, bool value){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jbooleansetGraphicObjectPropertyjstringjstringjbooleanID = curEnv->GetStaticMethodID(cls, "setGraphicObjectProperty", "(Ljava/lang/String;Ljava/lang/String;Z)Z" ) ;
if (jbooleansetGraphicObjectPropertyjstringjstringjbooleanID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "setGraphicObjectProperty");
}

jstring id_ = curEnv->NewStringUTF( id );

jstring propertyName_ = curEnv->NewStringUTF( propertyName );

jboolean value_ = ((bool) value ? JNI_TRUE : JNI_FALSE);

                        jboolean res =  (jboolean) curEnv->CallStaticBooleanMethod(cls, jbooleansetGraphicObjectPropertyjstringjstringjbooleanID ,id_, propertyName_, value_);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
return (res == JNI_TRUE);

}

int * CallGraphicController::getGraphicObjectPropertyAsBooleanVector (JavaVM * jvm_, char * id, char * propertyName){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jintArraygetGraphicObjectPropertyAsBooleanVectorjstringjstringID = curEnv->GetStaticMethodID(cls, "getGraphicObjectPropertyAsBooleanVector", "(Ljava/lang/String;Ljava/lang/String;)[I" ) ;
if (jintArraygetGraphicObjectPropertyAsBooleanVectorjstringjstringID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "getGraphicObjectPropertyAsBooleanVector");
}

jstring id_ = curEnv->NewStringUTF( id );

jstring propertyName_ = curEnv->NewStringUTF( propertyName );

                        jintArray res =  (jintArray) curEnv->CallObjectMethod(cls, jintArraygetGraphicObjectPropertyAsBooleanVectorjstringjstringID ,id_, propertyName_);

jsize len = curEnv->GetArrayLength(res);
jboolean isCopy = JNI_FALSE;

/* faster than getXXXArrayElements */
jint *resultsArray = (jint *) curEnv->GetPrimitiveArrayCritical(res, &isCopy);
int * myArray= new int[len];

for (jsize i = 0; i < len; i++){
myArray[i]=resultsArray[i];
}
curEnv->ReleasePrimitiveArrayCritical(res, resultsArray, JNI_ABORT);

                        curEnv->DeleteLocalRef(res);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
return myArray;

}

bool CallGraphicController::setGraphicObjectProperty (JavaVM * jvm_, char * id, char * propertyName, bool * value, int valueSize){

JNIEnv * curEnv = NULL;
jvm_->AttachCurrentThread((void **) &curEnv, NULL);
jclass cls = curEnv->FindClass( className().c_str() );

jmethodID jbooleansetGraphicObjectPropertyjstringjstringjbooleanArrayID = curEnv->GetStaticMethodID(cls, "setGraphicObjectProperty", "(Ljava/lang/String;Ljava/lang/String;[Z)Z" ) ;
if (jbooleansetGraphicObjectPropertyjstringjstringjbooleanArrayID == NULL) {
throw GiwsException::JniMethodNotFoundException(curEnv, "setGraphicObjectProperty");
}

jstring id_ = curEnv->NewStringUTF( id );

jstring propertyName_ = curEnv->NewStringUTF( propertyName );

jbooleanArray value_ = curEnv->NewBooleanArray( valueSize ) ;
curEnv->SetBooleanArrayRegion( value_, 0, valueSize, (jboolean*) value ) ;

                        jboolean res =  (jboolean) curEnv->CallStaticBooleanMethod(cls, jbooleansetGraphicObjectPropertyjstringjstringjbooleanArrayID ,id_, propertyName_, value_);
curEnv->DeleteLocalRef(value_);
if (curEnv->ExceptionCheck()) {
throw GiwsException::JniCallMethodException(curEnv);
}
return (res == JNI_TRUE);

}

}
