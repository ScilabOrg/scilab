<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2000 - INRIA - Carlos Klimann
 * Copyright (C) 2010 - DIGITEO - Michael Baudin
 *
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at
 * http://www.cecill.info/licences/Licence_CeCILL_V2.1-en.txt
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org"  xml:lang="en" xml:id="cdfnor">
    <refnamediv>
        <refname>cdfnor</refname>
        <refpurpose>cumulative distribution function normal distribution</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Calling Sequence</title>
        <synopsis>
            [P,Q]=cdfnor("PQ",X,Mean,Std)
            X=cdfnor("X",Mean,Std,P,Q)
            Mean=cdfnor("Mean",Std,P,Q,X)
            Std=cdfnor("Std",P,Q,X,Mean)
        </synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>Arguments</title>
        <variablelist>
            <varlistentry>
                <term>P,Q,X,Mean,Std</term>
                <listitem>
                    <para>matrix of doubles of the same size.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>P,Q (Q=1-P)  </term>
                <listitem>
                    <para>The integral from -infinity to X of the normal density. Input range: (0,1].</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>X</term>
                <listitem>
                    <para>Upper limit of integration of the normal-density. Input range: ( -infinity, +infinity)</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Mean</term>
                <listitem>
                    <para> The mean of the normal density. Input range: (-infinity, +infinity)</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Sd</term>
                <listitem>
                    <para> Standard Deviation of the normal density. Input range: (0, +infinity).</para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Description</title>
        <para>
            Calculates any one parameter of the normal
            distribution given values for the others.
        </para>
        <para>
            A slightly modified version of ANORM from
            Cody, W.D. (1993). "ALGORITHM 715: SPECFUN - A Portable FORTRAN
            Package of Special Function Routines and Test Drivers"
            acm Transactions on Mathematical Software. 19, 22-32.
            is used to calulate the  cumulative standard normal distribution.
        </para>
        <para>
            The rational functions from pages  90-95  of Kennedy and Gentle,
            Statistical  Computing,  Marcel  Dekker, NY,  1980 are  used  as
            starting values to Newton's Iterations which compute the inverse
            standard normal.  Therefore no  searches  are necessary for  any
            parameter.
        </para>
        <para>
            For X &lt; -15, the asymptotic expansion for the normal is used  as
            the starting value in finding the inverse standard normal.
            This is formula 26.2.12 of Abramowitz and Stegun.
        </para>
        <para>
            The cumulated distribution function definition is:
        </para>
        <para>
            <latex>
                \begin{eqnarray}
                f(x,\mu,\sigma) = \frac{1}{\sigma\sqrt{2\pi}} \int_{-\infty}^x \exp\left(\frac{-(t-\mu)^2}{2\sigma^2}\right) dt
                \end{eqnarray}
            </latex>
        </para>
        <para>
            From DCDFLIB: Library of Fortran Routines for Cumulative Distribution
            Functions, Inverses, and Other Parameters (February, 1994)
            Barry W. Brown, James Lovato and Kathy Russell. The University of
            Texas.
        </para>
    </refsection>
    <refsection>
        <title>Examples</title>
        <programlisting role="example"><![CDATA[
// Compute p from x
x = -1;
Mean = 0;
Std = 1;
// P = 0.1586553, Q = 0.8413447
[P,Q]=cdfnor("PQ",x,Mean,Std)
   ]]></programlisting>
        <programlisting role="example"><![CDATA[
// Compute p from a very rare x
// Notice that Q should be used when P is close to 1,
// while P should be used when Q is close to 1.
x = 10;
Mean = 0;
Std = 1;
// P = 1, Q = 7.620D-24
[P,Q]=cdfnor("PQ",x,Mean,Std)
   ]]></programlisting>
        <programlisting role="example"><![CDATA[
// Make a table of P,Q
Mean = 0;
Std = 1;
x = -6:6;
[P,Q]=cdfnor("PQ",x,Mean*ones(x),Std*ones(x));
[x' P' Q']
   ]]></programlisting>
        <programlisting role="example"><![CDATA[
// Find x from p,q
Mean = 0;
Std = 1;
p = 0.1;
q = 0.9;
// x = - 1.2815516
x = cdfnor("X",Mean,Std,p,q)
   ]]></programlisting>
        <programlisting role="example"><![CDATA[
// Find Mean from p,q
x = 2;
Std = 1;
p = 0.1;
q = 0.9;
// Mean = 3.2815516
Mean = cdfnor("Mean",Std,p,q,x)
   ]]></programlisting>
        <programlisting role="example"><![CDATA[
// Find Standard Deviation from p,q
Mean = 0;
p = 0.1;
q = 0.9;
x = 2;
// Std = - 1.5606083
Std = cdfnor("Std",p,q,x,Mean)
   ]]></programlisting>
        
        
        
        <programlisting role="example"><![CDATA[
// Plot the function
h = scf();
Mean = [0 0 0 -2];
Std2 = [0.2 1.0 5.0 0.5];
cols = [1 2 3 4];
nf = size(cols,"*");
lgd = [];
for k = 1 : nf
  x = linspace(-5,5,1000);
  P=cdfnor("PQ",x,Mean(k)*ones(x),sqrt(Std2(k))*ones(x));
  plot(x,P)
  str = msprintf("Mean=%s, Std^2=%s",string(Mean(k)),string(Std2(k)));
  lgd($+1) = str;
end
for k = 1 : nf
h.children.children.children(nf - k + 1).foreground = cols(k);
end
legend(lgd);
   ]]></programlisting>
        <scilab:image>
            h = scf();
            Mean = [0 0 0 -2];
            Std2 = [0.2 1.0 5.0 0.5];
            cols = [1 2 3 4];
            nf = size(cols,"*");
            lgd = [];
            for k = 1 : nf
            x = linspace(-5,5,1000);
            P=cdfnor("PQ",x,Mean(k)*ones(x),sqrt(Std2(k))*ones(x));
            plot(x,P)
            str = msprintf("Mean=%s, Std^2=%s",string(Mean(k)),string(Std2(k)));
            lgd($+1) = str;
            end
            for k = 1 : nf
            h.children.children.children(nf - k + 1).foreground = cols(k);
            end
            legend(lgd);
        </scilab:image>
        
        <programlisting role="example"><![CDATA[
// Plot the Inverse Cumulated Standard function
Mean = 0;
Std = 1;
p = linspace(1e-10,1-1e-10,1000);
q = 1-p;
x = cdfnor("X",Mean*ones(p),Std*ones(p),p,q);
plot(p,x)
xtitle("Inverse Cumulated Distribution Normal Standard Function","p","x");
   ]]></programlisting>
        
        
        <scilab:image localized="true">
            Mean = 0;
            Std = 1;
            p = linspace(1e-10,1-1e-10,1000);
            q = 1-p;
            x = cdfnor("X",Mean*ones(p),Std*ones(p),p,q);
            plot(p,x)
            xtitle("Inverse Cumulated Distribution Normal Standard Function","p","x");
        </scilab:image>
        
        <programlisting role="example"><![CDATA[
// The Inverse Normal CDF is ill-conditioned when
// p is close to p=0.5.
// This is because, at p=0.5, the first derivative is non-zero,
// while the function is zero.
// This may produce a large relative error in the function value,
// that is, some digits may not be accurate when p is getting
// closer and closer to p=0.5.
Mean = 0;
Std = 1;
p = 0.500000001;
q = 1-p;
x = cdfnor("X",Mean,Std,p,q)
// The expected probability was computed from a symbolic software,
// with the expression sqrt(2)*erfinv(2*p-1)
// where p = 1/2+10^-9.
expected = 2.50662827463100050e-9;
// The relative error is about 1.e-8, meaning that
// only 8 digits are accurate.
abs(x-expected)/abs(expected)
   ]]></programlisting>
        <programlisting role="example"><![CDATA[
// The zero-finder algorithm may be unable to find the standard
// deviation in some situations when the inversion cannot be
// performed.
Mean = 1;
p = 0.5;
q = 0.5;
x = 1;
// Std = Nan
Std = cdfnor("Std",p,q,x,Mean)
   ]]></programlisting>
    </refsection>
    <refsection role="see also">
        <title>See Also</title>
        <simplelist type="inline">
            <member>
                <link linkend="cdfbet">cdfbet</link>
            </member>
            <member>
                <link linkend="cdfbin">cdfbin</link>
            </member>
            <member>
                <link linkend="cdfchi">cdfchi</link>
            </member>
            <member>
                <link linkend="cdfchn">cdfchn</link>
            </member>
            <member>
                <link linkend="cdff">cdff</link>
            </member>
            <member>
                <link linkend="cdffnc">cdffnc</link>
            </member>
            <member>
                <link linkend="cdfgam">cdfgam</link>
            </member>
            <member>
                <link linkend="cdfnbn">cdfnbn</link>
            </member>
            <member>
                <link linkend="cdfpoi">cdfpoi</link>
            </member>
            <member>
                <link linkend="cdft">cdft</link>
            </member>
        </simplelist>
    </refsection>
</refentry>
