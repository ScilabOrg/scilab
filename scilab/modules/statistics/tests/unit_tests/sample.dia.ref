// =============================================================================
// Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
// Copyright (C) 2014 - Scilab Enterprises - Pierre-Aime Agnel
//
//  This file is distributed under the same license as the Scilab package.
// =============================================================================
// <-- CLI SHELL MODE -->
// <-- unit test for sample.sci-->
//
//==============================================================================
// Checking error messages
//==============================================================================
fname = "sample"
 fname  =
 
 sample   
err_msg_glob = msprintf(_("%s: Wrong number of input arguments: %d to %d expected.\n"), fname, 2, 3);
err_msg_orient = msprintf(gettext("%s: Wrong value for input argument #%d: ''%s'', ''%s'', ''%s'', %d or %d expected.\n"), fname, 3, "*", "r", "c", 1, 2); 
//========================================
// Error for the number of input arguments 
n = 100;
X = 1:10;
orient = "*"
 orient  =
 
 *   
func_str = "sample(n)";
grand("setsd",0); //Sets the randum number to seed 0 for reproductibility
assert_checkerror(func_str, err_msg_glob);
//========================================
// Error for the value of orient 
n = 100;
X = 1:10;
orient = "5"
 orient  =
 
 5   
func_str = "sample(n, X, orient)";
grand("setsd",0); //Sets the randum number to seed 0 for reproductibility
assert_checkerror(func_str, err_msg_orient);
//==============================================================================
// Checking normal behaviour for complete size '*'
//==============================================================================
//========================================
// Check default call
n = 100;
X = 1:10;
grand("setsd", 0); //Sets the randum number to seed 0 for reproductibility
samples = sample(n, X)
 samples  =
 
 
         column  1 to 11
 
    5.    10.    4.    1.    4.    10.    8.    4.    8.    4.    2.  
 
         column 12 to 22
 
    7.    7.    10.    9.    7.    7.    9.    5.    4.    7.    10.  
 
         column 23 to 33
 
    2.    5.    5.    2.    10.    10.    10.    1.    2.    3.    4.  
 
         column 34 to 44
 
    1.    6.    6.    3.    10.    2.    9.    9.    4.    7.    10.  
 
         column 45 to 55
 
    2.    8.    4.    6.    3.    2.    1.    10.    4.    2.    2.  
 
         column 56 to 66
 
    1.    4.    7.    7.    8.    10.    7.    4.    5.    6.    1.  
 
         column 67 to 77
 
    9.    3.    9.    3.    8.    6.    1.    1.    9.    2.    10.  
 
         column 78 to 88
 
    7.    2.    1.    3.    10.    5.    4.    10.    4.    10.    4.  
 
         column 89 to 99
 
    10.    9.    6.    4.    3.    9.    6.    7.    7.    6.    8.  
 
         column 100
 
    3.  
grand("setsd", 0); //Sets the randum number to seed 0 for reproductibility
samples_star = sample(n, X, "*")
 samples_star  =
 
 
         column  1 to 11
 
    5.    10.    4.    1.    4.    10.    8.    4.    8.    4.    2.  
 
         column 12 to 22
 
    7.    7.    10.    9.    7.    7.    9.    5.    4.    7.    10.  
 
         column 23 to 33
 
    2.    5.    5.    2.    10.    10.    10.    1.    2.    3.    4.  
 
         column 34 to 44
 
    1.    6.    6.    3.    10.    2.    9.    9.    4.    7.    10.  
 
         column 45 to 55
 
    2.    8.    4.    6.    3.    2.    1.    10.    4.    2.    2.  
 
         column 56 to 66
 
    1.    4.    7.    7.    8.    10.    7.    4.    5.    6.    1.  
 
         column 67 to 77
 
    9.    3.    9.    3.    8.    6.    1.    1.    9.    2.    10.  
 
         column 78 to 88
 
    7.    2.    1.    3.    10.    5.    4.    10.    4.    10.    4.  
 
         column 89 to 99
 
    10.    9.    6.    4.    3.    9.    6.    7.    7.    6.    8.  
 
         column 100
 
    3.  
assert_checkequal(samples, samples_star);
//========================================
// Check size consistency
X = X';
grand("setsd", 0); //Sets the randum number to seed 0 for reproductibility
samples_transposed = sample(n, X)
 samples_transposed  =
 
 
         column  1 to 11
 
    5.    10.    4.    1.    4.    10.    8.    4.    8.    4.    2.  
 
         column 12 to 22
 
    7.    7.    10.    9.    7.    7.    9.    5.    4.    7.    10.  
 
         column 23 to 33
 
    2.    5.    5.    2.    10.    10.    10.    1.    2.    3.    4.  
 
         column 34 to 44
 
    1.    6.    6.    3.    10.    2.    9.    9.    4.    7.    10.  
 
         column 45 to 55
 
    2.    8.    4.    6.    3.    2.    1.    10.    4.    2.    2.  
 
         column 56 to 66
 
    1.    4.    7.    7.    8.    10.    7.    4.    5.    6.    1.  
 
         column 67 to 77
 
    9.    3.    9.    3.    8.    6.    1.    1.    9.    2.    10.  
 
         column 78 to 88
 
    7.    2.    1.    3.    10.    5.    4.    10.    4.    10.    4.  
 
         column 89 to 99
 
    10.    9.    6.    4.    3.    9.    6.    7.    7.    6.    8.  
 
         column 100
 
    3.  
assert_checkequal(samples, samples_transposed)
 ans  =
 
  T  
//==============================================================================
// Checking normal behaviour for complete size 'r'
//==============================================================================
//========================================
// Check default call
n = 100
 n  =
 
    100.  
X = [1 2 3; 4 5 6]
 X  =
 
    1.    2.    3.  
    4.    5.    6.  
grand("setsd", 0); //Sets the randum number to seed 0 for reproductibility
samples_r_n = sample(n, X, "r")
 samples_r_n  =
 
    1.    2.    3.  
    4.    5.    6.  
    4.    5.    6.  
    1.    2.    3.  
    4.    5.    6.  
    4.    5.    6.  
    4.    5.    6.  
    4.    5.    6.  
    4.    5.    6.  
    4.    5.    6.  
    4.    5.    6.  
    1.    2.    3.  
    1.    2.    3.  
    4.    5.    6.  
    1.    2.    3.  
    1.    2.    3.  
    1.    2.    3.  
    1.    2.    3.  
    1.    2.    3.  
    4.    5.    6.  
    1.    2.    3.  
    4.    5.    6.  
    4.    5.    6.  
    1.    2.    3.  
    1.    2.    3.  
    4.    5.    6.  
    4.    5.    6.  
    4.    5.    6.  
    4.    5.    6.  
    1.    2.    3.  
    4.    5.    6.  
    1.    2.    3.  
    4.    5.    6.  
    1.    2.    3.  
    4.    5.    6.  
    4.    5.    6.  
    1.    2.    3.  
    4.    5.    6.  
    4.    5.    6.  
    1.    2.    3.  
    1.    2.    3.  
    4.    5.    6.  
    1.    2.    3.  
    4.    5.    6.  
    4.    5.    6.  
    4.    5.    6.  
    4.    5.    6.  
    4.    5.    6.  
    1.    2.    3.  
    4.    5.    6.  
    1.    2.    3.  
    4.    5.    6.  
    4.    5.    6.  
    4.    5.    6.  
    4.    5.    6.  
    1.    2.    3.  
    4.    5.    6.  
    1.    2.    3.  
    1.    2.    3.  
    4.    5.    6.  
    4.    5.    6.  
    1.    2.    3.  
    4.    5.    6.  
    1.    2.    3.  
    4.    5.    6.  
    1.    2.    3.  
    1.    2.    3.  
    1.    2.    3.  
    1.    2.    3.  
    1.    2.    3.  
    4.    5.    6.  
    4.    5.    6.  
    1.    2.    3.  
    1.    2.    3.  
    1.    2.    3.  
    4.    5.    6.  
    4.    5.    6.  
    1.    2.    3.  
    4.    5.    6.  
    1.    2.    3.  
    1.    2.    3.  
    4.    5.    6.  
    1.    2.    3.  
    4.    5.    6.  
    4.    5.    6.  
    4.    5.    6.  
    4.    5.    6.  
    4.    5.    6.  
    4.    5.    6.  
    1.    2.    3.  
    4.    5.    6.  
    4.    5.    6.  
    1.    2.    3.  
    1.    2.    3.  
    4.    5.    6.  
    1.    2.    3.  
    1.    2.    3.  
    4.    5.    6.  
    4.    5.    6.  
    1.    2.    3.  
grand("setsd", 0); //Sets the randum number to seed 0 for reproductibility
samples_one_n = sample(n, X, 1)
 samples_one_n  =
 
    1.    2.    3.  
    4.    5.    6.  
    4.    5.    6.  
    1.    2.    3.  
    4.    5.    6.  
    4.    5.    6.  
    4.    5.    6.  
    4.    5.    6.  
    4.    5.    6.  
    4.    5.    6.  
    4.    5.    6.  
    1.    2.    3.  
    1.    2.    3.  
    4.    5.    6.  
    1.    2.    3.  
    1.    2.    3.  
    1.    2.    3.  
    1.    2.    3.  
    1.    2.    3.  
    4.    5.    6.  
    1.    2.    3.  
    4.    5.    6.  
    4.    5.    6.  
    1.    2.    3.  
    1.    2.    3.  
    4.    5.    6.  
    4.    5.    6.  
    4.    5.    6.  
    4.    5.    6.  
    1.    2.    3.  
    4.    5.    6.  
    1.    2.    3.  
    4.    5.    6.  
    1.    2.    3.  
    4.    5.    6.  
    4.    5.    6.  
    1.    2.    3.  
    4.    5.    6.  
    4.    5.    6.  
    1.    2.    3.  
    1.    2.    3.  
    4.    5.    6.  
    1.    2.    3.  
    4.    5.    6.  
    4.    5.    6.  
    4.    5.    6.  
    4.    5.    6.  
    4.    5.    6.  
    1.    2.    3.  
    4.    5.    6.  
    1.    2.    3.  
    4.    5.    6.  
    4.    5.    6.  
    4.    5.    6.  
    4.    5.    6.  
    1.    2.    3.  
    4.    5.    6.  
    1.    2.    3.  
    1.    2.    3.  
    4.    5.    6.  
    4.    5.    6.  
    1.    2.    3.  
    4.    5.    6.  
    1.    2.    3.  
    4.    5.    6.  
    1.    2.    3.  
    1.    2.    3.  
    1.    2.    3.  
    1.    2.    3.  
    1.    2.    3.  
    4.    5.    6.  
    4.    5.    6.  
    1.    2.    3.  
    1.    2.    3.  
    1.    2.    3.  
    4.    5.    6.  
    4.    5.    6.  
    1.    2.    3.  
    4.    5.    6.  
    1.    2.    3.  
    1.    2.    3.  
    4.    5.    6.  
    1.    2.    3.  
    4.    5.    6.  
    4.    5.    6.  
    4.    5.    6.  
    4.    5.    6.  
    4.    5.    6.  
    4.    5.    6.  
    1.    2.    3.  
    4.    5.    6.  
    4.    5.    6.  
    1.    2.    3.  
    1.    2.    3.  
    4.    5.    6.  
    1.    2.    3.  
    1.    2.    3.  
    4.    5.    6.  
    4.    5.    6.  
    1.    2.    3.  
assert_checkequal(samples_r_n, samples_one_n);
//==============================================================================
// Checking normal behaviour for complete size 'c'
//==============================================================================
//========================================
// Check default call
n = 100
 n  =
 
    100.  
X = [1 2 3; 4 5 6]
 X  =
 
    1.    2.    3.  
    4.    5.    6.  
grand("setsd", 0); //Sets the randum number to seed 0 for reproductibility
samples_c_n = sample(n, X, "c")
 samples_c_n  =
 
 
         column  1 to 11
 
    3.    1.    3.    1.    2.    1.    2.    2.    2.    1.    3.  
    6.    4.    6.    4.    5.    4.    5.    5.    5.    4.    6.  
 
         column 12 to 22
 
    3.    1.    1.    2.    3.    1.    1.    3.    1.    3.    3.  
    6.    4.    4.    5.    6.    4.    4.    6.    4.    6.    6.  
 
         column 23 to 33
 
    3.    3.    3.    3.    2.    3.    1.    1.    2.    1.    3.  
    6.    6.    6.    6.    5.    6.    4.    4.    5.    4.    6.  
 
         column 34 to 44
 
    1.    2.    1.    2.    3.    3.    2.    3.    1.    2.    2.  
    4.    5.    4.    5.    6.    6.    5.    6.    4.    5.    5.  
 
         column 45 to 55
 
    2.    3.    2.    2.    3.    2.    2.    3.    3.    2.    3.  
    5.    6.    5.    5.    6.    5.    5.    6.    6.    5.    6.  
 
         column 56 to 66
 
    3.    3.    2.    3.    3.    2.    2.    1.    1.    2.    3.  
    6.    6.    5.    6.    6.    5.    5.    4.    4.    5.    6.  
 
         column 67 to 77
 
    2.    2.    3.    2.    3.    3.    1.    2.    1.    3.    1.  
    5.    5.    6.    5.    6.    6.    4.    5.    4.    6.    4.  
 
         column 78 to 88
 
    2.    2.    3.    3.    3.    3.    2.    1.    3.    2.    2.  
    5.    5.    6.    6.    6.    6.    5.    4.    6.    5.    5.  
 
         column 89 to 99
 
    2.    3.    2.    2.    2.    2.    2.    3.    2.    2.    3.  
    5.    6.    5.    5.    5.    5.    5.    6.    5.    5.    6.  
 
         column 100
 
    2.  
    5.  
grand("setsd", 0); //Sets the randum number to seed 0 for reproductibility
samples_two_n = sample(n, X, 2)
 samples_two_n  =
 
 
         column  1 to 11
 
    3.    1.    3.    1.    2.    1.    2.    2.    2.    1.    3.  
    6.    4.    6.    4.    5.    4.    5.    5.    5.    4.    6.  
 
         column 12 to 22
 
    3.    1.    1.    2.    3.    1.    1.    3.    1.    3.    3.  
    6.    4.    4.    5.    6.    4.    4.    6.    4.    6.    6.  
 
         column 23 to 33
 
    3.    3.    3.    3.    2.    3.    1.    1.    2.    1.    3.  
    6.    6.    6.    6.    5.    6.    4.    4.    5.    4.    6.  
 
         column 34 to 44
 
    1.    2.    1.    2.    3.    3.    2.    3.    1.    2.    2.  
    4.    5.    4.    5.    6.    6.    5.    6.    4.    5.    5.  
 
         column 45 to 55
 
    2.    3.    2.    2.    3.    2.    2.    3.    3.    2.    3.  
    5.    6.    5.    5.    6.    5.    5.    6.    6.    5.    6.  
 
         column 56 to 66
 
    3.    3.    2.    3.    3.    2.    2.    1.    1.    2.    3.  
    6.    6.    5.    6.    6.    5.    5.    4.    4.    5.    6.  
 
         column 67 to 77
 
    2.    2.    3.    2.    3.    3.    1.    2.    1.    3.    1.  
    5.    5.    6.    5.    6.    6.    4.    5.    4.    6.    4.  
 
         column 78 to 88
 
    2.    2.    3.    3.    3.    3.    2.    1.    3.    2.    2.  
    5.    5.    6.    6.    6.    6.    5.    4.    6.    5.    5.  
 
         column 89 to 99
 
    2.    3.    2.    2.    2.    2.    2.    3.    2.    2.    3.  
    5.    6.    5.    5.    5.    5.    5.    6.    5.    5.    6.  
 
         column 100
 
    2.  
    5.  
assert_checkequal(samples_c_n, samples_two_n);
