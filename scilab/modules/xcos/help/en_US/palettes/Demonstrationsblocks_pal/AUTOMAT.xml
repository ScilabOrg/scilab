<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scicos
 * 
 * Copyright (C) INRIA - METALAU Project <scicos@inria.fr> (HTML version)
 * Copyright (C) DIGITEO - Scilab Consortium (XML Docbook version)
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 * 
 * See the file ./license.txt
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:id="AUTOMAT">
    <refnamediv>
        <refname>AUTOMAT</refname>
        <refpurpose>automata (finite state machine)</refpurpose>
    </refnamediv>
    <refsection>
        <title>Block Screenshot</title>
        <para>
            <inlinemediaobject>
                <imageobject>
                    <imagedata fileref="../../../../images/palettes/AUTOMAT.png" align="center" valign="middle"/>
                </imageobject>
            </inlinemediaobject>
        </para>
    </refsection>
    <refsection id="Contents_AUTOMAT">
        <title>Contents</title>
        <itemizedlist>
            <listitem>
                <para>
                    <link linkend="AUTOMAT">automata (finite state machine)</link>
                </para>
            </listitem>
            <listitem>
                <itemizedlist>
                    <listitem>
                        <para>
                            <xref linkend="Palette_AUTOMAT">Palette</xref>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <xref linkend="Description_AUTOMAT">Description</xref>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <xref linkend="Dialogbox_AUTOMAT">Dialog box</xref>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <xref linkend="Defaultproperties_AUTOMAT">Default properties</xref>
                        </para>
                    </listitem>
                </itemizedlist>
            </listitem>
        </itemizedlist>
    </refsection>
    <refsection id="Palette_AUTOMAT">
        <title>Palette</title>
        <itemizedlist>
            <listitem>
                <para>
                    <link linkend="Demonstrationsblocks_pal">Demonstrations blocks palette</link>
                </para>
            </listitem>
        </itemizedlist>
    </refsection>
    <refsection id="Description_AUTOMAT">
        <title>Description</title>
        <para>
            This block gives the possibility to construct hybrid automata, i.e., a
            hybrid system whose discrete part is defined via modes and transitions
            between modes, and the continuous part is defined via DAE (differential algebraic equations). 
        </para>
        <para>
            The automaton block provides a switching mechanism between subsystems
            corresponding to control modes of an automaton.  Subsystems are
            constructed in such a way that they have the state vector as input (
            coming from the automaton block) and compute the flow and jump
            functions (zero-crossing) and pass them back to the automaton
            block. The state variables are defined in the automaton block and the
            subsystems are static functions.
        </para>
        <para>
            Suppose that a hybrid automaton consists of <literal>M</literal>
            control
            modes. The continuous-time dynamics in mode  is defined with DAE
            (<latex>$0 = F_i(\dot{x}, x, u)$</latex>
            ) where <literal>i</literal> is in <literal>[1 .. M]</literal>
            and the dimension
            of <literal>x</literal> is <literal>N</literal> (<literal>N</literal> â‰¥ 0) for any <literal>i</literal> in <literal>[1 .. M]</literal>. Suppose that in
            control mode <literal>i</literal>, there are <latex>$Z_i$</latex> jump conditions indicating jumps toward other modes. The jump conditions are defined by
            functions <latex>$\mathrm{Jump}_{i,j}(\dot{x}, x, u)$</latex> where 
            <literal>j</literal> is in <literal>[1 .. </literal><latex>$Z_i$</latex><literal>]</literal>.
        </para>
        <para>
            When a jump function changes sign and becomes positive, a mode
            transition will happen. When <literal>k</literal>-th transition function becomes positive, a transition to mode <literal>k</literal> happens and state vector <literal>x</literal> is reset to : <latex>$\mathrm{Reset}_{k}(\dot{x}, x, u)$</latex> for i.e., <latex>$x_l = \mathrm{Reset}_{k,l}(\dot{x}, x, u) \mathrm{for} l \in \{1...N\} $</latex>.
        </para>
        <para>
            In order to develop an automaton containing a mode with multiple
            reset functions, the value of the current and previous active modes
            should be used. These values are available at the first output port
            of the block.
        </para>
        <para>
            The automaton block has the following input/output ports.
        </para>
        <itemizedlist>
            <listitem>
                <para>
                    <emphasis role="bold">Output 1:</emphasis> The first output port is a vector of size two consisting of the current and the previous active control modes, i.e., <latex>$\mathrm{out}_1 = [\mathrm{current mode}, \mathrm{previous mode}]^t$</latex>. 
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">Output 2:</emphasis> The second output port is a vector of size <literal>2N</literal> providing the state vector and its first time derivative, <latex>$[x,\dot{x}]^t$</latex>. 
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">Inputs:</emphasis> The automaton block has <literal>M</literal> vector input ports corresponding to <literal>M</literal> modes or subsystems of the automaton. Each input defines the dynamic behavior in the control each mode as well as the reset functions and the transition functions. The input port <literal>i</literal> which is the output of the <literal>i</literal>-th subsystem is a vector of size <literal>2N+</literal><latex>$Z_i$</latex>. Each input is composed of the following vector.
                </para>
                <latex>$$
                    \mathrm{Input}_i = [F_i(\dot{x}, x, u), \mathrm{Reset}_i(\dot{x}, x, u), \mathrm{Jump}_i(\dot{x}, x, u)] ^ t
                    $$
                </latex>
                <itemizedlist>
                    <listitem>
                        <para>
                            The first <literal>N</literal> elements of the <literal>Input_i</literal> are the continuous-time dynamics.  The dynamics of the system in the control mode <literal>i</literal> is described by a smooth index-1 DAE <latex>$0 = F_i(\dot{x}, x, u, t)$</latex>.
                            
                            
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            The next <literal>N</literal> elements of <literal>Input_i</literal> are the values used to
                            reset the continuous-time state when a transition to 
                            control mode <literal>i</literal>
                            is activated.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            The next <literal>Z_i</literal> elements of <literal>Input_i</literal> are the jump or
                            zero-crossing functions. If the <literal>j</literal>-th
                            zero-crossing function of
                            mode <literal>i</literal>
                            crosses zero with negative to positive direction, a
                            transition to <literal>j</literal>-th
                            destination mode happens.
                        </para>
                    </listitem>
                </itemizedlist>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">Event Output:</emphasis> This is an event output port, which is activated whenever a mode transition happens. This event is useful when an event is needed to activate or initialize a part of the subsystem not included in the internal dynamics of the automaton block.
                </para>
            </listitem>
        </itemizedlist>
        <para>
            In the interface window, the number of control modes, the initial
            control mode and the initial value of continuous-time state at the
            beginning of the simulation should be given.
        </para>
    </refsection>
    <refsection id="Dialogbox_AUTOMAT">
        <title>Dialog box</title>
        <para>
            <inlinemediaobject>
                <imageobject>
                    <imagedata fileref="../../../../images/gui/AUTOMAT_gui.gif" align="center" valign="middle"/>
                </imageobject>
            </inlinemediaobject>
        </para>
        <para>
            
        </para>
        <itemizedlist>
            <listitem>
                <para>
                    <emphasis role="bold">Number of (finite-state) Modes</emphasis>
                </para>
                <para> Number of modes in the automation.</para>
                <para> Properties : Type 'vec' of size [1,1]. </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">Initial Mode</emphasis>
                </para>
                <para> Initial active mode at the beginning of the simulation.</para>
                <para> Properties : Type 'vec' of size [1,1]. </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">Number of continuous-time states</emphasis> Number of continuous-time states at modes. Note that the number of continuous-time states is the same in all modes.
                </para>
                <para> Properties : Type 'vec' of size [-1,1]. </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">Continuous-time states initial values</emphasis>
                </para>
                <para> Initial value of continuous-time states at the beginning of the simulation.</para>
                <para> Properties : Type 'vec' of size [-1,1]. </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">Xproperties of continuous-time states in each Mode</emphasis>
                </para>
                <para>
                    In this field the state types in mode are given. A state in an index 1 DAE can be either differential state or algebraic state. vector is coded in an M*N matrix, where M is the number of modes and N is the number of states. This matrices indicates whether a continuous-time state is algebraic or differential in each control mode. If in the <literal>i</literal>-th mode,<literal>j</literal>-th state is differential, the <literal>(i,j)</literal>-th element of the Xproperty matrix should set to "+1", otherwise it should set to "-1". Xproperty can be given as a 1*N vector if type of states remain the same in all modes.
                </para>
                <para> Properties : Type 'mat' of size [-1,-1]. </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">Jump from Mode 1:[..;M_final(Guard=In(1).i);..]</emphasis>
                </para>
                <para>
                    The fields express the mode transition information. Suppose that all control modes are labeled from 1 to M. Then, in the field corresponding to control mode<emphasis role="bold">i</emphasis> , destination modes of mode<emphasis role="bold">i</emphasis> are defined in a vector.<emphasis role="bold">j-th</emphasis> element of this vector gives the destination mode when<emphasis role="bold">j-th</emphasis> jump function :
                </para>
                <para>
                    becomes positive. For example, if in the field of the mode<emphasis role="bold">2</emphasis> , the user defines [1;3;4], it means that in mode<emphasis role="bold">2</emphasis> , there are three active jump functions. When, for example, the third jump function becomes positive, a mode transition to mode<emphasis role="bold">4</emphasis> will be activated.
                </para>
                <para> Properties : Type 'vec' of size [-1,1].</para>
            </listitem>
        </itemizedlist>
    </refsection>
    <refsection id="Defaultproperties_AUTOMAT">
        <title>Default properties</title>
        <itemizedlist>
            <listitem>
                <para>
                    <emphasis role="bold">always active:</emphasis> yes
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">direct-feedthrough:</emphasis> no
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">zero-crossing:</emphasis> yes
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">mode:</emphasis> no
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">regular inputs:</emphasis>
                </para>
                <para>
                    <emphasis role="bold">- port 1 : size [3,1] / type 1</emphasis>
                </para>
                <para>
                    <emphasis role="bold">- port 2 : size [3,1] / type 1</emphasis>
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">regular outputs:</emphasis>
                </para>
                <para>
                    <emphasis role="bold">- port 1 : size [2,1] / type 1</emphasis>
                </para>
                <para>
                    <emphasis role="bold">- port 2 : size [2,1] / type 1</emphasis>
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">number/sizes of activation inputs:</emphasis> 0
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">number/sizes of activation outputs:</emphasis> 1
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">continuous-time state:</emphasis> yes
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">discrete-time state:</emphasis> no
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">object discrete-time state:</emphasis> no
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">name of computational function:</emphasis>
                    <emphasis role="italic">automat</emphasis>
                </para>
            </listitem>
        </itemizedlist>
    </refsection>
    <refsection id="Interfacingfunction_AUTOMAT">
        <title>Interfacing function</title>
        <itemizedlist>
            <listitem>
                <para> SCI/modules/scicos_blocks/macros/Misc/AUTOMAT.sci</para>
            </listitem>
        </itemizedlist>
    </refsection>
    <refsection id="Computationalfunction_AUTOMAT">
        <title>Computational function</title>
        <itemizedlist>
            <listitem>
                <para> SCI/modules/scicos_blocks/src/c/automat.c (Type 10004)</para>
            </listitem>
        </itemizedlist>
    </refsection>
    
    <refsection>
        <title>References</title>
        <simplelist type="vert">
            <member>"Modeling Hybrid Automata in Scicos", Masoud Najafi, Ramine Nikoukhah, 2007 IEEE.
                Multi-conference on Systems and Control, Singapore
            </member>
        </simplelist>
    </refsection>
</refentry>
