<?xml version="1.0" encoding="UTF-8"?>
<!--
* Scicos
* 
* Copyright (C) INRIA - METALAU Project <scicos@inria.fr> (HTML version)
* Copyright (C) DIGITEO - Scilab Consortium (XML Docbook version)
* 
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
*  (at your option) any later version.
* 
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
* 
* See the file ./license.txt
-->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:id="lincos">
  <refnamediv>
    <refname>lincos</refname>
    <refpurpose>Constructs by linearization a linear state-space
    model from a general dynamical system described by a Xcos
    diagram</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <title>Calling Sequence</title>
    <synopsis>sys = lincos(scs_m [,X,U] [,param] ])</synopsis>
    <synopsis>sys = lincos(cpr [,X,U] [,param] ])</synopsis>
  </refsynopsisdiv>
  <refsection id="Parameters_lincos">
    <title>Arguments</title>
    <itemizedlist>
      <listitem>
        <para>
          <emphasis role="bold">scs_m :</emphasis> a xcos
          data structure containing input and output ports
        at the top level </para>
      </listitem>
      <listitem>
        <para>
          <emphasis role="bold">cpr :</emphasis> a data strucure
          generated by the <link
          linkend="xcos_compile">xcos_compile</link>
          function. </para>
      </listitem>

      <listitem>
        <para>
          <emphasis role="bold">X :</emphasis> column
          vector. Continuous states around which linearization to be
          done. For implicit systems the X array must be equal to [x;xd] where x is the state array and xd the state derivative array.</para>
          <para>If omitted the X and U elements are computed by 
          [X,U]=steadycos(scs_m) (see <link
          linkend="steadycos">steadycos</link>).
        </para>
      </listitem>
      <listitem>
        <para>
          <emphasis role="bold">U :</emphasis> column
          vector. Input around which linearization to be
          done. If omitted the X and U elements are computed by 
          [X,U]=steadycos(scs_m) (see <link
          linkend="steadycos">steadycos</link>).
        </para>
      </listitem>
      <listitem>
        <para>
          <emphasis role="bold">param :</emphasis> param:
          list with two elements (default list(1.d-6,0))</para>
          <para>param(1): scalar. Perturbation level for
          linearization; the following variation is used del([x;u])_i
          = param(1)+param(1)*1d-4*abs([x;u])_i.</para>
          <para>param(2): scalar, Time t.</para>
      </listitem>
      <listitem>
        <para>
          <emphasis role="bold">sys :</emphasis> state-space system
        </para>
      </listitem>
    </itemizedlist>
  </refsection>

  <refsection id="Description_lincos">
    <title>Description</title>
    <para>
      Construct a linear continuous state-space system by linearizing
      a model given as a Xcos diagram around a given steady state
      point.
    </para>
    <para> The diagram should have <link linkend="IN_f">inputs</link>
    and <link linkend="OUT_f">outputs</link>. The diagram may
    include discrete time systems. In such a case the discrete time
    parts are supposed unactivated.
    </para>
    <para>
      The steady state point is either given by the X and U arguments
      or internaly computed. The X vector contains the steady states
      of the system and U vector contains the system inputs associated
      with these steady states.  The elements of X correspond to
      catenation of the steady state values for continuous states of
      the blocks. The catenation order is produced by the compiler, it
      can be found using the <link linkend="xcos_blocks_info">xcos_blocks_info
      function</link>.  The elements of U correspond to catenation of
      the inputs values of the sub-diagram.
    </para>    
    <para>
      The output is a Scilab data structure of type
      continuous-time state-space linear system. For implicit
      systems with high index the result may have its sys.D term in
      polynomial form.
    </para>
  </refsection>
  <refsection>
    <title>Examples</title>
    <programlisting role="example_explicit"><![CDATA[
    //Pendulum on a cart rolling on a slanted road - explicit model
    loadXcosLibs();
    importXcosDiagram(SCI + "/modules/xcos/demos/IVPD.zcos");

    //first make the road horizontal
    scs_m.props.context($)="alpha=0";
    sys=lincos(scs_m);
    ssprint(sys)
    bode(sys)

    //Now suppose  the road is slanted
    scs_m.props.context($)="alpha=10*%pi/180";

    cpr=xcos_compile(scs_m);
    Block_table=xcos_blocks_info(cpr);
    editvar Block_table;//Can be used to get the state vector order.
    //Search a steady state with pendulum pointing up
    X0=[0;0;0;0];     //Initial state value [x',x,theta',theta]
    U0=0;             //Initial input value force applied to the cart
    Y0=[1;0];         //Initial value of the output [x; theta]

    //Set variables to be computed
    IndX=1:4;     //All the states
    IndU=1;       //All the inputs
    IndY=2;       //Only the second output (theta), the position x is imposed
    IndXd=[];     //All state derivatives must be zero

    [X,U,Y,Xd]=steadycos(cpr,X0,U0,Y0,IndX,IndU,IndY,IndXd,list(1e-10,0));
    sys1=lincos(cpr,X,U,list(1e-10,0));
    ssprint(sys1)
    ]]></programlisting>
 <programlisting role="example_implicit"><![CDATA[
// Electric RC system - Implicit model
//================================================================================
loadXcosLibs();
importXcosDiagram(SCI + "/modules/xcos/tests/unit_tests/steadycos_lincos_modelica.zcos");

// look for the specific sub-diagram to work on
for i=1:length(scs_m.objs)
    if typeof(scs_m.objs(i))=="Block" & scs_m.objs(i).gui=="SUPER_f" then
        scs_m = scs_m.objs(i).model.rpar;
        break;
    end
end

[X,U,Y,XP] = steadycos(scs_m,[],[],[],[],1,1:$);
sys = lincos(scs_m, X, U)
 ]]></programlisting>
  </refsection>
  <refsection id="SeeAlso_lincos">
    <title>See Also</title>
    <itemizedlist>
      <listitem>
        <para>
          <link linkend="steadycos">steadycos - Finds an equilibrium
          state of a general dynamical system described by a xcos
          diagram (Scilab Function)</link>
        </para>
      </listitem>      
      <listitem>
        <para>
          <link linkend="xcos_compile">xcos_compile -
          Compile a diagram that contains input and output
          ports</link>
        </para>
      </listitem>

      <listitem>
        <para>
          <link linkend="scicos_simulate">scicos_simulate - Function
          for running xcos simulation in batch mode.</link>
        </para>
      </listitem>
    </itemizedlist>
  </refsection>
  <refsection id="Module_lincos">
    <title>Module</title>
    <itemizedlist>
      <listitem>
        <para>
          <link linkend="xcos">xcos</link>
        </para>
      </listitem>
    </itemizedlist>
  </refsection>
  <refsection id="Filecontent_lincos">
    <title>File content</title>
    <itemizedlist>
      <listitem>
        <para>SCI/modules/scicos/macros/scicos_auto/lincos.sci</para>
      </listitem>
    </itemizedlist>
  </refsection>
   <refsection>
       <title>History</title>
      <revhistory>
        <revision>
          <revnumber>5.5.0</revnumber>
          <revdescription>Function extended to implicit systems</revdescription>
        </revision>
      </revhistory>
    </refsection>
 
</refentry>
