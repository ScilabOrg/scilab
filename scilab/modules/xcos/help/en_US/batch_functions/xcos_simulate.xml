<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:id="xcos_simulate">
    <refnamediv>
        <refname>xcos_simulate</refname>
        <refpurpose>Function for running xcos simulation in batch mode</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Calling Sequence</title>
        <synopsis>Info=xcos_simulate(scs_m, needcompile)</synopsis>
    </refsynopsisdiv>
    <refsection id="Parameters_xcos_simulate">
        <title>Arguments</title>
        <variablelist>
            <varlistentry>
                <term>scs_m</term>: A diagram data structure (see <link linkend="scicos_diagram">scs_m structure</link>).
                <para/>
            </varlistentry>
            <varlistentry>
                <term>needcompile</term>: An integer. If it equals 4,
                then the simulator will perform a complete compilation of the diagram.
                If not, it will use cached value of %cpr. DEPRECATED
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection id="Module_xcos_simulate">
        <title>Module</title>
        <itemizedlist>
            <listitem>
                <para>
                    <link linkend="xcos">xcos</link>
                </para>
            </listitem>
        </itemizedlist>
    </refsection>
    <refsection id="Description_xcos_simulate">
        <title>Description</title>
        This function is used to simulate xcos diagrams in batch
        mode. It requires the <link linkend="scicos_diagram">scs_m
            structure
        </link>
        which can be obtained by loading in Scilab the
        <literal>.zcos</literal> file (see <link linkend="importXcosDiagram">
            importXcosDiagram
        </link>
        ).
        
        <para>
            User can also define <literal>pre_xcos_simulate</literal>
            function that will run before simulation.
            <programlisting role="example"><![CDATA[
      function continueSimulation = pre_xcos_simulate(scs_m, needcompile)
      // Do nothing
      continueSimulation = %t;
      endfunction
      ]]></programlisting>
            If this function fails the error will be trapped and the simulation aborted.
            If <literal>continueSimulation</literal> is set to false, the simulation will stop.
        </para>
        <para>
            User can also define <literal>post_xcos_simulate</literal>
            function that will run after simulation.
            <programlisting role="example"><![CDATA[
      function post_xcos_simulate(%cpr, scs_m, needcompile)
      // Do Nothing
      endfunction
      ]]></programlisting>
            If this function fails the error will be trapped.
        </para>
    </refsection>
    <refsection id="Filecontent_xcos_simulate">
        <title>File content</title>
        <itemizedlist>
            <listitem>
                <para> SCI/modules/xcos/macros/xcos_simulate.sci</para>
            </listitem>
        </itemizedlist>
    </refsection>
    <refsection id="Examples_xcos_simulate">
        <title>Examples</title>
        <para>
            The xcos diagram in <link type="scilab" linkend="scilab.xcos/xcos/demos/batch_simulation.zcos">SCI/modules/xcos/demos/batch_simulation.zcos</link>.
            <mediaobject>
                <imageobject>
                    <imagedata align="center" fileref="../../../demos/batch_simulation.zcos"/>
                </imageobject>
            </mediaobject>
            Simulate this diagram in batch mode and change some context values.
            <programlisting role="example"><![CDATA[
      importXcosDiagram("SCI/modules/xcos/demos/batch_simulation.zcos")

      typeof(scs_m) //The diagram data structure

      //This diagram uses 3 context variables :
      //  Amplitude : the sin function amplitude
      //  Pulsation : the sin function pulsation
      //  Tf        : the final simulation time
      scs_m.props.context //the embedded definition

      //first batch simulation with the parameters embedded in the diagram
      xcos_simulate(scs_m, 4);

      // Change the final time value
      scs_m.props.context = ["Amplitude=2" "Pulsation=3" "Tf=10"];
      xcos_simulate(scs_m, 4);

      // Now Change pulsation
      scs_m.props.context = ["Amplitude=2" "Pulsation=9" "Tf=10"];
      xcos_simulate(scs_m, 4);
      //get the variable created by the "from workspace block"
      counter

      ]]></programlisting>
        </para>
        <para>
            Statistic analysis of the diagram using pre_xcos_simulate function.
            <programlisting role="example"><![CDATA[
importXcosDiagram("SCI/modules/xcos/demos/batch_simulation.zcos")

typeof(scs_m) //The diagram data structure

// Declare pre_xcos_simulation to only analyze Diagram.

function continueSimulation=pre_xcos_simulate(scs_m, needcompile)
    // Retrieve all objects
    objs = scs_m.objs;

    links = 0;
    blocks = 0;
    other = 0;
    // Count Links and Blocks
    for i = 1:size(objs)
        currentType = typeof(objs(i));
        select (currentType)
        case "Link"
            links = links + 1;
        case "Block"
            blocks = blocks + 1;
        else
            other = other + 1;
        end
    end

        // Diplay Diagram analisys.
        disp("Diagram Analysis:")
        disp("Found "+string(blocks)+" Blocks.")
        disp("Found "+string(links)+" Links.")
        disp("Found "+string(other)+" Other component.")

        // We do not want any simulation, just analyze Diagram
        continueSimulation = %f;
    endfunction

    //first batch simulation with the parameters embedded in the diagram
    xcos_simulate(scs_m, 4);
      ]]></programlisting>
        </para>
        <para>
            The xcos diagram: <link type="scilab" linkend="scilab.xcos/xcos/demos/Command.zcos">SCI/modules/xcos/demos/Command.zcos</link>
            <mediaobject>
                <imageobject>
                    <imagedata align="center" fileref="../../../demos/Command.zcos"/>
                </imageobject>
            </mediaobject>
            Simulate this diagram in batch mode and perform bode plotting of transfert function using post_xcos_simulate,
            <programlisting role="example"><![CDATA[
importXcosDiagram("SCI/modules/xcos/demos/Command.zcos")

// Clear any pre_xcos_simulation;
clear pre_xcos_simulate;

function post_xcos_simulate(%cpr, scs_m, needcompile)
    // Retrieve all objects
    objs = scs_m.objs;

    clrBlock = [];
    //Looking for CLR block
    for i=1:size(objs)
        if objs(i).gui == "CLR" then
            clrBlock = objs(i);
            break;
        end
    end

    // Check if we found some CLR
    if isempty(clrBlock) then
        disp("No CLR block found.")
        return
    end

    // Retrieve exprs
    exprs = clrBlock.graphics.exprs;
    s = poly(0,'s');
    num = eval(exprs(1));
    den = eval(exprs(2));
    h = syslin('c', num/den);
    // Open new figure then plot Bode
    scf(max(winsid())+1);
    bode(h, 0.01, 100);
endfunction

xcos_simulate(scs_m, 4);

      ]]></programlisting>
        </para>
        <para>
            The xcos diagram: <link type="scilab" linkend="scilab.xcos/xcos/demos/Command_bode.zcos">SCI/modules/xcos/demos/Command_bode.zcos</link>
            <mediaobject>
                <imageobject>
                    <imagedata align="center" fileref="../../../demos/Command_bode.zcos"/>
                </imageobject>
            </mediaobject>
            Simulate this diagram in batch mode and perform bode plotting of transfert function using post_xcos_simulate,
            <programlisting role="example"><![CDATA[
importXcosDiagram("SCI/modules/xcos/demos/Command_bode.zcos")

// Clear any post_xcos_simulation;
clear post_xcos_simulate;

function continueSimulation = pre_xcos_simulate(scs_m, needcompile)
    // Retrieve all objects
    objs = scs_m.objs;

    clrBlock = [];
    //Looking for CLR block
    for i=1:size(objs)
        if objs(i).gui == "CLR" then
            clrBlock = objs(i);
            break;
        end
    end

    // Check if we found some CLR
    if isempty(clrBlock) then
        disp("No CLR block found.")
        return
    end

    // Retrieve exprs
    exprs = clrBlock.graphics.exprs;
    s = poly(0,'s');
    num = eval(exprs(1));
    den = eval(exprs(2));
    h = syslin('c', num/den);
    // Open new figure then plot Bode
    scf(max(winsid())+1);
    bode(h, 0.01, 100);

    // Stop after bode plot. We do not want any simulation.
    continueSimulation = %f;
endfunction

xcos_simulate(scs_m, 4);

      ]]></programlisting>
        </para>
    </refsection>
    <refsection id="SeeAlso_xcos_simulate">
        <title>See Also</title>
        <simplelist type="inline">
            <member>
                <link linkend="scicos_diagram">scs_m structure</link>
            </member>
            <member>
                <link linkend="importXcosDiagram"> importXcosDiagram</link>
            </member>
            <member>
                <link linkend="scicosim">scicosim: xcos batch simulation function</link>
            </member>
            <member>
                <link linkend="xcos">xcos: Block diagram editor and GUI for the hybrid simulator</link>
            </member>
            <member>
                <link linkend="steadycos">steadycos: Finds an equilibrium state of a Xcos diagram</link>
            </member>
            <member>
                <link linkend="lincos">lincos: Constructs by linearization a linear state-space model from a Xcos diagram</link>
            </member>
        </simplelist>
    </refsection>
</refentry>
