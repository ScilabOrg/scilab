<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scicos
 * 
 * Copyright (C) INRIA - METALAU Project <scicos@inria.fr> (HTML version)
 * Copyright (C) DIGITEO - Scilab Consortium (XML Docbook version)
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 * 
 * See the file ./license.txt
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:id="sci_struct">
    <refnamediv>
        <refname>sci_struct</refname>
        <refpurpose>Scicos block structure of a scilab computational function</refpurpose>
    </refnamediv>
    <refsection id="Contents_sci_struct">
        <title>Contents</title>
        <itemizedlist>
            <listitem>
                <para>
                    <link linkend="sci_struct">sci_struct - Scicos block structure of a scilab computational function</link>
                </para>
            </listitem>
            <listitem>
                <itemizedlist>
                    <listitem>
                        <para>
                            <xref linkend="Module_sci_struct">Module</xref>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <xref linkend="Description_sci_struct">Description</xref>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <xref linkend="Inputsoutputs_sci_struct">Inputs/outputs</xref>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <xref linkend="Events_sci_struct">Events</xref>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <xref linkend="Parameters_sci_struct">Parameters</xref>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <xref linkend="States_sci_struct">States</xref>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <xref linkend="Zerocrossingsurfacesandmodes_sci_struct">Zero crossing surfaces and modes</xref>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <xref linkend="Miscallaneous_sci_struct">Miscallaneous</xref>
                        </para>
                    </listitem>
                </itemizedlist>
            </listitem>
        </itemizedlist>
    </refsection>
    <refsection id="Module_sci_struct">
        <title>Module</title>
        <itemizedlist>
            <listitem>
                <para>
                    <link linkend="xcos">xcos</link>
                </para>
            </listitem>
        </itemizedlist>
    </refsection>
    <refsection id="Description_sci_struct">
        <title>Description</title>
        <para>
            A Scicos computational function of type 5 can be realized by the use of a Scilab function.
            That function does not really differs from all other scilab function : one can use all functions and
            instructions of the scilab language inside that function to do the computation.
        </para>
        <para>
            Such a function must be written in a file with extension .sci, must be loaded inside scilab by the
            common loading scilab function (, , , ,...) and must have
            two right hand side arguments and one left hand side argument, as the following calling sequence :
        </para>
        <para>
            
        </para>
        <para>
            When the simulator is calling such a computational function, it build a scilab structure (in the previous exemple this is the named  rhs/lhs arguments) from his own internal C reprensation of a block structure (see 
            for more details about the C structure of scicos
            blocks).
        </para>
        <para>
            That scilab structure is a scilab typed list variable that have the following fields :
        </para>
        <para>
            
        </para>
        <para>
            Each fields are then accessible inside the scilab computational function by the use of :
        </para>
        <para>
            
        </para>
        <para>
            
        </para>
    </refsection>
    <refsection id="Inputsoutputs_sci_struct">
        <title>Inputs/outputs</title>
        <para>
            
        </para>
        <itemizedlist>
            <listitem>
                <para>
                    <emphasis role="bold">block.nin :</emphasis> a scalar that gives the number of regular input ports. This is a read only data. 
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">block.insz :</emphasis> a vector of size , that gives the dimensions and types of the regular input ports.
                </para>
                <itemizedlist>
                    <listitem>
                        <para>
                            <emphasis role="bold"> :</emphasis> are the first dimensions.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis role="bold"> :</emphasis> are the second dimensions.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis role="bold"> :</emphasis> are the type of data (C coding).
                            
                        </para>
                    </listitem>
                </itemizedlist>
                <para> This is a read only data. </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">block.inptr :</emphasis> a list of size that enclosed typed matrices for regular input ports. Each element correspond to only one regular input port. Then i-th matrix of the block.inptr list will have the dimensions [ , ] and the type .
                </para>
                <para> The data type that can be provided by regular input ports are :</para>
                <itemizedlist>
                    <listitem>
                        <para>
                            <emphasis role="bold">1:</emphasis> matrix of real numbers,
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis role="bold">2:</emphasis> matrix of complex numbers,
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis role="bold">3:</emphasis> matrix of int32 numbers,
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis role="bold">4:</emphasis> matrix of int16 numbers,
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis role="bold">5:</emphasis> matrix of int8 numbers,
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis role="bold">6:</emphasis> matrix of uint32 numbers,
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis role="bold">7:</emphasis> matrix of uint16 numbers,
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis role="bold">8:</emphasis> matrix of uint8 numbers.
                            
                        </para>
                    </listitem>
                </itemizedlist>
                <para> This is a read only data. </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">block.nout :</emphasis> a scalar that gives the number of regular output ports. This is a read only data. 
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">block.outsz :</emphasis> a vector of size , that gives the dimensions and types of the regular output ports.
                </para>
                <itemizedlist>
                    <listitem>
                        <para>
                            <emphasis role="bold"> :</emphasis> are the first dimensions.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis role="bold"> :</emphasis> are the second dimensions.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis role="bold"> :</emphasis> are the type of data (C coding).
                            
                        </para>
                    </listitem>
                </itemizedlist>
                <para> This is a read only data. </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">block.outptr :</emphasis> a list of size that enclosed typed matrices for regular output ports. Each element correspond to only one regular output port. Then i-th matrix of the block.outptr list will have the dimensions [ , ] and the type .
                </para>
                <para> The data type that can be provided by regular output ports are :</para>
                <itemizedlist>
                    <listitem>
                        <para>
                            <emphasis role="bold">1:</emphasis> matrix of real numbers,
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis role="bold">2:</emphasis> matrix of complex numbers,
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis role="bold">3:</emphasis> matrix of int32 numbers,
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis role="bold">4:</emphasis> matrix of int16 numbers,
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis role="bold">5:</emphasis> matrix of int8 numbers,
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis role="bold">6:</emphasis> matrix of uint32 numbers,
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis role="bold">7:</emphasis> matrix of uint16 numbers,
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <emphasis role="bold">8:</emphasis> matrix of uint8 numbers.
                            
                        </para>
                    </listitem>
                </itemizedlist>
                <para>
                    Values of regular output ports will be saved in the<link linkend="C_struct">Cstructure</link> of the block only for =6 and =1.
                </para>
            </listitem>
        </itemizedlist>
        <para>
            
        </para>
    </refsection>
    <refsection id="Events_sci_struct">
        <title>Events</title>
        <para>
            
        </para>
        <itemizedlist>
            <listitem>
                <para>
                    <emphasis role="bold">block.nevprt :</emphasis> a scalar given the event input port number (binary coding) which have activated the block. This is a read only data. 
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">block.nevout :</emphasis> a scalar given the number of output event port of the block. This is a read only data. 
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">block.evout :</emphasis> a vector of size corresponding to the register of output event. Values of output event register will be saved in the<link linkend="C_struct">C structure</link> of the block only for =3.
                </para>
            </listitem>
        </itemizedlist>
        <para>
            
        </para>
    </refsection>
    <refsection id="Parameters_sci_struct">
        <title>Arguments</title>
        <para>
            
        </para>
        <itemizedlist>
            <listitem>
                <para>
                    <emphasis role="bold">block.nrpar :</emphasis> a scalar given the number of real parameters. This is a read only data. 
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">block.rpar :</emphasis> a vector of size corresponding to the real parameter register. This is a read only data. 
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">block.nipar :</emphasis> a scalar given the number of integer parameters. This is a read only data. 
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">block.ipar :</emphasis> a vector of size correspondig to the integer parameter register. This is a read only data. 
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">block.nopar :</emphasis> a scalar given the number of object parameters. This is a read only data. 
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">block.oparsz :</emphasis> a matrix of size , that respectively gives the first and the second dimension of object parameters. This is a read only data. 
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">block.opartyp :</emphasis> a vector of size given the C coding type of data. This is a read only data. 
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">block.opar :</emphasis> a list of size given the values of object parameters. Each element of can be either a typed matrix or a list. Only matrix that encloses numbers of type real, complex, int32, int16, int8, uint32, uint16 and uint8 are allowed, all other types of scilab data will be enclosed in a sub-list. This is a read only data.
                </para>
            </listitem>
        </itemizedlist>
        <para>
            
        </para>
    </refsection>
    <refsection id="States_sci_struct">
        <title>States</title>
        <para>
            
        </para>
        <itemizedlist>
            <listitem>
                <para>
                    <emphasis role="bold">block.nz :</emphasis> a scalar given the number of discrete state for the block. This is a read only data. 
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">block.z :</emphasis> a vector of size corresponding to the discrete state register. Values of discrete state register will be saved in the<link linkend="C_struct">C structure</link> of the block only for =4, =6, =2 and =5. 
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">block.noz :</emphasis> a scalar that gives the number of discrete object state. This is a read only data. 
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">block.ozsz :</emphasis> a matrix of size , that respectively gives the first and the second dimension of discrete object state. This is a read only data. 
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">block.oztyp :</emphasis> a vector of size given the C coding type of data. 
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">block.oz :</emphasis> a list of size given the values of discrete object states. Each element of can be either a typed matrix or a list. Only matrix that encloses numbers of type real, complex, int32, int16, int8, uint32, uint16 and uint8 are allowed, all other types of scilab data will be enclosed in a sub-list. Values of discrete object state will be saved in the<link linkend="C_struct">C structure</link> of the block only for =4, =6, =2 and =5. 
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">block.nx :</emphasis> a scalar given the number of continuous state for the block. This is a read only data. 
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">block.x :</emphasis> a vector of size given the value of the continuous state register. Values of the continuous state register will be saved in the<link linkend="C_struct">C structure</link> of the block only for =4, =6 and =2. 
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">block.xd :</emphasis> a vector of size given the value of the derivative continuous state register. Values of the derivative continuous state register will be saved in the<link linkend="C_struct">C structure</link> of the block only for =4, =6, =0 and =2. 
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">block.res :</emphasis> a vector of size corresponding to the Differential Algebraic Equation (DAE) residual. Values of that register will be saved in the<link linkend="C_struct">C structure</link> of the block only for =0, and =10.
                </para>
            </listitem>
        </itemizedlist>
        <para>
            
        </para>
    </refsection>
    <refsection id="Zerocrossingsurfacesandmodes_sci_struct">
        <title>Zero crossing surfaces and modes</title>
        <para>
            
        </para>
        <itemizedlist>
            <listitem>
                <para>
                    <emphasis role="bold">block.ng :</emphasis> a scalar given the number of zero crossing surfaces for the block. This is a read only data. 
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">block.g :</emphasis> a vector of size corresponding to the zero crossing register. Values of that register will be saved in the<link linkend="C_struct">C structure</link> of the block only for =9. 
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">block.nmode :</emphasis> a scalar given the number of mode for the block. This is a read only data. 
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">block.mode :</emphasis> a vector of size that corresponds to the mode register. Values of that register will be saved in the<link linkend="C_struct">C structure</link> of the block only for =9, with =1. 
                </para>
            </listitem>
        </itemizedlist>
        <para>
            
        </para>
    </refsection>
    <refsection id="Miscallaneous_sci_struct">
        <title>Miscallaneous</title>
        <para>
            
        </para>
        <itemizedlist>
            <listitem>
                <para>
                    <emphasis role="bold">block.type :</emphasis> a scalar given the type of the block. This is a read only data.
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">block.label :</emphasis> a string given the label of the block. This is a read only data.
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">block.uid :</emphasis> a string given the uid of the block. This is a read only data.
                </para>
            </listitem>
        </itemizedlist>
        <para>
            
        </para>
    </refsection>
</refentry>
