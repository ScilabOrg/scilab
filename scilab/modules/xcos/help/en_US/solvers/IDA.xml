<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) Scilab Enterprises - 2012 - Paul Bignier
 *
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.
 * The terms are also available at
 * http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg"  xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xml:lang="en_US" xml:id="IDA">
    <refnamediv>
        <refname>IDA</refname>
        <refpurpose>
            <emphasis>IDA</emphasis> (Implicit Differential Algebraic) is a numerical solver providing an efficient and stable method to solve DAE Initial Value Problems. Called by <link linkend="scicos">scicos</link>.
        </refpurpose>
    </refnamediv>
    <refsection>
        <title>Description</title>
        <para>
            <emphasis>IDA</emphasis> is a numerical solver providing an efficient and stable method to solve Initial Value Problems of the form :
        </para>
        <para>
            <latex>
                \begin{eqnarray}
                F(t,y,\dot{y}) = 0, \hspace{2 mm} y(t_0)=y_0, \hspace{2 mm} \dot{y}(t_0)=\dot{y}_0, \hspace{3 mm} y, \hspace{1.5 mm} \dot{y}  \hspace{1.5 mm} and \hspace{1.5 mm} F \in R^N \hspace{10 mm} (1)
                \end{eqnarray}
            </latex>
        </para>
        <para>
        </para>
        Before solving the problem, <emphasis>IDA</emphasis> runs an implemented routine to find consistent values for 
        <emphasis>
            y<subscript>0</subscript>
        </emphasis>
        and 
        <emphasis>
            yPrime<subscript>0</subscript>
        </emphasis>
        .
        <para>
            Starting then with those 
            <emphasis>
                y<subscript>0</subscript>
            </emphasis>
            and 
            <emphasis>
                yPrime<subscript>0</subscript>
            </emphasis>
            ,<emphasis>IDA</emphasis> approximates 
            <emphasis>
                y<subscript>n+1</subscript>
            </emphasis>
            with the <emphasis>BDF</emphasis> formula :
        </para>
        <para>
            <latex>
                \begin{eqnarray}
                \sum_{i=0}^{q} \alpha_{n,i} y_{n-i} = h_n\dot{y}_{n}
                \end{eqnarray}
            </latex>
            <para>
                &#160; with, like in <link linkend="CVode">CVode</link>, 
                <emphasis>
                    y<subscript>n</subscript>
                </emphasis>
                the approximation of 
                <emphasis>
                    y(t<subscript>n</subscript>)
                </emphasis>
                ,
                <emphasis>
                    h<subscript>n</subscript>
                </emphasis>
                =
                <emphasis>
                    t<subscript>n</subscript> - t<subscript>n-1</subscript>
                </emphasis>
                the step size, and the coefficients are fixed, uniquely determined by the method type, its order <emphasis>q</emphasis> ranging from 1 to 5 and the history of the step sizes.
            </para>
        </para>
        <para>
            Injecting this formula in <emphasis>(1)</emphasis> yields the system :
        </para>
        <para>
            <latex>
                G(y_n) \equiv F \left( t_n, \hspace{1.5mm} y_n, \hspace{1.5mm} h_n^{-1}\sum_{i=0}^{q} \alpha_{n,i} y_{n-i} \right) = 0
            </latex>
        </para>
        <para>
            To apply <emphasis>Newton</emphasis> iterations to it, we rewrite it into :
        </para>
        <para>
            <latex>
                J \left[y_{n(m+1)}-y_{n(m)} \right] = -G(y_{n(m)})
            </latex>
        </para>
        <para>
            &#160; with <emphasis>J</emphasis> an approximation of the Jacobian :
        </para>
        <para>
            &#160; <latex>
                J = \frac{\partial{G}}{\partial{y}} = \frac{\partial{F}}{\partial{y}}+\alpha\frac{\partial{F}}{\partial{\dot{y}}}, \hspace{4 mm} \alpha = \frac{\alpha_{n,0}}{h_n},
            </latex>
        </para>
        <para>
            &#160; <emphasis>&#x3B1;</emphasis> changes whenever the step size or the method order varies.
        </para>
        <para>
            An implemented direct dense solver is used and we go on to the next step.
        </para>
        <para>
            <emphasis>IDA</emphasis> uses the history array to control the local error 
            <emphasis>
                y<subscript>n(m)</subscript> - y<subscript>n(0)</subscript>
            </emphasis>
            and recomputes 
            <emphasis>
                h<subscript>n</subscript>
            </emphasis>
            if that error is not satisfying.
        </para>
        <para>
            The function is called in between activations, because a discrete activation may change the system.
        </para>
        <para>
            Following the criticality of the event (its effect on the continuous problem), we either relaunch the solver with different start and final times as if nothing happened, or, if the system has been modified, we need to "cold-restart" the problem by reinitializing it anew and relaunching the solver.
        </para>
    </refsection>
    <refsection>
        <title>Examples</title>
        <para>
            <link type="scilab" linkend="scilab.xcos/xcos/help/examples/discontinuities_pal/en_US/IDA.xcos">Open this example in Xcos</link>
        </para>
        <para>
            <mediaobject>
                <imageobject>
                    <imagedata align="center" fileref="../../images/bouncing_ball.png"/>
                </imageobject>
            </mediaobject>
        </para>
        <para>
            The 'Modelica Generic' block returns its continuous states, we can evaluate them with IDA by running the example :
        </para>
        <para>
            <programlisting language="example"><![CDATA[
      // Import the diagram and set the ending time
      importXcosDiagram("SCI/modules/xcos/help/examples/discontinuities_pal/en_US/IDA.xcos");
      scs_m.props.tf = 2000;

      // Select IDA
      scs_m.props.tol(6) = 99;

      // Start the timer, launch the simulation and display time
      timer();
      xcos_simulate(scs_m, 4);
      t = timer();
      disp(t, "Time for IDA :");
      ]]></programlisting>
        </para>
        <para>
            The Scilab console displays :
            <screen><![CDATA[
Time for IDA :
 16.525
            ]]></screen>
        </para>
    </refsection>
    <refsection>
        <title>See Also</title>
        <simplelist type="inline">
            <member>
                <link linkend="CVode">CVode</link>
            </member>
            <member>
                <link linkend="RK">Runge-Kutta</link>
            </member>
            <member>
                <link linkend="ode">ode</link>
            </member>
            <member>
                <link linkend="ode_discrete">ode_discrete</link>
            </member>
            <member>
                <link linkend="ode_root">ode_root</link>
            </member>
            <member>
                <link linkend="odedc">odedc</link>
            </member>
            <member>
                <link linkend="impl">impl</link>
            </member>
        </simplelist>
    </refsection>
    <refsection>
        <title>Bibliography</title>
        <para>
            <ulink url="https://computation.llnl.gov/casc/sundials/documentation/documentation.html">Sundials Documentation</ulink>
        </para>
    </refsection>
</refentry>
