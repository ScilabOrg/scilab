<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) Scilab Enterprises - 2012 - Paul Bignier
 *
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.
 * The terms are also available at
 * http://www.cecill.info/licences/Licence_CeCILL_V2.1-en.txt
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg"  xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:lang="fr_FR" xml:id="CVode">
    <refnamediv>
        <refname>CVode</refname>
        <refpurpose>
            <emphasis>CVode</emphasis> (abréviation de "C-language Variable-coefficients ODE solver") est un solveur numérique fournissant une méthode efficace et stable pour résoudre des Problèmes à Valeur Initiale d'Equations Différentielles Ordinarires (EDOs). Il utilise <emphasis>BDF</emphasis> ou <emphasis>Adams</emphasis> comme méthode d'intégration, et des itérations <emphasis>fonctionnelles</emphasis> ou de <emphasis>Newton</emphasis>.
        </refpurpose>
    </refnamediv>
    <refsection>
        <title>Description</title>
        <para>
            Appelé par <link linkend="xcos">xcos</link>, <emphasis>CVode</emphasis>  (abréviation de "C-language Variable-coefficients ODE solver") est un solveur numérique fournissant une méthode efficace et stable pour résoudre des Problèmes à Valeur Initiale de la forme :
        </para>
        <para>
            <latex>
                \begin{eqnarray}
                \dot{y} = f(t,y), \hspace{3 mm} y(t_0) = y_0, \hspace{3 mm} y \in R^N
                \end{eqnarray}
            </latex>
        </para>
        <para>
            Partant de
            <emphasis>
                y<subscript>0</subscript>
            </emphasis>
            , <emphasis>CVode</emphasis> approxime
            <emphasis>
                y<subscript>n+1</subscript>
            </emphasis>
            grâce à la formule :
        </para>
        <para>
            <latex>
                \begin{eqnarray}
                \sum_{i=0}^{K_1} \alpha_{n,i} y_{n-i} + h_n\sum_{i=0}^{K_2} \beta_{n,i} \dot{y}_{n-i} = 0,\hspace{10 mm} (1)
                \end{eqnarray}
            </latex>
            <para>
                avec
                <emphasis>
                    y<subscript>n</subscript>
                </emphasis>
                l'approximation de
                <emphasis>
                    y(t<subscript>n</subscript>)
                </emphasis>
                , et
                <emphasis>
                    h<subscript>n</subscript>
                </emphasis>
                =
                <emphasis>
                    t<subscript>n</subscript> - t<subscript>n-1</subscript>
                </emphasis>
                la taille du pas de temps.
            </para>
        </para>
        <para>
            Ces méthodes implicites sont caractérisées par leur order <emphasis>q</emphasis>, qui indique le nombre de points intermédiaires requis pour le calcul de
            <emphasis>
                y<subscript>n+1</subscript>
            </emphasis>
            .
        </para>
        <para>
            C'est ici qu'intervient la différence entre <emphasis>BDF</emphasis> et <emphasis>Adams</emphasis> ("<emphasis>Backward Differentiation Formula</emphasis>" et "<emphasis>Adams-Moulton formula</emphasis>"):
        </para>
        <para>
            <caution>
                Si le problème est raide, il est préférable d'utiliser <emphasis>BDF</emphasis> :
            </caution>
        </para>
        <itemizedlist>
            <listitem>
                <emphasis>q</emphasis>, l'ordre de la méthode, est initialisé entre 1 et 5 (automatique),
            </listitem>
            <listitem>
                <emphasis>K1 = q</emphasis> et <emphasis>K2 = 0</emphasis>.
            </listitem>
        </itemizedlist>
        <para>
            Dans le cas non-raide, on préferera <emphasis>Adams</emphasis> :
        </para>
        <itemizedlist>
            <listitem>
                <emphasis>q</emphasis> est initialisé entre 1 et 12 (automatique),
            </listitem>
            <listitem>
                <emphasis>K1 = 1</emphasis> et <emphasis>K2 = q</emphasis>.
            </listitem>
        </itemizedlist>
        <para>
            Les coefficients sont fixes, déterminés uniformément par le type de méthode, son ordre, les pas de temps et la normalisation
            <emphasis>
                α<subscript>n, 0</subscript> = -1
            </emphasis>
            .
        </para>
        <para>
            Quelque soit le choix et à chaque pas, injecter cette intégration dans <emphasis>(1)</emphasis> donne le système non-linéaire:
        </para>
        <para>
            <latex scilab:localized="true">
                G(y_n)\equiv y_n-h_n\beta_{n,0}f(t_n,y_n)-a_n=0, \hspace{2 mm} où \hspace{2 mm} a_n\equiv \sum_{i>0} (\alpha_{n,i} y_{n-i} + h_n\beta_{n,i}\dot{y}_{n-i})
            </latex>
        </para>
        <para>
            Ce système peut être résolu par des itérations <emphasis>fonctionnelles</emphasis> ou de <emphasis>Newton</emphasis>, décrites ci-après.
        </para>
        <para>
            Dans les deux cas suivants, le
            <emphasis>
                y<subscript>n(0)</subscript>
            </emphasis>
            initial "prédit" est calculé explicitement grâce aux valeurs passées, en ajoutant des dérivées.
        </para>
        <itemizedlist>
            <para>  </para>
            <listitem>
                <emphasis role="bold">Fonctionnelles :</emphasis> cette méthode n'implique que des évaluations de <emphasis>f</emphasis>, elle calcule
                <emphasis>
                    y<subscript>n(0)</subscript>
                </emphasis>
                simplement en itérant la formule :
                <para>
                    <latex>
                        y_{n(m+1)} = h_n β_{n,0} f(t_n,y_{n(m)}) + a_n
                    </latex>
                    <latex scilab:localized="true">
                        où \hspace{2 mm} a_n\equiv \sum_{i>0} (\alpha_{n,i} y_{n-i} + h_n\beta_{n,i}\dot{y}_{n-i})
                    </latex>
                </para>
            </listitem>
            <para>  </para>
            <listitem>
                <emphasis role="bold">Newton :</emphasis> ici, nous utilisons un solveur direct dense sur le système linéaire :
                <para>
                    <latex scilab:localized="true">
                        M[y_{n(m+1)}-y_{n(m)}]=-G(y_{n(m)}), \hspace{4 mm} M \approx I-\gamma J, \hspace{2 mm} J=\frac{\partial f}{\partial y}, \hspace{2 mm} et \hspace{2 mm} \gamma = h_n\beta_{n,0}
                    </latex>
                </para>
            </listitem>
        </itemizedlist>
        <para>
            Dans les deux cas, <emphasis>CVode</emphasis> se sert des valeurs passées pour contrôler l'erreur locale
            <emphasis>
                y<subscript>n(m)</subscript> - y<subscript>n(0)</subscript>
            </emphasis>
            et recalcule
            <emphasis>
                h<subscript>n</subscript>
            </emphasis>
            si l'erreur n'est pas satisfaisante.
        </para>
        <para>
            <emphasis role="bold">
                Les choix recommandés sont <emphasis>BDF / Newton</emphasis> pour les problèmes raides et <emphasis>Adams / Functional</emphasis> pour les non-raides.
            </emphasis>
        </para>
        <para>
            La fonction est appelée entre les activations, parce-qu'une activation est susceptible de modifier le système.
        </para>
        <para>
            Suivant la criticalité de l'événement (son effet sur le problème continu), soit le solveur poursuit avec temps initial et final différents comme si rien ne s'était passé, soit, si le système a été modifié, il faut "réinitialiser à froid" le solveur et le relancer.
        </para>
        <para>
            En moyenne, <emphasis>CVode</emphasis> accepte des tolérances jusqu'à 10<superscript>-16</superscript>. Au-delà, il retourne l'erreur <emphasis>Trop de précision demandée</emphasis>.
        </para>
    </refsection>
    <refsection>
        <title>Exemples</title>
        <para>
            <link type="scilab" linkend="scilab.xcos/xcos/examples/solvers/ODE_Example.zcos">
                <inlinemediaobject>
                    <imageobject>
                        <imagedata align="center" fileref="../../../examples/solvers/ODE_Example.zcos" valign="middle"/>
                    </imageobject>
                </inlinemediaobject>
            </link>
            <scilab:image><![CDATA[
loadScicos();
loadXcosLibs();
importXcosDiagram(SCI + "/modules/xcos/examples/solvers/ODE_Example.zcos");
scs_m.props.tol(6) = 1;
try xcos_simulate(scs_m, 4); catch disp(lasterror()); end
]]></scilab:image>
        </para>
        <para>
            Le bloc intégrale retourne son état continu, on peut l'évaluer avec <emphasis>BDF / Newton</emphasis> en lançant l'exemple :
        </para>
        <para>
            <programlisting language="example"><![CDATA[
      // Import du diagramme et réglage du temps final
      loadScicos();
      loadXcosLibs();
      importXcosDiagram("SCI/modules/xcos/examples/solvers/ODE_Example.zcos");
      scs_m.props.tf = 5000;

      // Sélection de BDF / Newton
      scs_m.props.tol(6) = 1;

      // Lancement du chrono, de la simulation et affichage du temps
      tic();
      try xcos_simulate(scs_m, 4); catch disp(lasterror()); end
      t = toc();
      disp(t, "Temps pour BDF / Newton :");
      ]]></programlisting>
        </para>
        <para>
            La console Scilab affiche :
            <screen><![CDATA[
Temps pour BDF / Newton:
 13.438
            ]]></screen>
        </para>
        <para>
            Maintenant, dans le script suivant, on compare la différence de temps entre les méthodes en lançant l'exemple avec les quatre solveurs tour à tour :
            <link type="scilab" linkend ="scilab.scinotes/xcos/examples/solvers/integCVode.sce">
                Ouveture du script
            </link>
        </para>
        <para>
            Résultats :
            <screen language="example"><![CDATA[
Temps pour BDF / Newton :
 18.894

Temps pour BDF / Functional :
 18.382

Temps pour Adams / Newton :
 10.368

Temps pour Adams / Functional :
 9.815
            ]]></screen>
        </para>
        <para>
            Les résultats montrent que pour un problème continu non-raide simple, <emphasis>Adams / Functional</emphasis> est le plus rapide.
        </para>
    </refsection>
    <refsection>
        <title>Voir Aussi</title>
        <simplelist type="inline">
            <member>
                <link linkend="LSodar">LSodar</link>
            </member>
            <member>
                <link linkend="RK">Runge-Kutta 4(5)</link>
            </member>
            <member>
                <link linkend="DoPri">Dormand-Prince 4(5)</link>
            </member>
            <member>
                <link linkend="RKImp">Runge-Kutta Implicit 4(5)</link>
            </member>
            <member>
                <link linkend="IDA">IDA</link>
            </member>
            <member>
                <link linkend="DDaskr">DDaskr</link>
            </member>
            <member>
                <link linkend="Comparaisons">Comparaisons</link>
            </member>
            <member>
                <link linkend="ode">ode</link>
            </member>
            <member>
                <link linkend="ode_discrete">ode_discrete</link>
            </member>
            <member>
                <link linkend="ode_root">ode_root</link>
            </member>
            <member>
                <link linkend="odedc">odedc</link>
            </member>
            <member>
                <link linkend="impl">impl</link>
            </member>
        </simplelist>
    </refsection>
    <refsection>
        <title>Bibliographie</title>
        <para>
            <ulink url="https://computation.llnl.gov/casc/sundials/documentation/documentation.html">Documentation Sundials</ulink>
        </para>
    </refsection>
</refentry>
