<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2008 - Yann COLLETTE <yann.collette@renault.com>
 * Copyright (C) 2010 - DIGITEO - Michael Baudin
 *
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at
 * http://www.cecill.info/licences/Licence_CeCILL_V2.1-en.txt
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1999/xhtml" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:id="compute_initial_temp" xml:lang="en">
    <refnamediv>
        <refname>compute_initial_temp</refname>
        <refpurpose>
            A SA function which allows to compute the initial temperature
            of the simulated annealing
        </refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Calling Sequence</title>
        <synopsis>T_init = compute_initial_temp(x0,f,proba_init, ItMX [, param] )</synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>Arguments</title>
        <variablelist>
            <varlistentry>
                <term>x0</term>
                <listitem>
                    <para>the starting point</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>f</term>
                <listitem>
                    <para>
                        the objective function which will be send to the simulated
                        annealing for optimization
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>proba_init</term>
                <listitem>
                    <para>
                        the initial probability of accepting a bad solution (usually
                        around 0.7)
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>ItMX</term>
                <listitem>
                    <para>
                        the number of iterations of random walk (usually around
                        100)
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>param</term>
                <listitem>
                    <para>optional, a data structure managed with the parameters module.</para>
                    <para>
                        The <literal>optim_sa</literal> function is sensitive to the following fields.
                    </para>
                    <variablelist>
                        <varlistentry>
                            <term>"neigh_func"</term>
                            <listitem>
                                <para>
                                    a function which computes a neighbor of a given point.
                                    The default neighbourhood function is <literal>neigh_func_default</literal>.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>"type_accept"</term>
                            <listitem>
                                <para>
                                    the type of acceptation function.
                                    If the type is equal to "sa", then the initial temperature
                                    is computed from <literal>T_init = - f_sum ./ log(proba_init)</literal>.
                                    If the type is equal to "vfsa", it is computed
                                    from <literal>T_init = abs(f_sum / log(1/proba_init - 1))</literal>.
                                </para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>T_init</term>
                <listitem>
                    <para>
                        The initial temperature corresponding to the given probability
                        of accepting a bad solution
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Description</title>
        <para>
            This function computes an initial temperature given an initial
            probability of accepting a bad solution. This computation is based on
            some iterations of random walk.
        </para>
    </refsection>
    <refsection>
        <title>Examples</title>
        <programlisting role="example"><![CDATA[ 
deff('y=f(x)','y=sum(x.^2)');
    
x0 = [2 2];
Proba_start = 0.7;
It_Pre = 100;
x_test = neigh_func_default(x0);

saparams = init_param();
saparams = add_param(saparams,'neigh_func', neigh_func_default);

T0 = compute_initial_temp(x0, f, Proba_start, It_Pre, saparams);
 ]]></programlisting>
    </refsection>
    <refsection role="see also">
        <title>See Also</title>
        <simplelist type="inline">
            <member>
                <link linkend="optim_sa"> optim_sa </link>
            </member>
            <member>
                <link linkend="neigh_func_default">
                    neigh_func_default
                </link>
            </member>
            <member>
                <link linkend="temp_law_default">
                    temp_law_default
                </link>
            </member>
        </simplelist>
    </refsection>
</refentry>
