<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:ns3="http://www.w3.org/1999/xhtml" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:id="exists" xml:lang="ru">
    <refnamediv>
        <refname>exists</refname>
        <refpurpose>проверяет существование переменной</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Последовательность вызова</title>
        <synopsis>ve = exists(name [,where])</synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>Аргументы</title>
        <variablelist>
            <varlistentry>
                <term>ve</term>
                <listitem>
                    <para>
                        результат с возможными значениями:
                        <literal>1</literal>, если "истина"; 
                    </para>
                    <para>
                        <literal>0</literal>, если "ложь";
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>name</term>
                <listitem>
                    <para>символьная строка</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>where</term>
                <listitem>
                    <para>
                        необязательный символ с возможными значениями
                        <literal>'l'</literal> (локальный), <literal>'n'</literal>
                        (нелокальный) и <literal>'a'</literal> (все). Значение по умолчанию <literal>'a'</literal>.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Описание</title>
        <para>
            <literal>exists(name)</literal> возвращает <literal>1</literal>, если
            переменная с именем <literal>name</literal> существует, в противном 
            случае -- <literal>0</literal>.
        </para>
        <para>
            Предостережение: функция, которая использует <literal>exists</literal> 
            может вернуть результат, зависящий от окружения!
        </para>
        <para>
            <literal>exists(name,'l')</literal> возвращает <literal>1</literal>,
            если переменная с именем <literal>name</literal> существует в окружении
            текущей функции, в противном случае -- <literal>0</literal>.
        </para>
        <para>
            <literal>exists(name,'n')</literal> возвращает
            <literal>1</literal>, если переменная с именем <literal>name</literal> существует на
            любом уровне вызывающего окружения (включая главный уровень командной строки Scilab'а) 
            текущей функции, в противном случае -- <literal>0</literal>.
        </para>
        <para>
            Внимание: функция <literal>exists</literal> не проверяет существование 
            переменной в пространстве имён глобальных переменных (<link linkend="global">global</link>).
        </para>
    </refsection>
    <refsection>
        <title>Примеры</title>
        <programlisting role="example"><![CDATA[ 
exists("myNotLikelyToExistVariable")
myNotLikelyToExistVariable = 1;
exists("myNotLikelyToExistVariable")
 ]]></programlisting>
        <programlisting role="example"><![CDATA[ 
deff('foo(x)',..
['disp([exists(''a12''),exists(''a12'',''l'')])'
 'disp([exists(''x''),exists(''x'',''l'')])'])
foo(1)
a12=[];foo(1)
 
function level1()
  function level2()
    disp(exists("a","a"));
    disp(exists("a","l"));
    disp(exists("a","n"));
  endfunction
  level2()
endfunction
function go()
  a=1;
  level1()
endfunction
go()
 ]]></programlisting>
    </refsection>
    <refsection role="see also">
        <title>Смотрите также</title>
        <simplelist type="inline">
            <member>
                <link linkend="isdef">isdef</link>
            </member>
            <member>
                <link linkend="isglobal">isglobal</link>
            </member>
            <member>
                <link linkend="whereis">whereis</link>
            </member>
            <member>
                <link linkend="type">type</link>
            </member>
            <member>
                <link linkend="typeof">typeof</link>
            </member>
            <member>
                <link linkend="macrovar">macrovar</link>
            </member>
        </simplelist>
    </refsection>
</refentry>
