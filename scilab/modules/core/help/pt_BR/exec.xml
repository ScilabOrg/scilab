<?xml version="1.0" encoding="ISO-8859-1"?>
<refentry version="5.0-subset Scilab" xml:id="exec" xml:lang="en"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:ns5="http://www.w3.org/1999/xhtml"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:db="http://docbook.org/ns/docbook">
  <info>
    <pubdate>$LastChangedDate$</pubdate>
  </info>

  <refnamediv>
    <refname>exec</refname>

    <refpurpose>execução de arquivo script ("script" significa
    roteiro)</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <title>Seqüência de Chamamento</title>

    <synopsis>exec(path [,mode])
exec(fun [,mode])
ierr=exec(path,'errcatch' [,mode])
ierr=exec(fun,'errcatch' [,mode])</synopsis>
  </refsynopsisdiv>

  <refsection>
    <title>Parâmetros</title>

    <variablelist>
      <varlistentry>
        <term>path</term>

        <listitem>
          <para>string, o endereço do arquivo script </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>mode</term>

        <listitem>
          <para>escalar inteiro, o modo de execução (ver abaixo) </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>fun</term>

        <listitem>
          <para>uma função do Scilab </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>ierr</term>

        <listitem>
          <para>inteiro, 0 ou número de erro</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsection>

  <refsection>
    <title>Descrição</title>

    <para><literal>exec(path [,mode])</literal> executa seqüencialmente as
    instruções contidas no arquivo fornecido por <literal>path</literal> com
    um modo de execução opcional <literal>mode</literal> .</para>

    <para>Os casos diferentes para <literal>mode</literal> são :</para>

    <para>0 : o valor padrão</para>

    <para>-1 : nada é impresso</para>

    <para>1 : eco de cada linha de comando</para>

    <para>2 : prompt --&gt; é impresso</para>

    <para>3 : ecos + prompts</para>

    <para>4 : pára antes de cada prompt. A execução retorna após cada retorno
    de carro.</para>

    <para>7 : paradas + prompts + ecos : útil para demos.</para>

    <para><literal>exec(fun [,mode])</literal> executa a função
    <literal>fun</literal> como um script: sem argumentos de entrada ou saída
    nem ambientes de variáveis específicos. Esta forma é mais eficiente,
    porque o código script pode se pré-compilado (ver getf, comp). Este método
    para avaliação de scripts permite armazenar scripts como funções em
    bibliotecas.</para>

    <para>Se um erro é encontrado durante a execução, se o flag 'errcatch'
    estiver presente <literal>exec</literal> não imprime mensagem de erro,
    aborta execução de instruções e retorna com <literal>ierr</literal> e
    igual ao número de erro. Se o flag 'errcatch' não estiver presente, a
    manipulação de erros padrão é utilizada.</para>
  </refsection>

  <refsection>
    <title>Observação </title>

    <para>Arquivos executáveis (exec files) podem agora ser usados para
    definir funções "inline" utilizando a sintaxe de definição (ver
    function).</para>
  </refsection>

  <refsection>
    <title>Exemplos</title>

    <programlisting role="example">

// criando um arquivo script
mputl('a=1;b=2',TMPDIR+'/meuscript')
// executando-o
exec(TMPDIR+'/meuscript')
whos -name "a "

// criando uma função
deff('y=foo(x)','a=x+1;y=a^2')
clear a b
// chamando a função
foo(1)
// a é uma variável criada no ambiente da função foo
//    ela é destruída quando foo retorna
whos -name "a "


x=1 //criando x para torná-la conhecida pelo script foo
exec(foo)
// a e y são criadas no ambiente corrente
whos -name "a "

 
  </programlisting>
  </refsection>

  <refsection>
    <title>Ver Também</title>

    <simplelist type="inline">
      <member><link linkend="getf">getf</link></member>

      <member><link linkend="execstr">execstr</link></member>

      <member><link linkend="evstr">evstr</link></member>

      <member><link linkend="comp">comp</link></member>

      <member><link linkend="mode">mode</link></member>

      <member><link linkend="chdir">chdir</link></member>

      <member><link linkend="getcwd">getcwd</link></member>
    </simplelist>
  </refsection>
</refentry>
