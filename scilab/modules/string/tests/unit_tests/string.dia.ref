// =============================================================================
// Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
// Copyright (C) 2007-2008 - INRIA
//
//  This file is distributed under the same license as the Scilab package.
// =============================================================================
// <-- JVM NOT MANDATORY -->
//===============================
// unit tests string
//===============================
assert_checkequal(string(1), '1');
//===============================
assert_checkequal(string(1.5), '1.5');
//===============================
assert_checkequal(string([]), []);
//===============================
assert_checkequal(string(''), '');
//===============================
assert_checkequal(string(1:3), ['1','2','3']);
//===============================
assert_checkequal(string([1;2;3]), ['1';'2';'3']);
//===============================
assert_checkequal(string('foo'), 'foo');
//===============================
deff('y = mymacro(x)', 'y = x + 1');
[out, in, text] = string(mymacro);
assert_checkequal(out, 'y');
assert_checkequal(in, 'x');
assert_checkequal(text, fun2string(mymacro, 'mymacro'));
//===============================
mymacro = null();
deff('y = mymacro(x)', 'y = x + 1', 'n');
[out, in, text]=string(mymacro);
assert_checkequal(out, 'y');
assert_checkequal(in, 'x');
assert_checkequal(text, fun2string(mymacro, 'mymacro'));
//===============================
R = string(corelib);
assert_checkequal(strsubst(R(1),'\','/'), 'SCI/modules/core/macros/');
//===============================
A = floor(abs(2^8  * rand(10,10)));
B = floor(abs(2^16 * rand(10,10)));
C = floor(abs(2^32 * rand(10,10)));
D = floor(abs(2^7  * rand(10,10)));
E = floor(abs(2^15 * rand(10,10)));
F = floor(abs(2^31 * rand(10,10)));
assert_checkequal(string(A), string(uint8(A)));
assert_checkequal(string(B), string(uint16(B)));
assert_checkequal(string(C), string(uint32(C)));
assert_checkequal(string(D), string(int8(D)));
assert_checkequal(string(E), string(int16(E)));
assert_checkequal(string(F), string(int32(F)));
