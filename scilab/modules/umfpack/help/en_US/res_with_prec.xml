<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:lang="en" xml:id="res_with_prec">
    <refnamediv>
        <refname>res_with_prec</refname>
        <refpurpose>computes the residual r = Ax-b with precision  </refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Calling Sequence</title>
        <synopsis>[r,norm2_r] = res_with_prec(A, x, b)</synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>Arguments</title>
        <variablelist>
            <varlistentry>
                <term>A  </term>
                <listitem>
                    <para>real or complex sparse matrix (m x n)</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>x  </term>
                <listitem>
                    <para>column vector (n x 1) or matrix (n x p) </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>b  </term>
                <listitem>
                    <para>column vector (m x 1) or matrix (m x p)</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>r  </term>
                <listitem>
                    <para>column vector (m x 1) or matrix (m x p)</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>norm2_r  </term>
                <listitem>
                    <para>scalar or vector (1 x p) when b is a m x p matrix</para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Description</title>
        <para>
            This function computes the residual of a linear system <literal>r = Ax - b</literal> (together
            with its 2-norm) with the additional precision provided on "Intel like" 
            FPU (80 bits in place of 64) if the compiler translate "long double" to 
            use it. Else one must get the same than using <literal>A*x - b</literal> at the scilab level. 
            In both cases using <literal>[r, nr] = res_with_prec(A,x,b)</literal> is 
            faster than  <literal>r = A*x - b</literal> (and faster than <literal>r = A*x - b; nr = norm(r)</literal>).
        </para>
        <para>
            When <literal>p &gt; 1</literal>, <literal>norm2_r(i)</literal> is the 2-norm of the vector <literal>r(:,i)</literal>.
        </para>
    </refsection>
    <refsection>
        <title>Examples</title>
        <programlisting role="example"><![CDATA[ 
[A] = ReadHBSparse(SCI+"/modules/umfpack/examples/bcsstk24.rsa");
C_ptr = taucs_chfact(A);
b = rand(size(A,1),1);
x0 = taucs_chsolve(C_ptr, b);
norm(A*x0 - b)
norm(res_with_prec(A, x0, b))
 ]]></programlisting>
    </refsection>
    <refsection role="see also">
        <title>See Also</title>
        <simplelist type="inline">
            <member>
                <link linkend="rafiter">rafiter</link>
            </member>
        </simplelist>
    </refsection>
</refentry>
