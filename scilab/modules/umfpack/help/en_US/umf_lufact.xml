<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:lang="en" xml:id="umf_lufact">
    <refnamediv>
        <refname>umf_lufact</refname>
        <refpurpose>lu factorization of a sparse matrix</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Calling Sequence</title>
        <synopsis>LU_ptr = umf_lufact(A)</synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>Arguments</title>
        <variablelist>
            <varlistentry>
                <term>A  </term>
                <listitem>
                    <para>a sparse, real or complex, square or rectangular, matrix</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>LU_ptr  </term>
                <listitem>
                    <para>a pointer to umf lu factors (L,U,p,q,R)</para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Description</title>
        <para>
            This function computes a LU factorization of the sparse matrix A 
            () and return at the scilab level, 
            a pointer (LU_ptr) to a handle of the LU factors (L,U,p,q,R) 
            (the memory used for them is "outside" scilab stack). 
        </para>
        <para>
            This function must be used in place of 
            <link linkend="umfpack">umfpack</link>
            if you
            have multiple linear systems with the same matrix to solve when
            the rhs are not known at the same time (for instance A x1 = b1
            and A x2 = b2 but b2 depends on x1, etc...). 
        </para>
        <para>
            When such a 
            factorization have been computed, a linear system must be solved
            with umf_lusolve (in general x = umf_lusolve(LU_ptr, b) but others
            options are possible, see <link linkend="umf_lusolve">umf_lusolve</link>.
            <emphasis role="bold">
                To free the memory used by the LU factors, use umf_ludel(LU_ptr) (<link linkend="umf_ludel">umf_ludel</link>);
            </emphasis>
            to retrieve the LU factors at the scilab level (for example to display their sparse 
            patterns), use <link linkend="umf_luget">umf_luget</link>; to get some information (number of
            non zeros in L and U), use <link linkend="umf_luinfo">umf_luinfo</link>.
            To compute an approximation of the condition number use <link linkend="condestsp">condestsp</link>
        </para>
    </refsection>
    <refsection>
        <title>Examples</title>
        <programlisting role="example"><![CDATA[ 
// this is the small linear test system from UMFPACK
// whom solution must be [1;2;3;4;5]
A = sparse( [ 2  3  0  0  0;
              3  0  4  0  6; 
              0 -1 -3  2  0; 
              0  0  1  0  0; 
              0  4  2  0  1] );
b = [8 ; 45; -3; 3; 19];
Lup = umf_lufact(A);
x = umf_lusolve(Lup,b)

// solve now A'x=b
x = umf_lusolve(Lup,b,"A''x=b")
norm(A'*x - b)

// do not forget to clear memory with
umf_ludel(Lup)

// a real (but small)  example
// first load a sparse matrix
[A] = ReadHBSparse(SCI+"/modules/umfpack/examples/arc130.rua");
// compute the factorization
Lup = umf_lufact(A); 
b = rand(size(A,1),1); // a random rhs
// use umf_lusolve for solving Ax=b
x = umf_lusolve(Lup,b);
norm(A*x - b)

// now the same thing with iterative refiment
x = umf_lusolve(Lup,b,"Ax=b",A);
norm(A*x - b)

// solve now the system A'x=b
x = umf_lusolve(Lup,b,"A''x=b");  // without refinement
norm(A'*x - b)
x = umf_lusolve(Lup,b,"A''x=b",A);  // with refinement
norm(A'*x - b)

// do not forget to clear memory
umf_ludel(Lup)
 ]]></programlisting>
    </refsection>
    <refsection role="see also">
        <title>See Also</title>
        <simplelist type="inline">
            <member>
                <link linkend="umfpack">umfpack</link>
            </member>
            <member>
                <link linkend="umf_luget">umf_luget</link>
            </member>
            <member>
                <link linkend="umf_lusolve">umf_lusolve</link>
            </member>
            <member>
                <link linkend="umf_ludel">umf_ludel</link>
            </member>
            <member>
                <link linkend="umf_luinfo">umf_luinfo</link>
            </member>
            <member>
                <link linkend="condestsp">condestsp</link>
            </member>
        </simplelist>
    </refsection>
</refentry>
