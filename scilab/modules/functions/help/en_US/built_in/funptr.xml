<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:lang="en" xml:id="funptr">
    <refnamediv>
        <refname>funptr</refname>
        <refpurpose>coding of  primitives ( wizard stuff )  </refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Calling Sequence</title>
        <synopsis>[numptr] = funptr(name)</synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>Arguments</title>
        <variablelist>
            <varlistentry>
                <term>name</term>
                <listitem>
                    <para>a string, the name of a primitive</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>numptr</term>
                <listitem>
                    <para>the internal routine number of the primitive</para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Description</title>
        <para>
            Utility function (for experts only) to get the internal routine number <literal>numptr</literal>
            of the primitive <literal>'name'</literal>. <literal>numptr</literal> is formed from the interface
            number <literal>fun</literal> and the routine number <literal>fin</literal> of the primitive in its interface
            by <literal>numptr = 1000*fun + fin</literal> (fin &lt; 1000). From  <literal>numptr</literal> you can get 
            the interface number <literal>fun = floor(numptr/1000)</literal> which may be useful to link a 
            dynamical interface with arguments passed by reference (see example section).
        </para>
    </refsection>
    <refsection>
        <title>Examples</title>
        <programlisting role="example"><![CDATA[ 
// Suppose you want to load some codes via the dynamic 
// loading facilities offers by addinter. By default 
// arguments are passed by values but if you want to 
// pass them by reference you can do the following 
// (name being the scilab name of one of the interfaced 
// routines) :
//
// addinter(files,spnames,fcts)  // args passed by values
// num_interface = floor(funptr(name)/1000)
// intppty(num_interface)  // args now passed by reference
//
// Note that if you enter the following
//
// intppty()                
//
// you will see all the interfaces working by reference
 ]]></programlisting>
    </refsection>
    <refsection role="see also">
        <title>See Also</title>
        <simplelist type="inline">
            <member>
                <link linkend="clearfun">clearfun</link>
            </member>
            <member>
                <link linkend="newfun">newfun</link>
            </member>
            <member>
                <link linkend="intppty">intppty</link>
            </member>
            <member>
                <link linkend="addinter">addinter</link>
            </member>
        </simplelist>
    </refsection>
</refentry>
