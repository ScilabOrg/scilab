<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) ????-2008 - INRIA
 * Copyright (C) 2013 - Scilab Enterprises - Simon MARCHETTO
 *
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at
 * http://www.cecill.info/licences/Licence_CeCILL_V2.1-en.txt
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:lang="en" xml:id="showprofile">
    <refnamediv>
        <refname>showprofile</refname>
        <refpurpose>Outputs the function profiling results to the console</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Calling Sequence</title>
        <synopsis>showprofile(fun)</synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>Arguments</title>
        <variablelist>
            <varlistentry>
                <term>fun</term>
                <listitem>
                    <para>a Scilab function</para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Description</title>
        <para>
            To use <literal>showprofile</literal> on a function, the profiling of this function must have been first activated:
            <itemizedlist>
                <listitem>
                    <para>
                        either by using the <link linkend="add_profiling">add_profiling</link> command.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        or if the function has beed defined with the <link linkend="deff">deff</link> command, by setting the optional argument of <link linkend="deff">deff</link> to "p".
                    </para>
                </listitem>
            </itemizedlist>
        </para>
        <para>
            Once the function has been executed, calling <literal>showprofile</literal> outputs to the console the profiling results.
        </para>
        <para>For each function line (including the header of function), are printed the following informations, in order:
            <itemizedlist>
                <listitem><para>the total number of times the line was called</para></listitem>
                <listitem><para>the total CPU time spent in the line (in seconds)</para></listitem>
                <listitem><para>a measurement of the interpretor effort to interpret the line</para></listitem>
                <listitem><para>the number and source code of the line</para></listitem>
            </itemizedlist>
        </para>
        <para>
            An example of output:
        </para>
        <screen>
            |1  |0   |0| 1: function x=fun(n)
            |1  |0   |0| 2:   if n > 0 then
            |1  |0   |2| 3:     x = 0;
            |200|0.01|0| 4:     for k = 1:n
            |200|3.99|5| 5:       s = svd(rand(n, n));
            |...|... |.| ...
        </screen>
        <para>
            Here we can see that the 5th line of the function has been called 200 times, for a total CPU time of 3.99 seconds (and an effort of 5 to interpret the line).
        </para>
        <para>
            <literal>show_profile</literal> looks like to <link linkend="profile">profile</link>, but <link linkend="profile">profile</link> returns a matrix with the profiling results, while <literal>show_profile</literal> only prints that results to the console.
        </para>
        <para>
            Note: due to the precision limit of CPU time measure (typically one micro second), some executed lines which execution is very fast may appear with a CPU total time of 0.
        </para>
    </refsection>
    <refsection>
        <title>Examples</title>
        <programlisting role="example"><![CDATA[
// Function to be profiled
function x = foo(n)
  if n > 0 then
    x = 0;
    for k = 1:n
      s = svd(rand(n, n));
      x = x + s(1);
    end
  else
    x = [];
  end
endfunction

// Enables the profiling of the function
add_profiling("foo");

// Executes the function
foo(200);

// Prints the function profiling results to console
showprofile(foo)
 ]]></programlisting>
    </refsection>
    <refsection role="see also">
        <title>See Also</title>
        <simplelist type="inline">
            <member>
                <link linkend="add_profiling">add_profiling</link>
            </member>
            <member>
                <link linkend="profile">profile</link>
            </member>
            <member>
                <link linkend="plotprofile">plotprofile</link>
            </member>
            <member>
                <link linkend="reset_profiling">reset_profiling</link>
            </member>
        </simplelist>
    </refsection>
</refentry>
