<?xml version="1.0" encoding="UTF-8"?>

<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:ns3="http://www.w3.org/1999/xhtml" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:id="comp" xml:lang="ja">
    
    <refnamediv>
        
        <refname>comp</refname>
        
        <refpurpose>scilab 関数のコンパイル</refpurpose>
        
    </refnamediv>
    
    <refsynopsisdiv>
        
        <title>呼び出し手順</title>
        
        <synopsis>comp(function [,opt])</synopsis>
        
    </refsynopsisdiv>
    
    <refsection>
        
        <title>引数</title>
        
        <variablelist>
            
            <varlistentry>
                
                <term>function</term>
                
                <listitem>
                    
                    <para>コンパイルされていないscilab関数 (タイプ 11)</para>
                    
                </listitem>
                
            </varlistentry>
            
            <varlistentry>
                
                <term>opt</term>
                
                <listitem>
                    
                    <para>フラグ. 値は 0 (デフォルト), 1 または 2.</para>
                    
                </listitem>
                
            </varlistentry>
            
        </variablelist>
        
    </refsection>
    
    <refsection>
        
        <title>説明</title>
        
        <para>
            
            <literal>comp(function)</literal> は関数
            
            <literal>function</literal>をコンパイルします. 
            
            コンパイル済みの関数と解釈された関数は等価ですが,
            
            通常はコンパイル済みの関数の方がはるかに高速です.
            
            標準ライブラリとして提供される関数はコンパイルされています.
            
        </para>
        
        <para>
            コマンド<literal>exec</literal>と<literal>deff</literal>の短縮構文と
            
            同様に,オンライン定義もコンパイルされた関数を生成します.
            
            このため, <literal>comp</literal>は非常に特殊な
            
            ケースで使用するべきです.
            
            コンパイルされていない関数を作成するには,
            
            <link linkend="exec">exec</link> または
            
            <link linkend="deff">deff</link> に
            
            オプション  <literal>"n"</literal> を指定する必要があります.
            
        </para>
        
        <para>
            
            値 <literal>opt==2</literal>は,"プロファイル用に"コンパイルされた
            
            関数を作成します.
            
            <link linkend="add_profiling">add_profiling</link>関数により,
            
            コンパイル後でもプロファイル命令を追加することが可能になっています.
            
        </para>
        
        <para>
            
            廃止された <literal>opt==1</literal>オプションは
            
            コード解析用であり, 現在では無視されます.
            
            すなわち,<literal>opt==0</literal>とみなされます.
            
        </para>
        
        <para>注意: コンパイルは"インプレース"で行われます, すなわち,
            
            元の関数は修正され,新しいオブジェクトは生成されません.
            
        </para>
        
    </refsection>
    
    <refsection role="see also">
        
        <title>参照</title>
        
        <simplelist type="inline">
            
            <member>
                
                <link linkend="type">type</link>
                
            </member>
            
            <member>
                
                <link linkend="deff">deff</link>
                
            </member>
            
            <member>
                
                <link linkend="exec">exec</link>
                
            </member>
            
            <member>
                
                <link linkend="function">function</link>
                
            </member>
            
            <member>
                
                <link linkend="add_profiling">add_profiling</link>
                
            </member>
            
            <member>
                
                <link linkend="profile">profile</link>
                
            </member>
            
        </simplelist>
        
    </refsection>
    
</refentry>

