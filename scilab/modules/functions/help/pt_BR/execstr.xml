<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) XXXX-2008 - INRIA
 *
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at
 * http://www.cecill.info/licences/Licence_CeCILL_V2.1-en.txt
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1999/xhtml" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:id="execstr" xml:lang="pt">
    <refnamediv>
        <refname>execstr</refname>
        <refpurpose>executa código Scilab em strings</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Seqüência de Chamamento</title>
        <synopsis>execstr(instr)
            ierr = execstr(instr, 'errcatch' [,msg])
        </synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>Parâmetros</title>
        <variablelist>
            <varlistentry>
                <term>instr</term>
                <listitem>
                    <para>vetor de strings, instrução Scilab a ser executada. </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>ierr</term>
                <listitem>
                    <para>inteiro, 0 ou número de erro. </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>msg</term>
                <listitem>
                    <para>
                        string com valores <literal>'m'</literal> ou
                        <literal>'n'</literal>. O padrão é <literal>'n'</literal>.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Descrição</title>
        <para>Executa as instruções Scilab fornecidas pelo argumento
            <varname>instr</varname>.
        </para>
        <note>
            Note que <varname>instr</varname> não deve fazer uso de marcas de continuação (..)
        </note>
        <para>
            Se o flag <literal>'errcatch'</literal> não estiver presente, a manipulação de erros
            ocorre de maneira usual.
        </para>
        <para>
            Se o flag <literal>'errcatch'</literal> for ajustado, e um erro for encontrado enquanto
            são executadas as instruções definidas em <varname>instr</varname>,
            <function>execstr</function> não imprime uma mensagem de erro, mas aborta a
            execução das instruções <varname>instr</varname> (no ponto onde o erro
            ocorreu) e retorna com <varname>ierr</varname> igual ao número de erro.
            Neste caso a exibição da mensagem de erro é controlada pela opção
            <varname>msg</varname> :
        </para>
        <variablelist>
            <varlistentry>
                <term>"m"</term>
                <listitem>
                    <para>a mensagem é exibida e registrada.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>"n"</term>
                <listitem>
                    <para>nenhuma mensagem de erro é exibida, mas a mensagem de erro é
                        registrada (ver <literal>lasterror</literal>). Este é o
                        padrão.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
        <para>
            <code>ierr = execstr(instr, 'errcatch')</code> pode manipular erros sintáticos.
            Isto é útil para a avaliação de uma instrução obtida por uma pegunta ao
            usuário.
        </para>
    </refsection>
    <refsection>
        <title>Exemplos</title>
        <programlisting role="example"><![CDATA[
execstr('a=1') // ajusta a=1.
execstr('1+1') // faz nada (enquanto evstr('1+1') retorna 2)

execstr(['if %t then';
         '  a=1';
         '  b=a+1';
         'else'
         ' b=0'
         'end'])

execstr('a=zzzzzzz','errcatch')
execstr('a=zzzzzzz','errcatch','m')

//erros de sintaxe
execstr('a=1?02','errcatch')
lasterror(%t)

execstr('a=[1 2 3)','errcatch')
lasterror(%t)

// variable1 does not exist
if execstr('variable1;','errcatch')<>0 then
   disp("Trigger an error");
else
   disp("execstr is happy");
end

// variable2 exists ... no error is triggered by execstr
variable2=[2,3];
if execstr('variable2;','errcatch')<>0 then
   disp("Trigger an error");
else
   disp("execstr is happy");
end
 ]]></programlisting>
    </refsection>
    <refsection role="see also">
        <title>Ver Também</title>
        <simplelist type="inline">
            <member>
                <link linkend="evstr">evstr</link>
            </member>
            <member>
                <link linkend="lasterror">lasterror</link>
            </member>
            <member>
                <link linkend="error">error</link>
            </member>
            <member>
                <link linkend="try">try</link>
            </member>
        </simplelist>
    </refsection>
</refentry>
