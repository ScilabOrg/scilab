<?xml version="1.1" encoding="UTF-8"?>
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:ns3="http://www.w3.org/1999/xhtml" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:id="funcprot" xml:lang="en">
    <refnamediv>
        <refname>funcprot</refname>
        <refpurpose>alterna o modo de proteção de funções Scilab</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Seqüência de Chamamento</title>
        <synopsis>funcprot(prot)
            previousprot = funcprot(prot)
            prot = funcprot()
        </synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>Parâmetros</title>
        <variablelist>
            <varlistentry>
                <term>prot</term>
                <listitem>
                    <para>inteiro com valores possíveis 0,1 ou 2</para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Descrição</title>
        <para>Funções Scilab são variáveis, funcprot permite especificar o que o
            Scilab faz quando tais variáveis são redefinidas.
        </para>
        <itemizedlist>
            <listitem>
                <para>Se prot==0 nada especial é feito</para>
            </listitem>
            <listitem>
                <para>Se prot==1 o scilab exibe uma mensagem de aviso quando a função
                    é redefinida (modo padrão)
                </para>
            </listitem>
            <listitem>
                <para>Se prot==2 o scilab exibe uma mensagem de erro quando a função é
                    redefinida
                </para>
            </listitem>
        </itemizedlist>
    </refsection>
    <refsection>
        <title>Exemplos</title>
        <programlisting role="example"><![CDATA[previousprot = funcprot(1)
deff('x = foo(a)','x = a;')
deff('x = foo(a)','x = a + 1;')
foo = 33
funcprot(0)
deff('x = foo(a)', 'x = a;')
deff('x = foo(a)', 'x = a + 1;')
foo = 33
funcprot(previousprot)]]></programlisting>
    </refsection>
</refentry>
