<?xml version="1.0" encoding="ISO-8859-1"?>
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1999/xhtml" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:id="intppty" xml:lang="en">
    <refnamediv>
        <refname>intppty</refname>
        <refpurpose>ajusta propriedades de passagem de argumentos de
            interface
        </refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Seqüência de Chamamento</title>
        <synopsis>funs=intppty()
            intppty(fun)
        </synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>Parâmetros</title>
        <variablelist>
            <varlistentry>
                <term>fun</term>
                <listitem>
                    <para>inteiro, um número de interface (ver funptr)</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>funs</term>
                <listitem>
                    <para>vetor de inteiros, vetor de números de interface (ver
                        funptr)
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Descrição</title>
        <para> Os programas de interface pode ser escritos de duas formas
            diferentes para o modo de passagem de argumento de funções.
        </para>
        <para> No primeiro modo, que é o padrão, os argumentos são passados por
            valor. A sintaxe é a seguinte:
        </para>
        <programlisting role=""><![CDATA[ 
foo(A,1+2)
 ]]></programlisting>
        <para>
            o argumento associado a <literal>A</literal> será passado por
            valores (uma cópia de <literal>A</literal> é feita antes de
            <literal>foo</literal> i ser chamada, e o argumento associado a
            <literal>1+2</literal> será passado por valor.
        </para>
        <para>No segundo modo, os argumentos podem ser passados por referência, se
            houver "argumentos nomeados" (nenhuma cópia do valor da variável é feita).
            <literal>intppty(fun)</literal> com <literal>fun&gt;0</literal> diz ao
            Scilab que a interface com o número <literal>fun</literal> pode manipular
            argumentos passados por referência. A sintaxe é a seguinte:
        </para>
        <programlisting role=""><![CDATA[ 
foo(A,1+2)
 ]]></programlisting>
        <para>
            O argumento associado a <literal>A</literal> será passado por
            referência e o argumento associado a <literal>1+2</literal> será passado
            por valor.
        </para>
        <para>
            Aviso: a declaração de interface com número <literal>fun</literal>
            pode manipular argumentos passados por referência se não for o caso de
            produzir resultados imprevisíveis.
        </para>
        <para>
            <literal>intppty(fun)</literal> com <literal>fun&lt;0</literal>
            suprime esta propriedade para para a interface
            <literal>-fun</literal>.
        </para>
        <para>
            <literal>intppty()</literal> retorna o vetor de interfaces que
            manipulam argumentos passados por referência.
        </para>
        <para>Esta função pode ser útil para interfaces dinamicamente carregadas
            (ver addinter).
        </para>
    </refsection>
    <refsection role="see also">
        <title>Ver Também</title>
        <simplelist type="inline">
            <member>
                <link linkend="funptr">funptr</link>
            </member>
            <member>
                <link linkend="addinter">addinter</link>
            </member>
        </simplelist>
    </refsection>
</refentry>
