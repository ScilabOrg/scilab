<?xml version="1.0" encoding="UTF-8"?>
<refentry version="5.0-subset Scilab" xml:id="scipad" xml:lang="en"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:ns5="http://www.w3.org/1999/xhtml"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:db="http://docbook.org/ns/docbook">
  <info>
    <pubdate>$LastChangedDate: 2008-07-26 13:53:05 +0200 (sam., 26 juil. 2008)
    $</pubdate>
  </info>

  <refnamediv>
    <refname>scipad</refname>

    <refpurpose>Embedded Scilab text editor</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <title>Calling Sequence</title>

    <synopsis>scipad()
scipad(f1[,f2,...])
scipad f1 f2 ...</synopsis>
  </refsynopsisdiv>

  <refsection>
    <title>Parameters</title>

    <variablelist>
      <varlistentry>
        <term>f1, f2...</term>

        <listitem>
          <para>(strings or vectors of strings) file or directory
          pathnames</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsection>

  <refsection>
    <title>Description</title>

    <para>Scipad is an embedded Scilab text editor written in Tcl/Tk. It can
    be started with a fresh text buffer pressing the "Editor" button on top of
    the main Scilab window, or from Scilab command line with the instruction
    <literal>scipad()</literal>, or it can open specific files if invoked with
    any of the calling sequences above.</para>

    <para>The same invocation adds further files to an already opened Scipad.
    If any of the arguments is a directory pathname, a file chooser starting
    in that directory pops up, allowing (multiple) selection of files.</para>

    <para>Scipad allows Windows like edition modes. Keyboard shortcuts are
    defined for most possible editing actions and reported by the menu
    entries.</para>

    <para>Additionally, the following shortcuts are defined:</para>

    <informaltable border="1">
      <tr>
        <td>&lt;F2&gt;</td>

        <td>Save file</td>
      </tr>

      <tr>
        <td>&lt;F5&gt;</td>

        <td>Save file and run it into Scilab</td>
      </tr>

      <tr>
        <td>&lt;F6&gt;</td>

        <td>Show previous buffer</td>
      </tr>

      <tr>
        <td>&lt;F7&gt;</td>

        <td>Show next buffer</td>
      </tr>

      <tr>
        <td>&lt;Control-F6&gt;</td>

        <td>Switch to previous visible buffer</td>
      </tr>

      <tr>
        <td>&lt;Control-F7&gt;</td>

        <td>Switch to next visible buffer</td>
      </tr>

      <tr>
        <td>&lt;double-click mouse-button1&gt;</td>

        <td>Select word</td>
      </tr>

      <tr>
        <td>&lt;triple-click mouse-button1&gt;</td>

        <td>Select line</td>
      </tr>

      <tr>
        <td>&lt;Shift-Control-mouse-button1&gt;</td>

        <td>Select a block</td>
      </tr>

      <tr>
        <td>&lt;mouse-button2&gt;</td>

        <td>Paste selection</td>
      </tr>

      <tr>
        <td>&lt;mouse-button3&gt;</td>

        <td>Popup edit menu, or debug menu if clicked during a debug
        session</td>
      </tr>

      <tr>
        <td>&lt;Shift-mouse-button3&gt;</td>

        <td>Popup Execute menu</td>
      </tr>

      <tr>
        <td>&lt;Control-mouse-button3&gt;</td>

        <td>Popup Options menu</td>
      </tr>

      <tr>
        <td>&lt;Shift-Control-mouse-button3&gt;</td>

        <td>Open the source of the library function under the pointer</td>
      </tr>

      <tr>
        <td>&lt;Control-plus&gt;</td>

        <td>Increase the font size</td>
      </tr>

      <tr>
        <td>&lt;Control-minus&gt;</td>

        <td>Decrease the font size</td>
      </tr>

      <tr>
        <td>&lt;double-button1&gt; on a tile title</td>

        <td>Maximize this tile</td>
      </tr>

      <tr>
        <td>&lt;double-button1&gt; on a sash</td>

        <td>Space sashes evenly (for this paned window)</td>
      </tr>

      <tr>
        <td>&lt;button2&gt; on a tile title</td>

        <td>Switch hidden files</td>
      </tr>
    </informaltable>

    <para>The "Load Into Scilab" (Ctrl-lowercase-l) menu entry can be used to
    <link linkend="exec">exec</link> the file content into Scilab, while
    "Execute selection" (Ctrl-lowercase-y) passes the selected lines to the
    scilab shell using <link linkend="ScilabEval">ScilabEval</link> (i.e.
    <link linkend="execstr">execstr</link>).</para>

    <para></para>
  </refsection>

  <refsection>
    <title>Debugger</title>

    <para>Scipad includes a full featured debugger targeted to Scilab scripts
    and macros. The user can:</para>

    <para></para>

    <variablelist>
      <varlistentry>
        <term>Set/remove breakpoints anywhere in the opened files.</term>

        <listitem>
          <para>The breakpointed lines get pink background. No breakpoint can
          be set on empty, blank or commented lines. Insertion and deletion of
          breakpoints can be done either before the debug session starts, and
          during such a session. Breakpoints can have a condition, which is a
          generic expression written in Scilab language. When the execution
          process encounters a breakpoint, this breakpoint is said to be
          reached. When the breakpoint is reached and its associated
          conditional expression is true (or changed, depending on the user's
          selection), then the breakpoint is said to be hit. The hit count is
          the number of times the breakpoint has been hit. Execution stops at
          a breakpoint if the hit count satisfies a selectable break
          condition. A user interface dedicated to breakpoints is available to
          control their conditional expression, the hit count and the break
          condition.</para>

          <para></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Remove all breakpoints.</term>

        <listitem>
          <para>This allows to quickly remove all the breakpoints from all
          currently opened files.</para>

          <para></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Configure execution.</term>

        <listitem>
          <para>The user has to provide the function name to execute, its
          variable names, and variable values. To ease this step, a scan of
          the currently displayed buffer is implemented to look for functions
          defined in it, scan their names and variable names. All this is
          displayed to the user in a dialog for easy selection. First, the
          user has to select a function in a spinbox, then eventually one of
          its variables. Once a variable is selected, the user can set/change
          its value (another dialog pops). Variable values and names are
          displayed in listboxes. The user can also add a new variable or
          remove already defined variables. This is in case the user changes
          the input variables of his function in the file, and he does not
          want to scan the buffer again (which causes all the variable values
          to be reset to a null value). Note also that the <link
          linkend="varargin">varargin</link> keyword is fully supported, and
          that variables that are not given a value by the user are ignored
          when Scipad launches the function for debug. If the current file
          contains main level code (i.e. executable code outside of a function
          definition), Scipad proposes to debug this file as a .sce file (see
          below).</para>

          <para></para>
        </listitem>
      </varlistentry>
    </variablelist>

    <variablelist>
      <varlistentry>
        <term>Go to next breakpoint.</term>

        <listitem>
          <para>Scilab executes the code, and stops at the next breakpoint or
          goes to the end of the file if there is no more breakpoints. The
          active breakpoint is highlighted in Scipad so that it can easily be
          identified.</para>

          <para></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Execute step by step, going into functions (step into).</term>

        <listitem>
          <para>Scilab stops before execution of each line. The active stop
          position is highlighted in Scipad so that it can easily be
          identified. Every line of code in functions from opened files is
          taken into account, but Scipad does not search for or open files by
          itself in order to step into them. Lines with no executable code
          (blank or commented lines) are skipped.</para>

          <para></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Execute step by step, without going into ancillary functions
        (step over).</term>

        <listitem>
          <para>Similar to step into, but ancillaries are executed at once
          without stepping into them. However, if the user has set a
          breakpoint in an ancillary, Scilab will nevertheless stop at this
          breakpoint.</para>

          <para></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Execute step by step, starting back from the return point of the
        current function (step out).</term>

        <listitem>
          <para>Scilab executes instructions until the function returns from
          the current context, i.e. the next stop occurs just after the
          current function has returned. However, if the user has set a
          breakpoint in the current function or in an ancillary, Scilab will
          nevertheless stop at this breakpoint. Lines with no executable code
          (blank or commented lines) are skipped.</para>

          <para></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Run execution up to the next return point.</term>

        <listitem>
          <para>Scilab executes instructions until the next return point is
          reached. It stops just before executing the line that will make the
          current nest level to return. If the user has set breakpoints in the
          current function or in an ancillary, Scilab will skip them and stop
          only when the return point is reached. The list of exit points for
          the current function includes the line containing the endfunction
          keyword corresponding to the function declaration line (there can be
          only one such line in Scilab, no multiple "endfunction" for one
          "function"), but also possibly multiple "return" and "resume"
          statements.</para>

          <para></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Run execution up to the cursor position.</term>

        <listitem>
          <para>Scilab executes instructions until the cursor position is
          reached. If the user has set breakpoints in the current function or
          in an ancillary, Scilab will skip them and stop only when the cursor
          position is reached. Lines with no executable code (blank or
          commented lines) are also skipped: if the cursor is in such a line,
          Scilab will stop just before executing the next line carrying
          executable code.</para>

          <para></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Continue ignoring any breakpoint.</term>

        <listitem>
          <para>Finish execution in Scilab as if there was no breakpoint at
          all.</para>

          <para></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Break execution.</term>

        <listitem>
          <para>Scilab pauses execution. This is useful to check out where a
          long script is stuck, e.g. in case of an endless loop.</para>

          <para></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Abort debug.</term>

        <listitem>
          <para>Abort execution in Scilab and cancel the current debug session
          in Scipad.</para>

          <para></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Remove all breakpoints.</term>

        <listitem>
          <para>This allows to quickly remove all the breakpoints from both
          Scilab and Scipad.</para>

          <para></para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>When one of the run commands above is triggered for the first time,
    Scipad launches execution, i.e. it execs the currently displayed buffer as
    well as all the opened buffers that contain functions, sends to Scilab the
    <link linkend="setbpt">setbpt</link> instructions relative to all the
    breakpoints that have been set, and executes the selected function with
    the input variable values provided during the configure execution step.
    Then the execution is automagically stopped by Scilab according to the
    debug command that was launched. A new debug command can then be
    executed.</para>

    <para></para>

    <para>At any time during the debug, a <emphasis role="bold">watch
    window</emphasis> can be displayed on user request. It allows to monitor
    any variable value, or change a variable value during a breakpoint stop
    and relaunch execution with the modified value. A watchable variable can
    be part of a larger structure, for instance if A is a 20x20 matrix, the
    shorter sub-matrix A(2:4,7:9) can be watched. The user can also watch all
    local variables without having to input their name manually, or all locals
    and globals at the same time. It is also possible to "watch" generic
    expressions, i.e. enter a list of expressions that will be evaluated
    whenever execution stops, so that for instance an array can be plotted at
    each step. The watch window also displays the calling stack and contains a
    toolbar with the most useful commands from the debug menu.</para>

    <para></para>

    <para>In its current development state the debugger works well with
    functions, i.e. <emphasis role="bold">pure .sci files</emphasis>, but
    support of .sce files or mixed .sce/.sci files is however also fully
    implemented. Debug of .sce or mixed .sce/sci files makes use of the
    implementation for the .sci case after having automatically wrapped the
    code in a function/endfunction clause. The wrapper is automatically
    removed when the debug ends.</para>

    <para></para>

    <para>Due to technical limitations, <emphasis role="bold">ancillary files
    of Scipad</emphasis> cannot be debugged nor stepped into. During the
    configure step, Scipad detects if the user intends to configure one of its
    ancillaries for debugging, and prevents from doing so. The list of
    reserved function names is then displayed in a message box. In case it is
    really needed to debug a Scipad ancillary, it is possible to try to change
    the name of the reserved function in order to debug a copy of it, but
    there are some catches to that, if the function calls itself other
    reserved ancillaries, or if the original file is still currently opened.
    Not only the name of the function in its definition line should be
    changed, but also any call to this function, and any call to the original
    function ancillaries if the original file is still open.</para>

    <para></para>
  </refsection>

  <refsection>
    <title>Remarks</title>

    <variablelist>
      <varlistentry>
        <term>Localisation:</term>

        <listitem>
          <para></para>

          <para>Scipad menues and messages can be translated to several
          languages. The very first time Scipad is launched from a new Scilab
          installation, the language used by Scipad is the Scilab language. If
          the Scilab language is not available in Scipad, then the English
          fallback is used. Later, the localization in effect can be selected
          with the menu Options/Locale and is remembered across sessions.
          Currently, the supported languages are: "da_dk" (Danish), "de_de"
          (German), "en_us" (English), "es_es" (Spanish), "fr_fr" (French),
          "it_it" (Italian), "no" (Norwegian), "pl" (Polish), "se" (Swedish),
          "zh_cn" (Chinese-simplified), "zh_tw" (Chinese-Taiwan).</para>

          <para>Further languages can be added by creating the proper
          translation file and putting it in
          <literal>SCI/modules/scipad/tcl/msg_files/</literal>. If you plan to
          do such a job, please check the file
          <literal>SCI/modules/scipad/tcl/msg_files/AddingTranslations.txt</literal>
          for detailed instructions, and consider to contribute it to the
          community.</para>

          <para></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Drag and drop:</term>

        <listitem>
          <para></para>

          <para>DnD has been implemented in Scipad for moving around text, for
          dropping selected text from and to external applications, and for
          opening a file or a list of files.</para>

          <para>Dragging one or more files from an explorer and dropping to
          Scipad will open the file(s) in Scipad. Doing the same with a
          directory will open recursively all the directory contents
          (beware!)</para>

          <para>For text selected within the Scipad window, the possible
          actions are move (just use mouse button-1) and copy (Control
          button-1). Text selections can be moved or copied also between
          different Scipad subpanes, when tiling is active.</para>

          <para>Drag and drop capabilities in Scipad rely on the TkDnD package
          (http://sourceforge.net/projects/tkdnd). Presence of this package
          should be automatically detected by Scipad, enabling the
          corresponding features at that time. Windows and linux-i386 binary
          versions of Scilab are currently shipped with TkDnD. If not, here
          are some installation instructions:</para>

          <para>Windows platforms: Download the full package (currently
          tkdnd-1.0a2.tar.gz), and uncompress it somewhere. Copy the content
          of lib\tkdnd and paste it into
          <literal>SCI\modules\tclsci\tcl\tk&lt;version&gt;\tkdnd</literal>.
          That's all!</para>

          <para>linux-i386 platforms: Download the rpm package (currently
          tkdnd-1.0-b2.i386.rpm). Install it with rpm -U (may have to force
          --nodeps if it doesn't recognize an existing Tcl installation). If
          you have a source version of Scilab and an installation of Tcl/Tk,
          check where they are installed (e.g. <literal>/usr/share/</literal>)
          and move the newly created directory
          <literal>/usr/lib/tkdnd1.0/</literal> to there. If you have a binary
          version of Scilab, move <literal>tkdnd1.0/</literal> to
          <literal>SCI/modules/tclsci/tcl/</literal>, where the supplied
          Tcl/Tk binaries are.</para>

          <para></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Bugs:</term>

        <listitem>
          <para></para>

          <para>There are still a few... Details can be found in file
          <literal>SCI/modules/scipad/BUGS</literal>. Officially reported bugs
          are filed in the Bugzilla http://bugzilla.scilab.org and can be
          easily retrieved by filtering entries wrt the "Scipad Editor"
          element.</para>

          <para></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Additional features in Scipad and most recent
        developments:</term>

        <listitem>
          <para></para>

          <para>Currently Scilab is shipped with Tcl/Tk 8.4. However, Scipad
          offers a handful of quite handy features that are available as soon
          as Tcl/Tk 8.5 is running in its background. For instance, peer text
          widgets are available from Tk 8.5, and this capability is used in
          Scipad to allow for displaying more than one contiguous area of an
          opened file at a time in tile mode. Instructions about how to
          upgrade to Tcl/Tk 8.5 can be found on the Scilab wiki:
          http://wiki.scilab.org/Linking_Scilab_with_Tcl/Tk_8.5 .</para>

          <para></para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsection>

  <refsection>
    <title>Examples</title>

    <programlisting role="example">
   scipad SCI/etc/scilab.start 
</programlisting>
  </refsection>

  <refsection>
    <title>See Also</title>

    <simplelist type="inline">
      <member><link linkend="edit">edit</link></member>

      <member><link linkend="manedit">manedit</link></member>

      <member><link linkend="edit_error">edit_error</link></member>
    </simplelist>
  </refsection>

  <refsection>
    <title>Authors</title>

    <simplelist type="vert">
      <member>Scipad is derived from tknotepad written by Joseph
      Acosta;</member>

      <member>Mathieu Philippe, INRIA, 2001;</member>

      <member>Enrico Segre, Weizmann Institute, 2003-2006;</member>

      <member>Francois Vogel, 2004-2008.</member>
    </simplelist>
  </refsection>
</refentry>