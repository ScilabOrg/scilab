SCIPAD BUGS AND WISHES LIST


Bugs:
-----
-bug 2789, of course (debugger broken by the new Scilab-Tcl interface)
 A few references:
 http://bugzilla.scilab.org/show_bug.cgi?id=2789
 http://wiki.scilab.org/Tcl_Thread
 http://wiki.scilab.org/Scipad_debugger_inner_beauties

-other open Scipad bugs reported in the Siclab bugzilla:
http://bugzilla.scilab.org/buglist.cgi?&component=Scipad+Editor&bug_status=NEW&bug_status=ASSIGNED&bug_status=REOPENED

-issues related with non colorizing single quoted text:
  . code lines such as mprintf("%s",'this is a function') break the line
    number counting in functions if not properly colorized as textquoted.
    Solution could be to detect all quoted strings, with single or double
    quotes, and .textarea tag add some invisibletextquoted aside the
    existing (visible) textquoted tag used for colorization, and use only
    invisibletextquoted for Scilab function detection within buffers, in
    other words, separate the strings detection from their colorization
    Note: when done, the messageBox in proc checkforduplicateorunterminatedfuns
    must be updated (and the msg files as well)

-proc blinkbrace blinks even if the brackets/braces are quoted, e.g. "[" "]"

-proc blinkquote blinks even for partially commented text, e.g.
 a "string.. // this is no "string

-On some platforms certain bindings for blinking character never trigger,
 e.g. for bracketleft on Windows (AltGr-5, french keyboard) one gets
 Control_L plus parenleft - this one however blinks through the parenleft
 binding, but others such as braceleft do never trigger and gives
 Control_L plus quoteright - depends on keyboard, platform and whatnot...
 See also bug 1542

-Some shortcuts may not work on certain platforms. E.g. Control-F1 does not on
 at least one Mandrake 10.1 Official Linux. Was also found on a RH8 machine.

-Line numbering issue in Scilab 5 only (bug 3407)

-When a function definition line ends with a comment, the line numbering is
 wrong 1 unit, resulting in various strange behaviors: execution not stopping
 at breakpoints or not up-to-date value of variables in the watch window
 This is Scilab bug 1469 (outside of Scipad) that deals with the general
 issue of mismatch between line numbering as reported by fun2string and that
 held by the breakpoint handling

-logical line numbering issue:
   function a=foo(); a=1;
    a=2;
   endfunction
 In scipad, a=1 is on line 1; for scilab it is on line 2 of function foo
 Also related to bug 1469 - better wait for clarification on this one instead
 of working around Scilab parser bugs

-step-by-step debugging may highlight the wrong line in Scipad when continued
 lines without dots are present before the breakpoint stop. Bug 1469 again!!!

-Bug 1469 once more in the following case (mind the spaces before
 "endfunction"):
function test
  a=1
  endfunction
 In this case the debugger in single step mode will highlight line 1 after
 line 3 whereas this won't happen for:
function test
  a=1
endfunction

-watching some very large variable content looks like the variable is empty
 This is Tk bug 1449858.

-Multiple file open in the file dialog: There is a Tcl bug on tk_getOpenFile,
 which does not correctly work on Linux with -multiple 1 option. See Tcl
 bug 1614032. I have proposed a patch for this bug to the Tcl core team, but
 it is not yet committed in the Tcl source code. There is also bug 1578519
 about special dirs on Windows, still for tk_getOpenFile.

-When there are wrapped lines of varying lengths, as the user scrolls, the
 length of the scroll box changes. 
 This is actually fixed in Tk 8.5: http://www.tcl.tk/cgi-bin/tct/tip/155.html
 No workaround available in 8.4, this is a deep Tk core issue.

-Line numbers of lines located after the active breakpoint are slightly
 misaligned with the lines they're facing. This is due to the font of the
 active breakpoint tag ($actbptextFont), which has a slightly larger size
 than $textFont, the latter being used for the line numbers.
 A general scheme should be derived so that line numbers support different
 font sizes in the text they face. The algorithm could be something like:
   . Check what tags has the line in front of the line number
   . Retrieve the -font option of the highest priority tag
   . If this is not empty, extract the -size attribute of the font and tag
     the line number with a modified $textFont having this -size
   . Otherwise (the -font option of the higest priority tag is an empty
     list) check out the tag that is of priority just below the highest
     and run the game again
   . When there is no tag left, use the $textFont -size value as a fallback
 Beware of performance issues here! This must be done for each visible line!
 Moreover, this would still not be perfect: mixed sizes inside single lines
 would not be supported (but such complications are anyway not used in
 Scipad currently)
 Easier fix: use the same size for all the fonts displayed in textareas!

-watching a list containing a list with an undefined
 element resets the watched variable to an empty list (perhaps proc
 createsetinscishellcomm should be recursive)
 example: watch Q in   M=list(1,2,[1,2]);M(5)=33;Q=list(M,888);

-bug in the font chooser: If I tag some properties, then OK, then reopen
 the dialog, sometimes they are reshown tagged, sometimes not.

-on at least one system (RH Linux), opening the font chooser, clicking OK
 and reopening it can make the font size increase everytime the chooser
 is opened again. This behaviour is font dependent. This is a Tk bug:
 http://sourceforge.net/tracker/index.php?func=detail&aid=1548868&group_id=12997&atid=112997

-now that bug 2161 is fixed and the behavior of exists(..,option) is clarified
 perhaps ext_exists.sci should check whether the variable exists in the
 global environment, since (from help exists): "the exists function does not
 check if a variable exists in the global namespace" -- well, first let's
 wait for clarifications about help macrovar (see bug 2161 comment #5)

-when background tasks are not allowed, typing quickly enough will produce
 shuffled output: output characters are not in the order they were typed.
 This happens when the load on Scipad is heavy, for instance with the test
 case provided here:
 http://groups.google.fr/group/comp.soft-sys.math.scilab/browse_thread/thread/ea6b6dc9bce5f0e6


Old bugs/whishes which have been hacked but could have been done better:
------------------------------------------------------------------------

-the window geometry is now managed in pixels. This is fine for restoring
 exactly the same window geometry as in the previous session, but loses
 some advantages of the previously broken grid management, such as resize
 of the window upon font size changes.

-2nd-button now succeeds in importing an X external selection into scipad
 under linux. With one remaining glitch, the insertion cursor zomps back
 to the beginning of the insertion at the end of the process.
 Under windows 2nd-button is ineffective if the selection is external, 
 but has the side effect (with some glitches) to drop at the mouse point the
 selection it is within scipad
 On Windows:btn-2 in the same textarea as the selection: it's a move (wrong!),
 while btn-2 in another textarea: it's a copy/paste
 On Linux: always copy/paste (correct)

-Make printing from Scipad work on Linux and implement it for Windows.
 Try to preserve the colorization in the process.
 Possible references for implementation on a Windows box are:
 http://wiki.tcl.tk/11319
 http://wiki.tcl.tk/9846
 http://pages.infinit.net/cclients/files/tkprint1.1.html
 http://wiki.tcl.tk/2497
 http://aspn.activestate.com/ASPN/Cookbook/Tcl/Recipe/284848
 Tk request 734625 (Output the contents of a text widget to a (PostScript) file)
 Tk request 220817 (Direct Print Support for all widgets)
 http://www.du.edu/~mschwart/tclextensions.html (printer extension)
 http://www.nyx.net/~mschwart/ (printer extension)
 -- Printing works on Linux and now also on Windows. It makes use of Scilab
    internal new functions that do not preserve colorization. I'm convinced
    that an internal Tk printing scheme would be better.
 -- Update August 2008: The opteam has now implemented functions toprint and
    printsetupbox in java. From their post on the dev mailing list:
    "functions *toprint* (printing without dialogs, no user action needed) and
    *printsetupbox* are avaiblable under Linux and Windows and call standard
    Java dialogs".
    TODO: check whether on Linux we should change the way printing works in
    Scipad or not (i.e. use toprint or stay as we do now). On Windows,
    toprint/printsetupbox are already used.

-trying to debug functions with names > 24 characters does not work. This is
 a very general Scilab limitation (in the debugger context, setbpt looses
 characters for long names, that's why it doesn't work). Currently 
 a check on name length when colorizing user functions has been added to
 remind the user from this limit. Only this visual hint is provided, i.e.
 configure execution will propose too long names. Scipad or the debugger
 is not limited to 24 chars, but Scilab still is. Let's wait for Scilab
 improvement instead of restraining the debugger!

-anything could happen during debug if the same function name can be found more
 than once among the opened buffers, for instance the wrong buffer could become
 the active one to show the active breakpoint - same issue in configureexec:
 if a function is defined in more than one buffer, proc checkarglist may
 detect the wrong one and prevent correct configuration of the debugger
 Since duplicate function definitions are not supported by the debugger, a
 warning is issued to the user, and the debugger refuses to execute
 To let the debugger support this would perhaps be desirable, but very difficult
 since the internals in Scilab store breakpoints linked to a function name:
 setbpt("funname",bptline).
 Two functions with the same name would therefore mix their breakpoints!

-Avoid to destroy and recreate the whole watch window when hiding/displaying
 one of its sub-areas. Would probably require -hide option for panedwindow,
 but this one is only available from Tk 8.5 (TIP #179)
 --I tried it and indeed using -hide avoids to redraw the watch window when
   panes are hidden or remapped.
   However, when both the variables area and the call stack area are hidden,
   the watch window must be non resizable, thus wm resizable 0/1 0/1 when
   switching panes. This wm resizable command always redraws the window
   because of the need to redraw the border, and this creates a visual flash
   of the window. I couldn't avoid it, and thus I just dropped this wish
 --in case this wish comes up again, investigate whether TIP 125 (Converting
   between Frame and Toplevel Windows) could be of any use to dock/undock
   the watch window (well, this feature is already working well, but if the
   watch could hide/display its parts without a complete redrawing, then
   TIP 125 could be useful). TIP 125 is implemented in Tk8.5b2 (27/10/07)
   and above.

-during debug, string variables which contain data which does not make sense as
 text in the current locale, are shown as mangled in the watch variable area.
 This can happen for example when watching a chinese string in a latin locale.
 The behavior is intrinsic in tcl, and after all understandable as such. While
 we don't make any effort to circumvent tcl interpretation of illogically coded
 strings, the fact could have side effects on the original variables if debug
 exits abnormally.
 Snippet to demonstrate the intrinsic problem:

   $ setenv LANG ja ; scilab -nw -nb
  -->a=ascii([230,173,164]); TCL_SetVar("atcl",a);
  ascii(TCL_GetVar("atcl"))
    ans  =
       186.    161.


Wishes:
-------

Debugger wishes:

-Use the -listvariable option for $lbvarname and $lbvarval listboxes - this
 could automate a lot of sync work with watchvars and watchvarsprops

-Add an "Evaluate now!" button in the generic expressions area. Warning: then
 a roundtrip to Scilab must be done before evaluating, or let the roundtrip be
 mandatory when modifying any watch variable

-Scipad defines and uses, mostly for the debugger, some variables in order to
 send values to Scipad. All these variables currently start with the prefix 
 db_, in order to reduce the risk of the use of such variable names in Scilab
 for another purpose, e.g. in the function to be debugged. We could use more
 sophisticated things to be absolutely sure that the variable names 
 instantiated by Scipad are not used in Scilab, so that conflicts would 
 always be avoided. For instance, browsing the existing known
 variables and checking for existence, etc. could be used (who, who_user...)
 At least, db_xx names should be made 24 char long (longest=less likely that
 mr. lambda chooses the same name) and have the word scipad sneaked inside
 them to make things clearer.
 Another improvement would be to use implementation of request 319 whenever
 possible, i.e. switch back all the TCL_EvalStr("set temp ....");TCL_Getvar("temp")
 of the current codebase into using the result of TCL_EvalStr directly.
 This will also avoid some ifs about the scilab4/5 environment
 But the final fix would be to have namespaces in Scilab.
 And anyway this naming convention should be documented in scipad.xml

-include profiling into the debugger. The idea would be something like
 making "Run Profiling" another button/command of the debugger, disabled
 in editing mode, active only after Configure for Debug. Once started 
 profiling, all the debugger stepping and watch commands would be disabled,
 except for "break" and "cancel debug". At the end of the run, 
 plotprofile() is called [plotprofile too needs to be adapted so
 that it won't create a new buffer, but refers to the original].
 "Run profiling" would also be callable again, for cumulation.
 There is however a big potential showstopper. For profiling, the
 function (or wrapper) has to be getf(,"p"); we're now making the
 functions known to scilab with exec() instead. getf() has known bugs
 (1968, 2072, 2253) and limitations in comparison with exec().
 In particular it doesn't support nested function definitions (bug 1564).
 Oh yes, but in Scilab5 we now have add_profiling !

-breakpoint, activebreakpoint and continued lines tags are not visible
 when selected. No solution found so far. Only one tag with -background
 option has highest priority, and there is no -selectbackground option
 for tags (the latter is Tk request #1759972)
 This problem has been submitted in comp.lang.tcl, see:
 http://groups.google.com/group/comp.lang.tcl/browse_frm/thread/d60973524b786c0e/14a82aef3b1dd24f
 It has been suggested to create a tag that has the desired background
 attributes, add an execution trace on the widget command, and whenever
 the selection changes (e.g.: when the execution trace fires on a
 "tag add sel"), add this tag to the selected range.
 Personnally, I think this is a very complicated way of making this
 work, especially considering that three tags with background should
 be dealt with and combined (what about a continued line also tagged
 as a breakpointed line, in which some characters are selected?)
 Not worth the effort and complication I think.
 Now that one side margin is implemented (for line numbers), it is pretty
 easy to add further margins and this could be used to tag breakpoints
 instead of tagging the line (but there is a lot of implications: for
 instance the debugger currently scans the textarea for breakpoint tags
 and does not maintain a list of breakpointed lines)

-add a debugger command: "Show next instruction", with a little yellow arrow
 in the margin, and perhaps a breakpoint pink dot in that margin, or other
 debugger info

-debug of functions with argn(1)>0
 the debugger is not able to go into something like
     function [a,b,c]=foo(x,y,z)
       if argn(1)<>3 then error(41); end
     endfunction
 The current version of the debugger cannot cope with this because it always
 invokes the configured function with no lhs

-new debug command: Continue out of loop

-increment the breakpoint hit count for any debugger move, not only in nostep
 mode. Currently the hit count is not incremented when the debugger stops on
 a breakpointed line, unless this line has been hit using F11. E.g. in step
 by step mode, passing over a breakpoint doesn't increment the hit count.
 The problem is that bptsprops($ID,hitcount) doesn't exist at any debug stop,
 it only exists for stops corresponding to a breakpoint that was set
 previously by the user

-add a condition type (perhaps, but then document it also): isinerror

-breakpoints GUI: right-click (or another way?) to remove a breakpoint from
 the breakpoints GUI.
 But then, adding breakpoints should perhaps also be possible from the GUI?

-breakpoints GUI: change the areas containing the name of the breakpointed
 function and the line number into editable spinboxes allowing the user to
 modify the breakpoint position from the GUI


Other wishes:

-Improve the look and feel of Scipad by using Ttk (Tk8.5) - This applies
 especially to Linux platforms

-parentheses and brackets get colorized in colors according to their level
 of nesting

-unmatched parentheses are highlighted (e.g. stroke-tru) like in Matlab's 
 editor

-highlighting of for--end, while--end, select--end blocks while
 typing, like for parentheses; scope background remains highlighted in a
 background tint (choose a suitable scheme for nested structures), OR,
 block keywords are highlighted in different colors than standard keywords.

-a taylored 3rd-button popup menu (currently it is just the edit menu) - i.e.
 it includes execute selection, comment/uncomment this line, insert/delete
 breakpoints
 Note: a first step to this has been implemented. During a debug session, 
 the popup menu is a debug menu.

-(customizable?) tool bar
 Note: a first step to this has been implemented in the debugger watch window.
 What this wish is about is a toolbar right below the main menu bar, with the
 usual icons/actions: Open, Save, Find...

-Blink single quotes. More difficult than to blink double quotes because
 of the transpose case

-'Matlab' colorization scheme for .m files

-"auto smart wrap on": lines exceeding a margin could be truncated at
 word boundaries with .. dots and \n
 Hint: some clever use of the -wraplength option of text widgets?

-Add an eventual "revert to defaults button" (colors option menu)

-*maybe* a global undo stack instead of one per buffer
 advantages: can undo at once a dnd from one pane to another one
 drawbacks : big big implementation work if the built-in undo of the text
             widget was abandoned, but maybe it could be feasible to detect
             changes in the undo stacks of more than one buffer at the same
             time - still tricky...
 Note that as per TIP 169 peers already share one single undo stack

-minimal Scipad wm size: Probably it would be wise to make the minimum
 dependent on the number of tiles, so that all the features (menu, title,
 textbuffer, scrollbars...) remain visible - take fontsize and locale into
 account
 warning: updating minsize on file open or dnd could lead to a very large
 window, therefore minsize should also be clamped to some clever maximum

-Improvements for find/replace:
  . Dynamical indices in the find in files results: Currently: launch find
    in files, then delete a line in the buffer between two matches, then
    click on the second match. The wrong line is highlighted. Beware of
    performance while fixing this!
  . The find/replace entries in the dialog could be comboboxes retaining
    the strings previously searched or replaced
      o combobox 2.3 and BWidgets 1.7.0 are currently in the Scilab distro
        and both provide comboboxes. We could link Scipad to them, but
        apparently the Tile package, which also provides combos, is now
        included in Tk and will be part of Tk 8.5.
  . Multiline find/replace and find in files (to be tested with Tk8.5, which
    has the feature; no fallback seen in Tk8.4 since in
    8.4 .text search searches on a per line basis - or use regexp instead
    of .text search, big work...) - Automatically expand the entry widgets
    size according to the length of what is pasted inside them
  . More than one results window for find in files (user can select a
    target window that will contain the search results)
  . More than one find in files thread at the same time
  . Emacs like search (Ctrl-s). It is now implemented under Firefox, even
    under windows. The search goes on as you start typing in the word you are
    looking for. Opening a separate widget really slows down the search. Firefox
    has made an excellent tradeoff between emacs' expert like behavior and
    windows facilites. This feature however involves a new subpane at the
    bottom of the window, some alternative search and mark procedures,
    etc. Probably feasible but discussable if worth the effort; then the
    existing search dialog will become "advanced search" as there is
    certainly no room for all its options in an one line subpane.

-detect duplicate/missing underlines in the message files

-Improve further the regexps for continued lines detection, the goal being
 to detect only legal (in the Scilab parser sense) continued lines.

-Emacs bindings in Scipad. Proposed list is at:
http://groups.google.fr/group/comp.soft-sys.math.scilab/browse_thread/thread/dc0807b11fb118ab/9fe94a45d23f92fe

-Improve bindings for keypad keys:
  NumLock-off KP-7       --> Home
  NumLock-on  KP-7       --> 7
  NumLock-off Shift-KP-7 --> Mark from current to beginning of line.
  NumLock-on  Shift-KP-7 --> Mark from current to beginning of line.
  NumLock-off Ctrl-KP-7  --> Mark from current to beginning of text.
  NumLock-on  Ctrl-KP-7  --> Mark from current to beginning of text.
(and likewise for KP-1 and end of line/text)

-Add a function "Beautify code" for Scilab schemes: (optionally) suppress
 tabs, and reindents according to keywords (if, function, while, for...)
 This is aka automatic indentation (like indent-region in emacs)

-When executing the content with a button, the scilab command line is not
 put in the history. This means that it cannot be called back with arrows.
 Often the editor is used to write a script that is wanted to be run a number
 of times. It would be nice then not to have to click on a button and just
 recall the command using arrows (or ctrl-p)
 Might be feasible: addhistory, gethistoryfile, but in trunk (Scilab5) only

-Request 262: tabbed buffers (see discussion in this request)

-Request 459: memorize some informations related to a window (see discussion
 in this request)

-Requests 461 and 462: improvements wrt to xml editing. However, the position
 expressed by Enrico says it all: "Scipad was never really conceived to be a
 full fledged xml editor - there would be too much to do and there are much
 better dedicated editors around - I'd be a little wary of introducing new
 features here."

-Use eq/ne instead of ==/!= throughout the code whenever string comparison
 is meant:
http://groups.google.fr/group/comp.lang.tcl/browse_thread/thread/eea78c744811e2c3/47482ff7037343ab

-diff feature: dialog allowing to select two files among the opened ones (or
 browse for not yet opened files), and launch an external diff tool such as
 winmerge (Windows), or others. The command to launch the tool is stored as a
 preference. Watch out for security problems if someone stores "format c:"!
 Or integrate a Tcl diffing tool perhaps? tkdiff is a well refined and mature
 tool, distributed under the GPL.  http://sourceforge.net/projects/tkdiff/
 The GPL license and the fact it's written in Tcl are two strongly positive
 facts wrt integration in Scipad

-remove the scilab4/scilab5 environment detection once scilab5 is stabilized
 and if it doesn't ease backporting to scilab-gtk. Code to remove can be
 found by highlighting differences between versions 6.117 and 6.118 of Scipad.
 Well, not sure this should be done after all. Why would we prevent backports?

-improvements in the font chooser (proposal to be refined):
 1. For each (text- and menu-) font, add a new area similar to the already
    existing example area, for displaying the current fonts, with their
    properties (Name, Size, Style) written in clear text in the -text
    option of the labelframe. This area always displays the fonts as they
    were on the dialog opening, along with the properties the fonts had
    also when the user opened the dialog. In other words these new areas
    never change their content during the time the dialog is open.
    The user can then visually compare the font he used (i.e. the font he had
    before any change) with the one he will use if he clicks on
    OK or Apply (this was the initial request). The font he used is displayed
    in the new area, while the candidate new properties of the selected font
    are displayed in the already existing sample area.
 2. When switching from Text to Menu font (the radiobutton), the current
    values of the font (the current ones in the dialog, with default values
    being the original font ones) are preserved, so that when switching
    again they are preselected again.
 3. Add an Apply button (the font chooser dialog will flash, i.e. close/reopen
    immediately - acceptable).
    Clicking on OK or Apply applies the selection to the "Use as" font only.
 4. The "Use as" should place the radiobuttons next to the sample text areas,
    so that it's visually clearer what to press for changing what. (this could
    well become a nightmare to kep everything aligned...)
An other possible solution is to wait for tk_chooseFont be implemented in Tcl:
https://sourceforge.net/tracker/?func=detail&atid=312997&aid=1477426&group_id=12997
This is patch 1477426, with already a number of implementation proposals.
Might be far better to make use of the Tcl-designed selection font, keeping mine
as a default fallback whenever the user has an old Tk version.
See also TIP #213 and TIP #324, and discussions on them on [TCLCORE].
