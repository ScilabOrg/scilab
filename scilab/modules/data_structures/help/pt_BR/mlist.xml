<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2007-2008 - INRIA
 *
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at
 * http://www.cecill.info/licences/Licence_CeCILL_V2.1-en.txt
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:ns4="http://www.w3.org/1999/xhtml" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:id="mlist" xml:lang="en">
    <refnamediv>
        <refname>mlist</refname>
        <refpurpose>objeto Scilab, definição de listas com tipos orientadas
            matricialmente
        </refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Seqüência de Chamamento</title>
        <synopsis>mlist(typ,a1,....an )</synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>Parâmetros</title>
        <variablelist>
            <varlistentry>
                <term>typ</term>
                <listitem>
                    <para>vector of character strings</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>ai</term>
                <listitem>
                    <para>
                        any Scilab object (<literal>matrix,
                            list,string...
                        </literal>
                        ).
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Descrição</title>
        <para>
            Objetos mlist são bastante semelhantes a objetos <link linkend="tlist">tlist</link> objects. A única diferença concerne às
            sintaxes de extração e inserção (<link linkend="extraction">extraction</link> e <link linkend="insertion">insertion</link>): se <literal>M</literal> é uma
            mlist, para qualquer índice <literal>i</literal> que não é um campo de
            nome, <literal>M(i)</literal> não é mais o <literal>i</literal>-ésimo
            campo da lista
        </para>
        <para>A semântica da sintaxe de extração e inserção deve ser dada por uma
            função de (sobrecarga) <link linkend="overloading">overloading</link>.
        </para>
        <para>A função de overloading para sintaxe de extração
            <literal>b=a(i1,...,in)</literal> tem a seguinte seqüência de chamamento:
            <literal>b=%&lt;tipo_de_a&gt;_e_(i1,...,in,a)</literal>
        </para>
        <para>
            e a sintaxe <literal>[x1,..,xm]=a(i1,...,in)</literal> tem a
            seguinte seqüência de chamamento:
            <literal>[x1,..,xm]=%&lt;type_de_a&gt;_e_(i1,...,in,a)</literal>
        </para>
        <para/>
        <para>A função de overloading associada à sintaxe de inserção
            <literal>a(i1,...,in)=b</literal> tem a seguinte seqüência de chamamento:
            <literal>a=%&lt;type_de_b&gt;_i_&lt;type_de_a&gt;(i1,...,in,b,a)</literal>.
        </para>
        <para/>
        <para>Os campos de um mlist devem, então, ser designados por seus nomes.
            Eles também podem ser manipulados usando-se as funções
            <literal>getfield</literal> e <literal>setfield</literal>.
        </para>
    </refsection>
    <refsection>
        <title>Exemplos</title>
        <programlisting role="example"><![CDATA[ 
M=mlist(['V','name','value'],['a','b';'c' 'd'],[1 2; 3 4]);
//Definindo exibição
function %V_p(M),disp(M.name+':'+string(M.value)),endfunction

//Definindo operação de extração
function r=%V_e(varargin)
  M=varargin($)
  r=mlist(['V','name','value'],M.name(varargin(1:$-1)),M.value(varargin(1:$-1)))
endfunction
M(2,:) // a segunda entrada do vetor M
M.value

//Definindo operações de inserção
function M=%V_i_V(varargin)
  M=varargin($)
  N=varargin($-1)
  M.value(varargin(1:$-2))=N.value
  M.name(varargin(1:$-2))=N.name
endfunction
M(1,1)=M(2,2)

function M=%s_i_V(varargin) //inserção de uma matriz regular em uma matriz V
  M=varargin($)
  N=varargin($-1)
  M.value(varargin(1:$-2))=N
  M.name(varargin(1:$-2))=emptystr(N)
endfunction
M(1,1)=44

//caso de tlists
M=tlist(['V','name','value'],['a','b';'c' 'd'],[1 2; 3 4]);
M(2)
M(2)='a'+string([1 2;3 4])

M('name')
 ]]></programlisting>
    </refsection>
    <refsection role="see also">
        <title>Ver Também</title>
        <simplelist type="inline">
            <member>
                <link linkend="tlist">tlist</link>
            </member>
            <member>
                <link linkend="list">list</link>
            </member>
            <member>
                <link linkend="overloading">overloading</link>
            </member>
            <member>
                <link linkend="getfield">getfield</link>
            </member>
            <member>
                <link linkend="setfield">setfield</link>
            </member>
        </simplelist>
    </refsection>
</refentry>
