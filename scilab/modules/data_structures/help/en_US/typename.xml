<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:lang="en" xml:id="typename">
    <refnamediv>
        <refname>typename</refname>
        <refpurpose>associates a name to variable type</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Calling Sequence</title>
        <synopsis>[types [ [,names]]=typename()
            typename(name, type)
        </synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>Arguments</title>
        <variablelist>
            <varlistentry>
                <term>types</term>
                <listitem>
                    <para>an integer column vector: the types codes of each defined data types.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>names</term>
                <listitem>
                    <para>a column vector of strings: the names associated to type codes.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>type</term>
                <listitem>
                    <para>an integer: the type code of new data type.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>name</term>
                <listitem>
                    <para>a string: the name associated to the type code.</para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Description</title>
        <para>
            The function and operator overloading make use of a formal name
            associated to data types to form the name of the overloading function
            (see <link linkend="overloading">overloading</link>). The <function>typename</function> can be used to handle this
            formal names for hard coded data types (the <literal>tlist</literal> or <literal>mlist</literal>
            coded data types formal names are defined in an other way, see <link linkend="overloading">overloading</link>).
        </para>
        <para>
            Called without right hand side argument, <function>typename</function> returns
            information on defined data types.
        </para>
        <para>
            Called with right hand side argument, <function>typename</function> associates a name
            to a data type code.
        </para>
        <para>
            <code>typename('',type)</code> suppress the data type given by its code
            <varname>type</varname> out of the table of known data types.
        </para>
        <para>Number max. of defined types is 50.</para>
    </refsection>
    <refsection>
        <title>Examples</title>
        <programlisting role="example"><![CDATA[
[typs,nams]=typename();
disp("First type (double) : " + string(typs(1)) + " / " + nams(1));
typename("mytype",1024);
[typs,nams]=typename();
disp(typs($))
disp(nams($)) // returns mytype
]]></programlisting>
    </refsection>
    
    <refsection role="see also">
        <title>See Also</title>
        <simplelist type="inline">
            <member>
                <link linkend="type">type</link>
            </member>
            <member>
                <link linkend="typeof">typeof</link>
            </member>
            <member>
                <link linkend="overloading">overloading</link>
            </member>
            <member>
                <link linkend="tlist">tlist</link>
            </member>
            <member>
                <link linkend="mlist">mlist</link>
            </member>
        </simplelist>
    </refsection>
</refentry>
