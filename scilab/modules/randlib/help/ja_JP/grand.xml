<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2008 - INRIA
 * 
 * This file must be used under the terms of the CeCILL.
 * This source file is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at    
 * http://www.cecill.info/licences/Licence_CeCILL_V2.1-en.txt
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:lang="ja" xml:id="grand">
    <refnamediv>
        <refname>grand</refname>
        <refpurpose>乱数生成器</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>呼び出し手順</title>
        <synopsis>Y=grand(m, n, dist_type [,p1,...,pk])
            Y=grand(X, dist_type [,p1,...,pk])
            Y=grand(n, dist_type [,p1,...,pk])
            S=grand(action [,q1,....,ql])
        </synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>パラメータ</title>
        <variablelist>
            <varlistentry>
                <term>m, n</term>
                <listitem>
                    <para>
                        整数, 出力行列 <literal>Y</literal>の大きさ
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>X</term>
                <listitem>
                    <para>
                        次元(つまり<literal>mx n</literal>) のみ使用される行列 
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>dist_type</term>
                <listitem>
                    <para>生成する変量の分布の種類('bin', 'nor', 'poi', ...)を指定する文字列</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>p1, ..., pk</term>
                <listitem>
                    <para>
                        分布<literal>dist_type</literal>を完全に定義するために必要なパラメータ (実数または整数)
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Y</term>
                <listitem>
                    <para>
                        <literal>mx n</literal> ランダム出力行列
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>action</term>
                <listitem>
                    <para>
                        基底生成器に指定する処理を記述する文字列
                        (カレントの基底生成器を変更するには'setgen',
                        カレントの基底生成器の名前を取得するには 'getgen',
                        カレントの基底生成器の状態(シード)を取得するには
                        'getsd',など...)
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>q1, ..., ql</term>
                <listitem>
                    <para>処理を定義するためにひるようなパラメータ (通常は1つの文字列)</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>S</term>
                <listitem>
                    <para>処理の出力 (通常は文字列または実数の列ベクトル)</para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>説明</title>
        <para>警告: シードを指定しない場合,系列はあるセッションと別のセッションで
            同一のままとなります.
        </para>
        <para>rand関数を使用する各スクリプトの初めに,
            以下を実行する必要があります:
        </para>
        <programlisting role="example"><![CDATA[rand('seed',getdate('s'))]]></programlisting>
        <para>
            この関数は種々の分布により乱数を生成する際に使用することができます.
            この場合,<literal>m x n</literal>行列を得るには
            最初の形式が異なる3種類の呼び出し手順のどれかを適用する必要があります.
            <literal>X</literal> が <literal>m x n</literal>行列の
            場合,最初の2つの形式は等価で,3番目の形式は
            '多値'分布(例えば,多項分布,多変量分布,ガウス分布, etc...)に対応します.
            この際,サンプルは列ベクトル(つまり,次元<literal>m</literal>)で,
            そのような<literal>n</literal>個の乱数ベクトル
            (つまり<literal> m x n</literal> 行列)が得られます.
        </para>
        <para>
            最後の形式は基底生成器を変更(v2.7以降基底生成器を選択できます)
            したり,内部の状態(シード)を変更または取得したり,...
            といった基底生成器への
            種々の操作を行う際に使用されます.
            これらの基底生成器はランダムな整数を
            大きな整数区間(lgi)上の一様分布に従い,
            他の全ての分布はそこから取得されます.
            (一般にはあるスキーム lgi -&gt; U([0,1)) -&gt; 指定する分布)
        </para>
    </refsection>
    <refsection>
        <title>指定された分布から乱数を取得する</title>
        <variablelist>
            <varlistentry>
                <term>ベータ分布</term>
                <listitem>
                    <para>
                        <literal>Y=grand(m,n,'bet',A,B)</literal> は
                        パラメータ<literal>A</literal> およびd <literal>B</literal>
                        を指定したベータ分布からランダム変量を生成します.
                        ベータ分布の密度は <latex><![CDATA[(0 < x < 1)]]></latex> です:
                    </para>
                    <latex>
                        \dfrac{x^{A-1}(1-x)^{B-1}}{\beta(A,B)}
                    </latex>
                    <para>
                        <literal>A</literal> および <literal>B</literal> は
                        実数で <latex><![CDATA[>10^{-37}]]></latex>とします.  関係する関数は
                        : <link linkend="cdfbet">cdfbet</link>です.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>二項分布</term>
                <listitem>
                    <para>
                        <literal>Y=grand(m,n,'bin',N,p)</literal> は
                        パラメータ<literal>N</literal> (正の整数) および <literal>p</literal>
                        ([0,1]の範囲の実数)を指定した二項分布に基づきランダム変量を生成します.
                        この分布では,成功する確率が<literal>p</literal>の
                        <literal>N</literal>回の独立なベルヌーイ試行における
                        成功回数となります.
                        関係する関数: <link linkend="binomial">binomial</link>,
                        <link linkend="cdfbin">cdfbin</link>.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>負の二項分布</term>
                <listitem>
                    <para>
                        <literal>Y=grand(m,n,'nbn',N,p)</literal> は
                        パラメータ<literal>N</literal> (正の整数) および<literal>p</literal> (
                        (0,1)の実数)を指定した負の二項分布に基づきランダム変量を生成します
                        : 
                        成功確率 <literal>p</literal>の独立なベルヌーイ試行において
                        <literal>N</literal>回成功する前に発生する失敗の回数.
                        関係する関数 : <link linkend="cdfnbn">cdfnbn</link>.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>カイ二乗分布</term>
                <listitem>
                    <para>
                        <literal>Y=grand(m,n,'chi', Df)</literal> は,自由度
                        <literal>Df</literal>(実数 &gt; 0.0)を指定した
                        カイ二乗分布に基づくランダム変量を生成します.
                        関係する関数: <link linkend="cdfchi">cdfchi</link>.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>非心カイ二乗分布</term>
                <listitem>
                    <para>
                        <literal>Y=grand(m,n,'nch',Df,Xnon)</literal> は,
                        自由度<literal>Df</literal>(実数 &gt; 0.0)および
                        非心度パラメータ<literal>Xnonc</literal> (実数 &gt;= 0.0)
                        を指定した非心カイ二乗分布に基づくランダム変量を生成します.
                        関係する関数 : <link linkend="cdfchn">cdfchn</link>.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>指数分布</term>
                <listitem>
                    <para>
                        <literal>Y=grand(m,n,'exp',Av)</literal> は
                        平均<literal>Av</literal>(実数 &gt;= 0.0)
                        を指定した指数分布に基づくランダム変量を生成します.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>F分布</term>
                <listitem>
                    <para>
                        <literal>Y=grand(m,n,'f',Dfn,Dfd)</literal> は,
                        分子の自由度<literal>Dfn</literal> (実数 &gt; 0.0) および
                        分母の自由度<literal>Dfd</literal> (実数
                        &gt; 0.0) を指定した
                        F(分散比)分布に基づくランダム変量を生成します.
                        関係する関数 : <link linkend="cdff">cdff</link>.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>非心F分布</term>
                <listitem>
                    <para>
                        <literal>Y=grand(m,n,'nf',Dfn,Dfd,Xnon)</literal>は,
                        分子の自由度<literal>Dfn</literal> (実数
                        &gt;= 1), および
                        分母の自由度<literal>Dfd</literal> (実数 &gt; 0) , 
                        および非心パラメータ 
                        <literal>Xnonc</literal> (実数 &gt;= 0)を指定して
                        非心F分布に基づくランダム変量を生成します.
                        関係する関数 : <link linkend="cdffnc">cdffnc</link>.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>ガンマ分布</term>
                <listitem>
                    <para>
                        <literal>Y=grand(m,n,'gam',shape,rate)</literal>
                        は,パラメータ<literal>shape</literal> (実数 &gt; 0)および
                        <literal>rate</literal> (実数 &gt; 0)を指定して
                        ガンマ分布に基づくランダム変量を生成します.
                        ガンマの密度は以下となります :
                    </para>
                    <latex>
                        \dfrac{ \textrm{rate}^{\textrm{shape}} x^{\textrm{shape}-1} e^{-\textrm{rate} x}}{\gamma(\textrm{shape}) }
                    </latex>
                    <para>
                        関係する関数 : <link linkend="gamma">gamma</link>,
                        <link linkend="cdfgam">cdfgam</link>.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>ガウスラプラス(正規)分布</term>
                <listitem>
                    <para>
                        <literal>Y=grand(m,n,'nor',Av,Sd)</literal> は
                        平均<literal>Av</literal> (実数) および標準偏差
                        <literal>Sd</literal> (実数 &gt;= 0)の
                        正規分布に基づくランダム変量を生成します.
                        関係する関数
                        : <link linkend="cdfnor">cdfnor</link>.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>多変量ガウス(多変量正規)分布</term>
                <listitem>
                    <para>
                        <literal>Y=grand(n,'mn',Mean,Cov)</literal>は,
                        <literal>n</literal>次の多変量正規ランダム変量を
                        生成します;
                        <literal>Mean</literal> は <literal>m x
                            1
                        </literal>
                        行列, <literal>Cov</literal>は <literal>m x
                            m
                        </literal>
                        対称正定行列です
                        (<literal>Y</literal> はこの場合 <literal>m x n</literal>
                        行列となります).
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>幾何分布</term>
                <listitem>
                    <para>
                        <literal>Y=grand(m,n,'geom', p)</literal> は,
                        パラメータ<literal>p</literal>を指定した
                        幾何分布に基づくランダム変量を生成します:
                        (成功率<literal>p</literal>の)ベルヌーイ試行に1回成功するまでの回数.
                        <literal>p</literal> は
                        <latex>[p_{min},1]</latex> (<latex> p_{min} = 1{,}3\times 10^{-307} </latex>)の範囲とします.
                    </para>
                    <para>
                        <literal>Y</literal> は整数の値を有する正の実数となり,
                        これらは "1回の成功を得る時の試行回数"です.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>マルコフ分布</term>
                <listitem>
                    <para>
                        <literal>Y=grand(n,'markov',P,x0)</literal> は,
                        推移行列 <literal>P</literal>で記述されたマルコフ連鎖の
                        <literal>n</literal>個の一連の状態量を生成します.
                        状態量の初期値は<literal>x0</literal>で指定されます.
                        <literal>x0</literal>が大きさ<literal>m=size(x0,'*')</literal>の
                        行列の場合,<literal>Y</literal>は大きさ<literal>m x n</literal>
                        の行列となります.
                        <literal>Y(i,:)</literal> は初期状態量<literal>x0(i)</literal>
                        から得られるサンプルパスです.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>多項分布</term>
                <listitem>
                    <para>
                        <literal>Y=grand(n,'mul',nb,P)</literal> は,
                        多項分布に基づき<literal>n</literal>個の観測量を生成します:
                        <literal>m</literal>個のカテゴリの中に
                        <literal>nb</literal>個の分類のイベント
                        (<literal>m</literal>個の"boxes"の中に<literal>nb</literal>個の"balls").
                        <literal>P(i)</literal>はあるイベントがカテゴリ i に分類される確率です.
                        確率ベクトル<literal>P</literal>の大きさは<literal>m-1</literal>です
                        (カテゴリ<literal>m</literal>の確率は<literal>1-sum(P)</literal>となります).
                        <literal>Y</literal> の大きさは <literal>m x n</literal>で,
                        各列 <literal>Y(:,j)</literal> は多項分布の観測量,
                        <literal>Y(i,j)</literal>は(
                        <literal>j</literal>番目の観測値に関する)カテゴリ<literal>i</literal>に
                        分類されるイベントの数です(<literal>sum(Y(:,j))
                            = nb
                        </literal>
                        ).
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>ポワソン分布</term>
                <listitem>
                    <para>
                        <literal>Y=grand(m,n,'poi',mu)</literal>は,
                        平均 <literal>mu (実数 &gt;= 0.0)</literal>のポワソン分布に基づき
                        乱数を生成します. 関係する機能
                        : <link linkend="cdfpoi">cdfpoi</link>.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>ランダム置換</term>
                <listitem>
                    <para>
                        <literal>Y=grand(n,'prm',vect)</literal> は,
                        列ベクトル (<literal>m x 1</literal>)
                        <literal>vect</literal>の<literal>n</literal>個の
                        ランダム置換を生成します.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>一様分布 (def)</term>
                <listitem>
                    <para>
                        <literal>Y=grand(m,n,'def')</literal> は,
                        は,<literal>[0,1)</literal> (1は含まれません) の範囲の
                        一様分布に基づきランダム変量を生成します.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>一様分布 (unf)</term>
                <listitem>
                    <para>
                        <literal>Y=grand(m,n,'unf',Low,High)</literal>
                        は <literal>[Low, High)</literal> の範囲の一様分布に基づく
                        の実数のランダム変量を生成します.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>一様分布 (uin)</term>
                <listitem>
                    <para>
                        <literal>Y=grand(m,n,'uin',Low,High)</literal>は,
                        <literal>Low</literal> および <literal>High</literal> (含む)
                        の範囲の一様分布に基づく
                        の整数のランダム変量を生成します.
                        <literal>High</literal> および
                        <literal>Low</literal> は
                        <latex><![CDATA[(\textrm{High}-\textrm{Low}+1) < 2\,147\,483\,561]]></latex>の
                        範囲の整数とする必要があります.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>一様分布 (lgi)</term>
                <listitem>
                    <para>
                        <literal>Y=grand(m,n,'lgi')</literal> は
                        カレントの生成器の基底出力として
                        以下の範囲の一様分布に基づくランダムな整数を返します:
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                mt, kiss および fsultra の場合は <literal>[0, 2^32 - 1]</literal>
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                clcg2 の場合は <literal>[0, 2147483561]</literal>
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                clcg4の場合は <literal>[0, 2^31 - 2]</literal>
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                urandの場合は <literal>[0, 2^31 - 1]</literal>.
                            </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>カレントの生成器およびその状態を設定/取得</title>
        <para> Scilab-2.7以降,異なる('lgi'分布に基づくランダムな整数,もしくは
            その整数に基づき得られたもの)基底生成器を選択することが
            可能となっています:
        </para>
        <variablelist>
            <varlistentry>
                <term>mt</term>
                <listitem>
                    <para>
                        周期<literal>2^19937</literal>の
                        M. Matsumoto および T. NishimuraのMersenne-Twister, 
                        状態は
                        <literal>624</literal>個の整数の配列(およびこの配列のインデックス)により
                        指定されます; これがデフォルトの生成器です.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>kiss</term>
                <listitem>
                    <para>
                        周期<literal>2^123</literal>のG. MarsagliaのKeep It Simple Stupid,
                        状態は<literal>4</literal>個の整数により指定されます.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>clcg2</term>
                <listitem>
                    <para>
                        周期 <literal>2^61</literal>のP. L'Ecuyerの2線形共役合同生成器,
                        状態は<literal>2</literal>個の整数により指定されます;
                        grandにより以前に(若干修正された)使用されていた生成器です.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>clcg4</term>
                <listitem>
                    <para>
                        周期 <literal>2^121</literal>のP. L'Ecuyerの4線形合同生成器,
                        状態は<literal>4</literal>個の整数により指定されます;
                        この生成器は<literal>101</literal>個の(重ならない)異なる生成器に
                        分割することができ,異なるタスクの場合に有用です
                        ('clcg4に固有の動作'および 'clcg4のテスト例'を参照).
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>urand</term>
                <listitem>
                    <para>
                        scilab 関数 <link linkend="rand">rand</link>で使用される生成器,
                        <literal>1</literal>個の整数で状態が定義され,
                        周期は<literal>2^31</literal>
                        (d.e. knuth (1969),  vol  2. State に示された理論と提案に基づく).
                        これはこの一覧の中では高速ですが,
                        やや古臭くなっています (重要なシミュレーションでは使用しないでください).
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>fsultra</term>
                <listitem>
                    <para>
                        Arif Zaman および George Marsagliaの合同生成器に基づく
                        Subtract-with-Borrow 生成器,
                        周期は <literal>10^356</literal>以上,
                        状態は37個の整数の配列(およびこの配列へのインデックス,
                        フラグ (0または1)および他の整数)により指定されます.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
        <para>全ての生成器に共通なアクションの動作を以下に示します:
        </para>
        <variablelist>
            <varlistentry>
                <term>action= 'getgen'</term>
                <listitem>
                    <para>
                        <literal>S=grand('getgen')</literal> はカレントの基底生成器を返します
                        ( <literal>S</literal> は以下の文字列のどれかです:
                        'mt', 'kiss', 'clcg2', 'clcg4', 'urand', 'fsultra'.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>action= 'setgen'</term>
                <listitem>
                    <para>
                        <literal>grand('setgen',gen)</literal>は
                        カレントの基底生成器を<literal>gen</literal>に設定します.
                        この文字列には 'mt', 'kiss', 'clcg2', 'clcg4', 'urand', 'fsultra' 
                        のどれかを指定します(
                        このコールは新しいカレントの生成器を返すことに注意してください).
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>action= 'getsd'</term>
                <listitem>
                    <para>
                        <literal>S=grand('getsd')</literal> はカレントの基底生成器の
                        カレントの状態 (カレントのシード)を返します ; 
                        <literal>S</literal> には, mt の場合は<literal>625</literal>次
                        (先頭は<literal>[1,624]</literal>の範囲のインデックスです),
                        kiss の場合は <literal>4</literal> 次, clcg2の場合は <literal>2</literal>次,
                        fsultraの場合は <literal>40</literal> , clcg4 の場合は <literal>4</literal>次 
                        (最後の1つについてはカレントの仮想生成器のカレントの状態が取得されます),
                        および urand の場合は <literal>1</literal>次
                        の(整数)列ベクトルが出力されます.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>action= 'setsd'</term>
                <listitem>
                    <para>
                        <literal>grand('setsd',S), grand('setsd',s1[,s2,s3,s4])</literal> は
                        カレントの基底生成器の状態(新しいシード)を設定します:
                    </para>
                    <variablelist>
                        <varlistentry>
                            <term>mtの場合</term>
                            <listitem>
                                <para>
                                    <literal>S</literal>は<literal>625</literal>次の整数ベクトル
                                    (最初の要素はインデックスで<literal>[1,624]</literal>の範囲とする
                                    必要があります, 続く<literal>624</literal>個の要素は
                                    <literal>[0,2^32[</literal>)の範囲とします)
                                    (しかし,全てをゼロにするすることはできません)；
                                    整数<literal>s1</literal>を1つだけ指定することで,より簡単に初期化を
                                    行うことができます.
                                    (<literal>s1</literal> は <literal>[0,2^32[</literal>の範囲とします) ;
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>kissの場合</term>
                            <listitem>
                                <para>
                                    <literal>[0,2^32[</literal>の範囲の
                                    <literal>4</literal> 個の整数 <literal>s1,s2, s3,s4</literal> を指定します ;
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>clcg2の場合</term>
                            <listitem>
                                <para>
                                    <literal>2</literal> 個の整数 <literal>s1</literal> (範囲:<literal>[1,2147483562]</literal>) および <literal>s2</literal> 
                                    (範囲: <literal>[1,2147483398]</literal>) を指定します ;
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>clcg4の場合</term>
                            <listitem>
                                <para>
                                    <literal>4</literal> 個の整数 <literal>s1</literal> (範囲: <literal>[1,2147483646]</literal>), <literal>s2</literal> 
                                    (範囲: <literal>[1,2147483542]</literal>), <literal>s3</literal> (範囲:  <literal>[1,2147483422]</literal>), 
                                    <literal>s4</literal> (範囲:  <literal>[1,2147483322]</literal> ) を指定します ;
                                    <literal>注意</literal> : clcg4の場合,
                                    カレントの仮想生成器のシードを設定しますが,
                                    この生成器と他の仮想生成器との間の同期が失われる可能性があります.
                                    すなわち,生成されるデータ列は他の生成器により生成されるデータ列と
                                    オーバーラップしていないということは保証されません)　=&gt;
                                    代わりに 'setall' オプションを使用してください.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>urandの場合</term>
                            <listitem>
                                <para>
                                    <literal>[0,2^31</literal>[の範囲の<literal>1</literal> 
                                    個の整数 <literal>s1</literal> を指定します.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>fsultraの場合</term>
                            <listitem>
                                <para>
                                    <literal>S</literal> は<literal>40</literal>次の整数ベクトルで,
                                    (最初の要素はインデックスで<literal>[0,37]</literal>の範囲とします,
                                    2番目の要素はフラグ (0または1),3番目は[1,2^32[ の範囲の整数,
                                    367個のその他の整数(範囲: [0,2^32[)));
                                    <literal>[0,2^32[</literal>の範囲の
                                    整数を2つだけ (<literal>s1</literal> および <literal>s2</literal>)
                                    指定することでより簡単に(そして推奨される)初期化を行うことができます.
                                </para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>action= 'phr2sd'</term>
                <listitem>
                    <para>
                        <literal>Sd=grand('phr2sd', phrase)</literal> は,
                        基底生成器(clcg2に適しています)の状態を変更するシードとして使用可能な
                        <literal>1 x 2</literal> ベクトル <literal>Sd</literal>を生成する
                        <literal>phrase</literal> (文字列)を指定します.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>clcg4の固有のオプション</title>
        <para>
            clcg4 生成器は他の生成器と同時に使用することができますが,
            系列がオーバーラップしない 
            複数(<literal>101</literal>個)の仮想生成器に分割できるという利点があります.
            (古典的な生成器を使用する場合,異なる系列を得るために
            初期状態量(シード)を別のものに変更できますが,完全に異なる系列となることは
            保証されません)
            各仮想生成器は<literal>2^72</literal> 個の値の系列に対応します.
            これらはさらに長さ<literal>W=2^41</literal>の<literal>V=2^31</literal>個の
            セグメント(またはブロック)に分割されます.
            指定した仮想生成器について,系列の先頭またはカレントのセグメントの先頭に戻るか
            次のセグメントに直接移動するかを選択できます.
            'setall'オプションにより生成器 <literal>0</literal> の初期状態(シード)を
            変更することも可能です.
            これにより,同期をとるために他の仮想生成器の初期状態量を変更することも可能です.
            (すなわち, gen <literal>0</literal> の新しい初期状態の関数として,
            gen <literal>1..100</literal> の初期状態量は<literal>101</literal>個の
            重複しない系列が得られるように再計算されます.)
        </para>
        <variablelist>
            <varlistentry>
                <term>action= 'setcgn'</term>
                <listitem>
                    <para>
                        <literal>grand('setcgn',G)</literal> は clcg4 のカレントの仮想生成器を設定します
                        (clcg4 が設定された時, この値は使用される仮想 (clcg4)生成器の数<literal>G</literal>となります);
                        仮想 clcg4 生成器は<literal>0,1,..,100</literal>と番号付けられます
                        (そして, <literal>G</literal>は<literal>[0,100]</literal>の範囲の整数となります);
                        デフォルトで,カレントの仮想生成器は<literal>0</literal>です.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>action= 'getcgn'</term>
                <listitem>
                    <para>
                        <literal>S=grand('getcgn')</literal> はカレントの仮想 clcg4 生成器の数を返します.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>action= 'initgn'</term>
                <listitem>
                    <para>
                        <literal>grand('initgn',I)</literal> はカレントの仮想生成器の状態を再度初期化します
                    </para>
                    <variablelist>
                        <varlistentry>
                            <term>I = -1</term>
                            <listitem>
                                <para>初期シードの状態を設定します</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>I = 0</term>
                            <listitem>
                                <para>直近の(前の)シードを設定します (つまり,カレントのセグメントの先頭)</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>I = 1</term>
                            <listitem>
                                <para>
                                    直近のシード(すなわち,次のセグメントの先頭)から新しいシード<literal>W</literal>に
                                    状態量を設定し,カレントのセグメントのパラメータをリセットします.
                                </para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>action= 'setall'</term>
                <listitem>
                    <para>
                        <literal>grand('setall',s1,s2,s3,s4)</literal> は
                        生成器<literal>0</literal>の初期状態を<literal>s1,s2,s3,s4</literal>に設定します.
                        他の生成器の初期シードは同期がとれるように設定されます.
                        <literal>s1, s2, s3, s4</literal>に関する制約については,'setsd'アクションを参照ください.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>action= 'advnst'</term>
                <listitem>
                    <para>
                        <literal>grand('advnst',K)</literal> はカレントの生成器の状態を
                        <literal>2^K</literal>だけ前に進め,初期シードをその値でリセットします.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>clcg4のテスト例</title>
        <para>
            clcg4 の分割機能の適用例を以下に示します.
            2つの統計上のテクニックを異なるデータの大きさで比較します.
            最初の手法では,ブートストラップ手法を使用し,しらみつぶし法のみを適用する
            2番目の手法よりも少ないデータで同等の精度が得られると考えられます.
            最初の方法の場合,25および50の間に一様分布する大きさのデータ集合が生成されます.
            その後,指定した大きさのデータ集合が生成され,解析されます.
            2番目の方法は,
            100および200の間の大きさのデータ集合を選択し,データを生成し,解析します.
            この過程を1000回繰り返します.
            分散を減少させるために,2つの手法で使用される乱数を1000回の比較の各回で
            同じとすることが望まれます.
            しかし,2番目の手法は1番目の手法よりも多くの乱数を使用し,
            このパッケージなしでは同期は困難となります.
            clcg4 ではこれは容易です.
            生成器 0 を使用し最初の手法のサンプルの大きさを取得し,
            生成器 1 をデータを得る際に使用します.
            次にカレントのブロックの先頭に状態をリセットし,
            2番目の手法にも同様のことをします.
            これにより,2番目の手法で使用される初期データが1番目の手法で使用されることが
            保証されます.
            両方の処理が完了した時,両方の生成器のブロックを前に進めます.
        </para>
    </refsection>
    <refsection role="see also">
        <title>参照</title>
        <simplelist type="inline">
            <member>
                <link linkend="rand">rand</link>
            </member>
        </simplelist>
    </refsection>
</refentry>
