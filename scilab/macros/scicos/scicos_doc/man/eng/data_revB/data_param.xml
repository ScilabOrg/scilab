<!--  Scicos

   Copyright (C) INRIA - METALAU Project <scicos@inria.fr>

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

  See the file ../license.txt
-->

<DATA flag="param">

<FILE name='ABCD_Blocks' type='XML'>
  <PARAM>

  </PARAM>
</FILE>

<FILE name='ABSBLK_f' type='XML'>
<PARAM>
<PARAM_INDENT>

</PARAM_INDENT>
</PARAM>
</FILE>

<FILE name='ABS_VALUE' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %use zero\_crossing (1: yes) (0:no)   1
  \item {\bf use zero\_crossing} \\
        Select to enable zero crossing detection. \\
        Properties : Type 'vec' of size 1.
\end{itemize}
</FILE>

<FILE name='AFFICH_f' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %Font number   1
  \item {\bf Font number}\\
        integer, the selected font number (see xset). \\
	Properties : Type 'vec' of size 1

  %Font size   1
  \item {\bf Font size}\\
        integer, the selected font size (set xset) \\
	Properties : Type 'vec' of size 1

  %Color   1
  \item {\bf Color}\\
        integer, the selected color for the text (see xset) \\
	Properties : Type 'vec' of size 1

  %Total number of digits   9
  \item {\bf Total number of digits}\\
        an integer greater than 3, the maximum
	number of digits used to represent the number (sign, integer part
	and rational part)  \\
	Properties : Type 'vec' of size 1

  %Number of rational part digits   2
  \item {\bf Number of rational part digits}\\
        n integer greater than or
	equal 0, the number of digits used to represent the rational part \\
	Properties : Type 'vec' of size 1

  %Block inherits (1) or not (0)   0
  \item {\bf Block inherits }\\
        Options to choose event inheritance from
	regular input or from explicit event input (0).  \\
	Properties : Type 'vec' of size 1
\end{itemize}
</FILE>

<FILE name='AFFICH_m' type='LATEX'>
%automatically generated, please edit
\begin{itemize}
  \item {\bf Input Size}\\
        Explicitly define the size of the input port.\\
	Properties : Type 'mat' of size [1,2].

  %Font number   1
  \item {\bf Font number}\\
        integer, the selected font number (see xset). \\
	Properties : Type 'vec' of size 1

  %Font size   1
  \item {\bf Font size}\\
        integer, the selected font size (set xset) \\
	Properties : Type 'vec' of size 1

  %Color   1
  \item {\bf Color}\\
        integer, the selected color for the text (see xset) \\
	Properties : Type 'vec' of size 1

  %Total number of digits   9
  \item {\bf Total number of digits}\\
        an integer greater than 3, the maximum
	number of digits used to represent the number (sign, integer part
	and rational part)  \\
	Properties : Type 'vec' of size 1

  %Number of rational part digits   2
  \item {\bf Number of rational part digits}\\
        n integer greater than or
	equal 0, the number of digits used to represent the rational part  \\
	Properties : Type 'vec' of size 1

  %Block inherits (1) or not (0)   0
  \item {\bf Block inherits }\\
        Options to choose event inheritance from
	regular input or from explicit event input (0).  \\
	Properties : Type 'vec' of size 1
\end{itemize}
</FILE>

<FILE name='ANDBLK' type='XML'>
<PARAM>
<PARAM_INDENT>

</PARAM_INDENT>
</PARAM>
</FILE>

<FILE name='ANDLOG_f' type='XML'>
<PARAM>
<PARAM_INDENT>

</PARAM_INDENT>
</PARAM>
</FILE>

<FILE name='AUTOMAT' type='LATEX'>
\begin{itemize}
    \item {\bf Number of (finite-state) Modes}\\
           Number of modes in the automation. \\
           Properties : Type 'vec' of size [1,1].

    \item {\bf Initial Mode}\\
          Initial active mode at the beginning of the simulation. \\
          Properties : Type 'vec' of size [1,1].

    \item {\bf Number of continuous-time states}
          Number of continuous-time states at modes. Note that the number of
          continuous-time states is the same in all modes. \\
          Properties : Type 'vec' of size [-1,1].

    \item {\bf Continuous-time states initial values}\\
          Initial value of continuous-time states at the beginning of the
          simulation.\\
          Properties : Type 'vec' of size [-1,1].

    \item {\bf Xproperties of continuous-time states in each Mode}\\
          In this field the state types in mode are given.  A state in an index 1
          DAE can be either differential state or algebraic state. {\it
          Xproperties} vector is coded in an M*N matrix, where M is the
          number of modes and N is the number of states. This matrices
          indicates whether a continuous-time state is algebraic or
          differential in each control mode. If in the $i^{th}$ mode, $j^{th}$ state
          is differential, the (i,j)-th element of the Xproperty matrix
          should set to "+1", otherwise it should set to "-1". Xproperty can
          be given as a 1*N vector if type of states remain the
          same in  all modes.\\
          Properties : Type 'mat' of size [-1,-1].

    \item {\bf Jump from Mode 1:[..;M\_final(Guard=In(1).i);..]}\\
          The {\it Jump} fields express the mode transition information. Suppose
          that all control modes are labeled from 1 to M. Then, in the field
          corresponding to control mode {\bf i}, destination modes of mode {\bf i}
          are defined in a vector. {\bf j-th} element of this vector gives the
          destination mode when {\bf j-th} jump function :
          \begin{eqnarray}
           {\rm Jump}_{ij}(\dot x,x,u)
          \end{eqnarray}
          becomes positive. For example, if in the field of the mode {\bf 2}, the
          user defines [1;3;4], it means that in mode {\bf 2}, there are three
          active jump functions. When, for example, the third jump function
          becomes positive, a mode transition to mode {\bf 4} will be activated.\\
          Properties : Type 'vec' of size [-1,1].
\end{itemize}
</FILE>

<FILE name='About_scicos' type='XML'>
  <PARAM>

  </PARAM>
</FILE>

<FILE name='BACKLASH' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %initial output   0
  \item {\bf initial output}\\
        The initial output value. \\
	Properties : Type 'vec' of size 1

  %gap   1
  \item {\bf gap}\\
         The width of the dead-band. \\
	 Properties : Type 'vec' of size 1

  %use zero-crossing (0:no, 1:yes)   1
  \item {\bf use zero-crossing }\\
         Select to enable use of zero crossing
	 detection to detect engagement with lower and upper
	 thresholds. \\
	 Properties : Type 'vec' of size 1

\end{itemize}
</FILE>

<FILE name='BIGSOM_f' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Inputs ports signs/gain</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Set sign and a gain for each inputs.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='BITCLEAR' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Datatype(3=int32 4=int16 5=int8 ...)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    It indicates the type of the input/output data.
	    It support all the integer datatype, number must
	    be between 3 and 8.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>index of bit (0 is least significant)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    It indicate the index of the bit to clear.
	    When the type is int32 or uint32 the number must be positive
	    and less than 32. When the type is int16 or uint16 the number
	    must be positive and less than 16. When the type is int8 or
	    uint8 the number must be positive and less than 8.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='BITSET' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Datatype(3=int32 4=int16 5=int8 ...)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    It indicates the type of the input/output data.
	    It support all the integer datatype, number must
	    be between 3 and 8.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>index of bit (0 is leat significant)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    It indicate the index of the bit to clear. When the type
	    is int32 or uint32 the number must be positive and less
	    than 32. When the type is int16 or uint16 the number must
	    be positive and less than 16. When the type is int8 or uint8
	    the number must be positive and less than 8.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='BOUNCE' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Mass</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The parameter description 1.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Radius</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The parameter description 2.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>[xmin,xmax,ymin,ymax]</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The parameter description 3.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>xpos</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The parameter description 4.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>xdpos</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The parameter description 5.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>ypos</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The parameter description 6.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>ydpos</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The parameter description 7.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>g (gravity)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The parameter description 8.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>C (aerodynamic coeff</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The parameter description 9.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='BOUNCEXY' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>colors</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The parameter description 1.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>radii</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The parameter description 2.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>window number (-1 for automatic)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The parameter description 3.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>animation mode (0,1)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The parameter description 4.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Xmin</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The parameter description 5.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Xmax</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The parameter description 6.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Ymin</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The parameter description 7.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Ymax</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The parameter description 8.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='BPLATFORM' type='XML'>
  <PARAM>

  </PARAM>
</FILE>

<FILE name='Bache' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Pression dans le ciel de la bache : Patm (Pa)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Atmospheric pressure inside the tank.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Section de la bache : A (m2)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Surface area of the tank.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Altitude du piquage d entr�e 1: ze1 (m)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Altitude of the first input port
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Altitude du piquage d entr�e 2: ze2 (m)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Altitude of the second input port
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Altitude du piquage de sortie 1: zs1 (m)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Altitude of the first output port.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Altitude du piquage de sortie 2: zs2 (m)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Altitude of the second output port.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Altitude initiale du fluide : z0 (m)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Initial fluid level in the tank.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Temp�rature initiale du fluide : T0 (K)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Temperature of fluid in the tank
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Si &gt;0, masse volumique impos�e du fluide : p_rho (kg/m3)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Density of fluid
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='CANIMXY' type='LATEX'>
\begin{itemize}

  \item {\bf Number of Curves}\\
        Set the number of curves.\\
	Properties : Type 'vec' of size 1

  %color ($<$0) or mark ($>$0)   -4
  \item {\bf color }\\
        an integer. It is the color number ($>=0$) or marker
	type ($<0$) used to draw the evolution of the input port signal.
	See {\bf  xset()}  for color (dash type) definitions.   \\
	Properties : Type 'vec' of size 1

  %line or mark size   1
  \item {\bf line or mark size}\\
        an integer. \\
	Properties : Type 'vec' of size 1

  %Output window number   1
  \item {\bf Output window number}\\
        The number of graphic window used for
	the display. It is often good to use high values to avoid conflict
	with palettes and Super Block windows. If you have more than one
	scope, make sure they don't have the same window numbers (unless
	superposition of the curves is desired).  \\
	Properties : Type 'vec' of size 1

  %Output window position   []
  \item {\bf Output window position}\\
        a 2 vector specifying the coordinates
        of the upper left corner of the graphic window. Answer [] for
        default window position.  \\
	Properties : Type 'vec' of size -1

  %Output window sizes   []
  \item {\bf Output window sizes}\\
       a 2 vector specifying the width and height
       of the graphic window. Answer [] for default window dimensions.  \\
       Properties : Type 'vec' of size -1

  %Xmin   -15
  \item {\bf Xmin}\\
        Minimum values of the first input; used to set up the
	X-axis of the plot in the graphics window.  \\
	Properties : Type 'vec' of size 1

  %Xmax   15
  \item {\bf Xmax}\\
        Maximum values of the first input; used to set up the
	X-axis of the plot in the graphics window.  \\
	Properties : Type 'vec' of size 1

  %Ymin   -15
  \item {\bf Ymin}\\
        Minimum and maximum values of the second input; used to
	set up the Y-axis of the plot in the graphics window.  \\
	Properties : Type 'vec' of size 1

  %Ymax   15
  \item {\bf Ymax}\\
        Maximum values of the second input; used to set up the
	Y-axis of the plot in the graphics window.  \\
	Properties : Type 'vec' of size 1

  %Buffer size   2
  \item {\bf Buffer size}\\
        An integer value. In order to minimize the number
         of graphics outputs, data may buffered.   \\
	Properties : Type 'vec' of size 1
\end{itemize}
</FILE>

<FILE name='CANIMXY3D' type='LATEX'>
\begin{itemize}

  \item {\bf Number of Curves}\\
        Set the number of curves.\\
	Properties : Type 'vec' of size -1

  %color ($<$0) or mark ($>$0)   -4
  \item {\bf color }\\
        an integer. It is the color number ($>=0$) or marker
	type ($<0$) used to draw the evolution of the input port signal.
        See {\bf  xset()}  for color (dash type) definitions.   \\
	Properties : Type 'vec' of size -1

  %line or mark size   1
  \item {\bf line or mark size}\\
        an integer. \\
	Properties : Type 'vec' of size -1

  %Output window number   1
  \item {\bf Output window number}\\
        The number of graphic window used for
	the display. It is often good to use high values to avoid conflict
	with palettes and Super Block windows. If you have more than one
	scope, make sure they don't have the same window numbers (unless
	superposition of the curves is desired).  \\
	Properties : Type 'vec' of size -1

  %Output window position   []
  \item {\bf Output window position}\\
        a 2 vector specifying the coordinates
        of the upper left corner of the graphic window. Answer [] for
        default window position.  \\
	Properties : Type 'vec' of size -1

  %Output window sizes   []
  \item {\bf Output window sizes}\\
       a 2 vector specifying the width and height
       of the graphic window. Answer [] for default window dimensions.  \\
       Properties : Type 'vec' of size -1

  \item {\bf Xmin and Xmax}\\
        Minimum and Maximum values of the first input; used to set up the
	X-axis of the plot in the graphics window.  \\
	Properties : Type 'vec' of size -1

  \item {\bf Ymin and Ymax}\\
        Minimum and Maximum values of the second input; used to set up the
	Y-axis of the plot in the graphics window.  \\
	Properties : Type 'vec' of size -1

  \item {\bf Zmin and Zmax}\\
        Minimum and Maximum values of the third input; used to set up the
	Z-axis of the plot in the graphics window.  \\
	Properties : Type 'vec' of size -1

  \item {\bf Alpha and Theta}\\
        Set Alpha and Theta for the 3D view.\\
	Properties : Type 'vec' of size -1

  %Buffer size   2
  \item {\bf Buffer size}\\
        An integer value. In order to minimize the number
         of graphics outputs, data may buffered.   \\
	Properties : Type 'vec' of size 1
\end{itemize}
</FILE>

<FILE name='CBLOCK' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %simulation function   toto
  \item {\bf simulation function}\\
         Name of the function to be generated.\\
	 Properties : Type 'str' of size 1

  %is block implicit? (y,n)   n
  \item {\bf is block implicit? }\\
        If yes (y) is selected, it calls implicit
	solver (dasrt) else (n) it calls explicit solver, lsodar.\\
	Properties : Type 'str' of size 1

  %input ports sizes   1
  \item {\bf input ports sizes}\\
        Number of regular input ports\\
	Properties : Type 'vec' of size -1

  %output ports sizes   1
  \item {\bf output ports sizes}\\
        Number of regular output ports\\
	Properties : Type 'vec' of size -1

  %input event ports sizes   []
  \item {\bf input event ports sizes}\\
        Number of event input ports\\
	Properties : Type 'vec' of size -1

  %output events ports sizes   []
  \item {\bf output events ports sizes}\\
        Number of event output ports\\
	Properties : Type 'vec' of size -1

  %initial continuous state   []
  \item {\bf initial continuous state}\\
        Initial Conditions\\
	Properties : Type 'vec' of size -1

  %number of zero crossing surfaces   0
  \item {\bf number of zero crossing surfaces}\\
        Select to enable zero
	crossing detection. \\
	Properties : Type 'vec' of size 1

  %initial discrete state   [] 
  \item {\bf initial discrete state}\\
        Initial conditions of the discrete states. \\
	Properties : Type 'vec' of size -1

  %Real parameters vector   []
  \item {\bf Real parameters vector}\\
        Real Parameter vector that the function
	accepts.  \\
	Properties : Type 'vec' of size -1

  %Integer parameters vector   []
  \item {\bf Integer parameters vector}\\
        Integer Parameter vector that the function
	accepts.  \\
        Properties : Type 'vec' of size -1

  %initial firing vector ($<$0 for no firing)   []
  \item {\bf initial firing vector }\\
        A vector. Size of this vector corresponds
	to the number of event outputs. The value of the $i^{th}$ entry
	specifies the time of the preprogrammed event firing on the $i^{th}$
	output event port. If less than zero, no event is preprogrammed.\\
	Properties : Type 'vec' of size 'sum(\%6)'

  %direct feedthrough (y or n)   \%t
  \item {\bf direct feedthrough }\\
        The input to the block at the current time
	determine the output of the block at the current time. This forces
	the input to feed through to the output, as if the system were
	operating at steady-state.   \\
	Properties : Type 'str' of size 1

  %time dependence (y or n)   \%f
  \item {\bf time dependence }\\
        Create a signal that specifies the time dependence.\\
	Properties : Type 'str' of size 1
\end{itemize}
</FILE>

<FILE name='CCS' type='XML'>
  <PARAM>
    <PARAM_INDENT>

  </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='CEVENTSCOPE' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %Number of event inputs   1
  \item {\bf Number of event inputs}\\
        an integer giving the number of event
        input ports colors : a vector of integers. The i-th element is the
        color number ($>=0$) or dash type ($<0$) used to draw the evolution of
        the i-th input port signal. See  {\bf xset}  for color (dash type)
        definitions.  \\
	Properties : Type 'vec' of size 1
 
  %colors c ($>$0) or mark ($<$0)   1
  \item {\bf colors c }\\
        an integer. It is the color number ($>0$) or dash
	type ($<0$) used to draw the evolution of the input port signal. See
	{\bf plot2d}  for color (dash type) definitions.\\
	Properties : Type 'vec' of size -1

  %Output window number   1
  \item {\bf Output window number}\\
        The number of graphic window used for the
	display. It is often good to use high values to avoid conflict with
	palettes and Super Block windows. If you have more than one scope,
	make sure they don't have the same window numbers (unless
	superposition of the curves is desired). Output window position : a
	2 vector specifying the coordinates of the upper left corner of the
	graphic window. Answer [] for default window position.  \\
	Properties : Type 'vec' of size 1
 
  %Output window position   []
  \item {\bf Output window position}\\
	Properties : Type 'vec' of size -1

  %Output window sizes   [600;400]
  \item {\bf Output window sizes}\\
        a 2 vector specifying the width and height
	of the graphic window. Answer [] for default window dimensions.\\
	Properties : Type 'vec' of size -1

  %Refresh period   30
  \item {\bf Refresh period}\\
        Maximum value on the X-axis (time). The plot is
	redrawn when time reaches a multiple of this value.   \\
	Properties : Type 'vec' of size 1
\end{itemize}
</FILE>

<FILE name='CFSCOPE' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %Color ($>$0) or mark ($<$0) vector (8 entries)   1 3 5 7 9 11 13 15
  \item {\bf Color }\\
        a vector of integers. The i-th element is the color
	number ($>0$) or dash type ($<0$) used to draw the evolution
        of the i-th input port signal. See  {\bf plot2d}  for color
       (dash type) definitions. \\
	Properties : Type 'vec' of size 8

  %Output window number (-1 for automatic)   -1
  \item {\bf Output window number }\\
        The number of graphic window used for 
	the display. It is often good to use high values to avoid
        conflict with palettes and Super Block windows. If default
        value is used {\bf (1)}, Scicos define the output window
        number. \\
	Properties : Type 'vec' of size 1

  %Output window position   [] 
  \item {\bf Output window position}\\
        a 2 vector specifying the coordinates
	of the upper left corner of the graphic window. Answer [] for 
	default window position. \\
	Properties : Type 'vec' of size -1

  %Output window sizes   [600;400] 
  \item {\bf Output window sizes}\\
        a 2 vector specifying the coordinates of
	the upper left corner of the graphic window. Answer []
        for default window position.   \\
	Properties : Type 'vec' of size -1

  %Ymin   -15
  \item {\bf Ymin}\\
        Minimum  values of the input; used to set up the Y-axis
	of the plot in the graphics window.   \\
	Properties : Type 'vec' of size -1

  %Ymax   15
  \item {\bf Ymax}\\
        Maximum values of the input; used to set up the Y-axis
	of the plot in the graphics window.   \\
	Properties : Type 'vec' of size 1

  %Refresh period   30 
  \item {\bf Refresh period}\\
        Maximum value on the X-axis (time). The plot
	is redrawn when time reaches a multiple of this value. \\
	Properties : Type 'vec' of size

  %Buffer size   2
  \item {\bf Buffer size}\\
        To improve efficiency it is possible to buffer the
	input data. The drawing is only done after each
        {\bf Buffer size} call to the block. \\
	Properties : Type 'vec' of size 1

  %Links to view   1
  \item {\bf Links to view}\\
        This parameter allows you to display the output
	of specified link. \\
	Properties : Type 'vec' of size 1
\end{itemize}
</FILE>

<FILE name='CLINDUMMY_f' type='XML'>
<PARAM>
<PARAM_INDENT>

</PARAM_INDENT>
</PARAM>
</FILE>

<FILE name='CLKFROM' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Tag</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The tag of the CLKGOTO block passing the signal to
	    this CLKFROM block.
	  </SP>
	  <SP>
	    Properties : Type 'str' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='CLKGOTO' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Tag</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    This parameter identifies the Goto block whose scope
	    is defined in this block.
	  </SP>
	  <SP>
	    Properties : Type 'str' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Tag Visibility (1=Local 2=Scoped 3=Global)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    This parameter idetifies the visibility of the block.
	    It can be local(1), scoped(2) or global(3).
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='CLKGotoTagVisibility' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>GotoTag</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The Goto block tag whose visibility is defined by the
	    location of this block.
	  </SP>
	  <SP>
	    Properties : Type 'str' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='CLKINV_f' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Port number</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    an integer defining the port number.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='CLKIN_f' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Port number</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    an integer defining the port number.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='CLKOUTV_f' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Port number</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    an integer defining the port number.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='CLKOUT_f' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Port number</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    an integer defining the port number.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='CLKSOMV_f' type='XML'>
<PARAM>
<PARAM_INDENT>

</PARAM_INDENT>
</PARAM>
</FILE>

<FILE name='CLKSOM_f' type='XML'>
<PARAM>

</PARAM>
</FILE>

<FILE name='CLKSPLIT_f' type='XML'>
  <PARAM>
    <PARAM_INDENT>

  </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='CLOCK_c' type='LATEX'>
  %@lan
  \begin{itemize}
     
     \item {\bf Period} \\
           scalar. \\
           One over the frequency of the clock. \\
           Period is the time that separates two output events.\\
	   Properties : Type 'vec' of size 1.

     \item {\bf Init time} \\
           scalar. \\
           Starting date. \\
           If negative the clock never starts.\\
	   Properties : Type 'vec' of size 1.
  \end{itemize}
</FILE>

<FILE name='CLOCK_f' type='LATEX'>
%automatically generated, please edit
\begin{itemize}
 %Period   0.1
 \item {\bf Period} \\
       scalar. One over the frequency of the clock. Period is
       the time that separates two output events.  \\
       Properties : Type 'vec' of size 1.

 %Init time   0.1
 \item {\bf Init time} \\
        scalar. Starting date. if negative the clock never
        starts. \\
        Properties : Type 'vec' of size 1.
\end{itemize}
</FILE>

<FILE name='CLR' type='LATEX'>
%automatically generated, please edit
\begin{itemize}
  %Numerator (s)   1
  \item {\bf Numerator} \\
        This parameter sets the numerator of the transfer function.\\
        This must be a polynomial in s.\\
        Properties : Type 'pol' of size 1.

  %Denominator (s)   1+s
  \item {\bf Denominator} \\
        This parameter sets the denominator of the transfer function.\\
        This must be a polynomial in s.\\
        Properties : Type 'pol' of size 1.

\end{itemize}
</FILE>

<FILE name='CLR_f' type='LATEX'>
%automatically generated, please edit
\begin{itemize}
  %Numerator (s)   1
  \item {\bf Numerator} \\
        This parameter sets the numerator of the transfer function.\\
        This must be a polynomial in s.\\
        Properties : Type 'pol' of size 1.

  %Denominator (s)   1+s
  \item {\bf Denominator} \\
        This parameter sets the denominator of the transfer function.\\
        This must be a polynomial in s.\\
        Properties : Type 'pol' of size 1.

\end{itemize}
</FILE>

<FILE name='CLSS' type='LATEX'>
\begin{itemize}

 %A matrix   -1
 \item {\bf $A$ matrix} \\
       A square matrix. \\
       Properties : Type 'mat' of size [-1,-1].

 %B matrix   1
 \item {\bf B matrix} \\
       The $ B $ matrix,  []  if system has no input.\\
       Properties : Type 'mat' of size ["size(\%1,2)","-1"].

 %C matrix   1
 \item {\bf C matrix} \\
       The  $C$  matrix ,  []  if system has no output.\\
       Properties : Type 'mat' of size ["-1","size(\%1,2)"].

 %D matrix   0
 \item {\bf D matrix} \\
       The $ D$  matrix,  []  if system has no  D  term.\\
       Properties : Type 'mat' of size [-1,-1].

 %Initial state   0
 \item {\bf Initial state} \\
       A vector/scalar initial state of the system.\\
       Properties : Type 'vec' of size "size(\%1,2)".

\end{itemize}
</FILE>

<FILE name='CLSS_f' type='LATEX'>
\begin{itemize}

 %A matrix   -1
 \item {\bf $A$ matrix} \\
       A square matrix. \\
       Properties : Type 'mat' of size [-1,-1].

 %B matrix   1
 \item {\bf B matrix} \\
       The $ B $ matrix,  []  if system has no input.\\
       Properties : Type 'mat' of size ["size(\%1,2)","-1"].

 %C matrix   1
 \item {\bf C matrix} \\
       The  $C$  matrix ,  []  if system has no output.\\
       Properties : Type 'mat' of size ["-1","size(\%1,2)"].

 %D matrix   0
 \item {\bf D matrix} \\
       The $ D$  matrix,  []  if system has no  D  term.\\
       Properties : Type 'mat' of size [-1,-1].

 %Initial state   0
 \item {\bf Initial state} \\
       A vector/scalar initial state of the system.\\
       Properties : Type 'vec' of size "size(\%1,2)".

\end{itemize}
</FILE>

<FILE name='CMAT3D' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Bounds Vector X (-1 for standard)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    If you let -1 the x ticks would be between 0 and 1
	    else you can put your own vector.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Bounds Vector Y (-1 for standard)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    If you let -1 the x ticks would be between 0 and 1
	    else you can put your own vector.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>ColorMap</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The colormap is a range color linked to the window output
	    of the scope. You can put a jetcolormap or hotcolormap or
	    graycolormap or your own (see colormap help).
	  </SP>
	  <SP>
	    Properties : Must be a mx3 matrix and m >= 3
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Zmin</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Minimum value in Z values
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Zmax</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Maximum values in Z values
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='CMATVIEW' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>ColorMap</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The colormap is a range color linked to the window output of
	    the scope. You can put a jetcolormap or hotcolormap or
	    graycolormap or your own (see colormap help).
	  </SP>
	  <SP>
	    Properties : Must be a mx3 matrix and m >= 3
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Minimum level range</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The minimum level range is the minimum value who comes in the
	    regular input port. It would be linked to the 'cold value'
	    of the colormap.
	  </SP>
	  <SP>
	    Properties : A scalar
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Maximum level range</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The maximum level range is the maximum value who comes in the
	    regular input port. It would be linked to the 'hot value'
	    of the colormap.
	  </SP>
	  <SP>
	    Properties : A scalar
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='CMSCOPE' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %Input ports sizes   1 1
  \item {\bf Input ports sizes}\\
        It allows multiple input ports. \\
	Properties : Type 'vec' of size -1

  %Drawing colors ($>$0) or mark ($<$0)   1 3 5 7 9 11 13 15
  \item {\bf Drawing colors }\\
        a vector of integers. The i-th element is the color
	number ($>0$) or dash type ($<0$) used to draw the evolution
	of the i-th input port signal. See {\bf plot2d} for color
	(dash type) definitions. \\
	Properties : Type 'vec' of size -1

  %Output window number   1
  \item {\bf Output window number}\\
        The number of graphic window used for the display.
	It is often good to use high values to avoid conflict 
	with palettes and Super Block windows. If default value
	is used {\bf (1)}, Scicos define the output window number. \\
	Properties : Type 'vec' of size 1

  %Output window position   []
  \item {\bf Output window position}\\
        a 2 vector specifying the coordinates
	of the upper left corner of the graphic window. Answer [] for 
	default window position. \\
	Properties : Type 'vec' of size -1

  %Output window sizes   []
  \item {\bf Output window sizes}\\
        a 2 vector specifying the coordinates of
	the upper left corner of the graphic window. Answer [] for
	default window position. \\
	Properties : Type 'vec' of size size -1

  %Ymin vector   -1 -5
  \item {\bf Ymin vector}\\
        Minimum  values of the input; used to set up the Y-axis
	of the plot in the graphics window. \\
	Properties : Type 'vec' of size size(\%1,'*')

  %Ymax vector   1 5
  \item {\bf Ymax vector}\\
        Maximum values of the input; used to set up the Y-axis
	of the plot in the graphics window.  \\
	Properties : Type 'vec' of size size(\%1,'*')

  %Refresh period   30
  \item {\bf Refresh period}\\
        Maximum value on the X-axis (time). The plot
        is redrawn when time reaches a multiple of this value.\\
	Properties : Type 'vec' of size size(\%1,'*')

  %Buffer size   2
  \item {\bf Buffer size}\\
        To improve efficiency it is possible to buffer the
	input data. The drawing is only done after each 
	{\bf Buffer size} call to the block. \\
	Properties : Type 'vec' of size 1

  %Accept herited events 0/1   0
  \item {\bf Accept herited events 0/1}\\
        if 0  {\bf CSCOPE\_f}  draws a new point
	only when an event occurs on its event input port. if 1
	{\bf CSCOPE\_f}	draws a new point when an event occurs 
	on its event input port and when it's regular input changes
	due to an event on an other upstrem block (herited events). \\
	Properties : Type 'vec' of size 1

  %Name of Scope (label\&Id)   
  \item {\bf Name of Scope }\\
        Name/label of the block. \\
	Properties : Type 'str' of size 1
\end{itemize}
</FILE>

<FILE name='CONST' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Constant</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The constant value.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='CONSTRAINT_f' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %Set number of constraints   1
  \item {\bf Set number of constraints}\\
        no of algebraic relations to be defined. \\
	Properties : Type 'vec' of size 1
\end{itemize}
</FILE>

<FILE name='CONST_f' type='LATEX'>
%automatically generated, please edit
\begin{itemize}
  %Constant   1
  \item {\bf Constant} \\
        a real vector. The vector size gives the size of the
	output port. The value  {\bf constants(i)}  is assigned to the
	ith component of the output.  \\
	Properties :  Type 'vec' of size -1.
\end{itemize}
</FILE>

<FILE name='CONST_m' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Constant</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    A matrix of any type.
	  </SP>
	  <SP>
            The size of the matrix gives the size of the regular
            output port.
	  </SP>
	  <SP>
           The constant(i,j) value is the component(i,j) value of the
           output port.
	  </SP>
	  <SP>
	    From this value the block inherits its data type.
	  </SP>
	  <SP>
	    Properties : Type 'mat' of size [-1,-2].
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='CONVERT' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>input type (1= double 3=int32  4=int16 5=int8 ...)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    It indicates the input data type, it can be a double
	    or an integer.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>output type (1= double 3=int32  4=int16 5=int8 ...)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    It indicates the output data type, it can be a double
	    or an integer.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Do on Overflow(0=Nothing 1=Saturate 2=Error)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    When this parameter is set to zero the result is similar to
	    a normal multiplication of two integer matrix. When it is set
	    to 1, on overflow the block saturate the result. When it is
	    set to 2, on overflow an error message box appears.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='COSBLK_f' type='XML'>
<PARAM>
<PARAM_INDENT>

</PARAM_INDENT>
</PARAM>
</FILE>

<FILE name='CSCOPE' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %Color ($>$0) or mark ($<$0) vector (8 entries)   1 3 5 7 9 11 13 15
  \item {\bf Color }\\
        a vector of integers. The i-th element is the color
	number ($>0$) or dash type ($<0$) used to draw the evolution
	of the i-th input port signal. See {\bf plot2d} for color
	(dash type) definitions. \\
	Properties : Type 'vec' of size 8

  %Output window number (-1 for automatic)   -1
  \item {\bf Output window number }\\
        The number of graphic window used for 
	the display. It is often good to use high values to avoid
	conflict with palettes and Super Block windows. If default
	value is used {\bf (1)}, Scicos define the output window
	number. \\
	Properties : Type 'vec' of size 1

  %Output window position   [] 
  \item {\bf Output window position}\\
        a 2 vector specifying the coordinates
	of the upper left corner of the graphic window.
	Answer [] for default window position.\\
	Properties : Type 'vec' of size 1

  %Output window sizes   [600;400] 
  \item {\bf Output window sizes}\\
        a 2 vector specifying the coordinates of
        the upper left corner of the graphic window.
	Answer [] for default window position.\\
	Properties : Type 'vec' of size -1

  %Ymin   -15
  \item {\bf Ymin}\\
        Minimum  values of the input; used to set up the Y-axis
	of the plot in the graphics window.\\
	Properties : Type 'vec' of size 1

  %Ymax   15
  \item {\bf Ymax}\\
        Maximum values of the input; used to set up the Y-axis
	of the plot in the graphics window.\\
	Properties : Type 'vec' of size 1

  %Refresh period   30 
  \item {\bf Refresh period}\\
        Maximum value on the X-axis (time). The plot
	is redrawn when time reaches a multiple of this value.\\
	Properties : Type 'vec' of size 1

  %Buffer size   2
  \item {\bf Buffer size}\\
        To improve efficiency it is possible to buffer the
	input data. The drawing is only done after each  {\bf Buffer size}
	call to the block.\\
	Properties : Type 'vec' of size 1

  %Accept herited events 0/1   0
  \item {\bf Accept herited events 0/1}\\
        if 0  {\bf CSCOPE\_f}  draws a new point
	only when an event occurs on its event input port. 
	If 1 {\bf CSCOPE\_f} draws a new point when an event occurs
        on its event input port and when it's regular input changes
	due to an event on an other upstream block (herited events). \\
	Properties : Type 'vec' of size 1

  %Name of Scope (label\&Id)   
  \item {\bf Name of Scope }\\
        Name/label of the block. \\
	Properties : Type 'str' of size 1
\end{itemize}
</FILE>

<FILE name='CSCOPXY' type='LATEX'>
\begin{itemize}
  \item {\bf Number of Curves }\\
        Set the number of curves.
	Properties : Type 'vec' of size 1

  %color ($>$0) or mark ($<$0)   4
  \item {\bf color }\\
        an integer. It is the color number ($>0$) or dash type
	($<0$) used to draw the evolution of the input port signal. See
	{\bf plot2d}  for color (dash type) definitions.  \\
	Properties : Type 'vec' of size 1

  %line or mark size   1
  \item {\bf line or mark size}\\
        an integer. \\
	Properties : Type 'vec' of size 1

  %Output window number   1
  \item {\bf Output window number}\\
        The number of graphic window used for the
	display. It is often good to use high values to avoid conflict with
	palettes and Super Block windows. If you have more than one scope,
	make sure they don't have the same window numbers (unless
	superposition of the curves is desired).  \\
	Properties : Type 'vec' of size 1

  %Output window position   []
  \item {\bf Output window position}\\
        a 2 vector specifying the coordinates
	of the upper left corner of the graphic window. Answer [] for
	default window position.  \\
	Properties : Type 'vec' of size -1

  %Output window sizes   [600;400]
  \item {\bf Output window sizes}\\
        a 2 vector specifying the width and
        height of the graphic window. Answer [] for default window
	dimensions.  \\
	Properties : Type 'vec' of size -1

  %Xmin   -15
  \item {\bf Xmin}\\
        Minimum  values of the first input; used to
        set up the X-axis of the plot in the graphics window.  \\
	Properties : Type '' of size

  %Xmax   15
  \item {\bf Xmax}\\
        Maximum values of the first input; used to
        set up the X-axis of the plot in the graphics window. \\
	Properties : Type 'vec' of size 1

  %Ymin   -15
  \item {\bf Ymin}\\
        Minimum values of the second input; used to set up the
	Y-axis of the plot in the graphics window.  \\
	Properties : Type 'vec' of size 1

  %Ymax   15
  \item {\bf Ymax}\\
        Maximum values of the second input; used to set up the
	Y-axis of the plot in the graphics window. \\
	Properties : Type 'vec' of size 1

  %Buffer size   2
  \item {\bf Buffer size}\\
        To improve efficiency it is possible to buffer
	the input data. The drawing is only done after each  Buffer size
	call to the block.  \\
	Properties : Type 'vec' of size 1
\end{itemize}
</FILE>

<FILE name='CSCOPXY3D' type='LATEX'>
\begin{itemize}

  \item {\bf Number of Curves}\\
        Set the number of curves.\\
	Properties : Type 'vec' of size -1

  %color ($<$0) or mark ($>$0)   -4
  \item {\bf color }\\
        an integer. It is the color number ($>=0$) or marker
	type ($<0$) used to draw the evolution of the input port signal.
        See {\bf  xset()}  for color (dash type) definitions.   \\
	Properties : Type 'vec' of size -1

  %line or mark size   1
  \item {\bf line or mark size}\\
        an integer. \\
	Properties : Type 'vec' of size -1

  %Output window number   1
  \item {\bf Output window number}\\
        The number of graphic window used for
	the display. It is often good to use high values to avoid conflict
	with palettes and Super Block windows. If you have more than one
	scope, make sure they don't have the same window numbers (unless
	superposition of the curves is desired).  \\
	Properties : Type 'vec' of size -1

  %Output window position   []
  \item {\bf Output window position}\\
        a 2 vector specifying the coordinates
        of the upper left corner of the graphic window. Answer [] for
        default window position.  \\
	Properties : Type 'vec' of size -1

  %Output window sizes   []
  \item {\bf Output window sizes}\\
       a 2 vector specifying the width and height
       of the graphic window. Answer [] for default window dimensions.  \\
       Properties : Type 'vec' of size -1

  \item {\bf Xmin and Xmax}\\
        Minimum and Maximum values of the first input; used to set up the
	X-axis of the plot in the graphics window.  \\
	Properties : Type 'vec' of size -1

  \item {\bf Ymin and Ymax}\\
        Minimum and Maximum values of the second input; used to set up the
	Y-axis of the plot in the graphics window.  \\
	Properties : Type 'vec' of size -1

  \item {\bf Zmin and Zmax}\\
        Minimum and Maximum values of the third input; used to set up the
	Z-axis of the plot in the graphics window.  \\
	Properties : Type 'vec' of size -1

  \item {\bf Alpha and Theta}\\
        Set Alpha and Theta for the 3D view.\\
	Properties : Type 'vec' of size -1

  %Buffer size   2
  \item {\bf Buffer size}\\
        An integer value. In order to minimize the number
         of graphics outputs, data may buffered.   \\
	Properties : Type 'vec' of size 1
\end{itemize}
</FILE>

<FILE name='CUMSUM' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Datatype(1=real double  2=Complex)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    It indicates the type of the output. It support only the two
	    types double (1) and complex (2). If we input another entry
	    in this label Scicos will print the message "Datatype is not
	    supported".
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Sum along (0=the first non singleton dimension  1=Rows  2=Columns)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Indicate whether to sum across the rows, the columns or the
	    first non singleton dimension.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='CURVE_c' type='LATEX'>
\begin{itemize}

\item {\bf Spline Method (0..7):} accepted values $0, 1, 2, 3, 4, 5, 6, 7$.
    This parameter defines the spline method for interpolating the
    points. The Signal builder block computes a linear or a cubic
    spline or sub-spline $S$ which interpolates the $(x_i,y_i)$
    points, i.e., we have $S(x_i)=y_i$ for all $i=1,..,n$.  Several
    kind of splines may be computed by selecting the appropriate
    spline method:

\begin{itemize}

\item {\bf 0: "Zero order method"}. This method generates a piecewise
    constant signal. i.e., for $t_{i} \leq t < t_{i+1}$, $y(t)=y_{i}$

\item {\bf 1: "Linear method"}. This method generates a piecewise
    linear signal. i.e., for $t_i \leq t < t_{i+1}$,
    $y(t)=y_i+(t-t_i)(y_{i+1}-y_i)/(t_{i+1}-t_i).$

\item {\bf 2: "Order 2 method"}. The interpolation is done by passing
    2-order polynomials between $(x_i,y_i)$ and
    $(x_{i+1},y_{i+1})$. The Derivative at $(x_i,y_i)$ is identical
    for two adjacent polynomials. The derivative at $(x_1,y_1)$
    can be selected arbitrary, so it is selected such that the sum of
    derivatives at all points be minimum. This condition provides a
    less fluctuated signal.

\item {\bf 3:"not\_a\_knot"}. The cubic spline is computed by using the
    following conditions (considering $n$ points $x_1,...,x_n$):
    $$S^{(3)}(x_2^-) = S^{(3)}(x_2^+)$$ $$S^{(3)}(x_{n-1}^-) =
    S^{(3)}(x_{n-1}^+)$$

\item {\bf 4:"periodic"}. A periodic cubic spline is computed ($y$
    must verify $y_1=y_n$) by using the conditions:  \\$$S^{'}(x_1) =
    S^{'}(x_n)$$ \\$$S^{''}(x_1) = S^{''}(x_n)$$.\\ In this case the value
    of $y_n$ is ignored and $y_1$ is used instead. Note that in order
    to generate a periodic signal, {\it Periodic} flag should be
    activated.

\item {\bf 5:"monotone"}. In this case a sub-spline ($S$ is only one
    continuously differentiable) is computed such that $S$ is monotone
    on each interval: \\ if $y_i \le y_{i+1}$, $S$ is increasing on
    $[x_i, x_{i+1}]$. \\ if $y_i \> y_{i+1}$, $S$ is decreasing on
    $[x_i, x_{i+1}]$.

\item {\bf 6:"clamped"}. In this case the cubic spline is computed by
    using the end points derivatives which are set to zero, i.e.,
    $$S^{'}(x_1) = S^{'}(x_n)=0$$

\item {\bf 7:"fast"}. In this case a sub-spline is computed by using a
    simple local scheme for the derivative at $x_i$ of the
    interpolation polynomial of $(x_{i-1},y_{i-1})$, $(x_{i},y_{i})$,
    $(x_{i+1},y_{i+1})$, except for the end points (derivative at
    these points are computed from the 3 left most points and the 3
    right most points).
\end{itemize}

\item {\bf x:} Abscissa data vector (X-axis). This vector can be
   either a row or a column vector of double data.  This vector can
   be also defined in the Scicos context. The data vector can be
   specified by mathematical formula.

\item {\bf y:} Ordinate data vector (Y-axis). This vector can be
   either a row or a column vector of double data. Not that the size
   of X and Y vector should be the same. This vector can be also
   defined in the Scicos context. The data vector can also be
   specified by formula.

\item {\bf Periodic signal(y/n)}. If {\bf y} is selected, the created
   signal will be periodic with the period of $t_n$. Note that if the
   {\it Periodic} spline method is selected, the output signal will be
   a continuous signal, otherwise the signal will be discontinuous at
   endpoints.

\item {\bf Launch graphical window (y/n)}. If {\bf y} is selected, by
   clicking on {\bf OK} button, a graphical window is launched. In
   this 2D graphical window, the user can edit data points: 

\begin{itemize}
    \item: Mouse left click on the window: adding a new data point

    \item: Mouse right click on the window: remove a data point

    \item: Mouse left double-click on a data point: edit a point's
         coordinates

    \item: Mouse left button press/drag/release: move a data point

    \item  {\it Autoscale menu}: Rescaling the window to show all data
         points properly.
   
    \item  {\it Spline/Method menu}: Selecting the spline interpolation method.

    \item {\it Data/Clear menu} removing all data points

    \item {\it Data/Data\_Bounds menu} Change the window size

    \item {\it Data/Load\_from\_text\_file menu} reading data points
          from a text data file (using C data format)

    \item {\it Data/save\_to\_text\_file menu} saving the data points
          to a text data file (using C data format)

    \item {\it Data/Load\_from\_excel menu}: Reading data from an
         excel file.
  
    \item {\it Data/Periodic\_signal menu}: Specifying weather the created
        signal is periodic or not. If the signal is not periodic, the
        signal stays constant beyond $t_n$, otherwise it is clamped
        to $y_1$ at $t_n$.
 
    \item {\it Standards/Functions menu}: Specifying Sine, Sawtooth,
         Pulse, and random signals.

    \item {\it Exit/Help menu}: a short help on the graphic window commands

    \item {\it Exit/Exit\_without\_save menu}: closing the graphical
          window, discarding all modifications in data. 

    \item {\it Exit/Exit\_with\_save menu}: closing the graphical window
    and saving data points.

\end{itemize}


\end{itemize}
</FILE>

<FILE name='CURV_f' type='XML'>
<PARAM>
<PARAM_INDENT>

</PARAM_INDENT>
</PARAM>
</FILE>

<FILE name='CVS' type='XML'>
  <PARAM>
    <PARAM_INDENT>

  </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='C_macros' type='XML'>
  <PARAM>

  </PARAM>
</FILE>

<FILE name='C_struct' type='XML'>
  <PARAM>

  </PARAM>
</FILE>

<FILE name='C_utils' type='XML'>
  <PARAM>

  </PARAM>
</FILE>

<FILE name='Capacitor' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>C (F)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Capacitance
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Initial Voltage</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Initial Voltage
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='ConstantVoltage' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>V (volt)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Output voltage
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='Context' type='XML'>
  <PARAM>

  </PARAM>
</FILE>

<FILE name='Counter' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Minimum</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The lowest number of the counter.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Maximum</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The highest number of the counter.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Rule (1=Increment 2=Decrement)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The rule of counting. If it is 1 then the counter counts
	    from the lower number to the higher number. the count in this
	    case is increasing. otherwise, if the rule is equal to 2 the
	    counter will decrease and it will count from the higher
	    number to the lower one.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='CurrentSensor' type='XML'>
<PARAM>
<PARAM_INDENT>

</PARAM_INDENT>
</PARAM>
</FILE>

<FILE name='DEADBAND' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %End of dead band   0.5
  \item {\bf End of dead band}\\
        The upper limit of the dead band.\\
	Properties : Type 'vec' of size 1

  %Start of dead band   -0.5
  \item {\bf Start of dead band}\\
        The lower limit of the dead band. \\
	Properties : Type 'vec' of size 1

  %zero crossing (0:no, 1:yes)   1
  \item {\bf zero crossing }\\
        Select to enable zero crossing detection to
	detect when the limits are reached.   \\
	Properties : Type 'vec' of size 1
\end{itemize}
</FILE>

<FILE name='DEBUG_SCICOS' type='XML'>
<PARAM>
<PARAM_INDENT>

</PARAM_INDENT>
</PARAM>
</FILE>

<FILE name='DELAYV_f' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Number of inputs</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Set the vector size of the first regular input and
	    the vector size of the regular output port.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Register initial condition</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Set the length and the initial conditions of the register.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Max delay</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    It defines the largest value the time delay input
	    can have.The value cannot be negative.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='DELAY_f' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Discretization time step</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Set the time period of the integrated clock.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Register initial state</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Set the length and the initial conditions of the register.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='DEMUX' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %number of output ports or vector of sizes   2
  \item {\bf number of output ports or vector of sizes}\\
        positive integer less than or equal to $8$.  \\
	Properties : Type 'vec' of size -1
\end{itemize}
</FILE>

<FILE name='DEMUX_f' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %number of output ports or vector of sizes   2
  \item {\bf number of output ports or vector of sizes}\\
        positive integer less than or equal to $8$.  \\
	Properties : Type 'vec' of size -1
\end{itemize}
</FILE>

<FILE name='DERIV' type='XML'>
<PARAM>
<PARAM_INDENT>

</PARAM_INDENT>
</PARAM>
</FILE>

<FILE name='DFLIPFLOP' type='XML'>
<PARAM>

</PARAM>
</FILE>

<FILE name='DIFF_f' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Initial state</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The initial continuous state.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Initial Derivative</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The initial derivative state.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='DLATCH' type='XML'>
<PARAM>

</PARAM>
</FILE>

<FILE name='DLR' type='LATEX'>
\begin{itemize}
  \item {\bf Numerator (z)} \\
        This parameter sets the numerator of the transfer function.\\
        This must be a polynomial in {\bf z}.\\
        Properties : Type 'pol' of size 1.

  \item {\bf Denominator (z)} \\
        This parameter sets the denominator of the transfer function.\\
        This must be a polynomial in {\bf z}.\\
        Properties : Type 'pol' of size 1.
\end{itemize}
</FILE>

<FILE name='DLRADAPT_f' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Vector of p mesh points</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The parameter description 1.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Numerator roots (one line for each mesh)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The parameter description 2.
	  </SP>
	  <SP>
	    Properties : Type 'mat' of size [-1,-1].
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Denominator roots (one line for each mesh)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The parameter description 3.
	  </SP>
	  <SP>
	    Properties : Type 'mat' of size [&quot;size(%1,''*'')&quot;,&quot;-1&quot;].
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Vector of gain at mesh points</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The parameter description 4.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size &quot;size(%1,''*'')&quot;.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>past inputs (Num degree values)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The parameter description 5.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size &quot;size(%2,2)&quot;.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>past outputs (Den degree values)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The parameter description 6.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size &quot;size(%3,2)&quot;.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='DLR_f' type='LATEX'>
\begin{itemize}
  \item {\bf Numerator (z)} \\
        This parameter sets the numerator of the transfer function.\\
        This must be a polynomial in {\bf z}.\\
        Properties : Type 'pol' of size 1.

  \item {\bf Denominator (z)} \\
        This parameter sets the denominator of the transfer function.\\
        This must be a polynomial in {\bf z}.\\
        Properties : Type 'pol' of size 1.
\end{itemize}
</FILE>

<FILE name='DLSS' type='LATEX'>
\begin{itemize}

 %A matrix   -1
 \item {\bf $A$ matrix} \\
       A square matrix. \\
       Properties : Type 'mat' of size [-1,-1].

 %B matrix   1
 \item {\bf B matrix} \\
       The $ B $ matrix,  []  if system has no input.\\
       Properties : Type 'mat' of size ["size(\%1,2)","-1"].

 %C matrix   1
 \item {\bf C matrix} \\
       The  $C$  matrix ,  []  if system has no output.\\
       Properties : Type 'mat' of size ["-1","size(\%1,2)"].

 %D matrix   0
 \item {\bf D matrix} \\
       The $ D$  matrix,  []  if system has no  D  term.\\
       Properties : Type 'mat' of size [-1,-1].

 %Initial state   0
 \item {\bf Initial state} \\
       A vector/scalar initial state of the system.\\
       Properties : Type 'vec' of size "size(\%1,2)".

\end{itemize}
</FILE>

<FILE name='DLSS_f' type='LATEX'>
\begin{itemize}

 %A matrix   -1
 \item {\bf $A$ matrix} \\
       A square matrix. \\
       Properties : Type 'mat' of size [-1,-1].

 %B matrix   1
 \item {\bf B matrix} \\
       The $ B $ matrix,  []  if system has no input.\\
       Properties : Type 'mat' of size ["size(\%1,2)","-1"].

 %C matrix   1
 \item {\bf C matrix} \\
       The  $C$  matrix ,  []  if system has no output.\\
       Properties : Type 'mat' of size ["-1","size(\%1,2)"].

 %D matrix   0
 \item {\bf D matrix} \\
       The $ D$  matrix,  []  if system has no  D  term.\\
       Properties : Type 'mat' of size [-1,-1].

 %Initial state   0
 \item {\bf Initial state} \\
       A vector/scalar initial state of the system.\\
       Properties : Type 'vec' of size "size(\%1,2)".

\end{itemize}
</FILE>

<FILE name='DOLLAR' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>initial condition</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The output of the simulation for the first sampling period,
	    during which the output of the Unit Delay block is otherwise
	    undefined.
	  </SP>
	  <SP>
	    Properties : Type 'mat' of size [-1,-2].
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Inherit (no:0, yes:1)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    When "Inherit" is yes, the block inherit its event input.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='DOLLAR_f' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>initial condition</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The output of the simulation for the first sampling period,
	    during which the output of the Unit Delay block is otherwise
	    undefined.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Inherit (no:0, yes:1)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    When "Inherit" is yes, the block inherit its event input.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='DOLLAR_m' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>initial condition</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The output of the simulation for the first sampling period,
	    during which the output of the Unit Delay block is otherwise
	    undefined.
	  </SP>
	  <SP>
	    Properties : Type 'mat' of size [-1,-2].
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Inherit (no:0, yes:1)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    When "Inherit" is yes, the block inherit its event input.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='Diode' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Saturation current (A)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Saturation current
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Voltage equivalent to temperature (Volt)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Voltage equivalent of temperature
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Max exponent for linear continuation</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Max exponent for linear continuation
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>R (ohm)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Parallel ohmic resistance.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='EDGETRIGGER' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>rising (1), falling (-1), both (0)</PARAM_NAME>
	<PARAM_DESCRIPTION>
          <SP>
	    Specifies the type of edge to which the block should react.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='EDGE_TRIGGER' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>rising (1), falling (-1), both (0)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='ENDBLK' type='XML'>
  <PARAM>
    <PARAM_INDENT>

    <PARAM_ITEM>
    <PARAM_NAME>Final simulation time</PARAM_NAME>
    <PARAM_DESCRIPTION>
      <SP>
      Set the final time of the simulation.
      </SP>
      <SP>
      When simulator reaches that value then the current time will jump to
      the final integration time.
      </SP>
      <SP>
      Properties : Type 'vec' of size 1.
      </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>

  </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='END_c' type='XML'>
  <PARAM>
    <PARAM_INDENT>

    <PARAM_ITEM>
    <PARAM_NAME>Final simulation time</PARAM_NAME>
    <PARAM_DESCRIPTION>
      <SP>
      That parameter is a date for an initial output event. By using a feed back
      from the event output port to the event input port, then that block can himself
      end the simulation at the time defined by this parameter.
      </SP>
      <SP>
      Properties : Type 'vec' of size 1.
      </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>

  </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='ESELECT_f' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %number of output event ports   2
  \item {\bf number of output event ports}\\
        A scalar. Number of output event ports.\\
	Properties : Type 'vec' of size 1

  %Inherit (1: no, 0: yes)   1
  \item {\bf Inherit }\\
        If no, then it inherits the event from event input
	port, elseif yes, then event is activated by regular
	input port. \\
	Properties : Type 'vec' of size 1

  %zero-crossing (0: no, 1: yes)   0
  \item {\bf zero-crossing }\\
        Select to enable zero crossing detection. \\
	Properties : Type 'vec' of size 1
\end{itemize}
</FILE>

<FILE name='EVTDLY_c' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %Delay   0.1
  \item {\bf Delay}\\
        scalar. Time delay between input and output event. \\
	Properties : Type 'vec' of size 1

  %Date of initial output event   0.1
  \item {\bf Date of initial output event}\\
        scalar. If {\bf Auto-exec>=0 } block
	initially generates an output event at date{\bf  Auto-exec}.  \\
	Properties : Type 'vec' of size 1
\end{itemize}
</FILE>

<FILE name='EVTDLY_f' type='LATEX'>
  %automatically generated, please edit
  \begin{itemize}

     %Delay   0.1
     \item {\bf Delay}\\
           scalar. Time delay between input and output event.\\
	   Properties : Type 'vec' of size 1

     %Date of initial output event   0.1
     \item {\bf Date of initial output event}\\
           scalar. If {\bf Auto-exec>=0 } block
           initially generates an output event at date{\bf Auto-exec}. \\
      	   Properties : Type 'vec' of size 1
  \end{itemize}
</FILE>

<FILE name='EVTGEN_f' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %Event Time   0
  \item {\bf Event Time}\\
        scalar. date of the initial event. \\
	Properties : Type 'vec' of size 1
\end{itemize}
</FILE>

<FILE name='EVTVARDLY' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %Initial event firing time ($<$0 if absent)   -1
  \item {\bf Initial event firing time }\\
        One event is generated on the
	unique output event port if Event time is larger than equal
	to zero, if not, no event is generated.  \\
	Properties : Type 'vec' of size 1
\end{itemize}
</FILE>

<FILE name='EXPBLK_f' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %a ($>$0)  \%e
  \item {\bf a} \\
        A real positive scalar.\\
        Properties : Type 'vec' of size 1.

\end{itemize}
</FILE>

<FILE name='EXPBLK_m' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %a ($>$0)  \%e
  \item {\bf a} \\
        A real positive scalar.\\
        Properties : Type 'vec' of size 1.

\end{itemize}
</FILE>

<FILE name='EXPRESSION' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %number of inputs   2
  \item {\bf number of inputs}\\
        Block input can be a scalar or vector. \\
	Properties : Type 'vec' of size 1

  %scilab expression   (u1$>$0)*sin(u2)\^2
  \item {\bf scilab expression}\\
        The Scilab expression applied to the input. \\
	Properties : Type 'vec' of size 1

  %use zero-crossing (0: no, 1 yes)   1
  \item {\bf use zero-crossing}\\
        Select to enable zero crossing detection.  \\
	Properties : Type 'vec' of size 1
\end{itemize}
</FILE>

<FILE name='EXTRACT' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Datatype (1=real double  2=Complex)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    It indicates the type of the output. It support only the
	    two types double (1) and complex (2). If we input another
	    entry in this label Scicos will print the message
	    "Datatype is not supported".
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Lines to extract</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    It indicates the numbers of the lines to extract.
	  </SP>
	  <SP>
	    Properties : Type 'mat' of size [1,-1].
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Columns to extract</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    It indicates the numbers of the columns to extract.
	  </SP>
	  <SP>
	    Properties : Type 'mat' of size [1,-1].
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='EXTRACTBITS' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Datatype(3=int32 4=int16 5=int8 ...)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    It indicates the type of the input/output data.
	    It support all the integer datatype, number must be
	    between 3 and 8.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Bits to extract(1=Upper Half 2=Lower Half 3=Range starting with most significant bit 4=Range ending with least significant bit 5=Range of bits)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    It indicates the mode used to extract bits from the
	    input data.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>number of bits or index of bit (case range of bits:[start,end],0 is least significant bit)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    When the "Bits to extract" field is set to 3 or 4, this
	    parameter is used to determine the number of bits to extract
	    and it must be a number. When the "Bits to extract" field is
	    set to 5 ,this parameter is used to determine range of bits
	    to extract and it must have the [start,end] form vector.
	    When the "Bits to extract" field is set to 1 or 2, this
	    parameter is ignored.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Treat bit field as an integer(0=no 1=yes)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    It indicates the scaling mode to use on the output bits
	    selection.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='EXTRACTOR' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %indices to extract   1
  \item {\bf indices to extract}\\
        a regular input to be extracted from the
        multiple regular inputs.  \\
	Properties : Type 'vec' of size 1
\end{itemize}
</FILE>

<FILE name='EXTTRI' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Datatype(1=real double  2=Complex)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    It indicates the type of the output. It support only the
	    two types double (1) and complex (2). If we input another
	    entry in this label Scicos will print the message
	    "Datatype is not supported".
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>extraction type (1=lower  2=upper  3=diagonal)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    It indicates the form of the output matrix. It can be
	    an upper triangle, a lower triangle or a diagonal matrix.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='Extract_Activation' type='XML'>
<PARAM>
<PARAM_INDENT>

</PARAM_INDENT>
</PARAM>
</FILE>

<FILE name='FROM' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Tag</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The tag of the GOTO block passing the signal to this
	    FROM block.
	  </SP>
	  <SP>
	    Properties : Type 'str' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='FROMMO' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Tag</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The tag of the GOTOMO block passing the signal to this
	    FROMMO block.
	  </SP>
	  <SP>
	    Properties : Type 'str' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='FROMWSB' type='LATEX'>
\begin{itemize}

\item {\bf Variable name:} This variable is defined in Scilab and
should be a structure with two fields, i.e., a "time" field of size
(Nx1) and a "values" filed of size (NxM). "time" is a column vector of
size Nx1 and "values" is a matrix of size "N*M". "time" filed can only
be of Real type, whereas the "values" field can be {\it Real},{\it
Complex}, {\it int8},{\it int16},{\it int32},{\it uint8},{\it uint16},
and {\it uint32}.

\item {\bf Interpolation method:} Variables read by Scicos are data
values read at discrete instants given by the time field.  This option
causes the block to interpolate at time steps for which no
corresponding workspace data exists. There are four interpolation
methods available.
 
\begin{itemize}

\item {\bf 0: "Zero order method"}. This method generates a piecewise
    constant signal. i.e., for $t_{i} \leq t < t_{i+1}$, $y(t)=y_{i}$.
    This method is available for all data types.

\item {\bf 1: "Linear method"}. This method generates a piecewise
    linear signal, i.e., for $t_i \leq t < t_{i+1}$,
    $y(t)=y_i+(t-t_i)\frac{y_{i+1}-y_i}{t_{i+1}-t_i}$.  For data types
    other than double and complex, the linear interpolation can be
    used, but the final output will be computed by casting
    interpolation result into the original data type.

\item {\bf 2:"NATURAL method"}. This cubic spline is computed by using
    the following conditions (considering $n$ points $x_1,...,x_n$):
    $$S^{(2)}(x_1) = 0$$ $$S^{(2)}(x_{n}) =0$$.  This method is only
    available for Real and complex data types.

\item {\bf 3:"NOT\_A\_KNOT method"}. The cubic spline is computed by
    using the following conditions (considering $n$ points
    $x_1,...,x_n$): $$S^{(3)}(x_2^-) = S^{(3)}(x_2^+)$$
    $$S^{(3)}(x_{n-1}^-) = S^{(3)}(x_{n-1}^+)$$.  This method is only
    available for Real and complex data types.

\end{itemize}

\item {\bf Enable zero crossing(0:No, 1:Yes)?:} Enables zero crossing
 detection. When {\it linear} and {\it Zero order} interpolation
 methods are chosen, the output signal will be discontinuous at data
 time instants. These possible discontinuities may cause problem for
 the numerical solver. In order to perform a reliable numerical
 integration, the zero crossing option is used. If output of the {\it
 FROMWSB} block affects data used by the numerical solver, at
 discontinuous points, a discrete event is generated and the numerical
 solver is cold restarted.  The discrete event is also generated at
 the $t_1$ and $t_n$ for other interpolating methods.

\item {\bf Output at end(0:Zero, 1:Hold, 2:Repeat):} This option is
for selecting method for generating output after the last time point
for which data is available from the workspace.

\begin{itemize}

\item {\bf 0 ("Zero"):} The output is set to zero.

\item {\bf 1 ("Hold"):} The output is hold.

\item {\bf 2 ("Repeat"):} The output is repeated from workspace.
\end{itemize}

\end{itemize}
</FILE>

<FILE name='FROMWS_c' type='LATEX'>
The same as \htmladdnormallink{FROMWSB}{FROMWSB.htm} block.
</FILE>

<FILE name='FSV_f' type='XML'>
<PARAM>
<PARAM_INDENT>

</PARAM_INDENT>
</PARAM>
</FILE>

<FILE name='GAINBLK' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Gain</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    This parameter defined the square matrix A.
	    That parameter can support all Data types.
	  </SP>
	  <SP>
	    Properties : Type 'mat' of size [-1,-1].
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Do on Overflow (0=Nothing 1=Saturate 2=Error)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    When this parameter is set to zero the result is similar to
	    a normal multiplication of two integer matrix. When it is
	    set to 1, on overflow the block saturate the result. When
	    it is set to 2, on overflow an error message box appears.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='GAINBLK_f' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Gain</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    This parameter defined the square matrix A.
	  </SP>
	  <SP>
	    Properties : Type 'mat' of size [-1,-1].
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='GAIN_f' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Gain</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    This parameter defined the square matrix A.
	  </SP>
	  <SP>
	    Properties : Type 'mat' of size [-1,-1].
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='GENERAL_f' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Input size</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The parameter description 1.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>

      <PARAM_ITEM>
	<PARAM_NAME>Number of event output</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The parameter description 2.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='GENSIN_f' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %Magnitude   1
  \item {\bf Magnitude} \\
        a scalar. 
        The magnitude M.\\
        Properties : Type 'vec' of size 1.

  %Frequency   1
  \item {\bf Frequency} \\
        a scalar. 
        The frequency F.\\
        Properties : Type 'vec' of size 1.

  %phase   0
  \item {\bf phase} \\
        a scalar. 
        The phase P.\\
        Properties : Type 'vec' of size 1.

\end{itemize}
</FILE>

<FILE name='GENSQR_f' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %Amplitude   1
  \item {\bf Amplitude}\\
         a scalar $M$.\\
         Properties : Type 'vec' of size 1.

\end{itemize}
</FILE>

<FILE name='GOTO' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Tag</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    This parameter identifies the Goto block whose scope
	    is defined in this block.
	  </SP>
	  <SP>
	    Properties : Type 'str' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Tag Visibility(1=Local 2=scoped 3= global)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    This parameter identifies the visibility of the block.
	    It can be local(1), scoped(2) or global(3).
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='GOTOMO' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Tag</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    This parameter identifies the Goto block whose scope
	    is defined in this block.
	  </SP>
	  <SP>
	    Properties : Type 'str' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Tag Visibility(1=Local 2=scoped 3= global)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    This parameter identifies the visibility of the block.
	    It can be local(1), scoped(2) or global(3).
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='GotoTagVisibility' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>GotoTag</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The Goto block tag whose visibility is defined by the
	    location of this block.
	  </SP>
	  <SP>
	    Properties : Type 'str' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='GotoTagVisibilityMO' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>GotoTag</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The Goto block tag whose visibility is defined by the
	    location of this block.
	  </SP>
	  <SP>
	    Properties : Type 'str' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='Ground' type='XML'>
<PARAM>
<PARAM_INDENT>

</PARAM_INDENT>
</PARAM>
</FILE>

<FILE name='Gyrator' type='XML'>
  <PARAM>
    <PARAM_INDENT>

    <PARAM_ITEM>
    <PARAM_NAME>G1</PARAM_NAME>
    <PARAM_DESCRIPTION>
      <SP>
      Gyration conductance (-i2/v1) .
      </SP>
      <SP>
      Properties : Type 'vec' of size 1.
      </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>

    <PARAM_ITEM>
    <PARAM_NAME>G2</PARAM_NAME>
    <PARAM_DESCRIPTION>
      <SP>
      Gyration conductance (i1/v2).

      </SP>
      <SP>
      Properties : Type 'vec' of size 1.
      </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>

  </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='HALT_f' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %State on halt   0
  \item {\bf State on halt}\\
        A scalar value to be placed in the state of the block.
        For debugging purposes this allows to distinguish between
        different halts.  \\
        Properties : Type 'vec' of size 1.
\end{itemize}
</FILE>

<FILE name='HYSTHERESIS' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %switch on at   1
  \item {\bf switch on at}\\
        The Switch on point parameter is converted to the input
	data type offline using round-to-nearest and saturation. \\
	Properties : Type 'vec' of size 1

  %switch off at   0
  \item {\bf switch off at}\\
        The Switch off point parameter is converted to the input
	data type offline using round-to-nearest and saturation.  \\
	Properties : Type 'vec' of size 1

  %output when on   1
  \item {\bf output when on}\\
        The output when the relay is on.\\
	Properties : Type 'vec' of size 1

  %output when off   0
  \item {\bf output when off}\\
        The output when the relay is off.\\
	Properties : Type 'vec' of size 1

  %use zero crossing: yes (1), no (0)   1
  \item {\bf use zero crossing: yes }\\
        Select to enable zero crossing
	detection to detect switch-on and switch-off points. \\
	Properties : Type 'vec' of size 1
\end{itemize}
</FILE>

<FILE name='IFTHEL_f' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %Inherit (1: no, 0: yes)   1
  \item {\bf Inherit} \\
        If no, then it inherits the event from event input port,
	elseif yes, then event is activated by regular input port.\\
        Properties : Type 'vec' of size 1.

  %zero-crossing (0: no, 1: yes)   1
  \item {\bf zero-crossing} \\
        Select to enable zero crossing detection.\\
        Properties : Type 'vec' of size 1.

\end{itemize}
</FILE>

<FILE name='IMPSPLIT_f' type='XML'>
<PARAM>
<PARAM_INDENT>

</PARAM_INDENT>
</PARAM>
</FILE>

<FILE name='INIMPL_f' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %Port number   1
  \item {\bf Port number} \\
        Specify the port number of the Inport block.\\
        Properties : Type 'vec' of size 1.
\end{itemize}
</FILE>

<FILE name='INTEGRAL' type='LATEX'>
\begin{itemize}
  %Initial Condition   0
  \item {\bf Initial Condition} \\
        A vector/scalar initial conditions.\\
        Properties : Type 'vec' of size -1.

  %With re-initialization (1:yes, 0:no)   0
  \item {\bf With re-initialization} \\
        To reset its state to the  specified
        initial condition based on an external signal select {\bf 1}.\\
        Properties : Type 'vec' of size 1.

  %With saturation (1:yes, 0:no)   0
  \item {\bf With saturation} \\
        If selected, limits the states to a value between the
	Lower saturation limit and Upper saturation limit
        parameters.\\
        Properties : Type 'vec' of size 1.

  %Upper limit   1
  \item {\bf Upper limit} \\
        The upper limit for the integral.\\
        Properties : Type 'vec' of size -1.

  %Lower limit   -1
  \item {\bf Lower limit} \\
        The lower limit for the integral.\\
        Properties : Type 'vec' of size -1.

\end{itemize}
</FILE>

<FILE name='INTEGRAL_f' type='LATEX'>
\begin{itemize}
  %Initial Condition   0
  \item {\bf Initial Condition} \\
         A scalar that gives the initial condition.\\
         Properties : Type 'vec' of size 1.
\end{itemize}
</FILE>

<FILE name='INTEGRAL_m' type='LATEX'>
\begin{itemize}
  %Initial Condition   0
  \item {\bf Initial Condition} \\
         A vector/scalar initial conditions.\\
         With that parameter, one can define the datatype of
         the input/output. It can be a real or a complex type.\\
         Properties : Type 'mat' of size [-1,-1].

  %With re-initialization (1:yes, 0:no)   0
  \item {\bf With re-initialization} \\
        To reset its state to the  specified
        initial condition based on an external signal select {\bf 1}.\\
        Properties : Type 'vec' of size 1.

  %With saturation (1:yes, 0:no)   0
  \item {\bf With saturation} \\
        If selected, limits the states to a value between the
	Lower saturation limit and Upper saturation limit
	parameters.\\
        Properties : Type 'vec' of size 1.

  %Upper limit   1
  \item {\bf Upper limit} \\
        The upper limit for the integral.\\
        Properties : Type 'mat' of size [-1,-1].

  %Lower limit   -1
  \item {\bf Lower limit} \\
        The lower limit for the integral.\\
        Properties : Type 'mat' of size [-1,-1].

\end{itemize}
</FILE>

<FILE name='INTMUL' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Datatype (3=int32  4=int16 5=int8 ...)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    It indicates the type of the input/output data.
	    It support all the integer datatype, number must be
	    between 3 and 8.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Do on Overflow(0=Nothing 1=Saturate 2=Error)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    When this parameter is set to zero the result is similar
	    to a normal multiplication of two integer matrix. When it
	    is set to 1, on overflow the block saturate the result.
	    When it is set to 2, on overflow an error message box appears.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='INTRP2BLK_f' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %X coord.   [0;1]
  \item {\bf X coord.} \\
        an n-vector (strictly increasing).\\
        Properties : Type 'vec' of size -1

  %Y coord.   [0;1]
  \item {\bf Y coord.} \\
        an m-vector (strictly increasing).\\
        Properties : Type 'vec' of size -1

  %Z values   [0,1;1,2]
  \item {\bf Z values} \\
        an $m \times n$ matrix.\\
        Properties : Type 'mat' of size [-1,-1]

\end{itemize}
</FILE>

<FILE name='INTRPLBLK_f' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %X coord.   [0;1]
  \item {\bf X coord.}\\
        A vector (strictly increasing).\\
        Properties : Type 'vec' of size -1

  %Y coord.   [0;1]
  \item {\bf Y coord.}\\
        A vector (same size as $X$ coord).\\
        Properties : Type 'vec' of size -1

\end{itemize}
</FILE>

<FILE name='INVBLK' type='XML'>
<PARAM>
<PARAM_INDENT>

</PARAM_INDENT>
</PARAM>
</FILE>

<FILE name='INVBLK_f' type='XML'>
<PARAM>
<PARAM_INDENT>

</PARAM_INDENT>
</PARAM>
</FILE>

<FILE name='IN_f' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Port number</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    an integer defining the port number.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='ISELECT_f' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %number of outputs   2
  \item {\bf number of outputs}\\
        a scalar. Number of regular and event outputs. \\
	Properties : Type 'vec' of size 1

  %initial connected output   1
  \item {\bf initial connected output}\\
        an integer. It must be between 1 and
	the number of inputs.   \\
	Properties : Type 'vec' of size 1
\end{itemize}
</FILE>

<FILE name='ISELECT_m' type='LATEX'>
\begin{itemize}

  \item {\bf Datatype(1= real double  2=Complex)}\\
        It indicates the type of the output. It support only the two
	types double (1) and complex (2). If we input another entry
	in this label Scicos will print the message
	"Datatype is not supported".\\
	Properties : Type 'vec' of size 1

  %number of outputs   2
  \item {\bf number of outputs}\\
        a scalar. Number of regular and event outputs. \\
	Properties : Type 'vec' of size 1

  %initial connected output   1
  \item {\bf initial connected output}\\
        an integer. It must be between 1 and
	the number of inputs.   \\
	Properties : Type 'vec' of size 1
\end{itemize}
</FILE>

<FILE name='IdealTransformer' type='XML'>
  <PARAM>
    <PARAM_INDENT>

    <PARAM_ITEM>
    <PARAM_NAME>N</PARAM_NAME>
    <PARAM_DESCRIPTION>
      <SP>
        Turns ratio (N1/N2)
      </SP>
      <SP>
      Properties : Type 'vec' of size 1.
      </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>

  </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='Inductor' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>L (H)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Inductance
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='JKFLIPFLOP' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Initial Value</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Initial Value of the state Q.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='Keyboard_shortcuts' type='XML'>
<PARAM>

</PARAM>
</FILE>

<FILE name='LOGBLK_f' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %Basis ($>$1)   \%e
  \item {\bf Basis} \\
        A real scalar greater than 1.\\
        Properties : Type 'vec' of size 1.

\end{itemize}
</FILE>

<FILE name='LOGIC' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Truth table</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The matrix of outputs. For more information see
	    the description part.
	  </SP>
	  <SP>
	    Properties : Type 'mat' of size [-1,-2].
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>

      <PARAM_ITEM>
	<PARAM_NAME>Inherit(0=no 1=yes)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Specifies if the clock is inherit or not.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='LOGICAL_OP' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %number of inputs   2
  \item {\bf number of inputs}\\
        The number of block inputs. The value must
	be appropriate for the selected operator. \\
	Properties : Type 'vec' of size 1

  %Operator: AND (0), OR (1), NAND (2), NOR (3), XOR (4), NOT (5)   0
  \item {\bf Operator: AND }\\
        The logical operator to be applied to the
        block inputs. Valid choices are the operators from the list. \\
	Properties : Type 'vec' of size 1
\end{itemize}
</FILE>

<FILE name='LOOKUP_f' type='XML'>
<PARAM>
<PARAM_INDENT>

</PARAM_INDENT>
</PARAM>
</FILE>

<FILE name='MATBKSL' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Datatype (1=real double  2=Complex)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    It indicates the type of the output. It support only the two
	    types double (1) and complex (2). If we input another entry
	    in this label Scicos will print the message
	    "Datatype is not supported".
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='MATCATH' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Datatype(1=real double  2=Complex)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    It indicates the type of the output. It support only the two
	    types double (1) and complex (2). If we input another entry
	    in this label Scicos will print the message
	    "Datatype is not supported".
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>number of columns of each matrix</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    It indicates the number of columns of the inputs matrices.
	  </SP>
	  <SP>
	    Properties : Type 'mat' of size [-1,1].
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='MATCATV' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Datatype(1=real double  2=Complex)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    It indicates the type of the output. It support only the two
	    types double (1) and complex (2). If we input another entry
	    in this label Scicos will print the message
	    "Datatype is not supported".
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>number of line of each matrix</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    It indicates the number of rows of the inputs matrices.
	  </SP>
	  <SP>
	    Properties : Type 'mat' of size [-1,1].
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='MATDET' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Datatype(1=real double  2=Complex)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    It indicates the type of the output. It support only the two
	    types double (1) and complex (2). If we input another entry
	    in this label Scicos will print the message
	    "Datatype is not supported".
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='MATDIAG' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Datatype (1=real double  2=Complex)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    It indicates the type of the output. It support only the two
	    types double (1) and complex (2). If we input another entry
	    in this label Scicos will print the message
	    "Datatype is not supported".
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='MATDIV' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Datatype(1=real double  2=Complex)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    It indicates the type of the output. It support only the two
	    types double (1) and complex (2). If we input another entry
	    in this label Scicos will print the message
	    "Datatype is not supported".
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='MATEIG' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Datatype(1=real double  2=Complex)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    It indicates the type of the output. It support only the two
	    types double (1) and complex (2). If we input another entry
	    in this label Scicos will print the message
	    "Datatype is not supported".
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>decomposition type (1=eig values  2=eig values+eig vectors</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    To select the form of the output.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='MATEXPM' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Datatype(1=real double  2=Complex)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    It indicates the type of the output. It support only the two
	    types double (1) and complex (2). If we input another entry
	    in this label Scicos will print the message
	    "Datatype is not supported".
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='MATINV' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Datatype(1=real double  2=Complex)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    It indicates the type of the output. It support only the two
	    types double (1) and complex (2). If we input another entry
	    in this label Scicos will print the message
	    "Datatype is not supported".
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='MATLU' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Datatype(1=real double  2=Complex)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    It indicates the type of the output. It support only the two
	    types double (1) and complex (2). If we input another entry
	    in this label Scicos will print the message
	    "Datatype is not supported".
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='MATMAGPHI' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>decomposition type (1=Complex2MAG&amp;PHI 2=MAG&amp;PHI2Complex)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    It indicates the rule of the conversion.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='MATMUL' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Datatype(1=real double 2=Complex)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    It indicates the type of the output. It support only the two
	    types double (1) and complex (2). If we input another entry
	    in this label Scicos will print the message
	    "Datatype is not supported".
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Multiplication rule (1= * 2= .* )</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    ?
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='MATPINV' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Datatype(1=real double  2=Complex)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    It indicates the type of the output. It support only the two
	    types double (1) and complex (2). If we input another entry
	    in this label Scicos will print the message
	    "Datatype is not supported".
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='MATRESH' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Datatype(1=real double  2=Complex)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    It indicates the type of the output. It support only the two
	    types double (1) and complex (2). If we input another entry
	    in this label Scicos will print the message
	    "Datatype is not supported".
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>input size</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    It indicates the size of the input matrix.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>output size desired</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    It indicates the desired output's size.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='MATSING' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Datatype(1=real double  2=Complex)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    It indicates the type of the output. It support only the two
	    types double (1) and complex (2). If we input another entry
	    in this label Scicos will print the message
	    "Datatype is not supported".
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>decomposition type (1=singular values  2=sing values+matrix U &amp; V)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    It indicates the form of the output. When it is set to one,
	    we have a unique vector output (singular values). When it
	    is set to two we have three same sizes matrices(U,S,V).
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='MATSUM' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Datatype(1=real double  2=Complex)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    It indicates the type of the output. It support only the two
	    types double (1) and complex (2). If we input another entry
	    in this label Scicos will print the message
	    "Datatype is not supported".
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Sum along (0=all 1=lines  2=Columns)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Indicates the used rule to sum. For more information see
	    the description part.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='MATTRAN' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Datatype(1=real double  2=Complex)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    It indicates the data type of the output. It support only
	    the two types double (1) and complex (2). If we input
	    another entry in this label Scicos will print the message
	    "Datatype is not supported".
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='MATZCONJ' type='XML'>
<PARAM>
<PARAM_INDENT>

</PARAM_INDENT>
</PARAM>
</FILE>

<FILE name='MATZREIM' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>decomposition type (1=Complex2Real&amp;Imag 2=Real&amp;Imag2Complex)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Indicates the type to use for the decomposition.
	    See the description part for more information.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='MAXMIN' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %Min (1) or Max (2)    2
  \item {\bf Min or Max} \\
        The function (min or max) to apply to the input.\\
        Properties : Type 'vec' of size 1.

  %Number of input vectors (1 or 2)   1
  \item {\bf Number of input vectors} \\
        The number of inputs to the block.\\
        Properties : Type 'vec' of size 1.

  %zero-crossing (1: yes, 0;no)   1
  \item {\bf zero-crossing} \\
        Select to enable zero crossing detection to
        detect minimum and maximum values.\\
        Properties : Type 'vec' of size 1.

\end{itemize}
</FILE>

<FILE name='MAX_f' type='XML'>
<PARAM>
<PARAM_INDENT>

</PARAM_INDENT>
</PARAM>
</FILE>

<FILE name='MBLOCK' type='LATEX'>
\begin{itemize}
  \item {\bf Input variables}\\
        In this filed, the ports connected to the left hand side of the block are
        defined. If the port is an explicit port, it will be an input port. In
        this case, the variable should be declared in the Modelica program as
        Real. If the port is an implicit port, the variable desinating this
        port should be a "connector". Remind that for implicit port, the
        notion of input and output does not exist and specifying an implicit
        variable in this filed is just placing the port at the left hend side
        of the block.

  \item {\bf Input variables types}\\
        In this filed, the type of ports are specified, i.e., 'I' for implicit
        ports and 'E' for explicit ports. The size of the vector of "input
        variables" and the vector of "input\_vector\_type" should be equal.

  \item {\bf Output variables}\\
        Similar to the input variables vector, the explicit
        output variables and implicit variables which are displayed at the right
        hand side of the block are specified in this filed.

   \item {\bf Output variables types}\\
         The type of variables given in the Output
         variable vector are specified, i.e., 'I' for implicit ports and 'E'
         for explicit ports.

   \item {\bf Parameters in Modelica}\\
         The values of parameters declared in the Modelica program can be
         overloaded. To overload a parameter value, the name of parameters are given in
         this field and their corresponding values are given in the "parameter
         values" fields that are displayed in the second dialog box.

   \item {\bf Parameters properties}\\
         The type of the Modelica parameters. For that time being, one can parametrize
         three types of Modelica variable :

         \begin{itemize}
             \item {\bf 0 :} the parameter is set to be a {\bf Modelica parameter} variable (scalar or vector).

             \item {\bf 1 :} the parameter is set to be an {\bf initial condition of Modelica state} variable
                             (scalar or vector).

             \item {\bf 2 :} the parameter is set to be an {\bf initial condition of Modelica state} variable
                             with the property {\bf fixed=true} (scalar or vector).
         \end{itemize}

    \item {\bf Function name}\\
          The Modelica class name is specified in this filed.  If the Modelica
          class name is specified without any path or extension, an interactive
          window is opened and the user can write or edit the Modelica
          program. This window is opened each time the user clicks on the
          block. If the Modelica class name is specified with path and '.mo'
          extension, the compiler looks for the file and if it is found, the
          file will be compiled, otherwise a window is opened and the user can
          write the Modelica program. This Modelica file will be saved with the
          given filename in the specified path. The next time, only input/output
          characteristics of the block can be changed, and the Modelica file
          should be edited with another text editor.

    \item {\bf Parameter values}\\
          The value of Modelica parameters are given in the "Set parameters values"
          dialog box.

          \begin{figure}
            \begin{center}
              \epsfig{file=MBLOCK_1_1_gui.eps,width=200pt}
            \end{center}
          \end{figure}

          These values that can be scalar or vector, can also be defined in the
          Scicos context. In order to access the Scicos context, click on the
          "Diagram" menu then click on the "Context" submenu.
          For instance, here is an example of overloading of parameters in a Modelica program.

          \begin{verbatim}
Class Example
parameter Real Speed=12.0;
          Real Position[3](start={0.0,0.1,0.5},fixed={true,true,true});
          Real Length[2](start={13.0,12.1});
 ...
equation
  ...
end Example;
          \end{verbatim}

          Parameters vector  = ['Speed';'Position';"Length"]\\
          Parameters properties vector  = [0;2;1]

          Speed value        =  [12.0]\\
          Position value     =  [0.0 ; 0.1 ; POS]\\
          Length value       =  [13.0 ; 12.1]\\

\end{itemize}
</FILE>

<FILE name='MCLOCK_f' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>basic period (1/f)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The parameter description 1.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>multiply by (n)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The parameter description 2.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='MEMORY_f' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>initial condition</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The parameter description 1.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Inherit (1: no, 0: yes)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The parameter description 2.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='MFCLCK_f' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>basic period (1/f)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The parameter description 1.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>multiply by (n)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The parameter description 2.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='MIN_f' type='XML'>
<PARAM>
<PARAM_INDENT>

</PARAM_INDENT>
</PARAM>
</FILE>

<FILE name='MOTOR' type='XML'>
<PARAM>
<PARAM_INDENT>

</PARAM_INDENT>
</PARAM>
</FILE>

<FILE name='MUX' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %number of input ports or vector of sizes   2
  \item {\bf number of input ports or vector of sizes}\\
        integer greater than or equal to 1 and less than 8.\\
        Properties : Type 'vec' of size -1.
\end{itemize}
</FILE>

<FILE name='MUX_f' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %number of input ports or vector of sizes   2
  \item {\bf number of input ports or vector of sizes}\\
        integer greater than or equal to 1 and less than 8.\\
        Properties : Type 'vec' of size -1.
\end{itemize}
</FILE>

<FILE name='M_SWITCH' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %number of inputs   2
  \item {\bf number of inputs}\\
        Specify the number of data inputs to the block. \\
	Properties : Type 'vec' of size 1

  %zero base indexing (0), otherwise 1   1
  \item {\bf zero base indexing }\\
        If selected, the block uses zero-based
        indexing. Otherwise, the block uses one-based indexing.  \\
	Properties : Type 'vec' of size 1

  %rounding rule: int (0), round (1), ceil (2), floor (3)   3
  \item {\bf rounding rule: int }\\
        Select the rounding mode for the output. \\
	Properties : Type 'vec' of size 1
\end{itemize}
</FILE>

<FILE name='M_freq' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Sample time</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Vector of sample time values.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Offset</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Vector of offset values. Must have the same size as the
	    Sample time and each offset value must be less than its
	    corresponding sample time.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='Menu_entries' type='XML'>
<PARAM>

</PARAM>
</FILE>

<FILE name='Modulo_Count' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %initial state ($>$=0)   0
  \item {\bf initial state} \\
         A scalar initial discrete state. \\
         Properties : Type 'vec' of size 1
 
  %Modulo what number ($>$0)   3
  \item {\bf Modulo what number} \\
         Number of required discrete signals.\\
         Properties : Type 'vec' of size 1

\end{itemize}
</FILE>

<FILE name='Multiwindow' type='XML'>
  <PARAM>

  </PARAM>
</FILE>

<FILE name='NEGTOPOS_f' type='XML'>
<PARAM>
<PARAM_INDENT>

</PARAM_INDENT>
</PARAM>
</FILE>

<FILE name='NMOS' type='XML'>
  <PARAM>
    <PARAM_INDENT>

    <PARAM_ITEM>
    <PARAM_NAME>Width [m]</PARAM_NAME>
    <PARAM_DESCRIPTION>
      <SP>
      W
      </SP>
      <SP>
      Properties : Type 'vec' of size 1.
      </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>

    <PARAM_ITEM>
    <PARAM_NAME>Length [m]</PARAM_NAME>
    <PARAM_DESCRIPTION>
      <SP>
      L
      </SP>
      <SP>
      Properties : Type 'vec' of size 1.
      </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>

    <PARAM_ITEM>
    <PARAM_NAME>Transconductance parameter [A/(V*V)]</PARAM_NAME>
    <PARAM_DESCRIPTION>
      <SP>
      Beta
      </SP>
      <SP>
      Properties : Type 'vec' of size 1.
      </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>

    <PARAM_ITEM>
    <PARAM_NAME>Zero bias threshold voltage [V]</PARAM_NAME>
    <PARAM_DESCRIPTION>
      <SP>
      Vt
      </SP>
      <SP>
      Properties : Type 'vec' of size 1.
      </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>

    <PARAM_ITEM>
    <PARAM_NAME>Bulk threshold parameter</PARAM_NAME>
    <PARAM_DESCRIPTION>
      <SP>
      K2
      </SP>
      <SP>
      Properties : Type 'vec' of size 1.
      </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>

    <PARAM_ITEM>
    <PARAM_NAME>Reduction of pinch-off region</PARAM_NAME>
    <PARAM_DESCRIPTION>
      <SP>
      K5
      </SP>
      <SP>
      Properties : Type 'vec' of size 1.
      </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>

    <PARAM_ITEM>
    <PARAM_NAME>Narrowing of channel [m]</PARAM_NAME>
    <PARAM_DESCRIPTION>
      <SP>
      dW
      </SP>
      <SP>
      Properties : Type 'vec' of size 1.
      </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>

    <PARAM_ITEM>
    <PARAM_NAME>Shortening of channel [m]</PARAM_NAME>
    <PARAM_DESCRIPTION>
      <SP>
      dL
      </SP>
      <SP>
      Properties : Type 'vec' of size 1.
      </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>

    <PARAM_ITEM>
    <PARAM_NAME>Drain-Source-Resistance [Ohm]</PARAM_NAME>
    <PARAM_DESCRIPTION>
      <SP>
      RDS
      </SP>
      <SP>
      Properties : Type 'vec' of size 1.
      </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>

  </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='NPN' type='LATEX'>
\begin{table}[h!b!p!]
\begin{tabular}{lll}
\hline
Parameter & Default value & Description \\
\hline
Bf	& 50	  & Forward beta \\
Br	& 0.1	  & Reverse beta\\
Is	& 1.e-16  & Transport saturation current [A]\\
Vak	& 0.02    & Early voltage (inverse), 1/Volt [1/V]\\
Tauf	& 0.12e-9 & Ideal forward transit time [s]\\
Taur	& 5e-9	  & Ideal reverse transit time [s]\\
Ccs	& 1e-12	  & Collector-substrat(ground) cap. [F]\\
Cje	& 0.4e-12 & Base-emitter zero bias depletion cap. [F]\\
Cjc	& 0.5e-12 & Base-coll. zero bias depletion cap. [F]\\
Phie	& 0.8	  & Base-emitter diffusion voltage [V]\\
Me	& 0.4	  & Base-emitter gradation exponent\\
Phic	& 0.8	  & Base-collector diffusion voltage [V]\\
Mc	& 0.333	  & Base-collector gradation exponent\\
Gbc	& 1e-15	  & Base-collector conductance [S]\\
Gbe	& 1e-15	  & Base-emitter conductance [S]\\
Vt	& 0.02585 & Voltage equivalent of temperature [V]\\
EMin	& -100	  & if x < EMin, the exp(x) function is linearized\\
EMax	& 40	  & if x > EMax, the exp(x) function is linearized\\
\hline
\end{tabular}
\end{table}
</FILE>

<FILE name='NRMSOM_f' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %number of inputs   2
  \item {\bf number of inputs}\\
        The number of input ports to be merged.\\
	Properties : Type 'vec' of size 1
\end{itemize}
</FILE>

<FILE name='OUTIMPL_f' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %Port number   1
  \item {\bf Port number} \\
        Specify the port number of the Outport block.\\
        Properties : Type 'vec' of size 1.
\end{itemize}
</FILE>

<FILE name='OUT_f' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Port number</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    an integer defining the port number.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='OpAmp' type='XML'>
  <PARAM>
    <PARAM_INDENT>

  </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='PDE' type='LATEX'>
\begin{itemize}

  \item {\bf a et b} \\
        (double) The two edges of the discretization field.

  \item {\bf specification de l'EDP} \\
        check box to select the PDE operators.

        ai(x), bi(t) (i=1:7) are the operator coefficients.

        type of PDE discriminant (constant or variable, in the
        later case, the sign should be given) 

  \item {\bf Discretization methode} \\
        choix (check box) : is the choice for the manual or the
        automatic mode.

        type : in the manual mode we can give the method type
        (Finite differences, finite elements or finite volumes).

        degr� : method degre (1 or 2 for the FD and FE methods,
        1 for the FV method).

        Nombre de noeuds : to give the number of the nodal points.

  \item {\bf Conditions initiales} \\
        u(x,t0)=, du/dt at t0= : to give the initial conditions.

  \item {\bf Conditions aux limites} \\
        type : two type of the boundray conditions are possible :
        Dirichlet or Neumann.

        expressions : to give then boundray conditions expressions.

  \item {\bf Points de mesures} \\
        To give the list of mesurment points.

  \item {\bf Name} \\
        A getvalue box to give the block name's.

\end{itemize}
</FILE>

<FILE name='PID' type='XML'>
  <PARAM>
    <PARAM_INDENT>

      <PARAM_ITEM>
	<PARAM_NAME>Proportional</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The value of the gain that multiply the error.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>

      <PARAM_ITEM>
	<PARAM_NAME>Integral</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The value of the integral time of the error.(1/Integral)
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>

      <PARAM_ITEM>
	<PARAM_NAME>Derivation</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The value of the derivative time of the error.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>

    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='PMOS' type='XML'>
  <PARAM>
    <PARAM_INDENT>

    <PARAM_ITEM>
    <PARAM_NAME>Width [m]</PARAM_NAME>
    <PARAM_DESCRIPTION>
      <SP>
      W
      </SP>
      <SP>
      Properties : Type 'vec' of size 1.
      </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>

    <PARAM_ITEM>
    <PARAM_NAME>Length [m]</PARAM_NAME>
    <PARAM_DESCRIPTION>
      <SP>
      L
      </SP>
      <SP>
      Properties : Type 'vec' of size 1.
      </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>

    <PARAM_ITEM>
    <PARAM_NAME>Transconductance parameter [A/(V*V)]</PARAM_NAME>
    <PARAM_DESCRIPTION>
      <SP>
      Beta
      </SP>
      <SP>
      Properties : Type 'vec' of size 1.
      </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>

    <PARAM_ITEM>
    <PARAM_NAME>Zero bias threshold voltage [V]</PARAM_NAME>
    <PARAM_DESCRIPTION>
      <SP>
      Vt
      </SP>
      <SP>
      Properties : Type 'vec' of size 1.
      </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>

    <PARAM_ITEM>
    <PARAM_NAME>Bulk threshold parameter</PARAM_NAME>
    <PARAM_DESCRIPTION>
      <SP>
      K2
      </SP>
      <SP>
      Properties : Type 'vec' of size 1.
      </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>

    <PARAM_ITEM>
    <PARAM_NAME>Reduction of pinch-off region</PARAM_NAME>
    <PARAM_DESCRIPTION>
      <SP>
      K5
      </SP>
      <SP>
      Properties : Type 'vec' of size 1.
      </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>

    <PARAM_ITEM>
    <PARAM_NAME>Narrowing of channel [m]</PARAM_NAME>
    <PARAM_DESCRIPTION>
      <SP>
      dW
      </SP>
      <SP>
      Properties : Type 'vec' of size 1.
      </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>

    <PARAM_ITEM>
    <PARAM_NAME>Shortening of channel [m]</PARAM_NAME>
    <PARAM_DESCRIPTION>
      <SP>
      dL
      </SP>
      <SP>
      Properties : Type 'vec' of size 1.
      </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>

    <PARAM_ITEM>
    <PARAM_NAME>Drain-Source-Resistance [Ohm]</PARAM_NAME>
    <PARAM_DESCRIPTION>
      <SP>
      RDS
      </SP>
      <SP>
      Properties : Type 'vec' of size 1.
      </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>

  </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='PNP' type='LATEX'>
\begin{table}[h!b!p!]
\begin{tabular}{lll}
\hline
Parameter & Default value & Description \\
\hline
Bf      & 50      & Forward beta\\
Br      & 0.1     & Reverse beta\\
Is	& 1.e-16  & Transport saturation current [A]\\
Vak     & 0.02    & Early voltage (inverse), 1/Volt [1/V]\\
Tauf	& 0.12e-9 & Ideal forward transit time [s]\\
Taur	& 5e-9    & Ideal reverse transit time [s]\\
Ccs	& 1e-12	  & Collector-substrat(ground) cap. [F]\\
Cje	& 0.4e-12 & Base-emitter zero bias depletion cap. [F]\\
Cjc	& 0.5e-12 & Base-coll. zero bias depletion cap. [F]\\
Phie	& 0.8     & Base-emitter diffusion voltage [V]\\
Me	& 0.4     & Base-emitter gradation exponent\\
Phic	& 0.8	  & Base-collector diffusion voltage [V]\\
Mc	& 0.333	  & Base-collector gradation exponent\\
Gbc	& 1e-15	  & Base-collector conductance [S]\\
Gbe	& 1e-15   & Base-emitter conductance [S]\\
Vt	& 0.02585 & Voltage equivalent of temperature [V]\\
EMin    &-100	  & if x < EMin, the exp(x) function is linearized\\
EMax	& 40	  & if x > EMax, the exp(x) function is linearized\\
\hline
\end{tabular}
\end{table}
</FILE>

<FILE name='POSTONEG_f' type='XML'>
<PARAM>
<PARAM_INDENT>

</PARAM_INDENT>
</PARAM>
</FILE>

<FILE name='POWBLK_f' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %to the power of   1.5
  \item {\bf to the power of} \\
        real scalar.\\
        Properties : Type 'vec' of size 1.

\end{itemize}
</FILE>

<FILE name='PRODUCT' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %Number of inputs or sign vector
  %(multiplication: + 1, division: -1)   [1;-1]
  \item {\bf Number of inputs or sign vector }\\
        Enter the number of inputs.  \\
	Properties : Type 'vec' of size 1
\end{itemize}
</FILE>

<FILE name='PROD_f' type='XML'>
<PARAM>
<PARAM_INDENT>

</PARAM_INDENT>
</PARAM>
</FILE>

<FILE name='PerteDP' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Longueur du tube : L (m)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Length of pipe
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Diam�tre interne du tube : D (m)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Pipe diameter
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Coefficient de perte de charge-frottement(S.U) : lambda</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Coefficient of thermohydraluc resistance
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Altitude entr�e tuyauterie : z1 (m)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Altitude of the first port (z1)
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Altitude sortie tuyauterie : z2 (m)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Altitude of the second port (z2)
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Si &gt;0, masse volumique impos�e fu fluide : p_rho (kg/m3)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Fluid density
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='PotentialSensor' type='XML'>
<PARAM>
<PARAM_INDENT>

</PARAM_INDENT>
</PARAM>
</FILE>

<FILE name='PuitsP' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Pression de la source : P0 (Pa)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Pressure of the thermohydraulic source.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Temperature de la source : T0 (K)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Temperature of the thermohydraulic source.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Enthalpie sp�cifique de la source : H0 (J/kg)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Specific Enthaly of the thermohydraulic source.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>1:temp�rature fix�e - 2:enthalpie fix�e : option_temperature</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Temperature option. 1: fixed temperature - 2: fixed enthalpy
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='QUANT_f' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %Step   0.1
  \item {\bf Step}\\
        scalar, Quantization step \\
        Properties : Type 'vec' of size 1.

  %Quantization Type (1-4)   1
  \item {\bf Quantization Type}\\
        scalar with possible values 1,2,3 or 4 
        \begin{description}
           \item[1] Round method 
           \item[2] Truncation method 
           \item[3] Floor method 
           \item[4] Ceil method 
        \end{description}
        Properties : Type 'vec' of size 1.

\end{itemize}
</FILE>

<FILE name='RAMP' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %Slope   0
  \item {\bf Slope} \\
        The rate of change of the generated signal.\\
        Properties : Type 'vec' of size 1.

  %Start time   0
  \item {\bf Start time} \\
        The time at which the signal begins to be generated.\\
        Properties : Type 'vec' of size 1.

  %Initial output   0
  \item {\bf Initial output} \\
        The initial value of the signal. \\
        Properties : Type 'vec' of size 1.

\end{itemize}
</FILE>

<FILE name='RAND_f' type='LATEX'>
%automatically generated, please edit
\begin{itemize}
  \item {\bf flag} \\
        0 or 1.\\
        0 for uniform distribution on  [A,A+B]. \\
        1 for normal distribution.\\
        Properties : Type 'vec' of size 1.

  \item {\bf A} \\
        vector\\
        Properties : Type 'vec' of size 1.

  \item {\bf B} \\
        vector\\
        Properties : Type 'vec' of size 1.

  \item {\bf seed} \\
        scalar\\
        Seed value for a sequence of random number.\\
        Properties : Type 'vec' of size 1.
\end{itemize}
</FILE>

<FILE name='RAND_m' type='LATEX'>
\begin{itemize}
  \item {\bf Datatype(1=real double  2=complex)} \\
        It indicates the type of the output. It support only the two
	types double (1) and complex (2). If we input another entry
	in this label Scicos will print the message
	"Datatype is not supported". \\
        Properties : Type 'vec' of size 1.

  \item {\bf flag} \\
        0 or 1.\\
        0 for uniform distribution on  [A,A+B]. \\
        1 for normal distribution.\\
        Properties : Type 'vec' of size 1.

  \item {\bf A} \\
        matrix\\
        Properties : Type 'mat' of size [-1,-2].

  \item {\bf B} \\
        matrix\\
        Properties : Type 'mat' of size [-1,-2].

  \item {\bf seed} \\
        matrix\\
        Seed value for a sequence of random number.\\
	First number is for the real part and the second for the
	imaginary part.\\
        Properties : Type 'mat' of size [1,2].
\end{itemize}
</FILE>

<FILE name='RATELIMITER' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %max slope   1
  \item {\bf max slope}\\
        The limit of the derivative of an increasing input signal.\\
	Properties : Type 'vec' of size 1

  %min slope   -1
  \item {\bf min slope}\\
        The limit of the derivative of a decreasing input signal.\\
	Properties : Type 'vec' of size 1
\end{itemize}
</FILE>

<FILE name='READAU_f' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %Input file name   test.au
  \item {\bf Input file name} \\
        a character string defining the path of the file.\\
        Properties : Type 'str' of size 1

  %Buffer size   20
  \item {\bf Buffer size} \\
        To improve efficiency it is possible to buffer
        the input data. 
        Read on the file is only done after each  Buffer
        size call to the block.\\
        Properties : Type 'vec' of size 1

  %Swap mode 0/1   0
  \item {\bf Swap mode 0/1} \\
        With  {\bf Swap mode=1} the file is supposed to be
        coded in "little endian IEEE format" and data are swaped if
        necessary to match the IEEE format of the processor.
        If {\bf Swap mode=0} then automatic bytes swap is disabled.\\ 
        Properties : Type 'vec' of size 1

\end{itemize}
</FILE>

<FILE name='READC_f' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %Time record selection []
  \item {\bf Time record selection} \\
        an empty matrix or a positive integer.\\
        If an integer  i  is given the  i th element of the read
        record is assumed to be the date of the output event.\\
        If empty no output event exists.\\
        Properties : Type 'vec' of size -1

  %Outputs record selection   1
  \item {\bf Outputs record selection} \\
        a vector of positive integer.\\
        $[k_1,\cdots,k_n]$ ,The  $k_i$ th element of the read
	record gives the value of  $i^{th}$ output.\\
        Properties : Type 'vec' of size -1

  %Input file name   foo
  \item {\bf Input file name} \\
        a character string defining the path of the file.\\
        Properties : Type 'str' of size 1

  %Input Format   d  
  \item {\bf Input Format} \\
        a character string defining the format to use.\\
        Properties : Type 'str' of size 1

  %Record size   1
  \item {\bf Record size} \\
        The file is supposed to be formed by a sequence of 
        data with same format. \\
        These data are organized in a sequence of record each 
        of them containing Record size data.\\
        Properties : Type 'vec' of size 1

  %Buffer size (in records)   20
  \item {\bf Buffer size} \\
        To improve efficiency it is possible to buffer the input data. 
        Read on the file is only done after each Buffer size call 
        to the block.\\
        Properties : Type 'vec' of size 1

  %Initial record index   1
  \item {\bf Initial record index} \\
        a scalar. This fixes the first record of the file to use.\\
        Properties : Type 'vec' of size 1

  %Swap mode 0/1   0
  \item {\bf Swap mode 0/1} \\
        With  {\bf Swap mode=1}  the file is supposed to be
        coded in "little endian IEEE format" and data are swaped if
        necessary to match the IEEE format of the processor.
        If {\bf Swap mode=0} then automatic bytes swap is disabled.\\
        Properties : Type 'vec' of size 1
\end{itemize}
</FILE>

<FILE name='REGISTER' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %Register initial condition   0;0;0;0;0;0;0;0;0;0
  \item {\bf Register initial condition} \\
        A column vector. It contains the initial state of the register.\\
        Properties : Type 'vec' of size -1

  \item {\bf Datatype} \\
        This block support all datatypes besides complex.\\
        Properties : Type 'vec' of size -1
\end{itemize}
</FILE>

<FILE name='REGISTER_f' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %Register initial condition   0;0;0;0;0;0;0;0;0;0
  \item {\bf Register initial condition} \\
        A column vector. It contains the initial state of the register.\\
        Properties : Type 'vec' of size -1
\end{itemize}
</FILE>

<FILE name='RELATIONALOP' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %Operator: == (0), ~= (1), $<$ (2), $<$= (3), $>$= (4), $>$ (5)   2
  \item {\bf Operator: == }\\
        Designate the relational operator used to
        compare the two inputs.  \\
	Properties : Type 'vec' of size 1

  %Use zero crossing (no: 0), (yes: 1)   0
  \item {\bf Use zero crossing }\\
        Select to enable zero crossing detection. \\
	Properties : Type 'vec' of size 1
\end{itemize}
</FILE>

<FILE name='RELAY_f' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %number of inputs   2
  \item {\bf number of inputs}\\
        a scalar. Number of regular and event inputs. \\
	Properties : Type 'vec' of size 1

  %initial connected input   1
  \item {\bf initial connected input}\\
        an integer. It must be between 1 and
        the number of inputs.  \\
	Properties : Type 'vec' of size 1
\end{itemize}
</FILE>

<FILE name='RFILE' type='XML'>
  <PARAM>
    <PARAM_INDENT>

    <PARAM_ITEM>
    <PARAM_NAME>Time record selection</PARAM_NAME>
    <PARAM_DESCRIPTION>
      <SP>
      The parameter description 1.
      </SP>
      <SP>
      Properties : Type 'vec' of size -1.
      </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>

    <PARAM_ITEM>
    <PARAM_NAME>Outputs record selection</PARAM_NAME>
    <PARAM_DESCRIPTION>
      <SP>
      The parameter description 2.
      </SP>
      <SP>
      Properties : Type 'vec' of size -1.
      </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>

    <PARAM_ITEM>
    <PARAM_NAME>Input file name</PARAM_NAME>
    <PARAM_DESCRIPTION>
      <SP>
      The parameter description 3.
      </SP>
      <SP>
      Properties : Type 'str' of size 1.
      </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>

    <PARAM_ITEM>
    <PARAM_NAME>Input Format</PARAM_NAME>
    <PARAM_DESCRIPTION>
      <SP>
      The parameter description 4.
      </SP>
      <SP>
      Properties : Type 'str' of size 1.
      </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>

    <PARAM_ITEM>
    <PARAM_NAME>Buffer size</PARAM_NAME>
    <PARAM_DESCRIPTION>
      <SP>
      The parameter description 5.
      </SP>
      <SP>
      Properties : Type 'vec' of size 1.
      </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>

  </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='RFILE_f' type='LATEX'>
\begin{itemize}
  %Time record selection   []
  \item {\bf Time record selection} \\
        an empty matrix or a positive integer. \\
        If an integer  $i$  is given the  $i$ th element of the read
        record is assumed to be the date of the output event.
        If empty no output event exists.\\
	Properties : Type 'vec' of size -1.

  %Outputs record selection   1
  \item {\bf Outputs record selection} \\
        a vector of positive integer.\\
        $[k_1,\cdots,k_n]$. The $k_i$ th element of the read
	record gives the value of  i th output.\\
	Properties : Type 'vec' of size -1.

  %Input file name   foo
  \item {\bf Input file name} \\
        a character string defining the path of the file.\\
	Properties : Type 'str' of size 1.

  %Input Format   (7(e10.3,1x))
  \item {\bf Input Format} \\
        a character string defining the Fortran format
	to use or nothing for an unformatted (binary) write. If given, the
	format must began by a left parenthesis and end by a right
	parenthesis. example: $(e10.3)$.\\
	Properties : Type 'str' of size 1.

  %Buffer size   2
  \item {\bf Buffer size} \\
        To improve efficiency it is possible to buffer
        the input data. read on the file is only done after each
	{\bf Buffer size}  call to the block.\\
	Properties : Type 'vec' of size 1.
\end{itemize}
</FILE>

<FILE name='RICC' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Type (1=Cont  2=Disc)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    For continuous time signal set this parameter to 1.
	    For discrete input time set it to 2.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Model(1=Schr  2=sign(cont) inv(disc))</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    To use the Shur method in computation set this parameter to 1.
	    To use matrix sign function approach in continuous case or
	    the inverse free spectral decomposition method in discrete
	    case set this parameter to 2.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='ROOTCOEF' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Datatype(1=real double  2=Complex)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    This block can only support double inputs values.
	    These values can be real or complex.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>input row size</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The input row size.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='Resistor' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>R (ohm)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Resistance
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='SAMPHOLD' type='XML'>
<PARAM>
<PARAM_INDENT>

</PARAM_INDENT>
</PARAM>
</FILE>

<FILE name='SAMPHOLD_m' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Datatype(1=real double 2=Complex 3=int32 ...)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Output datatype. This block can support all data types.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='SAMPLEHOLD_f' type='XML'>
<PARAM>
<PARAM_INDENT>

</PARAM_INDENT>
</PARAM>
</FILE>

<FILE name='SATURATION' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %Upper limit   1
  \item {\bf Upper limit}\\
        Specify the upper bound on the input signal. When
        the input signal to the Saturation block is above this value, the
        output of the block is clipped to this value. \\
	Properties : Type 'vec' of size 1

  %Lower limit   -1
  \item {\bf Lower limit}\\
        Specify the lower bound on the input signal. When
        the input signal to the Saturation block is below this value, the
        output of the block is clipped to this value. \\
	Properties : Type 'vec' of size 1

  %zero crossing (0:no, 1:yes)   1
  \item {\bf zero crossing }\\
        Select to enable zero crossing detection.  \\
	Properties : Type 'vec' of size 1
\end{itemize}
</FILE>

<FILE name='SAT_f' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Min</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The parameter description 1.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Max</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The parameter description 2.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Slope</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The parameter description 3.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='SAWTOOTH_f' type='XML'>
<PARAM>
<PARAM_INDENT>

</PARAM_INDENT>
</PARAM>
</FILE>

<FILE name='SCALAR2VECTOR' type='LATEX'>
%automatically generated, please edit
\begin{itemize}
  %size of output (-1: if don't know)   -1
  \item {\bf size of output} \\
        Number of component in vector output.\\
        Properties : Type 'vec' of size 1.

\end{itemize}
</FILE>

<FILE name='SELECT_f' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %number of inputs   2
  \item {\bf number of inputs}\\
        a scalar. Number of regular and event inputs. \\
	Properties : Type 'vec' of size 1

  %initial connected input   1
  \item {\bf initial connected input}\\
        an integer. It must be between 1 and
        the number of inputs.  \\
	Properties : Type 'vec' of size 1
\end{itemize}
</FILE>

<FILE name='SELECT_m' type='LATEX'>
%automatically generated, please edit
\begin{itemize}
  \item {\bf Datatype(1= real double  2=Complex)}\\
        It indicates the type of the output. It support only the two
	types double (1) and complex (2). If we input another entry
	in this label Scicos will print the message
	"Datatype is not supported".
	Properties : Type 'vec' of size 1

  %number of inputs   2
  \item {\bf number of inputs}\\
        a scalar. Number of regular and event inputs. \\
	Properties : Type 'vec' of size 1

  %initial connected input   1
  \item {\bf initial connected input}\\
        an integer. It must be between 1 and
        the number of inputs.  \\
	Properties : Type 'vec' of size 1
\end{itemize}
</FILE>

<FILE name='SHIFT' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Datatype (3=int32  4=int16 5=int8 ...)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    It indicates the type of the input/output data.
	    It support all the integer datatype, number must be
	    between 3 and 8.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Number of bits to shift left (use negative number to shift right)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    It indicates the number of bits the input signal is shifted.
	    A positive value indicates a shift left, negative values
	    indicates shift right.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Shifttype(0=Arithmetic 1=Circular)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    It indicate the rule used to shift the bits. It can be
	    arithmetic or circular. When the Shifttype is normal, an
	    arithmetic shift is applied to the input signal. In this
	    case, the bits that are shifted.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='SIGNUM' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %use zero\_crossing (1: yes) (0:no)   1
  \item {\bf use zero\_crossing }\\
        Select to enable zero crossing detection. \\
	Properties : Type 'vec' of size 1
\end{itemize}
</FILE>

<FILE name='SINBLK_f' type='XML'>
<PARAM>
<PARAM_INDENT>

</PARAM_INDENT>
</PARAM>
</FILE>

<FILE name='SLIDER_f' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Min range</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The parameter description 1.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Max range</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The parameter description 2.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Type</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The parameter description 3.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Color</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The parameter description 4.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Block inherits (1) or not (0)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The parameter description 5.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='SPLIT_f' type='XML'>
<PARAM>
<PARAM_INDENT>

</PARAM_INDENT>
</PARAM>
</FILE>

<FILE name='SQRT' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Datatype(1=real double  2=Complex)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    It indicates the type of the output. It support only the two
	    types double (1) and complex (2). If we input another entry
	    in this label Scicos will print the message
	    "Datatype is not supported".
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='SRFLIPFLOP' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Initial Value</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Initial Value of the state Q.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='STEP' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %Step time   1
  \item {\bf Step time} \\
        The time, in seconds, when the output jumps from the
        Initial value parameter to the Final value parameter.\\
        Properties : Type 'vec' of size 1.

  %Initial value   0
  \item {\bf Initial value}\\
        The block output until the simulation time
        reaches the Step time parameter.\\
        Properties : Type 'vec' of size -1.

  %Final value   1
  \item {\bf Final value} \\
        The block output when the simulation time reaches
        and exceeds the Step time parameter.\\
        Properties : Type 'vec' of size -1.

\end{itemize}
</FILE>

<FILE name='STEP_FUNCTION' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %Step time   1
  \item {\bf Step time} \\
        The time, in seconds, when the output jumps from the
        Initial value parameter to the Final value parameter.\\
        Properties : Type 'vec' of size 1.

  %Initial value   0
  \item {\bf Initial value}\\
        The block output until the simulation time
        reaches the Step time parameter.\\
        Properties : Type 'vec' of size -1.

  %Final value   1
  \item {\bf Final value} \\
        The block output when the simulation time reaches
        and exceeds the Step time parameter.\\
        Properties : Type 'vec' of size -1.

\end{itemize}
</FILE>

<FILE name='SUBMAT' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Datatype (1=real double  2=Complex)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Type of the output matrix. It can be double or complex.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Starting Row Index</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The first row of the submatrix.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Ending Row Index</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The last row of the Submatrix.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Starting Column Index</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The first column of the submatrix.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Ending Column Index</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The last row of the submatrix.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Input Dimension</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The Matrix input dimensions.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 2.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='SUMMATION' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Datatype (1=real double  2=complex 3=int32 ...)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    It indicates the type of the input/output data. It support
	    all datatype, number must be between 1 and 8.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Number of inputs or sign vector (of +1, -1)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    It indicates the number of inputs and the operation see the
	    description for more detail.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Do on Overflow(0=Nothing 1=Saturate 2=Error)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    When this parameter is set to zero the result is similar to
	    a normal summation of two integer matrix. When it is set to 1,
	    on overflow the block saturate the result. When it is set to
	    2, on overflow an error message box appears. If the Data type
	    is double or complex this parameter is not used.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='SUM_f' type='XML'>
<PARAM>
<PARAM_INDENT>

</PARAM_INDENT>
</PARAM>
</FILE>

<FILE name='SUPER_f' type='XML'>
<PARAM>
<PARAM_INDENT>

</PARAM_INDENT>
</PARAM>
</FILE>

<FILE name='SWITCH2' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %pass first input if: u2$>$=a (0), u2$>$a (1), u2~=a (2)   0
  \item {\bf pass first input if: u2$>$=a }\\
        Select the conditions under
	which the first input is passed. You can make the block check
	whether the control input is greater than or equal to the
	threshold value, purely greater than the threshold value, or
	nonzero. If the	control input meets the condition set in this
	parameter, then the first input is passed. Otherwise, the third
	input is passed. \\
	Properties : Type 'vec' of size 1.

  %threshold a   0
  \item {\bf threshold a}\\
        Assign the switch threshold that determines which
	input is passed to the output. \\
	Properties : Type 'vec' of size 1.

  %use zero crossing: yes (1), no (0)   1
  \item {\bf use zero crossing: yes }\\
        Select to enable zero crossing detection. \\
	Properties : Type 'vec' of size 1.
\end{itemize}
</FILE>

<FILE name='SWITCH2_m' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  \item {\bf Datatype(1= real double  2=Complex)}\\
        a scalar. Give the datatype of the inputs/output. \\
	Properties : Type 'vec' of size 1

  %pass first input if: u2$>$=a (0), u2$>$a (1), u2~=a (2)   0
  \item {\bf pass first input if: u2$>$=a }\\
        Select the conditions under
	which the first input is passed. You can make the block check
	whether the control input is greater than or equal to the
	threshold value, purely greater than the threshold value, or
	nonzero. If the	control input meets the condition set in this
	parameter, then the first input is passed. Otherwise, the
	third input is passed. \\
	Properties : Type 'vec' of size 1.

  %threshold a   0
  \item {\bf threshold a}\\
        Assign the switch threshold that determines which
	input is passed to the output. \\
	Properties : Type 'vec' of size 1.

  %use zero crossing: yes (1), no (0)   1
  \item {\bf use zero crossing: yes }\\
        Select to enable zero crossing detection. \\
	Properties : Type 'vec' of size 1.
\end{itemize}
</FILE>

<FILE name='SWITCH_f' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %number of inputs   2
  \item {\bf number of inputs}\\
        Specify the number of data inputs to the block.\\
	Properties : Type 'vec' of size 1

  %connected input   1
  \item {\bf connected input}\\
        an integer. It must be between 1 and  the
	number of inputs. \\
	Properties : Type 'vec' of size 1
\end{itemize}
</FILE>

<FILE name='SampleCLK' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Sample time</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The Sample time value.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Offset</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    The offset value.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='Sigbuilder' type='LATEX'>
The parameters of  Sigbuilder block is the same as
that of \htmladdnormallink{CURVE\_c}{CURVE_c.htm} block.
</FILE>

<FILE name='SineVoltage' type='XML'>
  <PARAM>
    <PARAM_INDENT>

      <PARAM_ITEM>
	<PARAM_NAME>Amplitude (Volt)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	  Sine voltage amplitude
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>

      <PARAM_ITEM>
	<PARAM_NAME>phase (rad)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
           phase shift of the sine voltage
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>

      <PARAM_ITEM>
	<PARAM_NAME>Frequency (Hz)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	  Sine voltage frequency
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>

      <PARAM_ITEM>
	<PARAM_NAME>Voltageoffset (V)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Offset Voltage of the sine voltage
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>

      <PARAM_ITEM>
	<PARAM_NAME>Timeoffset (s)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Start time. During the start time, the signal value is
	equal to the voltage offset.
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size 1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>

    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='SourceP' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Pression de la source : P0 (Pa)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Pressure of the thermohydraulic source
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Temperature de la source : T0 (K)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Temperature of the thermohydraulic source
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Enthalpie sp�cifique de la source : H0 (J/kg)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Specific enthalpie of  the thermohydraulic source
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>1:temp�rature fix�e - 2:enthalpie fix�e : option_temperature</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Temperature option. 1: fixed temperature - 2: fixed enthalpy
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='Switch' type='XML'>
  <PARAM>
    <PARAM_INDENT>

    <PARAM_ITEM>
    <PARAM_NAME>Resistance in On state (Ohm)</PARAM_NAME>
    <PARAM_DESCRIPTION>
      <SP>
      Switch resistance when the Switch is closed
      </SP>
      <SP>
      Properties : Type 'vec' of size 1.
      </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>

    <PARAM_ITEM>
    <PARAM_NAME>Resistance in Off state (Ohm)</PARAM_NAME>
    <PARAM_DESCRIPTION>
      <SP>
     Switch  resistance when the switch is open
      </SP>
      <SP>
      Properties : Type 'vec' of size 1.
      </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>

  </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='TANBLK_f' type='XML'>
<PARAM>
<PARAM_INDENT>

</PARAM_INDENT>
</PARAM>
</FILE>

<FILE name='TCLSS' type='LATEX'>
\begin{itemize}

 %A matrix   -1
 \item {\bf $A$ matrix} \\
       A square matrix. \\
       Properties : Type 'mat' of size [-1,-1].

 %B matrix   1
 \item {\bf B matrix} \\
       The $ B $ matrix,  []  if system has no input.\\
       Properties : Type 'mat' of size ["size(\%1,2)","-1"].

 %C matrix   1
 \item {\bf C matrix} \\
       The  $C$  matrix ,  []  if system has no output.\\
       Properties : Type 'mat' of size ["-1","size(\%1,2)"].

 %D matrix   0
 \item {\bf D matrix} \\
       The $ D$  matrix,  []  if system has no  D  term.\\
       Properties : Type 'mat' of size [-1,-1].

 %Initial state   0
 \item {\bf Initial state} \\
       A vector/scalar initial state of the system.\\
       Properties : Type 'vec' of size "size(\%1,2)".

\end{itemize}
</FILE>

<FILE name='TCLSS_f' type='LATEX'>
\begin{itemize}

 %A matrix   -1
 \item {\bf $A$ matrix} \\
       A square matrix. \\
       Properties : Type 'mat' of size [-1,-1].

 %B matrix   1
 \item {\bf B matrix} \\
       The $ B $ matrix,  []  if system has no input.\\
       Properties : Type 'mat' of size ["size(\%1,2)","-1"].

 %C matrix   1
 \item {\bf C matrix} \\
       The  $C$  matrix ,  []  if system has no output.\\
       Properties : Type 'mat' of size ["-1","size(\%1,2)"].

 %D matrix   0
 \item {\bf D matrix} \\
       The $ D$  matrix,  []  if system has no  D  term.\\
       Properties : Type 'mat' of size [-1,-1].

 %Initial state   0
 \item {\bf Initial state} \\
       A vector/scalar initial state of the system.\\
       Properties : Type 'vec' of size "size(\%1,2)".

\end{itemize}
</FILE>

<FILE name='TEXT_f' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %Text   Text
  \item {\bf Text}\\
        a character string, Text to be displayed \\
	Properties : Type 'str' of size -1

  %Font number   2
  \item {\bf Font number}\\
        a positive integer less than 6, number of
        selected font (see {\bf xset})  \\
	Properties : Type 'vec' of size 1

  %Font size   1
  \item {\bf Font size}\\
        a positive integer, selected font size (see {\bf xset}). \\
	Properties : Type 'vec' of size 1
\end{itemize}
</FILE>

<FILE name='TIME_DELAY' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %Delay   1
  \item {\bf Delay}\\
        The amount of simulation time that the input signal is
        delayed before being propagated to the output. The value must be
        nonnegative. \\
	Properties : Type 'vec' of size 1

  %initial input   0
  \item {\bf initial input}\\
        The output generated by the block between the
        start of the simulation and the Time delay. \\
	Properties : Type 'vec' of size 1

  %Buffer size   1024
  \item {\bf Buffer size}\\
        The initial memory allocation for the number of
        points to store. \\
	Properties : Type 'vec' of size 1
\end{itemize}
</FILE>

<FILE name='TIME_f' type='XML'>
<PARAM>
<PARAM_INDENT>

</PARAM_INDENT>
</PARAM>
</FILE>

<FILE name='TKSCALE' type='XML'>
  <PARAM>
    <PARAM_INDENT>

    <PARAM_ITEM>
    <PARAM_NAME>Min value</PARAM_NAME>
    <PARAM_DESCRIPTION>
      <SP>
      An integer specifying the min value in the range of the scale.
      </SP>
      <SP>
      Properties : Type 'vec' of size 1.
      </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>

    <PARAM_ITEM>
    <PARAM_NAME>Max value</PARAM_NAME>
    <PARAM_DESCRIPTION>
      <SP>
      An integer specifying the max value in the range of the scale.
      </SP>
      <SP>
      Properties : Type 'vec' of size 1.
      </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>

    <PARAM_ITEM>
    <PARAM_NAME>Normalization</PARAM_NAME>
    <PARAM_DESCRIPTION>
      <SP>
      The output of the block is the integer value specified by the slider (an
integer between Min value and the Max value) divided by this Normalization factor.
      </SP>
      <SP>
      Properties : Type 'vec' of size 1.
      </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>

  </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='TOWS_c' type='XML'>
  <PARAM>
    <PARAM_INDENT>

    <PARAM_ITEM>
    <PARAM_NAME>Size of buffer</PARAM_NAME>
    <PARAM_DESCRIPTION>
      <SP>
        Set the size of the input buffer. That gives
	the total number of samples recorded during the
	simulation.
      </SP>
      <SP>
	That buffer is a circulate buffer.
      </SP>
      <SP>
      Properties : Type 'vec' of size 1.
      </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>

    <PARAM_ITEM>
    <PARAM_NAME>Scilab variable name</PARAM_NAME>
    <PARAM_DESCRIPTION>
      <SP>
      Set the name of the Scilab variable.
      This must be a valid variable name.
      </SP>
      <SP>
      The simulation must be finished to retrieve
      that variable in the Scilab workspace.
      </SP>
      <SP>
      Properties : Type 'str' of size 1.
      </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>

    <PARAM_ITEM>
    <PARAM_NAME>Inherit (no:0, yes:1)</PARAM_NAME>
    <PARAM_DESCRIPTION>
      <SP>
       Options to choose event inheritance from
       regular input or from explicit event input (0).
      </SP>
      <SP>
      Properties : Type 'vec' of size 1.
      </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>

  </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='TRASH_f' type='XML'>
<PARAM>
<PARAM_INDENT>

</PARAM_INDENT>
</PARAM>
</FILE>

<FILE name='TrigFun' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %Function   sin
  \item {\bf Function}\\
        The trigonometric function.\\
	Properties : Type 'str' of size 1
\end{itemize}
</FILE>

<FILE name='VARIABLE_DELAY' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %Max delay   1
  \item {\bf Max delay}\\
        It defines the largest value the time delay input
	can have.The value cannot be negative.   \\
	Properties : Type 'vec' of size 1.

  %initial input   0
  \item {\bf initial input}\\
        The output generated by the block until the
	simulation time first exceeds the time delay input. \\
	Properties : Type 'vec' of size 1.

  %Buffer size   1024
  \item {\bf Buffer size}\\
        The number of points the block can store. \\
	Properties : Type 'vec' of size 1.
\end{itemize}
</FILE>

<FILE name='VVsourceAC' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Frequency (Hz)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Frequency of the output sinosoid voltage
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='VanneReglante' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Cvmax</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Cvmax (maximum opening of the valve)
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>p_rho</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Fluid density
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='VariableResistor' type='XML'>
<PARAM>
<PARAM_INDENT>

</PARAM_INDENT>
</PARAM>
</FILE>

<FILE name='VoltageSensor' type='XML'>
<PARAM>
<PARAM_INDENT>

</PARAM_INDENT>
</PARAM>
</FILE>

<FILE name='VsourceAC' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>Amplitude (Volt)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Amplitude of the  output sinusoid voltage
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Frequency (Hz)</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Frequency of the output sinusoid voltage
	  </SP>
	  <SP>
	    Properties : Type 'vec' of size -1.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='WFILE' type='LATEX'>
\begin{itemize}
  %Input size   1
  \item {\bf Input size} \\
        a scalar. This fixes the input size.\\
        Properties : Type 'vec' of size 1.

  %Output file name   foo
  \item {\bf Output file name} \\
        a character string defining the path of the file.\\
	Properties : Type 'str' of size 1.

  %Ouput Format   (7(e10.3,1x))
  \item {\bf Output Format} \\
        a character string defining the Fortran format
	to use or nothing for an unformatted (binary) write. If given, the
	format must began by a left parenthesis and end by a right
	parenthesis. example: $(e10.3)$.\\
	Properties : Type 'str' of size 1.

  %Buffer size   2
  \item {\bf Buffer size} \\
        To improve efficiency it is possible to buffer
        the input data. Write on the file is only done after each 
        {\bf Buffer size} call to the block.\\
	Properties : Type 'vec' of size 1.
\end{itemize}
</FILE>

<FILE name='WFILE_f' type='LATEX'>
\begin{itemize}
  %Input size   1
  \item {\bf Input size} \\
        a scalar. This fixes the input size.\\
        Properties : Type 'vec' of size 1.

  %Output file name   foo
  \item {\bf Output file name} \\
        a character string defining the path of the file.\\
	Properties : Type 'str' of size 1.

  %Ouput Format   (7(e10.3,1x))
  \item {\bf Output Format} \\
        a character string defining the Fortran format
	to use or nothing for an unformatted (binary) write. If given, the
	format must began by a left parenthesis and end by a right
	parenthesis. example: $(e10.3)$.\\
	Properties : Type 'str' of size 1.

  %Buffer size   2
  \item {\bf Buffer size} \\
        To improve efficiency it is possible to buffer
        the input data. Write on the file is only done after each 
        {\bf Buffer size} call to the block.\\
	Properties : Type 'vec' of size 1.
\end{itemize}
</FILE>

<FILE name='WRITEAU_f' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %Buffer size   2
  \item {\bf Buffer size} \\
        To improve efficiency it is possible to buffer
        the input data. read on the file is only done after each  Buffer
        size call to the block.\\
        Properties : Type 'vec' of size 1

  %Swap mode 0/1   0
  \item {\bf Swap mode 0/1} \\
        With  {\bf Swap mode=1}  the file is supposed to be
        coded in "little endian IEEE format" and data are swaped if
        necessary to match the IEEE format of the processor. If  {\bf Swap
        mode=0} then automatic bytes swap is disabled.\\
        Properties : Type 'vec' of size 1

\end{itemize}
</FILE>

<FILE name='WRITEC_f' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %Input size   1
  \item {\bf Input size} \\
        a scalar, the size of the input.\\
        Properties : Type 'vec' of size 1

  %Output file name   foo
  \item {\bf Output file name} \\
        a character string defining the output file name.\\
        Properties : Type 'str' of size 1

  %Output Format   c  
  \item {\bf Output Format} \\
        a character string defining the format to use.\\
        Properties : Type 'str' of size 1

  %Buffer size   2
  \item {\bf Buffer size} \\
        To improve efficiency it is possible to buffer the
        input data. read on the file is only done after each {\bf Buffer
        size} call to the block.\\
        Properties : Type 'vec' of size 1

  %Swap mode 0/1   0
  \item {\bf Swap mode 0/1} \\
        With {\bf Swap mode=1} the file is supposed to be
        coded in ``little endian IEEE format'' and data are swaped if
        necessary to match the IEEE format of the processor.
        If {\bf Swap mode=0} then automatic bytes swap is disabled.\\
        Properties : Type 'vec' of size 1

\end{itemize}
</FILE>

<FILE name='ZCROSS_f' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %Input size   1
  \item {\bf Input size}\\
        a positive integer. \\
        Property : Type 'vec' of size 1.
\end{itemize}
</FILE>

<FILE name='block_type' type='XML'>
  <PARAM>

  </PARAM>
</FILE>

<FILE name='buildouttb' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>outtb</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    a list of size n.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>lnksz</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    That parameter gives the size of Scilab object in outtb.
	  </SP>
	  <SP>
	    This matrix of integer or real numbers can have a
	    n,2 or 2,n size.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>lnktyp</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    That parameters gives the type of Scilab object in outtb :
	  </SP>
	  <SP>
	    1 : double
	  </SP>
	  <SP>
	    2 : complex
	  </SP>
	  <SP>
	    3 : int32
	  </SP>
	  <SP>
	    4 : int16
	  </SP>
	  <SP>
	    5 : int8
	  </SP>
	  <SP>
	    6 : uint32
	  </SP>
	  <SP>
	    7 : uint16
	  </SP>
	  <SP>
	    8 : uint8
	  </SP>
	  <SP>
	    else : double
	  </SP>
	  <SP>
	    This matrix of integer or real numbers can have a
	    n,1 or 1,n size.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='c_block' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %input ports sizes   1
  \item {\bf input ports sizes}\\
        Number of regular input ports.\\
        Properties : Type 'vec' of size -1.

  %output port sizes   1
  \item {\bf output port sizes}\\
        Number of regular output ports.\\
        Properties : Type 'vec' of size -1.

  %System parameters vector   []
  \item {\bf System parameters vector}\\
        Number of parameters that this
        function accepts. \\
        Properties : Type 'vec' of size -1.

  %function name   toto
  \item {\bf function name}\\
        Name of the function to be generated.\\
        Properties : Type 'str' of size -1.
\end{itemize}
</FILE>

<FILE name='create_palette' type='XML'>
  <PARAM>
  <PARAM_INDENT>

    <PARAM_ITEM>
    <PARAM_NAME>Path</PARAM_NAME>
    <PARAM_DESCRIPTION>
       <SP>
        a string given the directory path that contains Scicos blocks interfacing functions.
       </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>

    <PARAM_ITEM>
    <PARAM_NAME>routines</PARAM_NAME>
    <PARAM_DESCRIPTION>
       <SP>
        a vector of strings that contains names of computational functions used in scicos blocks.
       </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>

    <PARAM_ITEM>
    <PARAM_NAME>IntFunc</PARAM_NAME>
    <PARAM_DESCRIPTION>
       <SP>
       a vector of strings that contains names of interfacing functions used in scicos blocks.
       </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>
  </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='curblock' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>blk</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    the current block number in the compiled structure.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='data_type' type='XML'>
  <PARAM>

  </PARAM>
</FILE>

<FILE name='fortran_block' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %input ports sizes   1
  \item {\bf input ports sizes}\\
        Number of regular input ports.\\
        Properties : Type 'vec' of size -1.

  %output port sizes   1
  \item {\bf output port sizes}\\
        Number of regular output ports.\\
        Properties : Type 'vec' of size -1.

  %System parameters vector   []
  \item {\bf System parameters vector}\\
        Number of parameters that this
        function accepts. \\
        Properties : Type 'vec' of size -1.

  %function name   forty
  \item {\bf function name}\\
        Name of the function to be generated.\\
        Properties : Type 'vec' of size -1.
\end{itemize}
</FILE>

<FILE name='freq_div' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %Phase (0 to division factor -1)   0
  \item {\bf Phase }\\
        positive scalar.\\
	Properties : Type 'vec' of size 1

  %Division factor   3
  \item {\bf Division factor}\\
        an integer greater than 1.\\
	Properties : Type 'vec' of size 1
\end{itemize}
</FILE>

<FILE name='func_block' type='XML'>
<PARAM>
<PARAM_INDENT>

</PARAM_INDENT>
</PARAM>
</FILE>

<FILE name='generic_block' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %simulation function   sinblk
  \item {\bf simulation function}\\
        Name of the function to be loaded.\\
	Properties : Type 'vec' of size 1

  %function type (0,1,2,..)   1
  \item {\bf function type }\\
        Type of the computational function supported
	by  Scicos.\\
	Properties : Type 'vec' of size 1

  %input ports sizes   1
  \item {\bf input ports sizes}\\
        Number of regular input ports. \\
	Properties : Type 'vec' of size -1

  %output port sizes   1
  \item {\bf output port sizes}\\
        Number of regular input ports. \\
	Properties : Type 'vec' of size -1

  %input event ports sizes   []
  \item {\bf input event ports sizes}\\
        a vector of ones, size of event input
	ports. The size of the vector gives the number of event
	input ports.\\
	Properties : Type 'vec' of size -1

  %output events ports sizes   []
  \item {\bf output events ports sizes}\\
        a vector of ones, size of event
	output ports. The size of the vector gives the number of of event
	output ports. \\
	Properties : Type 'vec' of size -1

  %initial continuous state   []
  \item {\bf initial continuous state}\\
        A column vector of Initial State
	Conditions.  \\
	Properties : Type 'vec' of size -1

  %initial discrete state   []
  \item {\bf initial discrete state}\\
        A column vector Initial discrete  Conditions.\\
	Properties : Type 'vec' of size -1

  %Real parameters vector   []
  \item {\bf Real parameters vector}\\
        column vector. Any parameters used 
	in the block can be defined here as a column vector.  \\
	Properties : Type 'vec' of size -1

  %Integer parameters vector   []
  \item {\bf Integer parameters vector}\\
        column vector. Any integer
	parameters used in the block can be defined here as a column
	vector. \\
	Properties : Type 'vec' of size -1

  %initial firing vector ($<$0 for no firing)   []
  \item {\bf initial firing vector }\\
        vector. Size of this vector corresponds
	to the number of event outputs. The value of the i-th entry
	specifies the time of the preprogrammed event firing on the i-th
	output event port. If less than zero, no event is preprogrammed.\\
	Properties : Type 'vec' of size sum(\%6)

  %direct feedthrough (y or n)   y
  \item {\bf direct feedthrough }\\
        character "y" or "n", specifies if block
	has a direct input to output feedthrough. \\
	Properties : Type 'vec' of size 1

  %time dependence (y or n)   n
  \item {\bf time dependence }\\
        Time dependance : character "y" or "n",
	specifies if block output depends explicitly on time. \\
	Properties : Type 'vec' of size 1
\end{itemize}
</FILE>

<FILE name='generic_block2' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %simulation function   sinblk
  \item {\bf simulation function}\\
        Name of the function to be loaded.\\
	Properties : Type 'vec' of size 1

  %function type (0,1,2,..)   1
  \item {\bf function type }\\
        Type of the computational function supported
	by  Scicos.\\
	Properties : Type 'vec' of size 1

  %input ports sizes   1
  \item {\bf input ports sizes}\\
        Number of regular input ports. \\
	Properties : Type 'vec' of size -1

  %output port sizes   1
  \item {\bf output port sizes}\\
        Number of regular input ports. \\
	Properties : Type 'vec' of size -1

  %input event ports sizes   []
  \item {\bf input event ports sizes}\\
        a vector of ones, size of event input
	ports. The size of the vector gives the number of event
	input ports.\\
	Properties : Type 'vec' of size -1

  %output events ports sizes   []
  \item {\bf output events ports sizes}\\
        a vector of ones, size of event
	output ports. The size of the vector gives the number of of event
	output ports. \\
	Properties : Type 'vec' of size -1

  %initial continuous state   []
  \item {\bf initial continuous state}\\
        A column vector of Initial State
	Conditions.  \\
	Properties : Type 'vec' of size -1

  %initial discrete state   []
  \item {\bf initial discrete state}\\
        A column vector Initial discrete  Conditions.\\
	Properties : Type 'vec' of size -1

  %Real parameters vector   []
  \item {\bf Real parameters vector}\\
        column vector. Any parameters used 
	in the block can be defined here as a column vector.  \\
	Properties : Type 'vec' of size -1

  %Integer parameters vector   []
  \item {\bf Integer parameters vector}\\
        column vector. Any integer
	parameters used in the block can be defined here as a column
	vector. \\
	Properties : Type 'vec' of size -1

  %number of modes   0
  \item {\bf number of modes}\\
        Number of Right hand side functions in the
	system. \\
	Properties : Type 'vec' of size 1

  %number of zero\_crossings   0
  \item {\bf number of zero\_crossings}\\
        No. of zero-crossings\\
	Properties : Type 'vec' of size 1

  %initial firing vector ($<$0 for no firing)   []
  \item {\bf initial firing vector }\\
        vector. Size of this vector corresponds
	to the number of event outputs. The value of the i-th entry
	specifies the time of the preprogrammed event firing on the i-th
	output event port. If less than zero, no event is preprogrammed.\\
	Properties : Type 'vec' of size sum(\%6)

  %direct feedthrough (y or n)   y
  \item {\bf direct feedthrough }\\
        character "y" or "n", specifies if block
	has a direct input to output feedthrough. \\
	Properties : Type 'vec' of size 1

  %time dependence (y or n)   n
  \item {\bf time dependence }\\
        Time dependance : character "y" or "n",
	specifies if block output depends explicitly on time. \\
	Properties : Type 'vec' of size 1
\end{itemize}
</FILE>

<FILE name='generic_block3' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %simulation function   sinblk
  \item {\bf Simulation function}\\
        Name of the function to be loaded.\\
	Properties : Type 'str' of size 1

  %function type (0,1,2,..)   1
  \item {\bf Function type }\\
        Type of the computational function supported
	by  Scicos.\\
	Properties : Type 'vec' of size 1

  %input ports sizes   1
  \item {\bf Input ports sizes}\\
        Number of regular input ports. \\
	Properties : Type 'mat' of size [-1,2]

  %input ports type   1
  \item {\bf Input ports type}\\
        Set the datatype of the regular input ports. \\
	Properties : Type 'vec' of size -1

  %output port sizes   1
  \item {\bf Iutput port sizes}\\
        Number of regular input ports. \\
	Properties : Type 'mat' of size [-1,2]

  %output ports type   1
  \item {\bf Output ports type}\\
        Set the datatype of the regular output ports. \\
	Properties : Type 'vec' of size -1

  %input event ports sizes   []
  \item {\bf Input event ports sizes}\\
        a vector of ones, size of event input
	ports. The size of the vector gives the number of event
	input ports.\\
	Properties : Type 'vec' of size -1

  %output events ports sizes   []
  \item {\bf Output events ports sizes}\\
        a vector of ones, size of event
	output ports. The size of the vector gives the number of of event
	output ports. \\
	Properties : Type 'vec' of size -1

  %initial continuous state   []
  \item {\bf Initial continuous state}\\
        A column vector of Initial State
	Conditions.  \\
	Properties : Type 'vec' of size -1

  %initial discrete state   []
  \item {\bf Initial discrete state}\\
        A column vector Initial discrete  Conditions.\\
	Properties : Type 'vec' of size -1

  %initial object state list()
  \item {\bf Initial object state}\\
        A Scilab list that defined the initial object state (oz).\\
	Properties : Type 'lis' of size -1

  %Real parameters vector   []
  \item {\bf Real parameters vector}\\
        column vector. Any parameters used 
	in the block can be defined here as a column vector.  \\
	Properties : Type 'vec' of size -1

  %Integer parameters vector   []
  \item {\bf Integer parameters vector}\\
        column vector. Any integer
	parameters used in the block can be defined here as a column
	vector. \\
	Properties : Type 'vec' of size -1

  %object parameters list  list()
  \item {\bf Object parameters list  }\\
        A Scilab list that defined the list of 
        the Object parameters (opar).\\
	Properties : Type 'lis' of size -1

  %number of modes   0
  \item {\bf Number of modes}\\
        Number of Right hand side functions in the
	system. \\
	Properties : Type 'vec' of size 1

  %number of zero\_crossings   0
  \item {\bf Number of zero\_crossings}\\
        No. of zero-crossings\\
	Properties : Type 'vec' of size 1

  %initial firing vector ($<$0 for no firing)   []
  \item {\bf Initial firing vector }\\
        vector. Size of this vector corresponds
	to the number of event outputs. The value of the i-th entry
	specifies the time of the preprogrammed event firing on the i-th
	output event port. If less than zero, no event is preprogrammed.\\
	Properties : Type 'vec' of size sum(\%6)

  %direct feedthrough (y or n)   y
  \item {\bf Direct feedthrough }\\
        character "y" or "n", specifies if block
	has a direct input to output feedthrough. \\
	Properties : Type 'vec' of size 1

  %time dependence (y or n)   n
  \item {\bf Time dependence }\\
        Time dependance : character "y" or "n",
	specifies if block output depends explicitly on time. \\
	Properties : Type 'vec' of size 1
\end{itemize}
</FILE>

<FILE name='get_scicos_version' type='XML'>
  <PARAM>
  <PARAM_INDENT>

    <PARAM_ITEM>
    <PARAM_NAME>scicos_ver</PARAM_NAME>
    <PARAM_DESCRIPTION>
       <SP>
       a string given the current number version of Scicos.
       </SP>
    </PARAM_DESCRIPTION>
    </PARAM_ITEM>
  </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='getblocklabel' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>blk</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Integer parameter. Set the index of a block
	    (in the compiled structure).
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>label</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    String parameter. Gives the string of the label of the
	    block numbered blk.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='getscicosvars' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>str,str1,str2,...</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    That parameter can be a string or a matrix of string.
	    The following entries are allowed :
	  </SP>
	  <SP>
	    "x" : get the continuous state register.
	  </SP>
	  <SP>
	    "nx" : get the length of the continuous state register.
	  </SP>
	  <SP>
	    "xptr" : get the pointers register of the continuous state register.
	  </SP>
	  <SP>
	    "zcptr" : get the pointers register of the zero-crossing surfaces register.
	  </SP>
	  <SP>
	    "z" : get the discrete state register.
	  </SP>
	  <SP>
	    "nz" : get the length of the continuous state register.
	  </SP>
	  <SP>
	    "zptr" : get the pointers register of the discrete state register.
	  </SP>
	  <SP>
	    "noz" : get the number of elements of the discrete object state list.
	  </SP>
	  <SP>
	    "oz" : get the discrete object state list.
	  </SP>
	  <SP>
	    "ozsz" : get the size of the elements of the discrete object state list.
	  </SP>
	  <SP>
	    "oztyp" : get the type of the elements of the discrete object state list.
	  </SP>
	  <SP>
	    "ozptr" : get the pointers register of the discrete object state list.
	  </SP>
	  <SP>
	    "rpar" : get the real parameter register.
	  </SP>
	  <SP>
	    "rpptr" : get the pointers register of the real parameter register.
	  </SP>
	  <SP>
	    "ipar" : get the integer parameter register.
	  </SP>
	  <SP>
	    "ipptr" : get the pointers register of the integer parameter register.
	  </SP>
	  <SP>
	    "opar" : get the object parameter list.
	  </SP>
	  <SP>
	    "oparsz" : get the size of the elements of the object parameter list.
	  </SP>
	  <SP>
	    "opartyp" : get the type of the elements of the object parameter list.
	  </SP>
	  <SP>
	    "opptr" : get the pointers register of the object parameter list.
	  </SP>
	  <SP>
	    "outtb" : get the output register.
	  </SP>
	  <SP>
	    "inpptr" : get the pointers register of the number of regular input ports.
	  </SP>
	  <SP>
	    "outptr" :  get the pointers register of the number of regular output ports.
	  </SP>
	  <SP>
	    "inplnk" : get the pointers register of the links connected to regular input ports.
	  </SP>
	  <SP>
	    "outlnk" : get the pointers register of the links connected to regular output ports.
	  </SP>
	  <SP>
	    "subs" : not used
	  </SP>
	  <SP>
	    "tevts" : get the current date register of the agenda.
	  </SP>
	  <SP>
	    "evtspt" : get the current event register of the agenda.
	  </SP>
	  <SP>
	    "pointi" : get the next event to be activated.
	  </SP>
	  <SP>
	    "iord" : get the vector of blocks activated at the start of the simulation.
	  </SP>
	  <SP>
	    "oord" : get the vector of blocks whose outputs affects computation of continuous state derivatives.
	  </SP>
	  <SP>
	    "zord" : get the vector of blocks whose outputs affects computation of zero-crossing surfaces.
	  </SP>
	  <SP>
	    "funtyp" : get the vector of type of computational functions.
	  </SP>
	  <SP>
	    "ztyp" : get the pointers vector for blocks which use zero-crossing surfaces.
	  </SP>
	  <SP>
	    "cord" : get the vector of blocks whose outputs evolve continuously.
	  </SP>
	  <SP>
	    "ordclk" : get the matrix associated to blocks activated by output activation ports.
	  </SP>
	  <SP>
	    "clkptr" : get the pointers vector for output activation ports.
	  </SP>
	  <SP>
	    "ordptr" : get the pointers vector to ordclk designating the part of ordclk corresponding to a given activation.
	  </SP>
	  <SP>
	    "critev" : get the vector of the critical events.
	  </SP>
	  <SP>
	    "mod" : get the vector pointers of block modes.
	  </SP>
	  <SP>
	    "nmod" : get the length of the vector pointers of block modes.
	  </SP>
	  <SP>
	    "iz" : get the register that store pointers of block->work.
	  </SP>
	  <SP>
	    "izptr" : get the pointers vector of the register that store C pointers of block->work.
	  </SP>
	  <SP>
	    "nblk" : get the number of block.
	  </SP>
	  <SP>
	    "outtbptr" : get the register that store C pointers of outtb.
	  </SP>
	  <SP>
	    "outtbpsz" : get the register that store the size of the elements of outtb.
	  </SP>
	  <SP>
	    "outtbtyp" : get the register that store the type of the elements of outtb.
	  </SP>
	  <SP>
	    "nlnk" : get the number of output.
	  </SP>
	  <SP>
	    "ncord" : get the number of blocks whose outputs evolve continuously.
	  </SP>
	  <SP>
	    "nordptr" : get the number of blocks whose outputs evolve by activation.
	  </SP>
	  <SP>
	    "iwa" : n.d.
	  </SP>
	  <SP>
	    "blocks" : get a scilab list that contains all block structures contains in the diagram.
	  </SP>
	  <SP>
	    "ng" : get length of the zero-crossing surfaces register.
	  </SP>
	  <SP>
	    "g" : get the zero-crossing surfaces register.
	  </SP>
	  <SP>
	    "t0" : get the current time of the simulation.
	  </SP>
	  <SP>
	    "tf" : get the final time of the simulation.
	  </SP>
	  <SP>
	    "Atol" : get the integrator absolute tolerance for the numerical solver.
	  </SP>
	  <SP>
	    "rtol" :  get the integrator relative tolerance for the numerical solver.
	  </SP>
	  <SP>
	    "ttol" : get the tolerance on time of the simulator.
	  </SP>
	  <SP>
	    "deltat" : get the maximum integration time interval.
	  </SP>
	  <SP>
	    "hmax" : get the maximum step size for the numerical solver.
	  </SP>
	  <SP>
	    "nelem" : get the number of elements in outtb.
	  </SP>
	  <SP>
	    "outtb_elem" : get the vector of the number of elements in outtb.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>

      <PARAM_ITEM>
	<PARAM_NAME>myvar</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
            That output parameter can be an int32 matrix, a
	    double matrix or a Tlist. This is given by the input
	    parameter.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='lincos' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>scs_m</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    a Scicos data structure
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>x0</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    column vector. Continuous state around which linearization
	    to be done (default 0)
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>u0</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    column vector. Input around which linearization to be done
	    (default 0)
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>param</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    param: list with two elements (default list(1.d-6,0))
	    param(1): scalar. Perturbation level for linearization;
	    the following variation is used
	    del([x;u])_i = param(1)+param(1)*1d-4*abs([x;u])_i.
	    param(2): scalar. Time t.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>sys</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    state-space system
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='phase_simulation' type='XML'>
  <PARAM>
  <PARAM_INDENT>
    <PARAM_ITEM>
      <PARAM_NAME>psim</PARAM_NAME>
      <PARAM_DESCRIPTION>
	<SP>
	  get the current phase of the simulation
	</SP>
	<PARAM_INDENT>
	  <PARAM_ITEM>
	    <PARAM_NAME>1</PARAM_NAME>
	    <PARAM_DESCRIPTION>
	      <SP>
		The simulator is on a discrete activation time.
	      </SP>
	    </PARAM_DESCRIPTION>
	  </PARAM_ITEM>
	</PARAM_INDENT>
	<PARAM_INDENT>
	  <PARAM_ITEM>
	    <PARAM_NAME>2</PARAM_NAME>
	    <PARAM_DESCRIPTION>
	      <SP>
		The simulator is realizing a continuous time domain
		integration.
	      </SP>
	    </PARAM_DESCRIPTION>
	  </PARAM_ITEM>
	</PARAM_INDENT>
      </PARAM_DESCRIPTION>
    </PARAM_ITEM>
  </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='pointer_xproperty' type='LATEX'>
\begin{itemize}
  \item {\bf xprop} \\
    The value gives the type of the states :
    \begin{itemize}
      \item -1 : an algebraic state.\\
      \item 1  : a differential state.
    \end{itemize}
\end{itemize}
</FILE>

<FILE name='sci_struct' type='XML'>
  <PARAM>

  </PARAM>
</FILE>

<FILE name='scicos' type='LATEX'>
\begin{itemize}
  \item {\bf toto : } either a Scicos diagram structure (scs\_m) or a  character
    string containing the path of the diagram file (.cos or .cosf
    extension).  If no input argument is used, an empty diagram is
    opened (default name Untitled).

  \item {\bf scs\_m : } Scicos diagram structure after edition.
\end{itemize}
</FILE>

<FILE name='scicos_block' type='XML'>
  <PARAM>

  </PARAM>
</FILE>

<FILE name='scicos_block4_rout' type='XML'>
  <PARAM>

  </PARAM>
</FILE>

<FILE name='scicos_cpr' type='XML'>
  <PARAM>

  </PARAM>
</FILE>

<FILE name='scicos_debug' type='XML'>
  <PARAM>
  <PARAM_INDENT>
    <PARAM_ITEM>
      <PARAM_NAME>level</PARAM_NAME>
      <PARAM_DESCRIPTION>
	<SP>
	  set/get the current level of the Scicos simulation debugging.
	</SP>
	<PARAM_INDENT>
	  <PARAM_ITEM>
	    <PARAM_NAME>0</PARAM_NAME>
	    <PARAM_DESCRIPTION>
	      <SP>
               no debugging.
	      </SP>
	    </PARAM_DESCRIPTION>
	  </PARAM_ITEM>
	</PARAM_INDENT>
	<PARAM_INDENT>
	  <PARAM_ITEM>
	    <PARAM_NAME>1</PARAM_NAME>
	    <PARAM_DESCRIPTION>
	      <SP>
               light debugging information printout.
	      </SP>
	    </PARAM_DESCRIPTION>
	  </PARAM_ITEM>
	</PARAM_INDENT>
	<PARAM_INDENT>
	  <PARAM_ITEM>
	    <PARAM_NAME>2</PARAM_NAME>
	    <PARAM_DESCRIPTION>
	      <SP>
              more information printout and execution of Debug Block if any in diagram.
	      </SP>
	    </PARAM_DESCRIPTION>
	  </PARAM_ITEM>
	</PARAM_INDENT>
	<PARAM_INDENT>
	  <PARAM_ITEM>
	    <PARAM_NAME>3</PARAM_NAME>
	    <PARAM_DESCRIPTION>
	      <SP>
              silent debugging mode (no information printout) and execution of Debug Block if any in diagram.
	      </SP>
	    </PARAM_DESCRIPTION>
	  </PARAM_ITEM>
	</PARAM_INDENT>
      </PARAM_DESCRIPTION>
    </PARAM_ITEM>
  </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='scicos_diagram' type='XML'>
  <PARAM>

  </PARAM>
</FILE>

<FILE name='scicos_graphics' type='XML'>
  <PARAM>

  </PARAM>
</FILE>

<FILE name='scicos_link' type='XML'>
  <PARAM>

  </PARAM>
</FILE>

<FILE name='scicos_model' type='XML'>
  <PARAM>

  </PARAM>
</FILE>

<FILE name='scicos_params' type='XML'>
  <PARAM>

  </PARAM>
</FILE>

<FILE name='scicos_sim' type='XML'>
  <PARAM>

  </PARAM>
</FILE>

<FILE name='scicos_simulate' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>scs_m</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	  Scicos diagram (obtained by "load file.cos"). Note that the
	  version of file.cos must be the current version. If not,
	  load into Scicos and save.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Info</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	  a list. It must be list() at the first call, then use output
	  Info as input Info for the next calls. Info contains compilation
	  and simulation information and is used to avoid recompilation
	  when not needed.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>%scicos_context</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	  a Scilab struct containing values of symbolic variables used
	  in the context and Scicos blocks. This is often used to change a
	  parameter in the diagram context. In that case, make sure that in
	  the diagram context the variable is defined such that it can be
	  modified. Say a variable "a" is to be defined in the context
	  having value 1, and later in batch mode, we want to change the
	  value of "a". In that case, in the context of the diagram place:
	  if ~exists('a') then a=1,end If you want then to run the
	  simulation in batch mode using the value a=2, set:
	  %scicos_context.a=2
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>flag</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    string. If it equals 'nw' (no window), then blocks using
	    graphical windows are not executed. Note that the list of such
	    blocks must be updated as new blocks are added.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>Info</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    contains compilation and simulation information and is used
	    to avoid recompilation when not needed. Normally it should
	    not be modified.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='scicos_state' type='XML'>
  <PARAM>

  </PARAM>
</FILE>

<FILE name='scicos_time' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>t</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    that is the current simulated time returned in real number.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='scicosim' type='XML'>
  <PARAM>
    <PARAM_INDENT>

      <PARAM_ITEM>
	<PARAM_NAME>state</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Scilab tlist containing initial state. Usually generated by
	    Scicos Compile. After loading a compiled .cos file, it can be
	    found in %cpr.state.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>

      <PARAM_ITEM>
	<PARAM_NAME>tcur</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    starting time of simulation. At the beginning it must be zero.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>

      <PARAM_ITEM>
	<PARAM_NAME>tf</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    final simulation time.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>

      <PARAM_ITEM>
	<PARAM_NAME>sim</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Scilab tlist containing compilation results. Usually
	    generated by Scicos Compile. After loading a compiled
	    .cos file, it can be found in %cpr.sim.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>

      <PARAM_ITEM>
	<PARAM_NAME>str</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    'start' , 'run' or 'finish'. Function must be first called
	    with 'start', then with 'run' one or more times, and
	    finally with 'finish'.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>

      <PARAM_ITEM>
	<PARAM_NAME>tol</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    vector [atol,rtol,ttol,deltat,realtimescale,solver,hmax]
	    where atol, rtol are respectively the absolute and relative
	    tolerances for ode or dae solver, ttol is the precision on
	    event dates (must be very small), deltat is maximum
	    integration interval for each call to ode solver (sometimes
	    needed to force restaring the call to solver),
	    realtimescale is the correspondance between simulation
	    time and real time (0 means no slowing down),
	    solver is the choice of solver (0: lsodar, 100: daskr),
	    hmax: max step size used by solver.
	    Default: [0.0001,1.000E-06,1.000E-10,100001,0,0]
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>

      <PARAM_ITEM>
	<PARAM_NAME>state</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    state after simulation
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>

      <PARAM_ITEM>
	<PARAM_NAME>t</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    final reached time. Usually tf but not always.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='scifunc_block' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %input ports sizes   1
  \item {\bf input ports sizes}\\
        a scalar. Number of regular input ports \\
	Properties : Type 'vec' of size -1

  %output port sizes   1
  \item {\bf output port sizes}\\
        a scalar. Number of regular output ports \\
	Properties : Type 'vec' of size -1

  %input event ports sizes   []
  \item {\bf input event ports sizes}\\
        a scalar. Number of input event ports \\
	Properties : Type 'vec' of size -1

  %output events ports sizes   []
  \item {\bf output events ports sizes}\\
        a scalar. Number of output event ports \\
	Properties : Type 'vec' of size -1

  %initial continuous state   []
  \item {\bf initial continuous state}\\
        a column vector. \\
	Properties : Type 'vec' of size -1

  %initial discrete state   []
  \item {\bf initial discrete state}\\
        a column vector. \\
	Properties : Type 'vec' of size -1

  %System parameters vector   []
  \item {\bf System parameters vector}\\
        a string: c or d ({\bf CBB} or {\bf
	DBB}), other  types are not supported.   \\
	Properties : Type 'vec' of size -1

  %initial firing vector ($<$0 for no firing)   []
  \item {\bf initial firing vector }\\
        vector. Size of this vector corresponds
	to the number of event outputs. The value of the i-th entry
	specifies the time of the preprogrammed event firing on the i-th
	output event port. If less than zero, no event is preprogrammed. \\
	Properties : Type 'vec' of size sum(\%4)

  %is block always active (0:no, 1:yes)   0
  \item {\bf is block always active }\\
        other dialogues are opened
	consecutively where used may input Scilab code associated with the
	computations needed (block initialization, outputs, continuous and
	discrete state, output events date, block ending)\\
	Properties : Type 'vec' of size 1
 \end{itemize}
</FILE>

<FILE name='scifunc_block_m' type='LATEX'>
%automatically generated, please edit
\begin{itemize}

  %input ports sizes   1
  \item {\bf input ports sizes}\\
        a scalar. Number of regular input ports \\
	Properties : Type 'vec' of size -1

  %output port sizes   1
  \item {\bf output port sizes}\\
        a scalar. Number of regular output ports \\
	Properties : Type 'vec' of size -1

  %input event ports sizes   []
  \item {\bf input event ports sizes}\\
        a scalar. Number of input event ports \\
	Properties : Type 'vec' of size -1

  %output events ports sizes   []
  \item {\bf output events ports sizes}\\
        a scalar. Number of output event ports \\
	Properties : Type 'vec' of size -1

  %initial continuous state   []
  \item {\bf initial continuous state}\\
        a column vector. \\
	Properties : Type 'vec' of size -1

  %initial discrete state   []
  \item {\bf initial discrete state}\\
        a column vector. \\
	Properties : Type 'vec' of size -1

  %System parameters vector   []
  \item {\bf System parameters vector}\\
        a string: c or d ({\bf CBB} or {\bf
	DBB}), other  types are not supported.   \\
	Properties : Type 'vec' of size -1

  %initial firing vector ($<$0 for no firing)   []
  \item {\bf initial firing vector }\\
        vector. Size of this vector corresponds
	to the number of event outputs. The value of the i-th entry
	specifies the time of the preprogrammed event firing on the i-th
	output event port. If less than zero, no event is preprogrammed. \\
	Properties : Type 'vec' of size sum(\%4)

  %is block always active (0:no, 1:yes)   0
  \item {\bf is block always active }\\
        other dialogues are opened
	consecutively where used may input Scilab code associated with the
	computations needed (block initialization, outputs, continuous and
	discrete state, output events date, block ending)\\
	Properties : Type 'vec' of size 1
 \end{itemize}
</FILE>

<FILE name='set_blockerror' type='LATEX'>
 \begin{itemize}
   \item {\bf n} : an error number. The following calls are allowed :
          \begin{itemize}
             \item {\bf set\_blockerror(-1)}\\
	           the block has been called with input out of its domain
             \item {\bf set\_blockerror(-2)}\\
	           singularity in a block
             \item {\bf set\_blockerror(-3)}\\
	           block produces an internal error
             \item {\bf set\_blockerror(-16)}\\
	           cannot allocate memory in block
          \end{itemize}
 \end{itemize}
</FILE>

<FILE name='set_xproperty' type='LATEX'>
\begin{itemize}
  \item {\bf xprop} \\
    The value gives the type of the states :
    \begin{itemize}
      \item -1 : an algebraic state.\\
      \item 1  : a differential state.
    \end{itemize}
\end{itemize}
</FILE>

<FILE name='steadycos' type='XML'>
  <PARAM>
    <PARAM_INDENT>

      <PARAM_ITEM>
	<PARAM_NAME>scs_m</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    a Scicos data structure
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>

      <PARAM_ITEM>
	<PARAM_NAME>X</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    column vector. Continuous state. Can be set to [] if zero.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>

      <PARAM_ITEM>
	<PARAM_NAME>U</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    column vector. Input. Can be set to [] if zero.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>

      <PARAM_ITEM>
	<PARAM_NAME>Y</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    column vector. Output. Can be set to [] if zero.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>

      <PARAM_ITEM>
	<PARAM_NAME>Indx</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    index of entries of X that are not fixed. If all can vary,
	    set to 1:$
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>

      <PARAM_ITEM>
	<PARAM_NAME>Indu</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    index of entries of U that are not fixed. If all can vary,
	    set to 1:$
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>

      <PARAM_ITEM>
	<PARAM_NAME>Indy</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    index of entries of Y that are not fixed. If all can vary,
	    set to 1:$
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>

      <PARAM_ITEM>
	<PARAM_NAME>Indxp</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    index of entries of XP (derivative of x) that need not be
	    zero. If all can vary, set to 1:$. Default [].
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>

      <PARAM_ITEM>
	<PARAM_NAME>param</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    list with two elements (default list(1.d-6,0)). param(1):
	    scalar. Perturbation level for linearization; the following
	    variation is used del([x;u])_i =
	    param(1)+param(1)*1d-4*abs([x;u])_i.
	    param(2): scalar. Time t.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>

      <PARAM_ITEM>
	<PARAM_NAME>X</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    steady state X
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>

      <PARAM_ITEM>
	<PARAM_NAME>U</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    stationary input U
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>

      <PARAM_ITEM>
	<PARAM_NAME>Y</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    output corresponding to steady state found
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>

      <PARAM_ITEM>
	<PARAM_NAME>XP</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    derivative of the state corresponding to steady state found
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='use_flag' type='XML'>
  <PARAM>

  </PARAM>
</FILE>

<FILE name='var2vec' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>var</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Input parameter. Can be any types of Scilab objects.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>vec</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Output parameter. A vector of real numbers.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>

<FILE name='vec2var' type='XML'>
  <PARAM>
    <PARAM_INDENT>
      <PARAM_ITEM>
	<PARAM_NAME>vec</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Input parameter. A vector of real numbers.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
      <PARAM_ITEM>
	<PARAM_NAME>var</PARAM_NAME>
	<PARAM_DESCRIPTION>
	  <SP>
	    Output parameter. Can be any types of Scilab objects.
	  </SP>
	</PARAM_DESCRIPTION>
      </PARAM_ITEM>
    </PARAM_INDENT>
  </PARAM>
</FILE>


</DATA>
