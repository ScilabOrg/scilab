#
# Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
# Copyright (C) INRIA - 2006-2008 - Sylvestre Ledru
# Copyright (C) DIGITEO - 2009 - Sylvestre Ledru
#
# This file must be used under the terms of the CeCILL.
# This source file is licensed as described in the file COPYING, which
# you should have received as part of this distribution.  The terms
# are also available at
# http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt
#

## Process this file with automake to produce Makefile.in (which will be changed by the ./configure)

AUTOMAKE_OPTIONS = 1.9 dist-zip dist-bzip2

SUBDIRS= libs \
	modules \
	contrib

ACLOCAL_AMFLAGS = -I m4/

changelogs = CHANGES CHANGES_5.1.X

bin_PROGRAMS		= scilab-bin scilab-cli-bin

bin_SCRIPTS			= bin/scilab bin/scilab-adv-cli bin/scilab-cli


scilab_bin_LDFLAGS 		=
scilab_cli_bin_LDFLAGS		=

if IS_MACOSX
scilab_bin_LDFLAGS 		+= -framework Cocoa
endif

scilab_bin_CFLAGS 		=
# --no-undefined --relax

# libshell is mandatory here since main_linux.c depends on it.
# Localization dep already exists because of the `exportLocaleToSystem' symbol
# (causing issues on some platform)
COMMON_LIBS = $(top_builddir)/modules/shell/libscishell.la \
$(top_builddir)/modules/core/libscicore.la \
$(top_builddir)/modules/completion/libscicompletion.la \
$(top_builddir)/modules/localization/libscilocalization.la \
$(top_builddir)/modules/api_scilab/libsciapi_scilab.la \
$(top_builddir)/modules/io/libsciio.la \
$(LTLIBINTL)

SCILAB_LIB=$(top_builddir)/modules/libscilab.la
SCILAB_CLI_LIB=$(top_builddir)/modules/libscilab-cli.la


scilab_bin_SOURCES		= 	$(top_srcdir)/modules/core/src/cpp/scilab.cpp \
							$(top_srcdir)/modules/core/src/cpp/tasks.cpp

scilab_bin_LDADD 		= $(COMMON_LIBS) $(SCILAB_LIB)

scilab_bin_CPPFLAGS		= $(scilab_cli_bin_CPPFLAGS)

# Match scilab -nwni (ie command line without graphics)
scilab_cli_bin_SOURCES	=	$(top_srcdir)/modules/core/src/cpp/scilab.cpp \
							$(top_srcdir)/modules/core/src/cpp/tasks.cpp

scilab_cli_bin_CFLAGS 		= -DWITHOUT_GUI
scilab_cli_bin_LDADD 		= $(COMMON_LIBS) $(SCILAB_CLI_LIB)

scilab_cli_bin_CPPFLAGS	= \
						-I$(top_srcdir)/modules/shell/includes/ \
						-I$(top_srcdir)/modules/console/includes/ \
						-I$(top_srcdir)/modules/output_stream/includes/ \
						-I$(top_srcdir)/modules/parse/includes/ \
						-I$(top_srcdir)/modules/abstractSyntaxTree/includes/ \
						-I$(top_srcdir)/modules/symbol/includes/ \
						-I$(top_srcdir)/modules/functions_manager/includes/ \
						-I$(top_srcdir)/modules/types/includes/ \
						-I$(top_srcdir)/modules/system_env/includes/ \
						-I$(top_srcdir)/modules/operations/includes/ \
						-I$(top_srcdir)/modules/elementary_functions/includes/

if NEED_JAVA
# Don't do it for scilab_cli_bin. We want to be able to call it without
# the java libs
	scilab_bin_LDADD += $(JAVA_JNI_LIBS)
endif

if IS_SOLARIS
# The binary itself needs this dep
	scilab_bin_LDADD += $(BLAS_LIBS)
endif

if ENABLE_STATIC
scilab_static_bin_LDFLAGS 		= -static -static-libgcc --start-group
scilab_static_bin_CFLAGS =  -Wl,--start-group `$(CXX) -print-file-name=libstdc++.a`

#-static
bin_PROGRAMS	   		+= scilab-static-bin
scilab_static_bin_LDADD = $(top_builddir)/modules/libscilab.la

scilab_static_bin_SOURCES = $(scilab_bin_SOURCES)
endif

LANG_DOMAIN=scilab

TARGETS_ALL=macros

#  The user wants to compile the localization files
if GENERATE_LOCALIZATION_FILES
TARGETS_ALL+=localization
endif

all-local: $(TARGETS_ALL)

rootdir=$(pkgdatadir)/etc/
root_DATA = $(top_srcdir)/etc/scilab.start \
$(top_srcdir)/etc/scilab.quit \
$(top_srcdir)/etc/modules.xml \
$(top_srcdir)/etc/classpath.xml \
$(top_srcdir)/etc/librarypath.xml \
$(top_srcdir)/etc/toolboxes.xml \
$(top_builddir)/etc/jvm_options.xml \
$(top_srcdir)/etc/yasp_modules.xml


infofilesdir=$(pkgdatadir)/
infofiles_DATA = $(top_srcdir)/CHANGES \
$(top_srcdir)/CHANGES_2.X \
$(top_srcdir)/CHANGES_3.X \
$(top_srcdir)/CHANGES_4.X \
$(top_srcdir)/CHANGES_5.0.X \
$(top_srcdir)/CHANGES_5.1.X \
$(top_srcdir)/CHANGES_5.2.X \
$(top_srcdir)/ACKNOWLEDGEMENTS \
$(top_srcdir)/COPYING \
$(top_srcdir)/COPYING-FR \
$(top_srcdir)/README_Unix \
$(top_srcdir)/RELEASE_NOTES \
$(top_srcdir)/RELEASE_NOTES_5.0.X \
$(top_srcdir)/RELEASE_NOTES_5.1.X \
$(top_srcdir)/RELEASE_NOTES_5.2.X \
$(top_srcdir)/Readme_Visual.txt \
$(top_srcdir)/README_Windows.txt

iconsdir=$(pkgdatadir)/icons/
icons_DATA = $(top_srcdir)/icons/scilab.xpm \
icons/puffin_128.xpm \
icons/puffin_256.xpm \
icons/puffin_32.xpm \
icons/puffin_48.xpm \
icons/puffin.png \
icons/puffin.icns \
icons/scilab.icns

valgrinddir=$(pkgdatadir)/tools/profiling
valgrind_DATA = $(top_srcdir)/tools/profiling/valgrind.supp

macros:
#$(top_builddir)/scilab-cli-bin $(top_builddir)/bin/scilab-cli
#	-@( cd $(top_builddir) ; \
#	echo "$(top_builddir)/bin/scilab-cli -ns -f modules/functions/scripts/buildmacros/buildmacros.sce" ; \
#	$(top_builddir)/bin/scilab-cli -ns -f modules/functions/scripts/buildmacros/buildmacros.sce)

doc:
#$(top_builddir)/scilab-bin $(top_builddir)/bin/scilab-adv-cli
#if BUILD_HELP
#	-@if test -x $(top_builddir)/scilab-bin; then \
#		cd $(top_builddir);\
#		echo "-- Building documentation (English) --"; \
#		echo "LANG=C SCI_DISABLE_TK=1 SCI_JAVA_ENABLE_HEADLESS=1 DOCBOOK_ROOT=$(DOCBOOK_ROOT) $(top_builddir)/bin/scilab-adv-cli -nb -nouserstartup -e \"xmltojar([],[],'en_US');exit;\"";\
#		LANG=C SCI_DISABLE_TK=1 SCI_JAVA_ENABLE_HEADLESS=1 DOCBOOK_ROOT=$(DOCBOOK_ROOT) $(top_builddir)/bin/scilab-adv-cli -nb -l en_US -nouserstartup -e "xmltojar([],[],'en_US');exit;";\
#		echo "-- Building documentation (French) --"; \
#		echo "SCI_DISABLE_TK=1 SCI_JAVA_ENABLE_HEADLESS=1 DOCBOOK_ROOT=$(DOCBOOK_ROOT) $(top_builddir)/bin/scilab-adv-cli -nb -nouserstartup -e \"xmltojar([],[],'fr_FR');exit;\""; \
#		SCI_DISABLE_TK=1 SCI_JAVA_ENABLE_HEADLESS=1 DOCBOOK_ROOT=$(DOCBOOK_ROOT) $(top_builddir)/bin/scilab-adv-cli -nb -nouserstartup -e "xmltojar([],[],'fr_FR');exit;"; \
#	else \
#		echo "Cannot find Scilab-adv-cli binary"; \
#	fi
#else
#	@echo "Cannot buid help. Add --enable-build-help to the ./configure if you want to build it."
#endif

check-help:$(top_builddir)/scilab-cli-bin $(top_builddir)/bin/scilab-cli
	@if test -x $(top_builddir)/scilab-cli-bin; then \
		echo "-- Checking documentation (English) --"; \
		$(top_builddir)/bin/scilab-cli -nb -l en -e 'check_help();exit;';\
		echo "-- Checking documentation (French) --"; \
		$(top_builddir)/bin/scilab-cli  -nb -l fr -e 'check_help();exit;';\
	else \
		echo "Cannot find Scilab binary"; \
	fi

check-recursive: check-local
check-local:
	@if test -x $(top_builddir)/scilab-bin; then \
		COMMAND="test_run();quit";\
		export LANG=C;\
		$(top_builddir)/bin/scilab-adv-cli -nb -e "$$COMMAND"; \
	else \
		echo "Cannot find Scilab binary"; \
	fi

distclean-recursive: distclean-generated clean-recursive

clean-recursive: clean-doc clean-localization clean-macros clean-generated

clean-macros:
# Find is necessary because of subdirs...
	-@echo "-- Cleaning macros (*.bin) --"; \
	find $(top_builddir) -name "*.bin" | xargs --no-run-if-empty rm 2> /dev/null; \
	echo "-- Cleaning names files (names) --"; \
	find $(top_builddir)/modules/*/macros -name "names" | xargs --no-run-if-empty rm 2> /dev/null; \
	echo "-- Cleaning lib files (lib) --"; \
	find $(top_builddir)/modules/*/macros -name "lib" | xargs --no-run-if-empty rm 2> /dev/null


clean-doc:
	-@if test -x $(top_builddir)/scilab-cli-bin; then \
		echo "$(top_builddir)/bin/scilab-cli -nb -l fr -e 'clean_help();exit;'"; \
		$(top_builddir)/bin/scilab-cli -nb -l fr -e 'clean_help();exit;'; \
		echo "$(top_builddir)/bin/scilab-cli  -nb -l en -e 'clean_help();exit;'"; \
		$(top_builddir)/bin/scilab-cli -nb -l en -e 'clean_help();exit;'; \
	else \
		echo "Cannot find Scilab binary"; \
	fi; \
	echo "rmdir $(top_builddir)/modules/helptools/javaHelp/"; \
	rm -rf $(top_builddir)/modules/helptools/javaHelp/; \
	echo "rm -rf $(top_builddir)/modules/scicos/help/*/scilab_*_help"; \
	rm -rf $(top_builddir)/modules/scicos/help/*/scilab_*_help; \
	echo "rm -f $(top_builddir)/modules/scicos/help/en_US/master_help.xml"; \
	rm -f $(top_builddir)/modules/scicos/help/en_US/master_help.xml; \
	echo "rm -f $(top_builddir)/modules/scicos/jar/"; \
	rm -rf $(top_builddir)/modules/scicos/jar/

clean-tests:
	@if test -x $(top_builddir)/scilab-cli-bin; then \
		$(top_builddir)/bin/scilab-cli -nb -l fr -e 'test_clean();exit;'; \
	else \
		echo "Cannot find Scilab binary"; \
	fi

clean-localization:
	rm -rf $(top_srcdir)/locale/

clean-generated:
	rm -rf $(top_builddir)/modules/scicos_blocks/build/ 2> /dev/null

distclean-generated:
	rm -f $(top_builddir)/modules/core/includes/stack.h 2> /dev/null


if IS_MACOSX
# Used for mac os x because it needs to remove the charset=UTF-8 because it is breaking the accents.
MACOSX=1
endif

# The user wants to compile the localization files
# Please note that ALL_LINGUAS is defined in configure.ac
if GENERATE_LOCALIZATION_FILES
localization:
	@echo "-- Build localization (.mo from .po) --"; \
	MASK="modules/*/locales/"; \
	LC="LC_MESSAGES"; \
	MSGFMT_OPTS="$MSGFMT_OPTS --check"; \
	FILENAME="*.po*"; \
	rm modules/*/locales/*/*~ 2> /dev/null; \
	for LOCALE in $(ALL_LINGUAS); do \
		echo "        -- Building for $$LOCALE --"; \
		FILES=`ls $$MASK/$$LOCALE/$$FILENAME`; \
		PATHTO=$(top_builddir)/locale/$$LOCALE/$$LC/; \
		if test ! -d $$PATHTO; then \
			echo "        Creating $$PATHTO"; \
			mkdir -p $$PATHTO; \
		fi; \
		POFILE=$$PATHTO/$(LANG_DOMAIN).po; \
		$(MSGCAT) -o $$POFILE $$FILES; \
		if test "$(MACOSX)" = "1"; then sed -i -e '/charset=UTF-8/d' $$POFILE; fi; \
		$(MSGFMT) $(MSGFMT_OPTS) --statistics -o $$PATHTO/$(LANG_DOMAIN).mo $$POFILE; \
	done;
endif

# Misc variable for the documentation installation

# How help files look like.
DOCMASK=scilab_*_help.jar

# Path to builded files
PATHTOHELPFILES = modules/helptools/jar/

if GENERATE_LOCALIZATION_FILES
install-data-local:
	@$(mkinstalldirs) $(DESTDIR)$(localedir); \
	echo $(mkinstalldirs) $(DESTDIR)$(localedir); \
	for lang in $(ALL_LINGUAS); do \
		LANG_PATH_DIST=$(DESTDIR)$(localedir)/$$lang/LC_MESSAGES/; \
		echo $(mkinstalldirs) $$LANG_PATH_DIST; \
		$(mkinstalldirs) $$LANG_PATH_DIST; \
		echo $(INSTALL_DATA) $(top_builddir)/locale/$$lang/LC_MESSAGES/$(LANG_DOMAIN).mo $$LANG_PATH_DIST/; \
		$(INSTALL_DATA) $(top_builddir)/locale/$$lang/LC_MESSAGES/$(LANG_DOMAIN).mo $$LANG_PATH_DIST/; \
	done
endif

################ INSTALL DOCUMENTATION #################
# Starting from Scilab 5, documentation file are provided by Docbook
# In the Scilab application we are generating a JavaHelp file.
if BUILD_HELP
	@$(mkinstalldirs) $(DESTDIR)$(pkgdatadir)/$(PATHTOHELPFILES); \
	echo $(mkinstalldirs) $(DESTDIR)$(pkgdatadir)/$(PATHTOHELPFILES); \
	if ls -lLd $(top_builddir)/$(PATHTOHELPFILES)/$(DOCMASK) >/dev/null 2>&1; then \
		for file in $(top_builddir)/$(PATHTOHELPFILES)/$(DOCMASK); do \
		    echo "$(INSTALL_DATA) $$file $(DESTDIR)$(pkgdatadir)/$(PATHTOHELPFILES)" ; \
	    	$(INSTALL_DATA) "$$file" $(DESTDIR)$(pkgdatadir)/$(PATHTOHELPFILES) ; \
		done; \
	fi
endif

# Pkgconfig directory
pkgconfigdir = $(libdir)/pkgconfig

# Files to install in Pkgconfig directory
pkgconfig_DATA = scilab.pc

.PHONY: macros localization doc

.NOTPARALLEL: macros doc

include $(top_srcdir)/Makefile.call_scilab.am
