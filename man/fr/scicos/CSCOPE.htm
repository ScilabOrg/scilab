<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<!--Converted with LaTeX2HTML 2002-2-1 (1.71)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>CSCOPE</TITLE>
<META NAME="description" CONTENT="CSCOPE">
<META NAME="keywords" CONTENT="CSCOPE">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="CSCOPE.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<P>
<DIV ALIGN="CENTER">
Bloc Scicos
<BR><A NAME="tex2html1"
  HREF="./CSCOPE.htm">fr</A> - <A NAME="tex2html2"
  HREF="../../eng/scicos/CSCOPE.htm">eng</A>

</DIV>
<H2><A NAME="SECTION00010000000000000000"></A><A NAME="CSCOPE"></A>
<BR>
Scope
</H2>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfig{file=CSCOPE.eps,width=90.00pt}$
 -->
<IMG
 WIDTH="143" HEIGHT="152" ALIGN="BOTTOM" BORDER="0"
 SRC="../../images/scicos/CSCOPE_blk.gif"
 ALT="\epsfig{file=CSCOPE.eps,width=90.00pt}">

</DIV>
<BR>

<H3><font color="blue"><A NAME="SECTION00020000000000000000">
Contenu</A>
</font></H3>
<!--Table of Contents-->

<UL CLASS="TofC">
<LI><A NAME="tex2html4"
  HREF="CSCOPE.htm#SECTION00010000000000000000">Scope</A>
<UL>
<LI><A NAME="tex2html5"
  HREF="CSCOPE.htm#SECTION00021000000000000000">Palette</A>
<LI><A NAME="tex2html6"
  HREF="CSCOPE.htm#SECTION00022000000000000000">Description</A>
<LI><A NAME="tex2html7"
  HREF="CSCOPE.htm#SECTION00023000000000000000">Boîte de dialogue</A>
<LI><A NAME="tex2html8"
  HREF="CSCOPE.htm#SECTION00024000000000000000">Propriétés par défaut</A>
<LI><A NAME="tex2html9"
  HREF="CSCOPE.htm#SECTION00025000000000000000">Fonction d'interface</A>
<LI><A NAME="tex2html10"
  HREF="CSCOPE.htm#SECTION00026000000000000000">Fonction de calcul (type 4)</A>
<LI><A NAME="tex2html11"
  HREF="CSCOPE.htm#SECTION00027000000000000000">Auteurs</A>
</UL></UL>
<!--End of Table of Contents-->
<H3><font color="blue"><A NAME="SECTION00021000000000000000">
Palette</A>
</font></H3>

<UL>
<LI><A NAME="tex2html3"
  HREF="Sinks_pal.htm">Sinks - Palette Affichage</A>
</LI>
</UL>
<H3><font color="blue"><A NAME="SECTION00022000000000000000">
Description</A>
</font></H3>

<P>
Ajoutez ici un paragraphe pour la description de la fonction  
<BR>
<H3><font color="blue"><A NAME="SECTION00023000000000000000">
Boîte de dialogue</A>
</font></H3>

<DIV ALIGN="CENTER">
<IMG
 WIDTH="477" HEIGHT="283" BORDER="0"
 SRC="../../images/scicos/CSCOPE_gui.gif"
 ALT="\begin{figure}\begin{center}
\epsfig{file=CSCOPE_gui.eps,width=300pt}
\end{center}\end{figure}">
</DIV>

<P>

<UL>
<LI><b>Color (<SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="../../images/scicos/CSCOPE_img3_fr.gif"
 ALT="$ &gt;$"></SPAN>
0) or mark (<SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="../../images/scicos/CSCOPE_img4_fr.gif"
 ALT="$ &lt;$"></SPAN>
0) vector (8 entries)</b>
<BR>   : Type 'vec' de taille 8. La description du paramètre 1.
</LI>
<LI><b>Output window number (-1 for automatic)</b>
<BR>   : Type 'vec' de taille 1. La description du paramètre 2.
</LI>
<LI><b>Output window position</b>
<BR>   : Type 'vec' de taille -1. La description du paramètre 3.
</LI>
<LI><b>Output window sizes</b>
<BR>   : Type 'vec' de taille -1. La description du paramètre 4.
</LI>
<LI><b>Ymin</b>
<BR>   : Type 'vec' de taille 1. La description du paramètre 5.
</LI>
<LI><b>Ymax</b>
<BR>   : Type 'vec' de taille 1. La description du paramètre 6.
</LI>
<LI><b>Refresh period</b>
<BR>   : Type 'vec' de taille 1. La description du paramètre 7.
</LI>
<LI><b>Buffer size</b>
<BR>   : Type 'vec' de taille 1. La description du paramètre 8.
</LI>
<LI><b>Accept herited events 0/1</b>
<BR>   : Type 'vec' de taille 1. La description du paramètre 9.
</LI>
<LI><b>Name of Scope (label&amp;amp;Id)</b>
<BR>   : Type 'str' de taille 1. La description du paramètre 10.
</LI>
</UL>

<H3><font color="blue"><A NAME="SECTION00024000000000000000">
Propriétés par défaut</A>
</font></H3>

<UL>
<LI><b>toujours actif:</b> non
</LI>
<LI><b>direct-feedthrough:</b> oui
</LI>
<LI><b>détection de passage à zéro:</b> non
</LI>
<LI><b>mode:</b> non
</LI>
<LI><b>nombre/taille des entrées régulières:</b> 1 / -1
</LI>
<LI><b>nombre/taille des sorties sorties régulières:</b> 0 / 
</LI>
<LI><b>nombre/taille des entrées évènementielles:</b> 1 / 1
</LI>
<LI><b>nombre/taille des sorties évènementielles:</b> 0 / 
</LI>
<LI><b>possède un état continu:</b> non
</LI>
<LI><b>possède un état discret:</b> non
</LI>
<LI><b>nom de la fonction de calcul:</b> <EM>cscope</EM>
</LI>
</UL>

<H3><font color="blue"><A NAME="SECTION00025000000000000000">
Fonction d'interface</A>
</font></H3>
<TT>CSCOPE.sci</TT>

<H3><font color="blue"><A NAME="SECTION00026000000000000000">
Fonction de calcul (type 4)</A>
</font></H3>
 <SMALL CLASS="TINY">  </SMALL>
<BR>
<PRE  CLASS="verbatim">/**
   \file cscope.c
   \author Benoit Bayol
   \version 1.0
   \date September 2006 - January 2007
   \brief CSCOPE is a typical scope which links its input to the simulation time but there is only one input instead of CMSCOPE
   \see CSCOPE.sci in macros/scicos_blocks/Sinks/
*/

#include "scoMemoryScope.h"
#include "scoWindowScope.h"
#include "scoMisc.h"
#include "scoGetProperty.h"
#include "scoSetProperty.h"
#include "scicos_block4.h"

/** \fn cscope_draw(scicos_block * block, ScopeMemory ** pScopeMemory, int firstdraw)
    \brief Function to draw or redraw the window
*/
void cscope_draw(scicos_block * block, ScopeMemory ** pScopeMemory, int firstdraw)
{
  int i;
  double *rpar;
  int *ipar, nipar;
  double period;
  int dimension;
  double ymin, ymax, xmin, xmax;
  int buffer_size;
  int win_pos[2];
  int win_dim[2];
  int win;
  int number_of_subwin;
  int number_of_curves_by_subwin[1];
  int * colors;

  /*Retrieving Parameters*/
  rpar = GetRparPtrs(block);
  ipar = GetIparPtrs(block);
  nipar = GetNipar(block);
  buffer_size = ipar[2];
  win = ipar[0];
  period  = rpar[3];
  win_pos[0] = ipar[(nipar-1) - 3];
  win_pos[1] = ipar[(nipar-1) - 2];
  win_dim[0] = ipar[(nipar-1) - 1];
  win_dim[1] = ipar[nipar-1];
  dimension = 2;
  number_of_curves_by_subwin[0] = GetInPortRows(block,1);

  number_of_subwin = 1;
  ymin = rpar[1];
  ymax = rpar[2];


  colors = (int*)scicos_malloc(number_of_curves_by_subwin[0]*sizeof(int));
  for(i = 0 ; i &lt; number_of_curves_by_subwin[0] ; i++)
    {
      colors[i] = ipar[3+i];
    }

  /*Allocating memory*/
  if(firstdraw == 1)
    {
      scoInitScopeMemory(block-&gt;work,pScopeMemory, number_of_subwin, number_of_curves_by_subwin);
      /*Must be placed before adding polyline or other elements*/
      scoSetLongDrawSize(*pScopeMemory, 0, 50);
      scoSetShortDrawSize(*pScopeMemory,0,buffer_size);
      scoSetPeriod(*pScopeMemory,0,period);
    }

  xmin = period*scoGetPeriodCounter(*pScopeMemory,0);
  xmax = period*(scoGetPeriodCounter(*pScopeMemory,0)+1);

  /*Creating the Scope*/
  scoInitOfWindow(*pScopeMemory, dimension, win, win_pos, win_dim, &amp;xmin, &amp;xmax, &amp;ymin, &amp;ymax, NULL, NULL);
  scoAddTitlesScope(*pScopeMemory,"t","y",NULL);

  /*Add a couple of polyline : one for the shortdraw and one for the longdraw*/
  scoAddCoupleOfPolylines(*pScopeMemory,colors);
  /* scoAddPolylineLineStyle(*pScopeMemory,colors); */
  scicos_free(colors);
}

/** \fn void cscope(scicos_block * block,int flag)
    \brief the computational function
    \param block A pointer to a scicos_block
    \param flag An integer which indicates the state of the block (init, update, ending)
*/
void cscope(scicos_block * block,int flag)
{
  ScopeMemory * pScopeMemory;
  int i;
  double t;
  int NbrPtsShort;
  double * u1;
  scoGraphicalObject pShortDraw;
  switch(flag) 
    {
    case Initialization:
      {
	cscope_draw(block,&amp;pScopeMemory,1);
	break;
      }
    case StateUpdate:
      {
	t = get_scicos_time();
	/*Retreiving Scope in the block-&gt;work*/
	scoRetrieveScopeMemory(block-&gt;work,&amp;pScopeMemory);
	/*If window has been destroyed we recreate it*/
	if(scoGetPointerScopeWindow(pScopeMemory) == NULL)
	  {
	    cscope_draw(block,&amp;pScopeMemory,0);
	  }
	/*Maybe we are in the end of axes so we have to draw new ones */
	scoRefreshDataBoundsX(pScopeMemory,t);

	//Cannot be factorized depends of the scope
	u1 = GetRealInPortPtrs(block,1);
	for (i = 0 ; i &lt; scoGetNumberOfCurvesBySubwin(pScopeMemory,0) ; i++)
	  {
	    pShortDraw  = scoGetPointerShortDraw(pScopeMemory,0,i);
	    NbrPtsShort = pPOLYLINE_FEATURE(pShortDraw)-&gt;n1;
	    pPOLYLINE_FEATURE(pShortDraw)-&gt;pvx[NbrPtsShort] = t;
	    pPOLYLINE_FEATURE(pShortDraw)-&gt;pvy[NbrPtsShort] = u1[i];
	    pPOLYLINE_FEATURE(pShortDraw)-&gt;n1++;
	  }
	//End of Cannot

	//Draw the Scope
	scoDrawScopeAmplitudeTimeStyle(pScopeMemory, t);
	break;
      }
    case Ending:
      {
	scoRetrieveScopeMemory(block-&gt;work, &amp;pScopeMemory);
	scoDelCoupleOfPolylines(pScopeMemory);
	scoFreeScopeMemory(block-&gt;work, &amp;pScopeMemory);
	break;  
      }
    }
}
</PRE>

<H3><font color="blue"><A NAME="SECTION00027000000000000000">
Auteurs</A>
</font></H3>
<b>Ramine Nikoukhah</b> INRIA

<BR>




</BODY>
</HTML>
