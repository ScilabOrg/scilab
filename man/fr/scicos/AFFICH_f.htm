<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<!--Converted with LaTeX2HTML 2002-2-1 (1.71)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>AFFICH_f</TITLE>
<META NAME="description" CONTENT="AFFICH_f">
<META NAME="keywords" CONTENT="AFFICH_f">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="AFFICH_f.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<P>
<DIV ALIGN="CENTER">
Bloc Scicos
<BR><A NAME="tex2html1"
  HREF="./AFFICH_f.htm">fr</A> - <A NAME="tex2html2"
  HREF="../../eng/scicos/AFFICH_f.htm">eng</A>

</DIV>
<H2><A NAME="SECTION00010000000000000000"></A><A NAME="AFFICH_f"></A>
<BR>
Affichage
</H2>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfig{file=AFFICH_f.eps,width=90.00pt}$
 -->
<IMG
 WIDTH="143" HEIGHT="101" ALIGN="BOTTOM" BORDER="0"
 SRC="../../images/scicos/AFFICH_f_blk.gif"
 ALT="\epsfig{file=AFFICH_f.eps,width=90.00pt}">

</DIV>
<BR>

<H3><font color="blue"><A NAME="SECTION00020000000000000000">
Contenu</A>
</font></H3>
<!--Table of Contents-->

<UL CLASS="TofC">
<LI><A NAME="tex2html3"
  HREF="AFFICH_f.htm#SECTION00010000000000000000">Affichage</A>
<UL>
<LI><A NAME="tex2html4"
  HREF="AFFICH_f.htm#SECTION00021000000000000000">Description</A>
<LI><A NAME="tex2html5"
  HREF="AFFICH_f.htm#SECTION00022000000000000000">Boîte de dialogue</A>
<LI><A NAME="tex2html6"
  HREF="AFFICH_f.htm#SECTION00023000000000000000">Propriétés par défaut</A>
<LI><A NAME="tex2html7"
  HREF="AFFICH_f.htm#SECTION00024000000000000000">Fonction d'interface</A>
<LI><A NAME="tex2html8"
  HREF="AFFICH_f.htm#SECTION00025000000000000000">Fonction de calcul (type 0)</A>
<LI><A NAME="tex2html9"
  HREF="AFFICH_f.htm#SECTION00026000000000000000">Auteurs</A>
</UL></UL>
<!--End of Table of Contents-->
<H3><font color="blue"><A NAME="SECTION00021000000000000000">
Description</A>
</font></H3>

<P>
Ajoutez ici un paragraphe pour la description de la fonction  
<BR>
<H3><font color="blue"><A NAME="SECTION00022000000000000000">
Boîte de dialogue</A>
</font></H3>

<DIV ALIGN="CENTER">
<IMG
 WIDTH="477" HEIGHT="224" BORDER="0"
 SRC="../../images/scicos/AFFICH_f_gui.gif"
 ALT="\begin{figure}\begin{center}
\epsfig{file=AFFICH_f_gui.eps,width=300pt}
\end{center}\end{figure}">
</DIV>

<P>

<UL>
<LI><b>Font number</b>
<BR>   : Type 'vec' de taille 1. Entier, la taille de la fonte sélectionnée (voir xset)
</LI>
<LI><b>Font size</b>
<BR>   : Type 'vec' de taille 1. Entier, la taille de la police utilisée. (voir xset)
</LI>
<LI><b>Color</b>
<BR>   : Type 'vec' de taille 1. Entier, la couleur sélectionnée pour le texte. (voir xset)
</LI>
<LI><b>Total number of digits</b>
<BR>   : Type 'vec' de taille 1. Un entier plus grand que 3. C'es le nombre de chiffres utilisés pour représenter le nombre affiché. (incluant le signe, la partie enière et les chiffres après la virgule)
</LI>
<LI><b>Number of rational part digits</b>
<BR>   : Type 'vec' de taille 1. Un entier plus grand ou égal à 0. C'es le nombre de chiffres affichés après la virgule.
</LI>
<LI><b>Block inherits (1) or not (0)</b>
<BR>   : Type 'vec' de taille 1. Option pour choisir l'activation par héritage d'évènement via le port d'entrée régulier ou explicitement par le port d'entrée évènementiel.
</LI>
</UL>

<H3><font color="blue"><A NAME="SECTION00023000000000000000">
Propriétés par défaut</A>
</font></H3>

<UL>
<LI><b>toujours actif:</b> non
</LI>
<LI><b>direct-feedthrough:</b> oui
</LI>
<LI><b>détection de passage à zéro:</b> non
</LI>
<LI><b>mode:</b> non
</LI>
<LI><b>nombre/taille des entrées régulières:</b> 1 / 1
</LI>
<LI><b>nombre/taille des sorties sorties régulières:</b> 0 / 
</LI>
<LI><b>nombre/taille des entrées évènementielles:</b> 1 / 1
</LI>
<LI><b>nombre/taille des sorties évènementielles:</b> 0 / 
</LI>
<LI><b>possède un état continu:</b> non
</LI>
<LI><b>possède un état discret:</b> oui
</LI>
<LI><b>nom de la fonction de calcul:</b> <EM>affich</EM>
</LI>
</UL>

<H3><font color="blue"><A NAME="SECTION00024000000000000000">
Fonction d'interface</A>
</font></H3>
<TT>AFFICH_f.sci</TT>

<H3><font color="blue"><A NAME="SECTION00025000000000000000">
Fonction de calcul (type 0)</A>
</font></H3>
 <SMALL CLASS="TINY">  </SMALL>
<BR>
<PRE  CLASS="verbatim">      subroutine affich(flag,nevprt,t,xd,x,nx,z,nz,tvec,ntvec,
     &amp;     rpar,nrpar,ipar,nipar,u,nu,y,ny)
c     Copyright INRIA

c     Scicos block simulator
c     Displays the value of the input in a graphic window
c
c     ipar(1) = font
c     ipar(2) = fontsize
c     ipar(3) = color
c     ipar(4) = win
c     ipar(5) = nt : total number of output digits
c     ipar(6) = nd number of rationnal part digits

c
c     z(1)=value
c     w(2)=window
c     z(3)=x
c     z(4)=y
c     z(5)=width
c     z(6)=height

      double precision t,xd(*),x(*),z(*),tvec(*),rpar(*),u(*),y(*)
      integer flag,nevprt,nx,nz,ntvec,nrpar,ipar(*)
      integer nipar,nu,ny


      integer wid

      integer cur,v
      double precision dv,sciround,ur
      character*40 drv
      data cur/0/


c     
c     
      if(flag.eq.2) then
c     state evolution
         ur=10.0d0**ipar(6)
         ur=sciround(u(1)*ur)/ur
         if (ur.eq.z(1)) return
         wid=z(2)
         if(wid.lt.0) return

         call setblockwin(int(z(2)),cur)
         call  dr1('xgetdr'//char(0),drv,v,v,v,v,v,v,dv,dv,dv,dv)
         call  dr1('xsetdr'//char(0),'X11'//char(0),v,v,v,v,v,v,
     $        dv,dv,dv,dv)

         call recterase(z(3))
         z(1)=ur
         call affdraw(ipar(1),ipar(5),z(1),z(3))
         call  dr1('xsetdr'//char(0),drv,v,v,v,v,v,v,dv,dv,dv,dv)
      elseif(flag.eq.4) then
c     init
c     .  initial value         
         z(1)=0.0d0
c     .  get geometry of the block
         call getgeom(z(2))

         if(z(2).lt.0.0d0) return
         call setblockwin(int(z(2)),cur)
         call  dr1('xgetdr'//char(0),drv,v,v,v,v,v,v,dv,dv,dv,dv)
         call  dr1('xsetdr'//char(0),'X11'//char(0),v,v,v,v,v,v,
     $        dv,dv,dv,dv)

         call recterase(z(3))
         call affdraw(ipar(1),ipar(5),z(1),z(3))
         call  dr1('xsetdr'//char(0),drv,v,v,v,v,v,v,dv,dv,dv,dv)

      endif
      end

      subroutine setblockwin(win,cur)
      integer win,cur
      integer v,verb
      double precision dv
      data verb/0/

      call dr1('xget'//char(0),'window'//char(0),verb,cur,na,v,v,v,
     $     dv,dv,dv,dv)
      if(cur.ne.win) then
         call dr1('xset'//char(0),'window'//char(0),win,v,v,v,v,v,
     $        dv,dv,dv,dv)
      endif
      return
      end

      subroutine recterase(r)
      double precision r(4)
      integer v
      double precision dv,dx,dy,x,y,w,h
      data dx/0.06/,dy/0.06/

      x=r(1)+dx*r(3)
      y=r(2)+r(4)
      w=r(3)*(1.0d0-dx)
      h=r(4)*(1.0d0-dy)
      call  dr1('xclea'//char(0),'v'//char(0),v,v,v,v,v,v,x,y,w,h)
      return
      end

      subroutine affdraw(fontd,form,val,r)
      integer fontd(2),form(2)
      double precision val,x,y,angle,rect(4),r(4),dx,dy
      character*40 fmt,value
      integer font(5),nf,pix
      integer v,verb
      double precision dv
      data angle/0.0d0/,verb/0/

      write(fmt,'(''(f'',i3,''.'',i3,'')'')') form(1),form(2)
      call dr1('xget'//char(0),'font'//char(0),verb,font,nf,v,v,
     $     v,dv,dv,dv,dv)
      call dr1('xset'//char(0),'font'//char(0),fontd(1),fontd(2),v,v,v,
     $     v,dv,dv,dv,dv)
      value=' '
      write(value,fmt) val
      ln=lnblnk(value)
      value(ln+1:ln+1)=char(0)

      call dr1('xstringl'//char(0),value,v,v,v,v,v,v,r(1),r(2),rect,dv)
      x=r(1)+max(0.0d0,(r(3)-rect(3))/2.0d0)
      y=r(2)+max(0.0d0,(r(4)-rect(4))/2.0d0)
      call dr1('xstring'//char(0),value,v,v,v,0,v,v,x,y,angle,dv)
      call dr1('xset'//char(0),'font'//char(0),font(1),font(2),v,v,v,
     $     v,dv,dv,dv,dv)
      call dr1('xget'//char(0),'pixmap'//char(0),verb,pix,na,v,v,v,
     $     dv,dv,dv,dv)
      if(pix.eq.1) then
         call dr1('xset'//char(0),'wshow'//char(0),v,v,v,v
     $        ,v,v,dv,dv,dv,dv)
      endif
      return
      end


      subroutine getgeom(g)
      include "../stack.h"
      double precision g(*)
      integer scicstring,ret
      integer sadr,iadr
      iadr(l) = l + l - 1
      sadr(l)=(l/2)+1
      ret=scistring(rhs+1, 'getgeom',1,0)
      il=iadr(lstk(top+1))
      l=sadr(il+4)
      call dcopy(5,stk(l),1,g,1)
c      top=top-1
      return
      end
</PRE>

<H3><font color="blue"><A NAME="SECTION00026000000000000000">
Auteurs</A>
</font></H3>
<b>Ramine Nikoukhah</b> INRIA

<BR>




</BODY>
</HTML>
