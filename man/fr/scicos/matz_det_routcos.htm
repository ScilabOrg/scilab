<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<!--Converted with LaTeX2HTML 2002-2-1 (1.71)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>matz_det_routcos</TITLE>
<META NAME="description" CONTENT="matz_det_routcos">
<META NAME="keywords" CONTENT="matz_det_routcos">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="matz_det_routcos.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<P>
<DIV ALIGN="CENTER">
Fonction de calcul
<BR><A NAME="tex2html1"
  HREF="./matz_det_routcos.htm">fr</A>

</DIV>
<H2><A NAME="SECTION00010000000000000000"></A><A NAME="matz_det_routcos"></A>
<BR>
matz_det
</H2>

<H3><font color="blue"><A NAME="SECTION00011000000000000000">
Contenu du fichier</A>
</font></H3>
<BR>
<PRE  CLASS="verbatim"># include "scicos_block4.h"
# include "../machine.h"
#include &lt;stdio.h&gt;

#if WIN32
#define NULL    0
#endif

//#include &lt;essl.h&gt;
typedef struct FCOMPLEX {double r,i;} fcomplex;
extern int C2F(zgetrf)();
typedef struct
{         int *ipiv;
          double *wrk;
} mat_det_struct ;
void matz_det(scicos_block *block,int flag)
{
 double *ur;
 double *yr;
 double *ui;
 double *yi;
 int nu;
 int info;
 int i;
 fcomplex D,l;
 double A;
 mat_det_struct *mdet;
 
 nu =GetInPortRows(block,1);
 ur=GetRealInPortPtrs(block,1);
 ui=GetImagInPortPtrs(block,1);
 yr=GetRealOutPortPtrs(block,1);
 yi=GetImagOutPortPtrs(block,1);
             /*init : initialization*/
if (flag==4)

   {if((*(block-&gt;work)=(mat_det_struct*) scicos_malloc(sizeof(mat_det_struct)))==NULL)
	{set_block_error(-16);
	 return;}
    mdet=*(block-&gt;work);
    if((mdet-&gt;ipiv=(int*) scicos_malloc(sizeof(int)*nu))==NULL)
	{set_block_error(-16);
	 scicos_free(mdet);
	 return;}
    if((mdet-&gt;wrk=(double*) scicos_malloc(sizeof(double)*(2*nu*nu)))==NULL)
	{set_block_error(-16);
	 scicos_free(mdet-&gt;ipiv);
	 scicos_free(mdet);
	 return;}
    }

       /* Terminaison */
else if (flag==5)
   {mdet=*(block-&gt;work);
    if(mdet-&gt;wrk!=NULL) {
	scicos_free(mdet-&gt;ipiv);
    	scicos_free(mdet-&gt;wrk);
    	scicos_free(mdet);
    	return;}
   }

else
   {
    mdet=*(block-&gt;work);
    for (i=0;i&lt;(nu*nu);i++)
	{mdet-&gt;wrk[2*i]=ur[i];
	mdet-&gt;wrk[2*i+1]=ui[i];}
     C2F(zgetrf)(&amp;nu,&amp;nu,mdet-&gt;wrk,&amp;nu,mdet-&gt;ipiv,&amp;info);
    if (info !=0)
       {if (flag!=6)
    	{set_block_error(-7);
        return;}}
      D.r=1;
      D.i=0;
    for (i=0;i&lt;nu;i++)
       {if((*(mdet-&gt;ipiv+i))!=i+1) {D.r=-D.r;D.i=-D.i;}
        l.r=*(mdet-&gt;wrk+i*2*(nu+1));
	l.i=*(mdet-&gt;wrk+1+i*2*(nu+1));
	A=D.r;
	D.r=D.r*l.r-D.i*l.i;
	D.i=D.i*l.r+A*l.i;
        };
     *yr=D.r;
     *yi=D.i;
    }
 }
</PRE>

<BR>




</BODY>
</HTML>
