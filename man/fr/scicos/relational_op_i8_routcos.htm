<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<!--Converted with LaTeX2HTML 2002-2-1 (1.71)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>relational_op_i8_routcos</TITLE>
<META NAME="description" CONTENT="relational_op_i8_routcos">
<META NAME="keywords" CONTENT="relational_op_i8_routcos">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="relational_op_i8_routcos.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<P>
<DIV ALIGN="CENTER">
Fonction de calcul
<BR><A NAME="tex2html1"
  HREF="./relational_op_i8_routcos.htm">fr</A>

</DIV>
<H2><A NAME="SECTION00010000000000000000"></A><A NAME="relational_op_i8_routcos"></A>
<BR>
relational_op_i8
</H2>

<H3><font color="blue"><A NAME="SECTION00011000000000000000">
Contenu du fichier</A>
</font></H3>
<BR>
<PRE  CLASS="verbatim">#include "scicos_block4.h"
#include &lt;math.h&gt;

void relational_op_i8(scicos_block *block,int flag)
{
  char *u1,*u2,*y;
  int *ipar;
  int k,i,m,n;
  m=GetInPortRows(block,1);
  n=GetInPortCols(block,1);
  u1=Getint8InPortPtrs(block,1);
  u2=Getint8InPortPtrs(block,2);
  y=Getint8OutPortPtrs(block,1);
  ipar=GetIparPtrs(block);
  if (flag==1)
  {if ((block-&gt;ng!=0)&amp;(get_phase_simulation()==2)) 
	{for(i=0;i&lt;m*n;i++) *(y+i)=block-&gt;mode[i]-1;}
   else{
	for(i=0;i&lt;m*n;i++) y[i]=0;
	k=ipar[0];
   	switch(k)
		{case 0:
			for(i=0;i&lt;m*n;i++)
			     {if (u1[i]==u2[i]) y[i]=1;}
	 	break;
		case 1:
			for(i=0;i&lt;m*n;i++)
			     {if (u1[i]!=u2[i]) y[i]=1;}
		break;
		case 2:
			for(i=0;i&lt;m*n;i++)
			     {if (u1[i]&lt;u2[i]) y[i]=1;}
		break;
		case 3:
			for(i=0;i&lt;m*n;i++)
			     {if (u1[i]&lt;=u2[i]) y[i]=1;}
		break;
		case 4:
			for(i=0;i&lt;m*n;i++)
			     {if (u1[i]&gt;u2[i]) y[i]=1;}
		break;
		case 5:
			for(i=0;i&lt;m*n;i++)
			     {if (u1[i]&gt;=u2[i]) y[i]=1;}
		break;
		}
	}
  }
  else if (flag==9)
  {for(i=0;i&lt;m*n;i++) block-&gt;g[i]=*(u1+i)-*(u2+i);
   if (get_phase_simulation()==1)
	{for(i=0;i&lt;m*n;i++) block-&gt;mode[i]=(int)1;
	k=ipar[0];
   	switch(k)
		{case 0:
			for(i=0;i&lt;m*n;i++)
			    {if (u1[i]==u2[i]) block-&gt;mode[i]=(int)2;}
	 	break;
		case 1:
			for(i=0;i&lt;m*n;i++)
			    {if (u1[i]!=u2[i]) block-&gt;mode[i]=(int)2;}
		break;
		case 2:
			for(i=0;i&lt;m*n;i++)
			    {if (u1[i]&lt;u2[i]) block-&gt;mode[i]=(int)2;}
		break;
		case 3:
			for(i=0;i&lt;m*n;i++)
			    {if (u1[i]&lt;=u2[i]) block-&gt;mode[i]=(int)2;}
		break;
		case 4:
			for(i=0;i&lt;m*n;i++)
			    {if (u1[i]&gt;u2[i]) block-&gt;mode[i]=(int)2;}
		break;
		case 5:
			for(i=0;i&lt;m*n;i++)
			    {if (u1[i]&gt;=u2[i]) block-&gt;mode[i]=(int)2;}
		break;
		}
	}
  }

}
</PRE>

<BR>




</BODY>
</HTML>
