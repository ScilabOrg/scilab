<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<!--Converted with LaTeX2HTML 2002-2-1 (1.71)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>relationalop_routcos</TITLE>
<META NAME="description" CONTENT="relationalop_routcos">
<META NAME="keywords" CONTENT="relationalop_routcos">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="relationalop_routcos.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<P>
<DIV ALIGN="CENTER">
Fonction de calcul
<BR><A NAME="tex2html1"
  HREF="./relationalop_routcos.htm">fr</A>

</DIV>
<H2><A NAME="SECTION00010000000000000000"></A><A NAME="relationalop_routcos"></A>
<BR>
relationalop
</H2>

<H3><font color="blue"><A NAME="SECTION00011000000000000000">
Contenu du fichier</A>
</font></H3>
<BR>
<PRE  CLASS="verbatim">#include "scicos_block.h"
#include &lt;math.h&gt;


void relationalop(scicos_block *block,int flag)
{
  int i;
  i=block-&gt;ipar[0];
  if(flag==1){
    if ((block-&gt;ng!=0)&amp;(get_phase_simulation()==2))
      {
	block-&gt;outptr[0][0]=block-&gt;mode[0]-1.0;
      }
    else {
      switch (i)
	{
	case 0:
	  if(block-&gt;inptr[0][0]==block-&gt;inptr[1][0]) {
	    block-&gt;outptr[0][0]=1.0;
	  }else{
	    block-&gt;outptr[0][0]=0.0;
	  }
	  break;
	  
	case 1:
	  if(block-&gt;inptr[0][0]!=block-&gt;inptr[1][0]) {
	    block-&gt;outptr[0][0]=1.0;
	  }else{
	    block-&gt;outptr[0][0]=0.0;
	  }
	  break;
	case 2:
	  if(block-&gt;inptr[0][0]&lt;block-&gt;inptr[1][0]) {
	    block-&gt;outptr[0][0]=1.0;
	  }else{
	    block-&gt;outptr[0][0]=0.0;
	  }
	  break;    
	case 3:
	  if(block-&gt;inptr[0][0]&lt;=block-&gt;inptr[1][0]) {
	    block-&gt;outptr[0][0]=1.0;
	  }else{
	    block-&gt;outptr[0][0]=0.0;
	  }
	  break;   
	case 4:
	  if(block-&gt;inptr[0][0]&gt;=block-&gt;inptr[1][0]) {
	    block-&gt;outptr[0][0]=1.0;
	  }else{
	    block-&gt;outptr[0][0]=0.0;
	  }
	  break;   
	case 5:
	  if(block-&gt;inptr[0][0]&gt;block-&gt;inptr[1][0]) {
	    block-&gt;outptr[0][0]=1.0;
	  }else{
	    block-&gt;outptr[0][0]=0.0;
	  }
	  break;
	}
    }

  }else if(flag==9){
    block-&gt;g[0]=block-&gt;inptr[0][0]-block-&gt;inptr[1][0];
    if (get_phase_simulation()==1) {
      switch (i)
	{
	case 0:
	  if(block-&gt;inptr[0][0]==block-&gt;inptr[1][0]) {
	    block-&gt;mode[0]=(int)2.0;
	  }else{
	    block-&gt;mode[0]=(int)1.0;
	  }
	  break;
	  
	case 1:
	  if(block-&gt;inptr[0][0]!=block-&gt;inptr[1][0]) {
	    block-&gt;mode[0]=(int)2.0;
	  }else{
	    block-&gt;mode[0]=(int)1.0;
	  }
	  break;
	case 2:
	  if(block-&gt;inptr[0][0]&lt;block-&gt;inptr[1][0]) {
	    block-&gt;mode[0]=(int)2.0;
	  }else{
	    block-&gt;mode[0]=(int)1.0;
	  }
	  break;    
	case 3:
	  if(block-&gt;inptr[0][0]&lt;=block-&gt;inptr[1][0]) {
	    block-&gt;mode[0]=(int)2.0;
	  }else{
	    block-&gt;mode[0]=(int)1.0;
	  }
	  break;   
	case 4:
	  if(block-&gt;inptr[0][0]&gt;=block-&gt;inptr[1][0]) {
	    block-&gt;mode[0]=(int)2.0;
	  }else{
	    block-&gt;mode[0]=(int)1.0;
	  }
	  break;   
	case 5:
	  if(block-&gt;inptr[0][0]&gt;block-&gt;inptr[1][0]) {
	    block-&gt;mode[0]=(int)2.0;
	  }else{
	    block-&gt;mode[0]=(int)1.0;
	  }
	  break;
	}
    }
  }
}
</PRE>

<BR>




</BODY>
</HTML>
