<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<!--Converted with LaTeX2HTML 2002-2-1 (1.71)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>DLRADAPT_f_intfunc</TITLE>
<META NAME="description" CONTENT="DLRADAPT_f_intfunc">
<META NAME="keywords" CONTENT="DLRADAPT_f_intfunc">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="DLRADAPT_f_intfunc.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<P>
<DIV ALIGN="CENTER">
Fonction d'interfaçage
<BR><A NAME="tex2html1"
  HREF="./DLRADAPT_f_intfunc.htm">fr</A>

</DIV>
<H2><A NAME="SECTION00010000000000000000"></A><A NAME="DLRADAPT_f_intfunc"></A>
<BR>
DLRADAPT_f
</H2>

<H3><font color="blue"><A NAME="SECTION00011000000000000000">
Contenu du fichier</A>
</font></H3>
<BR>
<PRE  CLASS="verbatim">function [x,y,typ]=DLRADAPT_f(job,arg1,arg2)
// Copyright INRIA
x=[];y=[];typ=[];
select job
case 'plot' then
  standard_draw(arg1)
case 'getinputs' then
  [x,y,typ]=standard_inputs(arg1)
case 'getoutputs' then
  [x,y,typ]=standard_outputs(arg1)
case 'getorigin' then
  [x,y]=standard_origin(arg1)
case 'set' then
  x=arg1;
  graphics=arg1.graphics;exprs=graphics.exprs
  model=arg1.model;
  while %t do
    [ok,p,rn,rd,g,last_u,last_y,exprs]=getvalue('Set block parameters',..
	['Vector of p mesh points';
	'Numerator roots (one line for each mesh)';
	'Denominator roots (one line for each mesh)';
        'Vector of gain at mesh points' ;
	'past inputs (Num degree values)';
	'past outputs (Den degree values)'],..
	list('vec',-1,'mat',[-1,-1],'mat',..
	['size(%1,''*'')','-1'],'vec','size(%1,''*'')',..
	'vec','size(%2,2)','vec','size(%3,2)'),exprs)


    if ~ok then break,end
    m=size(rn,2)
    [npt,n]=size(rd)
    if m&gt;=n then
      message('Transfer must be strictly proper'),
    elseif size(rn,1)&lt;&gt;0&amp;size(rn,1)&lt;&gt;size(p,'*') then
      message('Numerator roots matrix row size''s is incorrect')
    else
      rpar=[p(:);real(rn(:));imag(rn(:));real(rd(:));imag(rd(:));g(:)]
      ipar=[m;n;npt]
      model.dstate=[last_u(:);last_y(:)]
      model.rpar=rpar
      model.ipar=ipar
      graphics.exprs=exprs
      x.graphics=graphics;x.model=model
      break;
    end
  end
case 'define' then
  p=[0;1]
  rn=[]
  rd=[0.2+0.8*%i,0.2-0.8*%i;0.3+0.7*%i,0.3-0.7*%i]
  g=[1;1]
  last_u=[]
  last_y=[0;0]
  
  model=scicos_model()
  model.sim='dlradp'
  model.in=[1;1]
  model.out=1
  model.evtin=1

  model.dstate=[last_u;last_y]
  model.rpar=[p(:);real(rn(:));imag(rn(:));real(rd(:));imag(rd(:));g(:)]
  model.ipar=[0;2;2]
  model.blocktype='d'
  model.firing=[]
  model.dep_ut=[%t %f]
  
  exprs=[sci2exp(p);
	sci2exp(rn);
	sci2exp(rd,0);
	sci2exp(g);
	sci2exp(last_u);
	sci2exp(last_y)]
  gr_i=['txt=[''N(z,p)'';''-----'';''D(z,p)''];';
	'xstringb(orig(1),orig(2),txt,sz(1),sz(2),''fill'');']
  x=standard_define([2 2],model,exprs,gr_i)
end
endfunction
</PRE>

<BR>




</BODY>
</HTML>
