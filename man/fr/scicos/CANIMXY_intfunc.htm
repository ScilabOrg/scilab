<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<!--Converted with LaTeX2HTML 2002-2-1 (1.71)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>CANIMXY_intfunc</TITLE>
<META NAME="description" CONTENT="CANIMXY_intfunc">
<META NAME="keywords" CONTENT="CANIMXY_intfunc">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="CANIMXY_intfunc.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<P>
<DIV ALIGN="CENTER">
Fonction d'interfaçage
<BR><A NAME="tex2html1"
  HREF="./CANIMXY_intfunc.htm">fr</A>

</DIV>
<H2><A NAME="SECTION00010000000000000000"></A><A NAME="CANIMXY_intfunc"></A>
<BR>
CANIMXY
</H2>

<H3><font color="blue"><A NAME="SECTION00011000000000000000">
Contenu du fichier</A>
</font></H3>
<BR>
<PRE  CLASS="verbatim">function [x,y,typ]=CANIMXY(job,arg1,arg2)
//Scicos 2D animated visualization block
// Copyright INRIA
x=[];y=[];typ=[]
select job
case 'plot' then
  standard_draw(arg1)
case 'getinputs' then
  [x,y,typ]=standard_inputs(o)
case 'getoutputs' then
  x=[];y=[];typ=[];
case 'getorigin' then
  [x,y]=standard_origin(arg1)
case 'set' then
  x=arg1;
  graphics=arg1.graphics;exprs=graphics.exprs
  model=arg1.model;
  //dstate=model.dstate
  if size(exprs,'*')==8 then exprs=[1;exprs(1:3);'[]';'[]';exprs(4:8)],end
  while %t do
    [ok,nbr_curves,clrs,siz,win,wpos,wdim,xmin,xmax,ymin,ymax,N,exprs]=getvalue(..
	'Set Scope parameters',..
	['Number of Curves';
	'color (&lt;0) or mark (&gt;0)';
	'line or mark size';
	'Output window number (-1 for automatic)';
	'Output window position';
	'Output window sizes';
	'Xmin';
	'Xmax';
	'Ymin';
	'Ymax';
	'Buffer size'],..
	 list('vec',1,'vec',1,'vec',1,'vec',1,'vec',-1,'vec',-1,'vec',1,..
	 'vec',1,'vec',1,'vec',1,'vec',1),exprs)
    if ~ok then break,end //user cancel modification

    mess=[]
    if size(wpos,'*')&lt;&gt;0 &amp;size(wpos,'*')&lt;&gt;2 then
      mess=[mess;'Window position must be [] or a 2 vector';' ']
      ok=%f
    end
    if size(wdim,'*')&lt;&gt;0 &amp;size(wdim,'*')&lt;&gt;2 then
      mess=[mess;'Window dim must be [] or a 2 vector';' ']
      ok=%f
    end
    if win&lt;-1 then
      mess=[mess;'Window number cannot be inferior than -1';' ']
      ok=%f
    end
    if nbr_curves&lt;=0 then
      mess=[mess;'Number of curves cannot be negative or null';' ']
      ok=%f
    end
    if N&lt;1 then
      mess=[mess;'Buffer size must be at least 1';' ']
      ok=%f
    end
    if N==1 &amp; clrs&gt;0 then
      mess=[mess;'Buffer size must be at least 2';' ']
      ok=%f
    end
    if ymin&gt;=ymax then
      mess=[mess;'Ymax must be greater than Ymin';' ']
      ok=%f
    end
    if xmin&gt;=xmax then
      mess=[mess;'Xmax must be greater than Xmin';' ']
      ok=%f
    end
    if ~ok then
      message(mess)
    else
      in = nbr_curves*ones(2,1);
      in2 = ones(2,1);
      [model,graphics,ok]=set_io(model,graphics,list([in in2],ones(2,1)),list(),ones(1,1),[]);
      if wpos==[] then wpos=[-1;-1];end
      if wdim==[] then wdim=[-1;-1];end
      rpar=[xmin;xmax;ymin;ymax]
      ipar=[win;1;N;clrs;siz;0;wpos(:);wdim(:);nbr_curves]
      //if prod(size(dstate))&lt;&gt;2*N+1 then dstate=zeros(2*N+1,1),end
      //model.dstate=dstate;
      model.rpar=rpar;model.ipar=ipar
      graphics.exprs=exprs;
      x.graphics=graphics;x.model=model
      break
    end
  end
case 'define' then
  win=-1; clrs=-4;
  N=2; siz=1;
  wpos=[-1;-1];wdim=[-1;-1];
  xmin=-15;xmax=15;ymin=-15;ymax=+15
  nbr_curves = 1;
  
  model=scicos_model()
  model.sim=list('canimxy',4)
  model.in=[1;1]
  model.in2=[1;1]
  model.intyp=[1;1]
  model.evtin=1
  model.rpar=[xmin;xmax;ymin;ymax]
  model.ipar=[win;1;N;clrs;siz;0;wpos(:);wdim(:);nbr_curves]
  model.blocktype='d'
  model.firing=[]
  model.dep_ut=[%f %f]
 
  exprs=[string(nbr_curves);
      string(clrs);
      string(siz);
      string(win);
      '[]';
      '[]';
      string(xmin);
      string(xmax);
      string(ymin);
      string(ymax);
      string(N)]
  gr_i=['thick=xget(''thickness'');xset(''thickness'',2);';
        't=(0:0.3:2*%pi)'';';
        'xx=orig(1)+(1/5+(cos(2.2*t)+1)*3/10)*sz(1);';
        'yy=orig(2)+(1/4.3+(sin(t)+1)*3/10)*sz(2);';
        'xpoly(xx,yy,''lines'');'
        'xset(''thickness'',thick);']
  x=standard_define([2 2],model,exprs,gr_i)
end
endfunction
</PRE>

<BR>




</BODY>
</HTML>
