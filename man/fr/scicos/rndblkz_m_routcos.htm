<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<!--Converted with LaTeX2HTML 2002-2-1 (1.71)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>rndblkz_m_routcos</TITLE>
<META NAME="description" CONTENT="rndblkz_m_routcos">
<META NAME="keywords" CONTENT="rndblkz_m_routcos">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="rndblkz_m_routcos.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<P>
<DIV ALIGN="CENTER">
Fonction de calcul
<BR><A NAME="tex2html1"
  HREF="./rndblkz_m_routcos.htm">fr</A>

</DIV>
<H2><A NAME="SECTION00010000000000000000"></A><A NAME="rndblkz_m_routcos"></A>
<BR>
rndblkz_m
</H2>

<H3><font color="blue"><A NAME="SECTION00011000000000000000">
Contenu du fichier</A>
</font></H3>
<BR>
<PRE  CLASS="verbatim">#include "scicos_block4.h"
#include "../machine.h"
#include &lt;math.h&gt;
extern double C2F(urand)();
void rndblkz_m(scicos_block *block,int flag)
{
  double *y_r;
  double *y_i;
  double *rpar;
  double *z;
  int *ipar;
  int ny,my,i,iy_r,iy_i;
  double sr,si,tl;

  my=GetOutPortRows(block,1);
  ny=GetOutPortCols(block,1);
  ipar=GetIparPtrs(block);
  rpar=GetRparPtrs(block);
  y_r=GetRealOutPortPtrs(block,1);
  y_i=GetImagOutPortPtrs(block,1);
  z=GetDstate(block);

  if (flag==2||flag==4) {
    iy_r=(int)z[0];
    iy_i=(int)z[1];
    if (ipar[0]==0) {
      for (i=0;i&lt;my*ny;i++) {
         *(z+i+2)=C2F(urand)(&amp;iy_r);
         *(z+i+2+my*ny)=C2F(urand)(&amp;iy_i);
      }
    }
    else {
      for (i=0;i&lt;my*ny;i++) {
        do {
         sr=2.0*C2F(urand)(&amp;iy_r)-1.0;
         si=2.0*C2F(urand)(&amp;iy_r)-1.0;
         tl=sr*sr+si*si;
        } while(tl&gt;1.0);
        z[i+2]= sr*(sqrt(-2.0*log(tl)/tl));
        do {
         sr=2.0*C2F(urand)(&amp;iy_i)-1.0;
         si=2.0*C2F(urand)(&amp;iy_i)-1.0;
         tl=sr*sr+si*si;
        } while(tl&gt;1.0);
        z[i+2+my*ny]= sr*(sqrt(-2.0*log(tl)/tl));
      }
    }
    *(z)=iy_r;
    *(z+1)=iy_i;
  }

  if (flag==1||flag==6) {
    for (i=0;i&lt;my*ny;i++) {
      *(y_r+i)=*(rpar+i)+(*(rpar+i+2*my*ny))*(*(z+i+2));
      *(y_i+i)=*(rpar+i+my*ny)+(*(rpar+i+3*my*ny))*(*(z+i+2+my*ny));
    }
  }
}
</PRE>

<BR>




</BODY>
</HTML>
