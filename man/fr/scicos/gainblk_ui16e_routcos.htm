<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<!--Converted with LaTeX2HTML 2002-2-1 (1.71)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>gainblk_ui16e_routcos</TITLE>
<META NAME="description" CONTENT="gainblk_ui16e_routcos">
<META NAME="keywords" CONTENT="gainblk_ui16e_routcos">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="gainblk_ui16e_routcos.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<P>
<DIV ALIGN="CENTER">
Fonction de calcul
<BR><A NAME="tex2html1"
  HREF="./gainblk_ui16e_routcos.htm">fr</A>

</DIV>
<H2><A NAME="SECTION00010000000000000000"></A><A NAME="gainblk_ui16e_routcos"></A>
<BR>
gainblk_ui16e
</H2>

<H3><font color="blue"><A NAME="SECTION00011000000000000000">
Contenu du fichier</A>
</font></H3>
<BR>
<PRE  CLASS="verbatim">#include &lt;math.h&gt;
#include "../machine.h"
#include "scicos_block4.h"
extern int sciprint();
void gainblk_ui16e(scicos_block *block,int flag)
{
 if ((flag==1)|(flag==6)){
  int i,j,l,ji,jl,il;
  unsigned short *u,*y;
  int mu,ny,my,mo,no;
  unsigned short *opar;
  double k,D,C;

  mo=GetOparSize(block,1,1);
  no=GetOparSize(block,1,2);
  mu=GetInPortRows(block,1);
  my=GetOutPortRows(block,1);
  ny=GetOutPortCols(block,1);
  u=Getuint16InPortPtrs(block,1);
  y=Getuint16OutPortPtrs(block,1);
  opar=Getuint16OparPtrs(block,1);

  k=pow(2,16);
  if (mo*no==1){
    for (i=0;i&lt;ny*mu;++i){
     D=(double)(opar[0])*(double)(u[i]);
     if ((D&gt;=k)|( D&lt;0))
	{sciprint("overflow error");
	 set_block_error(-4);
	 return;}
     else y[jl]=(unsigned short)D;
    }
  }else{
     for (l=0;l&lt;ny;l++)
	 {for (j=0;j&lt;my;j++)
	      {D=0;
	       for (i=0;i&lt;mu;i++)
		   {ji=j+i*my;
		    jl=j+l*my;
		    il=i+l*mu;
		    C=(double)(opar[ji])*(double)(u[il]);
		    D=D + C;}
		    if ((D&gt;=k)|( D&lt;0))
			{sciprint("overflow error");
			 set_block_error(-4);
			 return;}
		    else y[jl]=(unsigned short)D;
		  }
	     }
  }
 }
}
</PRE>

<BR>




</BODY>
</HTML>
