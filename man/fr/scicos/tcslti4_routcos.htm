<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<!--Converted with LaTeX2HTML 2002-2-1 (1.71)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>tcslti4_routcos</TITLE>
<META NAME="description" CONTENT="tcslti4_routcos">
<META NAME="keywords" CONTENT="tcslti4_routcos">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="tcslti4_routcos.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<P>
<DIV ALIGN="CENTER">
Fonction de calcul
<BR><A NAME="tex2html1"
  HREF="./tcslti4_routcos.htm">fr</A>

</DIV>
<H2><A NAME="SECTION00010000000000000000"></A><A NAME="tcslti4_routcos"></A>
<BR>
tcslti4
</H2>

<H3><font color="blue"><A NAME="SECTION00011000000000000000">
Contenu du fichier</A>
</font></H3>
<BR>
<PRE  CLASS="verbatim">
#include &lt;math.h&gt;
#include &lt;memory.h&gt;

#include "scicos_block.h"
#include "../machine.h"

extern int C2F(dmmul)();
extern int C2F(dmmul1)();


void tcslti4(scicos_block *block,int flag)
{
  /* Copyright INRIA
   
     Scicos block simulator
     continuous state space linear system simulator
     rpar(1:nx*nx)=A
     rpar(nx*nx+1:nx*nx+nx*nu)=B
     rpar(nx*nx+nx*nu+1:nx*nx+nx*nu+nx*ny)=C
     rpar(nx*nx+nx*nu+nx*ny+1:nx*nx+nx*nu+nx*ny+ny*nu)=D */

  int un=1,lb,lc,ld;
  int nx=block-&gt;nx;
  double* x=block-&gt;x;
  double* xd=block-&gt;xd;
  double* rpar=block-&gt;rpar;
  double* y=block-&gt;outptr[0];
  double* u1=block-&gt;inptr[0];
  double* u2=block-&gt;inptr[1];
  int* outsz=block-&gt;outsz;
  int* insz=block-&gt;insz;
    
  lb=nx*nx;
  lc=lb+nx*insz[0];
  
  if (flag ==1 || flag ==6){
    /* y=c*x+d*u1 */  
    ld=lc+nx*outsz[0];

    C2F(dmmul)(&amp;rpar[lc],outsz,x,&amp;nx,y,outsz,outsz,&amp;nx,&amp;un);
    C2F(dmmul1)(&amp;rpar[ld],outsz,u1,&amp;insz[0],y,outsz,outsz,&amp;insz[0],&amp;un);

  }else if (flag == 2 &amp;&amp; block-&gt;nevprt == 1){
    /* x+=u2 */
    memcpy(x,u2 ,nx*sizeof(double));
  }else if (flag ==0 &amp;&amp; block-&gt;nevprt == 0){
    /* xd=a*x+b*u1 */
    C2F(dmmul)(&amp;rpar[0],&amp;nx,x,&amp;nx,xd,&amp;nx,&amp;nx,&amp;nx,&amp;un);
    C2F(dmmul1)(&amp;rpar[lb],&amp;nx,u1,&amp;insz[0],xd,&amp;nx,&amp;nx,&amp;insz[0],&amp;un);
  }
}
</PRE>

<BR>




</BODY>
</HTML>
