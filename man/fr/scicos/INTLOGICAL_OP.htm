<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<!--Converted with LaTeX2HTML 2002-2-1 (1.71)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>INTLOGICAL_OP</TITLE>
<META NAME="description" CONTENT="INTLOGICAL_OP">
<META NAME="keywords" CONTENT="INTLOGICAL_OP">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="INTLOGICAL_OP.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<P>
<DIV ALIGN="CENTER">
Bloc Scicos
<BR><A NAME="tex2html1"
  HREF="./INTLOGICAL_OP.htm">fr</A> - <A NAME="tex2html2"
  HREF="../../eng/scicos/INTLOGICAL_OP.htm">eng</A>

</DIV>
<H2><A NAME="SECTION00010000000000000000"></A><A NAME="INTLOGICAL_OP"></A><BR>
INTLOGICAL_OP titre
</H2>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfig{file=INTLOGICAL_OP.eps,width=90.00pt}$
 -->
<IMG
 WIDTH="143" HEIGHT="101" ALIGN="BOTTOM" BORDER="0"
 SRC="../../images/scicos/INTLOGICAL_OP_blk.gif"
 ALT="\epsfig{file=INTLOGICAL_OP.eps,width=90.00pt}">

</DIV>
<BR>

<H3><font color="blue"><A NAME="SECTION00020000000000000000">
Contenu</A>
</font></H3>
<!--Table of Contents-->

<UL CLASS="TofC">
<LI><A NAME="tex2html5"
  HREF="INTLOGICAL_OP.htm#SECTION00010000000000000000">INTLOGICAL_OP titre</A>
<UL>
<LI><A NAME="tex2html6"
  HREF="INTLOGICAL_OP.htm#SECTION00021000000000000000">Palette</A>
<LI><A NAME="tex2html7"
  HREF="INTLOGICAL_OP.htm#SECTION00022000000000000000">Description</A>
<LI><A NAME="tex2html8"
  HREF="INTLOGICAL_OP.htm#SECTION00023000000000000000">Boîte de dialogue</A>
<LI><A NAME="tex2html9"
  HREF="INTLOGICAL_OP.htm#SECTION00024000000000000000">Propriétés par défaut</A>
<LI><A NAME="tex2html10"
  HREF="INTLOGICAL_OP.htm#SECTION00025000000000000000">Fonction d'interface</A>
<LI><A NAME="tex2html11"
  HREF="INTLOGICAL_OP.htm#SECTION00026000000000000000">Fonction de calcul (type 4)</A>
<LI><A NAME="tex2html12"
  HREF="INTLOGICAL_OP.htm#SECTION00027000000000000000">Fonction utilisée</A>
<LI><A NAME="tex2html13"
  HREF="INTLOGICAL_OP.htm#SECTION00028000000000000000">Voir aussi</A>
<LI><A NAME="tex2html14"
  HREF="INTLOGICAL_OP.htm#SECTION00029000000000000000">Auteurs</A>
<LI><A NAME="tex2html15"
  HREF="INTLOGICAL_OP.htm#SECTION00030000000000000000">Bibliographie</A>
</UL>
</UL><BR>
<!--End of Table of Contents-->
<H3><font color="blue"><A NAME="SECTION00021000000000000000">
Palette</A>
</font></H3>

<UL>
<LI><A NAME="tex2html3"
  HREF="Integer_pal.htm">Integer - Integer titre</A>
</LI>
</UL>
<H3><font color="blue"><A NAME="SECTION00022000000000000000">
Description</A>
</font></H3>

<P>
  Ajoutez ici un paragraphe pour la description de la fonction  
<BR>
<H3><font color="blue"><A NAME="SECTION00023000000000000000">
Boîte de dialogue</A>
</font></H3>

<DIV ALIGN="CENTER">
<IMG
 WIDTH="477" HEIGHT="116" BORDER="0"
 SRC="../../images/scicos/INTLOGICAL_OP_gui.gif"
 ALT="\begin{figure}\begin{center}
\epsfig{file=INTLOGICAL_OP_gui.eps,width=300pt}
\end{center}\end{figure}">
</DIV>

<P>

<UL>
<LI><b>Datatype (3=int32 4=int16 5=int8 ...)</b>
<BR>   : Type 'vec' de taille 1. La description du paramètre 1.
</LI>
<LI><b>number of inputs</b>
<BR>   : Type 'vec' de taille 1. La description du paramètre 2.
</LI>
<LI><b>Operator: AND (0), OR (1), NAND (2), NOR (3), XOR (4), NOT (5)</b>
<BR>   : Type 'vec' de taille 1. La description du paramètre 3.
</LI>
<LI><b>Bitwise Rule (0=No 1=Yes)</b>
<BR>   : Type 'vec' de taille 1. La description du paramètre 4.
</LI>
</UL>

<H3><font color="blue"><A NAME="SECTION00024000000000000000">
Propriétés par défaut</A>
</font></H3>

<UL>
<LI><b>toujours actif:</b> non
</LI>
<LI><b>direct-feedthrough:</b> oui
</LI>
<LI><b>détection de passage à zéro:</b> non
</LI>
<LI><b>mode:</b> non
</LI>
<LI><b>nombre/taille des entrées régulières:</b> 2 / -1  -1
</LI>
<LI><b>nombre/taille des sorties sorties régulières:</b> 1 / -1
</LI>
<LI><b>nombre/taille des entrées évènementielles:</b> 0 / 
</LI>
<LI><b>nombre/taille des sorties évènementielles:</b> 0 / 
</LI>
<LI><b>possède un état continu:</b> non
</LI>
<LI><b>possède un état discret:</b> non
</LI>
<LI><b>nom de la fonction de calcul:</b> <EM>logicalop_i32</EM>
</LI>
</UL>

<H3><font color="blue"><A NAME="SECTION00025000000000000000">
Fonction d'interface</A>
</font></H3>
<TT>INTLOGICAL_OP.sci</TT>

<H3><font color="blue"><A NAME="SECTION00026000000000000000">
Fonction de calcul (type 4)</A>
</font></H3>
 <SMALL CLASS="TINY">  </SMALL><BR>
<PRE  CLASS="verbatim">#include "scicos_block4.h"
#include &lt;math.h&gt;

void logicalop_i32(scicos_block *block,int flag)
{
  int i,m,n,nin,k,j,l;
  int *ipar;
  long *y,*u;
  m=GetInPortRows(block,1);
  n=GetInPortCols(block,1);
  y=Getint32OutPortPtrs(block,1);
  ipar=GetIparPtrs(block);
  nin=GetNin(block);
  k=ipar[0];
  switch (k)
	{
	case 0:
	     if (nin==1)
  		 {u=Getint32InPortPtrs(block,1);
		  if (ipar[1]==0)
		      {*y=1;
                       for(i=0;i&lt;m*n;i++)
     		       	  {if (u[i]&lt;=0)
		       	       {*y=0;
			        break;}
     		      	  }
		      }
		  else
		      {*y=u[0];
		       for (i=1;i&lt;m*n;i++)
			    {*y=(*y)&amp;(u[i]);}
		      }
		 }
	     else
		 {if (ipar[1]==0)
		     {for (i=0;i&lt;m*n;i++)
			   {y[i]=1;
			    for (j=1;j&lt;nin+1;j++)
				 {u=Getint32InPortPtrs(block,j);
				  if (u[i]&lt;=0) 
				      {y[i]=0;
				       break;}
				 } 
			   }
		     }
		 else
		     {for (i=0;i&lt;m*n;i++)
			   {u=Getint32InPortPtrs(block,1);
			    y[i]=u[i];
			    for (j=2;j&lt;nin+1;j++)
				 {u=Getint32InPortPtrs(block,j);
				  y[i]=(y[i])&amp;(u[i]);
				 }
			   }
		     }
		 }
	break;
	case 1:
	     if (nin==1)
  		 {u=Getint32InPortPtrs(block,1);
		  *y=0;
		  if (ipar[1]==0)
		      {for(i=0;i&lt;m*n;i++)
     		       	  {if (u[i]&gt;0)
		       	       {*y=1;
			        break;}
     		      	  }
		      }
		  else
		      {for (i=0;i&lt;m*n;i++)
			    {*y=(*y)|(u[i]);}
		      }
		 }
	     else
		 {if (ipar[1]==0)
		     {for (i=0;i&lt;m*n;i++)
			   {y[i]=0;
			    for (j=1;j&lt;nin+1;j++)
				 {u=Getint32InPortPtrs(block,j);
				  if (u[i]&gt;0) 
				      {y[i]=1;
				       break;}
				 }
			   }
		     }
		 else
		     {for (i=0;i&lt;m*n;i++)
			   {y[i]=0;
			    for (j=1;j&lt;nin+1;j++)
				 {u=Getint32InPortPtrs(block,j);
				  y[i]=(y[i])|(u[i]);
				 }
			   }
		     }
		 }
	break;
	case 2:
	     if (nin==1)
  		 {u=Getint32InPortPtrs(block,1);
		  if (ipar[1]==0)
		      {*y=0;
		       for(i=0;i&lt;m*n;i++)
     		       	  {if (u[i]&lt;=0)
		       	       {*y=1;
			        break;}
     		      	  }
		      }
		  else
		      {*y=u[0];
		       for (i=1;i&lt;m*n;i++)
			    {*y=((*y)&amp;(u[i]));}
		       *y=~*y;
		      }
		 }
	     else
		 {if (ipar[1]==0)
		     {for (i=0;i&lt;m*n;i++)
			   {y[i]=0;
			    for (j=1;j&lt;nin+1;j++)
				 {u=Getint32InPortPtrs(block,j);
				  if (u[i]&lt;=0) 
				      {y[i]=1;
				       break;}
				 } 
			   }
		     }
		 else
		     {for (i=0;i&lt;m*n;i++)
			   {u=Getint32InPortPtrs(block,1);
			    y[i]=u[i];
			    for (j=2;j&lt;nin+1;j++)
				 {u=Getint32InPortPtrs(block,j);
				  y[i]=((y[i])&amp;(u[i]));
				 }
			    y[i]=~y[i];
			   }
		     }
		 }
	break;
	case 3:
	     if (nin==1)
  		 {u=Getint32InPortPtrs(block,1);
		  if (ipar[1]==0)
		      {*y=1;
		       for(i=0;i&lt;m*n;i++)
     		       	  {if (u[i]&gt;0)
		       	       {*y=0;
			        break;}
     		      	  }
		      }
		  else
		      {*y=0;
		       for (i=0;i&lt;m*n;i++)
			    {*y=((*y)|(u[i]));}
		       *y=~*y;
		      }
		 }
	     else
		 {if (ipar[1]==0)
		     {for (i=0;i&lt;m*n;i++)
			   {y[i]=1;
			    for (j=1;j&lt;nin+1;j++)
				 {u=Getint32InPortPtrs(block,j);
				  if (u[i]&gt;0) 
				      {y[i]=0;
				       break;}
				 }
			   }
		     }
		 else
		     {for (i=0;i&lt;m*n;i++)
			   {u=Getint32InPortPtrs(block,1);
			    y[i]=u[i];
			    for (j=2;j&lt;nin+1;j++)
				 {u=Getint32InPortPtrs(block,j);
				  y[i]=((y[i])|(u[i]));
				 }
			    y[i]=~y[i];
			   }
		     }
		 }
	break;
	case 4:
	     if (nin==1)
  		 {u=Getint32InPortPtrs(block,1);
		  if (ipar[1]==0)
		      {l=0;
		       for(i=0;i&lt;m*n;i++)
     		       	  {if (u[i]&gt;0)
		       	       {l=(l+1)%2;
			       }
     		      	  }
		       *y=(long)l;
		      }
		  else
		      {*y=u[0];
		       for (i=1;i&lt;m*n;i++)
			    {*y=((*y)^(u[i]));}
		      }
		 }
	     else
		 {if (ipar[1]==0)
		     {for (i=0;i&lt;m*n;i++)
			   {l=0;
			    for (j=1;j&lt;nin+1;j++)
				 {u=Getint32InPortPtrs(block,j);
				  if (u[i]&gt;0) 
				      {l=(l+1)%2;}
				 }
			    y[i]=(long)l;
			   }
		     }
		 else
		     {for (i=0;i&lt;m*n;i++)
		           {u=Getint32InPortPtrs(block,1);
		           y[i]=u[i];
			   for (j=2;j&lt;nin+1;j++)
				 {u=Getint32InPortPtrs(block,j);
				  y[i]=((y[i])^(u[i]));
				 }
			   }
		     }
		 }
	     break;
	case 5:
	     u=Getint32InPortPtrs(block,1);
	     if (ipar[1]==0)
		 {for (i=0;i&lt;m*n;i++)
		       {if (u[i]&gt;0) y[i]=0;
			else y[i]=1;}
		 }
	     else
		 {for (i=0;i&lt;m*n;i++)
		       {y[i]=~(u[i]);}
		 }
	     break;
	}
}
</PRE>

<H3><font color="blue"><A NAME="SECTION00027000000000000000">
Fonction utilisée</A>
</font></H3>
<b>logicalop_i32</b>,
<b>logicalop_i16</b>,
<b>logicalop_i8</b>,
<b>logicalop_ui32</b>,
<b>logicalop_ui16</b>,
<b>logicalop_ui8</b>

<H3><font color="blue"><A NAME="SECTION00028000000000000000">
Voir aussi</A>
</font></H3>

<UL>
<LI><A NAME="tex2html4"
  HREF="LOGICALOP.htm">LOGICALOP</A>
</LI>
</UL>

<H3><font color="blue"><A NAME="SECTION00029000000000000000">
Auteurs</A>
</font></H3>
<b>Fady NASSIF</b> INRIA
 
<H3><font color="blue"><A NAME="SECTION00030000000000000000">
Bibliographie</A>
</font></H3><DL COMPACT><DD>Ajoutez ici la bibliographie si besoin
</DL>

<BR>




</BODY>
</HTML>
