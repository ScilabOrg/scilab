<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<!--Converted with LaTeX2HTML 2002-2-1 (1.71)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>mat_sing_routcos</TITLE>
<META NAME="description" CONTENT="mat_sing_routcos">
<META NAME="keywords" CONTENT="mat_sing_routcos">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="mat_sing_routcos.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<P>
<DIV ALIGN="CENTER">
Fonction de calcul
<BR><A NAME="tex2html1"
  HREF="./mat_sing_routcos.htm">fr</A>

</DIV>
<H2><A NAME="SECTION00010000000000000000"></A><A NAME="mat_sing_routcos"></A>
<BR>
mat_sing
</H2>

<H3><font color="blue"><A NAME="SECTION00011000000000000000">
Contenu du fichier</A>
</font></H3>
<BR>
<PRE  CLASS="verbatim"># include "scicos_block4.h"
# include "../machine.h"
#include &lt;stdio.h&gt;
extern int C2F(dgesvd)();
extern int C2F(dlaset)();
extern int C2F(dlacpy)();

#if WIN32
#define NULL    0
#endif

#ifndef min
#define min(a,b) ((a) &lt;= (b) ? (a) : (b))
#endif

#ifndef max
#define max(a,b) ((a) &gt;= (b) ? (a) : (b))
#endif

typedef struct
{	  double *LA;
          double *LU;
          double *LVT;
          double *dwork;
} mat_sing_struct ;
void mat_sing(scicos_block *block,int flag)
{
 double *u;
 double *y;
 int nu,mu;
 int info;
 int lwork;
 mat_sing_struct *ptr;
 mu=GetInPortRows(block,1);
 nu=GetInPortCols(block,1);
 u=GetRealInPortPtrs(block,1);
 y=GetRealOutPortPtrs(block,1);
 lwork=max(3*min(mu,nu)+max(mu,nu),5*min(mu,nu)-4); 
             /*init : initialization*/
if (flag==4)
   {if((*(block-&gt;work)=(mat_sing_struct*) scicos_malloc(sizeof(mat_sing_struct)))==NULL)
	{set_block_error(-16);
	 return;}
    ptr=*(block-&gt;work);
    if((ptr-&gt;LA=(double*) scicos_malloc(sizeof(double)*(mu*nu)))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;LU=(double*) scicos_malloc(sizeof(double)*(mu*mu)))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;LA);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;LVT=(double*) scicos_malloc(sizeof(double)*(nu*nu)))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;LU);
	 scicos_free(ptr-&gt;LA);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;dwork=(double*) scicos_malloc(sizeof(double)*lwork))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;LVT);
	 scicos_free(ptr-&gt;LU);
	 scicos_free(ptr-&gt;LA);
	 scicos_free(ptr);
	 return;}
   }

       /* Terminaison */
else if (flag==5)
   {ptr=*(block-&gt;work);
    if(ptr-&gt;dwork!=0) {
    	scicos_free(ptr-&gt;LA);
    	scicos_free(ptr-&gt;LU);
    	scicos_free(ptr-&gt;LVT);
    	scicos_free(ptr-&gt;dwork);
    	scicos_free(ptr);
    	return;}
   }

else
   {
    ptr=*(block-&gt;work);
    C2F(dlacpy)("F",&amp;mu,&amp;nu,u,&amp;mu,ptr-&gt;LA,&amp;mu);
    C2F(dgesvd)("A","A",&amp;mu,&amp;nu,ptr-&gt;LA,&amp;mu,y,ptr-&gt;LU,&amp;mu,ptr-&gt;LVT,&amp;nu,ptr-&gt;dwork,&amp;lwork,&amp;info);
     if (info !=0)
       {if (flag!=6)
   	{set_block_error(-7);
         return;}}
   }
}
</PRE>

<BR>




</BODY>
</HTML>
