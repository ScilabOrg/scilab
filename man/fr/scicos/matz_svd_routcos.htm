<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<!--Converted with LaTeX2HTML 2002-2-1 (1.71)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>matz_svd_routcos</TITLE>
<META NAME="description" CONTENT="matz_svd_routcos">
<META NAME="keywords" CONTENT="matz_svd_routcos">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="matz_svd_routcos.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<P>
<DIV ALIGN="CENTER">
Fonction de calcul
<BR><A NAME="tex2html1"
  HREF="./matz_svd_routcos.htm">fr</A>

</DIV>
<H2><A NAME="SECTION00010000000000000000"></A><A NAME="matz_svd_routcos"></A>
<BR>
matz_svd
</H2>

<H3><font color="blue"><A NAME="SECTION00011000000000000000">
Contenu du fichier</A>
</font></H3>
<BR>
<PRE  CLASS="verbatim"># include "scicos_block4.h"
# include "../machine.h"
#include &lt;stdio.h&gt;
extern int C2F(zgesvd)();
extern int C2F(dlaset)();

#if WIN32
#define NULL    0
#endif

#ifndef min
#define min(a,b) ((a) &lt;= (b) ? (a) : (b))
#endif

#ifndef max
#define max(a,b) ((a) &gt;= (b) ? (a) : (b))
#endif

typedef struct
{         double *l0;
	  double *LA;
	  double *LU;
          double *LSV;
          double *LVT;
          double *dwork;
          double *rwork;
} mat_sdv_struct ;
void matz_svd(scicos_block *block,int flag)
{
 double *ur,*ui;
 double *y1r,*y2r,*y3r;
 double *y1i,*y3i;
 int nu,mu;
 int info;
 int i,j,ij,ji,ii,lwork,rw;
 mat_sdv_struct *ptr;
 mu=GetInPortRows(block,1);
 nu=GetInPortCols(block,1);
 ur=GetRealInPortPtrs(block,1);
 ui=GetImagInPortPtrs(block,1);
 y1r=GetRealOutPortPtrs(block,1);
 y2r=GetRealOutPortPtrs(block,2);
 y3r=GetRealOutPortPtrs(block,3);
 y1i=GetImagOutPortPtrs(block,1);
 //y2i=GetImagOutPortPtrs(block,2);
 y3i=GetImagOutPortPtrs(block,3);
 lwork=max(3*min(mu,nu)+max(mu,nu),5*min(mu,nu)-4);
 rw=5*min(mu,nu);
             /*init : initialization*/
if (flag==4)
   {if((*(block-&gt;work)=(mat_sdv_struct*) scicos_malloc(sizeof(mat_sdv_struct)))==NULL)
	{set_block_error(-16);
	 return;}
    ptr=*(block-&gt;work);
    if((ptr-&gt;l0=(double*) scicos_malloc(sizeof(double)))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;LA=(double*) scicos_malloc(sizeof(double)*(2*mu*nu)))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;l0);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;LU=(double*) scicos_malloc(sizeof(double)*(2*mu*mu)))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;LA);
	 scicos_free(ptr-&gt;l0);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;LSV=(double*) scicos_malloc(sizeof(double)*(min(mu,nu))))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;LU);
	 scicos_free(ptr-&gt;LA);
	 scicos_free(ptr-&gt;l0);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;LVT=(double*) scicos_malloc(sizeof(double)*(2*nu*nu)))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;LSV);
	 scicos_free(ptr-&gt;LU);
	 scicos_free(ptr-&gt;LA);
	 scicos_free(ptr-&gt;l0);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;dwork=(double*) scicos_malloc(sizeof(double)*2*lwork))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;LVT);
	 scicos_free(ptr-&gt;LSV);
	 scicos_free(ptr-&gt;LU);
	 scicos_free(ptr-&gt;LA);
	 scicos_free(ptr-&gt;l0);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;rwork=(double*) scicos_malloc(sizeof(double)*2*rw))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;dwork);
	 scicos_free(ptr-&gt;LVT);
	 scicos_free(ptr-&gt;LSV);
	 scicos_free(ptr-&gt;LU);
	 scicos_free(ptr-&gt;LA);
	 scicos_free(ptr-&gt;l0);
	 scicos_free(ptr);
	 return;}
   }

       /* Terminaison */
else if (flag==5)
   {ptr=*(block-&gt;work);
    if((ptr-&gt;rwork)!=NULL){
    	scicos_free(ptr-&gt;l0);
    	scicos_free(ptr-&gt;LA);
    	scicos_free(ptr-&gt;LU);
    	scicos_free(ptr-&gt;LSV);
    	scicos_free(ptr-&gt;LVT);
    	scicos_free(ptr-&gt;dwork);
    	scicos_free(ptr);
    	return;}
   }

else
   {
    ptr=*(block-&gt;work);
    for (i=0;i&lt;(mu*nu);i++)
	{ptr-&gt;LA[2*i]=ur[i];
	 ptr-&gt;LA[2*i+1]=ui[i];}
    C2F(zgesvd)("A","A",&amp;mu,&amp;nu,ptr-&gt;LA,&amp;mu,ptr-&gt;LSV,ptr-&gt;LU,&amp;mu,ptr-&gt;LVT,&amp;nu,ptr-&gt;dwork,&amp;lwork,ptr-&gt;rwork,&amp;info);
     if (info !=0)
       {if (flag!=6)
   	{set_block_error(-7);
        return;}}
    
    *(ptr-&gt;l0)=0;
     C2F(dlaset)("F",&amp;mu,&amp;nu,ptr-&gt;l0,ptr-&gt;l0,y2r,&amp;mu);
    for (i=0;i&lt;min(mu,nu);i++)
	{ii=i+i*mu;
	 *(y2r+ii)=*(ptr-&gt;LSV+i);}
    for (j=0;j&lt;nu;j++)
	{for (i=j;i&lt;nu;i++)
		{ij=i+j*nu;
	 	 ji=j+i*nu;
		 *(y3r+ij)=*(ptr-&gt;LVT+2*ji);
		 *(y3r+ji)=*(ptr-&gt;LVT+2*ij);
		 *(y3i+ij)=-(*(ptr-&gt;LVT+2*ji+1));
		 *(y3i+ji)=-(*(ptr-&gt;LVT+2*ij+1));}
	}
    for (i=0;i&lt;mu*mu;i++)
	{*(y1r+i)=*(ptr-&gt;LU+2*i);
	 *(y1i+i)=*(ptr-&gt;LU+2*i+1);}
   }
}
</PRE>

<BR>




</BODY>
</HTML>
