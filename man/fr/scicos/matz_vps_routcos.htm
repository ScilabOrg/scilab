<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<!--Converted with LaTeX2HTML 2002-2-1 (1.71)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>matz_vps_routcos</TITLE>
<META NAME="description" CONTENT="matz_vps_routcos">
<META NAME="keywords" CONTENT="matz_vps_routcos">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="matz_vps_routcos.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<P>
<DIV ALIGN="CENTER">
Fonction de calcul
<BR><A NAME="tex2html1"
  HREF="./matz_vps_routcos.htm">fr</A>

</DIV>
<H2><A NAME="SECTION00010000000000000000"></A><A NAME="matz_vps_routcos"></A>
<BR>
matz_vps
</H2>

<H3><font color="blue"><A NAME="SECTION00011000000000000000">
Contenu du fichier</A>
</font></H3>
<BR>
<PRE  CLASS="verbatim"># include "scicos_block4.h"
# include "../machine.h"
#include &lt;stdio.h&gt;

#if WIN32
#define NULL    0
#endif

extern int C2F(zgeev)();
extern int C2F(zheev)();
typedef struct
{         double *LA;
          double *LX;
          double *LVR;
          double *dwork;
	  double *rwork;
          double *dwork1;
          double *rwork1;
} mat_vps_struct ;
void matz_vps(scicos_block *block,int flag)
{
 double *ur,*ui;
 double *yr,*yi;
 int nu;
 int info;
 int i,lwork,lwork1,j,ij,ji,rw;
 int hermitien;
 mat_vps_struct *ptr;
 
 nu =GetInPortRows(block,1);
 ur=GetRealInPortPtrs(block,1);
 ui=GetImagInPortPtrs(block,1);
 yr=GetRealOutPortPtrs(block,1);
 yi=GetImagOutPortPtrs(block,1);
 lwork1=2*nu;
 lwork=2*nu-1;
 rw=3*nu-2;
             /*init : initialization*/
if (flag==4)
   {if((*(block-&gt;work)=(mat_vps_struct*) scicos_malloc(sizeof(mat_vps_struct)))==NULL)
	{set_block_error(-16);
	 return;}
    ptr=*(block-&gt;work);
    if((ptr-&gt;LA=(double*) scicos_malloc(sizeof(double)*(2*nu*nu)))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;LX=(double*) scicos_malloc(sizeof(double)*(2*nu)))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;LA);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;LVR=(double*) scicos_malloc(sizeof(double)*(2*nu*nu)))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;LX);
	 scicos_free(ptr-&gt;LA);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;dwork=(double*) scicos_malloc(sizeof(double)*2*lwork))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;LVR);
	 scicos_free(ptr-&gt;LX);
	 scicos_free(ptr-&gt;LA);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;rwork=(double*) scicos_malloc(sizeof(double)*2*rw))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;dwork);
	 scicos_free(ptr-&gt;LVR);
	 scicos_free(ptr-&gt;LX);
	 scicos_free(ptr-&gt;LA);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;dwork1=(double*) scicos_malloc(sizeof(double)*2*lwork1))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;rwork);
	 scicos_free(ptr-&gt;dwork);
	 scicos_free(ptr-&gt;LVR);
	 scicos_free(ptr-&gt;LX);
	 scicos_free(ptr-&gt;LA);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;rwork1=(double*) scicos_malloc(sizeof(double)*2*lwork1))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;dwork1);
	 scicos_free(ptr-&gt;rwork);
	 scicos_free(ptr-&gt;dwork);
	 scicos_free(ptr-&gt;LVR);
	 scicos_free(ptr-&gt;LX);
	 scicos_free(ptr-&gt;LA);
	 scicos_free(ptr);
	 return;}
   }

       /* Terminaison */
else if (flag==5)
   {ptr=*(block-&gt;work);
    if((ptr-&gt;rwork1)!=NULL) {
    	scicos_free(ptr-&gt;LA);
    	scicos_free(ptr-&gt;LX);
    	scicos_free(ptr-&gt;LVR);
    	scicos_free(ptr-&gt;rwork);
    	scicos_free(ptr-&gt;rwork1);
    	scicos_free(ptr-&gt;dwork);
    	scicos_free(ptr-&gt;dwork1);
    	scicos_free(ptr);
    	return;}
   }

else
   {
    ptr=*(block-&gt;work);
    for (i=0;i&lt;(nu*nu);i++)
	{ptr-&gt;LA[2*i]=ur[i];
	 ptr-&gt;LA[2*i+1]=ui[i];}
   hermitien=1;
    for (j=0;j&lt;nu;j++)
	{for (i=j;i&lt;nu;i++)
		{ij=i+j*nu;
		 ji=j+i*nu;
		if (i!=j)
			{if ((*(ptr-&gt;LA+2*ij)==*(ptr-&gt;LA+2*ji))&amp;&amp;(*(ptr-&gt;LA+2*ij+1)==-(*(ptr-&gt;LA+2*ji+1)))) hermitien*= 1;
			 else { hermitien*=0;break;}}}}
    if (hermitien==1)
	{C2F(zheev)("N","U",&amp;nu,ptr-&gt;LA,&amp;nu,yr,ptr-&gt;dwork,&amp;lwork,ptr-&gt;rwork,&amp;info);
	 if (info!=0)
	    	{if (flag!=6)
		{set_block_error(-7);
		return;
		}}
	}
   else
	{C2F(zgeev)("N","N",&amp;nu,ptr-&gt;LA,&amp;nu,ptr-&gt;LX,ptr-&gt;dwork1,&amp;nu,ptr-&gt;LVR,&amp;nu,ptr-&gt;dwork1,&amp;lwork1,ptr-&gt;rwork1,&amp;info);
        if (info!=0)
	    	{if (flag!=6)
		{set_block_error(-7);
		return;
		}}
	for (i=0;i&lt;nu;i++)
		{*(yr+i)=*(ptr-&gt;LX+2*i);
		 *(yi+i)=*(ptr-&gt;LX+2*i+1);}
	}
   }
}
</PRE>

<BR>




</BODY>
</HTML>
