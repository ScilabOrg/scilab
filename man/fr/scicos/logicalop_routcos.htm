<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<!--Converted with LaTeX2HTML 2002-2-1 (1.71)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>logicalop_routcos</TITLE>
<META NAME="description" CONTENT="logicalop_routcos">
<META NAME="keywords" CONTENT="logicalop_routcos">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="logicalop_routcos.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<P>
<DIV ALIGN="CENTER">
Fonction de calcul
<BR><A NAME="tex2html1"
  HREF="./logicalop_routcos.htm">fr</A>

</DIV>
<H2><A NAME="SECTION00010000000000000000"></A><A NAME="logicalop_routcos"></A>
<BR>
logicalop
</H2>

<H3><font color="blue"><A NAME="SECTION00011000000000000000">
Contenu du fichier</A>
</font></H3>
<BR>
<PRE  CLASS="verbatim">#include "scicos_block.h"
#include &lt;math.h&gt;

void logicalop(scicos_block *block,int flag)
{
  int i,j,k,l;
  i=block-&gt;ipar[0];
  switch (i)
    {
    case 0:
      if (block-&gt;nin==1)
	{
	  block-&gt;outptr[0][0]=1.0;
	  for (j=0;j&lt;block-&gt;insz[0];j++) {
	    if(block-&gt;inptr[0][j]&lt;=0)
	      {
		block-&gt;outptr[0][0]=0.0;
		break;
	      }
	  }
	}
      else {
	for (j=0;j&lt;block-&gt;insz[0];j++) {
	  block-&gt;outptr[0][j]=1.0;
	  for (k=0;k&lt;block-&gt;nin;k++) {
	    if(block-&gt;inptr[k][j]&lt;=0) {
	      block-&gt;outptr[0][j]=0.0;
	      break;
	    }
	  }
	}
      }
      break;
      
    case 1:
      if (block-&gt;nin==1)
	{
	  block-&gt;outptr[0][0]=0.0;
	  for (j=0;j&lt;block-&gt;insz[0];j++) {
	    if(block-&gt;inptr[0][j]&gt;0) {
	      block-&gt;outptr[0][0]=1.0;
	      break;
	    }
	  }
	}
      else {
	for (j=0;j&lt;block-&gt;insz[0];j++) {
	  block-&gt;outptr[0][j]=0.0;
	  for (k=0;k&lt;block-&gt;nin;k++) {
	    if(block-&gt;inptr[k][j]&gt;0) {
	      block-&gt;outptr[0][j]=1.0;
	      break;
	    }
	  }
	}
      }
      break;

    case 2:
      if (block-&gt;nin==1)
	{
	  block-&gt;outptr[0][0]=0.0;
	  for (j=0;j&lt;block-&gt;insz[0];j++) {
	    if(block-&gt;inptr[0][j]&lt;=0)
	      {
		block-&gt;outptr[0][0]=1.0;
		break;
	      }
	  }
	}
      else {
	for (j=0;j&lt;block-&gt;insz[0];j++) {
	  block-&gt;outptr[0][j]=0.0;
	  for (k=0;k&lt;block-&gt;nin;k++) {
	    if(block-&gt;inptr[k][j]&lt;=0) {
	      block-&gt;outptr[0][j]=1.0;
	      break;
	    }
	  }
	}
      }
      break;

    case 3:
      if (block-&gt;nin==1)
	{
	  block-&gt;outptr[0][0]=1.0;
	  for (j=0;j&lt;block-&gt;insz[0];j++) {
	    if(block-&gt;inptr[0][j]&gt;0) {
	      block-&gt;outptr[0][0]=0.0;
	      break;
	    }
	  }
	}
      else {
	for (j=0;j&lt;block-&gt;insz[0];j++) {
	  block-&gt;outptr[0][j]=1.0;
	  for (k=0;k&lt;block-&gt;nin;k++) {
	    if(block-&gt;inptr[k][j]&gt;0) {
	      block-&gt;outptr[0][j]=0.0;
	      break;
	    }
	  }
	}
      }
      break;

    case 4:
      if (block-&gt;nin==1)
	{
	  l=0;
	  for (j=0;j&lt;block-&gt;insz[0];j++) {
	    if(block-&gt;inptr[0][j]&gt;0) {
	      l=(l+1)%2;
	    }
	  }
	  block-&gt;outptr[0][0]=(double) l;
	}
      else {
	for (j=0;j&lt;block-&gt;insz[0];j++) {
	  l=0;
	  for (k=0;k&lt;block-&gt;nin;k++) {
	    if(block-&gt;inptr[k][j]&gt;0) {
	      l=(l+1)%2;
	    }
	  }
	  block-&gt;outptr[0][j]=(double) l;
	}
      }
      break;

    case 5:
      for (j=0;j&lt;block-&gt;insz[0];j++) {
	if(block-&gt;inptr[0][j]&gt;0) {
	  block-&gt;outptr[0][j]=0.0;
	}
	else{
	  block-&gt;outptr[0][j]=1.0;
	}
      }
    }
}
</PRE>

<BR>




</BODY>
</HTML>
