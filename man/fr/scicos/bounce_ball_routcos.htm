<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<!--Converted with LaTeX2HTML 2002-2-1 (1.71)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>bounce_ball_routcos</TITLE>
<META NAME="description" CONTENT="bounce_ball_routcos">
<META NAME="keywords" CONTENT="bounce_ball_routcos">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="bounce_ball_routcos.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<P>
<DIV ALIGN="CENTER">
Fonction de calcul
<BR><A NAME="tex2html1"
  HREF="./bounce_ball_routcos.htm">fr</A>

</DIV>
<H2><A NAME="SECTION00010000000000000000"></A><A NAME="bounce_ball_routcos"></A>
<BR>
bounce_ball
</H2>

<H3><font color="blue"><A NAME="SECTION00011000000000000000">
Contenu du fichier</A>
</font></H3>
<BR>
<PRE  CLASS="verbatim">
#include &lt;math.h&gt;
#include "../machine.h"
#include "scicos_block.h"

void 
bounce_ball(scicos_block *block,int flag)
{

     int nevprt,nx,*ipar;
     int *outsz;
     double *x,*xd,*rpar;
     double *g;
     int ng;
     int *jroot;
     
     
  int i1;
  double d1, d2, d3;
  
  static double a, b, c;
  static int i, j, k, n;
  static double s1, s2, s3, s4, xsi,*y1,*y2;
  
  /*     Scicos block simulator */
  /*     bouncing ball */
  /*     rpar(i): mass of ball i */
  /*     rpar(i+n): radius of ball i */
  /*     rpar(2n+1:2n+4); [xmin,xmax,ymin,ymax] */
  /*     x: [x1,x1',y1,y1',x2,x2',y2,y2',...,yn'] */
  /*     n:number of ball=ny1=ny2 */
  /*     y1: x-coord des balles */
  /*     y2: y-coord des balles */
  /*     ipar: storage de taille [nx(n-1)/2=ng]*2 */
  nevprt=block-&gt;nevprt;
  nx=block-&gt;nx;
  ipar=block-&gt;ipar;
  outsz=block-&gt;outsz;
  x=block-&gt;x;
  xd=block-&gt;xd;
  rpar=block-&gt;rpar;

  g=block-&gt;g;
  ng=block-&gt;ng;
  jroot=block-&gt;jroot;
  /* Parameter adjustments to index vectors as in Scilab (fortran)*/
  --g;
  --ipar;
  --rpar;
  --x;
  --xd;
  y1=block-&gt;outptr[0];
  y2=block-&gt;outptr[1];
  --y2;
  --y1;
  --jroot;
  
  n = outsz[0];
  if (flag == 0) {
    c = rpar[(n &lt;&lt; 1) + 6];
    i1 = n;
    for (i = 1; i &lt;= i1; ++i) {
      xd[((i - 1) &lt;&lt; 2) + 1] = x[((i - 1) &lt;&lt; 2) + 2];
      xd[((i - 1) &lt;&lt; 2) + 3] = x[((i - 1) &lt;&lt; 2) + 4];
      xd[((i - 1) &lt;&lt; 2) + 2] = -c * x[((i - 1) &lt;&lt; 2) + 2];
      xd[((i - 1) &lt;&lt; 2) + 4] = -rpar[(n &lt;&lt; 1) + 5] ;
    }
    
  } else if (flag == 1) {
    i1 = n;
    for (i = 1; i &lt;= i1; ++i) {
      y1[i] = x[((i - 1) &lt;&lt; 2) + 1];
      y2[i] = x[((i - 1) &lt;&lt; 2) + 3];
    }
  } else if (flag == 9) {
    i1 = ng - (n &lt;&lt; 2);
    for (k = 1; k &lt;= i1; ++k) {
      i = ipar[((k - 1) &lt;&lt; 1) + 1];
      j = ipar[((k - 1) &lt;&lt; 1) + 2];
      d1 = x[((i - 1) &lt;&lt; 2) + 1] - x[((j - 1) &lt;&lt; 2) + 1];
      d2 = x[((i - 1) &lt;&lt; 2) + 3] - x[((j - 1) &lt;&lt; 2) + 3];
      d3 = rpar[i + n] + rpar[j + n];
      g[k] = d1 * d1 + d2 * d2 - d3 * d3;
    }
    k = ng - (n &lt;&lt; 2) + 1;
    i1 = n;
    for (i = 1; i &lt;= i1; ++i) {
      g[k] = x[((i - 1) &lt;&lt; 2) + 3] - rpar[i + n] - rpar[(n &lt;&lt; 1) + 3];
      ++k;
      g[k] = rpar[(n &lt;&lt; 1) + 4] - x[((i - 1) &lt;&lt; 2) + 3] - rpar[i + n];
      ++k;
      g[k] = x[((i - 1) &lt;&lt; 2) + 1] - rpar[(n &lt;&lt; 1) + 1] - rpar[i + n];
      ++k;
      g[k] = rpar[(n &lt;&lt; 1) + 2] - rpar[i + n] - x[((i - 1) &lt;&lt; 2) + 1];
      ++k;
    }
    
  } else if (flag == 2 &amp;&amp; nevprt &lt; 0) {
    i1 = ng - (n &lt;&lt; 2);
    for (k = 1; k &lt;= i1; ++k) {
      if (jroot[k] &lt; 0) {
	i = ipar[((k - 1) &lt;&lt; 1) + 1];
	j = ipar[((k - 1) &lt;&lt; 1) + 2];
	s1 = x[((j - 1) &lt;&lt; 2) + 1] - x[((i - 1) &lt;&lt; 2) + 1];
	s2 = -rpar[i] * s1 / rpar[j];
	s3 = x[((j - 1) &lt;&lt; 2) + 3] - x[((i - 1) &lt;&lt; 2) + 3];
	s4 = -rpar[i] * s3 / rpar[j];
	a = rpar[i] * (s1 * s1 + s3 * s3) + rpar[j] * (s2 * s2 + s4 
						       * s4);
	b = rpar[i] * (s1 * x[((i - 1) &lt;&lt; 2) + 2] + s3 * x[((i - 1 )
							  &lt;&lt; 2) + 4]) + rpar[j] * (s2 * x[((j - 1) &lt;&lt; 2) + 2] + 
										   s4 * x[((j - 1) &lt;&lt; 2) + 4]);
	xsi = -(b * 2. / a);
	x[((i - 1) &lt;&lt; 2) + 2] += s1 * xsi;
	x[((j - 1) &lt;&lt; 2) + 2] += s2 * xsi;
	x[((i - 1) &lt;&lt; 2) + 4] += s3 * xsi;
	x[((j - 1) &lt;&lt; 2) + 4] += s4 * xsi;
      }
    }
    k = ng - (n &lt;&lt; 2) + 1;
    i1 = n;
    for (i = 1; i &lt;= i1; ++i) {
      if (jroot[k] &lt; 0) {
	x[((i - 1) &lt;&lt; 2) + 4] = -x[((i - 1) &lt;&lt; 2) + 4];
      }
      ++k;
      if (jroot[k] &lt; 0) {
	x[((i - 1) &lt;&lt; 2) + 4] = -x[((i - 1) &lt;&lt; 2) + 4];
      }
      ++k;
      if (jroot[k] &lt; 0) {
	x[((i - 1) &lt;&lt; 2) + 2] = -x[((i - 1) &lt;&lt; 2) + 2];
      }
      ++k;
      if (jroot[k] &lt; 0) {
	x[((i - 1) &lt;&lt; 2) + 2] = -x[((i - 1) &lt;&lt; 2) + 2];
      }
      ++k;
    }
  }
} 
</PRE>

<BR>




</BODY>
</HTML>
