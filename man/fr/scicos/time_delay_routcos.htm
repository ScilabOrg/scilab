<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<!--Converted with LaTeX2HTML 2002-2-1 (1.71)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>time_delay_routcos</TITLE>
<META NAME="description" CONTENT="time_delay_routcos">
<META NAME="keywords" CONTENT="time_delay_routcos">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="time_delay_routcos.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<P>
<DIV ALIGN="CENTER">
Fonction de calcul
<BR><A NAME="tex2html1"
  HREF="./time_delay_routcos.htm">fr</A>

</DIV>
<H2><A NAME="SECTION00010000000000000000"></A><A NAME="time_delay_routcos"></A>
<BR>
time_delay
</H2>

<H3><font color="blue"><A NAME="SECTION00011000000000000000">
Contenu du fichier</A>
</font></H3>
<BR>
<PRE  CLASS="verbatim">#include "scicos_block.h"
#include &lt;math.h&gt;
#include "../machine.h"

#if WIN32
#define NULL    0
#endif

extern void sciprint __PARAMS((char *fmt,...));

void time_delay(scicos_block *block,int flag)
{/*  rpar[0]=delay, rpar[1]=init value, ipar[0]=buffer length */
  double* pw,del,t,td,eps;
  int* iw;
  int i,j,k;
  if (flag == 4){/* the workspace is used to store previous values */
    if ((*block-&gt;work=
	 scicos_malloc(sizeof(int)+sizeof(double)* 
		       block-&gt;ipar[0]*(1+block-&gt;insz[0])))== NULL ) {
      set_block_error(-16);
      return;
    }
    eps=1.0e-9; /* shift times to left to avoid replacing 0 */
    pw=*block-&gt;work; 
    pw[0]=-block-&gt;rpar[0]*(block-&gt;ipar[0]-1)-eps;
    for(j=1;j&lt; block-&gt;insz[0]+1;j++){
	pw[block-&gt;ipar[0]*j]=block-&gt;rpar[1];
    }

    for(i=1;i&lt; block-&gt;ipar[0];i++){
      pw[i]=pw[i-1]+block-&gt;rpar[0]-eps;
      for(j=1;j&lt; block-&gt;insz[0]+1;j++){
	pw[i+block-&gt;ipar[0]*j]=block-&gt;rpar[1];
      }
    }
    
    iw=(int *)(pw+block-&gt;ipar[0]*(1+block-&gt;insz[0]));
    *iw=0;
    for (k=0;k&lt;block-&gt;insz[0];k++){
	block-&gt;outptr[0][k]=block-&gt;rpar[1];
    }
  }else  if (flag == 5){
    scicos_free(*block-&gt;work);

  } else if (flag==0||flag==2) {
    if (flag==2) do_cold_restart();
    pw=*block-&gt;work; 
    iw=(int *)(pw+block-&gt;ipar[0]*(1+block-&gt;insz[0]));
    t=get_scicos_time();
    td=t-block-&gt;rpar[0];
    if(td&lt;pw[*iw]){
      sciprint("delayed time=%f but last stored time=%f \r\n", td, pw[*iw]);
      sciprint("Consider increasing the length of buffer in delay block \r\n");
    }

    if (t&gt;pw[(block-&gt;ipar[0]+*iw-1)%block-&gt;ipar[0]]){
      for(j=1;j&lt; block-&gt;insz[0]+1;j++){
	pw[*iw +block-&gt;ipar[0]*j]=block-&gt;inptr[0][j-1];
      }
      pw[*iw]=t;
      /*sciprint("**time is %f. I put %f, in %d \r\n", t,block-&gt;inptr[0][0],*iw);*/
      *iw=(*iw+1)%block-&gt;ipar[0];
 
    }else{
      for(j=1;j&lt; block-&gt;insz[0]+1;j++){
	pw[(block-&gt;ipar[0]+*iw-1)%block-&gt;ipar[0] +block-&gt;ipar[0]*j]=block-&gt;inptr[0][j-1];
      }
      pw[(block-&gt;ipar[0]+*iw-1)%block-&gt;ipar[0]]=t;
      /*sciprint("**time is %f. I put %f, in %d \r\n", t,block-&gt;inptr[0][0],*iw);*/

    }

  } else if (flag==1) {
    pw=*block-&gt;work; 
    iw=(int *) (pw+block-&gt;ipar[0]*(1+block-&gt;insz[0]));
    t=get_scicos_time();
    td=t-block-&gt;rpar[0];

    i=0;j= block-&gt;ipar[0]-1;

    while (j-i&gt;1) {
      k=(i+j)/2;
      if (td&lt;pw[(k+*iw)%block-&gt;ipar[0]]) {
	j=k;
      }else if (td&gt;pw[(k+*iw)%block-&gt;ipar[0]]) {
	i=k;
      }else{
	i=k;
	j=k;
	break;
      }
    }
    i=(i+*iw)%block-&gt;ipar[0];
    j=(j+*iw)%block-&gt;ipar[0];
    del=pw[j]-pw[i];
    /*    sciprint("time is %f. interpolating %d and %d, i.e. %f, %f\r\n", t,i,j,pw[i],pw[j]);
	  sciprint("values are  %f   %f.\r\n",pw[i+block-&gt;ipar[0]],pw[j+block-&gt;ipar[0]]);*/
    if(del!=0.0){
      for (k=1;k&lt;block-&gt;insz[0]+1;k++){
	block-&gt;outptr[0][k-1]=((pw[j]-td)*pw[i+block-&gt;ipar[0]*k] +
			       (td-pw[i])*pw[j+block-&gt;ipar[0]*k])/del;
      }
    }else{
      for (k=1;k&lt;block-&gt;insz[0]+1;k++){
	block-&gt;outptr[0][k-1]=pw[i+block-&gt;ipar[0]*k];
      }
    }
  }
}
</PRE>

<BR>




</BODY>
</HTML>
