<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<!--Converted with LaTeX2HTML 2002-2-1 (1.71)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>matz_bksl_routcos</TITLE>
<META NAME="description" CONTENT="matz_bksl_routcos">
<META NAME="keywords" CONTENT="matz_bksl_routcos">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="matz_bksl_routcos.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<P>
<DIV ALIGN="CENTER">
Fonction de calcul
<BR><A NAME="tex2html1"
  HREF="./matz_bksl_routcos.htm">fr</A>

</DIV>
<H2><A NAME="SECTION00010000000000000000"></A><A NAME="matz_bksl_routcos"></A>
<BR>
matz_bksl
</H2>

<H3><font color="blue"><A NAME="SECTION00011000000000000000">
Contenu du fichier</A>
</font></H3>
<BR>
<PRE  CLASS="verbatim"># include "scicos_block4.h"
# include "../machine.h"
#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
extern int C2F(zlacpy)();
extern int C2F(zgetrf)();
extern double C2F(dlamch)();
extern double C2F(zlange)();
extern int C2F(zgecon)();
extern int C2F(zgetrs)();
extern int C2F(zgelsy1)();

#if WIN32
#define NULL    0
#endif

#ifndef min
#define min(a,b) ((a) &lt;= (b) ? (a) : (b))
#endif

#ifndef max
#define max(a,b) ((a) &gt;= (b) ? (a) : (b))
#endif

typedef struct
{         int *ipiv;
          int *rank;
          int *jpvt;
          double *iwork;
          double *dwork;
	  double *IN1F;
	  double *IN1;
	  double *IN2X;
	  double *IN2;
} mat_bksl_struct ;
void matz_bksl(scicos_block *block,int flag)
{
 double *u1r,*u1i;
 double *u2r,*u2i;
 double *yr,*yi;
 int mu,vu,wu;
 int nu1;
 int nu2;
 int info;
 int i,j,l,lw,lu,rw,ij,k;
 mat_bksl_struct *ptr;
 double rcond, ANORM, EPS;
 vu =GetOutPortRows(block,1);
 wu =GetOutPortCols(block,1);
 mu =GetInPortRows(block,1);
 nu1 =GetInPortCols(block,1);
 nu2 =GetInPortCols(block,2);
 u1r=GetRealInPortPtrs(block,1);
 u1i=GetImagInPortPtrs(block,1);
 u2r=GetRealInPortPtrs(block,2);
 u2i=GetImagInPortPtrs(block,2);
 yr=GetRealOutPortPtrs(block,1);
 yi=GetImagOutPortPtrs(block,1);
 l=max(mu,nu1);
 lw=max(2*min(mu,nu1),nu1+1);
 lu=max(lw,min(mu,nu1)+nu2);
 lw=max(2*nu1,min(mu,nu1)+lu);
 rw=2*nu1;
             /*init : initialization*/
if (flag==4)
   {if((*(block-&gt;work)=(mat_bksl_struct*) scicos_malloc(sizeof(mat_bksl_struct)))==NULL)
	{set_block_error(-16);
	 return;}
    ptr=*(block-&gt;work);
    if((ptr-&gt;ipiv=(int*) scicos_malloc(sizeof(int)*nu1))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;rank=(int*) scicos_malloc(sizeof(int)))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;ipiv);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;jpvt=(int*) scicos_malloc(sizeof(int)*nu1))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;rank);
	 scicos_free(ptr-&gt;ipiv);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;iwork=(double*) scicos_malloc(sizeof(double)*2*nu1))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;jpvt);
	 scicos_free(ptr-&gt;rank);
	 scicos_free(ptr-&gt;ipiv);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;dwork=(double*) scicos_malloc(sizeof(double)*2*lw))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;iwork);
	 scicos_free(ptr-&gt;jpvt);
	 scicos_free(ptr-&gt;rank);
	 scicos_free(ptr-&gt;ipiv);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;IN1F=(double*) scicos_malloc(sizeof(double)*(2*mu*nu1)))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;dwork);
	 scicos_free(ptr-&gt;iwork);
	 scicos_free(ptr-&gt;jpvt);
	 scicos_free(ptr-&gt;rank);
	 scicos_free(ptr-&gt;ipiv);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;IN1=(double*) scicos_malloc(sizeof(double)*(2*mu*nu1)))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;IN1F);
	 scicos_free(ptr-&gt;dwork);
	 scicos_free(ptr-&gt;iwork);
	 scicos_free(ptr-&gt;jpvt);
	 scicos_free(ptr-&gt;rank);
	 scicos_free(ptr-&gt;ipiv);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;IN2X=(double*) scicos_malloc(sizeof(double)*(2*l*nu2)))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;IN1);
	 scicos_free(ptr-&gt;IN1F);
	 scicos_free(ptr-&gt;dwork);
	 scicos_free(ptr-&gt;iwork);
	 scicos_free(ptr-&gt;jpvt);
	 scicos_free(ptr-&gt;rank);
	 scicos_free(ptr-&gt;ipiv);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;IN2=(double*) scicos_malloc(sizeof(double)*(2*mu*nu2)))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;IN2);
	 scicos_free(ptr-&gt;IN1);
	 scicos_free(ptr-&gt;IN1F);
	 scicos_free(ptr-&gt;dwork);
	 scicos_free(ptr-&gt;iwork);
	 scicos_free(ptr-&gt;jpvt);
	 scicos_free(ptr-&gt;rank);
	 scicos_free(ptr-&gt;ipiv);
	 scicos_free(ptr);
	 return;}
   }

       /* Terminaison */
else if (flag==5)
   {ptr=*(block-&gt;work);
    if((ptr-&gt;IN2)!=NULL){
    	scicos_free(ptr-&gt;ipiv);
    	scicos_free(ptr-&gt;rank);
    	scicos_free(ptr-&gt;jpvt);
    	scicos_free(ptr-&gt;iwork);
    	scicos_free(ptr-&gt;IN1F);
    	scicos_free(ptr-&gt;IN1);
    	scicos_free(ptr-&gt;IN2X);
    	scicos_free(ptr-&gt;IN2);
    	scicos_free(ptr-&gt;dwork);
    	scicos_free(ptr);
    	return;}
   }

else
   {
    ptr=*(block-&gt;work);
    for (i=0;i&lt;(mu*nu1);i++)   
	{ptr-&gt;IN1[2*i]=u1r[i];
	 ptr-&gt;IN1[2*i+1]=u1i[i];}
    for (i=0;i&lt;(mu*nu2);i++)   
	{ptr-&gt;IN2[2*i]=u2r[i];
	 ptr-&gt;IN2[2*i+1]=u2i[i];}
    EPS=C2F(dlamch)("e",1L);
    ANORM=C2F(zlange)("1",&amp;mu,&amp;nu1,ptr-&gt;IN1,&amp;mu,ptr-&gt;dwork);
    if (mu==nu1)
	{C2F(zlacpy)("F",&amp;mu,&amp;nu1,ptr-&gt;IN1,&amp;mu,ptr-&gt;IN1F,&amp;mu);
	 C2F(zgetrf)(&amp;nu1,&amp;nu1,ptr-&gt;IN1F,&amp;nu1,ptr-&gt;ipiv,&amp;info);
	 rcond=0;
 	 if (info==0)
	    {C2F(zgecon)("1",&amp;nu1,ptr-&gt;IN1F,&amp;nu1,&amp;ANORM,&amp;rcond,ptr-&gt;dwork,ptr-&gt;iwork,&amp;info);
	     if (rcond&gt;pow(EPS,0.5))
		{
		 C2F(zgetrs)("N",&amp;nu1,&amp;nu2,ptr-&gt;IN1F,&amp;nu1,ptr-&gt;ipiv,ptr-&gt;IN2,&amp;nu1,&amp;info);
		 for (i=0;i&lt;(mu*nu2);i++)
	   	 {*(yr+i)=*(ptr-&gt;IN2+2*i);
	    	  *(yi+i)=*(ptr-&gt;IN2+(2*i)+1);}
		 return;
		}
	    }
	}
    rcond=pow(EPS,0.5);
    for (i=0;i&lt;nu1;i++)    *(ptr-&gt;jpvt+i)=0;
    C2F(zlacpy)("F",&amp;mu,&amp;nu2,ptr-&gt;IN2,&amp;mu,ptr-&gt;IN2X,&amp;l);
    C2F(zgelsy1)(&amp;mu,&amp;nu1,&amp;nu2,ptr-&gt;IN1,&amp;mu,ptr-&gt;IN2X,&amp;l,ptr-&gt;jpvt,&amp;rcond,ptr-&gt;rank,ptr-&gt;dwork,&amp;lw,ptr-&gt;iwork,&amp;info);
    if (info!=0)
	{if (flag!=6)
	    {set_block_error(-7);
             return;
	    }
	}
	k=0;
	for(j=0;j&lt;wu;j++)
	    {for(i=0;i&lt;vu;i++)
		{ij=i+j*l;
		 *(yr+k)=*(ptr-&gt;IN2X+2*ij);
	 	 *(yi+k)=*(ptr-&gt;IN2X+(2*ij)+1);
		k++;}}
    }
}
</PRE>

<BR>




</BODY>
</HTML>
