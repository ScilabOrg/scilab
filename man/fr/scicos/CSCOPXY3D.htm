<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<!--Converted with LaTeX2HTML 2002-2-1 (1.71)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>CSCOPXY3D</TITLE>
<META NAME="description" CONTENT="CSCOPXY3D">
<META NAME="keywords" CONTENT="CSCOPXY3D">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="CSCOPXY3D.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<P>
<DIV ALIGN="CENTER">
Bloc Scicos
<BR><A NAME="tex2html1"
  HREF="./CSCOPXY3D.htm">fr</A> - <A NAME="tex2html2"
  HREF="../../eng/scicos/CSCOPXY3D.htm">eng</A>

</DIV>
<H2><A NAME="SECTION00010000000000000000"></A><A NAME="CSCOPXY3D"></A>
<BR>
CSCOPXY3D titre
</H2>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfig{file=CSCOPXY3D.eps,width=90.00pt}$
 -->
<IMG
 WIDTH="143" HEIGHT="152" ALIGN="BOTTOM" BORDER="0"
 SRC="../../images/scicos/CSCOPXY3D_blk.gif"
 ALT="\epsfig{file=CSCOPXY3D.eps,width=90.00pt}">

</DIV>
<BR>

<H3><font color="blue"><A NAME="SECTION00020000000000000000">
Contenu</A>
</font></H3>
<!--Table of Contents-->

<UL CLASS="TofC">
<LI><A NAME="tex2html4"
  HREF="CSCOPXY3D.htm#SECTION00010000000000000000">CSCOPXY3D titre</A>
<UL>
<LI><A NAME="tex2html5"
  HREF="CSCOPXY3D.htm#SECTION00021000000000000000">Palette</A>
<LI><A NAME="tex2html6"
  HREF="CSCOPXY3D.htm#SECTION00022000000000000000">Description</A>
<LI><A NAME="tex2html7"
  HREF="CSCOPXY3D.htm#SECTION00023000000000000000">Boîte de dialogue</A>
<LI><A NAME="tex2html8"
  HREF="CSCOPXY3D.htm#SECTION00024000000000000000">Propriétés par défaut</A>
<LI><A NAME="tex2html9"
  HREF="CSCOPXY3D.htm#SECTION00025000000000000000">Fonction d'interface</A>
<LI><A NAME="tex2html10"
  HREF="CSCOPXY3D.htm#SECTION00026000000000000000">Fonction de calcul (type 4)</A>
<LI><A NAME="tex2html11"
  HREF="CSCOPXY3D.htm#SECTION00027000000000000000">Auteurs</A>
</UL></UL>
<!--End of Table of Contents-->
<H3><font color="blue"><A NAME="SECTION00021000000000000000">
Palette</A>
</font></H3>

<UL>
<LI><A NAME="tex2html3"
  HREF="Sinks_pal.htm">Sinks - Palette Affichage</A>
</LI>
</UL>
<H3><font color="blue"><A NAME="SECTION00022000000000000000">
Description</A>
</font></H3>

<P>
Ajoutez ici un paragraphe pour la description de la fonction  
<BR>
<H3><font color="blue"><A NAME="SECTION00023000000000000000">
Boîte de dialogue</A>
</font></H3>

<DIV ALIGN="CENTER">
<IMG
 WIDTH="477" HEIGHT="306" BORDER="0"
 SRC="../../images/scicos/CSCOPXY3D_gui.gif"
 ALT="\begin{figure}\begin{center}
\epsfig{file=CSCOPXY3D_gui.eps,width=300pt}
\end{center}\end{figure}">
</DIV>

<P>

<UL>
<LI><b>Number of curves</b>
<BR>
La description du paramètre 1.
<BR>
Propriétés : Type 'vec' de taille 1.
</LI>
<LI><b>color (<SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="../../images/scicos/CSCOPXY3D_img3_fr.gif"
 ALT="$ &gt;$"></SPAN>
0) or mark (<SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="../../images/scicos/CSCOPXY3D_img4_fr.gif"
 ALT="$ &lt;$"></SPAN>
0)</b>
<BR>
La description du paramètre 2.
<BR>
Propriétés : Type 'vec' de taille -1.
</LI>
<LI><b>Line or Mark Size</b>
<BR>
La description du paramètre 3.
<BR>
Propriétés : Type 'vec' de taille -1.
</LI>
<LI><b>Output window number (-1 for automatic)</b>
<BR>
La description du paramètre 4.
<BR>
Propriétés : Type 'vec' de taille 1.
</LI>
<LI><b>Output window position</b>
<BR>
La description du paramètre 5.
<BR>
Propriétés : Type 'vec' de taille -1.
</LI>
<LI><b>Output window sizes</b>
<BR>
La description du paramètre 6.
<BR>
Propriétés : Type 'vec' de taille -1.
</LI>
<LI><b>Xmin and Xmax</b>
<BR>
La description du paramètre 7.
<BR>
Propriétés : Type 'vec' de taille -1.
</LI>
<LI><b>Ymin and Ymax</b>
<BR>
La description du paramètre 8.
<BR>
Propriétés : Type 'vec' de taille -1.
</LI>
<LI><b>Zmin and Zmax</b>
<BR>
La description du paramètre 9.
<BR>
Propriétés : Type 'vec' de taille -1.
</LI>
<LI><b>Alpha and Theta</b>
<BR>
La description du paramètre 10.
<BR>
Propriétés : Type 'vec' de taille -1.
</LI>
<LI><b>Buffer size</b>
<BR>
La description du paramètre 11.
<BR>
Propriétés : Type 'vec' de taille 1.
</LI>
</UL>

<H3><font color="blue"><A NAME="SECTION00024000000000000000">
Propriétés par défaut</A>
</font></H3>

<UL>
<LI><b>toujours actif:</b> non
</LI>
<LI><b>direct-feedthrough:</b> non
</LI>
<LI><b>détection de passage à zéro:</b> non
</LI>
<LI><b>mode:</b> non
</LI>
<LI><b>nombre/taille des entrées régulières:</b> 3 / 1  1  1
</LI>
<LI><b>nombre/taille des sorties sorties régulières:</b> 0 / 
</LI>
<LI><b>nombre/taille des entrées évènementielles:</b> 1 / 1
</LI>
<LI><b>nombre/taille des sorties évènementielles:</b> 0 / 
</LI>
<LI><b>possède un état continu:</b> non
</LI>
<LI><b>possède un état discret:</b> non
</LI>
<LI><b>nom de la fonction de calcul:</b> <EM>cscopxy3d</EM>
</LI>
</UL>

<H3><font color="blue"><A NAME="SECTION00025000000000000000">
Fonction d'interface</A>
</font></H3>
<TT>CSCOPXY3D.sci</TT>

<H3><font color="blue"><A NAME="SECTION00026000000000000000">
Fonction de calcul (type 4)</A>
</font></H3>
 <SMALL CLASS="TINY">  </SMALL>
<BR>
<PRE  CLASS="verbatim">/**
   \file cscopxy3d.c
   \author Benoit Bayol
   \version 1.0
   \date September 2006 - January 2007
   \brief CSCOPXY3D is a scope in 2D which draw its input as a XYZ scope, there is no animation, everything is keep in memory instead of CANIMXY3D
   \see CSCOPXY3D.sci in macros/scicos_blocks/Sinks/
*/

#include "scoMemoryScope.h"
#include "scoWindowScope.h"
#include "scoMisc.h"
#include "scoGetProperty.h"
#include "scoSetProperty.h"
#include "scicos_block4.h"

/** \fn cscopxy3d_draw(scicos_block * block, ScopeMemory ** pScopeMemory, int firstdraw)
    \brief Function to draw or redraw the window
*/
void cscopxy3d_draw(scicos_block * block, ScopeMemory ** pScopeMemory, int firstdraw)
{
  int * ipar; //Integer Parameters
  int color_number; //Flag on Color
  int * color   ;
  int * line_size;
  int animed;
  int win; //Windows ID : To give a name to the window
  int buffer_size; //Buffer Size
  int win_pos[2]; //Position of the Window
  int win_dim[2]; //Dimension of the Window
  int nipar;
  double * rpar; //Reals parameters
  double xmin, xmax, ymin, ymax, zmin, zmax,alpha, theta; //Ymin and Ymax are vectors here
  int number_of_subwin;
  int number_of_curves_by_subwin;
  int dimension = 3;
  int i;
  int size=0;
  scoGraphicalObject ShortDraw;
  scoGraphicalObject LongDraw;

  ipar = GetIparPtrs(block);
  nipar = GetNipar(block);
  rpar = GetRparPtrs(block);
  win = ipar[0];
  color_number = ipar[1];
  buffer_size = ipar[2];
  color = (int*)scicos_malloc(color_number*sizeof(int));
  line_size = (int*)scicos_malloc(color_number*sizeof(int));
  for(i = 0 ; i &lt; color_number ; i++)
    {
      color[i] = ipar[i+3];
      line_size[i] = ipar[i+3+color_number];
    }
  size = 2*color_number;
  animed = ipar[size+3];
  win_pos[0] = ipar[size+4];
  win_pos[1] = ipar[size+5];
  win_dim[0] = ipar[size+6];
  win_dim[1] = ipar[size+7];
  xmin = rpar[0];
  xmax = rpar[1];
  ymin = rpar[2];
  ymax = rpar[3];
  zmin = rpar[4];
  zmax = rpar[5];
  alpha = rpar[6];
  theta = rpar[7];

  number_of_subwin = 1;
  number_of_curves_by_subwin = ipar[size+8]; //it is a trick to recognize the type of scope, not sure it is a good way because normally a curve is the combination of a short and a longdraw

  if(firstdraw == 1)
    {
      scoInitScopeMemory(block-&gt;work,pScopeMemory, number_of_subwin, &amp;number_of_curves_by_subwin);
      scoSetShortDrawSize(*pScopeMemory,0,buffer_size);
      scoSetLongDrawSize(*pScopeMemory,0,5000);
    }

  scoInitOfWindow(*pScopeMemory, dimension, win, win_pos, win_dim, &amp;xmin, &amp;xmax, &amp;ymin, &amp;ymax, &amp;zmin, &amp;zmax);
  pSUBWIN_FEATURE(scoGetPointerAxes(*pScopeMemory,0))-&gt;alpha = alpha;
  pSUBWIN_FEATURE(scoGetPointerAxes(*pScopeMemory,0))-&gt;theta = theta;	
  scoAddTitlesScope(*pScopeMemory,"x","y","z");

	
  for(i = 0 ; i &lt; scoGetNumberOfCurvesBySubwin(*pScopeMemory,0) ; i++)
    {
      scoAddPolylineForShortDraw(*pScopeMemory,0,i,color[i]);
      scoAddPolylineForLongDraw(*pScopeMemory,0,i,color[i]);
      
      ShortDraw = scoGetPointerShortDraw(*pScopeMemory,0,i);
      LongDraw = scoGetPointerLongDraw(*pScopeMemory,0,i);

      sciSetLineWidth(ShortDraw, line_size[i]);
      sciSetMarkSize(ShortDraw, line_size[i]);
      sciSetLineWidth(LongDraw, line_size[i]);
      sciSetMarkSize(LongDraw, line_size[i]);
    }

  scicos_free(color);
  scicos_free(line_size);
}
/** \fn void cscopxy3d(scicos_block * block, int flag)
    \brief the computational function
    \param block A pointer to a scicos_block
    \param flag An integer which indicates the state of the block (init, update, ending)
*/
void cscopxy3d(scicos_block * block, int flag)
{
  /* Declarations*/
  int i;
  ScopeMemory * pScopeMemory;
  scoGraphicalObject Pinceau; //Pointer to each polyline of each axes
  double *u1,*u2, *u3;
  int NbrPtsShort;


  /* State Machine Control */
  switch(flag)
    {
    case Initialization:
      {
	cscopxy3d_draw(block,&amp;pScopeMemory, 1);
	break; //Break of the switch condition don t forget it
      } //End of Initialization

    case StateUpdate:
      {
	scoRetrieveScopeMemory(block-&gt;work,&amp;pScopeMemory);

	/* Charging Elements */
	if (scoGetPointerScopeWindow(pScopeMemory) == NULL) // If the window has been destroyed we recreate it
	  {
	    cscopxy3d_draw(block,&amp;pScopeMemory,0);
	  }

	u1 = GetRealInPortPtrs(block,1);
	u2 = GetRealInPortPtrs(block,2);
	u3 = GetRealInPortPtrs(block,3);

	for(i = 0 ; i &lt; scoGetNumberOfCurvesBySubwin(pScopeMemory,0) ; i++)
	  {
	    Pinceau = scoGetPointerShortDraw(pScopeMemory,0,i);

	    NbrPtsShort = pPOLYLINE_FEATURE(Pinceau)-&gt;n1;

	    pPOLYLINE_FEATURE(Pinceau)-&gt;pvx[NbrPtsShort] = u1[i];
	    pPOLYLINE_FEATURE(Pinceau)-&gt;pvy[NbrPtsShort] = u2[i];
	    pPOLYLINE_FEATURE(Pinceau)-&gt;pvz[NbrPtsShort] = u3[i];
	    
	    pPOLYLINE_FEATURE(Pinceau)-&gt;n1++;
	  }

	scoDrawScopeXYStyle(pScopeMemory);

	break; //Break of the switch don t forget it !
      }//End of stateupdate
      
      //This case is activated when the simulation is done or when we close scicos
    case Ending:
      {
	scoRetrieveScopeMemory(block-&gt;work, &amp;pScopeMemory);
	scoFreeScopeMemory(block-&gt;work, &amp;pScopeMemory);
	break; //Break of the switch
      }
      //free the memory which is allocated at each turn by some variables
    }
}
</PRE>

<H3><font color="blue"><A NAME="SECTION00027000000000000000">
Auteurs</A>
</font></H3>
<b>enter here the author name</b> Add here the author  references

<BR>




</BODY>
</HTML>
