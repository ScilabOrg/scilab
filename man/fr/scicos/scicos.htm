<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<!--Converted with LaTeX2HTML 2002-2-1 (1.71)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>scicos</TITLE>
<META NAME="description" CONTENT="scicos">
<META NAME="keywords" CONTENT="scicos">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="scicos.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<P>
<DIV ALIGN="CENTER">
Fonction Scilab
<BR><A NAME="tex2html1"
  HREF="./scicos.htm">fr</A> - <A NAME="tex2html2"
  HREF="../../eng/scicos/scicos.htm">eng</A>

</DIV>
<BR><A NAME="SECTION00010000000000000000"></A><A NAME="scicos"></A>
<BR>
<b>scicos</b> - Editeur de schéma bloc et interface graphique pour le simulateur hybride


<H3><font color="blue"><A NAME="SECTION00011000000000000000">
Module</A>
</font></H3>

<UL>
<LI><A NAME="tex2html3"
  HREF="whatis.htm">Scicos</A>
</LI>
</UL>

<H3><font color="blue"><A NAME="SECTION00012000000000000000">
Description</A>
</font></H3>

<P>
Scicos is a visual editor for constructing models of hybrid dynamical systems. Invoking Scicos with no argument opens up an empty Scicos window. Models can then be assembled, loaded, saved, compiled, simulated, using GUI of Scicos.  Scicos serves as an interface to the various block diagram compilers and the hybrid simulator scicosim.  
<BR>
<P>
The input and output arguments are useful for debugging purposes.  
<BR>
<H3><font color="blue"><A NAME="SECTION00013000000000000000">
Séquence d'appel</A>
</font></H3>
<PRE>
scs_m = scicos([toto])
</PRE>

<H3><font color="blue"><A NAME="SECTION00014000000000000000">
Paramètres</A>
</font></H3>

<UL>
<LI><b>toto :</b>
   either a Scicos diagram structure (scs_m) or a  character string containing the path of the diagram file (.cos or .cosf extension).  If no input argument is used, an empty diagram is opened (default name Untitled).
</LI>
<LI><b>scs_m :</b>
   Scicos diagram structure after edition.
</LI>
</UL>

<H3><font color="blue"><A NAME="SECTION00015000000000000000">
Contenu du fichier</A>
</font></H3>
<BR>
<PRE  CLASS="verbatim">function [scs_m,newparameters,needcompile,edited] = scicos(scs_m,menus)
//** INRIA
//**
//** 20 dec 2005: Code modified by Simone Mannori
//** 06 Feb 2006 : restart of the mods job :
//**
//** 22 May 2006 : New restart
//**
//** 19 Jun 2006 : Last restart
//**
//** 10 Jul 2006 : looking for a residual oldgraphics instruction
//**
//**  1 Set 2006 : SCICOS menu sub-system
//** Comments &amp; mods by Simone Mannori
//**
//**----------------------------------------------------------------------------------------
// scicos - block diagram graphic editor
// %SYNTAX
// scs_m=scicos(scs_m,job)
// %PARAMETERS
// scs_m    : scilab list, scicos main data structure
//      scs_m.props contains system name and other infos
//      scs_m.objs(i) contains description of ith block diagram element
//      scs_m.version contains the number version of the diagram
// menus : vector of character strings,optional parameter giving usable menus
// !
//--------------------------------------------------------------------------------------------
// Copyright INRIA

//**-------------------------------------------------------------------------------------------
//** Check for Scilab "command line mode" that does not support SCICOS
//** This check verify if "scicos()" is started form a command line Scilab with no graphics 
//** support (almost obsolete function) 

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//** Magic Global Variable for Diagram Browser 
global %scicos_navig
global %diagram_path_objective
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++

noguimode = find(sciargs()=="-nogui");
if (noguimode &lt;&gt;[]) then
   clear noguimode
   warning(" Scilab in no gui mode : Scicos unavailable");
   abort ; //** EXIT form Scicos () 
end;

clear noguimode

//** ----------------------------- Check the recurring calling level of scicos_new -------------------------------

//check if superblock editing mode
[%ljunk, %mac] = where() ; //** where I am ?
                           //** looking for the position inside the tree
slevel = prod ( size ( find ( %mac=='scicos') ) ) ; //** "slevel" is the superblock level
super_block = slevel &gt; 1 ; //** ... means that the actual SCICOS is a superblock diagram


if ~super_block then
  super_path=[] // path to the currently opened superblock
end

%diagram_open=%t   //default choice
if super_path&lt;&gt;[] then
  if isequal(%diagram_path_objective,super_path) then
   if %scicos_navig&lt;&gt;[] then
     %diagram_open=%t
     %scicos_navig=[]
     gh_curwin = scf(curwin); 
   end
  elseif  %scicos_navig&lt;&gt;[] then
     %diagram_open=%f
  end
end

//**-----------------------------------------------------------------------------------------------
if ~super_block then

  // Check and define SCICOS palette , menu , shortcut , display mode , palette libraries
  if exists('scicos_pal')==0 | exists('%scicos_menu')==0 | exists('%scicos_short')==0 | ...
      exists('%scicos_display_mode')==0 | exists('scicos_pal_libs')==0 | ...
       exists('%scicos_lhb_list')==0 | exists('%CmenuTypeOneVector')==0   then

    [scicos_pal_d, %scicos_menu_d, %scicos_short_d, %scicos_help_d,...
     %scicos_display_mode_d, modelica_libs_d, scicos_pal_libs_d,...
     %scicos_lhb_list_d, %CmenuTypeOneVector_d ] = initial_scicos_tables() ;

    if exists('scicos_pal')==0 then
      message(["scicos_pal not defined"; "using default values"])
      scicos_pal = scicos_pal_d ;
    end

    if exists('%scicos_menu')==0 then
      message(["%scicos_menu not defined"; "using default values"])
      %scicos_menu = %scicos_menu_d ;
    end

    if exists('%scicos_short')==0 then
      message(["%scicos_short not defined"; "using default values"])
      %scicos_short = %scicos_short_d ;
    end

    if exists('%scicos_help')==0 then
      message(["%scicos_help not defined"; "using default values"])
      %scicos_help = %scicos_help_d ;
    end

    if exists('%scicos_display_mode')==0 then
      message(["%scicos_display_mode not defined"; "using default values"])
      %scicos_display_mode = %scicos_display_mode_d ;
    end

    if exists('modelica_libs')==0 then
      message(["modelica_libs not defined"; "using default values"])
      modelica_libs = modelica_libs_d ;
    end

    if exists('scicos_pal_libs')==0 then
      message(["scicos_pal_libs not defined"; "using default values"])
      scicos_pal_libs = scicos_pal_libs_d ;
    end

    if exists('%scicos_lhb_list')==0 then
      message(["%scicos_lhb_list not defined"; "using default values"])
      %scicos_lhb_list = %scicos_lhb_list_d ;
    end

    if exists('%CmenuTypeOneVector')==0 then
      message(["%CmenuTypeOneVector not defined"; "using default values"])
      %CmenuTypeOneVector = %CmenuTypeOneVector_d ;
    end
    
  end //** ... of the initialization variable
  //**--------------------------------------------------------------

  //** initialize the "scicos_contex" datastructure (Scilab script inside SCICOS simulation)
  if ~exists('%scicos_context') then
    %scicos_context = struct() ;
  end

  //**-----------------------------

  //** initialize a "scicos_debug_gr" variable for debugging editor
  if ~exists('%scicos_debug_gr') then
    %scicos_debug_gr = %f; //** debug mode : default is "%f" 
  end

  //** initialize a "scicos_with_grid" variable for drawing a grid
  if ~exists('%scicos_with_grid') then
    %scicos_with_grid = %f;
  end
  if ~exists('%scs_wgrid') then
    //** %scs_wgrid(1:2) : space of grid
    //** %scs_wgrid(3) : color
    %scs_wgrid = [10;10;12];
  end

  //** disable scilab function protection
  prot=funcprot();
  funcprot(0);

  //** to load functions of ged in scicos
  exec(SCI+'/macros/util/ged.sci',-1);

  //** Scicos internal functions override in order to assure full
  //** compatibility with NGI (J.B. Silvy)
  swap_handles = permutobj; //TO be removed in Scilab 5
  //** for rotation of text
  //** PATCH 
   xstringb = xstringb2; //** BEWARE: TO be removed in Scilab 5

  //** restore scilab function protection
  funcprot(prot)
 
  //** check and - eventually - load the Scicos function library  
  if exists('scicoslib')==0 then 
    load('SCI/macros/scicos/lib') ; 
  end

  exec(loadpallibs, 1) //** load library that contains the INTERFACING
                       //** functions of all the blocks presents in 
		       //** the Scicos Palettes

end //** end of the main if() not superblock initialization 

//** ----------------------------- End the NOT-Superbloc initialization and check ----------------------

//** Magic Numbers 
Main_Scicos_window = 1000 ; //** set default value of the main scicos window

//** Initialisation
newparameters = list() ;
enable_undo = %f
edited = %f
needreplay = %f
%path='./'
%exp_dir = PWD


global %tableau

//**----------------------------------------------------------------------------------
if ~super_block then // init of some global variables
  %zoom    = 1.4      ; //** original value by Ramine
  pal_mode = %f       ;  // Palette edition mode
  //  newblocks=[] // table of added functions in pal_mode
  //  super_path=[] // path to the currently opened superblock

  scicos_paltmp = scicos_pal ;

  //** try to load the local ".scicos_pal" files that contains the user defined 
  //** palette relatives to the local directory
  if execstr('load(''.scicos_pal'')','errcatch')==0 then
  //** if the load has been positive 
    scicos_pal = gunique(scicos_pal,scicos_paltmp); //** remove the duplicate item(s) 
  end                                               //** in the palette 
  
  //** load - if present - the used defined local shortcut  
  execstr('load(''.scicos_short'')','errcatch')  // keyboard shortcuts

end
//**----------------------------------------------------------------------------------

[lhs, rhs] = argn(0) ; //** recover the arguments of "scicos(&lt;rhs&gt;)" 

if rhs&gt;=1 then //** scicos_new(...) is called with some arguments

  if type(scs_m)==10 then //diagram is given by its filename
    %fil=scs_m
    alreadyran=%f
    [ok,scs_m,%cpr,edited] = do_load(%fil,'diagram')
    if ~ok then return,end

    if size(%cpr)==0 then
      needcompile=4
      %state0=list()
    else
      %state0=%cpr.state;
      needcompile=0
    end

  else //diagram is given by its data structure

    if ~super_block then 
      %cpr=list(); needcompile=4 ; alreadyran=%f , %state0=list()
    end

  end

else //** scicos_new() is called without arguments (AND - implicitly - is NOT a superblock)
 
  //** ------------- NORMAL OPENING OF A BRAND NEW GRAPHICS WINDOW--------------------------------
  gh_Main_Scicos_window = scf(Main_Scicos_window); //** new way to open a brand new graphics windows  
  scs_m = scicos_diagram(version=get_scicos_version()) ;
  %cpr = list(); needcompile = 4; alreadyran = %f; %state0 = list() ;

end

//

if typeof(scs_m)&lt;&gt;'diagram' then
  error("First argument must be a Scicos diagram");
end

if ~super_block then

//**----------------------- Dynamic menu and shortcut preparation -----------------------------------------
//**
%cor_item_exec = []; //** init

//** scan all the "%scicos_menu" an load "%cor_item_exec" ; dispose the first string (2:$) because
//** is the name of the dynamic menu
for %Y=1 : length(%scicos_menu)
  %cor_item_exec = [%cor_item_exec, %scicos_menu(%Y)(2:$)] ;
end

%cor_item_exec = %cor_item_exec'; //** transpose the vector
%R = %cor_item_exec; 
%R = stripblanks(%R)+'_' ; //** delete all the blanks and add an underscore at the end "Save As PAlette" -&gt; "SaveAsPalette_"
%R = strsubst(%R,'/','') ; //** delete "/"
%R = strsubst(%R,' ','') ; //** delete " "
%R = strsubst(%R,'.','') ; //** delete "."
%R = strsubst(%R,'-','') ; //** delete "-"
%cor_item_exec = [%cor_item_exec, %R]; //** create the two column matrix [&lt;MenuName&gt; &lt;FunctionToCall&gt;]

// add fixed menu items not visible
%cor_item_exec = [%cor_item_exec;
                  'Link'        , 'Link_'         ;
		  'Open/Set'    , 'OpenSet_'      ;
		  'MoveLink'    , 'MoveLink_'     ;
		  'SelectLink'  , 'SelectLink_'   ;
		  'CtrlSelect'  , 'CtrlSelect_'   ;
		  'SelectRegion', 'SelectRegion_' ;
	          'Popup'       , 'Popup_'        ;
		  'PlaceinDiagram' , 'PlaceinDiagram_'   ;
		  'TkPopup'     , 'TkPopup_'  ;
                  'BrowseTo'    , 'BrowseTo_'    
		 ];

menus = tlist('xxx')

for %Y=1:length(%scicos_menu)
  menus(1)  = [menus(1), %scicos_menu(%Y)(1)];
  menus($+1)= %scicos_menu(%Y)(2:$);
end

for %Y=1:length(%scicos_menu)
  %R = %scicos_menu(%Y);
  %w = 'menus('''+%R(1)+''')('+ string(1:(size(%R,'*')-1)) + ')';
  execstr(%R(1)+ '=%w;');
end

//----------------------------------------------------------------
// single key shortcut: keyboard definition
%tableau = emptystr([1:100]);
for %Y = 1 : size(%scicos_short,1)
  %tableau(-31+ascii(%scicos_short(%Y,1)))=%scicos_short(%Y,2);
end
//----------------------------------------------------------------

end

// viewport
options = scs_m.props.options

// solver
%scicos_solver = scs_m.props.tol(6)

//** ------- GRAPHICS INITIALIZATION: Palettes, TK functions, ---------
//**-------------------------- I'm NOT inside a superblock  -----------
if ~super_block then

  gh_current_window = scf(Main_Scicos_window);
  curwin = get ( gh_current_window, "figure_id") ;

  palettes = list();
  noldwin = 0      ;
  windows = [1 curwin] ; 
  pixmap = %scicos_display_mode ;// obsolete: the pixmap is "on" as default 
  //

  if ~exists('%scicos_gui_mode') then
    if with_tk() then %scicos_gui_mode=1, else %scicos_gui_mode=0, end
  end

  if %scicos_gui_mode==1 then
  //** scicos is active in graphical mode   
    prot = funcprot();
    funcprot(0);
    
    getfile  = tk_getfile;  //** Tk function definition 
    
    savefile = tk_savefile; //** Tk    "        "
    
    getcolor = tk_getcolor; //** Tk    "        "
    
    //** --------- Popup OS dependent definition -----------------
    if MSDOS then  
    //** ... for Windows machines 
      getvalue = tk_getvalue ;
      mpopup   = tk_mpopup   ; //** the pop up Windowz
      choose   = tk_scicos_choose   ;
    else
      //** ... for Unix machines   
      getvalue = tk_getvalue ;
      mpopup = tk_mpopupX    ; //** for the Penguin 
      deff('x=choose(varargin)', 'x=x_choose(varargin(1:$))');
    end
    
    funcprot(prot);
    //** -------- ... end of popup --------------------------------
    
  else
  //** Scicos works in "text mode"  
    deff('x=getfile(varargin)','x=xgetfile(varargin(1:$))');
    savefile = getfile;
    deff('Cmenu=mpopup(x)','Cmenu=[]')
    deff('x=choose(varargin)','x=x_choose(varargin(1:$))');
  end //** of %scicos_gui_mode 

//

else //** super block case

  //** NO Pupup function definition in the super block ------------
  
  noldwin = size(windows,1)           ;
  windows = [windows ; slevel curwin] ;
  palettes = palettes                 ;

end //** end of not superblock

//** ------------------- GRAPHICS INITIALIZATION ---------

//** This section is executed in any case
//   initialize graphics

if %diagram_open then

gh_current_window = gcf() ; //** get the current graphics window
restore(gh_current_window)
exec(restore_menu,-1)

end // %diagram_open test

//**------------------------- CONTEXT -----------------------
//set context (variable definition...)

if type(scs_m.props.context) == 10 then //** if the variable is defined 

  gh_percent_now_win = gcf(); //** save current figure handle

  [%scicos_context,ierr] = script2var(scs_m.props.context,%scicos_context)
  //for backward compatibility for scifunc
  if ierr==0 then
    %mm = getfield(1,%scicos_context)
    for %mi=%mm(3:$)
       ierr = execstr(%mi+'=%scicos_context(%mi)','errcatch')
       if ierr&lt;&gt;0 then
         break
       end
    end
  end
  //end of for backward compatibility for scifunc

  if ierr  &lt;&gt;0 then
    message(['Error occur when evaluating context:' lasterror() ]) ;
  else
    deff('%fonct()',scs_m.props.context)
    %outfun = macrovar(%fonct);
    //perform eval only if context contains functions which may give
    //different results from one execution to next
    if or(%outfun(4)=='rand')|or(%outfun(4)=='exec')|or(%outfun(4)=='load') then
      disablemenus() ;
       [scs_m, %cpr, needcompile, ok] = do_eval(scs_m, %cpr);
      enablemenus() ;
    end
  end

  scf(gh_percent_now_win); //** restore current figure handle

else

  scs_m.props.context = ' ' ; //** put the variable to empty state 

end
//** ---------- End of "Contex" handling and evaluation (was: "the very obscure code") -
//**

//** Begin of the Main command interpreter loop

// state machine variables



//** Initial conditions 
Cmenu = []     ; //** valid command = empty
%pt   = []     ; //** valid last mouse position = empty
%win  = curwin ; //** curwin is dynamically modified if a superblock window is open 


//** 'Select' and 'Select_back' are matrix;
//**  Each line is:  [object_id win_id] : "object_id" is the same INDEX used in "scs_m.obj"
//**                                  and "win_id"    is the Scilab window id.
//**  Multiple selection is permitted: each object is a line of the matrix. 
Select = []      ; //** empty
Select_back = [] ; //** empty
%ppt = []; //** used to store last valid click position for "Paste" operation 
//Clipboard = []; //** used in Copy Cut and Paste function 
//** --- End of initialization ----------------------------------------------------------- 
if %diagram_open then
   execstr('drawobjs(scs_m)', 'errcatch') ; //** draw the full diagram from the original Scicos data structure 
end //  %diagram_open test


global Clipboard  // to make it possible to copy and paste from one
                  // super block to another
global Scicos_commands   // programmed commands

//** --------- Command Interpreter / State Machine / Main Loop ------------

while ( Cmenu &lt;&gt; "Quit" ) //** Cmenu -&gt; exit from Scicos

   //** Dynamic stacksize for very big diagram           //
   [%stack] = stacksize()                                //
   if %stack(2)/%stack(1)&gt; 0.3 then                      //
     stacksize(2*%stack(1))                              //
     disp("Stacksize increased to "+string(2*%stack(1))) //
   end        
   
   if %scicos_navig==[] then 
    if Scicos_commands&lt;&gt;[] then
//     disp(Scicos_commands(1))
     execstr(Scicos_commands(1))
     Scicos_commands(1)=[]
    end
   end

   if Cmenu=='Quit' then break,end

   //**--------------------------------------------------------------------
   if %scicos_navig&lt;&gt;[] then //** navigation mode active 
    while %scicos_navig&lt;&gt;[] do
     if ~isequal(%diagram_path_objective,super_path) then
       %diagram_open  = %f
       [Cmenu,Select] = Find_Next_Step(%diagram_path_objective,super_path)
       if Cmenu=="OpenSet" then
         ierr=0
         execstr('ierr=exec(OpenSet_,''errcatch'',-1)')
         //**---------------------------------------------------
	 if ierr&lt;&gt;0 then message(lasterror()),end
         if isequal(%diagram_path_objective,super_path) then
             if ~or(curwin==winsid()) then 
                gh_current_window = scf(curwin);
                restore(gh_current_window);
                exec(restore_menu,-1)
                %scicos_navig=[];
                Cmenu="Replot";
	        Select_back=[];Select=[]
             end  
         end
       elseif Cmenu=="Quit" then
         do_exit()
         return
       end
         //**---------------------------------------------------
     else
	  %scicos_navig=[]
     end
    end 
   else



      %diagram_open=%t

      if Select&lt;&gt;[] then
        if ~or(Select(1,2) == winsid()) then
          Select = [] ; //** imply a full Reset 
        end
      end
   //**--------------------------------------------------------------------
   
   //** Command classification and message retrivial 
   [CmenuType, mess] = CmType(Cmenu); //** local function: see below in this file
                                      //** recover command type and message  
   xinfo(mess); //** show the message associated to the command 

   //** ----------------- State variable filtering -----------------------------------------
   //** clear the %pt information for backward compatibility
   //** if 'Cmenu' is empty (no command) but '%pt' is not , it is better to clear '%pt'
   if ( Cmenu == [] &amp; %pt &lt;&gt; []  ) then %pt=[]; end

   //** if 'Cmenu' is NOT empty and 'CmenuType' is "0" I don't' need '%pt' then clear '%pt'
   if ( Cmenu&lt;&gt; [] &amp; CmenuType==0) then %pt=[]; end

   //** if 'Cmenu' is NOT empty and 'CmenuType' is "1" and there is at least one object selected 
   if (Cmenu&lt;&gt;[] &amp; CmenuType==1 &amp; %pt==[] &amp; Select&lt;&gt;[]) then
     [%pt,%win] = get_selection(Select) //** recover the %pt and %win from 'Select'
   end
   //** ------------------------------------------------------------------------------------
  
   //** ---------------------- Main decisional section --------------------------------------
  //** if no command is issued "Cmenu==[]" or
  //**    CmenuType==1 and no %pt information and no object selected 
  if ( Cmenu==[] | (CmenuType==1 &amp; %pt==[] &amp; Select==[]) ) then
      
      //** I'm not ready to exec a command: I need more information using cosclik()
      [btn_n, %pt_n, win_n, Cmenu_n] = cosclick() ;
      if (Cmenu_n=='SelectLink' | Cmenu_n=='MoveLink') &amp; Cmenu&lt;&gt;[] &amp; CmenuType==1 &amp; %pt==[] then
	if %pt_n&lt;&gt;[] then %pt = %pt_n; end
      else
        if Cmenu_n&lt;&gt;[] then Cmenu = Cmenu_n; end
        if %pt_n &lt;&gt; [] then %pt = %pt_n;     end
      end

      %win = win_n

  else
  //** I'm ready to exec a command 
      %koko = find( Cmenu==%cor_item_exec(:,1) ); 
      if size(%koko,'*') == 1 then

        Select_back = Select; //** save the selected object list 

        //** Command execution
        if %scicos_debug_gr then
          exeString = "Executing.... " + %cor_item_exec(%koko,2) ;
          disp(exeString)  ;
        end
	//
        ierr=0
	execstr('ierr=exec('+%cor_item_exec(%koko,2)+',''errcatch'',-1)')

        // in case window has disappeared
        if ~or(curwin==winsid()) then 
          gh_current_window = scf(curwin);
          restore(gh_current_window)
          exec(restore_menu,-1)
	  Select_back=[];Select=[]
          Cmenu='Replot';
        elseif ierr &gt; 0 then
	  Select_back=[];Select=[]
	  Cmenu='Replot';
	  disp(['I recovered from the following error:';
                lasterror();
                'in '+%cor_item_exec(%koko,2)'+' action.'])
	end

  
	if ~isequal(Select,Select_back) then
	  // Select_back: objects to unselect
	  // Select     : object to select
	    selecthilite(Select_back, "off") ; // unHilite previous objects
	    selecthilite(Select, "on") ;       // Hilite the actual selected object
	end
		
      else
      //** if the command is not valid clear the state variable 
         Cmenu=[]; %pt=[]
      end //** a valid/invalid command to exec
      
   end //** not_ready / ready ... to exec a command 
   //**---------------------------------------------------------------------------------------------------
end // test %diagram
   
end //**---&gt;  end of the while loop: the only way to exit is with the 'Quit' command 

do_exit() ; //** this function is executed in case of 'Quit' command

if ~super_block then
  //close TCL windows
  TCL_EvalStr('catch {destroy .palettes}')
  TCL_EvalStr('catch {destroy .ss}')
  TCL_EvalStr('catch {destroy .scsTree}')
  // clear all globals defore leaving
  clearglobal Clipboard  
  clearglobal Scicos_commands 
  clearglobal %tableau
  clearglobal %scicos_navig
  clearglobal %diagram_path_objective
end

endfunction //** scicos() end here :) : had a good day
//**



function [itype, mess] = CmType(Cmenu)
  //** look inside "%CmenuTypeOneVector" if the command is type 1 (need both Cmenu and %pt)
  k = find (Cmenu == %CmenuTypeOneVector(:,1)); 
  if k==[] then //** if is not type 1 (empty k)
    itype = 0 ; //** set type to zero
    mess=''   ; //** set message to empty
    return    ; //** --&gt; EXIT point : return back 
  end

  if size(k,'*')&gt;1 then //** if found more than one command 
    message('Warning '+string( size(k,'*'))+' menus have identical name '+Cmenu);
    k=k(1); //** ? 
  end

  itype = 1 ; 

  mess = %CmenuTypeOneVector(k,2) ; 
  
endfunction

//** ----------------------------------------------------------------------------------------------------------------

function uni = gunique(m1,m2)
// Used to eliminate duplicate palette item(s) 
  uni = [m1;m2] ; //** merge the two matrix 
  [j,ind] = unique(uni(:,1) + uni(:,2)) ; //** remove the duplicate palette name 
  uni = uni(-gsort(-ind),:);  //** reorder the merged palette without duplicate 
endfunction

//** ----------------------------------------------------------------------------------------------------------------

function restore_menu()
      for %Y=1:length(%scicos_menu)
        execstr( %scicos_menu(%Y)(1)+'_'+string(curwin)+'='+%scicos_menu(%Y)(1) )
      end
endfunction

//**---------------------------------------------------------------------------------------------------------------------
</PRE>

<H3><font color="blue"><A NAME="SECTION00016000000000000000">
Voir aussi</A>
</font></H3>

<UL>
<LI><A NAME="tex2html4"
  HREF="scicosim.htm">scicosim - Fonction de simulation scicos en ligne de commande (Fonction Scilab)</A>
</LI>
<LI><A NAME="tex2html5"
  HREF="scicos_simulate.htm">scicos_simulate - Fonction pour éxécuter une simulation scicos en ligne de commmande (Fonction Scilab)</A>
</LI>
</UL>

<H3><font color="blue"><A NAME="SECTION00017000000000000000">
Auteurs</A>
</font></H3>
<b>Ramine Nikoukhah</b> INRIA

<BR>




</BODY>
</HTML>
