<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<!--Converted with LaTeX2HTML 2002-2-1 (1.71)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>integralz_func_routcos</TITLE>
<META NAME="description" CONTENT="integralz_func_routcos">
<META NAME="keywords" CONTENT="integralz_func_routcos">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="integralz_func_routcos.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<P>
<DIV ALIGN="CENTER">
Computational routine
<BR><A NAME="tex2html1"
  HREF="./integralz_func_routcos.htm">eng</A>

</DIV>
<H2><A NAME="SECTION00010000000000000000"></A><A NAME="integralz_func_routcos"></A>
<BR>
integralz_func
</H2>

<H3><font color="blue"><A NAME="SECTION00011000000000000000">
File content</A>
</font></H3>
<BR>
<PRE  CLASS="verbatim">#include "scicos_block4.h"
#include &lt;math.h&gt;

void  integralz_func(scicos_block *block,int flag)
{int i;
 double *ur,*ui;
 double *yr,*yi;
 ur=GetRealInPortPtrs(block,1);
 ui=GetImagInPortPtrs(block,1);
 yr=GetRealOutPortPtrs(block,1);
 yi=GetImagOutPortPtrs(block,1);
 if (flag==0){
    if(block-&gt;ng&gt;0){
      for(i=0;i&lt;(block-&gt;nx)/2;++i) {
	if(block-&gt;mode[i]==3){
	  block-&gt;xd[i]=ur[i];
	  block-&gt;xd[i+(block-&gt;nx)/2]=ui[i];
	}else{
	  block-&gt;xd[i]=0.0;
	  block-&gt;xd[i+(block-&gt;nx)/2]=0.0;
	}
      }
    }else{
      for(i=0;i&lt;(block-&gt;nx)/2;++i) {
	block-&gt;xd[i]=ur[i];
	block-&gt;xd[i+(block-&gt;nx)/2]=ui[i];
      }
    }
  }else if (flag==1||flag==6){
    for(i=0;i&lt;(block-&gt;nx)/2;++i) {
      yr[i]=block-&gt;x[i];
      yi[i]=block-&gt;x[i+(block-&gt;nx)/2];
    }
  }else if (flag==2&amp;&amp;block-&gt;nevprt==1){
    for(i=0;i&lt;(block-&gt;nx)/2;++i) {
      block-&gt;x[i]=ur[i];
      block-&gt;x[i+(block-&gt;nx)/2]=ui[i];
    }
  } else if (flag==9){
    for(i=0;i&lt;(block-&gt;nx)/2;++i) {
      if (block-&gt;mode[i]==3){
	block-&gt;g[i]=(block-&gt;x[i]-(block-&gt;rpar[i]))*(block-&gt;x[i]-(block-&gt;rpar[(block-&gt;nx)/2+i]));
	block-&gt;g[i+(block-&gt;nx)/2]=(block-&gt;x[i+(block-&gt;nx)/2]-(block-&gt;rpar[i+(block-&gt;nx)]))*(block-&gt;x[i+(block-&gt;nx)/2]-(block-&gt;rpar[3*(block-&gt;nx)/2+i]));
      } else {
	block-&gt;g[i]=ur[i];
	block-&gt;g[i+(block-&gt;nx)/2]=ui[i];
      } 
      if (get_phase_simulation()==1) {
	if (ur[i]&gt;=0&amp;&amp;block-&gt;x[i]&gt;=block-&gt;rpar[i]&amp;&amp;ui[i&gt;=0]&amp;&amp;block-&gt;x[i+(block-&gt;nx)/2]&gt;=block-&gt;rpar[i+(block-&gt;nx)]){
	  block-&gt;mode[i]=1;
	}else if (ur[i]&lt;=0&amp;&amp;block-&gt;x[i]&lt;=block-&gt;rpar[(block-&gt;nx)/2+i]&amp;&amp;ui[i]&lt;=0&amp;&amp;block-&gt;x[i+(block-&gt;nx)/2]&lt;=block-&gt;rpar[3*(block-&gt;nx)/2+i]){
	  block-&gt;mode[i]=2;
	}else {
	  block-&gt;mode[i]=3;
	}
      }
    }
  }
}
</PRE>

<BR>




</BODY>
</HTML>
