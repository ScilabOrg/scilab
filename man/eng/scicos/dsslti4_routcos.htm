<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<!--Converted with LaTeX2HTML 2002-2-1 (1.71)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>dsslti4_routcos</TITLE>
<META NAME="description" CONTENT="dsslti4_routcos">
<META NAME="keywords" CONTENT="dsslti4_routcos">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="dsslti4_routcos.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<P>
<DIV ALIGN="CENTER">
Computational routine
<BR><A NAME="tex2html1"
  HREF="./dsslti4_routcos.htm">eng</A>

</DIV>
<H2><A NAME="SECTION00010000000000000000"></A><A NAME="dsslti4_routcos"></A>
<BR>
dsslti4
</H2>

<H3><font color="blue"><A NAME="SECTION00011000000000000000">
File content</A>
</font></H3>
<BR>
<PRE  CLASS="verbatim">#include &lt;memory.h&gt;
#include "scicos_block.h"
#include "../os_specific/sci_mem_alloc.h"  /* malloc */
#include "../machine.h"

extern int C2F(dmmul)();
extern int C2F(dmmul1)();


void dsslti4(scicos_block *block,int flag)
{
  /* Copyright INRIA
     
  Scicos block simulator
  discrete state space linear system simulator
  rpar(1:nx*nx)=A
  rpar(nx*nx+1:nx*nx+nx*nu)=B
  rpar(nx*nx+nx*nu+1:nx*nx+nx*nu+nx*ny)=C */
  
  int un=1,lb,lc,ld;
  int nz=block-&gt;nz;
  double* z=block-&gt;z;
  double* rpar=block-&gt;rpar;
  double* y=block-&gt;outptr[0];
  double* u=block-&gt;inptr[0];
  int* outsz=block-&gt;outsz;
  int* insz=block-&gt;insz;
  double *w;
  
  lb=nz*nz;
  
  if (flag ==1 || flag ==6){
    /* y=c*x+d*u */
    lc=lb+nz*insz[0];
    ld=lc+nz*outsz[0];
    if (nz==0) {
      C2F(dmmul)(&amp;rpar[ld],outsz,u,insz,y,outsz,outsz,insz,&amp;un);
    }else{
      C2F(dmmul)(&amp;rpar[lc],outsz,z,&amp;nz,y,outsz,outsz,&amp;nz,&amp;un);
      C2F(dmmul1)(&amp;rpar[ld],outsz,u,insz,y,outsz,outsz,insz,&amp;un);
    }
  }
  else if (flag ==2){
    /* x+=a*x+b*u */
    if (nz!=0){
      w =*block-&gt;work;
      memcpy(w,z,nz*sizeof(double));
      C2F(dmmul)(&amp;rpar[0],&amp;nz,w,&amp;nz,z,&amp;nz,&amp;nz,&amp;nz,&amp;un);
      C2F(dmmul1)(&amp;rpar[lb],&amp;nz,u,insz,z,&amp;nz,&amp;nz,insz,&amp;un);
    }
  }
  else if (flag ==4){/* the workspace for temp storage
		      */
    if ((*block-&gt;work=
	 scicos_malloc(sizeof(double)*nz))== NULL ) {
      set_block_error(-16);
      return;
    }
  }
  else if (flag ==5){
    scicos_free(*block-&gt;work);
  }
}

</PRE>

<BR>




</BODY>
</HTML>
