<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<!--Converted with LaTeX2HTML 2002-2-1 (1.71)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>mat_vpv_routcos</TITLE>
<META NAME="description" CONTENT="mat_vpv_routcos">
<META NAME="keywords" CONTENT="mat_vpv_routcos">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="mat_vpv_routcos.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<P>
<DIV ALIGN="CENTER">
Computational routine
<BR><A NAME="tex2html1"
  HREF="./mat_vpv_routcos.htm">eng</A>

</DIV>
<H2><A NAME="SECTION00010000000000000000"></A><A NAME="mat_vpv_routcos"></A>
<BR>
mat_vpv
</H2>

<H3><font color="blue"><A NAME="SECTION00011000000000000000">
File content</A>
</font></H3>
<BR>
<PRE  CLASS="verbatim"># include "scicos_block4.h"
# include "../machine.h"
#include &lt;stdio.h&gt;

#if WIN32
#define NULL    0
#endif

extern int C2F(dlacpy)();
extern int C2F(dgeev)();
extern int C2F(dlaset)();
extern int C2F(issymmetric)();
extern int C2F(dsyev)();
typedef struct
{         double *LA;
	  double *L0;
          double *LVR;
          double *LW;
          double *LWR;
          double *LWI;
          double *dwork;
          double *dwork1;
} mat_vps_struct ;
void mat_vpv(scicos_block *block,int flag)
{
 double *u;
 double *y1;
 double *y2;
 double *y3;
 double *y4;
 int nu;
 int info;
 int i,j,lwork,lwork1,ii,ij,ij1,ji;
 int symmetric;
 mat_vps_struct *ptr;
 
 nu =GetInPortRows(block,1);
 u=GetRealInPortPtrs(block,1);
 y1=GetRealOutPortPtrs(block,1);
 y2=GetImagOutPortPtrs(block,1);
 y3=GetRealOutPortPtrs(block,2);
 y4=GetImagOutPortPtrs(block,2);
 lwork1=4*nu;
 lwork=3*nu-1;
             /*init : initialization*/
if (flag==4)
   {if((*(block-&gt;work)=(mat_vps_struct*) scicos_malloc(sizeof(mat_vps_struct)))==NULL)
	{set_block_error(-16);
	 return;}
    ptr=*(block-&gt;work);
    if((ptr-&gt;LA=(double*) scicos_malloc(sizeof(double)*(nu*nu)))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;L0=(double*) scicos_malloc(sizeof(double)))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;LA);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;LVR=(double*) scicos_malloc(sizeof(double)*(nu*nu)))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;L0);
	 scicos_free(ptr-&gt;LA);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;LW=(double*) scicos_malloc(sizeof(double)*(nu*nu)))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;LVR);
	 scicos_free(ptr-&gt;L0);
	 scicos_free(ptr-&gt;LA);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;LWR=(double*) scicos_malloc(sizeof(double)*(nu*1)))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;LW);
	 scicos_free(ptr-&gt;LVR);
	 scicos_free(ptr-&gt;L0);
	 scicos_free(ptr-&gt;LA);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;LWI=(double*) scicos_malloc(sizeof(double)*(nu*1)))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;LWR);
	 scicos_free(ptr-&gt;LW);
	 scicos_free(ptr-&gt;LVR);
	 scicos_free(ptr-&gt;L0);
	 scicos_free(ptr-&gt;LA);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;dwork=(double*) scicos_malloc(sizeof(double)*lwork))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;LWI);
	 scicos_free(ptr-&gt;LWR);
	 scicos_free(ptr-&gt;LW);
	 scicos_free(ptr-&gt;LVR);
	 scicos_free(ptr-&gt;L0);
	 scicos_free(ptr-&gt;LA);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;dwork1=(double*) scicos_malloc(sizeof(double)*lwork1))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;dwork);
	 scicos_free(ptr-&gt;LWI);
	 scicos_free(ptr-&gt;LWR);
	 scicos_free(ptr-&gt;LW);
	 scicos_free(ptr-&gt;LVR);
	 scicos_free(ptr-&gt;L0);
	 scicos_free(ptr-&gt;LA);
	 scicos_free(ptr);
	 return;}
   }

       /* Terminaison */
else if (flag==5)
   {ptr=*(block-&gt;work);
    if(ptr-&gt;dwork1!=NULL){
    	scicos_free(ptr-&gt;LA);
    	scicos_free(ptr-&gt;L0);
    	scicos_free(ptr-&gt;LVR);
    	scicos_free(ptr-&gt;LW);
    	scicos_free(ptr-&gt;LWI);
    	scicos_free(ptr-&gt;LWR);
    	scicos_free(ptr-&gt;dwork);
    	scicos_free(ptr-&gt;dwork1);
    	scicos_free(ptr);
    	return;}
   }

else
   {
    ptr=*(block-&gt;work);
    C2F(dlacpy)("F",&amp;nu,&amp;nu,u,&amp;nu,ptr-&gt;LA,&amp;nu);
    symmetric=1;
    for (j=0;j&lt;nu;j++)
	{for (i=j;i&lt;nu;i++)
		{ij=i+j*nu;
		 ji=j+i*nu;
		if (i!=j)
			{if (*(ptr-&gt;LA+ij)==*(ptr-&gt;LA+ji)) symmetric*= 1;
			 else { symmetric*=0;break;}}}}
    if (symmetric==1)
	{C2F(dsyev)("V","U",&amp;nu,ptr-&gt;LA,&amp;nu,ptr-&gt;LW,ptr-&gt;dwork,&amp;lwork,&amp;info);
	 if (info!=0)
	    	{if (flag!=6)
		{set_block_error(-7);
		return;
		}}
	for (i=0;i&lt;nu;i++)
	{ii=i+i*nu;
	 *(y1+ii)=*(ptr-&gt;LW+i);
	}
	C2F(dlacpy)("F",&amp;nu,&amp;nu,ptr-&gt;LA,&amp;nu,y3,&amp;nu);
	}
     else
 	{C2F(dgeev)("N","V",&amp;nu,ptr-&gt;LA,&amp;nu,ptr-&gt;LWR,ptr-&gt;LWI,ptr-&gt;dwork1,&amp;nu,ptr-&gt;LVR,&amp;nu,ptr-&gt;dwork1,&amp;lwork1,&amp;info);
        if (info!=0)
	    	{if (flag!=6)
		{set_block_error(-7);
		return;
		}}

	*(ptr-&gt;L0)=0;
	C2F(dlaset)("F",&amp;nu,&amp;nu,ptr-&gt;L0,ptr-&gt;L0,y1,&amp;nu);
	C2F(dlaset)("F",&amp;nu,&amp;nu,ptr-&gt;L0,ptr-&gt;L0,y2,&amp;nu);
	for (i=0;i&lt;nu;i++)
		{ii=i+i*nu;
		*(y1+ii)=*(ptr-&gt;LWR+i);
		*(y2+ii)=*(ptr-&gt;LWI+i);
		}
	for (j=0;j&lt;nu;j++)
		{if (*(ptr-&gt;LWI+j)==0)
			for (i=0;i&lt;nu;i++)
				{ij=i+(j)*nu;
				 *(y3+ij)=*(ptr-&gt;LVR +ij);
				 *(y4+ij)=0;}
		else{
			for (i=0;i&lt;nu;i++)
					{ij=i+(j)*nu;
					 ij1=i+(j+1)*nu;
					 *(y3+ij)=*(ptr-&gt;LVR +ij);
					 *(y4+ij)=*(ptr-&gt;LVR +ij1);
					 *(y3+ij1)=*(ptr-&gt;LVR +ij);
					 *(y4+ij1)=-(*(ptr-&gt;LVR +ij1));}
			j++;}
		}
 	}
   }
}
</PRE>

<BR>




</BODY>
</HTML>
