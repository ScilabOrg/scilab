<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<!--Converted with LaTeX2HTML 2002-2-1 (1.71)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>scicos</TITLE>
<META NAME="description" CONTENT="scicos">
<META NAME="keywords" CONTENT="scicos">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="scicos.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<P>
<DIV ALIGN="CENTER">
Scilab Function
<BR><A NAME="tex2html1"
  HREF="../../fr/scicos/scicos.htm">fr</A> - <A NAME="tex2html2"
  HREF="./scicos.htm">eng</A>

</DIV>
<BR><A NAME="SECTION00010000000000000000"></A><A NAME="scicos"></A>
<BR>
<b>scicos</b> - Block diagram editor and GUI for the hybrid simulator


<H3><font color="blue"><A NAME="SECTION00011000000000000000">
Module</A>
</font></H3>

<UL>
<LI><A NAME="tex2html3"
  HREF="whatis.htm">Scicos</A>
</LI>
</UL>

<H3><font color="blue"><A NAME="SECTION00012000000000000000">
Calling Sequence</A>
</font></H3>
<PRE>
scs_m = scicos([toto])
</PRE>

<H3><font color="blue"><A NAME="SECTION00013000000000000000">
Parameters</A>
</font></H3>

<UL>
<LI><b>toto :</b>
   : either a Scicos diagram structure (scs_m) or a  character string containing the path of the diagram file (.cos or .cosf extension).  If no input argument is used, an empty diagram is opened (default name Untitled).
</LI>
<LI><b>scs_m :</b>
   : Scicos diagram structure after edition.
</LI>
</UL>

<H3><font color="blue"><A NAME="SECTION00014000000000000000">
Description</A>
</font></H3>

<P>
Scicos is a visual editor for constructing models of hybrid dynamical systems. Invoking Scicos with no argument opens up an empty Scicos window. Models can then be assembled, loaded, saved, compiled, simulated, using GUI of Scicos.  Scicos serves as an interface to the various block diagram compilers and the hybrid simulator scicosim.  
<BR>
<P>
The input and output arguments are useful for debugging purposes.  
<BR>
<H3><font color="blue"><A NAME="SECTION00015000000000000000">
File content</A>
</font></H3>
<BR>
<PRE  CLASS="verbatim">function [scs_m,newparameters,needcompile,edited] = scicos(scs_m,menus)
//** INRIA
//**
//** 20 dec 2005: Code modified by Simone Mannori
//** 06 Feb 2006 : restart of the mods job :
//**
//** 22 May 2006 : New restart
//**
//** 19 Jun 2006 : Last restart
//**
//** 10 Jul 2006 : looking for a residual oldgraphics instruction
//**
//**  1 Set 2006 : SCICOS menu sub-system
//** Comments &amp; mods by Simone Mannori
//**
//**----------------------------------------------------------------------------------------
// scicos - block diagram graphic editor
// %SYNTAX
// scs_m=scicos(scs_m,job)
// %PARAMETERS
// scs_m    : scilab list, scicos main data structure
//      scs_m.props contains system name and other infos
//      scs_m.objs(i) contains description of ith block diagram element
//      scs_m.version contains the number version of the diagram
// menus : vector of character strings,optional parameter giving usable menus
// !
//--------------------------------------------------------------------------------------------
// Copyright INRIA

//**-------------------------------------------------------------------------------------------
//** Check for Scilab "command line mode" that does not support SCICOS
//** This check verify if "scicos()" is started form a command line Scilab with no graphics 
//** support (almost obsolete function) 
noguimode = find(sciargs()=="-nogui");
if (noguimode &lt;&gt;[]) then
   clear noguimode
   warning(" Scilab in no gui mode : Scicos unavailable");
   abort ; //** EXIT form Scicos () 
end;

clear noguimode

//**-------------------------------------------------------------------------------------------

//** ----------------------------- Check the recurring calling level of scicos_new -------------------------------

//check if superblock editing mode
[%ljunk, %mac] = where() ; //** where I am ?
                           //** looking for the position inside the tree
slevel = prod ( size ( find ( %mac=='scicos') ) ) ; //** "slevel" is the superblock level
super_block = slevel &gt; 1 ; //** ... means that the actual SCICOS is a superblock diagram

//**--------------------------------------------------------------------------------------------------------------
//** Check about the initialization of the SCICOS internal datastructures that require init in case of
if ~super_block then

  //**------------------------------------------------------------------------------------------------------------
  // Check and define SCICOS palette , menu , shortcut , display mode , palette libraries
  if exists('scicos_pal')==0 | exists('%scicos_menu')==0 | exists('%scicos_short')==0 | ...
       exists('%scicos_display_mode')==0| exists('scicos_pal_libs')==0 then

    [scicos_pal_d, %scicos_menu_d, %scicos_short_d, %scicos_help_d,...
         %scicos_display_mode_d, modelica_libs_d, scicos_pal_libs_d] = initial_scicos_tables() ;

    if exists('scicos_pal')==0 then
      x_message(['scicos_pal not defined'; 'using default values'])
      scicos_pal = scicos_pal_d ;
    end

    if exists('%scicos_menu')==0 then
      x_message(['%scicos_menu not defined'; 'using default values'])
      %scicos_menu = %scicos_menu_d ;
    end

    if exists('%scicos_short')==0 then
      x_message(['%scicos_short not defined'; 'using default values'])
      %scicos_short = %scicos_short_d ;
    end

    if exists('%scicos_help')==0 then
      x_message(['%scicos_help not defined'; 'using default values'])
      %scicos_help = %scicos_help_d ;
    end

    if exists('%scicos_display_mode')==0 then
      x_message(['%scicos_display_mode not defined'; 'using default values'])
      %scicos_display_mode = %scicos_display_mode_d ;
    end

    if exists('modelica_libs')==0 then
      x_message(['modelica_libs not defined'; 'using default values'])
      modelica_libs = modelica_libs_d ;
    end

    if exists('scicos_pal_libs')==0 then
      x_message(['scicos_pal_libs not defined'; 'using default values'])
      scicos_pal_libs = scicos_pal_libs_d ;
    end

  end //** ... of the initialization variable
  //**-----------------------------------------------------------------------------------------------------------------------

  //** 'CmenuTypeOneVector' store the list of the commands/function to be called that require both 'Cmenu' AND '%pt'
  // menus of type 1 (require %pt)
   CmenuTypeOneVector =..
     ['Region to Super Block', 'Click, drag region and click (left to fix, right to cancel)'        ;
      'Smart Move',            'Click object to move, drag and click (left to fix, right to cancel)';
      'Move',                  'Click object to move, drag and click (left to fix, right to cancel)';
      'Duplicate',             'Click on the object to duplicate, drag, click (left to copy, right to cancel)';
      'Replace',               'Click on new object , click on object to be replaced';
      'Align',                 'Click on an a port , click on a port of object to be moved';
      'Link',                  'Click link origi-n, drag, click left for final or intermediate points or right to cancel';
      'Delete',                'Delete: Click on the object to delete';
      'Flip',                  'Click on block to be flipped'      ;
      'Rotate Left',           'Click on block to be turned left'  ;
      'Rotate Right',          'Click on block to be turned right' ;
      'Open/Set',              'Click to open block or make a link';
      'MoveLink',              ''                                  ;
      'SelectLink',            ''                                  ;
      'CtrlSelect',            ''                                  ;
      'SelectRegion',          ''                                  ;
      'Popup',                 ''                                  ;
      'Label',                 'Click block to label';
      'Get Info',              'Click on object  to get information on it';
      'Code Generation',       'Click on a Superblock (without activation output) to obtain a coded block!' ;
      'Icon',                  'Click on block to edit its icon';
      'Color',                 'Click on object to paint';
      'Identification',        'Click on an object to set or get identification';
      'Resize',                'Click block to resize';
      'Block Documentation',   'Click on a block to set or get it''s documentation'
     ]
  //
  
  //**--------------------------------------------------------------------------------------

  //** initialize the "scicos_contex" datastructure (Scilab script inside SCICOS simulation)
  if ~exists('%scicos_context') then
    %scicos_context = struct() ;
  end

  //**--------------------------------------------------------------------------------------

  //** initialize a "scicos_debug_gr" variable for debugging editor
  if ~exists('%scicos_debug_gr') then
    %scicos_debug_gr = %f; //** debug mode : default is "%f" 
  end

  //** initialize a "scicos_with_grid" variable for drawing a grid
  if ~exists('%scicos_with_grid') then
    %scicos_with_grid = %f;
  end
  if ~exists('%scs_wgrid') then
    //** %scs_wgrid(1:2) : space of grid
    //** %scs_wgrid(3) : color
    %scs_wgrid = [10;10;12];
  end

  //** disable scilab function protection
  prot=funcprot();
  funcprot(0);

  //** to load functions of ged in scicos
  exec(SCI+'/macros/util/ged.sci',-1);

  //** Scicos internal functions override in order to assure full
  //** compatibility with NGI (J.B. Silvy)
  swap_handles = permutobj; //TO be removed in Scilab 5
  //** for rotation of text
  //** PATCH 
  //** xstringb = xstringb2; //TO be removed in Scilab 5

  //** restore scilab function protection
  funcprot(prot)

  //**----------------------------- RIGHT MOUSE BUTTON MENUS (Popup) ------------------------
  //** Right Mouse Button Menus:
  //**        "%scicos_lhb_list" data structure initialization 
  //**                 
  //** Create an empty list() data structure 
  %scicos_lhb_list = list();
  
  //** Fill the data structure with menu/command/functions definitions  
  
  //** state_var = 1 : right click over a valid object inside the CURRENT Scicos Window
  %scicos_lhb_list(1) = list('Open/Set',..
			     'Cut',..
			     'Copy',..
			     'Smart Move',..
			     'Move',..
			     'Duplicate',..
			     'Delete',..
			     'Link',..
			     'Align',..
			     'Replace',..
			     'Flip',..
			     list( 'Properties',..
			           'Resize',..
			           'Icon',..
			           'Icon Editor',..
			           'Color',..
			           'Label',..
			           'Get Info',..
			           'Identification',..
			           'Block Documentation'),..
			           'Code Generation',..
			           'Help');
  
  //** state_var = 2 : right click in the void of the CURRENT Scicos Window			  
  %scicos_lhb_list(2) = list('Undo',..
                             'Paste',..
			     'Palettes',..
			     'Context',..
			     'Add new block',..
			     'Region to Super Block',..
			     'Replot',..
			     'Save',..
			     'Save As',..
			     'Load',..
			     'Export',..
			     'Quit',..
			     'Background color',..
			     'Show Block Shadow'  ,..
			     'Zoom in' ,..
			     'Zoom out',..
			     'Help');

  //** state_var = 3 : right click over a valid object inside a PALETTE or
  //**                 not a current Scicos window
  //** 
  %scicos_lhb_list(3) = list('Copy',..
			     'Help');
 //**----------------------------------------------------------------------------------------
 
 if exists('scicoslib')==0 then 
   load('SCI/macros/scicos/lib') ; //** load all the libraries relative to the palettes
 end

 exec(loadpallibs, 1) //** load the palettes libraries, -1 =&gt; no echo on the Scilab console 

end //** end of the main if() not superblock

//** ------------------------------------ End the NOT-Superbloc initialization and check ----------------------------------------

Main_Scicos_window = 1000 ; //** set default value of the main scicos window

//Initialisation
newparameters = list() ;
enable_undo = %f
edited = %f
needreplay = %f
%path='./'
%exp_dir = PWD

global %tableau

if ~super_block then // init of some global variables
  %zoom    = 1.4      ; //** original value by Ramine
  pal_mode = %f       ;  // Palette edition mode
//  newblocks=[] // table of added functions in pal_mode
  super_path=[] // path to the currently opened superblock

  scicos_paltmp = scicos_pal ;

  //** try to load the local ".scicos_pal" files that contains the user defined 
  //** palette relatives to the local directory
  if execstr('load(''.scicos_pal'')','errcatch')==0 then
  //** if the load has been positive 
    scicos_pal = gunique(scicos_pal,scicos_paltmp); //** remove the duplicate item(s) 
  end                                               //** in the palette 
  
  //** load - if present - the used defined local shortcut  
  execstr('load(''.scicos_short'')','errcatch')  // keyboard shortcuts

end
//

[lhs, rhs] = argn(0) ; //** recover the arguments of "scicos(&lt;rhs&gt;)" 

if rhs&gt;=1 then //** scicos_new(...) is called with some arguments

  if type(scs_m)==10 then //diagram is given by its filename
    %fil=scs_m
    alreadyran=%f
    [ok,scs_m,%cpr,edited] = do_load(%fil,'diagram')
    if ~ok then return,end

    if size(%cpr)==0 then
      needcompile=4
      %state0=list()
    else
      %state0=%cpr.state;
      needcompile=0
    end

  else //diagram is given by its data structure

    if ~super_block then 
      %cpr=list(); needcompile=4 ; alreadyran=%f , %state0=list()
    end

  end

else //** scicos_new() is called without arguments (AND - implicitly - is NOT a superblock)

//** ----------- Normal : not a superblock -----------------  
//** ------------- NORMAL OPENING OF A BRAND NEW GRAPHICS WINDOW--------------------------------

  gh_Main_Scicos_window = scf(Main_Scicos_window); //** new way to open a brand new graphics windows  

  scs_m = scicos_diagram(version=get_scicos_version()) ;

  %cpr = list(); needcompile = 4; alreadyran = %f; %state0 = list() ;

end

//

if typeof(scs_m)&lt;&gt;'diagram' then
  error("First argument must be a Scicos diagram");
end


//**----------------------- Dynamic menu and shortcut preparation -----------------------------------------
//**
%cor_item_exec = []; //** init

//** scan all the "%scicos_menu" an load "%cor_item_exec" ; dispose the first string (2:$) because
//** is the name of the dynamic menu
for %Y=1 : length(%scicos_menu)
  %cor_item_exec = [%cor_item_exec, %scicos_menu(%Y)(2:$)] ;
end

%cor_item_exec = %cor_item_exec'; //** transpose the vector
%R = %cor_item_exec; 
%R = stripblanks(%R)+'_' ; //** delete all the blanks and add an underscore at the end "Save As PAlette" -&gt; "SaveAsPalette_"
%R = strsubst(%R,'/','') ; //** delete "/"
%R = strsubst(%R,' ','') ; //** delete " "
%R = strsubst(%R,'.','') ; //** delete "."
%R = strsubst(%R,'-','') ; //** delete "-"
%cor_item_exec = [%cor_item_exec, %R]; //** create the two column matrix [&lt;MenuName&gt; &lt;FunctionToCall&gt;]

// add fixed menu items not visible
%cor_item_exec = [%cor_item_exec;
                  'Link'        , 'Link_'         ;
		  'Open/Set'    , 'OpenSet_'      ;
		  'MoveLink'    , 'MoveLink_'     ;
		  'SelectLink'  , 'SelectLink_'   ;
		  'CtrlSelect'  , 'CtrlSelect_'   ;
		  'SelectRegion', 'SelectRegion_' ;
	          'Popup'       , 'Popup_'       ];

menus = tlist('xxx')

for %Y=1:length(%scicos_menu)
  menus(1)  = [menus(1), %scicos_menu(%Y)(1)];
  menus($+1)= %scicos_menu(%Y)(2:$);
end

for %Y=1:length(%scicos_menu)
  %R = %scicos_menu(%Y);
  %w = 'menus('''+%R(1)+''')('+ string(1:(size(%R,'*')-1)) + ')';
  execstr(%R(1)+ '=%w;');
end

//----------------------------------------------------------------
// single key shortcut: keyboard definition
%tableau = emptystr([1:100]);
for %Y = 1 : size(%scicos_short,1)
  %tableau(-31+ascii(%scicos_short(%Y,1)))=%scicos_short(%Y,2);
end
//----------------------------------------------------------------

// viewport
options = scs_m.props.options

// solver
%scicos_solver = scs_m.props.tol(6)

//** ------- GRAPHICS INITIALIZATION: Palettes, TK functions, --------- -----------------------------------
//**-------------------------- I'm NOT inside a superblock  -----------------------------------------------
if ~super_block then

  gh_current_window = scf(Main_Scicos_window);
  curwin = get ( gh_current_window, "figure_id") ;

  palettes = list();
  noldwin = 0      ;
  windows = [1 curwin] ; 
  pixmap = %scicos_display_mode ;// obsolete: the pixmap is "on" as default 
  //

  if ~exists('%scicos_gui_mode') then
    if with_tk() then %scicos_gui_mode=1, else %scicos_gui_mode=0, end
  end

  if %scicos_gui_mode==1 then
  //** scicos is active in graphical mode   
    prot = funcprot();
    funcprot(0);
    
    getfile  = tk_getfile;  //** Tk function definition 
    
    savefile = tk_savefile; //** Tk    "        "
    
    getcolor = tk_getcolor; //** Tk    "        "
    
    //** --------- Popup OS dependent definition -----------------
    if MSDOS then  
    //** ... for Windows machines 
      getvalue = tk_getvalue ;
      mpopup   = tk_mpopup   ; //** the pop up Windowz
      choose   = tk_scicos_choose   ;
    else
      //** ... for Unix machines   
      getvalue = tk_getvalue ;
      mpopup = tk_mpopupX    ; //** for the Penguin 
      deff('x=choose(varargin)', 'x=x_choose(varargin(1:$))');
    end
    
    funcprot(prot);
    //** -------- ... end of popup --------------------------------
    
  else
  //** Scicos works in "text mode"  
    deff('x=getfile(varargin)','x=xgetfile(varargin(1:$))');
    savefile = getfile;
    deff('Cmenu=mpopup(x)','Cmenu=[]')
    deff('x=choose(varargin)','x=x_choose(varargin(1:$))');
  end //** of %scicos_gui_mode 

//

else //** super block case

  //** NO Pupup function definition in the super block ------------
  
  noldwin = size(windows,1)           ;
  windows = [windows ; slevel curwin] ;
  palettes = palettes                 ;

end //** end of not superblock

//** --------------------------------------- GRAPHICS INITIALIZATION -----------------------------------
//** This section is executed in any case
//   initialize graphics

clf(); //** clear current graphic window and delete all his children

//** this handle acquisition works for both MainScicosWindow and SuperBlock window
gh_current_window = gcf() ; //** get the current graphics window
gh_current_window.pixmap = "on";
if ~set_cmap(options('Cmap')) then // add colors if required
  options('3D')(1) = %f //disable 3D block shape
end

set_background() ; //** --&gt;

pwindow_set_size() //** phisical window set size --&gt; ok

window_set_size()  //** virtual window set sixe --&gt; ok

//** Add the "_" character at the end of menu to call the corresponding function
for %Y=1:length(%scicos_menu)
    execstr( %scicos_menu(%Y)(1)+'_'+string(curwin)+'='+%scicos_menu(%Y)(1) )
end

menu_stuff(); //** delete the default menus in the graphics window and
              //** create the SCICOS menu using the 'menus' data structure
              //** and the macro "

//** The expandend superblock windows does not have the [stop] simulation button
if ~super_block then
  delmenu (curwin,'stop')  ;
  addmenu (curwin,'stop', list(1,'haltscicos')) ;
  unsetmenu(curwin,'stop') ;
else
  unsetmenu(curwin,'Simulate') ;
end

//** ----------------------------------------------------------------------------------------------


//**----------------------------------- CONTEXT ------------------------------------------------- 
//** -------- This piece of code is relative to the "Contex" handling and evaluation ------------
//set context (variable definition...)
if type(scs_m.props.context) == 10 then //** if the variable is defined 

  gh_percent_now_win = gcf(); //** save current figure handle

  [%scicos_context,ierr] = script2var(scs_m.props.context,%scicos_context)
  //for backward compatibility for scifunc
  if ierr==0 then
    %mm = getfield(1,%scicos_context)
    for %mi=%mm(3:$)
       ierr = execstr(%mi+'=%scicos_context(%mi)','errcatch')
       if ierr&lt;&gt;0 then
         break
       end
    end
  end
  //end of for backward compatibility for scifunc

  if ierr  &lt;&gt;0 then
    message(['Error occur when evaluating context:' lasterror() ]) ;
  else
    deff('%fonct()',scs_m.props.context)
    %outfun = macrovar(%fonct);
    //perform eval only if context contains functions which may give
    //different results from one execution to next
    if or(%outfun(4)=='rand')|or(%outfun(4)=='exec')|or(%outfun(4)=='load') then
      disablemenus() ;
       [scs_m, %cpr, needcompile, ok] = do_eval(scs_m, %cpr);
      enablemenus() ;
    end
  end

  scf(gh_percent_now_win); //** restore current figure handle

else

  scs_m.props.context = ' ' ; //** put the variable to empty state 

end
//** ---------- End of "Contex" handling and evaluation (was: "the very obscure code") -------------
//**
//** -----------------------------------------------------------------------------------------------
//** Begin of the Main command interpreter loop

// state machine variables

//** Initial conditions 
Cmenu = []     ; //** valid command = empty
%pt   = []     ; //** valid last mouse position = empty
%win  = curwin ; //** curwin is dinamically modified if a superblock window is open 

//** 'Select' and 'Select_back' are matrix;
//**  Each line is:  [object_id win_id] : "object_id" is the same INDEX used in "scs_m.obj"
//**                                  and "win_id"    is the Scilab window id.
//**  Multiple selection is permitted: each object is a line of the matrix. 
Select = []      ; //** empty
Select_back = [] ; //** empty
%ppt = []; //** used to store last valid click position for "Paste" operation 
Clipboard = []; //** used in Copy Cut and Paste function 
//** --- End of initialization ----------------------------------------------------------- 


drawobjs(scs_m) ; //** draw the full diagram from the original Scicos data structure 

//** ------------------------ Command Interpreter / State Machine / Main Loop ----------------------------

while ( Cmenu &lt;&gt; 'Quit' ) //** Cmenu -&gt; exit from Scicos

//** ---------------------------------------------------------------// Used for "dynamic" stack allocation 
  [%stack] = stacksize()                                            // Automatically increase Scilab stack  
  if %stack(2)/%stack(1)&gt; 0.3 then                                  // size for big diagram
    stacksize(2*%stack(1))                                          //
    disp('stacksize increased to '+string(2*%stack(1)))             //
  end                                                               //
//** ---------------------------------------------------------------

  //** This code fragment filter out all previusly selected object on a window NOT present in the
  //** actual Scilab active window list "winsid" (e.g. the window has been closed).   
  if Select&lt;&gt;[] then
    if ~or(Select(1,2) == winsid()) then //** a single object selection outside the valid list
         Select = [] ; //** imply a full Reset 
    end
  end

  //** Command classification and message retrivial 
  [CmenuType, mess] = CmType(Cmenu); //** recover command type and message  
  xinfo(mess); //** show the message associated to the command 

  //** ----------------- State variable filtering -----------------------------------------
  //** clear the %pt information for backward compatibility
  //** if 'Cmenu' is empty (no command) but '%pt' is not , it is better to clear '%pt'
  if ( Cmenu == [] &amp; %pt &lt;&gt; []  ) then %pt=[]; end

  //** if 'Cmenu' is NOT empty and 'CmenuType' is "0" I don't' need '%pt' then clear '%pt'
  if ( Cmenu&lt;&gt; [] &amp; CmenuType==0) then %pt=[]; end

  //** if 'Cmenu' is NOT empty and 'CmenuType' is "1" and there is at least one object selected 
  if (Cmenu&lt;&gt;[] &amp; CmenuType==1 &amp; %pt==[] &amp; Select&lt;&gt;[]) then
       [%pt,%win] = get_selection(Select) //** recover the %pt and %win from 'Select'
  end
  //** ------------------------------------------------------------------------------------
  
  //** ---- Main decisional branch --------------------------------------------------------
  //** if no command is issued "Cmenu==[]" or
  //**    CmenuType==1 and no %pt information and no object selected 
  if ( Cmenu==[] | (CmenuType==1 &amp; %pt==[] &amp; Select==[]) ) then
      
      //** I'm not ready to exec a command: I need more information using cosclik()
      [btn_n, %pt_n, win_n, Cmenu_n] = cosclick() ; //** &lt;-- The input function &lt;------

      //** in the case of 'SelectLink'|Cmenu_n=='MoveLink', if previous command is CmenuType ONE operation
      //** is not completed, just recover and use %pt = %pt_n in order to complete the prev. command,
      //** otherwise update both Cmenu and %pt because the user has choose to abort the old command.
      if (Cmenu_n=='SelectLink' | Cmenu_n=='MoveLink') &amp; Cmenu&lt;&gt;[] &amp; CmenuType==1 &amp; %pt==[] then
	if %pt_n&lt;&gt;[] then %pt = %pt_n; end
      else
        if Cmenu_n&lt;&gt;[] then Cmenu = Cmenu_n; end
        if %pt_n &lt;&gt; [] then %pt = %pt_n;     end
      end

      %win = win_n

  else
  //** I'm ready to exec a command 
      %koko = find( Cmenu==%cor_item_exec(:,1) ); //** find the command in the list "%cor_item_exec"
      //** if the command is found 
      if size(%koko,'*') == 1 then

        Select_back = Select; //** save the selected object list 

        //** Command execution
        if %scicos_debug_gr then
          exeString = "Executing.... " + %cor_item_exec(%koko,2) ;
          disp(exeString)  ;
        end
	//
        ierr=0
	execstr('ierr=exec('+%cor_item_exec(%koko,2)+',''errcatch'',-1)')
        if ierr &gt; 0 then
	  Select_back=[];Select=[]
	  Cmenu='Replot';
	  disp(['I recovered from the following error:';
                lasterror();
                'in '+%cor_item_exec(%koko,2)'+' action.'])
	end
	
	//** unselect ALL the previous selected object and select again the actually selected object
	//** because some command (operation) could select/unselect some object (the mods are registered
	//** in the "Select" variable)
	if ~isequal(Select,Select_back) then
	  // Select_back: objects to unselect
	  // Select     : object to select
	    selecthilite(Select_back, "off") ; // unHilite previous objects
	    selecthilite(Select, "on") ;       // Hilite the actual selected object
	end
		
      else
      //** if the command is not valid clear the state variable 
         Cmenu=[]; %pt=[]
      end //** a valid/invalid command to exec
      
   end //** not_ready / ready ... to exec a command 
   //**---------------------------------------------------------------------------------------------------
   
end //**---&gt;  end of the while loop: the only way to exit is with the 'Quit' command  -------------------------------

do_exit() ; //** this function is executed in case of 'Quit' command

endfunction //** scicos() end here :) : had a good day
//**
//*
//**
//** ----------------------------------------------------------------------------------------------------------------
//*******************************************************************************************************************

function [itype, mess] = CmType(Cmenu)
  //** look inside "CmenuTypeOneVector" if the command is type 1 (need both Cmenu and %pt)
  k = find (Cmenu == CmenuTypeOneVector(:,1)); 
  if k==[] then //** if is not type 1 (empty k)
    itype = 0 ; //** set type to zero
    mess=''   ; //** set message to nothing 
    return    ; //** --&gt; EXIT point : return back 
  end

  if size(k,'*')&gt;1 then //** if found more than one command 
    message('Warning '+string( size(k,'*'))+' menus have identical name '+Cmenu);
    k=k(1); //** ? 
  end

  itype = 1 ; 

  mess = CmenuTypeOneVector(k,2) ; 
  
endfunction

//** ----------------------------------------------------------------------------------------------------------------

function uni = gunique(m1,m2)
// Used to eliminate duplicate palette item(s) 
  uni = [m1;m2] ; //** merge the two matrix 
  [j,ind] = unique(uni(:,1) + uni(:,2)) ; //** remove the duplicate palette name 
  uni = uni(-gsort(-ind),:);  //** reorder the merged palette without duplicate 
endfunction

//** ----------------------------------------------------------------------------------------------------------------


//**---------------------------------------------------------------------------------------------------------------------
</PRE>

<H3><font color="blue"><A NAME="SECTION00016000000000000000">
See Also</A>
</font></H3>

<UL>
<LI><A NAME="tex2html4"
  HREF="scicosim.htm">scicosim - Scicos (batch) simulation function (Scilab Function)</A>
</LI>
<LI><A NAME="tex2html5"
  HREF="scicos_simulate.htm">scicos_simulate - Function for running scicos simulation in batch mode. (Scilab Function)</A>
</LI>
</UL>

<H3><font color="blue"><A NAME="SECTION00017000000000000000">
Authors</A>
</font></H3>
<b>Ramine Nikoukhah</b> INRIA

<BR>




</BODY>
</HTML>
