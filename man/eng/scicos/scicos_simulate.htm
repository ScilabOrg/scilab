<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<!--Converted with LaTeX2HTML 2002-2-1 (1.71)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>scicos_simulate</TITLE>
<META NAME="description" CONTENT="scicos_simulate">
<META NAME="keywords" CONTENT="scicos_simulate">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="scicos_simulate.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<P>
<DIV ALIGN="CENTER">
Scilab Function
<BR><A NAME="tex2html1"
  HREF="../../fr/scicos/scicos_simulate.htm">fr</A> - <A NAME="tex2html2"
  HREF="./scicos_simulate.htm">eng</A>

</DIV>
<BR><A NAME="SECTION00010000000000000000"></A><A NAME="scicos_simulate"></A>
<BR>
<b>scicos_simulate</b> - Function for running scicos simulation in batch mode.


<H3><font color="blue"><A NAME="SECTION00011000000000000000">
Module</A>
</font></H3>

<UL>
<LI><A NAME="tex2html3"
  HREF="whatis.htm">Scicos</A>
</LI>
</UL>

<H3><font color="blue"><A NAME="SECTION00012000000000000000">
Calling Sequence</A>
</font></H3>
<PRE>
Info=scicos_simulate(scs_m,Info[,%scicos_context][,flag])
</PRE>

<H3><font color="blue"><A NAME="SECTION00013000000000000000">
Parameters</A>
</font></H3>

<UL>
<LI><b>scs_m :</b>
   : scicos diagram (obtained by "load file.cos"). Note that the version of file.cos must be the current version. If not, load into scicos and save.
</LI>
<LI><b>Info :</b>
   : a list. It must be list() at the first call, then use output Info as input Info for the next calls. Info contains compilation and simulation information and is used to avoid recompilation when not needed.
</LI>
<LI><b>%scicos_context :</b>
   :  a scilab struct containing values of symbolic variables used in the context and Scicos blocks. This is often used to change a parameter in the diagram context. In that case, make sure that in the diagram context the variable is defined such that it can be modified. Say a variable "a" is to be defined in the context having value 1, and later in batch mode, we want to change the value of "a". In that case, in the context of the diagram place: if&nbsp;exists('a') then a=1,end If you want then to run the simulation in batch mode using the value a=2, set: %scicos_context.a=2
</LI>
<LI><b>flag :</b>
   : string. If it equals 'nw' (no window), then blocks using graphical windows are not executed. Note that the list of such blocks must be updated as new blocks are added.
</LI>
<LI><b>Info :</b>
   : contains compilation and simulation information and is used to avoid recompilation when not needed. Normally it should not be modified.
</LI>
</UL>

<H3><font color="blue"><A NAME="SECTION00014000000000000000">
Description</A>
</font></H3>

<P>
This function is used to simulate scicos diagrams in batch mode. It requires the scs_m structure which can be obtained by loading in Scilab the .cos file (e.g. load mydiagram.cos).  
<BR>
Contrary to the function <b> scicosim</b>, the diagram need not be compiled before being saved.  
<BR>
<H3><font color="blue"><A NAME="SECTION00015000000000000000">
File content</A>
</font></H3>
<BR>
<PRE  CLASS="verbatim">function Info=scicos_simulate(scs_m,Info,%scicos_context,flag,Ignb)
// Function for running scicos simulation in batch mode
// Info=scicos_simulate(scs_m[,Info][,%scicos_context][,flag]...
//                      [,Ignb])
//
// scs_m: scicos diagram (obtained by "load file.cos"). Note that
// the version of file.cos must be the current version. If not, load
// into scicos and save.
//
// %scicos_context: a scilab struct containing values of
// symbolic variables used in the context and Scicos blocks. This
// is often used to change a parameter in the diagram context. In that
// case, make sure that in the diagram context the variable is defined such
// that it can be modified. Say a variable "a" is to be defined in the
// context having value 1, and later in batch mode, we want to change
// the value of "a". In that case, in the context of the diagram place: 
//  if ~exists('a') then a=1,end
// If you want then to run the simulation in batch mode using the value
// a=2, set:
// %scicos_context.a=2
//
// Info: a list. It must be list() at the first call, then use output
// Info as input Info for the next calls. Info contains compilation and
// simulation information and is used to avoid recompilation when not
// needed.
//
// flag: string. If it equals 'nw' (no window), then blocks using
// graphical windows are not executed. Note that the list of such
// blocks must be updated as new blocks are added.
//
// Ignb : matrix of string : The name of blocks to ignore.
// If flag is set and equal to 'nw' then Ignb contains
// name of blocks that are added to the list
// of blocks to ignore.
//

  noguimode=find(sciargs()=="-nogui");
  if (noguimode &lt;&gt;[]) then
     clear noguimode
     flag='nw'
  //    warning(" Scilab in no gui mode : Scicos unavailable");
  //    abort;
  end;
  clear noguimode

  //** define Scicos data tables
  if (~isdef("scicos_pal") | ~isdef("%scicos_menu") | ..
      ~isdef("%scicos_short") | ~isdef("%scicos_help") | ..
      ~isdef("%scicos_display_mode") | ~isdef("modelica_libs") | ..
      ~isdef("scicos_pal_libs") ) then
         [scicos_pal,%scicos_menu,...
          %scicos_short,%scicos_help,..
          %scicos_display_mode,modelica_libs,...
          scicos_pal_libs]=initial_scicos_tables()
         clear initial_scicos_tables
  end

  //** initialize a "scicos_debug_gr" variable
  %scicos_debug_gr = %f;

  //** list of scopes to ignore
  Ignoreb=['bouncexy',...
           'cscope',...
           'cmscope',...
           'canimxy',...
           'canimxy3d',...
           'cevscpe',...
           'cfscope',...
           'cscopexy',...
           'cscopexy3d',...
           'cmatview',...
           'cmat3d',...
           'affich',...
           'affich2']

  //** load macros libraries and palettes
  load SCI/macros/scicos/lib
  exec(loadpallibs,-1)

  //** redefine some gui functions
  prot=funcprot();funcprot(0);
  deff('disablemenus()',' ')
  deff('enablemenus()',' ')
  do_terminate=do_terminate1
  funcprot(prot)

  //** check/set rhs parameters
  if argn(2)==1 then
    Info=list()
    %scicos_context=struct()
    flag=[]
    Ignb=[]
  elseif argn(2)==2 then
    if type(Info)==10&amp;(stripblanks(Info)=='nw') then
      Info=list()
      flag='nw'
    elseif type(Info)&lt;&gt;15 then
      Info=list()
      flag=[]
    else
      flag=[]
    end
    %scicos_context=struct()
    Ignb=[]
  elseif argn(2)==3 then
    if type(Info)&lt;&gt;15 then
      Info=list()
    end
    if type(%scicos_context)==10&amp;(stripblanks(%scicos_context)=='nw') then
      %scicos_context=struct()
      flag='nw'
    elseif type(%scicos_context)&lt;&gt;17 then
      %scicos_context=struct()
      flag=[]
    else
      flag=[]
    end
    Ignb=[]
  elseif argn(2)==4 then
    if type(Info)&lt;&gt;15 then
      Info=list()
    end
    if type(%scicos_context)&lt;&gt;17 then
      %scicos_context=struct()
    end
    if type(flag)&lt;&gt;10 then
     flag=[]
    elseif (stripblanks(flag)&lt;&gt;'nw') then
       flag=[]
    end
    Ignb=[]
  elseif argn(2)==5 then
    if type(Info)&lt;&gt;15 then
      Info=list()
    end
    if type(%scicos_context)&lt;&gt;17 then
      %scicos_context=struct()
    end
    if type(flag)&lt;&gt;10 then
      flag=[]
    elseif (stripblanks(flag)&lt;&gt;'nw') then
      flag=[]
    end
    if type(Ignb)&lt;&gt;10 then
      Ignb=[]
    else
      Ignb=(Ignb(:))'
    end
  else
     error('scicos_simulate : wrong number of parameters.')
  end

  Ignore=[]

  if flag=='nw' then
    Ignore=Ignoreb
  end

  if Ignb&lt;&gt;[] then
    Ignore=[Ignore,Ignb]
  end

  //** retrieve Info list
  if Info&lt;&gt;list() then
    [%tcur,%cpr,alreadyran,needstart,needcompile,%state0]=Info(:)
  else
    %tcur=0;%cpr=list();alreadyran=%f;needstart=%t;needcompile=4;%state0=list();
  end

  //** set solver
  tolerances=scs_m.props.tol
  solver=tolerances(6)
  %scicos_solver=solver

  //** set variables of context
  [%scicos_context,ierr]=script2var(scs_m.props.context, ...
				    %scicos_context);

  if ierr==0 then 
    [scs_m,%cpr,needcompile,ok]=do_eval(scs_m,%cpr)
    if needcompile&lt;&gt;4&amp;size(%cpr)&gt;0 then %state0=%cpr.state,end
    alreadyran=%f
  else
      error(['Incorrect context definition, '+lasterror()] )
  end

  if %cpr==list() then need_suppress=%t, else need_suppress=%f,end

  [%cpr,%state0_n,needcompile,alreadyran,ok]=..
      do_update(%cpr,%state0,needcompile)
  if ~ok then error('Error updating parameters.'),end

  if or(%state0_n&lt;&gt;%state0) then //initial state has been changed
    %state0=%state0_n
    [alreadyran,%cpr]=do_terminate1(scs_m,%cpr)
    choix=[]
  end
  if %cpr.sim.xptr($)-1&lt;size(%cpr.state.x,'*') &amp; solver&lt;100 then
    warning(['Diagram has been compiled for implicit solver'
	     'switching to implicit Solver'])
    solver=100
    tolerances(6)=solver
  elseif (%cpr.sim.xptr($)-1==size(%cpr.state.x,'*')) &amp; ..
	( solver==100 &amp; size(%cpr.state.x,'*')&lt;&gt;0) then
    warning(['Diagram has been compiled for explicit solver'
	     'switching to explicit Solver'])
    solver=0
    tolerances(6)=solver
  end

  if need_suppress then //this is done only once
    for i=1:length(%cpr.sim.funs)
      if type(%cpr.sim.funs(i))&lt;&gt;13 then
	if find(%cpr.sim.funs(i)(1)==Ignore)&lt;&gt;[] then
	  %cpr.sim.funs(i)(1)='trash';
	end
      end
    end
  end

  if needstart then //scicos initialisation
    if alreadyran then
      [alreadyran,%cpr]=do_terminate1(scs_m,%cpr)
      alreadyran=%f
    end
    %tcur=0
    %cpr.state=%state0
    tf=scs_m.props.tf;
    if tf*tolerances==[] then 
      error(['Simulation parameters not set']);
    end

    ierr=execstr('[state,t]=scicosim(%cpr.state,%tcur,tf,%cpr.sim,'+..
		 '''start'',tolerances)','errcatch')
    if ierr&lt;&gt;0 then
      error(['Initialisation problem:'])
    end
    %cpr.state=state
  end

  ierr=execstr('[state,t]=scicosim(%cpr.state,%tcur,tf,%cpr.sim,'+..
	       '''run'',tolerances)','errcatch')

  if ierr==0 then
    %cpr.state=state
    alreadyran=%t
    if tf-t&lt;tolerances(3) then
      needstart=%t
      [alreadyran,%cpr]=do_terminate1(scs_m,%cpr)
    else
      %tcur=t
    end
  else
    error(['Simulation problem:';lasterror()])
  end
  Info=list(%tcur,%cpr,alreadyran,needstart,needcompile,%state0)
endfunction

function [alreadyran,%cpr]=do_terminate1(scs_m,%cpr)
// Copyright INRIA

  if prod(size(%cpr))&lt;2 then   alreadyran=%f,return,end
  par=scs_m.props;

  if alreadyran then
    alreadyran=%f
    //terminate current simulation
    ierr=execstr('[state,t]=scicosim(%cpr.state,par.tf,par.tf,'+..
		 '%cpr.sim,''finish'',par.tol)','errcatch')

    %cpr.state=state
    if ierr&lt;&gt;0 then
      error(['End problem:';lasterror()])
    end
  end
endfunction
</PRE>

<H3><font color="blue"><A NAME="SECTION00016000000000000000">
See Also</A>
</font></H3>

<UL>
<LI><A NAME="tex2html4"
  HREF="scicosim.htm">scicosim - Scicos (batch) simulation function (Scilab Function)</A>
</LI>
<LI><A NAME="tex2html5"
  HREF="scicos.htm">scicos - Block diagram editor and GUI for the hybrid simulator (Scilab Function)</A>
</LI>
<LI><A NAME="tex2html6"
  HREF="steadycos.htm">steadycos - Finds an equilibrium state of a general  dynamical system described by a scicos diagram (Scilab Function)</A>
</LI>
<LI><A NAME="tex2html7"
  HREF="lincos.htm">lincos - Constructs by linearization a linear state-space model from a general dynamical system described by a scicos diagram (Scilab Function)</A>
</LI>
</UL>

<H3><font color="blue"><A NAME="SECTION00017000000000000000">
Authors</A>
</font></H3>
<b>Ramine Nikoukhah</b> INRIA

<BR>




</BODY>
</HTML>
