<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<!--Converted with LaTeX2HTML 2002-2-1 (1.71)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>CANIMXY3D_intfunc</TITLE>
<META NAME="description" CONTENT="CANIMXY3D_intfunc">
<META NAME="keywords" CONTENT="CANIMXY3D_intfunc">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="CANIMXY3D_intfunc.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<P>
<DIV ALIGN="CENTER">
Interfacing function
<BR><A NAME="tex2html1"
  HREF="./CANIMXY3D_intfunc.htm">eng</A>

</DIV>
<H2><A NAME="SECTION00010000000000000000"></A><A NAME="CANIMXY3D_intfunc"></A>
<BR>
CANIMXY3D
</H2>

<H3><font color="blue"><A NAME="SECTION00011000000000000000">
File content</A>
</font></H3>
<BR>
<PRE  CLASS="verbatim">function [x,y,typ]=CANIMXY3D(job,arg1,arg2)
//Scicos 3D animated visualization block
// Copyright INRIA
x=[];y=[];typ=[]
select job
case 'plot' then
  standard_draw(arg1)
case 'getinputs' then
  [x,y,typ]=standard_inputs(o)
case 'getoutputs' then
  x=[];y=[];typ=[];
case 'getorigin' then
  [x,y]=standard_origin(arg1)
case 'set' then
  x=arg1;
  graphics=arg1.graphics;exprs=graphics.exprs
  model=arg1.model;
  while %t do
    [ok,nbr_curves,clrs,siz,win,wpos,wdim,vec_x,vec_y,vec_z,param3ds,N,exprs]=getvalue(..
	'Set Scope parameters',..
	['Number of curves';
	'color (&lt;0) or mark (&gt;0)';
	'line or mark size';
	'Output window number (-1 for automatic)';
	'Output window position';
	'Output window sizes';
	'Xmin and Xmax';
	'Ymin and Ymax';
	'Zmin and Zmax';
	'Alpha and Theta';
	'Buffer size'],..
	list('vec',1,'vec',-1,'vec',-1,'vec',1,'vec',-1,'vec',-1,'vec',-1,'vec',-1,'vec',-1,'vec',-1,'vec',1),exprs)
    if ~ok then break,end //user cancel modification
    mess=[]
    if size(wpos,'*')&lt;&gt;0 &amp;size(wpos,'*')&lt;&gt;2 then
      mess=[mess;'Window position must be [] or a 2 vector';' ']
      ok=%f
    end
    if size(wdim,'*')&lt;&gt;0 &amp;size(wdim,'*')&lt;&gt;2 then
      mess=[mess;'Window dim must be [] or a 2 vector';' ']
      ok=%f
    end
    if win&lt;-1 then
      mess=[mess;'Window number cannot be inferior than -1';' ']
      ok=%f
    end
    if size(clrs,'*')&lt;&gt;size(siz,'*') then
      mess=[mess;'Colors and Size must have same size';' ']
      ok=%f
    end
    if nbr_curves&lt;=0 then
      mess=[mess;'Number of curves cannot be negative or null';' ']
      ok=%f
    end
    if size(clrs,'*')&lt;nbr_curves then
      mess=[mess;'You must have at least same size for clrs and the number of curves';' ']
      ok=%f
    end
    if N&lt;1 then
      mess=[mess;'Buffer size must be at least 1';' ']
      ok=%f
    end
    if N&lt;2
      for i=1:nbr_curves
        if clrs(i)&gt;0 then
          mess=[mess;'Buffer size must be at least 2 or Change a color (must be &lt;0)';' ']
          ok=%f
	end	
      end
    end
    if vec_y(1)&gt;=vec_y(2) then
      mess=[mess;'Ymax must be higher than Ymin';' ']
      ok=%f
    end
    if vec_x(1)&gt;=vec_x(2) then
      mess=[mess;'Xmax must be higher than Xmin';' ']
      ok=%f
    end
    if vec_z(1)&gt;=vec_z(2) then
      mess=[mess;'Zmax must be higher than Zmin';' ']
      ok=%f
    end
    if ~ok then
      message(mess)
    else
      in = nbr_curves*ones(3,1);
      in2 = ones(3,1);
      [model,graphics,ok]=set_io(model,graphics,list([in in2],ones(3,1)),list(),ones(1,1),[]);
      if wpos==[] then wpos=[-1;-1];end
      if wdim==[] then wdim=[-1;-1];end
      rpar=[vec_x(:);vec_y(:);vec_z(:);param3ds(:)]
      size_siz = size(siz,'*');
      ipar=[win;size_siz;N;clrs(:);siz(:);1;wpos(:);wdim(:);nbr_curves]
      model.rpar=rpar;
      model.ipar=ipar
      graphics.exprs=exprs;
      x.graphics=graphics;
      x.model=model
      break
    end
  end
case 'define' then
  win=-1;
  N=2;
  clrs = [1;2;3;4;5;6;7;13]
  siz = [1;1;1;1;1;1;1;1]
  wpos=[-1;-1];wdim=[-1;-1];
  param3ds=[50;280]
  vec_x = [-15;15]
  vec_y = [-15;15]
  vec_z = [-15;15]
  nbr_curves = 1;

  model=scicos_model()
  model.sim=list('canimxy3d',4)
  model.in=[1;1;1]
  model.evtin=1
  model.in2=[1;1;1]
  model.intyp=[1;1;1]
  model.rpar=[vec_x(:);vec_y(:);vec_z(:);param3ds(:)]
  model.ipar=[win;8;N;clrs(:);siz(:);8;wpos(:);wdim(:);nbr_curves]
  model.blocktype='d'
  model.firing=[]
  model.dep_ut=[%f %f]
 
  exprs=[string(nbr_curves);
      strcat(string(clrs),' ');
      strcat(string(siz),' ');
      string(win);
      '[]';
      '[]';
      strcat(string(vec_x),' ');
      strcat(string(vec_y),' ');
      strcat(string(vec_z),' ');
      strcat(string(param3ds),' ');
      string(N)]
  gr_i=['thick=xget(''thickness'');xset(''thickness'',2);';
        't=(0:0.3:2*%pi)'';';
        'xx=orig(1)+(1/5+(cos(2.2*t)+1)*3/10)*sz(1);';
        'yy=orig(2)+(1/4.3+(sin(t)+1)*3/10)*sz(2);';
        'xpoly(xx,yy,''lines'');'
        'xset(''thickness'',thick);']
  x=standard_define([2 2],model,exprs,gr_i)
end
endfunction
</PRE>

<BR>




</BODY>
</HTML>
