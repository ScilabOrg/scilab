<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<!--Converted with LaTeX2HTML 2002-2-1 (1.71)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>Modulo_Count_intfunc</TITLE>
<META NAME="description" CONTENT="Modulo_Count_intfunc">
<META NAME="keywords" CONTENT="Modulo_Count_intfunc">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="Modulo_Count_intfunc.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<P>
<DIV ALIGN="CENTER">
Interfacing function
<BR><A NAME="tex2html1"
  HREF="./Modulo_Count_intfunc.htm">eng</A>

</DIV>
<H2><A NAME="SECTION00010000000000000000"></A><A NAME="Modulo_Count_intfunc"></A>
<BR>
Modulo_Count
</H2>

<H3><font color="blue"><A NAME="SECTION00011000000000000000">
File content</A>
</font></H3>
<BR>
<PRE  CLASS="verbatim">function [x,y,typ]=Modulo_Count(job,arg1,arg2)
// Copyright INRIA
x=[];y=[];typ=[];
select job
 case 'plot' then
  graphics=arg1.graphics;base=evstr(graphics.exprs(2))
  standard_draw(arg1)
case 'getinputs' then
  [x,y,typ]=standard_inputs(arg1)
case 'getoutputs' then
  [x,y,typ]=standard_outputs(arg1)
case 'getorigin' then
  [x,y]=standard_origin(arg1)
case 'set' then
  x=arg1;
  graphics=arg1.graphics;exprs=graphics.exprs
  model=arg1.model;
  while %t do
    [ok,ini_c,base,exprs]=getvalue('Set Modulo_Count  block parameters',..
	['initial state (&gt;=0)';'Modulo what number (&gt;0)'],list('vec',1,'vec',1),exprs)
    if ~ok then break,end
    ini_c=int(ini_c);base=int(base);
    if ini_c&lt;0|base&lt;=0 then
      message('values  must be positive')
    else
      graphics.exprs=exprs
      model.ipar=base;
      model.dstate=ini_c;
      x.graphics=graphics;x.model=model
      break
    end
  end
case 'define' then
  ini_c=0
  base=3
  model=scicos_model()
  model.sim=list('modulo_count',4)
  model.evtin=1
  model.out=1
  model.dstate=ini_c
  model.ipar=base
  model.blocktype='c'
  model.dep_ut=[%f %f]

  exprs=[string(ini_c);string(base)]
  gr_i=['xstringb(orig(1),orig(2),[''  Counter'';''Modulo ''+string(base)],sz(1),sz(2),''fill'');']
  x=standard_define([3 2],model,exprs,gr_i)
end
endfunction
</PRE>

<BR>




</BODY>
</HTML>
