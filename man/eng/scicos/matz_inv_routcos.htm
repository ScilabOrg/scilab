<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<!--Converted with LaTeX2HTML 2002-2-1 (1.71)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>matz_inv_routcos</TITLE>
<META NAME="description" CONTENT="matz_inv_routcos">
<META NAME="keywords" CONTENT="matz_inv_routcos">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="matz_inv_routcos.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<P>
<DIV ALIGN="CENTER">
Computational routine
<BR><A NAME="tex2html1"
  HREF="./matz_inv_routcos.htm">eng</A>

</DIV>
<H2><A NAME="SECTION00010000000000000000"></A><A NAME="matz_inv_routcos"></A>
<BR>
matz_inv
</H2>

<H3><font color="blue"><A NAME="SECTION00011000000000000000">
File content</A>
</font></H3>
<BR>
<PRE  CLASS="verbatim"># include "scicos_block4.h"
# include "../machine.h"
#include &lt;stdio.h&gt;

#if WIN32
#define NULL    0
#endif

extern int C2F(zgetrf)();
extern int C2F(zgetri)();
typedef struct
{         int *ipiv;
          double *wrk;
	  double *LX;
} mat_inv_struct ;
void matz_inv(scicos_block *block,int flag)
{
 double *ur;
 double *yr;
 double *ui;
 double *yi;
 int nu;
 int info;
 int i;
 mat_inv_struct *ptr;
 
 nu =GetInPortRows(block,1);
 ur=GetRealInPortPtrs(block,1);
 ui=GetImagInPortPtrs(block,1);
 yr=GetRealOutPortPtrs(block,1);
 yi=GetImagOutPortPtrs(block,1);
             /*init : initialization*/
if (flag==4)

      {if((*(block-&gt;work)=(mat_inv_struct*) scicos_malloc(sizeof(mat_inv_struct)))==NULL)
	{set_block_error(-16);
	 return;}
    ptr=*(block-&gt;work);
    if((ptr-&gt;ipiv=(int*) scicos_malloc(sizeof(int)*nu))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;wrk=(double*) scicos_malloc(sizeof(double)*(2*nu*nu)))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;ipiv);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;LX=(double*) scicos_malloc(sizeof(double)*(2*nu*nu)))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;LX);
	 scicos_free(ptr-&gt;ipiv);
	 scicos_free(ptr);
	 return;}
      }

       /* Terminaison */
else if (flag==5)
   {ptr=*(block-&gt;work);
    if((ptr-&gt;LX)!=NULL){
    	scicos_free(ptr-&gt;ipiv);
    	scicos_free(ptr-&gt;LX);
    	scicos_free(ptr-&gt;wrk);
    	scicos_free(ptr);
    	return;}
   }

else
   {
    ptr=*(block-&gt;work);
    for (i=0;i&lt;(nu*nu);i++)
	{ptr-&gt;LX[2*i]=ur[i];
	ptr-&gt;LX[2*i+1]=ui[i];}
     C2F(zgetrf)(&amp;nu,&amp;nu,ptr-&gt;LX,&amp;nu,ptr-&gt;ipiv,&amp;info);
    if (info !=0)
       {if (flag!=6)
    	{set_block_error(-7);
        return;}}
      C2F(zgetri)(&amp;nu,ptr-&gt;LX,&amp;nu,ptr-&gt;ipiv,ptr-&gt;wrk,&amp;nu,&amp;info);
	for (i=0;i&lt;(nu*nu);i++)
	   {yr[i]=ptr-&gt;LX[2*i];
	    yi[i]=ptr-&gt;LX[2*i+1];}
    }
 }
</PRE>

<BR>




</BODY>
</HTML>
