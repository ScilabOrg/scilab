<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<!--Converted with LaTeX2HTML 2002-2-1 (1.71)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>CEVENTSCOPE_intfunc</TITLE>
<META NAME="description" CONTENT="CEVENTSCOPE_intfunc">
<META NAME="keywords" CONTENT="CEVENTSCOPE_intfunc">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="CEVENTSCOPE_intfunc.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<P>
<DIV ALIGN="CENTER">
Interfacing function
<BR><A NAME="tex2html1"
  HREF="./CEVENTSCOPE_intfunc.htm">eng</A>

</DIV>
<H2><A NAME="SECTION00010000000000000000"></A><A NAME="CEVENTSCOPE_intfunc"></A>
<BR>
CEVENTSCOPE
</H2>

<H3><font color="blue"><A NAME="SECTION00011000000000000000">
File content</A>
</font></H3>
<BR>
<PRE  CLASS="verbatim">function [x,y,typ]=CEVENTSCOPE(job,arg1,arg2)
// Copyright INRIA
x=[];y=[];typ=[]
select job
case 'plot' then
  standard_draw(arg1)
case 'getinputs' then
  [x,y,typ]=standard_inputs(o)
case 'getoutputs' then
  x=[];y=[];typ=[];
case 'getorigin' then
  [x,y]=standard_origin(arg1)
case 'set' then
  x=arg1;
  graphics=arg1.graphics;exprs=graphics.exprs
  model=arg1.model;
  while %t do
    [ok,nclock,clrs,win,wpos,wdim,per,exprs]=getvalue(..
	'Set Scope parameters',..
	['Number of event inputs';
	'colors c (&gt;0) or mark (&lt;0)';
	'Output window number (-1 for automatic)';
	'Output window position';
	'Output window sizes';	
	'Refresh period'],..
	 list('vec',1,'vec',-1,'vec',1,'vec',-1,'vec',-1,'vec',1),exprs);
    nclock=int(nclock)
    clrs=int(clrs)
    win=int(win)
    
    if ~ok then break,end //user cancel modification
    mess=[]
    if size(wpos,'*')&lt;&gt;0 &amp;size(wpos,'*')&lt;&gt;2 then
      mess=[mess;'Window position must be [] or a 2 vector';' ']
      ok=%f
    end
    if size(wdim,'*')&lt;&gt;0 &amp;size(wdim,'*')&lt;&gt;2 then
      mess=[mess;'Window dim must be [] or a 2 vector';' ']
      ok=%f
    end
    if nclock&lt;=0 then
      mess=[mess;'Block must have at least one input event';' ']
      ok=%f
    end
    if size(clrs,'*')&lt;&gt;nclock then
      mess=[mess;'Inputs color c size must be equal to Number of inputs';' ']
      ok=%f
    end
    if win&lt;-1 then
      mess=[mess;'Window number cannot be inferior than -1';' ']
      ok=%f
    end
    if per&lt;=0 then
      mess=[mess;'Refresh period must be positive';' ']
      ok=%f
    end
    if ok then
      [model,graphics,ok]=set_io(model,graphics,list(),list(),ones(nclock,1),[])
    else
      message(['Some specified values are inconsistent:';
	         ' ';mess])
    end
    if ok then
      if wpos==[] then wpos=[-1;-1];end
      if wdim==[] then wdim=[-1;-1];end
      rpar=per
      ipar=[win;1;clrs(:);wpos(:);wdim(:)]
      model.rpar=rpar;model.ipar=ipar
      graphics.exprs=exprs;
      x.graphics=graphics;x.model=model
      break
    end
  end
case 'define' then
  nclock=1
  win=-1; clrs=[1;3;5;7;9;11;13;15];
  wdim=[600;400]
  wpos=[-1;-1]
  per=30;

  model=scicos_model()
  model.sim=list('cevscpe',4)
  model.evtin=1
  model.rpar=per
  model.ipar=[win;1;clrs(nclock);wpos(:);wdim(:)]
  model.blocktype='d'
  model.dep_ut=[%f %f]
  
  exprs=[sci2exp(nclock);
	strcat(sci2exp(clrs(nclock)),' ');
	string(win);
	sci2exp([]);
	sci2exp(wdim);	
	string(per)]
  gr_i=['thick=xget(''thickness'');xset(''thickness'',2);';
    'xrect(orig(1)+sz(1)/10,orig(2)+(1-1/10)*sz(2),sz(1)*8/10,sz(2)*8/10);';
    'xx=[orig(1)+sz(1)/5,orig(1)+sz(1)/5;';
    'orig(1)+(1-1/5)*sz(1),orig(1)+sz(1)/5];';
    'yy=[orig(2)+sz(2)/5,orig(2)+sz(2)/5;';
    'orig(2)+sz(2)/5,orig(2)+(1-1/5)*sz(2)];';
    'xarrows(xx,yy);';
    't=(0:0.3:2*%pi)'';';
    'xx=orig(1)+(1/5+3*t/(10*%pi))*sz(1);';
    'yy=orig(2)+(1/4.3+(sin(t)+1)*3/10)*sz(2);';
    'xpoly(xx,yy,''lines'');';
    'xset(''thickness'',thick);']
  x=standard_define([2 2],model,exprs,gr_i)
end
endfunction
</PRE>

<BR>




</BODY>
</HTML>
