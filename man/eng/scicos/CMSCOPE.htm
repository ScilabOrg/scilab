<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<!--Converted with LaTeX2HTML 2002-2-1 (1.71)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>CMSCOPE</TITLE>
<META NAME="description" CONTENT="CMSCOPE">
<META NAME="keywords" CONTENT="CMSCOPE">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="CMSCOPE.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<P>
<DIV ALIGN="CENTER">
Scicos Block
<BR><A NAME="tex2html1"
  HREF="../../fr/scicos/CMSCOPE.htm">fr</A> - <A NAME="tex2html2"
  HREF="./CMSCOPE.htm">eng</A>

</DIV>
<H2><A NAME="SECTION00010000000000000000"></A><A NAME="CMSCOPE"></A>
<BR>
Multi display scope
</H2>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfig{file=CMSCOPE.eps,width=90.00pt}$
 -->
<IMG
 WIDTH="143" HEIGHT="152" ALIGN="BOTTOM" BORDER="0"
 SRC="../../images/scicos/CMSCOPE_blk.gif"
 ALT="\epsfig{file=CMSCOPE.eps,width=90.00pt}">

</DIV>
<BR>

<H3><font color="blue"><A NAME="SECTION00020000000000000000">
Contents</A>
</font></H3>
<!--Table of Contents-->

<UL CLASS="TofC">
<LI><A NAME="tex2html4"
  HREF="CMSCOPE.htm#SECTION00010000000000000000">Multi display scope</A>
<UL>
<LI><A NAME="tex2html5"
  HREF="CMSCOPE.htm#SECTION00021000000000000000">Palette</A>
<LI><A NAME="tex2html6"
  HREF="CMSCOPE.htm#SECTION00022000000000000000">Description</A>
<LI><A NAME="tex2html7"
  HREF="CMSCOPE.htm#SECTION00023000000000000000">Dialog box</A>
<LI><A NAME="tex2html8"
  HREF="CMSCOPE.htm#SECTION00024000000000000000">Default properties</A>
<LI><A NAME="tex2html9"
  HREF="CMSCOPE.htm#SECTION00025000000000000000">Interfacing function</A>
<LI><A NAME="tex2html10"
  HREF="CMSCOPE.htm#SECTION00026000000000000000">Computational function (type 4)</A>
<LI><A NAME="tex2html11"
  HREF="CMSCOPE.htm#SECTION00027000000000000000">Authors</A>
</UL></UL>
<!--End of Table of Contents-->
<H3><font color="blue"><A NAME="SECTION00021000000000000000">
Palette</A>
</font></H3>

<UL>
<LI><A NAME="tex2html3"
  HREF="Sinks_pal.htm">Sinks - Sinks palette</A>
</LI>
</UL>
<H3><font color="blue"><A NAME="SECTION00022000000000000000">
Description</A>
</font></H3>

<P>
When you start a simulation, Scicos open Scope windows.  The Scope
block displays its input with respect to simulation time. The Scope
block can have multiple axes (one per port); all axes have a common
time range with independent y-axes. The Scope allows you to adjust the
amount of time and the range of input values displayed. 

<H3><font color="blue"><A NAME="SECTION00023000000000000000">
Dialog box</A>
</font></H3>

<DIV ALIGN="CENTER">
<IMG
 WIDTH="477" HEIGHT="306" BORDER="0"
 SRC="../../images/scicos/CMSCOPE_gui.gif"
 ALT="\begin{figure}\begin{center}
\epsfig{file=CMSCOPE_gui.eps,width=300pt}
\end{center}\end{figure}">
</DIV>

<P>

<UL>
<LI>Input ports sizes: It allows multiple  input ports. 
</LI>
<LI>Drawing colors : a vector of integers. The i-th element is the color
  number (<SPAN CLASS="MATH"><IMG
 WIDTH="32" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="../../images/scicos/CMSCOPE_img3_eng.gif"
 ALT="$ &gt;0$"></SPAN>
) or dash type (<SPAN CLASS="MATH"><IMG
 WIDTH="32" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="../../images/scicos/CMSCOPE_img4_eng.gif"
 ALT="$ &lt;0$"></SPAN>
) used to draw the evolution of the i-th
  input port signal. See  <B>plot2d</B>  for color (dash type) definitions. 
</LI>
<LI>Output window number: The number of graphic window used for 
  the display. It is often good to use high values to avoid conflict 
  with palettes and Super Block windows. If default value is used <B>  (1)</B>, Scicos define the output window number.  
</LI>
<LI>Output window position: a 2 vector specifying the coordinates
  of the upper left corner of the graphic window. Answer [] for 
  default window position.    
</LI>
<LI>Output window sizes:a 2 vector specifying the coordinates of
  the upper left corner of the graphic window. Answer [] for default 
  window position.   
</LI>
<LI>Ymin vector: Minimum  values of the input; used to set up the Y-axis
  of the plot in the graphics window. 
</LI>
<LI>Ymax vector: Maximum values of the input; used to set up the Y-axis
  of the plot in the graphics window.  
</LI>
<LI>Refresh period:  Maximum value on the X-axis (time). The plot
  is redrawn when time reaches a multiple of this value.
</LI>
<LI>Buffer size: To improve efficiency it is possible to buffer the
  input data. The drawing is only done after each  <B>Buffer size</B>
  call to the block.   
</LI>
<LI>Accept herited events 0/1:if 0  <B>CSCOPE_f</B>  draws a new point
  only when an event occurs on its event input port. if 1  <B>CSCOPE_f</B>
  draws a new point when an event occurs on its event input port and
  when it's regular input changes due to an event on an other upstrem
  block (herited events).   
</LI>
<LI>Name of Scope : Name/label of the block.
</LI>
</UL>

<H3><font color="blue"><A NAME="SECTION00024000000000000000">
Default properties</A>
</font></H3>

<UL>
<LI><b>always active:</b> no
</LI>
<LI><b>direct-feedthrough:</b> yes
</LI>
<LI><b>zero-crossing:</b> no
</LI>
<LI><b>mode:</b> no
</LI>
<LI><b>number/sizes of inputs:</b> 2 / 1  1
</LI>
<LI><b>number/sizes of outputs:</b> 0 / 
</LI>
<LI><b>number/sizes of activation inputs:</b> 1 / 1
</LI>
<LI><b>number/sizes of activation outputs:</b> 0 / 
</LI>
<LI><b>continuous-time state:</b> no
</LI>
<LI><b>discrete-time state:</b> no
</LI>
<LI><b>name of computational function:</b> <EM>cmscope</EM>
</LI>
</UL>

<H3><font color="blue"><A NAME="SECTION00025000000000000000">
Interfacing function</A>
</font></H3>
<TT>CMSCOPE.sci</TT>

<H3><font color="blue"><A NAME="SECTION00026000000000000000">
Computational function (type 4)</A>
</font></H3>
 <SMALL CLASS="TINY">  </SMALL>
<BR>
<PRE  CLASS="verbatim">/**
   \file cmscope.c
   \author Benoit Bayol
   \version 1.0
   \date September 2006 - January 2007
   \brief CMSCOPE is a typical scope which links its input to the simulation time
   \see CMSCOPE.sci in macros/scicos_blocks/Sinks/
*/

#include "scoMemoryScope.h"
#include "scoWindowScope.h"
#include "scoMisc.h"
#include "scoGetProperty.h"
#include "scoSetProperty.h"
#include "scicos_block4.h"

/** \fn cmscope_draw(scicos_block * block, ScopeMemory ** pScopeMemory, int firstdraw)
    \brief Function to draw or redraw the window
*/
void cmscope_draw(scicos_block * block, ScopeMemory ** pScopeMemory, int firstdraw)
{
  int i; //As usual
  int * ipar; //Integer Parameters
  int * colors; //Colors
  int win; //Windows ID : To give a name to the window
  int buffer_size; //Buffer Size
  int win_pos[2]; //Position of the Window
  int win_dim[2]; //Dimension of the Window
  int inherited_events;
  int nipar;
  int dimension = 2;
  double * rpar; //Reals parameters
  double dt; //Time++
  double * period; //Refresh Period of the scope is a vector here
  double * ymin,* ymax; //Ymin and Ymax are vectors here
  double * xmin, *xmax;
  int nbr_period;
  int * number_of_curves_by_subwin;
  int number_of_subwin;
  int nbr_total_curves;


  rpar = GetRparPtrs(block);
  ipar = GetIparPtrs(block);
  nipar = GetNipar(block);
  win = ipar[0];
  number_of_subwin = ipar[1];
  buffer_size = ipar[2];
  win_pos[0] = ipar[3];
  win_pos[1] = ipar[4];
  win_dim[0] = ipar[5];
  win_dim[1] = ipar[6];
  nbr_total_curves = 0;
  //Don't forget malloc for 'type *'
  number_of_curves_by_subwin = (int*)scicos_malloc(number_of_subwin*sizeof(int));
  for (i = 7; i &lt; 7+number_of_subwin ; i++)
    {
      number_of_curves_by_subwin[i-7] = ipar[i];
      nbr_total_curves = nbr_total_curves + ipar[i];
    }
  colors = (int*)scicos_malloc(nbr_total_curves*sizeof(int));
  for(i = 0; i &lt; nbr_total_curves ; i++)
    {
      colors[i] = ipar[i+7+number_of_subwin];
    }
  inherited_events = ipar[7+number_of_subwin+number_of_subwin];

  dt = rpar[0];

  nbr_period = 0;
  period = (double*)scicos_malloc(number_of_subwin*sizeof(double));
  for (i = 0 ; i &lt; number_of_subwin ; i++)
    {
      period[i] = rpar[i+1];
      nbr_period++; 
    }
  ymin = (double*)scicos_malloc(number_of_subwin*sizeof(double));
  ymax = (double*)scicos_malloc(number_of_subwin*sizeof(double));
  for (i = 0 ; i &lt; number_of_subwin ; i++)
    {
      ymin[i] = rpar[2*i+nbr_period+1];
      ymax[i] = rpar[2*i+nbr_period+2];
    }

  /*Allocating memory*/
  if(firstdraw == 1)
    {

      scoInitScopeMemory(block-&gt;work,pScopeMemory, number_of_subwin, number_of_curves_by_subwin);
      for(i = 0 ; i &lt; number_of_subwin ; i++)
	{
	  scoSetLongDrawSize(*pScopeMemory, i, 5000);
	  scoSetShortDrawSize(*pScopeMemory,i,buffer_size);
	  scoSetPeriod(*pScopeMemory,i,period[i]);
	}    
    }

  /* Xmin and Xmax are calculated here because we need a variable which is only existing in the pScopeMemory. pScopeMemory is allocated just few lines before. Indeed in this TimeAmplitudeScope Xmin and Xmax have to change often. To be sure to redraw in the correct scale we have to calculate xmin and xmax thanks to the period_counter. If the window haven't to be redraw (recreate)  it wouldn't be necessary*/
  xmin = (double*)scicos_malloc(number_of_subwin*sizeof(double));
  xmax = (double*)scicos_malloc(number_of_subwin*sizeof(double));
  for (i = 0 ; i &lt; number_of_subwin ; i++)
    {
      xmin[i] = period[i]*(scoGetPeriodCounter(*pScopeMemory,i));
      xmax[i] = period[i]*(scoGetPeriodCounter(*pScopeMemory,i)+1);
    }

  /*Creating the Scope*/
  scoInitOfWindow(*pScopeMemory, dimension, win, win_pos, win_dim, xmin, xmax, ymin, ymax, NULL, NULL);
  scoAddTitlesScope(*pScopeMemory,"t","y",NULL);

  /*Add a couple of polyline : one for the shortdraw and one for the longdraw*/
  /* 	scoAddPolylineLineStyle(*pScopeMemory,colors); */
  scoAddCoupleOfPolylines(*pScopeMemory,colors);
  scicos_free(number_of_curves_by_subwin);
  scicos_free(colors);
  scicos_free(period);
  scicos_free(ymin);
  scicos_free(ymax);
  scicos_free(xmin);
  scicos_free(xmax);
}

/** \fn void cmscope(scicos_block * block, int flag)
    \brief the computational function
    \param block A pointer to a scicos_block
    \param flag An integer which indicates the state of the block (init, update, ending)
*/
void cmscope(scicos_block * block, int flag)
{
  /* Declarations */
  ScopeMemory * pScopeMemory;
  int NbrPtsShort;
  double * u1;
  double t; //get_scicos_time()
  scoGraphicalObject pShortDraw;
  int i,j;


  /* Initializations and Allocations*/
  //Allocations are done here because there are dependent of some values presents below
 
  /* State Machine Control */
  switch(flag)
    {
    case Initialization:
      {
	cmscope_draw(block,&amp;pScopeMemory,1);
	break; //Break of the switch condition don t forget it
      } //End of Initialization
  
    case StateUpdate:
      {
	/* Charging Elements */
	t = get_scicos_time();
	/*Retreiving Scope in the block-&gt;work*/
	scoRetrieveScopeMemory(block-&gt;work,&amp;pScopeMemory);
	/* If window has been destroyed we recreate it */
	if(scoGetPointerScopeWindow(pScopeMemory) == NULL)
	  {
	    cmscope_draw(block,&amp;pScopeMemory,0);
	  }

	scoRefreshDataBoundsX(pScopeMemory,t);

	//Here we are calculating the points in the polylines
	for (i = 0 ; i &lt; scoGetNumberOfSubwin(pScopeMemory) ; i++)
	  {
	    u1 = GetRealInPortPtrs(block,i+1);
	    pShortDraw = scoGetPointerShortDraw(pScopeMemory,i,0);
	    NbrPtsShort = pPOLYLINE_FEATURE(pShortDraw)-&gt;n1;
	    for (j = 0; j &lt; scoGetNumberOfCurvesBySubwin(pScopeMemory,i) ; j++)
	      {
		pShortDraw = scoGetPointerShortDraw(pScopeMemory,i,j);
		pPOLYLINE_FEATURE(pShortDraw)-&gt;pvx[NbrPtsShort] = t;
		pPOLYLINE_FEATURE(pShortDraw)-&gt;pvy[NbrPtsShort] = u1[j];
		pPOLYLINE_FEATURE(pShortDraw)-&gt;n1++;
	      }
	  }

	scoDrawScopeAmplitudeTimeStyle(pScopeMemory, t);

	break; 
	//Break of the switch don t forget it !
      }//End of stateupdate
      
      //This case is activated when the simulation is done or when we close scicos
    case Ending:
      {
	scoRetrieveScopeMemory(block-&gt;work, &amp;pScopeMemory);
	scoDelCoupleOfPolylines(pScopeMemory);
	scoFreeScopeMemory(block-&gt;work, &amp;pScopeMemory);
	break;
      }
    }
}
</PRE>

<H3><font color="blue"><A NAME="SECTION00027000000000000000">
Authors</A>
</font></H3>
<b>Ramine Nikoukhah</b> INRIA

<BR>




</BODY>
</HTML>
