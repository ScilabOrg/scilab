<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<!--Converted with LaTeX2HTML 2002-2-1 (1.71)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>minmax_routcos</TITLE>
<META NAME="description" CONTENT="minmax_routcos">
<META NAME="keywords" CONTENT="minmax_routcos">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="minmax_routcos.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<P>
<DIV ALIGN="CENTER">
Computational routine
<BR><A NAME="tex2html1"
  HREF="./minmax_routcos.htm">eng</A>

</DIV>
<H2><A NAME="SECTION00010000000000000000"></A><A NAME="minmax_routcos"></A>
<BR>
minmax
</H2>

<H3><font color="blue"><A NAME="SECTION00011000000000000000">
File content</A>
</font></H3>
<BR>
<PRE  CLASS="verbatim">#include &lt;math.h&gt;
#include "scicos_block.h"

#ifndef min
#define min(a,b) ((a) &lt;= (b) ? (a) : (b))
#endif

#ifndef max
#define max(a,b) ((a) &gt;= (b) ? (a) : (b))
#endif

void minmax(scicos_block *block,int flag)
{ /*ipar[0]=1 -&gt; min,  ipar[0]=2 -&gt; max */
  
  int i,phase;
  double maxmin;
  phase=get_phase_simulation();
  if (flag == 1) {
    if(block-&gt;nin==1){
      if((block-&gt;ng==0)||(phase==1)){
	maxmin=block-&gt;inptr[0][0];
	for (i=1;i&lt;block-&gt;insz[0];++i){
	  if(block-&gt;ipar[0]==1){
	    if(block-&gt;inptr[0][i]&lt;maxmin)  maxmin=block-&gt;inptr[0][i];
	  } else {
	    if(block-&gt;inptr[0][i]&gt;maxmin)  maxmin=block-&gt;inptr[0][i];
	  }
	}
      }else{
	maxmin=block-&gt;inptr[0][block-&gt;mode[0]-1];
      }
      block-&gt;outptr[0][0]=maxmin;

    }else if (block-&gt;nin==2){
      for (i=0;i&lt;block-&gt;insz[0];++i){
	if((block-&gt;ng==0)||(phase==1)){
	  if(block-&gt;ipar[0]==1){
	    block-&gt;outptr[0][i]=min(block-&gt;inptr[0][i],block-&gt;inptr[1][i]);
	  } else {
	    block-&gt;outptr[0][i]=max(block-&gt;inptr[0][i],block-&gt;inptr[1][i]);
	  }
	}else{
	  block-&gt;outptr[0][i]=block-&gt;inptr[block-&gt;mode[0]-1][i];
	}
      }
    }
  } else if(flag == 9){
    if(block-&gt;nin==1){
      if(block-&gt;nin==1){
	if (phase==2){
	  for (i=0;i&lt;block-&gt;insz[0];++i){
	    if(i!=block-&gt;mode[0]-1){
	      block-&gt;g[i]=block-&gt;inptr[0][i]-block-&gt;inptr[0][block-&gt;mode[0]-1];
	    }else{
	      block-&gt;g[i]=1.0;
	    }
	  }
	} else if (phase==1){
	  maxmin=block-&gt;inptr[0][0];
	  for (i=1;i&lt;block-&gt;insz[0];++i){
	    block-&gt;mode[0]=1;
	    if(block-&gt;ipar[0]==1){
	      if(block-&gt;inptr[0][i]&lt;maxmin) {
		maxmin=block-&gt;inptr[0][i];
		block-&gt;mode[0]=i+1;
	      }
	    } else {
	      if(block-&gt;inptr[0][i]&gt;maxmin) {
		maxmin=block-&gt;inptr[0][i];
		block-&gt;mode[0]=i+1;
	      }
	    }
	  }
	}
      }
    }else if(block-&gt;nin==2){
      for (i=0;i&lt;block-&gt;insz[0];++i){
	block-&gt;g[i]=block-&gt;inptr[0][i]-block-&gt;inptr[1][i];
	if(phase==1){
	  if(block-&gt;ipar[0]==1){
	    if(block-&gt;g[i]&gt;0) {
	      block-&gt;mode[i]=2;
	    }else{
	      block-&gt;mode[i]=1;
	    }
	  }else{
	    if(block-&gt;g[i]&lt;0) {
	      block-&gt;mode[i]=2;
	    }else{
	      block-&gt;mode[i]=1;
	    }
	  }
	}
      }
    }
  }
}
</PRE>

<BR>




</BODY>
</HTML>
