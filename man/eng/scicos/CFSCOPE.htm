<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<!--Converted with LaTeX2HTML 2002-2-1 (1.71)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>CFSCOPE</TITLE>
<META NAME="description" CONTENT="CFSCOPE">
<META NAME="keywords" CONTENT="CFSCOPE">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="CFSCOPE.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<P>
<DIV ALIGN="CENTER">
Scicos Block
<BR><A NAME="tex2html1"
  HREF="../../fr/scicos/CFSCOPE.htm">fr</A> - <A NAME="tex2html2"
  HREF="./CFSCOPE.htm">eng</A>

</DIV>
<H2><A NAME="SECTION00010000000000000000"></A><A NAME="CFSCOPE"></A>
<BR>
CFSCOPE title
</H2>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfig{file=CFSCOPE.eps,width=90.00pt}$
 -->
<IMG
 WIDTH="143" HEIGHT="152" ALIGN="BOTTOM" BORDER="0"
 SRC="../../images/scicos/CFSCOPE_blk.gif"
 ALT="\epsfig{file=CFSCOPE.eps,width=90.00pt}">

</DIV>
<BR>

<H3><font color="blue"><A NAME="SECTION00020000000000000000">
Contents</A>
</font></H3>
<!--Table of Contents-->

<UL CLASS="TofC">
<LI><A NAME="tex2html4"
  HREF="CFSCOPE.htm#SECTION00010000000000000000">CFSCOPE title</A>
<UL>
<LI><A NAME="tex2html5"
  HREF="CFSCOPE.htm#SECTION00021000000000000000">Palette</A>
<LI><A NAME="tex2html6"
  HREF="CFSCOPE.htm#SECTION00022000000000000000">Description</A>
<LI><A NAME="tex2html7"
  HREF="CFSCOPE.htm#SECTION00023000000000000000">Dialog box</A>
<LI><A NAME="tex2html8"
  HREF="CFSCOPE.htm#SECTION00024000000000000000">Default properties</A>
<LI><A NAME="tex2html9"
  HREF="CFSCOPE.htm#SECTION00025000000000000000">Interfacing function</A>
<LI><A NAME="tex2html10"
  HREF="CFSCOPE.htm#SECTION00026000000000000000">Computational function (type 4)</A>
<LI><A NAME="tex2html11"
  HREF="CFSCOPE.htm#SECTION00027000000000000000">Authors</A>
</UL></UL>
<!--End of Table of Contents-->
<H3><font color="blue"><A NAME="SECTION00021000000000000000">
Palette</A>
</font></H3>

<UL>
<LI><A NAME="tex2html3"
  HREF="Sinks_pal.htm">Sinks - Sinks palette</A>
</LI>
</UL>
<H3><font color="blue"><A NAME="SECTION00022000000000000000">
Description</A>
</font></H3>

<P>
Add here a paragraph of the function description  
<BR>
<H3><font color="blue"><A NAME="SECTION00023000000000000000">
Dialog box</A>
</font></H3>

<DIV ALIGN="CENTER">
<IMG
 WIDTH="477" HEIGHT="261" BORDER="0"
 SRC="../../images/scicos/CFSCOPE_gui.gif"
 ALT="\begin{figure}\begin{center}
\epsfig{file=CFSCOPE_gui.eps,width=300pt}
\end{center}\end{figure}">
</DIV>

<P>

<UL>
<LI><b>Color (<SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="../../images/scicos/CFSCOPE_img3_eng.gif"
 ALT="$ &gt;$"></SPAN>
0) or mark (<SPAN CLASS="MATH"><IMG
 WIDTH="18" HEIGHT="31" ALIGN="MIDDLE" BORDER="0"
 SRC="../../images/scicos/CFSCOPE_img4_eng.gif"
 ALT="$ &lt;$"></SPAN>
0) vector (8 entries)</b>
<BR>
The parameter description 1.
<BR>
Properties : Type 'vec' of size 8.
</LI>
<LI><b>Output window number (-1 for automatic)</b>
<BR>
The parameter description 2.
<BR>
Properties : Type 'vec' of size 1.
</LI>
<LI><b>Output window position</b>
<BR>
The parameter description 3.
<BR>
Properties : Type 'vec' of size -1.
</LI>
<LI><b>Output window sizes</b>
<BR>
The parameter description 4.
<BR>
Properties : Type 'vec' of size -1.
</LI>
<LI><b>Ymin</b>
<BR>
The parameter description 5.
<BR>
Properties : Type 'vec' of size 1.
</LI>
<LI><b>Ymax</b>
<BR>
The parameter description 6.
<BR>
Properties : Type 'vec' of size 1.
</LI>
<LI><b>Refresh period</b>
<BR>
The parameter description 7.
<BR>
Properties : Type 'vec' of size 1.
</LI>
<LI><b>Buffer size</b>
<BR>
The parameter description 8.
<BR>
Properties : Type 'vec' of size 1.
</LI>
<LI><b>Links to view</b>
<BR>
The parameter description 9.
<BR>
Properties : Type 'vec' of size -1.
</LI>
</UL>

<H3><font color="blue"><A NAME="SECTION00024000000000000000">
Default properties</A>
</font></H3>

<UL>
<LI><b>always active:</b> no
</LI>
<LI><b>direct-feedthrough:</b> yes
</LI>
<LI><b>zero-crossing:</b> no
</LI>
<LI><b>mode:</b> no
</LI>
<LI><b>number/sizes of inputs:</b> 0 / 
</LI>
<LI><b>number/sizes of outputs:</b> 0 / 
</LI>
<LI><b>number/sizes of activation inputs:</b> 1 / 1
</LI>
<LI><b>number/sizes of activation outputs:</b> 0 / 
</LI>
<LI><b>continuous-time state:</b> no
</LI>
<LI><b>discrete-time state:</b> no
</LI>
<LI><b>name of computational function:</b> <EM>cfscope</EM>
</LI>
</UL>

<H3><font color="blue"><A NAME="SECTION00025000000000000000">
Interfacing function</A>
</font></H3>
<TT>CFSCOPE.sci</TT>

<H3><font color="blue"><A NAME="SECTION00026000000000000000">
Computational function (type 4)</A>
</font></H3>
 <SMALL CLASS="TINY">  </SMALL>
<BR>
<PRE  CLASS="verbatim">/**
   \file cfscope.c
   \author Benoit Bayol
   \version 1.0
   \date September 2006 - January 2007
   \brief CFSCOPE This scope has no input port because it displays the values on the designated link
   \see CFSCOPE.sci in macros/scicos_blocks/Sinks/
*/

#include "scoMemoryScope.h"
#include "scoWindowScope.h"
#include "scoMisc.h"
#include "scoGetProperty.h"
#include "scoSetProperty.h"
#include "scicos_block4.h"

/** \fn cfscope_draw(scicos_block * block, ScopeMemory ** pScopeMemory, int firstdraw)
    \brief Function to draw or redraw the window
*/
void cfscope_draw(scicos_block * block, ScopeMemory ** pScopeMemory, int firstdraw)
{

  double *rpar;
  int *ipar, nipar;   

  double period;
  int i;
  int dimension;
  double ymin, ymax, xmin, xmax;
  int buffer_size;
  int win_pos[2];
  int win_dim[2];
  int win;
  int number_of_subwin;
  int number_of_curves_by_subwin;
  double dt;
  int nbr_of_curves;
  int color_flag;
  int * colors;

  rpar = GetRparPtrs(block);
  ipar = GetIparPtrs(block);
  nipar = GetNipar(block);
  win = ipar[0];
  color_flag = ipar[1];
  buffer_size = ipar[2];
  dt = rpar[0];
  period = rpar[3];
  ymin  = rpar[1];
  ymax = rpar[2];

  dimension = 2;
  win_pos[0] = ipar[11];
  win_pos[1] = ipar[12];
  win_dim[0] = ipar[13];
  win_dim[1] = ipar[14];
  number_of_curves_by_subwin = ipar[15]; //Here is not really what we will see i.e. if you give [2:9] there is 8 curves but in the kalman filter demo you will only see 6 curves (and 8 in the figure handle description) because only 6 are really existing.
  nbr_of_curves = number_of_curves_by_subwin;
  number_of_subwin = 1;

  colors=(int*)scicos_malloc(8*sizeof(int));
  for( i = 3 ; i &lt; 10 ; i++)
    {
      colors[i-3] = ipar[i];
    }

  /*Allocating memory*/
  if(firstdraw == 1)
    {
      scoInitScopeMemory(block-&gt;work,pScopeMemory, number_of_subwin, &amp;number_of_curves_by_subwin);
      /*Must be placed before adding polyline or other elements*/
      scoSetLongDrawSize(*pScopeMemory, 0, 5000);
      scoSetShortDrawSize(*pScopeMemory,0,buffer_size);
      scoSetPeriod(*pScopeMemory,0,period);
    }

  xmin = period*scoGetPeriodCounter(*pScopeMemory,0);
  xmax = period*(scoGetPeriodCounter(*pScopeMemory,0)+1);

  /*Creating the Scope*/
  scoInitOfWindow(*pScopeMemory, dimension, win, win_pos, win_dim, &amp;xmin, &amp;xmax, &amp;ymin, &amp;ymax, NULL, NULL);
  scoAddTitlesScope(*pScopeMemory,"t","y",NULL);

  /*Add a couple of polyline : one for the shortdraw and one for the longdraw*/
  scoAddCoupleOfPolylines(*pScopeMemory,colors);
  scicos_free(colors);
}

extern int C2F(getouttb)();
/** \fn void cfscope(scicos_block * block,int flag)
    \brief the computational function
    \param block A pointer to a scicos_block
    \param flag An integer which indicates the state of the block (init, update, ending)
*/
void cfscope(scicos_block * block,int flag)
{
  ScopeMemory * pScopeMemory;
  scoGraphicalObject pShortDraw;
  double * sortie;
  int  *  index_of_view;
  double t;
  int nbr_of_curves;
  int *ipar;
  int i,j;
  int NbrPtsShort;

  switch(flag)
    {
    case Initialization:
      {
	/*Retrieving Parameters*/
	cfscope_draw(block,&amp;pScopeMemory,1);
	break;
      }
    case StateUpdate:
      {	
	
	t = get_scicos_time();
	/*Retreiving Scope in the block-&gt;work*/
	scoRetrieveScopeMemory(block-&gt;work,&amp;pScopeMemory);

	/* If window has been destroyed we recreate it */
	if(scoGetPointerScopeWindow(pScopeMemory) == NULL)
	  {
	    cfscope_draw(block,&amp;pScopeMemory,0);
	  }
	/*Maybe we are in the end of axes so we have to draw new ones */
	scoRefreshDataBoundsX(pScopeMemory,t);

	//Cannot be factorized depends of the scope
	nbr_of_curves = scoGetNumberOfCurvesBySubwin(pScopeMemory,0);

	ipar = GetIparPtrs(block);
	sortie = (double*)scicos_malloc(nbr_of_curves*sizeof(double));
	index_of_view =(int*)scicos_malloc(nbr_of_curves*sizeof(int));
	for(i = 16 ; i &lt; 16+nbr_of_curves ; i++)
	  {
	    index_of_view[i-16] = ipar[i];
	  }

	C2F(getouttb)(&amp;nbr_of_curves,index_of_view,sortie);
	for(i = 0; i &lt; scoGetNumberOfSubwin(pScopeMemory) ; i++)
	  {
	    for (j = 0; j &lt; nbr_of_curves ; j++)
	      {
		pShortDraw = scoGetPointerShortDraw(pScopeMemory,i,j);
		NbrPtsShort = pPOLYLINE_FEATURE(pShortDraw)-&gt;n1;
		pPOLYLINE_FEATURE(pShortDraw)-&gt;pvx[NbrPtsShort] = t;         // get time 
		pPOLYLINE_FEATURE(pShortDraw)-&gt;pvy[NbrPtsShort] = sortie[j]; // get value
		pPOLYLINE_FEATURE(pShortDraw)-&gt;n1++;
	      }
	  }
	//End of cannot
	/*Main drawing function*/
	scoDrawScopeAmplitudeTimeStyle(pScopeMemory, t);

	scicos_free(sortie);
	scicos_free(index_of_view);

	break;
      }
    case Ending:
      {
	scoRetrieveScopeMemory(block-&gt;work, &amp;pScopeMemory);
	scoDelCoupleOfPolylines(pScopeMemory);
	scoFreeScopeMemory(block-&gt;work, &amp;pScopeMemory);
	break;  
      }
    }
}
</PRE>

<H3><font color="blue"><A NAME="SECTION00027000000000000000">
Authors</A>
</font></H3>
<b>enter here the author name</b> Add here the author  references

<BR>




</BODY>
</HTML>
