<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<!--Converted with LaTeX2HTML 2002-2-1 (1.71)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>mat_pinv_routcos</TITLE>
<META NAME="description" CONTENT="mat_pinv_routcos">
<META NAME="keywords" CONTENT="mat_pinv_routcos">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="mat_pinv_routcos.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<P>
<DIV ALIGN="CENTER">
Computational routine
<BR><A NAME="tex2html1"
  HREF="./mat_pinv_routcos.htm">eng</A>

</DIV>
<H2><A NAME="SECTION00010000000000000000"></A><A NAME="mat_pinv_routcos"></A>
<BR>
mat_pinv
</H2>

<H3><font color="blue"><A NAME="SECTION00011000000000000000">
File content</A>
</font></H3>
<BR>
<PRE  CLASS="verbatim"># include "scicos_block4.h"
# include "../machine.h"
#include &lt;stdio.h&gt;
extern int C2F(dgesvd)();
extern int C2F(dlaset)();
extern int C2F(dlacpy)();
extern int C2F(dmmul)();

#if WIN32
#define NULL    0
#endif

#ifndef min
#define min(a,b) ((a) &lt;= (b) ? (a) : (b))
#endif

#ifndef max
#define max(a,b) ((a) &gt;= (b) ? (a) : (b))
#endif

typedef struct
{         double *l0;
	  double *LA;
 	  double *LC;
          double *LS;
          double *LSV;
          double *LSW;
          double *LU;
          double *LUT;
          double *LV;
          double *LVT;
          double *dwork;
} mat_pinv_struct ;
void mat_pinv(scicos_block *block,int flag)
{
 double *u;
 double *y;
 int nu,mu;
 int info;
 int i,j,ij,ji,ii,lwork;
 mat_pinv_struct *ptr;
 mu=GetInPortRows(block,1);
 nu=GetInPortCols(block,1);
 u=GetRealInPortPtrs(block,1);
 y=GetRealOutPortPtrs(block,1);
 lwork=max(3*min(mu,nu)+max(mu,nu),5*min(mu,nu)-4); 
             /*init : initialization*/
if (flag==4)
   {if((*(block-&gt;work)=(mat_pinv_struct*) scicos_malloc(sizeof(mat_pinv_struct)))==NULL)
	{set_block_error(-16);
	 return;}
    ptr=*(block-&gt;work);
    if((ptr-&gt;l0=(double*) scicos_malloc(sizeof(double)))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;LA=(double*) scicos_malloc(sizeof(double)*(mu*nu)))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;l0);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;LC=(double*) scicos_malloc(sizeof(double)*(nu*mu)))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;LA);
	 scicos_free(ptr-&gt;l0);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;LS=(double*) scicos_malloc(sizeof(double)*(nu*mu)))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;LC);
	 scicos_free(ptr-&gt;LA);
	 scicos_free(ptr-&gt;l0);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;LSV=(double*) scicos_malloc(sizeof(double)*(min(mu,nu))))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;LS);
	 scicos_free(ptr-&gt;LC);
	 scicos_free(ptr-&gt;LA);
	 scicos_free(ptr-&gt;l0);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;LSW=(double*) scicos_malloc(sizeof(double)*(min(mu,nu))))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;LSV);
	 scicos_free(ptr-&gt;LS);
	 scicos_free(ptr-&gt;LC);
	 scicos_free(ptr-&gt;LA);
	 scicos_free(ptr-&gt;l0);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;LU=(double*) scicos_malloc(sizeof(double)*(mu*mu)))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;LSW);
	 scicos_free(ptr-&gt;LSV);
	 scicos_free(ptr-&gt;LS);
	 scicos_free(ptr-&gt;LC);
	 scicos_free(ptr-&gt;LA);
	 scicos_free(ptr-&gt;l0);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;LUT=(double*) scicos_malloc(sizeof(double)*(mu*mu)))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;LU);
	 scicos_free(ptr-&gt;LSW);
	 scicos_free(ptr-&gt;LSV);
	 scicos_free(ptr-&gt;LS);
	 scicos_free(ptr-&gt;LC);
	 scicos_free(ptr-&gt;LA);
	 scicos_free(ptr-&gt;l0);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;LV=(double*) scicos_malloc(sizeof(double)*(nu*nu)))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;LUT);
	 scicos_free(ptr-&gt;LU);
	 scicos_free(ptr-&gt;LSW);
	 scicos_free(ptr-&gt;LSV);
	 scicos_free(ptr-&gt;LS);
	 scicos_free(ptr-&gt;LC);
	 scicos_free(ptr-&gt;LA);
	 scicos_free(ptr-&gt;l0);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;LVT=(double*) scicos_malloc(sizeof(double)*(nu*nu)))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;LV);
	 scicos_free(ptr-&gt;LUT);
	 scicos_free(ptr-&gt;LU);
	 scicos_free(ptr-&gt;LSW);
	 scicos_free(ptr-&gt;LSV);
	 scicos_free(ptr-&gt;LS);
	 scicos_free(ptr-&gt;LC);
	 scicos_free(ptr-&gt;LA);
	 scicos_free(ptr-&gt;l0);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;dwork=(double*) scicos_malloc(sizeof(double)*lwork))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;LVT);
	 scicos_free(ptr-&gt;LV);
	 scicos_free(ptr-&gt;LUT);
	 scicos_free(ptr-&gt;LU);
	 scicos_free(ptr-&gt;LSW);
	 scicos_free(ptr-&gt;LSV);
	 scicos_free(ptr-&gt;LS);
	 scicos_free(ptr-&gt;LC);
	 scicos_free(ptr-&gt;LA);
	 scicos_free(ptr-&gt;l0);
	 scicos_free(ptr);
	 return;}
   }

       /* Terminaison */
else if (flag==5)
   {ptr=*(block-&gt;work);
    if((ptr-&gt;dwork)!=0){
    	scicos_free(ptr-&gt;LC);
    	scicos_free(ptr-&gt;l0);
    	scicos_free(ptr-&gt;LA);
    	scicos_free(ptr-&gt;LSW);
    	scicos_free(ptr-&gt;LS);
    	scicos_free(ptr-&gt;LSV);
    	scicos_free(ptr-&gt;LU);
    	scicos_free(ptr-&gt;LUT);
    	scicos_free(ptr-&gt;LV);
    	scicos_free(ptr-&gt;LVT);
    	scicos_free(ptr-&gt;dwork);
    	scicos_free(ptr);
    	return;}
   }

else
   {
    ptr=*(block-&gt;work);
    for(i=0;i&lt;mu*nu;i++) y[i]=0;
    C2F(dlacpy)("F",&amp;mu,&amp;nu,u,&amp;mu,ptr-&gt;LA,&amp;mu);
    C2F(dgesvd)("A","A",&amp;mu,&amp;nu,ptr-&gt;LA,&amp;mu,ptr-&gt;LSV,ptr-&gt;LU,&amp;mu,ptr-&gt;LVT,&amp;nu,ptr-&gt;dwork,&amp;lwork,&amp;info);
     if (info !=0)
       {if (flag!=6)
   	{set_block_error(-7);
        return;}}
    for (i=0;i&lt;min(mu,nu);i++)  
	 {if (*(ptr-&gt;LSV+i)!=0)
	      {*(ptr-&gt;LSW+i)=1/(*(ptr-&gt;LSV+i));}
	 else 
	      {*(ptr-&gt;LSW+i)=0;}}
    *(ptr-&gt;l0)=0;
     C2F(dlaset)("F",&amp;nu,&amp;mu,ptr-&gt;l0,ptr-&gt;l0,ptr-&gt;LS,&amp;nu);
    for (i=0;i&lt;min(mu,nu);i++)
	{ii=i+i*nu;
	 *(ptr-&gt;LS+ii)=*(ptr-&gt;LSW+i);}
    for (j=0;j&lt;mu;j++)
	{for (i=j;i&lt;mu;i++)
		{ij=i+j*mu;
	 	 ji=j+i*mu;
		 *(ptr-&gt;LUT+ij)=*(ptr-&gt;LU+ji);
		 *(ptr-&gt;LUT+ji)=*(ptr-&gt;LU+ij);}
	}
    for (j=0;j&lt;nu;j++)
	{for (i=j;i&lt;nu;i++)
		{ij=i+j*nu;
	 	 ji=j+i*nu;
		 *(ptr-&gt;LV+ij)=*(ptr-&gt;LVT+ji);
		 *(ptr-&gt;LV+ji)=*(ptr-&gt;LVT+ij);}
	}
      C2F(dmmul)(ptr-&gt;LV,&amp;nu,ptr-&gt;LS,&amp;nu,ptr-&gt;LC,&amp;nu,&amp;nu,&amp;nu,&amp;mu);
      C2F(dmmul)(ptr-&gt;LC,&amp;nu,ptr-&gt;LUT,&amp;mu,y,&amp;nu,&amp;nu,&amp;mu,&amp;mu);
   }
}
</PRE>

<BR>




</BODY>
</HTML>
