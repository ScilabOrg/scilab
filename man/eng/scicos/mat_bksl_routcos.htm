<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<!--Converted with LaTeX2HTML 2002-2-1 (1.71)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>mat_bksl_routcos</TITLE>
<META NAME="description" CONTENT="mat_bksl_routcos">
<META NAME="keywords" CONTENT="mat_bksl_routcos">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="mat_bksl_routcos.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<P>
<DIV ALIGN="CENTER">
Computational routine
<BR><A NAME="tex2html1"
  HREF="./mat_bksl_routcos.htm">eng</A>

</DIV>
<H2><A NAME="SECTION00010000000000000000"></A><A NAME="mat_bksl_routcos"></A>
<BR>
mat_bksl
</H2>

<H3><font color="blue"><A NAME="SECTION00011000000000000000">
File content</A>
</font></H3>
<BR>
<PRE  CLASS="verbatim"># include "scicos_block4.h"
# include "../machine.h"
#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
extern int C2F(dgetrf)();
extern double C2F(dlamch)();
extern double C2F(dlange)();
extern int C2F(dlacpy)();
extern int C2F(dgecon)();
extern int C2F(dgetrs)();
extern int C2F(dgelsy1)();

#if WIN32
#define NULL    0
#endif

#ifndef min
#define min(a,b) ((a) &lt;= (b) ? (a) : (b))
#endif

#ifndef max
#define max(a,b) ((a) &gt;= (b) ? (a) : (b))
#endif

typedef struct
{         int *ipiv;
          int *rank;
          int *jpvt;
          int *iwork;
          double *dwork;
	  double *LAF;
	  double *LA;
	  double *LXB;
} mat_bksl_struct ;
void mat_bksl(scicos_block *block,int flag)
{
 double *u1;
 double *u2;
 double *y;
 int mu;
 int nu1;
 int nu2;
 int info;
 int i,l,lw,lu;
 mat_bksl_struct *ptr;
 double rcond, ANORM, EPS;

 mu =GetInPortRows(block,1);
 nu1 =GetInPortCols(block,1);
 nu2 =GetInPortCols(block,2);
 u1=GetRealInPortPtrs(block,1);
 u2=GetRealInPortPtrs(block,2);
 y=GetRealOutPortPtrs(block,1);
 l=max(mu,nu1);
 lu=max(4*nu1,min(mu,nu1)+3*nu1+1);
 lw=max(lu,2*min(mu,nu1)+nu2);
             /*init : initialization*/
if (flag==4)
   {if((*(block-&gt;work)=(mat_bksl_struct*) scicos_malloc(sizeof(mat_bksl_struct)))==NULL)
	{set_block_error(-16);
	 return;}
    ptr=*(block-&gt;work);
    if((ptr-&gt;ipiv=(int*) scicos_malloc(sizeof(int)*nu1))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;rank=(int*) scicos_malloc(sizeof(int)))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;ipiv);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;jpvt=(int*) scicos_malloc(sizeof(int)*nu1))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;rank);
	 scicos_free(ptr-&gt;ipiv);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;iwork=(int*) scicos_malloc(sizeof(int)*nu1))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;jpvt);
	 scicos_free(ptr-&gt;rank);
	 scicos_free(ptr-&gt;ipiv);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;dwork=(double*) scicos_malloc(sizeof(double)*lw))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;iwork);
	 scicos_free(ptr-&gt;jpvt);
	 scicos_free(ptr-&gt;rank);
	 scicos_free(ptr-&gt;ipiv);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;LAF=(double*) scicos_malloc(sizeof(double)*(mu*nu1)))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;dwork);
	 scicos_free(ptr-&gt;iwork);
	 scicos_free(ptr-&gt;jpvt);
	 scicos_free(ptr-&gt;rank);
	 scicos_free(ptr-&gt;ipiv);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;LA=(double*) scicos_malloc(sizeof(double)*(mu*nu1)))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;LAF);
	 scicos_free(ptr-&gt;dwork);
	 scicos_free(ptr-&gt;iwork);
	 scicos_free(ptr-&gt;jpvt);
	 scicos_free(ptr-&gt;rank);
	 scicos_free(ptr-&gt;ipiv);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;LXB=(double*) scicos_malloc(sizeof(double)*(l*nu2)))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;LA);
	 scicos_free(ptr-&gt;LAF);
	 scicos_free(ptr-&gt;dwork);
	 scicos_free(ptr-&gt;iwork);
	 scicos_free(ptr-&gt;jpvt);
	 scicos_free(ptr-&gt;rank);
	 scicos_free(ptr-&gt;ipiv);
	 scicos_free(ptr);
	 return;}
    
   }

       /* Terminaison */
else if (flag==5)
   {ptr=*(block-&gt;work);
    if(ptr-&gt;LXB!=NULL){
    	scicos_free(ptr-&gt;ipiv);
    	scicos_free(ptr-&gt;rank);
    	scicos_free(ptr-&gt;jpvt);
    	scicos_free(ptr-&gt;iwork);
    	scicos_free(ptr-&gt;LAF);
    	scicos_free(ptr-&gt;LA);
    	scicos_free(ptr-&gt;LXB);
    	scicos_free(ptr-&gt;dwork);
    	scicos_free(ptr);
    	return;}
   }

else
   {
    ptr=*(block-&gt;work);
    EPS=C2F(dlamch)("e",1L);
    ANORM=C2F(dlange)("1",&amp;mu,&amp;nu1,u1,&amp;mu,ptr-&gt;dwork);
    C2F(dlacpy)("F",&amp;mu,&amp;nu1,u1,&amp;mu,ptr-&gt;LA,&amp;mu);
    if (mu==nu1)
	{C2F(dlacpy)("F",&amp;mu,&amp;nu1,ptr-&gt;LA,&amp;mu,ptr-&gt;LAF,&amp;mu);
	 C2F(dgetrf)(&amp;nu1,&amp;nu1,ptr-&gt;LAF,&amp;nu1,ptr-&gt;ipiv,&amp;info);
	 rcond=0;
 	 if (info==0)
	    {C2F(dgecon)("1",&amp;nu1,ptr-&gt;LAF,&amp;nu1,&amp;ANORM,&amp;rcond,ptr-&gt;dwork,ptr-&gt;iwork,&amp;info);
	     if (rcond&gt;pow(EPS,0.5))
		{C2F(dlacpy)("F",&amp;nu1,&amp;nu2,u2,&amp;nu1,ptr-&gt;LXB,&amp;nu1);
		 C2F(dgetrs)("N",&amp;nu1,&amp;nu2,ptr-&gt;LAF,&amp;nu1,ptr-&gt;ipiv,ptr-&gt;LXB,&amp;nu1,&amp;info);
		 C2F(dlacpy)("F",&amp;nu1,&amp;nu2,ptr-&gt;LXB,&amp;nu1,y,&amp;nu1);
		 return;
		}
	    }
	}
    rcond=pow(EPS,0.5);
    C2F(dlacpy)("F",&amp;mu,&amp;nu2,u2,&amp;mu,ptr-&gt;LXB,&amp;l);
    for (i=0;i&lt;nu1;i++)    *(ptr-&gt;jpvt+i)=0;
    
    C2F(dgelsy1)(&amp;mu,&amp;nu1,&amp;nu2,ptr-&gt;LA,&amp;mu,ptr-&gt;LXB,&amp;l,ptr-&gt;jpvt,&amp;rcond,ptr-&gt;rank,ptr-&gt;dwork,&amp;lw,&amp;info);
    if (info!=0)
	{if (flag!=6)
	    {set_block_error(-7);
             return;
	    }
	}
    C2F(dlacpy)("F",&amp;nu1,&amp;nu2,ptr-&gt;LXB,&amp;l,y,&amp;nu1);
    }
}
</PRE>

<BR>




</BODY>
</HTML>
