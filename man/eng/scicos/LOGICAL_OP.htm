<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<!--Converted with LaTeX2HTML 2002-2-1 (1.71)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>LOGICAL_OP</TITLE>
<META NAME="description" CONTENT="LOGICAL_OP">
<META NAME="keywords" CONTENT="LOGICAL_OP">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="LOGICAL_OP.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<P>
<DIV ALIGN="CENTER">
Scicos Block
<BR><A NAME="tex2html1"
  HREF="../../fr/scicos/LOGICAL_OP.htm">fr</A> - <A NAME="tex2html2"
  HREF="./LOGICAL_OP.htm">eng</A>

</DIV>
<H2><A NAME="SECTION00010000000000000000"></A><A NAME="LOGICAL_OP"></A>
<BR>
Logical operation
</H2>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfig{file=LOGICAL_OP.eps,width=90.00pt}$
 -->
<IMG
 WIDTH="143" HEIGHT="122" ALIGN="BOTTOM" BORDER="0"
 SRC="../../images/scicos/LOGICAL_OP_blk.gif"
 ALT="\epsfig{file=LOGICAL_OP.eps,width=90.00pt}">

</DIV>
<BR>

<H3><font color="blue"><A NAME="SECTION00020000000000000000">
Contents</A>
</font></H3>
<!--Table of Contents-->

<UL CLASS="TofC">
<LI><A NAME="tex2html4"
  HREF="LOGICAL_OP.htm#SECTION00010000000000000000">Logical operation</A>
<UL>
<LI><A NAME="tex2html5"
  HREF="LOGICAL_OP.htm#SECTION00021000000000000000">Palette</A>
<LI><A NAME="tex2html6"
  HREF="LOGICAL_OP.htm#SECTION00022000000000000000">Description</A>
<LI><A NAME="tex2html7"
  HREF="LOGICAL_OP.htm#SECTION00023000000000000000">Dialog box</A>
<LI><A NAME="tex2html8"
  HREF="LOGICAL_OP.htm#SECTION00024000000000000000">Default properties</A>
<LI><A NAME="tex2html9"
  HREF="LOGICAL_OP.htm#SECTION00025000000000000000">Interfacing function</A>
<LI><A NAME="tex2html10"
  HREF="LOGICAL_OP.htm#SECTION00026000000000000000">Computational function (type 4)</A>
<LI><A NAME="tex2html11"
  HREF="LOGICAL_OP.htm#SECTION00027000000000000000">Authors</A>
</UL></UL>
<!--End of Table of Contents-->
<H3><font color="blue"><A NAME="SECTION00021000000000000000">
Palette</A>
</font></H3>

<UL>
<LI><A NAME="tex2html3"
  HREF="Others_pal.htm">Others - Others palette</A>
</LI>
</UL>
<H3><font color="blue"><A NAME="SECTION00022000000000000000">
Description</A>
</font></H3>

<P>
The Logical Operator block performs the specified logical operation on
its inputs. An input value is TRUE (1) if it is nonzero and FALSE (0)
if it is zero. 

<H3><font color="blue"><A NAME="SECTION00023000000000000000">
Dialog box</A>
</font></H3>

<DIV ALIGN="CENTER">
<IMG
 WIDTH="477" HEIGHT="80" BORDER="0"
 SRC="../../images/scicos/LOGICAL_OP_gui.gif"
 ALT="\begin{figure}\begin{center}
\epsfig{file=LOGICAL_OP_gui.eps,width=300pt}
\end{center}\end{figure}">
</DIV>

<P>

<UL>
<LI>number of inputs: The number of block inputs. The value must
  be appropriate for the selected operator. 
</LI>
<LI>Operator: AND : The logical operator to be applied to the
  block inputs. Valid choices are the operators from the list. 
</LI>
</UL>

<H3><font color="blue"><A NAME="SECTION00024000000000000000">
Default properties</A>
</font></H3>

<UL>
<LI><b>always active:</b> no
</LI>
<LI><b>direct-feedthrough:</b> yes
</LI>
<LI><b>zero-crossing:</b> no
</LI>
<LI><b>mode:</b> no
</LI>
<LI><b>number/sizes of inputs:</b> 2 / -1  -1
</LI>
<LI><b>number/sizes of outputs:</b> 1 / -1
</LI>
<LI><b>number/sizes of activation inputs:</b> 0 / 
</LI>
<LI><b>number/sizes of activation outputs:</b> 0 / 
</LI>
<LI><b>continuous-time state:</b> no
</LI>
<LI><b>discrete-time state:</b> no
</LI>
<LI><b>name of computational function:</b> <EM>logicalop</EM>
</LI>
</UL>

<H3><font color="blue"><A NAME="SECTION00025000000000000000">
Interfacing function</A>
</font></H3>
<TT>LOGICAL_OP.sci</TT>

<H3><font color="blue"><A NAME="SECTION00026000000000000000">
Computational function (type 4)</A>
</font></H3>
 <SMALL CLASS="TINY">  </SMALL>
<BR>
<PRE  CLASS="verbatim">#include "scicos_block.h"
#include &lt;math.h&gt;

void logicalop(scicos_block *block,int flag)
{
  int i,j,k,l;
  i=block-&gt;ipar[0];
  switch (i)
    {
    case 0:
      if (block-&gt;nin==1)
	{
	  block-&gt;outptr[0][0]=1.0;
	  for (j=0;j&lt;block-&gt;insz[0];j++) {
	    if(block-&gt;inptr[0][j]&lt;=0)
	      {
		block-&gt;outptr[0][0]=0.0;
		break;
	      }
	  }
	}
      else {
	for (j=0;j&lt;block-&gt;insz[0];j++) {
	  block-&gt;outptr[0][j]=1.0;
	  for (k=0;k&lt;block-&gt;nin;k++) {
	    if(block-&gt;inptr[k][j]&lt;=0) {
	      block-&gt;outptr[0][j]=0.0;
	      break;
	    }
	  }
	}
      }
      break;
      
    case 1:
      if (block-&gt;nin==1)
	{
	  block-&gt;outptr[0][0]=0.0;
	  for (j=0;j&lt;block-&gt;insz[0];j++) {
	    if(block-&gt;inptr[0][j]&gt;0) {
	      block-&gt;outptr[0][0]=1.0;
	      break;
	    }
	  }
	}
      else {
	for (j=0;j&lt;block-&gt;insz[0];j++) {
	  block-&gt;outptr[0][j]=0.0;
	  for (k=0;k&lt;block-&gt;nin;k++) {
	    if(block-&gt;inptr[k][j]&gt;0) {
	      block-&gt;outptr[0][j]=1.0;
	      break;
	    }
	  }
	}
      }
      break;

    case 2:
      if (block-&gt;nin==1)
	{
	  block-&gt;outptr[0][0]=0.0;
	  for (j=0;j&lt;block-&gt;insz[0];j++) {
	    if(block-&gt;inptr[0][j]&lt;=0)
	      {
		block-&gt;outptr[0][0]=1.0;
		break;
	      }
	  }
	}
      else {
	for (j=0;j&lt;block-&gt;insz[0];j++) {
	  block-&gt;outptr[0][j]=0.0;
	  for (k=0;k&lt;block-&gt;nin;k++) {
	    if(block-&gt;inptr[k][j]&lt;=0) {
	      block-&gt;outptr[0][j]=1.0;
	      break;
	    }
	  }
	}
      }
      break;

    case 3:
      if (block-&gt;nin==1)
	{
	  block-&gt;outptr[0][0]=1.0;
	  for (j=0;j&lt;block-&gt;insz[0];j++) {
	    if(block-&gt;inptr[0][j]&gt;0) {
	      block-&gt;outptr[0][0]=0.0;
	      break;
	    }
	  }
	}
      else {
	for (j=0;j&lt;block-&gt;insz[0];j++) {
	  block-&gt;outptr[0][j]=1.0;
	  for (k=0;k&lt;block-&gt;nin;k++) {
	    if(block-&gt;inptr[k][j]&gt;0) {
	      block-&gt;outptr[0][j]=0.0;
	      break;
	    }
	  }
	}
      }
      break;

    case 4:
      if (block-&gt;nin==1)
	{
	  l=0;
	  for (j=0;j&lt;block-&gt;insz[0];j++) {
	    if(block-&gt;inptr[0][j]&gt;0) {
	      l=(l+1)%2;
	    }
	  }
	  block-&gt;outptr[0][0]=(double) l;
	}
      else {
	for (j=0;j&lt;block-&gt;insz[0];j++) {
	  l=0;
	  for (k=0;k&lt;block-&gt;nin;k++) {
	    if(block-&gt;inptr[k][j]&gt;0) {
	      l=(l+1)%2;
	    }
	  }
	  block-&gt;outptr[0][j]=(double) l;
	}
      }
      break;

    case 5:
      for (j=0;j&lt;block-&gt;insz[0];j++) {
	if(block-&gt;inptr[0][j]&gt;0) {
	  block-&gt;outptr[0][j]=0.0;
	}
	else{
	  block-&gt;outptr[0][j]=1.0;
	}
      }
    }
}
</PRE>

<H3><font color="blue"><A NAME="SECTION00027000000000000000">
Authors</A>
</font></H3>
<b>Ramine Nikoukhah</b> INRIA

<BR>




</BODY>
</HTML>
