<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<!--Converted with LaTeX2HTML 2002-2-1 (1.71)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>ricc_m_routcos</TITLE>
<META NAME="description" CONTENT="ricc_m_routcos">
<META NAME="keywords" CONTENT="ricc_m_routcos">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="ricc_m_routcos.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<P>
<DIV ALIGN="CENTER">
Computational routine
<BR><A NAME="tex2html1"
  HREF="./ricc_m_routcos.htm">eng</A>

</DIV>
<H2><A NAME="SECTION00010000000000000000"></A><A NAME="ricc_m_routcos"></A>
<BR>
ricc_m
</H2>

<H3><font color="blue"><A NAME="SECTION00011000000000000000">
File content</A>
</font></H3>
<BR>
<PRE  CLASS="verbatim"># include "scicos_block4.h"
# include "../machine.h"
extern int C2F(riccsl)();
extern int C2F(riccms)();
extern int C2F(ricdsl)();
extern int C2F(ricdmf)();

#if WIN32
#define NULL    0
#endif

#ifndef min
#define min(a,b) ((a) &lt;= (b) ? (a) : (b))
#endif

#ifndef max
#define max(a,b) ((a) &gt;= (b) ? (a) : (b))
#endif

typedef struct
{         int *bwork;
          int *iwork;
          double *dwork;
	  double *LX;
	  double *LWI;
	  double *LWR;
	  double *Rcond;
	  double *Ferr;
} ricc_struct ;
void ricc_m(scicos_block *block,int flag)
{
 double *u1;
 double *u2;
 double *u3;
 double *y;
 int *ipar;
 int nu;
 int info,i;
 int lw;
 ricc_struct *ptr;

 nu =GetInPortCols(block,1);
 u1=GetRealInPortPtrs(block,1);
 u2=GetRealInPortPtrs(block,2);
 u3=GetRealInPortPtrs(block,3);
 y=GetRealOutPortPtrs(block,1);
 ipar=GetIparPtrs(block);
 if (ipar[0]==1)
    {if (ipar[1]==1)
	 {lw=9*nu*nu+4*nu+max(1,6*nu);}
     else
	 {lw=9*nu*nu+7*nu+1;}}
 else
     {if (ipar[1]==1)
	 {lw=12*nu*nu+22*nu+max(21,4*nu);}
     else
	 {lw=28*nu*nu+2*nu+max(1,2*nu);}}

             /*init : initialization*/
if (flag==4)
   {if((*(block-&gt;work)=(ricc_struct*) scicos_malloc(sizeof(ricc_struct)))==NULL)
	{set_block_error(-16);
	 return;}
    ptr=*(block-&gt;work);
    if((ptr-&gt;bwork=(int*) scicos_malloc(sizeof(int)*2*nu))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;iwork=(int*) scicos_malloc(sizeof(int)*max(2*nu,nu*nu)))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;bwork);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;dwork=(double*) scicos_malloc(sizeof(double)*lw))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;iwork);
	 scicos_free(ptr-&gt;bwork);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;LWR=(double*) scicos_malloc(sizeof(double)*nu))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;dwork);
	 scicos_free(ptr-&gt;iwork);
	 scicos_free(ptr-&gt;bwork);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;LWI=(double*) scicos_malloc(sizeof(double)*nu))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;LWR);
	 scicos_free(ptr-&gt;dwork);
	 scicos_free(ptr-&gt;iwork);
	 scicos_free(ptr-&gt;bwork);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;Rcond=(double*) scicos_malloc(sizeof(double)))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;LWI);
	 scicos_free(ptr-&gt;LWR);
	 scicos_free(ptr-&gt;dwork);
	 scicos_free(ptr-&gt;iwork);
	 scicos_free(ptr-&gt;bwork);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;Ferr=(double*) scicos_malloc(sizeof(double)))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;Rcond);
	 scicos_free(ptr-&gt;LWI);
	 scicos_free(ptr-&gt;LWR);
	 scicos_free(ptr-&gt;dwork);
	 scicos_free(ptr-&gt;iwork);
	 scicos_free(ptr-&gt;bwork);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;LX=(double*) scicos_malloc(sizeof(double)*nu*nu))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;Ferr);
	 scicos_free(ptr-&gt;Rcond);
	 scicos_free(ptr-&gt;LWI);
	 scicos_free(ptr-&gt;LWR);
	 scicos_free(ptr-&gt;dwork);
	 scicos_free(ptr-&gt;iwork);
	 scicos_free(ptr-&gt;bwork);
	 scicos_free(ptr);
	 return;}
   }

       /* Terminaison */
else if (flag==5)
   {ptr=*(block-&gt;work);
    if((ptr-&gt;LX)!=NULL){
    	scicos_free(ptr-&gt;bwork);
    	scicos_free(ptr-&gt;Ferr);
    	scicos_free(ptr-&gt;Rcond);
    	scicos_free(ptr-&gt;iwork);
    	scicos_free(ptr-&gt;LWR);
    	scicos_free(ptr-&gt;LWI);
    	scicos_free(ptr-&gt;LX);
    	scicos_free(ptr-&gt;dwork);
    	scicos_free(ptr);
    	return;}
   }

else
   {
    ptr=*(block-&gt;work);
    if (ipar[0]==1)
       {if (ipar[1]==1)
            {C2F(riccsl)("N",&amp;nu,u1,&amp;nu,"U",u3,&amp;nu,u2,&amp;nu,ptr-&gt;LX,&amp;nu,ptr-&gt;LWR,ptr-&gt;LWI,ptr-&gt;Rcond,ptr-&gt;Ferr,ptr-&gt;dwork,&amp;lw,ptr-&gt;iwork,ptr-&gt;bwork,&amp;info);}
         else
	    {C2F(riccms)("N",&amp;nu,u1,&amp;nu,"U",u3,&amp;nu,u2,&amp;nu,ptr-&gt;LX,&amp;nu,ptr-&gt;LWR,ptr-&gt;LWI,ptr-&gt;Rcond,ptr-&gt;Ferr,ptr-&gt;dwork,&amp;lw,ptr-&gt;iwork,&amp;info);}}
     else
         {if (ipar[1]==1)
	     {C2F(ricdsl)("N",&amp;nu,u1,&amp;nu,"U",u3,&amp;nu,u2,&amp;nu,ptr-&gt;LX,&amp;nu,ptr-&gt;LWR,ptr-&gt;LWI,ptr-&gt;Rcond,ptr-&gt;Ferr,ptr-&gt;dwork,&amp;lw,ptr-&gt;iwork,ptr-&gt;bwork,&amp;info);}
          else
	     {C2F(ricdmf)("N",&amp;nu,u1,&amp;nu,"U",u3,&amp;nu,u2,&amp;nu,ptr-&gt;LX,&amp;nu,ptr-&gt;LWR,ptr-&gt;LWI,ptr-&gt;Rcond,ptr-&gt;Ferr,ptr-&gt;dwork,&amp;lw,ptr-&gt;iwork,&amp;info);}}
     if (info!=0)
	{if (flag!=6)
	    {set_block_error(-7);
             return;
	    }
	}
     for(i=0;i&lt;nu*nu;i++) *(y+i)=*(ptr-&gt;LX+i);
    }
}
</PRE>

<BR>




</BODY>
</HTML>
