<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<!--Converted with LaTeX2HTML 2002-2-1 (1.71)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>canimxy3d_routcos</TITLE>
<META NAME="description" CONTENT="canimxy3d_routcos">
<META NAME="keywords" CONTENT="canimxy3d_routcos">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="canimxy3d_routcos.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<P>
<DIV ALIGN="CENTER">
Computational routine
<BR><A NAME="tex2html1"
  HREF="./canimxy3d_routcos.htm">eng</A>

</DIV>
<H2><A NAME="SECTION00010000000000000000"></A><A NAME="canimxy3d_routcos"></A>
<BR>
canimxy3d
</H2>

<H3><font color="blue"><A NAME="SECTION00011000000000000000">
File content</A>
</font></H3>
<BR>
<PRE  CLASS="verbatim">/**
   \file canimxy3d.c
   \author Benoit Bayol
   \version 1.0
   \date September 2006 - January 2007
   \brief CANIMXY3D is a scope in 3D which draw its input as a XY scope, there is animation.
   \see CANIMXY3D.sci in macros/scicos_blocks/Sinks/
*/

#include "scoMemoryScope.h"
#include "scoWindowScope.h"
#include "scoMisc.h"
#include "scoGetProperty.h"
#include "scoSetProperty.h"
#include "scicos_block4.h"

/** \fn canimxy3d_draw(scicos_block * block, ScopeMemory ** pScopeMemory, int firstdraw)
    \brief Function to draw or redraw the window
*/
void canimxy3d_draw(scicos_block * block, ScopeMemory ** pScopeMemory, int firstdraw)
{
  int i; //As usual
  int * ipar; //Integer Parameters
  int color_number; //Flag on Color
  int * color;
  int * line_size;
  int nbr_curves;
  int animed;
  int win; //Windows ID : To give a name to the window
  int buffer_size; //Buffer Size
  int win_pos[2]; //Position of the Window
  int win_dim[2]; //Dimension of the Window
  int nipar;
  double * rpar; //Reals parameters
  double xmin, xmax, ymin, ymax, zmin, zmax,alpha,theta; //Ymin and Ymax are vectors here
  scoGraphicalObject Pinceau; //Pointer to each polyline of each axes
  scoGraphicalObject Gomme; //Pointer to each polyline of each axes
  scoGraphicalObject Trait; //Pointer to each trache of each axes
  int number_of_subwin;
  int number_of_curves_by_subwin;
  int dimension = 3;
  int gomme_color;
  int size=0;

  ipar = GetIparPtrs(block);
  nipar = GetNipar(block);
  rpar = GetRparPtrs(block);
  win = ipar[0];
  color_number = ipar[1];
  buffer_size = ipar[2];
  color = (int*)scicos_malloc(color_number*sizeof(int));
  line_size = (int*)scicos_malloc(color_number*sizeof(int));
  for(i = 0 ; i &lt; color_number ; i++)
    {
      color[i] = ipar[i+3];
      line_size[i] = ipar[i+3+color_number];
    }
  size = 2*color_number;
  animed = ipar[size+3];
  win_pos[0] = ipar[size+4];
  win_pos[1] = ipar[size+5];
  win_dim[0] = ipar[size+6];
  win_dim[1] = ipar[size+7];
  xmin = rpar[0];
  xmax = rpar[1];
  ymin = rpar[2];
  ymax = rpar[3];
  zmin = rpar[4];
  zmax = rpar[5];
  alpha = rpar[6];
  theta = rpar[7];
  number_of_subwin = 1;
  nbr_curves = ipar[size+8];


  /* If only one element to draw*/
  if (buffer_size == 1)
    {
      number_of_curves_by_subwin = nbr_curves;
      if(firstdraw == 1)
	{
	  scoInitScopeMemory(block-&gt;work,pScopeMemory, number_of_subwin, &amp;number_of_curves_by_subwin);
	  scoSetShortDrawSize(*pScopeMemory,0,1);
	  scoSetLongDrawSize(*pScopeMemory,0,0);
	}

      scoInitOfWindow(*pScopeMemory, dimension, win, win_pos, win_dim, &amp;xmin, &amp;xmax, &amp;ymin, &amp;ymax, &amp;zmin, &amp;zmax);
      if(scoGetScopeActivation(*pScopeMemory) == 1)
	{ 
	  pFIGURE_FEATURE(scoGetPointerScopeWindow(*pScopeMemory))-&gt;pixmap = 1;
	  pFIGURE_FEATURE(scoGetPointerScopeWindow(*pScopeMemory))-&gt;wshow = 1;

	  for(i = 0 ; i &lt; scoGetNumberOfCurvesBySubwin(*pScopeMemory, 0) ; i++)
	    {
	      scoAddPolylineForShortDraw(*pScopeMemory,0,i,color[i]);
	      Pinceau = scoGetPointerShortDraw(*pScopeMemory,0,i);

	      sciSetMarkSize(Pinceau, line_size[i]);

	      pPOLYLINE_FEATURE(Pinceau)-&gt;n1 = 1;
	    }
	}
    }
  /*else if 2 or more elements*/
  else
    {
      number_of_curves_by_subwin = 2*nbr_curves; //it is a trick to recognize the type of scope, not sure it is a good way because normally a curve is the combination of a short and a longdraw
      if(firstdraw == 1)
	{
	  scoInitScopeMemory(block-&gt;work,pScopeMemory, number_of_subwin, &amp;number_of_curves_by_subwin);
	}
      scoInitOfWindow(*pScopeMemory, dimension, win, win_pos, win_dim, &amp;xmin, &amp;xmax, &amp;ymin, &amp;ymax, &amp;zmin, &amp;zmax);
      if(scoGetScopeActivation(*pScopeMemory) == 1)
	{
	  gomme_color = sciGetBackground(scoGetPointerAxes(*pScopeMemory,0));
	  /*if mark style*/
	  if(color[0] &lt; 0)
	    {
	      if(firstdraw == 1)
		{
		  scoSetShortDrawSize(*pScopeMemory,0,1);
		  scoSetLongDrawSize(*pScopeMemory,0,buffer_size-1);
		}
	      for(i = 0 ; i &lt; nbr_curves ; i++)
		{
		  //because of color[0] is negative it will add a black mark with style number color[0]
		  scoAddPolylineForShortDraw(*pScopeMemory,0,i,color[i]);
		  scoAddPolylineForShortDraw(*pScopeMemory,0,i+nbr_curves,color[i]); //same type of mark and black for the rubber
		  scoAddPolylineForLongDraw(*pScopeMemory,0,i,color[i]);
		    
		  Pinceau = scoGetPointerShortDraw(*pScopeMemory,0,i);
		  Gomme = scoGetPointerShortDraw(*pScopeMemory,0,i+nbr_curves);
		  Trait = scoGetPointerLongDraw(*pScopeMemory,0,i);

		  sciSetMarkSize(Pinceau, line_size[i]);
		  sciSetMarkSize(Gomme, line_size[i]);
		  sciSetMarkSize(Trait, line_size[i]);		   
 
		  pPOLYLINE_FEATURE(Pinceau)-&gt;n1 = 1;
		  pPOLYLINE_FEATURE(Gomme)-&gt;n1 = 1;
		  sciSetMarkForeground(Gomme, gomme_color); //here the rubber becomes colored like the background of the axes
		  pPOLYLINE_FEATURE(Trait)-&gt;n1 = buffer_size-1;
		}
	    }
	
	  /*if line style*/
	  else
	    {
	      if(firstdraw == 1)
		{
		  scoSetShortDrawSize(*pScopeMemory,0,2);
		  scoSetLongDrawSize(*pScopeMemory,0,buffer_size);
		}

	      for(i = 0 ; i &lt; nbr_curves ; i++)
		{
		  scoAddPolylineForShortDraw(*pScopeMemory,0,i,color[i]);
		  scoAddPolylineForShortDraw(*pScopeMemory,0,i+nbr_curves,gomme_color);
		  scoAddPolylineForLongDraw(*pScopeMemory,0,i,color[i]);
		    
		  Pinceau = scoGetPointerShortDraw(*pScopeMemory,0,i);
		  Gomme = scoGetPointerShortDraw(*pScopeMemory,0,i+nbr_curves);
		  Trait = scoGetPointerLongDraw(*pScopeMemory,0,i);
		    
		  sciSetLineWidth(Pinceau, line_size[i]);
		  sciSetLineWidth(Gomme, line_size[i]);
		  sciSetLineWidth(Trait, line_size[i]);

		  pPOLYLINE_FEATURE(Pinceau)-&gt;n1 = 2;
		  pPOLYLINE_FEATURE(Gomme)-&gt;n1 = 2;
		  pPOLYLINE_FEATURE(Trait)-&gt;n1 = buffer_size;
		}
	    }
	}
    }
  if(scoGetScopeActivation(*pScopeMemory) == 1)
    {
      pSUBWIN_FEATURE(scoGetPointerAxes(*pScopeMemory,0))-&gt;alpha = alpha;
      pSUBWIN_FEATURE(scoGetPointerAxes(*pScopeMemory,0))-&gt;theta = theta;
      
      scoAddTitlesScope(*pScopeMemory,"x","y","z");
    }
  scicos_free(color);
  scicos_free(line_size);
}
/** \fn void canimxy3d(scicos_block * block, int flag)
    \brief the computational function
    \param block A pointer to a scicos_block
    \param flag An integer which indicates the state of the block (init, update, ending)
*/
void canimxy3d(scicos_block * block, int flag)
{
  /* Declarations*/
  double *u1,*u2,*u3;
  ScopeMemory * pScopeMemory;
  scoGraphicalObject pShortDraw;
  /* State Machine Control */
  switch(flag)
    {
    case Initialization:
      {	
	
	canimxy3d_draw(block,&amp;pScopeMemory,1);
	break; //Break of the switch condition don t forget it
      } //End of Initialization

    case StateUpdate:
      {
	scoRetrieveScopeMemory(block-&gt;work,&amp;pScopeMemory);
	if(scoGetScopeActivation(pScopeMemory) == 1)
	  {
	    /* Charging Elements */
	if (scoGetPointerScopeWindow(pScopeMemory) == NULL) // If the window has been destroyed we recreate it
	  {
	    canimxy3d_draw(block,&amp;pScopeMemory,0);
	  }

	/*Retrieve Elements*/
	u1 = GetRealInPortPtrs(block,1);
	u2 = GetRealInPortPtrs(block,2);
	u3 = GetRealInPortPtrs(block,3);

	scoDrawScopeAnimXYStyle(pScopeMemory,u1,u2,u3);
	  }
	break; //Break of the switch don t forget it !
      }//End of stateupdate
      
      //This case is activated when the simulation is done or when we close scicos
    case Ending:
      {
	scoRetrieveScopeMemory(block-&gt;work, &amp;pScopeMemory);
	if(scoGetScopeActivation(pScopeMemory) == 1)
	  {
	    sciSetUsedWindow(scoGetWindowID(pScopeMemory));
	    pShortDraw = sciGetCurrentFigure();
	    pFIGURE_FEATURE(pShortDraw)-&gt;user_data = NULL;
	    pFIGURE_FEATURE(pShortDraw)-&gt;size_of_user_data = 0;
	  }
	scoFreeScopeMemory(block-&gt;work, &amp;pScopeMemory);
	break; //Break of the switch
      }
      //free the memory which is allocated at each turn by some variables
 
    }
}
</PRE>

<BR>




</BODY>
</HTML>
