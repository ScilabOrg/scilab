<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">

<!--Converted with LaTeX2HTML 2002-2-1 (1.71)
original version by:  Nikos Drakos, CBLU, University of Leeds
* revised and updated by:  Marcus Hennecke, Ross Moore, Herb Swan
* with significant contributions from:
  Jens Lippmann, Marek Rouchal, Martin Wilck and others -->
<HTML>
<HEAD>
<TITLE>RICC</TITLE>
<META NAME="description" CONTENT="RICC">
<META NAME="keywords" CONTENT="RICC">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">

<META NAME="Generator" CONTENT="LaTeX2HTML v2002-2-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">

<LINK REL="STYLESHEET" HREF="RICC.css">

</HEAD>

<BODY bgcolor="#FFFFFF">

<P>
<DIV ALIGN="CENTER">
Scicos Block
<BR><A NAME="tex2html1"
  HREF="../../fr/scicos/RICC.htm">fr</A> - <A NAME="tex2html2"
  HREF="./RICC.htm">eng</A>

</DIV>
<H2><A NAME="SECTION00010000000000000000"></A><A NAME="RICC"></A>
<BR>
RICC title
</H2>
<DIV ALIGN="CENTER">
<!-- MATH
 $\epsfig{file=RICC.eps,width=90.00pt}$
 -->
<IMG
 WIDTH="143" HEIGHT="152" ALIGN="BOTTOM" BORDER="0"
 SRC="../../images/scicos/RICC_blk.gif"
 ALT="\epsfig{file=RICC.eps,width=90.00pt}">

</DIV>
<BR>

<H3><font color="blue"><A NAME="SECTION00020000000000000000">
Contents</A>
</font></H3>
<!--Table of Contents-->

<UL CLASS="TofC">
<LI><A NAME="tex2html5"
  HREF="RICC.htm#SECTION00010000000000000000">RICC title</A>
<UL>
<LI><A NAME="tex2html6"
  HREF="RICC.htm#SECTION00021000000000000000">Palette</A>
<LI><A NAME="tex2html7"
  HREF="RICC.htm#SECTION00022000000000000000">Description</A>
<LI><A NAME="tex2html8"
  HREF="RICC.htm#SECTION00023000000000000000">Dialog box</A>
<LI><A NAME="tex2html9"
  HREF="RICC.htm#SECTION00024000000000000000">Default properties</A>
<LI><A NAME="tex2html10"
  HREF="RICC.htm#SECTION00025000000000000000">Interfacing function</A>
<LI><A NAME="tex2html11"
  HREF="RICC.htm#SECTION00026000000000000000">Computational function (type 4)</A>
<LI><A NAME="tex2html12"
  HREF="RICC.htm#SECTION00027000000000000000">Used functions</A>
<LI><A NAME="tex2html13"
  HREF="RICC.htm#SECTION00028000000000000000">See also</A>
<LI><A NAME="tex2html14"
  HREF="RICC.htm#SECTION00029000000000000000">Authors</A>
</UL></UL>
<!--End of Table of Contents-->
<H3><font color="blue"><A NAME="SECTION00021000000000000000">
Palette</A>
</font></H3>

<UL>
<LI><A NAME="tex2html3"
  HREF="Matrix_pal.htm">Matrix - Matrix title</A>
</LI>
</UL>
<H3><font color="blue"><A NAME="SECTION00022000000000000000">
Description</A>
</font></H3>

<P>
This block computes the solution of riccati equation using different method and for both case continuous and discrete. 
<BR>
The riccati equation in continuous time is: 
<BR>
A*X+X*A+C-X*D*X=0  
<BR>
The riccati equation in discrete time is: 
<BR>
A*X*(inv(In-D))*A-X+C=0 
<BR>
where A is an NxN matrix, it is the first input of the block, C and D are two NxN symetrics matrices and are respectivly the second and third input of the RICC block. X represent the output of the block, it is also a NxN matrix. 
<BR>
the user can choose between two methods of computation. For the continuous time he can use even the Schur method or the matrix sign function approach method, by setting the Model parameter to 1 or 2. For the discrete time, the models are the Schur method and the inverse free spectral decomposition method.  
<BR>
<H3><font color="blue"><A NAME="SECTION00023000000000000000">
Dialog box</A>
</font></H3>

<DIV ALIGN="CENTER">
<IMG
 WIDTH="477" HEIGHT="107" BORDER="0"
 SRC="../../images/scicos/RICC_gui.gif"
 ALT="\begin{figure}\begin{center}
\epsfig{file=RICC_gui.eps,width=300pt}
\end{center}\end{figure}">
</DIV>

<P>

<UL>
<LI><b>Type (1=Cont  2=Disc)</b>
<BR>
For continuous time signal set this parameter to 1. For discrete input time set it to 2.
<BR>
Properties : Type 'vec' of size 1.
</LI>
<LI><b>Model(1=Schr  2=sign(cont) inv(disc))</b>
<BR>
To use the Shur method in computation set this parameter to 1. To use matrix sign function approach in continuous case or the inverse free spectral decomposition method in discrete case set this parameter to 2.
<BR>
Properties : Type 'vec' of size 1.
</LI>
</UL>

<H3><font color="blue"><A NAME="SECTION00024000000000000000">
Default properties</A>
</font></H3>

<UL>
<LI><b>always active:</b> no
</LI>
<LI><b>direct-feedthrough:</b> yes
</LI>
<LI><b>zero-crossing:</b> no
</LI>
<LI><b>mode:</b> no
</LI>
<LI><b>number/sizes of inputs:</b> 3 / -1  -1  -1
</LI>
<LI><b>number/sizes of outputs:</b> 1 / -1
</LI>
<LI><b>number/sizes of activation inputs:</b> 0 / 
</LI>
<LI><b>number/sizes of activation outputs:</b> 0 / 
</LI>
<LI><b>continuous-time state:</b> no
</LI>
<LI><b>discrete-time state:</b> no
</LI>
<LI><b>name of computational function:</b> <EM>ricc_m</EM>
</LI>
</UL>

<H3><font color="blue"><A NAME="SECTION00025000000000000000">
Interfacing function</A>
</font></H3>
<TT>RICC.sci</TT>

<H3><font color="blue"><A NAME="SECTION00026000000000000000">
Computational function (type 4)</A>
</font></H3>
 <SMALL CLASS="TINY">  </SMALL>
<BR>
<PRE  CLASS="verbatim"># include "scicos_block4.h"
# include "../machine.h"
extern int C2F(riccsl)();
extern int C2F(riccms)();
extern int C2F(ricdsl)();
extern int C2F(ricdmf)();

#if WIN32
#define NULL    0
#endif

#ifndef min
#define min(a,b) ((a) &lt;= (b) ? (a) : (b))
#endif

#ifndef max
#define max(a,b) ((a) &gt;= (b) ? (a) : (b))
#endif

typedef struct
{         int *bwork;
          int *iwork;
          double *dwork;
	  double *LX;
	  double *LWI;
	  double *LWR;
	  double *Rcond;
	  double *Ferr;
} ricc_struct ;
void ricc_m(scicos_block *block,int flag)
{
 double *u1;
 double *u2;
 double *u3;
 double *y;
 int *ipar;
 int nu;
 int info,i;
 int lw;
 ricc_struct *ptr;

 nu =GetInPortCols(block,1);
 u1=GetRealInPortPtrs(block,1);
 u2=GetRealInPortPtrs(block,2);
 u3=GetRealInPortPtrs(block,3);
 y=GetRealOutPortPtrs(block,1);
 ipar=GetIparPtrs(block);
 if (ipar[0]==1)
    {if (ipar[1]==1)
	 {lw=9*nu*nu+4*nu+max(1,6*nu);}
     else
	 {lw=9*nu*nu+7*nu+1;}}
 else
     {if (ipar[1]==1)
	 {lw=12*nu*nu+22*nu+max(21,4*nu);}
     else
	 {lw=28*nu*nu+2*nu+max(1,2*nu);}}

             /*init : initialization*/
if (flag==4)
   {if((*(block-&gt;work)=(ricc_struct*) scicos_malloc(sizeof(ricc_struct)))==NULL)
	{set_block_error(-16);
	 return;}
    ptr=*(block-&gt;work);
    if((ptr-&gt;bwork=(int*) scicos_malloc(sizeof(int)*2*nu))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;iwork=(int*) scicos_malloc(sizeof(int)*max(2*nu,nu*nu)))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;bwork);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;dwork=(double*) scicos_malloc(sizeof(double)*lw))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;iwork);
	 scicos_free(ptr-&gt;bwork);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;LWR=(double*) scicos_malloc(sizeof(double)*nu))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;dwork);
	 scicos_free(ptr-&gt;iwork);
	 scicos_free(ptr-&gt;bwork);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;LWI=(double*) scicos_malloc(sizeof(double)*nu))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;LWR);
	 scicos_free(ptr-&gt;dwork);
	 scicos_free(ptr-&gt;iwork);
	 scicos_free(ptr-&gt;bwork);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;Rcond=(double*) scicos_malloc(sizeof(double)))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;LWI);
	 scicos_free(ptr-&gt;LWR);
	 scicos_free(ptr-&gt;dwork);
	 scicos_free(ptr-&gt;iwork);
	 scicos_free(ptr-&gt;bwork);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;Ferr=(double*) scicos_malloc(sizeof(double)))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;Rcond);
	 scicos_free(ptr-&gt;LWI);
	 scicos_free(ptr-&gt;LWR);
	 scicos_free(ptr-&gt;dwork);
	 scicos_free(ptr-&gt;iwork);
	 scicos_free(ptr-&gt;bwork);
	 scicos_free(ptr);
	 return;}
    if((ptr-&gt;LX=(double*) scicos_malloc(sizeof(double)*nu*nu))==NULL)
	{set_block_error(-16);
	 scicos_free(ptr-&gt;Ferr);
	 scicos_free(ptr-&gt;Rcond);
	 scicos_free(ptr-&gt;LWI);
	 scicos_free(ptr-&gt;LWR);
	 scicos_free(ptr-&gt;dwork);
	 scicos_free(ptr-&gt;iwork);
	 scicos_free(ptr-&gt;bwork);
	 scicos_free(ptr);
	 return;}
   }

       /* Terminaison */
else if (flag==5)
   {ptr=*(block-&gt;work);
    if((ptr-&gt;LX)!=NULL){
    	scicos_free(ptr-&gt;bwork);
    	scicos_free(ptr-&gt;Ferr);
    	scicos_free(ptr-&gt;Rcond);
    	scicos_free(ptr-&gt;iwork);
    	scicos_free(ptr-&gt;LWR);
    	scicos_free(ptr-&gt;LWI);
    	scicos_free(ptr-&gt;LX);
    	scicos_free(ptr-&gt;dwork);
    	scicos_free(ptr);
    	return;}
   }

else
   {
    ptr=*(block-&gt;work);
    if (ipar[0]==1)
       {if (ipar[1]==1)
            {C2F(riccsl)("N",&amp;nu,u1,&amp;nu,"U",u3,&amp;nu,u2,&amp;nu,ptr-&gt;LX,&amp;nu,ptr-&gt;LWR,ptr-&gt;LWI,ptr-&gt;Rcond,ptr-&gt;Ferr,ptr-&gt;dwork,&amp;lw,ptr-&gt;iwork,ptr-&gt;bwork,&amp;info);}
         else
	    {C2F(riccms)("N",&amp;nu,u1,&amp;nu,"U",u3,&amp;nu,u2,&amp;nu,ptr-&gt;LX,&amp;nu,ptr-&gt;LWR,ptr-&gt;LWI,ptr-&gt;Rcond,ptr-&gt;Ferr,ptr-&gt;dwork,&amp;lw,ptr-&gt;iwork,&amp;info);}}
     else
         {if (ipar[1]==1)
	     {C2F(ricdsl)("N",&amp;nu,u1,&amp;nu,"U",u3,&amp;nu,u2,&amp;nu,ptr-&gt;LX,&amp;nu,ptr-&gt;LWR,ptr-&gt;LWI,ptr-&gt;Rcond,ptr-&gt;Ferr,ptr-&gt;dwork,&amp;lw,ptr-&gt;iwork,ptr-&gt;bwork,&amp;info);}
          else
	     {C2F(ricdmf)("N",&amp;nu,u1,&amp;nu,"U",u3,&amp;nu,u2,&amp;nu,ptr-&gt;LX,&amp;nu,ptr-&gt;LWR,ptr-&gt;LWI,ptr-&gt;Rcond,ptr-&gt;Ferr,ptr-&gt;dwork,&amp;lw,ptr-&gt;iwork,&amp;info);}}
     if (info!=0)
	{if (flag!=6)
	    {set_block_error(-7);
             return;
	    }
	}
     for(i=0;i&lt;nu*nu;i++) *(y+i)=*(ptr-&gt;LX+i);
    }
}
</PRE>

<H3><font color="blue"><A NAME="SECTION00027000000000000000">
Used functions</A>
</font></H3>
<b>ricc_m.c</b>

<H3><font color="blue"><A NAME="SECTION00028000000000000000">
See also</A>
</font></H3>

<UL>
<LI><A NAME="tex2html4"
  HREF="Matrix_pal.htm">Matrix_pal - Matrix title (Scicos Palette)</A>
</LI>
</UL>

<H3><font color="blue"><A NAME="SECTION00029000000000000000">
Authors</A>
</font></H3>
<b>Fady NASSIF</b> INRIA

<BR>




</BODY>
</HTML>
