#!/bin/sh
#
# Hook used to indent all xcos files before commiting
#


#
# Pre-conditions
#
if test -d ".git/rebase-merge"          || \
   test -d ".git/rebase-apply"          || \
   test -f ".git/MERGE_HEAD"            || \
   test -f ".git/CHERRY_PICK_HEAD"      || \
   test -f ".git/BISECT_LOG"            
then
	exit 0
fi

#
# Configuration check
#
XMLINDENT="$(git config --get hooks.xmlindent)"

if test ! -x "$XMLINDENT"
then
	echo "Unable to find xmlindent executable on the configuration."
	echo
	echo "Please configure it with :"
	echo "  git config --global hooks.xmlindent C:/path/to/xmlindent"
	echo " or "
	echo "  git config --global hooks.xmlindent /usr/bin/xmlindent"
	echo
fi

if test -z "$(git config --get-all xmlindent.ignored)"
then
	echo "Unable to find xmlindent ignored list on the configuration, ignored"
	echo
	echo "You can configure it with :"
	echo "  git config --add xmlindent.ignored 'scilab/Visual-Studio-settings/*.xml' "
	echo "  git config --add xmlindent.ignored 'scilab/checkstyle/*.xml' "
	echo
	
	XMLINDENT_IGNORED=""
else
	XMLINDENT_IGNORED="$(find $(git config --get-all xmlindent.ignored))"
fi

INDENT="$(git config --get hooks.indent)"
if test ! -x "$INDENT"
then
	echo "Unable to find indent executable on the configuration."
	echo
	echo "Please configure it with :"
	echo "  git config --global hooks.indent C:/path/to/indent"
	echo " or "
	echo "  git config --global hooks.indent /usr/bin/indent"
	echo
fi

if test -z "$(git config --get-all indent.ignored)"
then
	echo "Unable to find indent ignored list on the configuration, ignored"
	echo
	echo "You can configure it with :"
	echo "  git config --add indent.ignored 'scilab/modules/*/src/jni/*.hxx' "
	echo "  git config --add indent.ignored 'scilab/modules/*/src/jni/*.cpp' "
	echo "  git config --add indent.ignored 'scilab/modules/*/src/jni/*.c' "
	echo
	
	INDENT_IGNORED=""
else
	INDENT_IGNORED="$(find $(git config --get-all indent.ignored))"
fi

# indent / format file by type
#
indent() {
	# getting against as the current commit
	if git rev-parse --verify HEAD >/dev/null 2>&1
	then
		local against=HEAD
	else
		# Initial commit: diff against an empty tree object
		local against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
	fi

	# loop on modified files
	git diff --cached --name-only $against |while read file;
	do
		local ext=$(expr "$file" : ".*\(\..*\)")
		case $ext in
		.xcos|.xml)
			__indent_Xml;
		;;
		.h|.c|.hxx|.cpp)
			__indent_C;
		;;
		esac
	done
}
# Indent the file with xmlindent if this is an xcos file
__indent_Xml() {

	if test ! -x "$XMLINDENT"
	then
		return;
	fi
	if test ! -f $file
	then
		return;
	fi

	# ignored globs
	if test -n "$XMLINDENT_IGNORED"
	then
		echo $XMLINDENT_IGNORED |grep -q $file
		if test $? -eq 0
		then
			echo "Formatting" $file	": ignored"
			return
		fi
	fi

	echo "Formatting" $file
	"$XMLINDENT" -i 2 -o "$file" "$file"
	git add "$file"
}
# Indent the file with `indent' if this is a C/CPP file
__indent_C() {

	if test ! -x "$INDENT"
	then
		return;
	fi
	if test ! -f $file
	then
		return;
	fi

	# ignored globs
	if test -n "$INDENT_IGNORED"
	then
		echo $INDENT_IGNORED |grep -q "$file"
		if test $? -eq 0
		then
			echo "Indenting" $file	": ignored"
			return
		fi
	fi
        

	echo "Indenting" $file
	"$INDENT" -npro --braces-after-if-line -i4 -ts4 -sob -ss -ncs -sc --no-space-after-parentheses -cp1 --no-tabs -bap -bad -npcs --dont-break-function-decl-args --dont-break-procedure-type -bli0 -l150 -il0 "$file"
	git add "$file"
}

indent

