#!/bin/sh
#
# Hook used to indent all xcos files before commiting
#

XMLLINT="$(git config hooks.xmllint)"
if test ! -x "$XMLLINT"
then
	echo "Unable to find xmllint executable on the configuration."
	echo
	echo "Please configure it with :"
	echo "  git config hooks.xmllint C:/path/to/xmllint"
	echo
fi

INDENT="$(git config hooks.indent)"
if test ! -x "$INDENT"
then
	echo "Unable to find indent executable on the configuration."
	echo
	echo "Please configure it with :"
	echo "  git config hooks.indent C:/path/to/indent"
	echo
fi

# indent / format file by type
indent() {
	# getting against as the current commit
	if git rev-parse --verify HEAD >/dev/null 2>&1
	then
		local against=HEAD
	else
		# Initial commit: diff against an empty tree object
		local against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
	fi

	# loop on modified files
	git diff --cached --name-only $against |while read file;
	do
		local ext=$(expr "$file" : ".*\(\..*\)")
		case $ext in
		.xcos)
			__indent_Xml;
		;;
		.xml)
			__indent_Xml;
		;;
		.c)
			__indent_C;
		;;
		.cpp)
			__indent_C;
		;;
		esac
	done
}
# Indent the file with xmllint if this is an xcos file
__indent_Xml() {
	if test ! -x "$XMLLINT"
	then
		return;
	fi
	if test ! -f $file
	then
		return;
	fi

	echo "Formatting " $file
	"$XMLLINT" --format -o "$file" "$file"
	git add "$file"
}
# Indent the file with `indent' if this is a C/CPP file
__indent_C() {
	if test ! -x "$INDENT"
	then
		return;
	fi
	if test ! -f $file
	then
		return;
	fi

	echo "Indenting " $file
	"$INDENT" -npro --braces-after-if-line -i4 -ts4 -sob -ss -ncs -sc --no-space-after-parentheses -cp1 --no-tabs -bap -bad -npcs --dont-break-function-decl-args --dont-break-procedure-type -bli0 -l150 -il0 "$file"
	git add "$file"
}

indent
